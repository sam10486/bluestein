#include <vector>
#include <iostream>
#include <fstream>
#include <math.h>
#include <sstream>

#include "CLA.h"

void CLA::gen(std::string string_in){
	 CLA1(string_in);
     CLA2(string_in);
     CLA3(string_in);
     CLA4(string_in);
     CLA6(string_in);
     CLA16(string_in);
     CLA16clg(string_in);
     CLA24(string_in);
     CLA24clg(string_in);
     CLA32(string_in);
     CLA32clg(string_in);
     CLA64(string_in);
     CLA64_co(string_in);
     CLA64clg(string_in);
     CLA64clg_co(string_in);
     CLA65(string_in);
     CLA65clg(string_in);
     CLA96(string_in);
     CLA96clg(string_in);
     CLA144(string_in);
     CLA144clg(string_in);
     CLA192(string_in);
     CLA192clg(string_in);
     CLA432(string_in);
     CLA432clg(string_in);  
}
void CLA::CLA1(std::string string_in){
	 std::ofstream cla1;
     std::string        string_buf = "/CLA1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 cla1.open(ss.str());
     cla1 << " `timescale 1 ns/1 ps                                                   \n";
     cla1 << " module CLA1(sum,                                                       \n";
     cla1 << "             g_out,                                                     \n";
     cla1 << "             p_out,                                                     \n";
     cla1 << "             a_in,                                                      \n";
     cla1 << "             b_in,                                                      \n";
     cla1 << "             c_in                                                       \n";
     cla1 << "             ) ;                                                        \n";
     cla1 << "                                                                        \n";
     cla1 << " output                sum ;                                            \n";
     cla1 << " output                g_out ;                                          \n";
     cla1 << " output                p_out ;                                          \n";
     cla1 << "                                                                        \n";
     cla1 << " input                 a_in ;                                           \n";
     cla1 << " input                 b_in ;                                           \n";
     cla1 << " input                 c_in ;                                           \n";
     cla1 << "                                                                        \n";
     cla1 << " wire                  g_wire ;                                         \n";
     cla1 << " wire                  p_wire ;                                         \n";
     cla1 << "                                                                        \n";
     cla1 << "                                                                        \n";
     cla1 << "  //generate g                                                          \n";
     cla1 << "  assign g_wire = a_in & b_in ;                                         \n";
     cla1 << "  //propagate p                                                         \n";
     cla1 << "  assign p_wire = a_in ^ b_in ;                                         \n";
     cla1 << "                                                                        \n";
     cla1 << "  //SUM                                                                 \n";
     cla1 << "  assign sum = a_in^b_in^c_in ;                                         \n";
     cla1 << "                                                                        \n";
     cla1 << "  //                                                                    \n";
     cla1 << "  assign g_out = g_wire|                                                \n";
     cla1 << "                 (c_in & p_wire);                                       \n";  
     cla1 << "  assign p_out = p_wire;                                                \n";
     cla1 << "                                                                        \n";
     cla1 << "                                                                        \n";
     cla1 << " endmodule                                                              \n";
	 cla1.close();	
}
void CLA::CLA2(std::string string_in){
	 std::ofstream cla2;
     std::string        string_buf = "/CLA2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 cla2.open(ss.str());
     cla2 << " `timescale 1 ns/1 ps                                                   \n";
     cla2 << " module CLA2(sum,                                                       \n";
     cla2 << "             g_out,                                                     \n";
     cla2 << "             p_out,                                                     \n";
     cla2 << "             a_in,                                                      \n";
     cla2 << "             b_in,                                                      \n";
     cla2 << "             c_in                                                       \n";
     cla2 << "             ) ;                                                        \n";
     cla2 << " parameter CLA_WIDTH = 2 ;                                              \n";
     cla2 << " parameter CLA_ZERO = 2'd0 ;                                            \n";
     cla2 << "                                                                        \n";
     cla2 << " output[CLA_WIDTH-1:0] sum ;                                            \n";
     cla2 << " output                g_out ;                                          \n";
     cla2 << " output                p_out ;                                          \n";
     cla2 << "                                                                        \n";
     cla2 << " input [CLA_WIDTH-1:0] a_in ;                                           \n";
     cla2 << " input [CLA_WIDTH-1:0] b_in ;                                           \n";
     cla2 << " input                 c_in ;                                           \n";
     cla2 << "                                                                        \n";
     cla2 << " wire  [CLA_WIDTH-1:0] g_wire ;                                         \n";
     cla2 << " wire  [CLA_WIDTH-1:0] p_wire ;                                         \n";
     cla2 << " wire                  c_wire ;                                         \n";
     cla2 << "                                                                        \n";
     cla2 << "                                                                        \n";
     cla2 << "                                                                        \n";
     cla2 << "  //generate g                                                          \n";
     cla2 << "  assign g_wire = a_in & b_in ;                                         \n";
     cla2 << "  //propagate p                                                         \n";
     cla2 << "  assign p_wire = a_in ^ b_in ;                                         \n";
     cla2 << "                                                                        \n";
     cla2 << "  //carry lookahead carry generator                                     \n";
     cla2 << "  assign c_wire      = g_wire[0]|                                       \n";
     cla2 << "                       (c_in & p_wire[0]) ;                             \n";
     cla2 << "  //SUM                                                                 \n";
     cla2 << "  assign sum = a_in^b_in^{c_wire, c_in} ;                               \n";
     cla2 << "                                                                        \n";
     cla2 << "  //                                                                    \n";
     cla2 << "  assign g_out = g_wire[1]|                                             \n";
     cla2 << "                 (g_wire[0]&p_wire[1]);                                 \n";  
     cla2 << "  assign p_out = p_wire[1]&p_wire[0] ;                                  \n";
     cla2 << "                                                                        \n";
     cla2 << "                                                                        \n";
     cla2 << " endmodule                                                              \n";
	 cla2.close();	
}
void CLA::CLA3(std::string string_in){
	 std::ofstream cla3;
     std::string        string_buf = "/CLA3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 cla3.open(ss.str());
     cla3 << " `timescale 1 ns/1 ps                                                   \n";
     cla3 << " module CLA3(sum,                                                       \n";
     cla3 << "             g_out,                                                     \n";
     cla3 << "             p_out,                                                     \n";
     cla3 << "             a_in,                                                      \n";
     cla3 << "             b_in,                                                      \n";
     cla3 << "             c_in                                                       \n";
     cla3 << "             ) ;                                                        \n";
     cla3 << " parameter CLA_WIDTH = 3 ;                                              \n";
     cla3 << " parameter CLA_ZERO = 3'd0 ;                                            \n";
     cla3 << " parameter C_1 = 0 ;                                                    \n";
     cla3 << " parameter C_2 = 1 ;                                                    \n";
     cla3 << "                                                                        \n";
     cla3 << " output[CLA_WIDTH-1:0] sum ;                                            \n";
     cla3 << " output                g_out ;                                          \n";
     cla3 << " output                p_out ;                                          \n";
     cla3 << "                                                                        \n";
     cla3 << " input [CLA_WIDTH-1:0] a_in ;                                           \n";
     cla3 << " input [CLA_WIDTH-1:0] b_in ;                                           \n";
     cla3 << " input                 c_in ;                                           \n";
     cla3 << "                                                                        \n";
     cla3 << " wire  [CLA_WIDTH-1:0] g_wire ;                                         \n";
     cla3 << " wire  [CLA_WIDTH-1:0] p_wire ;                                         \n";
     cla3 << " wire  [CLA_WIDTH-2:0] c_wire ;                                         \n";
     cla3 << "                                                                        \n";
     cla3 << "                                                                        \n";
     cla3 << "                                                                        \n";
     cla3 << "  //generate g                                                          \n";
     cla3 << "  assign g_wire = a_in & b_in ;                                         \n";
     cla3 << "  //propagate p                                                         \n";
     cla3 << "  assign p_wire = a_in ^ b_in ;                                         \n";
     cla3 << "                                                                        \n";
     cla3 << "  //carry lookahead carry generator                                     \n";
     cla3 << "  assign c_wire[C_1] = g_wire[0]|                                       \n";
     cla3 << "                       (c_in&p_wire[0]) ;                               \n";
     cla3 << "  assign c_wire[C_2] = g_wire[1]|                                       \n";
     cla3 << "                       (g_wire[0]&p_wire[1])|                           \n";
     cla3 << "                       (c_in&p_wire[0]&p_wire[1]) ;                     \n";
     cla3 << "  //SUM                                                                 \n";
     cla3 << "  assign sum = a_in^b_in^{c_wire, c_in} ;                               \n";
     cla3 << "                                                                        \n";
     cla3 << "  //                                                                    \n";
     cla3 << "  assign g_out = g_wire[2]|                                             \n";
     cla3 << "                 (g_wire[1]&p_wire[2])|                                 \n";
     cla3 << "                 (g_wire[0]&p_wire[1]&p_wire[2]);                       \n";
     cla3 << "  assign p_out = p_wire[2]&p_wire[1]&p_wire[0] ;                        \n";
     cla3 << "                                                                        \n";
     cla3 << "                                                                        \n";
     cla3 << " endmodule                                                              \n";
	 cla3.close();	
}
void CLA::CLA4(std::string string_in){
	 std::ofstream cla4;
     std::string        string_buf = "/CLA4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 cla4.open(ss.str());
     cla4 << " `timescale 1 ns/1 ps                                                   \n";
     cla4 << " module CLA4(sum,                                                       \n";
     cla4 << "             g_out,                                                     \n";
     cla4 << "             p_out,                                                     \n";
     cla4 << "             a_in,                                                      \n";
     cla4 << "             b_in,                                                      \n";
     cla4 << "             c_in                                                       \n";
     cla4 << "             ) ;                                                        \n";
     cla4 << " parameter CLA_WIDTH = 4 ;                                              \n";
     cla4 << " parameter CLA_ZERO = 4'd0 ;                                            \n";
     cla4 << " parameter C_1 = 0 ;                                                    \n";
     cla4 << " parameter C_2 = 1 ;                                                    \n";
     cla4 << " parameter C_3 = 2 ;                                                    \n";
     cla4 << "                                                                        \n";
     cla4 << " output[CLA_WIDTH-1:0] sum ;                                            \n";
     cla4 << " output                g_out ;                                          \n";
     cla4 << " output                p_out ;                                          \n";
     cla4 << "                                                                        \n";
     cla4 << " input [CLA_WIDTH-1:0] a_in ;                                           \n";
     cla4 << " input [CLA_WIDTH-1:0] b_in ;                                           \n";
     cla4 << " input                 c_in ;                                           \n";
     cla4 << " // input                 rst_n ;                                       \n";
     cla4 << " // input                 clk ;                                         \n";
     cla4 << "                                                                        \n";
     cla4 << " wire  [CLA_WIDTH-1:0] g_wire ;                                         \n";
     cla4 << " wire  [CLA_WIDTH-1:0] p_wire ;                                         \n";
     cla4 << " wire  [CLA_WIDTH-2:0] c_wire ;                                         \n";
     cla4 << " // wire  [CLA_WIDTH-1:0] sum_wire ;                                    \n";
     cla4 << "                                                                        \n";
     cla4 << " // reg[CLA_WIDTH-1:0] sum ;                                            \n";
     cla4 << "                                                                        \n";
     cla4 << "                                                                        \n";
     cla4 << "  //generate g                                                          \n";
     cla4 << "  assign g_wire = a_in & b_in ;                                         \n";
     cla4 << "  //propagate p                                                         \n";
     cla4 << "  assign p_wire = a_in ^ b_in ;                                         \n";
     cla4 << "                                                                        \n";
     cla4 << "  //carry lookahead carry generator                                     \n";
     cla4 << "  assign c_wire[C_1] = g_wire[0]|                                       \n";
     cla4 << "                       (c_in&p_wire[0]) ;                               \n";
     cla4 << "  assign c_wire[C_2] = g_wire[1]|                                       \n";
     cla4 << "                       (g_wire[0]&p_wire[1])|                           \n";
     cla4 << "                       (c_in&p_wire[0]&p_wire[1]) ;                     \n";
     cla4 << "  assign c_wire[C_3] = g_wire[2]|                                       \n";
     cla4 << "                       (g_wire[1]&p_wire[2])|                           \n";
     cla4 << "                       (g_wire[0]&p_wire[1]&p_wire[2])|                 \n";
     cla4 << "                       (c_in&p_wire[0]&p_wire[1]&p_wire[2]) ;           \n";
     cla4 << "                                                                        \n";
     cla4 << "  //SUM                                                                 \n";
     cla4 << "  assign sum = a_in^b_in^{c_wire, c_in} ;                               \n";
     cla4 << "                                                                        \n";
     cla4 << "  //                                                                    \n";
     cla4 << "  assign g_out = g_wire[3]|                                             \n";
     cla4 << "                 (g_wire[2]&p_wire[3])|                                 \n";
     cla4 << "                 (g_wire[1]&p_wire[2]&p_wire[3])|                       \n";
     cla4 << "                 (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]) ;            \n";
     cla4 << "  assign p_out = p_wire[3]&p_wire[2]&p_wire[1]&p_wire[0] ;              \n";
     cla4 << "                                                                        \n";
     cla4 << "                                                                        \n";
     cla4 << " endmodule                                                              \n";
	 cla4.close();	
}
void CLA::CLA6(std::string string_in){
	 std::ofstream cla6;
     std::string        string_buf = "/CLA6.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla6.open(ss.str());
     cla6 << " `timescale 1 ns/1 ps                                                                         \n";
     cla6 << " module CLA6(sum,                                                                             \n";
     cla6 << "             g_out,                                                                           \n";
     cla6 << "             p_out,                                                                           \n";
     cla6 << "             a_in,                                                                            \n";
     cla6 << "             b_in,                                                                            \n";
     cla6 << "             c_in                                                                             \n";
     cla6 << "             ) ;                                                                              \n";
     cla6 << " parameter CLA_WIDTH = 6 ;                                                                    \n";
     cla6 << " parameter CLA_ZERO = 6'd0 ;                                                                  \n";
     cla6 << " parameter C_1 = 0 ;                                                                          \n";
     cla6 << " parameter C_2 = 1 ;                                                                          \n";
     cla6 << " parameter C_3 = 2 ;                                                                          \n";
     cla6 << " parameter C_4 = 3 ;                                                                          \n";
     cla6 << " parameter C_5 = 4 ;                                                                          \n";
     cla6 << "                                                                                              \n";
     cla6 << " output[CLA_WIDTH-1:0] sum ;                                                                  \n";
     cla6 << " output                g_out ;                                                                \n";
     cla6 << " output                p_out ;                                                                \n";
     cla6 << "                                                                                              \n";
     cla6 << " input [CLA_WIDTH-1:0] a_in ;                                                                 \n";
     cla6 << " input [CLA_WIDTH-1:0] b_in ;                                                                 \n";
     cla6 << " input                 c_in ;                                                                 \n";
     cla6 << "                                                                                              \n";
     cla6 << " wire  [CLA_WIDTH-1:0] g_wire ;                                                               \n";
     cla6 << " wire  [CLA_WIDTH-1:0] p_wire ;                                                               \n";
     cla6 << " wire  [CLA_WIDTH-2:0] c_wire ;                                                               \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //generate g                                                                             \n";
     cla6 << "     assign g_wire = a_in & b_in ;                                                            \n";
     cla6 << "     //propagate p                                                                            \n";
     cla6 << "     assign p_wire = a_in ^ b_in ;                                                            \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //carry lookahead carry generator                                                        \n";
     cla6 << "     assign c_wire[C_1] = g_wire[0]|                                                          \n";
     cla6 << "                         (c_in&p_wire[0]) ;                                                   \n";
     cla6 << "     assign c_wire[C_2] = g_wire[1]|                                                          \n";
     cla6 << "                         (g_wire[0]&p_wire[1])|                                               \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]) ;                                         \n";
     cla6 << "     assign c_wire[C_3] = g_wire[2]|                                                          \n";
     cla6 << "                         (g_wire[1]&p_wire[2])|                                               \n";
     cla6 << "                         (g_wire[0]&p_wire[1]&p_wire[2])|                                     \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]&p_wire[2]) ;                               \n";
     cla6 << "     assign c_wire[C_4] = g_wire[3]|                                                          \n";
     cla6 << "                         (g_wire[2]&p_wire[3])|                                               \n";
     cla6 << "                         (g_wire[1]&p_wire[2]&p_wire[3])|                                     \n";
     cla6 << "                         (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3])|                           \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]) ;                     \n";
     cla6 << "     assign c_wire[C_5] = g_wire[4]|                                                          \n";
     cla6 << "                         (g_wire[3]&p_wire[4])|                                               \n";
     cla6 << "                         (g_wire[2]&p_wire[3]&p_wire[4])|                                     \n";
     cla6 << "                         (g_wire[1]&p_wire[2]&p_wire[3]&p_wire[4])|                           \n";
     cla6 << "                         (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]&p_wire[4])|                 \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]&p_wire[4]) ;           \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //SUM                                                                                    \n";
     cla6 << "     assign sum = a_in^b_in^{c_wire, c_in} ;                                                  \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //                                                                                       \n";
     cla6 << "     assign g_out = g_wire[5]|                                                                \n";
     cla6 << "                    (g_wire[4]&p_wire[5])|                                                    \n";
     cla6 << "                    (g_wire[3]&p_wire[4]&p_wire[5])|                                          \n";
     cla6 << "                    (g_wire[2]&p_wire[3]&p_wire[4]&p_wire[5])|                                \n";
     cla6 << "                    (g_wire[1]&p_wire[2]&p_wire[3]&p_wire[4]&p_wire[5])|                      \n";
     cla6 << "                    (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]&p_wire[4]&p_wire[5]) ;           \n";
     cla6 << "     assign p_out = p_wire[5]&p_wire[4]&p_wire[3]&p_wire[2]&p_wire[1]&p_wire[0] ;             \n";
     cla6 << "                                                                                              \n";
     cla6 << " endmodule                                                                                    \n";
	 cla6.close();
}
void CLA::CLA16(std::string string_in){
	 std::ofstream cla16;
     std::string        string_buf = "/CLA16.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla16.open(ss.str());
     cla16 << " `timescale 1 ns/1 ps                                   \n";
     cla16 << " module CLA16(sum,                                      \n";
     cla16 << "              g_out,                                    \n";
     cla16 << "              p_out,                                    \n";
     cla16 << "              a_in,                                     \n";
     cla16 << "              b_in,                                     \n";
     cla16 << "              c_in                                      \n";
     cla16 << "              ) ;                                       \n";
     cla16 << " parameter CLA_WIDTH = 16 ;                             \n";
     cla16 << " parameter CA_WIDTH = 3 ;                               \n";
     cla16 << " parameter PG_WIDTH = 4 ;                               \n";
     cla16 << " parameter C_1 = 0 ;                                    \n";
     cla16 << " parameter C_2 = 1 ;                                    \n";
     cla16 << " parameter C_3 = 2 ;                                    \n";
     cla16 << " parameter C_4 = 3 ;                                    \n";
     cla16 << " parameter SEG_1 = 4 ;                                  \n";
     cla16 << " parameter SEG_2 = 8 ;                                  \n";
     cla16 << " parameter SEG_3 = 12 ;                                 \n";
     cla16 << " parameter SEG_4 = 16 ;                                 \n";
     cla16 << "                                                        \n";
     cla16 << " output[CLA_WIDTH-1:0] sum ;                            \n";
     cla16 << " output                g_out ;                          \n";
     cla16 << " output                p_out ;                          \n";
     cla16 << "                                                        \n";
     cla16 << " input [CLA_WIDTH-1:0] a_in ;                           \n";
     cla16 << " input [CLA_WIDTH-1:0] b_in ;                           \n";
     cla16 << " input                 c_in ;                           \n";
     cla16 << " // input                 rst_n ;                       \n";
     cla16 << " // input                 clk ;                         \n";
     cla16 << "                                                        \n";
     cla16 << " wire  [PG_WIDTH-1:0]  g_wire ;                         \n";
     cla16 << " wire  [PG_WIDTH-1:0]  p_wire ;                         \n";
     cla16 << " wire  [CA_WIDTH-1:0]  carry ;                          \n";
     cla16 << "                                                        \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_0(.sum(sum[SEG_1-1:0]),                \n";
     cla16 << "                   .g_out(g_wire[C_1]),                 \n";
     cla16 << "                   .p_out(p_wire[C_1]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_1-1:0]),              \n";
     cla16 << "                   .b_in(b_in[SEG_1-1:0]),              \n";
     cla16 << "                   .c_in(c_in) // c0                    \n";
     cla16 << "                   // .rst_n(rst_n),                    \n";
     cla16 << "                   // .clk(clk)                         \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_1(.sum(sum[SEG_2-1:SEG_1]),            \n";
     cla16 << "                   .g_out(g_wire[C_2]),                 \n";
     cla16 << "                   .p_out(p_wire[C_2]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_2-1:SEG_1]),          \n";
     cla16 << "                   .b_in(b_in[SEG_2-1:SEG_1]),          \n";
     cla16 << "                   .c_in(carry[C_1]) // c4              \n";
     cla16 << "                   // .rst_n(rst_n),                    \n";
     cla16 << "                   // .clk(clk)                         \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_2(.sum(sum[SEG_3-1:SEG_2]),            \n";
     cla16 << "                   .g_out(g_wire[C_3]),                 \n";
     cla16 << "                   .p_out(p_wire[C_3]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_3-1:SEG_2]),          \n";
     cla16 << "                   .b_in(b_in[SEG_3-1:SEG_2]),          \n";
     cla16 << "                   .c_in(carry[C_2]) // c8              \n";
     cla16 << "                   // .rst_n(rst_n),                    \n";
     cla16 << "                   // .clk(clk)                         \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_3(.sum(sum[SEG_4-1:SEG_3]),            \n";
     cla16 << "                   .g_out(g_wire[C_4]),                 \n";
     cla16 << "                   .p_out(p_wire[C_4]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_4-1:SEG_3]),          \n";
     cla16 << "                   .b_in(b_in[SEG_4-1:SEG_3]),          \n";
     cla16 << "                   .c_in(carry[C_3]) // c12             \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA16clg u_CLA16clg(.g_out(g_out),                 \n";
     cla16 << "                         .p_out(p_out),                 \n";
     cla16 << "                         .carry(carry), // c4, c8, c12  \n";
     cla16 << "                         .p_in0(p_wire[C_1]),           \n";
     cla16 << "                         .g_in0(g_wire[C_1]),           \n";
     cla16 << "                         .p_in1(p_wire[C_2]),           \n";
     cla16 << "                         .g_in1(g_wire[C_2]),           \n";
     cla16 << "                         .p_in2(p_wire[C_3]),           \n";
     cla16 << "                         .g_in2(g_wire[C_3]),           \n";
     cla16 << "                         .p_in3(p_wire[C_4]),           \n";
     cla16 << "                         .g_in3(g_wire[C_4]),           \n";
     cla16 << "                         .c_in(c_in) // c0              \n";
     cla16 << "                         ) ;                            \n";
     cla16 << " endmodule                                              \n";

	 cla16.close();	
}
void CLA::CLA16clg(std::string string_in){
	 std::ofstream cla16clg;
     std::string        string_buf = "/CLA16clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;    
	 cla16clg.open(ss.str());
     cla16clg << " `timescale 1 ns/1 ps                                                                      \n";
     cla16clg << " module CLA16clg(g_out,                                                                    \n";
     cla16clg << "                 p_out,                                                                    \n";
     cla16clg << "                 carry,                                                                    \n";
     cla16clg << "                 p_in0,                                                                    \n";
     cla16clg << "                 g_in0,                                                                    \n";
     cla16clg << "                 p_in1,                                                                    \n";
     cla16clg << "                 g_in1,                                                                    \n";
     cla16clg << "                 p_in2,                                                                    \n";
     cla16clg << "                 g_in2,                                                                    \n";
     cla16clg << "                 p_in3,                                                                    \n";
     cla16clg << "                 g_in3,                                                                    \n";
     cla16clg << "                 c_in                                                                      \n";
     cla16clg << "                 ) ;                                                                       \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
     cla16clg << " parameter C_1 = 0 ;                                                                       \n";
     cla16clg << " parameter C_2 = 1 ;                                                                       \n";
     cla16clg << " parameter C_3 = 2 ;                                                                       \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " output                g_out ;                                                             \n";
     cla16clg << " output                p_out ;                                                             \n";
     cla16clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " input                 p_in0 ;                                                             \n";
     cla16clg << " input                 g_in0 ;                                                             \n";
     cla16clg << " input                 p_in1 ;                                                             \n";
     cla16clg << " input                 g_in1 ;                                                             \n";
     cla16clg << " input                 p_in2 ;                                                             \n";
     cla16clg << " input                 g_in2 ;                                                             \n";
     cla16clg << " input                 p_in3 ;                                                             \n";
     cla16clg << " input                 g_in3 ;                                                             \n";
     cla16clg << " input                 c_in ;                                                              \n";
     cla16clg << " 	                                                                                         \n";
     cla16clg << " 	//                                                                                       \n";
     cla16clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
     cla16clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
     cla16clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " 	//                                                                                       \n";
     cla16clg << " 	assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;       \n";
     cla16clg << " 	assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                                 \n";
     cla16clg << "                                                                                           \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " endmodule                                                                                 \n";

     cla16clg.close();	
}
void CLA::CLA24(std::string string_in){
     std::ofstream cla24;
     std::string        string_buf = "/CLA24.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla24.open(ss.str());
     cla24 << " `timescale 1 ns/1 ps                                   \n";
     cla24 << " module CLA24(sum,                                      \n";
     cla24 << " 			 // c_out,                                 \n";
     cla24 << " 			 g_out,                                    \n";
     cla24 << "              p_out,                                    \n";
     cla24 << "              a_in,                                     \n";
     cla24 << "              b_in,                                     \n";
     cla24 << "              c_in                                      \n";
     cla24 << " 			 // rst_n,                                 \n";
     cla24 << "              // clk                                    \n";
     cla24 << "              ) ;                                       \n";
     cla24 << " parameter CLA_WIDTH = 24 ;                             \n";
     cla24 << " parameter CA_WIDTH = 3 ;                               \n";
     cla24 << " parameter PG_WIDTH = 4 ;                               \n";
     cla24 << " parameter C_1 = 0 ;                                    \n";
     cla24 << " parameter C_2 = 1 ;                                    \n";
     cla24 << " parameter C_3 = 2 ;                                    \n";
     cla24 << " parameter C_4 = 3 ;                                    \n";
     cla24 << " parameter SEG_1 = 6 ;                                  \n";
     cla24 << " parameter SEG_2 = 12 ;                                 \n";
     cla24 << " parameter SEG_3 = 18 ;                                 \n";
     cla24 << " parameter SEG_4 = 24 ;                                 \n";
     cla24 << "                                                        \n";
     cla24 << "                                                        \n";
     cla24 << " output[CLA_WIDTH-1:0] sum ;                            \n";
     cla24 << " // output                c_out ;                       \n";
     cla24 << " output                g_out ;                          \n";
     cla24 << " output                p_out ;                          \n";
     cla24 << "                                                        \n";
     cla24 << " input [CLA_WIDTH-1:0] a_in ;                           \n";
     cla24 << " input [CLA_WIDTH-1:0] b_in ;                           \n";
     cla24 << " input                 c_in ;                           \n";
     cla24 << " // input                 rst_n ;                       \n";
     cla24 << " // input                 clk ;                         \n";
     cla24 << "                                                        \n";
     cla24 << " wire  [PG_WIDTH-1:0]  g_wire ;                         \n";
     cla24 << " wire  [PG_WIDTH-1:0]  p_wire ;                         \n";
     cla24 << " wire  [CA_WIDTH-1:0]  carry ;                          \n";
     cla24 << "                                                         \n";
     cla24 << "     //                                                 \n";
     cla24 << "     CLA6 u_CLA6_0(.sum(sum[SEG_1-1:0]),                \n";
     cla24 << "                    .g_out(g_wire[C_1]),                 \n";
     cla24 << "                    .p_out(p_wire[C_1]),                 \n";
     cla24 << "                    .a_in(a_in[SEG_1-1:0]),              \n";
     cla24 << "                    .b_in(b_in[SEG_1-1:0]),              \n";
     cla24 << "                    .c_in(c_in) // c0                    \n";
     cla24 << "                    // .rst_n(rst_n),                    \n";
     cla24 << "                    // .clk(clk)                         \n";
     cla24 << "                    ) ;                                  \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA6 u_CLA6_1(.sum(sum[SEG_2-1:SEG_1]),            \n";
     cla24 << "                    .g_out(g_wire[C_2]),                 \n";
     cla24 << "                    .p_out(p_wire[C_2]),                 \n";
     cla24 << "                    .a_in(a_in[SEG_2-1:SEG_1]),          \n";
     cla24 << "                    .b_in(b_in[SEG_2-1:SEG_1]),          \n";
     cla24 << "                    .c_in(carry[C_1]) // c6              \n";
     cla24 << "                    // .rst_n(rst_n),                    \n";
     cla24 << "                    // .clk(clk)                         \n";
     cla24 << "                    ) ;                                  \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA6 u_CLA6_2(.sum(sum[SEG_3-1:SEG_2]),            \n";
     cla24 << "                    .g_out(g_wire[C_3]),                 \n";
     cla24 << "                    .p_out(p_wire[C_3]),                 \n";
     cla24 << "                    .a_in(a_in[SEG_3-1:SEG_2]),          \n";
     cla24 << "                    .b_in(b_in[SEG_3-1:SEG_2]),          \n";
     cla24 << "                    .c_in(carry[C_2]) // c12             \n";
     cla24 << "                    // .rst_n(rst_n),                    \n";
     cla24 << "                    // .clk(clk)                         \n";
     cla24 << "                    ) ;                                  \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA6 u_CLA6_3(.sum(sum[SEG_4-1:SEG_3]),            \n";
     cla24 << "                         .g_out(g_wire[C_4]),            \n";
     cla24 << "                         .p_out(p_wire[C_4]),            \n";
     cla24 << "                         .a_in(a_in[SEG_4-1:SEG_3]),     \n";
     cla24 << "                         .b_in(b_in[SEG_4-1:SEG_3]),     \n";
     cla24 << "                         .c_in(carry[C_3]) // c18        \n";
     cla24 << "                         // .rst_n(rst_n),               \n";
     cla24 << "                         // .clk(clk)                    \n";
     cla24 << "                         ) ;                             \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA24clg u_CLA24clg(.g_out(g_out),                 \n";
     cla24 << "                          .p_out(p_out),                 \n";
     cla24 << "                          // .c_out(c_out),              \n";
     cla24 << "                          .carry(carry), // c6, c12, c18 \n";
     cla24 << "                          .p_in0(p_wire[C_1]),           \n";
     cla24 << "                          .g_in0(g_wire[C_1]),           \n";
     cla24 << "                          .p_in1(p_wire[C_2]),           \n";
     cla24 << "                          .g_in1(g_wire[C_2]),           \n";
     cla24 << "                          .p_in2(p_wire[C_3]),           \n";
     cla24 << "                          .g_in2(g_wire[C_3]),           \n";
     cla24 << "                          .p_in3(p_wire[C_4]),           \n";
     cla24 << "                          .g_in3(g_wire[C_4]),           \n";
     cla24 << "                          .c_in(c_in) // c0              \n";
     cla24 << "                          ) ;                            \n";                                      
     cla24 << "                                                         \n";
     cla24 << " endmodule                                              \n";               
	 cla24.close();
}
void CLA::CLA24clg(std::string string_in){
	 std::ofstream cla24clg;
     std::string        string_buf = "/CLA24clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla24clg.open(ss.str());
     cla24clg << " `timescale 1 ns/1 ps                                                                      \n";
     cla24clg << " module CLA24clg(g_out,                                                                    \n";
     cla24clg << "                 p_out,                                                                    \n";
     cla24clg << "                 // c_out,                                                                 \n";
     cla24clg << "                 carry,                                                                    \n";
     cla24clg << "                 p_in0,                                                                    \n";
     cla24clg << "                 g_in0,                                                                    \n";
     cla24clg << "                 p_in1,                                                                    \n";
     cla24clg << "                 g_in1,                                                                    \n";
     cla24clg << "                 p_in2,                                                                    \n";
     cla24clg << "                 g_in2,                                                                    \n";
     cla24clg << "                 p_in3,                                                                    \n";
     cla24clg << "                 g_in3,                                                                    \n";
     cla24clg << "                 c_in                                                                      \n";
     cla24clg << "                 ) ;                                                                       \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
     cla24clg << " parameter C_1 = 0 ;                                                                       \n";
     cla24clg << " parameter C_2 = 1 ;                                                                       \n";
     cla24clg << " parameter C_3 = 2 ;                                                                       \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " output                g_out ;                                                             \n";
     cla24clg << " output                p_out ;                                                             \n";
     cla24clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
     cla24clg << " // output                c_out ;                                                          \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " input                 p_in0 ;                                                             \n";
     cla24clg << " input                 g_in0 ;                                                             \n";
     cla24clg << " input                 p_in1 ;                                                             \n";
     cla24clg << " input                 g_in1 ;                                                             \n";
     cla24clg << " input                 p_in2 ;                                                             \n";
     cla24clg << " input                 g_in2 ;                                                             \n";
     cla24clg << " input                 p_in3 ;                                                             \n";
     cla24clg << " input                 g_in3 ;                                                             \n";
     cla24clg << " input                 c_in ;                                                              \n";
     cla24clg << " 	                                                                                         \n";
     cla24clg << " 	//                                                                                       \n";
     cla24clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
     cla24clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
     cla24clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " 	//g[0,24], p[0,24]                                                                       \n";
     cla24clg << " 	assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;       \n";
     cla24clg << " 	assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                                 \n";
     cla24clg << " 	// assign c_out = g_in3|(carry[C_3]&p_in3) ;                                             \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " endmodule                                                                                 \n";                                                                        
     cla24clg.close();
}
void CLA::CLA32(std::string string_in){
	 std::ofstream cla32;
     std::string        string_buf = "/CLA32.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla32.open(ss.str());
     cla32 << " `timescale 1 ns/1 ps                                  \n";
     cla32 << " module CLA32(sum,                                     \n";
     cla32 << "              c_out,                                   \n";
     cla32 << "              a_in,                                    \n";
     cla32 << "              b_in,                                    \n";
     cla32 << "              c_in                                     \n";
     cla32 << "              // rst_n,                                \n";
     cla32 << "              // clk                                   \n";
     cla32 << "              ) ;                                      \n";
     cla32 << " parameter CLA_WIDTH = 32 ;                            \n";
     cla32 << " parameter CA_WIDTH = 1 ;                              \n";
     cla32 << " parameter PG_WIDTH = 2 ;                              \n";
     cla32 << " //                                                    \n";
     cla32 << " parameter C_1 = 0 ;                                   \n";
     cla32 << " parameter C_2 = 1 ;                                   \n";
     cla32 << " //                                                    \n";
     cla32 << " parameter SEG_1 = 16 ;                                \n";
     cla32 << " parameter SEG_2 = 32 ;                                \n";
     cla32 << "                                                       \n";
     cla32 << "                                                       \n";
     cla32 << " output[CLA_WIDTH-1:0] sum ;                           \n";
     cla32 << " output                c_out ;                         \n";
     cla32 << "                                                       \n";
     cla32 << " input [CLA_WIDTH-1:0] a_in ;                          \n";
     cla32 << " input [CLA_WIDTH-1:0] b_in ;                          \n";
     cla32 << " input                 c_in ;                          \n";
     cla32 << " // input                 rst_n ;                      \n";
     cla32 << " // input                 clk ;                        \n";
     cla32 << "                                                       \n";
     cla32 << " wire  [PG_WIDTH-1:0]  g_wire ;                        \n";
     cla32 << " wire  [PG_WIDTH-1:0]  p_wire ;                        \n";
     cla32 << " wire  [CA_WIDTH-1:0]  carry ;                         \n";
     cla32 << "                                                       \n";
     cla32 << "                                                       \n";
     cla32 << "     //                                                \n";
     cla32 << "     CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),             \n";
     cla32 << "                     .g_out(g_wire[C_1]),              \n";
     cla32 << "                     .p_out(p_wire[C_1]),              \n";
     cla32 << "                     .a_in(a_in[SEG_1-1:0]),           \n";
     cla32 << "                     .b_in(b_in[SEG_1-1:0]),           \n";
     cla32 << "                     .c_in(c_in) // c0                 \n";
     cla32 << "                     // .rst_n(rst_n),                 \n";
     cla32 << "                     // .clk(clk)                      \n";
     cla32 << "                     ) ;                               \n";
     cla32 << "     //                                                \n";
     cla32 << "     CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),         \n";
     cla32 << "                     .g_out(g_wire[C_2]),              \n";
     cla32 << "                     .p_out(p_wire[C_2]),              \n";
     cla32 << "                     .a_in(a_in[SEG_2-1:SEG_1]),       \n";
     cla32 << "                     .b_in(b_in[SEG_2-1:SEG_1]),       \n";
     cla32 << "                     .c_in(carry[C_1]) // c16          \n";
     cla32 << "                     // .rst_n(rst_n),                 \n";
     cla32 << "                     // .clk(clk)                      \n";
     cla32 << "                     ) ;                               \n";
     cla32 << "                                                       \n";
     cla32 << "     //                                                \n";
     cla32 << "     CLA32clg u_CLA32clg(.c_out(c_out), // c32         \n";
     cla32 << "                         .carry(carry), // c16         \n";
     cla32 << "                         .p_in0(p_wire[C_1]),          \n";
     cla32 << "                         .g_in0(g_wire[C_1]),          \n";
     cla32 << "                         .p_in1(p_wire[C_2]),          \n";
     cla32 << "                         .g_in1(g_wire[C_2]),          \n";
     cla32 << "                         .c_in(c_in) // c0             \n";
     cla32 << "                          ) ;					      \n";
     cla32 << "                                                       \n";
     cla32 << " endmodule                                             \n"; 

	 cla32.close();	
}
void CLA::CLA32clg(std::string string_in){
	 std::ofstream cla32clg;
     std::string        string_buf = "/CLA32clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla32clg.open(ss.str());	
     cla32clg << " `timescale 1 ns/1 ps                                \n";  
     cla32clg << " module CLA32clg(c_out,                              \n";
     cla32clg << "                 carry,                              \n";
     cla32clg << "                 p_in0,                              \n";
     cla32clg << "                 g_in0,                              \n";
     cla32clg << "                 p_in1,                              \n";
     cla32clg << "                 g_in1,                              \n";
     cla32clg << "                 c_in                                \n";
     cla32clg << "                 ) ;                                 \n";
     cla32clg << "                                                     \n";
     cla32clg << " parameter CA_WIDTH = 1 ;                            \n";
     cla32clg << " parameter C_1 = 0 ;                                 \n";
     cla32clg << "                                                     \n";
     cla32clg << " output                c_out ;                       \n";
     cla32clg << " output[CA_WIDTH-1:0]  carry ;                       \n";
     cla32clg << "                                                     \n";
     cla32clg << " input                 p_in0 ;                       \n";
     cla32clg << " input                 g_in0 ;                       \n";
     cla32clg << " input                 p_in1 ;                       \n";
     cla32clg << " input                 g_in1 ;                       \n";
     cla32clg << " input                 c_in ;                        \n";
     cla32clg << " 	                                                   \n";
     cla32clg << " 	//                                                 \n";
     cla32clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;           \n";
     cla32clg << "                                                     \n";
     cla32clg << " 	assign c_out = g_in1|(carry[C_1]&p_in1) ;          \n";
     cla32clg << " 	                                                   \n";
     cla32clg << "                                                     \n";
     cla32clg << " endmodule                                           \n";

	 cla32clg.close();
}
void CLA::CLA64(std::string string_in){
	 std::ofstream cla64;
     std::string        string_buf = "/CLA64.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla64.open(ss.str());
     cla64 << " `timescale 1 ns/1 ps                                             \n";
     cla64 << " module CLA64(sum,                                                \n";
     cla64 << "              g_out,                                              \n";
     cla64 << "              p_out,                                              \n";
     cla64 << "              // c_out,                                           \n";
     cla64 << "              a_in,                                               \n";
     cla64 << "              b_in,                                               \n";
     cla64 << "              c_in                                                \n";
     cla64 << "              // rst_n,                                           \n";
     cla64 << "              // clk                                              \n";
     cla64 << "              ) ;                                                 \n";
     cla64 << " parameter CLA_WIDTH = 64 ;                                       \n";
     cla64 << " parameter CA_WIDTH = 3 ;                                         \n";
     cla64 << " parameter PG_WIDTH = 4 ;                                         \n";
     cla64 << " //                                                               \n";
     cla64 << " parameter C_1 = 0 ;                                              \n";
     cla64 << " parameter C_2 = 1 ;                                              \n";
     cla64 << " parameter C_3 = 2 ;                                              \n";
     cla64 << " parameter C_4 = 3 ;                                              \n";
     cla64 << " //                                                               \n";
     cla64 << " parameter SEG_1 = 16 ;                                           \n";
     cla64 << " parameter SEG_2 = 32 ;                                           \n";
     cla64 << " parameter SEG_3 = 48 ;                                           \n";
     cla64 << " parameter SEG_4 = 64 ;                                           \n";
     cla64 << "                                                                  \n";
     cla64 << "                                                                  \n";
     cla64 << " output[CLA_WIDTH-1:0] sum ;                                      \n";
     cla64 << " output                g_out ;                                    \n";
     cla64 << " output                p_out ;                                    \n";
     cla64 << " // output                c_out ;                                 \n";
     cla64 << "                                                                  \n";
     cla64 << " input [CLA_WIDTH-1:0] a_in ;                                     \n";
     cla64 << " input [CLA_WIDTH-1:0] b_in ;                                     \n";
     cla64 << " input                 c_in ;                                     \n";
     cla64 << " // input                 rst_n ;                                 \n";
     cla64 << " // input                 clk ;                                   \n";
     cla64 << "                                                                  \n";
     cla64 << " wire  [PG_WIDTH-1:0]  g_wire ;                                   \n";
     cla64 << " wire  [PG_WIDTH-1:0]  p_wire ;                                   \n";
     cla64 << " wire  [CA_WIDTH-1:0]  carry ;                                    \n";
     cla64 << "                                                                  \n";
     cla64 << " 	                                                             \n";
     cla64 << " 	//                                                           \n";
     cla64 << "     CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),                        \n";
     cla64 << "                     .g_out(g_wire[C_1]),                         \n";
     cla64 << "                     .p_out(p_wire[C_1]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_1-1:0]),                      \n";
     cla64 << "                     .b_in(b_in[SEG_1-1:0]),                      \n";
     cla64 << "                     .c_in(c_in) // c0                            \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),                    \n";
     cla64 << "                     .g_out(g_wire[C_2]),                         \n";
     cla64 << "                     .p_out(p_wire[C_2]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_2-1:SEG_1]),                  \n";
     cla64 << "                     .b_in(b_in[SEG_2-1:SEG_1]),                  \n";
     cla64 << "                     .c_in(carry[C_1]) // c16                     \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA16 u_CLA16_2(.sum(sum[SEG_3-1:SEG_2]),                    \n";
     cla64 << "                     .g_out(g_wire[C_3]),                         \n";
     cla64 << "                     .p_out(p_wire[C_3]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_3-1:SEG_2]),                  \n";
     cla64 << "                     .b_in(b_in[SEG_3-1:SEG_2]),                  \n";
     cla64 << "                     .c_in(carry[C_2]) // c32                     \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA16 u_CLA16_3(.sum(sum[SEG_4-1:SEG_3]),                    \n";
     cla64 << "                     .g_out(g_wire[C_4]),                         \n";
     cla64 << "                     .p_out(p_wire[C_4]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_4-1:SEG_3]),                  \n";
     cla64 << "                     .b_in(b_in[SEG_4-1:SEG_3]),                  \n";
     cla64 << "                     .c_in(carry[C_3]) // c48                     \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA64clg u_CLA64clg(.g_out(g_out),                           \n";
     cla64 << "                         .p_out(p_out),                           \n";
     cla64 << "                         .carry(carry), // c16, c32, c48          \n";
     cla64 << "                         .p_in0(p_wire[C_1]),                     \n";
     cla64 << "                         .g_in0(g_wire[C_1]),                     \n";
     cla64 << "                         .p_in1(p_wire[C_2]),                     \n";
     cla64 << "                         .g_in1(g_wire[C_2]),                     \n";
     cla64 << "                         .p_in2(p_wire[C_3]),                     \n";
     cla64 << "                         .g_in2(g_wire[C_3]),                     \n";
     cla64 << "                         .p_in3(p_wire[C_4]),                     \n";
     cla64 << "                         .g_in3(g_wire[C_4]),                     \n";
     cla64 << "                         .c_in(c_in) // c0                        \n";
     cla64 << "                          ) ;					                 \n";
     cla64 << "                                                                  \n";
     cla64 << " endmodule                                                        \n";   

	 cla64.close();	
}
void CLA::CLA64_co(std::string string_in){
	 std::ofstream cla64_co;
     std::string        string_buf = "/CLA64_co.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla64_co.open(ss.str());
     cla64_co << " `timescale 1 ns/1 ps                                           \n";
     cla64_co << " module CLA64_co(sum,                                           \n";
     cla64_co << "                 c_out,                                         \n";
     cla64_co << "                 a_in,                                          \n";
     cla64_co << "                 b_in,                                          \n";
     cla64_co << "                 c_in                                           \n";
     cla64_co << "                 // rst_n,                                      \n";
     cla64_co << "                 // clk                                         \n";
     cla64_co << "                 ) ;                                            \n";
     cla64_co << " parameter CLA_WIDTH = 64 ;                                     \n";
     cla64_co << " parameter CA_WIDTH = 3 ;                                       \n";
     cla64_co << " parameter PG_WIDTH = 4 ;                                       \n";
     cla64_co << " //                                                             \n";
     cla64_co << " parameter C_1 = 0 ;                                            \n";
     cla64_co << " parameter C_2 = 1 ;                                            \n";
     cla64_co << " parameter C_3 = 2 ;                                            \n";
     cla64_co << " parameter C_4 = 3 ;                                            \n";
     cla64_co << " //                                                             \n";
     cla64_co << " parameter SEG_1 = 16 ;                                         \n";
     cla64_co << " parameter SEG_2 = 32 ;                                         \n";
     cla64_co << " parameter SEG_3 = 48 ;                                         \n";
     cla64_co << " parameter SEG_4 = 64 ;                                         \n";
     cla64_co << "                                                                \n";
     cla64_co << "                                                                \n";
     cla64_co << " output[CLA_WIDTH-1:0] sum ;                                    \n";
     cla64_co << " output                c_out ;                                  \n";
     cla64_co << "                                                                \n";
     cla64_co << " input [CLA_WIDTH-1:0] a_in ;                                   \n";
     cla64_co << " input [CLA_WIDTH-1:0] b_in ;                                   \n";
     cla64_co << " input                 c_in ;                                   \n";
     cla64_co << " // input                 rst_n ;                               \n";
     cla64_co << " // input                 clk ;                                 \n";
     cla64_co << "                                                                \n";
     cla64_co << " wire  [PG_WIDTH-1:0]  g_wire ;                                 \n";
     cla64_co << " wire  [PG_WIDTH-1:0]  p_wire ;                                 \n";
     cla64_co << " wire  [CA_WIDTH-1:0]  carry ;                                  \n";
     cla64_co << "                                                                \n";
     cla64_co << " 	                                                              \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),                         \n";
     cla64_co << "                  .g_out(g_wire[C_1]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_1]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_1-1:0]),                       \n";
     cla64_co << "                  .b_in(b_in[SEG_1-1:0]),                       \n";
     cla64_co << "                  .c_in(c_in) // c0                             \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                   // .clk(clk)                                 \n";
     cla64_co << "                   ) ;                                          \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),                     \n";
     cla64_co << "                  .g_out(g_wire[C_2]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_2]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_2-1:SEG_1]),                   \n";
     cla64_co << "                  .b_in(b_in[SEG_2-1:SEG_1]),                   \n";
     cla64_co << "                  .c_in(carry[C_1]) // c16                      \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                  // .clk(clk)                                  \n";
     cla64_co << "                  ) ;                                           \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_2(.sum(sum[SEG_3-1:SEG_2]),                     \n";
     cla64_co << "                  .g_out(g_wire[C_3]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_3]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_3-1:SEG_2]),                   \n";
     cla64_co << "                  .b_in(b_in[SEG_3-1:SEG_2]),                   \n";
     cla64_co << "                  .c_in(carry[C_2]) // c32                      \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                  // .clk(clk)                                  \n";
     cla64_co << "                  ) ;                                           \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_3(.sum(sum[SEG_4-1:SEG_3]),                     \n";
     cla64_co << "                  .g_out(g_wire[C_4]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_4]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_4-1:SEG_3]),                   \n";
     cla64_co << "                  .b_in(b_in[SEG_4-1:SEG_3]),                   \n";
     cla64_co << "                  .c_in(carry[C_3]) // c48                      \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                  // .clk(clk)                                  \n";
     cla64_co << "                  ) ;                                           \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA64clg_co u_CLA64clg_co(.c_out(c_out), // c64               \n";
     cla64_co << "                            .carry(carry), // c16, c32, c48     \n";
     cla64_co << "                            .p_in0(p_wire[C_1]),                \n";
     cla64_co << "                            .g_in0(g_wire[C_1]),                \n";
     cla64_co << "                            .p_in1(p_wire[C_2]),                \n";
     cla64_co << "                            .g_in1(g_wire[C_2]),                \n";
     cla64_co << "                            .p_in2(p_wire[C_3]),                \n";
     cla64_co << "                            .g_in2(g_wire[C_3]),                \n";
     cla64_co << "                            .p_in3(p_wire[C_4]),                \n";
     cla64_co << "                            .g_in3(g_wire[C_4]),                \n";
     cla64_co << "                            .c_in(c_in) // c0                   \n";
     cla64_co << "                             ) ;					              \n";
     cla64_co << "                                                                \n";
     cla64_co << " endmodule                                                      \n";
     cla64_co.close();	
}
void CLA::CLA64clg(std::string string_in){
	 std::ofstream cla64clg;
     std::string        string_buf = "/CLA64clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla64clg.open(ss.str());	
     cla64clg << " `timescale 1 ns/1 ps                                                                      \n";
     cla64clg << " module CLA64clg(g_out,                                                                    \n";
     cla64clg << "                 p_out,                                                                    \n";
     cla64clg << "                 carry,                                                                    \n";
     cla64clg << "                 p_in0,                                                                    \n";
     cla64clg << "                 g_in0,                                                                    \n";
     cla64clg << "                 p_in1,                                                                    \n";
     cla64clg << "                 g_in1,                                                                    \n";
     cla64clg << "                 p_in2,                                                                    \n";
     cla64clg << "                 g_in2,                                                                    \n";
     cla64clg << "                 p_in3,                                                                    \n";
     cla64clg << "                 g_in3,                                                                    \n";
     cla64clg << "                 c_in                                                                      \n";
     cla64clg << "                 ) ;                                                                       \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
     cla64clg << " parameter C_1 = 0 ;                                                                       \n";
     cla64clg << " parameter C_2 = 1 ;                                                                       \n";
     cla64clg << " parameter C_3 = 2 ;                                                                       \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " output                g_out ;                                                             \n";
     cla64clg << " output                p_out ;                                                             \n";
     cla64clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " input                 p_in0 ;                                                             \n";
     cla64clg << " input                 g_in0 ;                                                             \n";
     cla64clg << " input                 p_in1 ;                                                             \n";
     cla64clg << " input                 g_in1 ;                                                             \n";
     cla64clg << " input                 p_in2 ;                                                             \n";
     cla64clg << " input                 g_in2 ;                                                             \n";
     cla64clg << " input                 p_in3 ;                                                             \n";
     cla64clg << " input                 g_in3 ;                                                             \n";
     cla64clg << " input                 c_in ;                                                              \n";
     cla64clg << " 	                                                                                         \n";
     cla64clg << " 	//                                                                                       \n";
     cla64clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
     cla64clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
     cla64clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " 	//                                                                                       \n";
     cla64clg << " 	assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;       \n";
     cla64clg << " 	assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                                 \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " endmodule                                                                                 \n";
     cla64clg.close();	
}
void CLA::CLA64clg_co(std::string string_in){
 	 std::ofstream cla64clg_co;
     std::string        string_buf = "/CLA64clg_co.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla64clg_co.open(ss.str());
     cla64clg_co << " `timescale 1 ns/1 ps                                                                     \n";
     cla64clg_co << " module CLA64clg_co(c_out,                                                                \n";
     cla64clg_co << "                 // g_out,                                                             \n";
     cla64clg_co << "                 // p_out,                                                               \n";
     cla64clg_co << "                    carry,                                                                \n";
     cla64clg_co << "                    p_in0,                                                                \n";
     cla64clg_co << "                    g_in0,                                                                \n";
     cla64clg_co << "                    p_in1,                                                                \n";
     cla64clg_co << "                    g_in1,                                                                \n";
     cla64clg_co << "                    p_in2,                                                                \n";
     cla64clg_co << "                    g_in2,                                                                \n";
     cla64clg_co << "                    p_in3,                                                                \n";
     cla64clg_co << "                    g_in3,                                                                \n";
     cla64clg_co << "                    c_in                                                                  \n";
     cla64clg_co << "                    ) ;                                                                   \n";
     cla64clg_co << "                                                                                       \n";
     cla64clg_co << " parameter CA_WIDTH = 3 ;                                                                 \n";
     cla64clg_co << " parameter C_1 = 0 ;                                                                      \n";
     cla64clg_co << " parameter C_2 = 1 ;                                                                      \n";
     cla64clg_co << " parameter C_3 = 2 ;                                                                      \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << " output                c_out ;                                                            \n";
     cla64clg_co << " // output                g_out ;                                                         \n";
     cla64clg_co << " // output                p_out ;                                                         \n";
     cla64clg_co << " output[CA_WIDTH-1:0]  carry ;                                                            \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << " input                 p_in0 ;                                                            \n";
     cla64clg_co << " input                 g_in0 ;                                                            \n";
     cla64clg_co << " input                 p_in1 ;                                                            \n";
     cla64clg_co << " input                 g_in1 ;                                                            \n";
     cla64clg_co << " input                 p_in2 ;                                                            \n";
     cla64clg_co << " input                 g_in2 ;                                                            \n";
     cla64clg_co << " input                 p_in3 ;                                                            \n";
     cla64clg_co << " input                 g_in3 ;                                                            \n";
     cla64clg_co << " input                 c_in ;                                                             \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << "   //                                                                                     \n";
     cla64clg_co << "   assign carry[C_1] = g_in0|(c_in&p_in0) ;                                               \n";
     cla64clg_co << "   assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                           \n";
     cla64clg_co << "   assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ; \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << "   //                                                                                     \n";
     cla64clg_co << "   // assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;  \n";
     cla64clg_co << "   // assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                            \n";
     cla64clg_co << "   assign c_out = g_in3|(carry[C_3]&p_in3) ;                                              \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << " endmodule                                                                                \n";


     cla64clg_co.close();     
}
void CLA::CLA65(std::string string_in){
	 std::ofstream cla65;
     std::string        string_buf = "/CLA65.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla65.open(ss.str());
 cla65 << " `timescale 1 ns/1 ps                                                  \n";
 cla65 << " module CLA65(sum,                                                     \n";
 cla65 << " 		     c_out,                                                   \n";
 cla65 << "              a_in,                                                    \n";
 cla65 << "              b_in,                                                    \n";
 cla65 << "              c_in                                                     \n";
 cla65 << " 		     // rst_n,                                                \n";
 cla65 << "              // clk                                                   \n";
 cla65 << "              ) ;                                                      \n";
 cla65 << " parameter CLA_WIDTH = 65 ;                                            \n";
 cla65 << " parameter CA_WIDTH = 3 ;                                              \n";
 cla65 << " parameter PG_WIDTH = 4 ;                                              \n";
 cla65 << " //                                                                    \n";
 cla65 << " parameter C_1 = 0 ;                                                   \n";
 cla65 << " parameter C_2 = 1 ;                                                   \n";
 cla65 << " parameter C_3 = 2 ;                                                   \n";
 cla65 << " parameter C_4 = 3 ;                                                   \n";
 cla65 << " //                                                                    \n";
 cla65 << " parameter SEG_1 = 16 ;                                                \n";
 cla65 << " parameter SEG_2 = 32 ;                                                \n";
 cla65 << " parameter SEG_3 = 48 ;                                                \n";
 cla65 << " parameter SEG_4 = 64 ;                                                \n";
 cla65 << "                                                                       \n";
 cla65 << "                                                                       \n";
 cla65 << " output[CLA_WIDTH-1:0] sum ;                                           \n";
 cla65 << " output                c_out ;                                         \n";
 cla65 << "                                                                       \n";
 cla65 << " input [CLA_WIDTH-1:0] a_in ;                                          \n";
 cla65 << " input [CLA_WIDTH-1:0] b_in ;                                          \n";
 cla65 << " input                 c_in ;                                          \n";
 cla65 << " // input                 rst_n ;                                      \n";
 cla65 << " // input                 clk ;                                        \n";
 cla65 << "                                                                       \n";
 cla65 << " wire  [PG_WIDTH-1:0]  g_wire ;                                        \n";
 cla65 << " wire  [PG_WIDTH-1:0]  p_wire ;                                        \n";
 cla65 << " wire  [CA_WIDTH-1:0]  carry ;                                         \n";
 cla65 << "                                                                       \n";
 cla65 << " 	                                                                  \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),                             \n";
 cla65 << " 			        .g_out(g_wire[C_1]),                              \n";
 cla65 << "                     .p_out(p_wire[C_1]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_1-1:0]),                           \n";
 cla65 << "                     .b_in(b_in[SEG_1-1:0]),                           \n";
 cla65 << "                     .c_in(c_in) // c0                                 \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),                         \n";
 cla65 << " 			        .g_out(g_wire[C_2]),                              \n";
 cla65 << "                     .p_out(p_wire[C_2]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_2-1:SEG_1]),                       \n";
 cla65 << "                     .b_in(b_in[SEG_2-1:SEG_1]),                       \n";
 cla65 << "                     .c_in(carry[C_1]) // c16                          \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_2(.sum(sum[SEG_3-1:SEG_2]),                         \n";
 cla65 << " 			        .g_out(g_wire[C_3]),                              \n";
 cla65 << "                     .p_out(p_wire[C_3]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_3-1:SEG_2]),                       \n";
 cla65 << "                     .b_in(b_in[SEG_3-1:SEG_2]),                       \n";
 cla65 << "                     .c_in(carry[C_2]) // c32                          \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_3(.sum(sum[SEG_4-1:SEG_3]),                         \n";
 cla65 << " 			        .g_out(g_wire[C_4]),                              \n";
 cla65 << "                     .p_out(p_wire[C_4]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_4-1:SEG_3]),                       \n";
 cla65 << "                     .b_in(b_in[SEG_4-1:SEG_3]),                       \n";
 cla65 << "                     .c_in(carry[C_3]) // c48                          \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA65clg u_CLA65clg(.sum(sum[SEG_4]),                             \n";
 cla65 << " 	                     .c_out(c_out), // c65                        \n";
 cla65 << "                          .carry(carry), // c16, c32, c48              \n";
 cla65 << "                          .p_in0(p_wire[C_1]),                         \n";
 cla65 << "                          .g_in0(g_wire[C_1]),                         \n";
 cla65 << "                          .p_in1(p_wire[C_2]),                         \n";
 cla65 << "                          .g_in1(g_wire[C_2]),                         \n";
 cla65 << "                          .p_in2(p_wire[C_3]),                         \n";
 cla65 << "                          .g_in2(g_wire[C_3]),                         \n";
 cla65 << "                          .p_in3(p_wire[C_4]),                         \n";
 cla65 << "                          .g_in3(g_wire[C_4]),                         \n";
 cla65 << " 						 .a_in(a_in[SEG_4]),                          \n";
 cla65 << " 						 .b_in(b_in[SEG_4]),                          \n";
 cla65 << "                          .c_in(c_in) // c0                            \n";
 cla65 << "                           ) ;					                      \n";
 cla65 << " 	                                                                  \n";
 cla65 << " endmodule                                                             \n";

     cla65.close();	 
}
void CLA::CLA65clg(std::string string_in){
	 std::ofstream cla65clg;
     std::string        string_buf = "/CLA65clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla65clg.open(ss.str());		
 cla65clg << " `timescale 1 ns/1 ps                                                                      \n";
 cla65clg << " module CLA65clg(sum,                                                                      \n";
 cla65clg << "                 c_out,                                                                    \n";
 cla65clg << "                 carry,                                                                    \n";
 cla65clg << "                 p_in0,                                                                    \n";
 cla65clg << "                 g_in0,                                                                    \n";
 cla65clg << "                 p_in1,                                                                    \n";
 cla65clg << "                 g_in1,                                                                    \n";
 cla65clg << "                 p_in2,                                                                    \n";
 cla65clg << "                 g_in2,                                                                    \n";
 cla65clg << "                 p_in3,                                                                    \n";
 cla65clg << "                 g_in3,                                                                    \n";
 cla65clg << " 				a_in,                                                                        \n";
 cla65clg << " 				b_in,                                                                        \n";
 cla65clg << "                 c_in                                                                      \n";
 cla65clg << "                 ) ;                                                                       \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
 cla65clg << " parameter C_1 = 0 ;                                                                       \n";
 cla65clg << " parameter C_2 = 1 ;                                                                       \n";
 cla65clg << " parameter C_3 = 2 ;                                                                       \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " output                sum ;                                                               \n";
 cla65clg << " output                c_out ;                                                             \n";
 cla65clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " input                 p_in0 ;                                                             \n";
 cla65clg << " input                 g_in0 ;                                                             \n";
 cla65clg << " input                 p_in1 ;                                                             \n";
 cla65clg << " input                 g_in1 ;                                                             \n";
 cla65clg << " input                 p_in2 ;                                                             \n";
 cla65clg << " input                 g_in2 ;                                                             \n";
 cla65clg << " input                 p_in3 ;                                                             \n";
 cla65clg << " input                 g_in3 ;                                                             \n";
 cla65clg << " input                 a_in ;                                                              \n";
 cla65clg << " input                 b_in ;                                                              \n";
 cla65clg << " input                 c_in ;                                                              \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " wire                  g64_wire ;                                                          \n";
 cla65clg << " wire                  p64_wire ;                                                          \n";
 cla65clg << " wire                  c64_wire ;                                                          \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " 	//                                                                                       \n";
 cla65clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
 cla65clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
 cla65clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " 	//                                                                                       \n";
 cla65clg << " 	assign c64_wire = g_in3|(carry[C_3]&p_in3) ;                                             \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " 	//generate g                                                                             \n";
 cla65clg << " 	assign g64_wire = a_in & b_in ;                                                          \n";
 cla65clg << " 	//propagate p                                                                            \n";
 cla65clg << " 	assign p64_wire = a_in ^ b_in ;                                                          \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " 	//SUM                                                                                    \n";
 cla65clg << " 	assign sum = a_in^b_in^c64_wire ;                                                        \n";
 cla65clg << " 	//Carry Output                                                                           \n";
 cla65clg << " 	assign c_out = g64_wire|(c64_wire&p64_wire) ;                                            \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " endmodule                                                                                 \n";	 
	 cla65clg.close();	
}
void CLA::CLA96(std::string string_in){
	 std::ofstream cla96;
     std::string        string_buf = "/CLA96.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla96.open(ss.str());	
 cla96 << " `timescale 1 ns/1 ps                                         \n";
 cla96 << " module CLA96(sum,                                            \n";
 cla96 << " 			 c_out,                                          \n";
 cla96 << "              a_in,                                           \n";
 cla96 << "              b_in,                                           \n";
 cla96 << "              c_in                                            \n";
 cla96 << " 			 // rst_n,                                       \n";
 cla96 << "              // clk                                          \n";
 cla96 << "              ) ;                                             \n";
 cla96 << " 			                                                 \n";
 cla96 << " parameter CLA_WIDTH = 96 ;                                   \n";
 cla96 << " parameter CA_WIDTH = 3 ;                                     \n";
 cla96 << " parameter PG_WIDTH = 4 ;                                     \n";
 cla96 << " parameter C_1 = 0 ;                                          \n";
 cla96 << " parameter C_2 = 1 ;                                          \n";
 cla96 << " parameter C_3 = 2 ;                                          \n";
 cla96 << " parameter C_4 = 3 ;                                          \n";
 cla96 << " parameter SEG_1 = 24 ;                                       \n";
 cla96 << " parameter SEG_2 = 48 ;                                       \n";
 cla96 << " parameter SEG_3 = 72 ;                                       \n";
 cla96 << " parameter SEG_4 = 96 ;                                       \n";
 cla96 << "                                                              \n";
 cla96 << " output[CLA_WIDTH-1:0] sum ;                                  \n";
 cla96 << " output                c_out ;                                \n";
 cla96 << "                                                              \n";
 cla96 << " input [CLA_WIDTH-1:0] a_in ;                                 \n";
 cla96 << " input [CLA_WIDTH-1:0] b_in ;                                 \n";
 cla96 << " input                 c_in ;                                 \n";
 cla96 << " // input                 rst_n ;                             \n";
 cla96 << " // input                 clk ;                               \n";
 cla96 << "                                                              \n";
 cla96 << " wire  [PG_WIDTH-1:0]  g_wire ;                               \n";
 cla96 << " wire  [PG_WIDTH-1:0]  p_wire ;                               \n";
 cla96 << " wire  [CA_WIDTH-1:0]  carry ;                                \n";
 cla96 << "                                                              \n";
 cla96 << " 	//                                                       \n";
 cla96 << " 	CLA24 u_CLA24_0(.sum(sum[SEG_1-1:0]),                    \n";
 cla96 << "                     .g_out(g_wire[C_1]),                     \n";
 cla96 << "                     .p_out(p_wire[C_1]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_1-1:0]),                  \n";
 cla96 << "                     .b_in(b_in[SEG_1-1:0]),                  \n";
 cla96 << "                     .c_in(c_in) // c0                        \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << "     //                                                       \n";
 cla96 << " 	CLA24 u_CLA24_1(.sum(sum[SEG_2-1:SEG_1]),                \n";
 cla96 << "                     .g_out(g_wire[C_2]),                     \n";
 cla96 << "                     .p_out(p_wire[C_2]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_2-1:SEG_1]),              \n";
 cla96 << "                     .b_in(b_in[SEG_2-1:SEG_1]),              \n";
 cla96 << "                     .c_in(carry[C_1]) // c24                 \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << "     //                                                       \n";
 cla96 << " 	CLA24 u_CLA24_2(.sum(sum[SEG_3-1:SEG_2]),                \n";
 cla96 << "                     .g_out(g_wire[C_3]),                     \n";
 cla96 << "                     .p_out(p_wire[C_3]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_3-1:SEG_2]),              \n";
 cla96 << "                     .b_in(b_in[SEG_3-1:SEG_2]),              \n";
 cla96 << "                     .c_in(carry[C_2]) // c48                 \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << "     //                                                       \n";
 cla96 << " 	CLA24 u_CLA24_3(.sum(sum[SEG_4-1:SEG_3]),                \n";
 cla96 << "                     .g_out(g_wire[C_4]),                     \n";
 cla96 << "                     .p_out(p_wire[C_4]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_4-1:SEG_3]),              \n";
 cla96 << "                     .b_in(b_in[SEG_4-1:SEG_3]),              \n";
 cla96 << "                     .c_in(carry[C_3]) // c72                 \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << " 	                                                         \n";
 cla96 << "                                                              \n";
 cla96 << " 	//                                                       \n";
 cla96 << " 	CLA96clg u_CLA96clg(.c_out(c_out),                       \n";
 cla96 << " 						.carry(carry), // c24, c48, c72      \n";
 cla96 << "                         .p_in0(p_wire[C_1]),                 \n";
 cla96 << "                         .g_in0(g_wire[C_1]),                 \n";
 cla96 << "                         .p_in1(p_wire[C_2]),                 \n";
 cla96 << "                         .g_in1(g_wire[C_2]),                 \n";
 cla96 << "                         .p_in2(p_wire[C_3]),                 \n";
 cla96 << "                         .g_in2(g_wire[C_3]),                 \n";
 cla96 << "                         .p_in3(p_wire[C_4]),                 \n";
 cla96 << "                         .g_in3(g_wire[C_4]),                 \n";
 cla96 << "                         .c_in(c_in) // c0                    \n";
 cla96 << "                         ) ;                                  \n";                                
 cla96 << "                                                              \n";
 cla96 << " endmodule                                                    \n";

     cla96.close();		
}
void CLA::CLA96clg(std::string string_in){
	 std::ofstream cla96clg;
     std::string        string_buf = "/CLA96clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla96clg.open(ss.str());	
     cla96clg << " `timescale 1 ns/1 ps                                                                       \n";
     cla96clg << " module CLA96clg(c_out,                                                                     \n";
     cla96clg << " 				carry,                                                                        \n";
     cla96clg << "                 p_in0,                                                                     \n";
     cla96clg << "                 g_in0,                                                                     \n";
     cla96clg << "                 p_in1,                                                                     \n";
     cla96clg << "                 g_in1,                                                                     \n";
     cla96clg << "                 p_in2,                                                                     \n";
     cla96clg << "                 g_in2,                                                                     \n";
     cla96clg << "                 p_in3,                                                                     \n";
     cla96clg << "                 g_in3,                                                                     \n";
     cla96clg << "                 c_in                                                                       \n";
     cla96clg << "                 ) ;                                                                        \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " parameter CA_WIDTH = 3 ;                                                                   \n";
     cla96clg << " parameter C_1 = 0 ;                                                                        \n";
     cla96clg << " parameter C_2 = 1 ;                                                                        \n";
     cla96clg << " parameter C_3 = 2 ;                                                                        \n";
     cla96clg << "                                                                                            \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " output[CA_WIDTH-1:0]  carry ;                                                              \n";
     cla96clg << " output                c_out ;                                                              \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " input                 p_in0 ;                                                              \n";
     cla96clg << " input                 g_in0 ;                                                              \n";
     cla96clg << " input                 p_in1 ;                                                              \n";
     cla96clg << " input                 g_in1 ;                                                              \n";
     cla96clg << " input                 p_in2 ;                                                              \n";
     cla96clg << " input                 g_in2 ;                                                              \n";
     cla96clg << " input                 p_in3 ;                                                              \n";
     cla96clg << " input                 g_in3 ;                                                              \n";
     cla96clg << " input                 c_in ;                                                               \n";
     cla96clg << " 	                                                                                          \n";
     cla96clg << " 	//                                                                                        \n";
     cla96clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                  \n";
     cla96clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                              \n";
     cla96clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;    \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " 	assign c_out = g_in3|(carry[C_3]&p_in3) ;                                                 \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " endmodule                                                                                  \n";
         
	 cla96clg.close();	
}
void CLA::CLA144(std::string string_in){
	 std::ofstream cla144;
     std::string        string_buf = "/CLA144.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla144.open(ss.str());	
 cla144 << " `timescale 1 ns/1 ps                                                         \n";
 cla144 << " module CLA144(sum,                                                           \n";
 cla144 << " 			  // c_out,                                                       \n";
 cla144 << " 			  g_out,                                                          \n";
 cla144 << "               p_out,                                                         \n";
 cla144 << "               a_in,                                                          \n";
 cla144 << "               b_in,                                                          \n";
 cla144 << "               c_in                                                           \n";
 cla144 << " 			  // rst_n,                                                       \n";
 cla144 << "               // clk                                                         \n";
 cla144 << "               ) ;                                                            \n";
 cla144 << " 			                                                                  \n";
 cla144 << " parameter CLA_WIDTH = 144 ;                                                  \n";
 cla144 << " parameter CA_WIDTH = 5 ;                                                     \n";
 cla144 << " parameter PG_WIDTH = 6 ;                                                     \n";
 cla144 << " parameter C_1 = 0 ;                                                          \n";
 cla144 << " parameter C_2 = 1 ;                                                          \n";
 cla144 << " parameter C_3 = 2 ;                                                          \n";
 cla144 << " parameter C_4 = 3 ;                                                          \n";
 cla144 << " parameter C_5 = 4 ;                                                          \n";
 cla144 << " parameter C_6 = 5 ;                                                          \n";
 cla144 << " parameter SEG_1 = 24 ;                                                       \n";
 cla144 << " parameter SEG_2 = 48 ;                                                       \n";
 cla144 << " parameter SEG_3 = 72 ;                                                       \n";
 cla144 << " parameter SEG_4 = 96 ;                                                       \n";
 cla144 << " parameter SEG_5 = 120 ;                                                      \n";
 cla144 << " parameter SEG_6 = 144 ;                                                      \n";
 cla144 << "                                                                              \n";
 cla144 << " output[CLA_WIDTH-1:0] sum ;                                                  \n";
 cla144 << " // output                c_out ;                                             \n";
 cla144 << " output                g_out ;                                                \n";
 cla144 << " output                p_out ;                                                \n";
 cla144 << "                                                                              \n";
 cla144 << " input [CLA_WIDTH-1:0] a_in ;                                                 \n";
 cla144 << " input [CLA_WIDTH-1:0] b_in ;                                                 \n";
 cla144 << " input                 c_in ;                                                 \n";
 cla144 << " // input                 rst_n ;                                             \n";
 cla144 << " // input                 clk ;                                               \n";
 cla144 << "                                                                              \n";
 cla144 << " wire  [PG_WIDTH-1:0]  g_wire ;                                               \n";
 cla144 << " wire  [PG_WIDTH-1:0]  p_wire ;                                               \n";
 cla144 << " wire  [CA_WIDTH-1:0]  carry ;                                                \n";
 cla144 << "                                                                              \n";
 cla144 << " 	//                                                                        \n";
 cla144 << " 	CLA24 u_CLA24_0(.sum(sum[SEG_1-1:0]),                                     \n";
 cla144 << "                     .g_out(g_wire[C_1]),                                     \n";
 cla144 << "                     .p_out(p_wire[C_1]),                                     \n";
 cla144 << "                     .a_in(a_in[SEG_1-1:0]),                                  \n";
 cla144 << "                     .b_in(b_in[SEG_1-1:0]),                                  \n";
 cla144 << "                     .c_in(c_in) // c0                                        \n";
 cla144 << " 				    // .rst_n(rst_n),                                         \n";
 cla144 << "                     // .clk(clk)                                             \n";
 cla144 << "                     ) ;                                                      \n";
 cla144 << "     //                                                                       \n";
 cla144 << " 	CLA24 u_CLA24_1(.sum(sum[SEG_2-1:SEG_1]),                                 \n";
 cla144 << "                     .g_out(g_wire[C_2]),                                     \n";
 cla144 << "                     .p_out(p_wire[C_2]),                                     \n";
 cla144 << "                     .a_in(a_in[SEG_2-1:SEG_1]),                              \n";
 cla144 << "                     .b_in(b_in[SEG_2-1:SEG_1]),                              \n";
 cla144 << "                     .c_in(carry[C_1]) // c24                                 \n";
 cla144 << " 				    // .rst_n(rst_n),                                         \n";
 cla144 << "                     // .clk(clk)                                             \n";
 cla144 << "                     ) ;                                                      \n";
 cla144 << "     //                                                                       \n";
 cla144 << " 	CLA24 u_CLA24_2(.sum(sum[SEG_3-1:SEG_2]),                                 \n";
 cla144 << "                     .g_out(g_wire[C_3]),                                     \n";
 cla144 << "                     .p_out(p_wire[C_3]),                                     \n";
 cla144 << "                     .a_in(a_in[SEG_3-1:SEG_2]),                              \n";
 cla144 << "                     .b_in(b_in[SEG_3-1:SEG_2]),                              \n";
 cla144 << "                     .c_in(carry[C_2]) // c48                                 \n";
 cla144 << " 				    // .rst_n(rst_n),                                         \n";
 cla144 << "                     // .clk(clk)                                             \n";
 cla144 << "                     ) ;                                                      \n";
 cla144 << "     //                                                                       \n";
 cla144 << " 	CLA24 u_CLA24_3(.sum(sum[SEG_4-1:SEG_3]),                                 \n";
 cla144 << "                     .g_out(g_wire[C_4]),                                     \n";
 cla144 << "                     .p_out(p_wire[C_4]),                                     \n";
 cla144 << "                     .a_in(a_in[SEG_4-1:SEG_3]),                              \n";
 cla144 << "                     .b_in(b_in[SEG_4-1:SEG_3]),                              \n";
 cla144 << "                     .c_in(carry[C_3]) // c72                                 \n";
 cla144 << " 				    // .rst_n(rst_n),                                         \n";
 cla144 << "                     // .clk(clk)                                             \n";
 cla144 << "                     ) ;                                                      \n";
 cla144 << "     //                                                                       \n";
 cla144 << " 	CLA24 u_CLA24_4(.sum(sum[SEG_5-1:SEG_4]),                                 \n";
 cla144 << "                     .g_out(g_wire[C_5]),                                     \n";
 cla144 << "                     .p_out(p_wire[C_5]),                                     \n";
 cla144 << "                     .a_in(a_in[SEG_5-1:SEG_4]),                              \n";
 cla144 << "                     .b_in(b_in[SEG_5-1:SEG_4]),                              \n";
 cla144 << "                     .c_in(carry[C_4]) // c96                                 \n";
 cla144 << " 				    // .rst_n(rst_n),                                         \n";
 cla144 << "                     // .clk(clk)                                             \n";
 cla144 << "                     ) ;                                                      \n";
 cla144 << " 	//                                                                        \n";
 cla144 << " 	CLA24 u_CLA24_5(.sum(sum[SEG_6-1:SEG_5]),                                 \n";
 cla144 << "                     .g_out(g_wire[C_6]),                                     \n";
 cla144 << "                     .p_out(p_wire[C_6]),                                     \n";
 cla144 << "                     .a_in(a_in[SEG_6-1:SEG_5]),                              \n";
 cla144 << "                     .b_in(b_in[SEG_6-1:SEG_5]),                              \n";
 cla144 << "                     .c_in(carry[C_5]) // c120                                \n";
 cla144 << " 				    // .rst_n(rst_n),                                         \n";
 cla144 << "                     // .clk(clk)                                             \n";
 cla144 << "                     ) ;                                                      \n";
 cla144 << " 	                                                                          \n";
 cla144 << "                                                                              \n";
 cla144 << " 	//                                                                        \n";
 cla144 << " 	CLA144clg u_CLA144clg(.g_out(g_out),                                      \n";
 cla144 << " 					      .p_out(p_out),                                      \n";
 cla144 << " 						  // .c_out(c_out),                                   \n";
 cla144 << " 						  .carry(carry), // c24, c48, c72, c96, c120          \n";
 cla144 << "                           .p_in0(p_wire[C_1]),                               \n";
 cla144 << "                           .g_in0(g_wire[C_1]),                               \n";
 cla144 << "                           .p_in1(p_wire[C_2]),                               \n";
 cla144 << "                           .g_in1(g_wire[C_2]),                               \n";
 cla144 << "                           .p_in2(p_wire[C_3]),                               \n";
 cla144 << "                           .g_in2(g_wire[C_3]),                               \n";
 cla144 << "                           .p_in3(p_wire[C_4]),                               \n";
 cla144 << "                           .g_in3(g_wire[C_4]),                               \n";
 cla144 << " 						  .p_in4(p_wire[C_5]),                                \n";
 cla144 << "                           .g_in4(g_wire[C_5]),                               \n";
 cla144 << " 						  .p_in5(p_wire[C_6]),                                \n";
 cla144 << "                           .g_in5(g_wire[C_6]),                               \n";
 cla144 << "                           .c_in(c_in) // c0                                  \n";
 cla144 << "                           ) ;                                                \n";                  
 cla144 << "                                                                              \n";
 cla144 << " endmodule                                                                    \n";

	 cla144.close();	
}
void CLA::CLA144clg(std::string string_in){
	 std::ofstream cla144clg;
     std::string        string_buf = "/CLA144clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla144clg.open(ss.str());	
     cla144clg << " //==================================================                                                                                                         \n";
     cla144clg << " //Writer     : Jheng-Hao Ye                                                                                                                                  \n";
     cla144clg << " //Date       : 2016/6/24                                                                                                                                     \n";
     cla144clg << " //Note       : 144-bit Carry Lookahead Generator (6-bit)                                                                                                     \n";
     cla144clg << " //==================================================                                                                                                         \n";
     cla144clg << " `timescale 1 ns/1 ps                                                                                                                                         \n";
     cla144clg << " module CLA144clg(g_out,                                                                                                                                      \n";
     cla144clg << " 				 p_out,                                                                                                                                         \n";
     cla144clg << "                  // c_out,                                                                                                                                   \n";
     cla144clg << " 				 carry,                                                                                                                                         \n";
     cla144clg << "                  p_in0,                                                                                                                                      \n";
     cla144clg << "                  g_in0,                                                                                                                                      \n";
     cla144clg << "                  p_in1,                                                                                                                                      \n";
     cla144clg << "                  g_in1,                                                                                                                                      \n";
     cla144clg << "                  p_in2,                                                                                                                                      \n";
     cla144clg << "                  g_in2,                                                                                                                                      \n";
     cla144clg << "                  p_in3,                                                                                                                                      \n";
     cla144clg << "                  g_in3,                                                                                                                                      \n";
     cla144clg << " 				 p_in4,                                                                                                                                         \n";
     cla144clg << "                  g_in4,                                                                                                                                      \n";
     cla144clg << " 				 p_in5,                                                                                                                                         \n";
     cla144clg << "                  g_in5,                                                                                                                                      \n";
     cla144clg << "                  c_in                                                                                                                                        \n";
     cla144clg << "                  ) ;                                                                                                                                         \n";
     cla144clg << "                                                                                                                                                              \n";
     cla144clg << " parameter CA_WIDTH = 5 ;                                                                                                                                     \n";
     cla144clg << " parameter C_1 = 0 ;                                                                                                                                          \n";
     cla144clg << " parameter C_2 = 1 ;                                                                                                                                          \n";
     cla144clg << " parameter C_3 = 2 ;                                                                                                                                          \n";
     cla144clg << " parameter C_4 = 3 ;                                                                                                                                          \n";
     cla144clg << " parameter C_5 = 4 ;                                                                                                                                          \n";
     cla144clg << "                                                                                                                                                              \n";
     cla144clg << " output                g_out ;                                                                                                                                \n";
     cla144clg << " output                p_out ;                                                                                                                                \n";
     cla144clg << " output[CA_WIDTH-1:0]  carry ;                                                                                                                                \n";
     cla144clg << " // output                c_out ;                                                                                                                             \n";
     cla144clg << "                                                                                                                                                              \n";
     cla144clg << " input                 p_in0 ;                                                                                                                                \n";
     cla144clg << " input                 g_in0 ;                                                                                                                                \n";
     cla144clg << " input                 p_in1 ;                                                                                                                                \n";
     cla144clg << " input                 g_in1 ;                                                                                                                                \n";
     cla144clg << " input                 p_in2 ;                                                                                                                                \n";
     cla144clg << " input                 g_in2 ;                                                                                                                                \n";
     cla144clg << " input                 p_in3 ;                                                                                                                                \n";
     cla144clg << " input                 g_in3 ;                                                                                                                                \n";
     cla144clg << " input                 p_in4 ;                                                                                                                                \n";
     cla144clg << " input                 g_in4 ;                                                                                                                                \n";
     cla144clg << " input                 p_in5 ;                                                                                                                                \n";
     cla144clg << " input                 g_in5 ;                                                                                                                                \n";
     cla144clg << " input                 c_in ;                                                                                                                                 \n";
     cla144clg << " 	                                                                                                                                                            \n";
     cla144clg << " 	//                                                                                                                                                          \n";
     cla144clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                                                                                    \n";
     cla144clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                                                                                                \n";
     cla144clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;                                                                      \n";
     cla144clg << " 	assign carry[C_4] = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3)|(c_in&p_in0&p_in1&p_in2&p_in3) ;                                      \n";
     cla144clg << " 	assign carry[C_5] = g_in4|(g_in3&p_in4)|(g_in2&p_in3&p_in4)|(g_in1&p_in2&p_in3&p_in4)|(g_in0&p_in1&p_in2&p_in3&p_in4)|(c_in&p_in0&p_in1&p_in2&p_in3&p_in4) ;\n";
     cla144clg << "                                                                                                                                                              \n";
     cla144clg << " 	//g[0,144], p[0,144]                                                                                                                                        \n";
     cla144clg << " 	assign g_out = g_in5|(g_in4&p_in5)|(g_in3&p_in4&p_in5)|(g_in2&p_in3&p_in4&p_in5)|(g_in1&p_in2&p_in3&p_in4&p_in5)|(g_in0&p_in1&p_in2&p_in3&p_in4&p_in5) ;    \n";
     cla144clg << " 	assign p_out = p_in5&p_in4&p_in3&p_in2&p_in1&p_in0 ;                                                                                                        \n";
     cla144clg << " 	// assign c_out = g_in5|(carry[C_5]&p_in5) ;                                                                                                                \n";
     cla144clg << "                                                                                                                                                              \n";
     cla144clg << " endmodule                                                                                                                                                    \n";
     	
	 cla144clg.close();		
}
void CLA::CLA192(std::string string_in){
	 std::ofstream cla192;
     std::string        string_buf = "/CLA192.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla192.open(ss.str());	
 cla192 << " `timescale 1 ns/1 ps                                              \n";
 cla192 << " module CLA192(sum,                                                \n";
 cla192 << "               c_out,                                              \n";
 cla192 << "               a_in,                                               \n";
 cla192 << "               b_in,                                               \n";
 cla192 << "               c_in                                                \n";
 cla192 << " 			  // rst_n,                                            \n";
 cla192 << "               // clk                                              \n";
 cla192 << "               ) ;                                                 \n";
 cla192 << " parameter CLA_WIDTH = 192 ;                                       \n";
 cla192 << " parameter CA_WIDTH = 2 ;                                          \n";
 cla192 << " parameter PG_WIDTH = 3 ;                                          \n";
 cla192 << " //                                                                \n";
 cla192 << " parameter C_1 = 0 ;                                               \n";
 cla192 << " parameter C_2 = 1 ;                                               \n";
 cla192 << " parameter C_3 = 2 ;                                               \n";
 cla192 << " //                                                                \n";
 cla192 << " parameter SEG_1 = 64 ;                                            \n";
 cla192 << " parameter SEG_2 = 128 ;                                           \n";
 cla192 << " parameter SEG_3 = 192 ;                                           \n";
 cla192 << "                                                                   \n";
 cla192 << "                                                                   \n";
 cla192 << " output[CLA_WIDTH-1:0] sum ;                                       \n";
 cla192 << " output                c_out ;                                     \n";
 cla192 << "                                                                   \n";
 cla192 << "                                                                   \n";
 cla192 << " input [CLA_WIDTH-1:0] a_in ;                                      \n";
 cla192 << " input [CLA_WIDTH-1:0] b_in ;                                      \n";
 cla192 << " input                 c_in ;                                      \n";
 cla192 << " // input                 rst_n ;                                  \n";
 cla192 << " // input                 clk ;                                    \n";
 cla192 << "                                                                   \n";
 cla192 << " wire  [PG_WIDTH-1:0]  g_wire ;                                    \n";
 cla192 << " wire  [PG_WIDTH-1:0]  p_wire ;                                    \n";
 cla192 << " wire  [CA_WIDTH-1:0]  carry ;                                     \n";
 cla192 << " 	                                                               \n";
 cla192 << " 	                                                               \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA64 u_CLA64_0(.sum(sum[SEG_1-1:0]),                          \n";
 cla192 << " 			        .g_out(g_wire[C_1]),                           \n";
 cla192 << "                     .p_out(p_wire[C_1]),                          \n";
 cla192 << "                     .a_in(a_in[SEG_1-1:0]),                       \n";
 cla192 << "                     .b_in(b_in[SEG_1-1:0]),                       \n";
 cla192 << "                     .c_in(c_in) // c0                             \n";
 cla192 << " 					// .rst_n(rst_n),                              \n";
 cla192 << "                     // .clk(clk)                                  \n";
 cla192 << "                     ) ;                                           \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA64 u_CLA64_1(.sum(sum[SEG_2-1:SEG_1]),                      \n";
 cla192 << " 			        .g_out(g_wire[C_2]),                           \n";
 cla192 << "                     .p_out(p_wire[C_2]),                          \n";
 cla192 << "                     .a_in(a_in[SEG_2-1:SEG_1]),                   \n";
 cla192 << "                     .b_in(b_in[SEG_2-1:SEG_1]),                   \n";
 cla192 << "                     .c_in(carry[C_1]) // c64                      \n";
 cla192 << " 					// .rst_n(rst_n),                              \n";
 cla192 << "                     // .clk(clk)                                  \n";
 cla192 << "                     ) ;                                           \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA64 u_CLA64_2(.sum(sum[SEG_3-1:SEG_2]),                      \n";
 cla192 << " 			        .g_out(g_wire[C_3]),                           \n";
 cla192 << "                     .p_out(p_wire[C_3]),                          \n";
 cla192 << "                     .a_in(a_in[SEG_3-1:SEG_2]),                   \n";
 cla192 << "                     .b_in(b_in[SEG_3-1:SEG_2]),                   \n";
 cla192 << "                     .c_in(carry[C_2]) // c128                     \n";
 cla192 << " 					// .rst_n(rst_n),                              \n";
 cla192 << "                     // .clk(clk)                                  \n";
 cla192 << "                     ) ;                                           \n";
 cla192 << " 	                                                               \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA192clg u_CLA192clg(.c_out(c_out),                           \n";
 cla192 << " 	                      // .g_out(g_out),                        \n";
 cla192 << " 						  // .p_out(p_out),                        \n";
 cla192 << "                           .carry(carry), // c64, c128             \n";
 cla192 << "                           .p_in0(p_wire[C_1]),                    \n";
 cla192 << "                           .g_in0(g_wire[C_1]),                    \n";
 cla192 << "                           .p_in1(p_wire[C_2]),                    \n";
 cla192 << "                           .g_in1(g_wire[C_2]),                    \n";
 cla192 << "                           .p_in2(p_wire[C_3]),                    \n";
 cla192 << "                           .g_in2(g_wire[C_3]),                    \n";
 cla192 << "                           .c_in(c_in) // c0                       \n";
 cla192 << "                            ) ;                                    \n";
 cla192 << "                                                                   \n";
 cla192 << " endmodule                                                         \n";
     	 cla192.close();	
}
void CLA::CLA192clg(std::string string_in){
	 std::ofstream cla192clg;
     std::string        string_buf = "/CLA192clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla192clg.open(ss.str());
 cla192clg << " `timescale 1 ns/1 ps                                                                        \n";
 cla192clg << " module CLA192clg(c_out,                                                                     \n";
 cla192clg << " 				 // g_out,                                                                  \n";
 cla192clg << " 				 // p_out,                                                                  \n";
 cla192clg << "                  carry,                                                                     \n";
 cla192clg << "                  p_in0,                                                                     \n";
 cla192clg << "                  g_in0,                                                                     \n";
 cla192clg << "                  p_in1,                                                                     \n";
 cla192clg << "                  g_in1,                                                                     \n";
 cla192clg << "                  p_in2,                                                                     \n";
 cla192clg << "                  g_in2,                                                                     \n";
 cla192clg << "                  c_in                                                                       \n";
 cla192clg << "                  ) ;                                                                        \n";
 cla192clg << "                                                                                             \n";
 cla192clg << " parameter CA_WIDTH = 2 ;                                                                    \n";
 cla192clg << " parameter C_1 = 0 ;                                                                         \n";
 cla192clg << " parameter C_2 = 1 ;                                                                         \n";
 cla192clg << "                                                                                             \n";
 cla192clg << " output                c_out ;                                                               \n";
 cla192clg << " // output                g_out ;                                                            \n";
 cla192clg << " // output                p_out ;                                                            \n";
 cla192clg << " output[CA_WIDTH-1:0]  carry ;                                                               \n";
 cla192clg << "                                                                                             \n";
 cla192clg << " input                 p_in0 ;                                                               \n";
 cla192clg << " input                 g_in0 ;                                                               \n";
 cla192clg << " input                 p_in1 ;                                                               \n";
 cla192clg << " input                 g_in1 ;                                                               \n";
 cla192clg << " input                 p_in2 ;                                                               \n";
 cla192clg << " input                 g_in2 ;                                                               \n";
 cla192clg << " input                 c_in ;                                                                \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " 	//                                                                                      \n";
 cla192clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                \n";
 cla192clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                            \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " 	//                                                                                      \n";
 cla192clg << " 	// assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;   \n";
 cla192clg << " 	// assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                             \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " 	assign c_out = g_in2|(carry[C_2]&p_in2) ;                                               \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " endmodule                                                                                   \n";
     
     cla192clg.close();		
}
void CLA::CLA432(std::string string_in){
	 std::ofstream cla432;
     std::string        string_buf = "/CLA432.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla432.open(ss.str());	
 cla432 << " `timescale 1 ns/1 ps                                              \n";
 cla432 << " module CLA432(sum,                                                \n";
 cla432 << " 			  // c_out,                                            \n";
 cla432 << " 			  // g_out,                                            \n";
 cla432 << "               // p_out,                                           \n";
 cla432 << "               a_in,                                               \n";
 cla432 << "               b_in,                                               \n";
 cla432 << "               c_in                                                \n";
 cla432 << " 			  // rst_n,                                            \n";
 cla432 << "               // clk                                              \n";
 cla432 << "               ) ;                                                 \n";
 cla432 << " 			                                                       \n";
 cla432 << " parameter CLA_WIDTH = 432 ;                                       \n";
 cla432 << " parameter CA_WIDTH = 2 ;                                          \n";
 cla432 << " parameter PG_WIDTH = 3 ;                                          \n";
 cla432 << " parameter C_1 = 0 ;                                               \n";
 cla432 << " parameter C_2 = 1 ;                                               \n";
 cla432 << " parameter C_3 = 2 ;                                               \n";
 cla432 << " parameter SEG_1 = 144 ;                                           \n";
 cla432 << " parameter SEG_2 = 288 ;                                           \n";
 cla432 << " parameter SEG_3 = 432 ;                                           \n";
 cla432 << "                                                                   \n";
 cla432 << " output[CLA_WIDTH-1:0] sum ;                                       \n";
 cla432 << " // output                c_out ;                                  \n";
 cla432 << " // output                g_out ;                                  \n";
 cla432 << " // output                p_out ;                                  \n";
 cla432 << "                                                                   \n";
 cla432 << " input [CLA_WIDTH-1:0] a_in ;                                      \n";
 cla432 << " input [CLA_WIDTH-1:0] b_in ;                                      \n";
 cla432 << " input                 c_in ;                                      \n";
 cla432 << " // input                 rst_n ;                                  \n";
 cla432 << " // input                 clk ;                                    \n";
 cla432 << "                                                                   \n";
 cla432 << " wire  [PG_WIDTH-1:0]  g_wire ;                                    \n";
 cla432 << " wire  [PG_WIDTH-1:0]  p_wire ;                                    \n";
 cla432 << " wire  [CA_WIDTH-1:0]  carry ;                                     \n";
 cla432 << "                                                                   \n";
 cla432 << " 	//                                                             \n";
 cla432 << " 	CLA144 u_CLA144_0(.sum(sum[SEG_1-1:0]),                        \n";
 cla432 << "                       .g_out(g_wire[C_1]),                        \n";
 cla432 << "                       .p_out(p_wire[C_1]),                        \n";
 cla432 << "                       .a_in(a_in[SEG_1-1:0]),                     \n";
 cla432 << "                       .b_in(b_in[SEG_1-1:0]),                     \n";
 cla432 << "                       .c_in(c_in) // c0                           \n";
 cla432 << " 				      // .rst_n(rst_n),                            \n";
 cla432 << "                       // .clk(clk)                                \n";
 cla432 << "                       ) ;                                         \n";
 cla432 << " 	//                                                             \n";
 cla432 << " 	CLA144 u_CLA144_1(.sum(sum[SEG_2-1:SEG_1]),                    \n";
 cla432 << "                       .g_out(g_wire[C_2]),                        \n";
 cla432 << "                       .p_out(p_wire[C_2]),                        \n";
 cla432 << "                       .a_in(a_in[SEG_2-1:SEG_1]),                 \n";
 cla432 << "                       .b_in(b_in[SEG_2-1:SEG_1]),                 \n";
 cla432 << "                       .c_in(carry[C_1]) // c144                   \n";
 cla432 << " 				      // .rst_n(rst_n),                            \n";
 cla432 << "                       // .clk(clk)                                \n";
 cla432 << "                       ) ;				                           \n";
 cla432 << " 	//                                                             \n";
 cla432 << " 	CLA144 u_CLA144_2(.sum(sum[SEG_3-1:SEG_2]),                    \n";
 cla432 << "                       .g_out(g_wire[C_3]),                        \n";
 cla432 << "                       .p_out(p_wire[C_3]),                        \n";
 cla432 << "                       .a_in(a_in[SEG_3-1:SEG_2]),                 \n";
 cla432 << "                       .b_in(b_in[SEG_3-1:SEG_2]),                 \n";
 cla432 << "                       .c_in(carry[C_2]) // c288                   \n";
 cla432 << " 				      // .rst_n(rst_n),                            \n";
 cla432 << "                       // .clk(clk)                                \n";
 cla432 << "                       ) ;		                                   \n";
 cla432 << " 	//                                                             \n";
 cla432 << " 	CLA432clg u_CLA432clg(//.g_out(g_out),                         \n";
 cla432 << " 					      // .p_out(p_out),                        \n";
 cla432 << " 						  // .c_out(c_out),                        \n";
 cla432 << " 						  .carry(carry), // c144, c288             \n";
 cla432 << "                           .p_in0(p_wire[C_1]),                    \n";
 cla432 << "                           .g_in0(g_wire[C_1]),                    \n";
 cla432 << "                           .p_in1(p_wire[C_2]),                    \n";
 cla432 << "                           .g_in1(g_wire[C_2]),                    \n";
 cla432 << "                           .p_in2(p_wire[C_3]),                    \n";
 cla432 << "                           .g_in2(g_wire[C_3]),                    \n";
 cla432 << "                           .c_in(c_in) // c0                       \n";
 cla432 << "                           ) ;                                     \n";
 cla432 << " 						                                           \n";
 cla432 << " 						                                           \n";
 cla432 << " endmodule                                                         \n";

	 cla432.close();		
}
void CLA::CLA432clg(std::string string_in){
	 std::ofstream cla432clg;
     std::string        string_buf = "/CLA432clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla432clg.open(ss.str());	
 cla432clg << " `timescale 1 ns/1 ps                                               \n";
 cla432clg << " module CLA432clg(//g_out,                                          \n";
 cla432clg << " 				 // p_out,                                         \n";
 cla432clg << "                  // c_out,                                         \n";
 cla432clg << " 				 carry,                                            \n";
 cla432clg << "                  p_in0,                                            \n";
 cla432clg << "                  g_in0,                                            \n";
 cla432clg << "                  p_in1,                                            \n";
 cla432clg << "                  g_in1,                                            \n";
 cla432clg << "                  p_in2,                                            \n";
 cla432clg << "                  g_in2,                                            \n";
 cla432clg << "                  c_in                                              \n";
 cla432clg << "                  ) ;                                               \n";
 cla432clg << "                                                                    \n";
 cla432clg << " parameter CA_WIDTH = 2 ;                                           \n";
 cla432clg << " parameter C_1 = 0 ;                                                \n";
 cla432clg << " parameter C_2 = 1 ;                                                \n";
 cla432clg << "                                                                    \n";
 cla432clg << "                                                                    \n";
 cla432clg << " // output                g_out ;                                   \n";
 cla432clg << " // output                p_out ;                                   \n";
 cla432clg << " output[CA_WIDTH-1:0]  carry ;                                      \n";
 cla432clg << " // output                c_out ;                                   \n";
 cla432clg << "                                                                    \n";
 cla432clg << " input                 p_in0 ;                                      \n";
 cla432clg << " input                 g_in0 ;                                      \n";
 cla432clg << " input                 p_in1 ;                                      \n";
 cla432clg << " input                 g_in1 ;                                      \n";
 cla432clg << " input                 p_in2 ;                                      \n";
 cla432clg << " input                 g_in2 ;                                      \n";
 cla432clg << " input                 c_in ;                                       \n";
 cla432clg << " 	                                                               \n";
 cla432clg << " 	//                                                             \n";
 cla432clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                       \n";
 cla432clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;   \n";
 cla432clg << "                                                                    \n";
 cla432clg << " 	//                                                             \n";
 cla432clg << " 	// assign g_out = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2) ;    \n";
 cla432clg << " 	// assign p_out = p_in2&p_in1&p_in0 ;                          \n";
 cla432clg << " 	// assign c_out = g_in2|(carry[C_2]&p_in2) ;                   \n";
 cla432clg << "                                                                    \n";
 cla432clg << " endmodule                                                          \n";     
	 cla432clg.close();		
} 