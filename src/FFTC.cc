#include <vector>
#include <iostream>
#include <fstream>
#include <math.h>
#include <sstream>
#include <NTL/ZZ.h>

#include "FFTC.h"

using namespace NTL;

void FFTC::parameter_in(unsigned long r,unsigned long N,unsigned long CP_w,long m_th,long CP_in,int IsRandom_CP,int frequency){
	 Freq = frequency;
	 m = m_th;
     ZZ  prime;
     ZZ  point;
	 ZZ  ZZTMP;
	 ZZ  IZZTMP;
     conv(prime ,"18446744069414584321");
     conv(point , (long)N);
	 conv(ZZTMP,"4826067553107967711");
     IN = InvMod(point,prime);
	 IZZTMP = InvMod(ZZTMP,prime);
     //
     radix     = r;
	 fft_point = N;
	 CP_width  = CP_w;
     cyclotpoly_parameter_set(m,CP_in,IsRandom_CP);
     //=======================================================
     //overflow constraint
     //avoid overflow constraint: 2^64 - 2^32 +1 > (cyclotomic_prime-1)^2 * phi(m)
     ZZ max_value;
     max_value = (cyclotomic_prime-1)*(cyclotomic_prime-1);
     max_value = max_value * phi_m;
     if(max_value > prime) std::cout << "ERROR!!!! overflow ! Test prime (cyclotomic_prime) is so big.\n";
     //======================================================
	 //using class CenCtrl function to calculate parameter such like 
	 CenCtrl cal_par; 
	 cal_par.parameter_set(radix,m,phi_m,fft_point,CP_width);
	 addr_width     = cal_par.addr_width;
	 ROM_width      = cal_par.ROM_width;
	 data_cnt_width = cal_par.data_cnt_width;
	 //=====================================================
     /*barrett modular reduction  paramter calculate */
     long alpha;
     long beta;
     long prime_longtype;
	 long pre_computing_longtype;
     
     double pre_com_par;	
     double pre_width_doubletype;	 
	 prime_longtype         = to_long(cyclotomic_prime);
     alpha                  = CP_width + 1;    // alpha  = n + 1;
     beta                   = -2;               // beta   = -2 ;	 
	 pre_com_par            = exp2(CP_width+alpha);
	 pre_com_par            = floor(pre_com_par / prime_longtype);
	 pre_computing_longtype = (long) pre_com_par;
	 //Set public parameter
	 pre_computing   = pre_computing_longtype;
	 
	 pre_width_doubletype = log2(pre_computing_longtype);
	 pre_width_doubletype = ceil(pre_width_doubletype);
	 PRE_width  = (unsigned long)pre_width_doubletype;
}
void FFTC::gen(std::string string_in){
	 CenCtrl  cen_0;
     CLA      cla_0;
     Mod	  mod_0;
	 Mux      mux_0;
	 //CSA      csa_0;
	 Pipe     pipe_0;
	 //Sum      sum_0;
	 
	 cen_0.parameter_set(radix,m,phi_m,fft_point,CP_width);
	 mux_0.parameter_init(cen_0.addr_width,CP_width);
	 //verilog file
     FFTP_gen(string_in);
	 cen_0.gen(radix,string_in);                     //modify 2020/03/11
	 cla_0.gen(string_in);                           //modify 2020/03/10
	 mod_0.gen(radix,string_in,CP_width,to_long(cyclotomic_prime),m_2);         //modify 2020/04/21
     mux_0.gen(cen_0.addr_width,radix,CP_width,string_in,IN); //modify 2020/04/21
	 //csa_0.gen(fft_point,radix,string_in);                     //modify 2020/03/10
	 pipe_0.gen(fft_point,radix,string_in);                    //modify 2020/03/10
	 //sum_0.gen(fft_point,radix,string_in);                     //modify 2020/03/10
	 lc_script_gen();
	 syn_script_gen();
}
void FFTC::testingfile_gen(std::string string_in,std::string Data_in,int IsRandom){
	 std::cout << "testing Data generate start !!! \n";
     //std::cout << "12313IsRandom = " << IsRandom << std::endl;  //siang-----------------------
	 testingData_gen(Data_in,IsRandom);
	 std::cout << "testing Data generate over !!! \n";
	 std::cout << "**************************\n";
	 std::cout << "GoldenData generate start !!! \n";
	 GoldenData_o();
	 std::cout << "GoldenData generate over  !!! \n";
	 std::cout << "**************************\n";
	 mkflags_gen();
	 if( radix == 4 ) {
		 //testfftp_r4(string_in);
		 testfftp_r4_R2P(string_in);
		 testfftp_syn_r4();
	 }
	 if( radix == 8) {
		 //testfftp_r8(string_in);
		 testfftp_r8_R2P(string_in);
		 testfftp_syn_r8();		 
	 }
	 if( radix == 16) {
		 //testfftp_r16(string_in);
		 testfftp_r16_R2P(string_in);
		 testfftp_syn_r16();
	 }
}
void FFTC::testingfile_Reconfigure_gen(std::string string_in,std::string Data_in,int IsRandom){
	 testingData_gen(Data_in,IsRandom);
	 GoldenData_Reconfigure_o();
	 mkflags_Reconfigure_gen();
	 syn_script_Reconfigure_r16();
	 lc_script_gen_Reconfigure_r16();
}
void FFTC::FFTP_gen(std::string string_in){
	 double stage_double;
	 double stage_ceil;
	 double stage_floor;
	 double IsMixed;
	 stage_double = log2(fft_point);
	 //radix-4
	 if(radix == 4){
	    stage_ceil   = ceil(stage_double/2); 
	    stage_floor  = floor(stage_double/2);
	 }
	 //radix-16 
	 if(radix == 16){
	    stage_ceil   = ceil(stage_double/4); 
	    stage_floor  = floor(stage_double/4);
	 }
	 //**************************
	 if(stage_ceil == stage_floor)  IsMixed = 0;
     else IsMixed = 1;
	 //radix-4 FFTP generate
	 if(radix == 4 ) {
		 if(IsMixed == 0)FFTP_r4(string_in);
		 else FFTP_r4_r2(string_in);
	 }
	 //radix-8 FFTP generate
	 if(radix == 8 ) FFTP_r8(string_in);
	 //radix-16 FFTP generate
     if(radix == 16) {
	    if(IsMixed == 0)FFTP_r16(string_in);
		else FFTP_r16_Mixed_radix(string_in);
	 }
}
//Configurable BFFT file generation function
void FFTC::FFTP_Reconfigure_gen(std::string string_in){
     Mod  mod_0;
	 configurable_BFFT config_BFFT_0;
	 //------
     mod_0.gen_configurable(radix,string_in,CP_width,to_long(cyclotomic_prime),m_2);	
     config_BFFT_0.gen(string_in,fft_point,CP_width,PRE_width);
	 testfftp_Reconfigure_r16(string_in);
	 testfftp_Reconfigure_syn_r16();
}
//cyclotomic polynomial parameter setting
void FFTC::cyclotpoly_parameter_set(long m_th,long CP_i,int IsRandom_CP){
    m = m_th;
    //
    PhiFuc phim_cal;
    phim_cal.calculate_phim(m);
    //
    phi_m = phim_cal.phim;
    m_2   = 2 * m;
	
	//calculate IReROM BITS SIZE
	double irerom_bit_cal;
	 irerom_bit_cal  = ceil((double)m / radix);
	 irerom_bit_cal  = log2(irerom_bit_cal);
	 irerom_bit_cal  = ceil(irerom_bit_cal);
	 IReROM_width    = irerom_bit_cal;
    
	if(IsRandom_CP == 1){	
		// calculate cyclotomic prime
		long k;
		long NumTrials; // test_prime use
		long prime_bit;
		
		ZZ m_2_zz;
		ZZ prime_tmp;
		
		k   = 1;
		NumTrials = 10;
		conv(m_2_zz,m_2);
		
		prime_tmp = m_2 + 1;
		
		prime_bit   = NumBits(prime_tmp);
	
		while( !((ProbPrime(prime_tmp,NumTrials)==1) && (prime_bit >= CP_width)))
		{
			k = k + 1;
			prime_tmp = k * m_2 + 1 ;
			prime_bit = NumBits(prime_tmp);
		};
		
		cyclotomic_prime = prime_tmp;
	}else  conv(cyclotomic_prime,CP_i);
	
	 std::cout << "cyclotomic_prime : "<<cyclotomic_prime <<std::endl;
	 std::cout << "phi_m : "<< phi_m <<std::endl;
}
//synthesis  script
void FFTC::syn_script_gen(){
	 if(radix == 4 ) syn_script_r4();
	 if(radix == 8 ) syn_script_r8();
	 if(radix == 16) syn_script_r16();
}
void FFTC::syn_script_r4(){
	std::ofstream  tcl_r4("./syn_tcl/syn_script_r4.tcl");
	char char_tmp = 34; // ascii code 32 = 
	unsigned long ROM_Word_Size;
	ROM_Word_Size = fft_point / (radix * radix);
tcl_r4 << "set company  "<< char_tmp <<"VLSILAB"    << char_tmp   <<"\n";
tcl_r4 << "set designer "<< char_tmp <<"Shi-Yong Wu"<< char_tmp <<"\n";
tcl_r4 << "set search_path      " << char_tmp << ". /opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/SynopsysDC/db ../Mem_lib $search_path" << char_tmp <<"\n";
if((ROM_Word_Size * 2) > 4096 ){
	tcl_r4 << "set target_library   " << char_tmp << "typical.db SRAM_SP_"<< ROM_Word_Size  <<"_128.db R0D0_" << ROM_Word_Size << "_64.db R0D1_"<<ROM_Word_Size<<"_64.db R0D2_"<< ROM_Word_Size <<"_64.db R0D3_"<< ROM_Word_Size <<"_64.db";
	tcl_r4 << " R1D0_"<<ROM_Word_Size <<"_128.db R1D1_"<<ROM_Word_Size<<"_128.db R1D2_"<< ROM_Word_Size <<"_128.db R1D3_"<<ROM_Word_Size << "_128.db";
	tcl_r4 << " IR0D0_"<<ROM_Word_Size <<"_64.db IR0D1_"<<ROM_Word_Size<<"_64.db IR0D2_"<< ROM_Word_Size <<"_64.db IR0D3_"<<ROM_Word_Size << "_64.db";
	tcl_r4 << " IR1D0_"<<ROM_Word_Size <<"_128.db IR1D1_"<<ROM_Word_Size<<"_128.db IR1D2_"<< ROM_Word_Size <<"_128.db IR1D3_"<<ROM_Word_Size << "_128.db";
	tcl_r4 << " H_b0r0.db H_b0r1.db H_b0r2.db H_b0r3.db H_b1r0.db H_b1r1.db H_b1r2.db H_b1r3.db reorderROM0.db reorderROM1.db ireorderROM0.db ireorderROM1.db"<< char_tmp <<"\n";	
}else {
	tcl_r4 << "set target_library   " << char_tmp << "typical.db SRAM_SP_"<< ( ROM_Word_Size * 2) <<"_128.db H_b0ROM0.db H_b0ROM1.db H_b1ROM0.db H_b1ROM1.db reorderROM0.db reorderROM1.db ireorderROM0.db ireorderROM1.db ROM0.db ROM1.db IROM0.db IROM1.db"<<char_tmp<<"\n";
}
tcl_r4 << "#set target_library  " << char_tmp << "slow.db fast.db" <<char_tmp <<"\n";
tcl_r4 << "set link_library     " << char_tmp << "* $target_library dw_foundation.sldb"<<char_tmp<<"\n";
tcl_r4 << "set symbol_library   " << char_tmp << "tsmc090.sdb generic.sdb"<<char_tmp<<"\n";
tcl_r4 << "set synthetic_library "<< char_tmp << "dw_foundation.sldb"<< char_tmp <<"\n";
tcl_r4 << "\n";
tcl_r4 << "set case_analysis_with_logic_constants true\n";
tcl_r4 << "\n";
tcl_r4 << "set hdlin_translate_off_skip_text " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r4 << "#set hdlin_enable_presto_for_vhdl " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r4 << "set edifout_netlist_only "<< char_tmp << "TRUE" <<char_tmp <<"\n";
tcl_r4 << "set verilogout_no_tri true\n";
tcl_r4 << "set plot_command {lpr -Plp}\n";
tcl_r4 << "set hdlin_auto_save_templates "<< char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r4 << "\n";
tcl_r4 << "\n";
tcl_r4 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _} -max_length 255 -type cell\n";
tcl_r4 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _[]} -max_length 255 -type net\n";
tcl_r4 << "#define_name_rules name_rule -map {{"<< char_tmp <<"\\*cell\\*"<<char_tmp <<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r4 << "#define_name_rules name_rule -case_insensitive\n";
tcl_r4 << "\n";
tcl_r4 << "set view_script_submenu_items [list {Avoid assign statement} {set_fix_multiple_p\n";
tcl_r4 << "ort_nets -all -buffer_constant} {Change Naming Rule} {change_names -rule verilog\n";
tcl_r4 << " -hierarchy} {Write SDF} {write_sdf -version 2.1 -context verilog chip.sdf}]\n";  
tcl_r4 << "\n";
tcl_r4 << "set hdlin_while_loop_iterations 2000\n";
tcl_r4 << "\n";
tcl_r4 << "analyze -format verilog ../vlog/FFTP.v              \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CenCtrl.v           \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA4.v              \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA6.v              \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA16.v             \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA16clg.v          \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA24.v             \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA24clg.v          \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA32.v             \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA32clg.v          \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA64.v             \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA64clg.v          \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA64clg_co.v       \n";//(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA64_co.v          \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA65.v             \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/CLA65clg.v          \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA96.v             \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA96clg.v          \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA192.v            \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/CLA192clg.v         \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Ctrl_PipeReg1.v     \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Mod96.v             \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Mod96PD.v           \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mod192.v            \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mod192PD.v          \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/ModMux.v            \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mul64.v             \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/MulMod128.v         \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/MulMod128PD.v       \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mux1.v              \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mux2.v              \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mux3.v              \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mux4.v              \n"; //(yes
if((ROM_Word_Size * 2) > 4096 )tcl_r4 << "analyze -format verilog ../vlog/MuxMA.v             \n";
if((ROM_Word_Size * 2) > 4096 )tcl_r4 << "analyze -format verilog ../vlog/MuxROMA.v           \n";
tcl_r4 << "analyze -format verilog ../vlog/R4_AGU.v            \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_DC.v             \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/R4_NPipeReg1.v      \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_NPipeReg2.v      \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_NPipeReg3.v      \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/R4_PipeReg1.v       \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_PipeReg2.v       \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/R4_PipeReg3.v       \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_PipeReg4.v       \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_PipeReg4_2.v     \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/R4_PipeReg5_1.v     \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/R4_PipeReg5_2.v     \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_ROMPipeReg1.v    \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_TMulMod.v        \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_WAddr.v          \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_WD_buf.v         \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/BU.v                \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/BU_S0.v             \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Pipe.v              \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Radix4_Pipe.v       \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_CSAout0.v      \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_CSAout1.v      \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_CSAout2.v      \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_CSAout3.v      \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_out0.v         \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_out1.v         \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_out2.v         \n"; //(yes
//tcl_r4 << "analyze -format verilog ../vlog/Sum4_out3.v         \n"; //(yes
//module for BFFT 
tcl_r4 << "analyze -format verilog ../vlog/R4_InpipeReg.v \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_BU_outpipe.v\n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/R4_orderROM_Pipe.v\n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/IReorderMA_pip.v\n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Rectrl.v\n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mux5.v         \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mux6.v         \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/Mul.v          \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/BR.v           \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/MulMod.v       \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/TWIMux.v       \n"; //(yes
tcl_r4 << "analyze -format verilog ../vlog/TWIpipe.v       \n"; //(yes
tcl_r4 << "                                                    \n";
tcl_r4 << "                                                    \n";                                                                                                                                         
tcl_r4 << "elaborate FFTP -architecture verilog                \n";                                                                 
tcl_r4 << "                                                    \n";                                                                
tcl_r4 << "current_design FFTP                                 \n";                                                                 
tcl_r4 << "link                                                \n";
tcl_r4 << "uniquify                                            \n";
tcl_r4 << "set_operating_conditions -max typical -max_library typical -min typical -min_library typical    \n";
tcl_r4 << "#set_operating_conditions -max slow -max_library slow -min fast -min_library fast               \n";
tcl_r4 << "set_wire_load_mode segmented                                                                    \n";
tcl_r4 << "set_wire_load_model -name tsmc090_wl10 -library typical                                         \n";
tcl_r4 << "#set_wire_load_model -name tsmc090_wl10 -library slow                                           \n";
//if you want to change clk ,you must be modify this parameter 
tcl_r4 << "create_clock -period 5 -waveform {0 2.5} [get_ports clk]                                        \n";
tcl_r4 << "set_dont_touch_network [get_ports clk]                                                          \n";
tcl_r4 << "set_ideal_network [get_ports clk]                                                             \n";
tcl_r4 << "set_ideal_network [get_ports rst_n]                                                             \n";
tcl_r4 << "#set_dont_touch_network [get_ports rst_n]                                                       \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "set_clock_uncertainty -setup 0.1 [get_clocks clk]                                               \n";
tcl_r4 << "set_drive [drive_of typical/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]    \n";
tcl_r4 << "set_load [load_of typical/DFFX2/D] [all_outputs]                                                \n";
tcl_r4 << "#set_drive [drive_of slow/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]      \n";
tcl_r4 << "#set_load [load_of slow/DFFX2/D] [all_outputs]                                                  \n";
tcl_r4 << "set_input_delay 0.2 -clock clk [remove_from_collection [all_inputs] [get_ports {clk}]]          \n";
tcl_r4 << "set_output_delay 0.2 -max -clock clk [all_outputs]                                              \n";
tcl_r4 << "set_fix_multiple_port_nets -all -buffer_constants                                               \n";
tcl_r4 << "#set_case_analysis 1 [get_ports rst_n]                                                          \n";
tcl_r4 << "#set_max_area 0                                                                                 \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "#set_clock_gating_style -sequential_cell latch -max_fanout 3 -num_stage 1 -setup 0.3            \n";
tcl_r4 << "#-control_point before -control_signal se                                                       \n";
tcl_r4 << "#propagate_constraints -gate_clock                                                              \n";
tcl_r4 << "#insert_clock_gating -module                                                                    \n";
tcl_r4 << "#replace_clock_gates                                                                            \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "#compile                                                                                        \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "#compile -inc -map_effort high                                                                  \n";
tcl_r4 << "#compile -map_effort medium                                                                     \n";
tcl_r4 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r4 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r4 << "#compile -incremental_mapping -map_effort high -boundary_optimization                            \n";
tcl_r4 << "#compile_ultra -timing_high_effort_script                                                       \n";
tcl_r4 << "#compile_ultra -area_high_effort_script                                                         \n";
tcl_r4 << "#compile_ultra -no_autoungroup -timing_high_effort_script                                       \n";
tcl_r4 << "compile_ultra -no_autoungroup -area_high_effort_script                                         \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "remove_unconnected_ports -blast_buses [get_cells * -hier]                                       \n";
tcl_r4 << "change_names -rule verilog -hierarchy                                                           \n";
tcl_r4 << "#set bus_inference_style {%s[%d]}                                                               \n";
tcl_r4 << "#set bus_naming_style {%s[%d]}                                                                  \n";
tcl_r4 << "#set hdlout_internal_busses true                                                                \n";
tcl_r4 << "#change_names -hierarchy -rule verilog                                                          \n";
tcl_r4 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _" <<char_tmp <<"-max_length 255 -type cell\n";
tcl_r4 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _[]"<<char_tmp<<"-max_length 255 -type net\n";
tcl_r4 << "#define_name_rules name_rule -map {{"<<char_tmp<<"\\*cell\\*"<<char_tmp<<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r4 << "#define_name_rules name_rule -case_insensitive                                                  \n";
tcl_r4 << "#change_names -hierarchy -rule name_rule                                                        \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "write -format verilog -hierarchy -output ../gate_netlist/FFTP_pipe_syn.v                        \n";
tcl_r4 << "write_sdf -version 2.1 -context verilog ../gate_netlist/FFTP_pipe.sdf                           \n";
tcl_r4 << "write -format ddc -hierarchy -output ../gate_netlist/FFTP_pipe.ddc                              \n";
tcl_r4 << "write_sdc -version 1.7 ../gate_netlist/FFTP_pipe.sdc                                            \n";
tcl_r4 << "write_parasitics -output ../gate_netlist/FFTP_pipe.spef                                         \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "report_timing -max_paths 20  > ../reports/FFTP_pipe_timing.rpt                                  \n";
tcl_r4 << "report_area > ../reports/FFTP_pipe_area.rpt                                                     \n";
tcl_r4 << "report_power > ../reports/FFTP_pipe_power.rpt                                                   \n";
tcl_r4 << "report_area -hier > ../reports/FFTP_pipe_area_hier.rpt                                          \n";
tcl_r4 << "                                                                                                \n";
tcl_r4 << "exit                                                                                            \n";
                                                                                                       
	tcl_r4.close();
}
void FFTC::syn_script_r8(){
	std::ofstream  tcl_r8("./syn_tcl/syn_script_r8.tcl");
	char char_tmp = 34; // ascii code 32 = 
	unsigned long SRAM_Word_Size;
	unsigned long ROM_Word_Size;
	SRAM_Word_Size = fft_point / (2 * radix);	
	ROM_Word_Size  = 2 * SRAM_Word_Size;
tcl_r8 << "set company  "<< char_tmp <<"VLSILAB"    << char_tmp   <<"\n";
tcl_r8 << "set designer "<< char_tmp <<"Shi-Yong Wu"<<char_tmp <<"\n";
tcl_r8 << "set search_path      " << char_tmp << ". /opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/SynopsysDC/db ../Mem_lib $search_path" << char_tmp <<"\n";
tcl_r8 << "set target_library   " << char_tmp << "typical.db SRAM_SP_"<< SRAM_Word_Size <<"_128.db ROM0.db ROM1.db ROM2.db ROM3.db";
tcl_r8 << " IROM0.db IROM1.db IROM3.db";
tcl_r8 << " reorderROM0.db reorderROM1.db reorderROM2.db reorderROM3.db ireorderROM0.db ireorderROM1.db ireorderROM2.db";
if(8 * CP_width > 192)tcl_r8 << " ireorderROM3.db";
tcl_r8 << " H_b0ROM0.db H_b0ROM1.db H_b0ROM2.db H_b0ROM3.db";
tcl_r8 << " H_b1ROM0.db H_b1ROM1.db H_b1ROM2.db H_b1ROM3.db"<< char_tmp <<"\n";
tcl_r8 << "#set target_library  " << char_tmp << "slow.db fast.db" <<char_tmp <<"\n";
tcl_r8 << "set link_library     " << char_tmp << "* $target_library dw_foundation.sldb"<<char_tmp<<"\n";
tcl_r8 << "set symbol_library   " << char_tmp << "tsmc090.sdb generic.sdb"<<char_tmp<<"\n";
tcl_r8 << "set synthetic_library "<< char_tmp << "dw_foundation.sldb"<< char_tmp <<"\n";
tcl_r8 << "\n";
tcl_r8 << "set case_analysis_with_logic_constants true\n";
tcl_r8 << "\n";
tcl_r8 << "set hdlin_translate_off_skip_text " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r8 << "#set hdlin_enable_presto_for_vhdl " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r8 << "set edifout_netlist_only "<< char_tmp << "TRUE" <<char_tmp <<"\n";
tcl_r8 << "set verilogout_no_tri true\n";
tcl_r8 << "set plot_command {lpr -Plp}\n";
tcl_r8 << "set hdlin_auto_save_templates "<< char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r8 << "\n";
tcl_r8 << "\n";
tcl_r8 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _} -max_length 255 -type cell\n";
tcl_r8 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _[]} -max_length 255 -type net\n";
tcl_r8 << "#define_name_rules name_rule -map {{"<< char_tmp <<"\\*cell\\*"<<char_tmp <<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r8 << "#define_name_rules name_rule -case_insensitive\n";
tcl_r8 << "\n";
tcl_r8 << "set view_script_submenu_items [list {Avoid assign statement} {set_fix_multiple_p\n";
tcl_r8 << "ort_nets -all -buffer_constant} {Change Naming Rule} {change_names -rule verilog\n";
tcl_r8 << " -hierarchy} {Write SDF} {write_sdf -version 2.1 -context verilog chip.sdf}]\n";  
tcl_r8 << "\n";
tcl_r8 << "set hdlin_while_loop_iterations 2000\n";
tcl_r8 << "\n";
tcl_r8 << "analyze -format verilog ../vlog/FFTP.v              \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CenCtrl.v           \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Mux1.v              \n"; //yes
tcl_r8 << "analyze -format verilog ../vlog/Mux2.v              \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Mux3.v              \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_AGU.v           \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/BU.v               \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/BU_S0.v            \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Pipe.v             \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Radix8_Pipe.v      \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Ctrl_PipeReg1.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/R8_NPipeReg1.v     \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_NPipeReg2.v     \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_NPipeReg3.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/R8_PipeReg1.v      \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_PipeReg2.v      \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/R8_PipeReg3.v      \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_PipeReg4_2.v    \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_PipeReg4.v      \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/R8_PipeReg5_1.v    \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/R8_PipeReg5_2.v    \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_ROMPipeReg1.v   \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout0.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout1.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout2.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout3.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout4.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout5.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout6.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_CSAout7.v     \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out0.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out1.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out2.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out3.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out4.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out5.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out6.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Sum8_out7.v        \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Mod96.v             \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/Mod96PD.v           \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Mod192.v            \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Mod192PD.v          \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/MulMod128.v         \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/MulMod128PD.v       \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Mul64.v             \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/ModMux.v            \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_DC.v            \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_WAddr.v         \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA4.v              \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA6.v              \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA16.v             \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA16clg.v          \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA24.v             \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA24clg.v          \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA32.v             \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA32clg.v          \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA64.v             \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA64clg.v          \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA64clg_co.v       \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA64_co.v          \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA65.v             \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/CLA65clg.v          \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA96.v             \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA96clg.v          \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA192.v            \n";//yes
//tcl_r8 << "analyze -format verilog ../vlog/CLA192clg.v         \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/Mux4.v              \n";//yes
tcl_r8 << "analyze -format verilog ../vlog/R8_WD_buf.v        \n";//yes
//Module for BFFT
tcl_r8 << "analyze -format verilog ../vlog/Mux5.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/Mux6.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/BR.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/R8_BU_outpipe.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/R8_orderROM_Pipe.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/IReorderMA_pip.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/Rectrl.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/R8_InpipeReg.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/MulMod.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/Mul.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/TWIpipe.v\n";                                                                                                                                         
tcl_r8 << "analyze -format verilog ../vlog/TWIMux.v\n";                                                                                                                                         
tcl_r8 << "                                                    \n";                                                                                                                                         
tcl_r8 << "elaborate FFTP -architecture verilog                \n";                                                                 
tcl_r8 << "                                                    \n";                                                                
tcl_r8 << "current_design FFTP                                 \n";                                                                 
tcl_r8 << "link                                                \n";
tcl_r8 << "uniquify                                            \n";
tcl_r8 << "set_operating_conditions -max typical -max_library typical -min typical -min_library typical    \n";
tcl_r8 << "#set_operating_conditions -max slow -max_library slow -min fast -min_library fast               \n";
tcl_r8 << "set_wire_load_mode segmented                                                                    \n";
tcl_r8 << "set_wire_load_model -name tsmc090_wl10 -library typical                                         \n";
tcl_r8 << "#set_wire_load_model -name tsmc090_wl10 -library slow                                           \n";
tcl_r8 << "create_clock -period 5 -waveform {0 2.5} [get_ports clk]                                        \n";
tcl_r8 << "set_dont_touch_network [get_ports clk]                                                          \n";
tcl_r8 << "set_ideal_network [get_ports clk]                                                             \n";
tcl_r8 << "set_ideal_network [get_ports rst_n]                                                             \n";
tcl_r8 << "#set_dont_touch_network [get_ports rst_n]                                                       \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "set_clock_uncertainty -setup 0.1 [get_clocks clk]                                               \n";
tcl_r8 << "set_drive [drive_of typical/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]    \n";
tcl_r8 << "set_load [load_of typical/DFFX2/D] [all_outputs]                                                \n";
tcl_r8 << "#set_drive [drive_of slow/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]      \n";
tcl_r8 << "#set_load [load_of slow/DFFX2/D] [all_outputs]                                                  \n";
tcl_r8 << "set_input_delay 0.2 -clock clk [remove_from_collection [all_inputs] [get_ports {clk}]]          \n";
tcl_r8 << "set_output_delay 0.2 -max -clock clk [all_outputs]                                              \n";
tcl_r8 << "set_fix_multiple_port_nets -all -buffer_constants                                               \n";
tcl_r8 << "#set_case_analysis 1 [get_ports rst_n]                                                          \n";
tcl_r8 << "#set_max_area 0                                                                                 \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "#set_clock_gating_style -sequential_cell latch -max_fanout 3 -num_stage 1 -setup 0.3            \n";
tcl_r8 << "#-control_point before -control_signal se                                                       \n";
tcl_r8 << "#propagate_constraints -gate_clock                                                              \n";
tcl_r8 << "#insert_clock_gating -module                                                                    \n";
tcl_r8 << "#replace_clock_gates                                                                            \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "#compile                                                                                        \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "#compile -inc -map_effort high                                                                  \n";
tcl_r8 << "#compile -map_effort medium                                                                     \n";
tcl_r8 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r8 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r8 << "compile -incremental_mapping -map_effort high -boundary_optimization                            \n";
tcl_r8 << "#compile_ultra -timing_high_effort_script                                                       \n";
tcl_r8 << "#compile_ultra -area_high_effort_script                                                         \n";
tcl_r8 << "#compile_ultra -no_autoungroup -timing_high_effort_script                                       \n";
tcl_r8 << "compile_ultra -no_autoungroup -area_high_effort_script                                         \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "remove_unconnected_ports -blast_buses [get_cells * -hier]                                       \n";
tcl_r8 << "change_names -rule verilog -hierarchy                                                           \n";
tcl_r8 << "#set bus_inference_style {%s[%d]}                                                               \n";
tcl_r8 << "#set bus_naming_style {%s[%d]}                                                                  \n";
tcl_r8 << "#set hdlout_internal_busses true                                                                \n";
tcl_r8 << "#change_names -hierarchy -rule verilog                                                          \n";
tcl_r8 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _" <<char_tmp <<"-max_length 255 -type cell\n";
tcl_r8 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _[]"<<char_tmp<<"-max_length 255 -type net\n";
tcl_r8 << "#define_name_rules name_rule -map {{"<<char_tmp<<"\\*cell\\*"<<char_tmp<<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r8 << "#define_name_rules name_rule -case_insensitive                                                  \n";
tcl_r8 << "#change_names -hierarchy -rule name_rule                                                        \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "write -format verilog -hierarchy -output ../gate_netlist/FFTP_pipe_syn.v                        \n";
tcl_r8 << "write_sdf -version 2.1 -context verilog ../gate_netlist/FFTP_pipe.sdf                           \n";
tcl_r8 << "write -format ddc -hierarchy -output ../gate_netlist/FFTP_pipe.ddc                              \n";
tcl_r8 << "write_sdc -version 1.7 ../gate_netlist/FFTP_pipe.sdc                                            \n";
tcl_r8 << "write_parasitics -output ../gate_netlist/FFTP_pipe.spef                                         \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "report_timing -max_paths 20  > ../reports/FFTP_pipe_timing.rpt                                  \n";
tcl_r8 << "report_area > ../reports/FFTP_pipe_area.rpt                                                     \n";
tcl_r8 << "report_power > ../reports/FFTP_pipe_power.rpt                                                   \n";
tcl_r8 << "report_area -hier > ../reports/FFTP_pipe_area_hier.rpt                                          \n";
tcl_r8 << "                                                                                                \n";
tcl_r8 << "exit                                                                                            \n";
                                                                                                       
	tcl_r8.close();
}
void FFTC::syn_script_r16(){
	std::ofstream  tcl_r16("./syn_tcl/syn_script_r16.tcl");
	char char_tmp = 34; // ascii code 32 = 
	unsigned long SRAM_Word_Size;
	unsigned long ROM_Word_Size;
	SRAM_Word_Size = fft_point / (2 * radix);	
	ROM_Word_Size  = 2 * SRAM_Word_Size;
tcl_r16 << "set company  "<< char_tmp <<"VLSILAB"    << char_tmp   <<"\n";
tcl_r16 << "set designer "<< char_tmp <<"Shi-Yong Wu"<<char_tmp <<"\n";
tcl_r16 << "set search_path      " << char_tmp << ". /opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/SynopsysDC/db ../Mem_lib $search_path" << char_tmp <<"\n";
tcl_r16 << "set target_library   " << char_tmp << "typical.db SRAM_SP_"<< SRAM_Word_Size <<"_128.db ROM0_"<< ROM_Word_Size <<"_64.db ROM1_"<< ROM_Word_Size <<"_128.db ROM2_"<< ROM_Word_Size <<"_128.db ROM3_"<< ROM_Word_Size <<"_128.db ROM4_"<< ROM_Word_Size <<"_128.db ROM5_"<< ROM_Word_Size <<"_128.db ROM6_"<< ROM_Word_Size <<"_128.db ROM7_"<< ROM_Word_Size <<"_128.db";
tcl_r16 << " IFFTR0_"<< ROM_Word_Size <<"_64.db IFFTR1_"<< ROM_Word_Size <<"_128.db IFFTR2_"<< ROM_Word_Size <<"_128.db IFFTR3_"<< ROM_Word_Size <<"_128.db IFFTR4_"<< ROM_Word_Size <<"_128.db IFFTR5_"<< ROM_Word_Size <<"_128.db IFFTR6_"<< ROM_Word_Size <<"_128.db IFFTR7_"<< ROM_Word_Size <<"_128.db";
tcl_r16 << " reorderROM0.db reorderROM1.db reorderROM2.db reorderROM3.db ireorderROM0.db ireorderROM1.db ireorderROM2.db ireorderROM3.db";
tcl_r16 << " H_b0ROM0.db H_b0ROM1.db H_b0ROM2.db H_b0ROM3.db H_b0ROM4.db H_b0ROM5.db  H_b0ROM6.db H_b0ROM7.db";
tcl_r16 << " H_b1ROM0.db H_b1ROM1.db H_b1ROM2.db H_b1ROM3.db H_b1ROM4.db H_b1ROM5.db  H_b1ROM6.db H_b1ROM7.db"<< char_tmp <<"\n";
tcl_r16 << "#set target_library  " << char_tmp << "slow.db fast.db" <<char_tmp <<"\n";
tcl_r16 << "set link_library     " << char_tmp << "* $target_library dw_foundation.sldb"<<char_tmp<<"\n";
tcl_r16 << "set symbol_library   " << char_tmp << "tsmc090.sdb generic.sdb"<<char_tmp<<"\n";
tcl_r16 << "set synthetic_library "<< char_tmp << "dw_foundation.sldb"<< char_tmp <<"\n";
tcl_r16 << "\n";
tcl_r16 << "set case_analysis_with_logic_constants true\n";
tcl_r16 << "\n";
tcl_r16 << "set hdlin_translate_off_skip_text " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r16 << "#set hdlin_enable_presto_for_vhdl " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r16 << "set edifout_netlist_only "<< char_tmp << "TRUE" <<char_tmp <<"\n";
tcl_r16 << "set verilogout_no_tri true\n";
tcl_r16 << "set plot_command {lpr -Plp}\n";
tcl_r16 << "set hdlin_auto_save_templates "<< char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r16 << "\n";
tcl_r16 << "\n";
tcl_r16 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _} -max_length 255 -type cell\n";
tcl_r16 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _[]} -max_length 255 -type net\n";
tcl_r16 << "#define_name_rules name_rule -map {{"<< char_tmp <<"\\*cell\\*"<<char_tmp <<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r16 << "#define_name_rules name_rule -case_insensitive\n";
tcl_r16 << "\n";
tcl_r16 << "set view_script_submenu_items [list {Avoid assign statement} {set_fix_multiple_p\n";
tcl_r16 << "ort_nets -all -buffer_constant} {Change Naming Rule} {change_names -rule verilog\n";
tcl_r16 << " -hierarchy} {Write SDF} {write_sdf -version 2.1 -context verilog chip.sdf}]\n";  
tcl_r16 << "\n";
tcl_r16 << "set hdlin_while_loop_iterations 2000\n";
tcl_r16 << "\n";
tcl_r16 << "analyze -format verilog ../vlog/FFTP.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CenCtrl.v           \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA4.v              \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA6.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA16.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA16clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA24.v             \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA24clg.v          \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA32.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA32clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA64.v             \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA64clg.v          \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA64clg_co.v       \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA64_co.v          \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA65.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA65clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA96.v             \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA96clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA192.v            \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA192clg.v         \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Ctrl_PipeReg1.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Mod96.v             \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Mod96PD.v           \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mod192.v            \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mod192PD.v          \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/ModMux.v            \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mul64.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/MulMod128.v         \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/MulMod128PD.v       \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux1.v              \n"; //yes
tcl_r16 << "analyze -format verilog ../vlog/Mux2.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux3.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux4.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_AGU.v           \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_DC.v            \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_NPipeReg1.v     \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_NPipeReg2.v     \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_NPipeReg3.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg1.v      \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg2.v      \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg3.v      \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg4.v      \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg4_2.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg5_1.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg5_2.v    \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_ROMPipeReg1.v   \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_WAddr.v         \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_WD_buf.v        \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/BU_S0.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/BU.v                \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Pipe.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Radix16_Pipe.v      \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout0.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout1.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout2.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout3.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout4.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout5.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout6.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout7.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout8.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout9.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout10.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout11.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout12.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout13.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout14.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout15.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out0.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out1.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out2.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out3.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out4.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out5.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out6.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out7.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out8.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out9.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out10.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out11.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out12.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out13.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out14.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out15.v       \n";//yes
//Module for BFFT
tcl_r16 << "analyze -format verilog ../vlog/Mux5.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/Mux6.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/BR.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/R16_BU_outpipe.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/R16_orderROM_Pipe.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/IReorderMA_pip.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/Rectrl.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/R16_InpipeReg.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/MulMod.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/Mul.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/TWIpipe.v\n";                                                                                                                                         
tcl_r16 << "analyze -format verilog ../vlog/TWIMux.v\n";                                                                                                                                         
tcl_r16 << "                                                    \n";                                                                                                                                         
tcl_r16 << "elaborate FFTP -architecture verilog                \n";                                                                 
tcl_r16 << "                                                    \n";                                                                
tcl_r16 << "current_design FFTP                                 \n";                                                                 
tcl_r16 << "link                                                \n";
tcl_r16 << "uniquify                                            \n";
tcl_r16 << "set_operating_conditions -max typical -max_library typical -min typical -min_library typical    \n";
tcl_r16 << "#set_operating_conditions -max slow -max_library slow -min fast -min_library fast               \n";
tcl_r16 << "set_wire_load_mode segmented                                                                    \n";
tcl_r16 << "set_wire_load_model -name tsmc090_wl10 -library typical                                         \n";
tcl_r16 << "#set_wire_load_model -name tsmc090_wl10 -library slow                                           \n";

double period;
double half_period;

period = (1 / (double) Freq) * 1000;
half_period = period / 2;

tcl_r16 << "create_clock -period "<< period <<" -waveform {0 "<< half_period <<"} [get_ports clk]\n";
tcl_r16 << "set_dont_touch_network [get_ports clk]                                                          \n";
tcl_r16 << "set_ideal_network [get_ports clk]                                                             \n";
tcl_r16 << "set_ideal_network [get_ports rst_n]                                                             \n";
tcl_r16 << "#set_dont_touch_network [get_ports rst_n]                                                       \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "set_clock_uncertainty -setup 0.1 [get_clocks clk]                                               \n";
tcl_r16 << "set_drive [drive_of typical/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]    \n";
tcl_r16 << "set_load [load_of typical/DFFX2/D] [all_outputs]                                                \n";
tcl_r16 << "#set_drive [drive_of slow/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]      \n";
tcl_r16 << "#set_load [load_of slow/DFFX2/D] [all_outputs]                                                  \n";
tcl_r16 << "set_input_delay 0.2 -clock clk [remove_from_collection [all_inputs] [get_ports {clk}]]          \n";
tcl_r16 << "set_output_delay 0.2 -max -clock clk [all_outputs]                                              \n";
tcl_r16 << "set_fix_multiple_port_nets -all -buffer_constants                                               \n";
tcl_r16 << "#set_case_analysis 1 [get_ports rst_n]                                                          \n";
tcl_r16 << "#set_max_area 0                                                                                 \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "#set_clock_gating_style -sequential_cell latch -max_fanout 3 -num_stage 1 -setup 0.3            \n";
tcl_r16 << "#-control_point before -control_signal se                                                       \n";
tcl_r16 << "#propagate_constraints -gate_clock                                                              \n";
tcl_r16 << "#insert_clock_gating -module                                                                    \n";
tcl_r16 << "#replace_clock_gates                                                                            \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "#compile                                                                                        \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "#compile -inc -map_effort high                                                                  \n";
tcl_r16 << "#compile -map_effort medium                                                                     \n";
tcl_r16 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r16 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r16 << "#compile -incremental_mapping -map_effort high -boundary_optimization                           \n";
tcl_r16 << "#compile_ultra -timing_high_effort_script                                                       \n";
tcl_r16 << "#compile_ultra -area_high_effort_script                                                         \n";
tcl_r16 << "#compile_ultra -no_autoungroup -timing_high_effort_script                                       \n";
tcl_r16 << "compile_ultra -no_autoungroup -area_high_effort_script                                          \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "remove_unconnected_ports -blast_buses [get_cells * -hier]                                       \n";
tcl_r16 << "change_names -rule verilog -hierarchy                                                           \n";
tcl_r16 << "#set bus_inference_style {%s[%d]}                                                               \n";
tcl_r16 << "#set bus_naming_style {%s[%d]}                                                                  \n";
tcl_r16 << "#set hdlout_internal_busses true                                                                \n";
tcl_r16 << "#change_names -hierarchy -rule verilog                                                          \n";
tcl_r16 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _" <<char_tmp <<"-max_length 255 -type cell\n";
tcl_r16 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _[]"<<char_tmp<<"-max_length 255 -type net\n";
tcl_r16 << "#define_name_rules name_rule -map {{"<<char_tmp<<"\\*cell\\*"<<char_tmp<<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r16 << "#define_name_rules name_rule -case_insensitive                                                  \n";
tcl_r16 << "#change_names -hierarchy -rule name_rule                                                        \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "write -format verilog -hierarchy -output ../gate_netlist/FFTP_pipe_syn.v                        \n";
tcl_r16 << "write_sdf -version 2.1 -context verilog ../gate_netlist/FFTP_pipe.sdf                           \n";
tcl_r16 << "write -format ddc -hierarchy -output ../gate_netlist/FFTP_pipe.ddc                              \n";
tcl_r16 << "write_sdc -version 1.7 ../gate_netlist/FFTP_pipe.sdc                                            \n";
tcl_r16 << "write_parasitics -output ../gate_netlist/FFTP_pipe.spef                                         \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "report_timing -max_paths 20  > ../reports/FFTP_pipe_timing.rpt                                  \n";
tcl_r16 << "report_area > ../reports/FFTP_pipe_area.rpt                                                     \n";
tcl_r16 << "report_power > ../reports/FFTP_pipe_power.rpt                                                   \n";
tcl_r16 << "report_area -hier > ../reports/FFTP_pipe_area_hier.rpt                                          \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "exit                                                                                            \n";
	tcl_r16.close();
}
void FFTC::syn_script_Reconfigure_r16(){
	std::ofstream  tcl_r16("./syn_tcl/syn_script_Reconfigure_r16.tcl");
	char char_tmp = 34; // ascii code 32 = 
tcl_r16 << "set company  "<< char_tmp <<"VLSILAB"    << char_tmp   <<"\n";
tcl_r16 << "set designer "<< char_tmp <<"Shi-Yong Wu"<<char_tmp <<"\n";
tcl_r16 << "set search_path      " << char_tmp << ". /opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/SynopsysDC/db ../Mem_lib $search_path" << char_tmp <<"\n";
tcl_r16 << "set target_library   " << char_tmp << "typical.db SRAM_SP_2048_64.db SRAM_SP_2048_128.db ROM0_4096_64.db ROM1_4096_128.db ROM2_4096_128.db ROM3_4096_128.db ROM4_4096_128.db ROM5_4096_128.db ROM6_4096_128.db ROM7_4096_128.db";
tcl_r16 << " IFFTR0_4096_64.db IFFTR1_4096_128.db IFFTR2_4096_128.db IFFTR3_4096_128.db IFFTR4_4096_128.db IFFTR5_4096_128.db IFFTR6_4096_128.db IFFTR7_4096_128.db"<< char_tmp <<"\n";
tcl_r16 << "#set target_library  " << char_tmp << "slow.db fast.db" <<char_tmp <<"\n";
tcl_r16 << "set link_library     " << char_tmp << "* $target_library dw_foundation.sldb"<<char_tmp<<"\n";
tcl_r16 << "set symbol_library   " << char_tmp << "tsmc090.sdb generic.sdb"<<char_tmp<<"\n";
tcl_r16 << "set synthetic_library "<< char_tmp << "dw_foundation.sldb"<< char_tmp <<"\n";
tcl_r16 << "\n";
tcl_r16 << "set case_analysis_with_logic_constants true\n";
tcl_r16 << "\n";
tcl_r16 << "set hdlin_translate_off_skip_text " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r16 << "#set hdlin_enable_presto_for_vhdl " << char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r16 << "set edifout_netlist_only "<< char_tmp << "TRUE" <<char_tmp <<"\n";
tcl_r16 << "set verilogout_no_tri true\n";
tcl_r16 << "set plot_command {lpr -Plp}\n";
tcl_r16 << "set hdlin_auto_save_templates "<< char_tmp << "TRUE" << char_tmp <<"\n";
tcl_r16 << "\n";
tcl_r16 << "\n";
tcl_r16 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _} -max_length 255 -type cell\n";
tcl_r16 << "#define_name_rules name_rule -allowed {a-z A-Z 0-9 _[]} -max_length 255 -type net\n";
tcl_r16 << "#define_name_rules name_rule -map {{"<< char_tmp <<"\\*cell\\*"<<char_tmp <<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r16 << "#define_name_rules name_rule -case_insensitive\n";
tcl_r16 << "\n";
tcl_r16 << "set view_script_submenu_items [list {Avoid assign statement} {set_fix_multiple_p\n";
tcl_r16 << "ort_nets -all -buffer_constant} {Change Naming Rule} {change_names -rule verilog\n";
tcl_r16 << " -hierarchy} {Write SDF} {write_sdf -version 2.1 -context verilog chip.sdf}]\n";  
tcl_r16 << "\n";
tcl_r16 << "set hdlin_while_loop_iterations 2000\n";
tcl_r16 << "\n";
tcl_r16 << "analyze -format verilog ../vlog/BR.v                \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CenCtrl.v           \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/FFTP.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA4.v              \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA6.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA16.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA16clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA24.v             \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA24clg.v          \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA32.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA32clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA64.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA64_co.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA64clg.v          \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA64clg_co.v       \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA65.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/CLA65clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA96.v             \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA96clg.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA192.v            \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CLA192clg.v         \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CSM_4096.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CSM_8192.v          \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CSM_16384.v         \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CSM_32768.v         \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/CSM_65536.v         \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Ctrl_PipeReg1.v     \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Config_Reg.v        \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/IReorderMA_pip.v    \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/MAMux_HSRAM.v       \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/MAMux_RESRAM.v      \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Mod96.v             \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Mod96PD.v           \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mod192.v            \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mod192PD.v          \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/ModMux.v            \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mul.v               \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mul64.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/MulMod.v            \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/MulMod128.v         \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/MulMod128PD.v       \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux1.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux2.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux3.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux4.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux5.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Mux6.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_AGU.v           \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_AGU_4096.v      \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_AGU_8192.v      \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_AGU_16384.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_AGU_32768.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_AGU_65536.v     \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_BU_outpipe.v    \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_DC.v            \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_InpipeReg.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_NPipeReg1.v     \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_NPipeReg2.v     \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_NPipeReg3.v     \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_orderROM_Pipe.v \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg1.v      \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg2.v      \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg3.v      \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg4.v      \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg4_2.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg5_1.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/R16_PipeReg5_2.v    \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_ROMPipeReg1.v   \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_WAddr.v         \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/R16_WD_buf.v        \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/BU_S0.v             \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/BU.v                \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Pipe.v              \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Radix16_Pipe.v      \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/Rectrl.v            \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout0.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout1.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout2.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout3.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout4.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout5.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout6.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout7.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout8.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout9.v     \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout10.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout11.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout12.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout13.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout14.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_CSAout15.v    \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out0.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out1.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out2.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out3.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out4.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out5.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out6.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out7.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out8.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out9.v        \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out10.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out11.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out12.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out13.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out14.v       \n";//yes
//tcl_r16 << "analyze -format verilog ../vlog/Sum16_out15.v       \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/TWIpipe.v           \n";//yes
tcl_r16 << "analyze -format verilog ../vlog/TWIMux.v            \n";//yes
tcl_r16 << "                                                    \n";                                                                                                                                         
tcl_r16 << "elaborate FFTP -architecture verilog                \n";                                                                 
tcl_r16 << "                                                    \n";                                                                
tcl_r16 << "current_design FFTP                                 \n";                                                                 
tcl_r16 << "link                                                \n";
tcl_r16 << "uniquify                                            \n";
tcl_r16 << "set_operating_conditions -max typical -max_library typical -min typical -min_library typical    \n";
tcl_r16 << "#set_operating_conditions -max slow -max_library slow -min fast -min_library fast               \n";
tcl_r16 << "set_wire_load_mode segmented                                                                    \n";
tcl_r16 << "set_wire_load_model -name tsmc090_wl10 -library typical                                         \n";
tcl_r16 << "#set_wire_load_model -name tsmc090_wl10 -library slow                                           \n";

double period;
double half_period;

period = (1 / (double) Freq) * 1000;
half_period = period / 2;

tcl_r16 << "create_clock -period "<< period <<" -waveform {0 "<< half_period <<"} [get_ports clk]                                        \n";
tcl_r16 << "set_dont_touch_network [get_ports clk]                                                          \n";
tcl_r16 << "set_ideal_network [get_ports clk]                                                               \n";
tcl_r16 << "set_ideal_network [get_ports rst_n]                                                             \n";
tcl_r16 << "#set_dont_touch_network [get_ports rst_n]                                                       \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "set_clock_uncertainty -setup 0.1 [get_clocks clk]                                               \n";
tcl_r16 << "set_drive [drive_of typical/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]    \n";
tcl_r16 << "set_load [load_of typical/DFFX2/D] [all_outputs]                                                \n";
tcl_r16 << "#set_drive [drive_of slow/DFFX2/Q] [remove_from_collection [all_inputs] [get_ports {clk}]]      \n";
tcl_r16 << "#set_load [load_of slow/DFFX2/D] [all_outputs]                                                  \n";
tcl_r16 << "set_input_delay 0.2 -clock clk [remove_from_collection [all_inputs] [get_ports {clk}]]          \n";
tcl_r16 << "set_output_delay 0.2 -max -clock clk [all_outputs]                                              \n";
tcl_r16 << "set_fix_multiple_port_nets -all -buffer_constants                                               \n";
tcl_r16 << "#set_case_analysis 1 [get_ports rst_n]                                                          \n";
tcl_r16 << "#set_max_area 0                                                                                 \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "#set_clock_gating_style -sequential_cell latch -max_fanout 3 -num_stage 1 -setup 0.3            \n";
tcl_r16 << "#-control_point before -control_signal se                                                       \n";
tcl_r16 << "#propagate_constraints -gate_clock                                                              \n";
tcl_r16 << "#insert_clock_gating -module                                                                    \n";
tcl_r16 << "#replace_clock_gates                                                                            \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "#compile                                                                                        \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "#compile -inc -map_effort high                                                                  \n";
tcl_r16 << "#compile -map_effort medium                                                                     \n";
tcl_r16 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r16 << "#compile -incremental_mapping -map_effort high -area_effort high -boundary_optimization         \n";
tcl_r16 << "#compile -incremental_mapping -map_effort high -boundary_optimization                            \n";
tcl_r16 << "#compile_ultra -timing_high_effort_script                                                       \n";
tcl_r16 << "#compile_ultra -area_high_effort_script                                                         \n";
tcl_r16 << "#compile_ultra -no_autoungroup -timing_high_effort_script                                       \n";
tcl_r16 << "compile_ultra -no_autoungroup -area_high_effort_script                                         \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "remove_unconnected_ports -blast_buses [get_cells * -hier]                                       \n";
tcl_r16 << "change_names -rule verilog -hierarchy                                                           \n";
tcl_r16 << "#set bus_inference_style {%s[%d]}                                                               \n";
tcl_r16 << "#set bus_naming_style {%s[%d]}                                                                  \n";
tcl_r16 << "#set hdlout_internal_busses true                                                                \n";
tcl_r16 << "#change_names -hierarchy -rule verilog                                                          \n";
tcl_r16 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _" <<char_tmp <<"-max_length 255 -type cell\n";
tcl_r16 << "#define_name_rules name_rule -allowed "<<char_tmp<<"A-Z a-z 0-9 _[]"<<char_tmp<<"-max_length 255 -type net\n";
tcl_r16 << "#define_name_rules name_rule -map {{"<<char_tmp<<"\\*cell\\*"<<char_tmp<<" "<<char_tmp<<"cell"<<char_tmp<<"}}\n";
tcl_r16 << "#define_name_rules name_rule -case_insensitive                                                  \n";
tcl_r16 << "#change_names -hierarchy -rule name_rule                                                        \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "write -format verilog -hierarchy -output ../gate_netlist/FFTP_pipe_syn.v                        \n";
tcl_r16 << "write_sdf -version 2.1 -context verilog ../gate_netlist/FFTP_pipe.sdf                           \n";
tcl_r16 << "write -format ddc -hierarchy -output ../gate_netlist/FFTP_pipe.ddc                              \n";
tcl_r16 << "write_sdc -version 1.7 ../gate_netlist/FFTP_pipe.sdc                                            \n";
tcl_r16 << "write_parasitics -output ../gate_netlist/FFTP_pipe.spef                                         \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "report_timing -max_paths 20  > ../reports/FFTP_pipe_timing.rpt                                  \n";
tcl_r16 << "report_area > ../reports/FFTP_pipe_area.rpt                                                     \n";
tcl_r16 << "report_power > ../reports/FFTP_pipe_power.rpt                                                   \n";
tcl_r16 << "report_area -hier > ../reports/FFTP_pipe_area_hier.rpt                                          \n";
tcl_r16 << "                                                                                                \n";
tcl_r16 << "exit                                                                                            \n";
	tcl_r16.close();
}
//============================================================
//GoldenData  output
//Given data by SPMB algorithm 
//and produce golden data 
//string_in is folder name
void FFTC::GoldenData_o(){
    NTT test;  // prime is power of 2,can used to fft or original DFT
	unsigned long order; // order of 65536-th ROU
    ZZ fft_prime;
    ZZ twiddle_65536; //65536-th root of unity
    ZZ fft_twiddle;
    conv(fft_prime,"18446744069414584321");
    conv(twiddle_65536,"14603442835287214144");
    //generate fft_point Root of unity by 65536-th root of unity 
    order = 65536/fft_point;
    fft_twiddle = PowerMod(twiddle_65536,order,fft_prime);
    test.NTT_init(fft_point,fft_prime,fft_twiddle);
    	
    //=====================================
    unsigned long bc; //butterfly unit counter
    int bc_width;
    std::vector<ZZ> A_NTT;
    std::vector<ZZ> test_NTT;
	//======================
	std::vector<ZZ> A_M_len;
	std::vector<ZZ> A_DFT;
    //=======================
	std::vector<ZZ> h2_NTT;
    std::vector<ZZ> test_golden_NTT;
    std::string string_buf_a = "./test_input/A_NTT.txt";
    std::stringstream  ss_a;
    ss_a  << string_buf_a;
    std::ofstream A_output;
    SPMB spmb;
    
    A_output.open(ss_a.str());
    bc = fft_point/radix;
    bc_width = (int) log2(bc);
	A_DFT.resize(m);
	A_M_len.resize(m);
    A_NTT.resize(fft_point);
    h2_NTT.resize(fft_point);
    test_golden_NTT.resize(fft_point);
    //spmb init
    std::cout << "siang cout radix = " << radix << std::endl;  // siang
    spmb.init(fft_point,radix,bc_width,CP_width,cyclotomic_prime,m,phi_m); //spmb initial
    //=================================================
    //given data for A_NTT
	std::string A_in_string_tmp;
	long A_in_tmp;
	std::ifstream  A_input_file("./test_input/A_in.txt");
	
	for(int i=0; i<fft_point;i++){
	   getline(A_input_file,A_in_string_tmp);
	   A_in_tmp = atol(A_in_string_tmp.c_str());
	   conv(A_NTT[i],A_in_tmp);
	}		
    spmb.time_o(A_NTT,"./test_input/A_");
	//=================================================
    bluestein  bfft;  //bluestein's fft
    ZZ m_2_rou; // 2m-th root of unity
	ZZ m_rou;
    bfft.N_ROU(cyclotomic_prime,m_2,m_2_rou); //calculate 2m-th root of unity
    bfft.init(cyclotomic_prime,m_2_rou,m);    // initial bfft parameter
    
    std::cout << "Original prime (HeLib prime):" << cyclotomic_prime << "\n";
    std::cout << "2m-th root of unity:"<< m_2_rou << "\n";
    //spmb.time_o(bfft.h2_time,"./test_input/h2");      // h2_time data output
    spmb.re_order_factor(m_2_rou);   // re-order factor output ,store in ROM_data folder
	MulMod(m_rou,m_2_rou,m_2_rou,cyclotomic_prime);	
    //==============================================================
    for(int i=0;i<fft_point;i++){
		//if(i==1)h2_NTT[i] = 1;
		//h2_NTT[i] = i;
		//else h2_NTT[i] = 0;
		h2_NTT[i] = bfft.h2_time[i];
    }
    //===================================================================
    //A_NTT re-order  algorithm
    //because  degree of polynomial is phi_m 
    for(int i=0;i<fft_point;i++){
        if(i < phi_m){
            unsigned long exp;
            ZZ w_2m_tmp_i;    // tmp
            exp = pow(i,2); // i^2
            exp = exp % (2*m);  
            PowerMod(w_2m_tmp_i,m_2_rou,exp,cyclotomic_prime); //tmp = w^(1/2*i^2)
			//conv(w_2m_tmp_i,"1");
            MulMod(A_NTT[i],A_NTT[i],w_2m_tmp_i,cyclotomic_prime);
        }
        else conv(A_NTT[i],"0"); 
    } 
    for(int i=0;i<fft_point;i++){
        A_output << A_NTT[i] <<"\n";  
    }
    A_output.close();
    //====================================================================
     test.NTT_t(A_NTT);
	 //2020/07/04 test radix-8
     test.NTT_t(h2_NTT);
	 spmb.H_freq_o(h2_NTT);
	 test.NTT_pointwise_mult(test_golden_NTT,A_NTT,h2_NTT);
     std::ofstream  after_mult("./test_input/after_mult.txt");
	 for(int i=0;i<fft_point;i++){
		 after_mult << test_golden_NTT[i] << "\n";
	 }
	 after_mult.close();
	 test.INTT_t(test_golden_NTT);
     //===================================================================
	 std::ofstream before_BR("./test_input/mult_result_64.txt");
	 for(int i=0; i < m;i++){
         before_BR  <<  test_golden_NTT[i] << "\n";
		 test_golden_NTT[i] = test_golden_NTT[i] % cyclotomic_prime;
     }
	 before_BR.close();
     for(int i=0;i<fft_point;i++){
         if( i < m){
             unsigned long exp;
             ZZ w_2m_tmp_o;
             exp = pow(i,2);
             PowerMod(w_2m_tmp_o,m_2_rou,exp,cyclotomic_prime);
			 //conv(w_2m_tmp_o,"1");
             test_golden_NTT[i] = MulMod(test_golden_NTT[i],w_2m_tmp_o,cyclotomic_prime);
         }
         else test_golden_NTT[i] = 0;
     }
     //=====================================================================
      std::ofstream test_golden;
      std::string string_golden;
      string_golden = "./test_input/test_golden.txt";
      test_golden.open(string_golden);
      for(int j=0; j < fft_point; j++){
          test_golden << test_golden_NTT[j];
          test_golden << "\n";
      }
      test_golden.close();     
}
//Reconfigure data and golden data generate
void FFTC::GoldenData_Reconfigure_o(){
    NTT test;  // prime is power of 2,can used to fft or original DFT
	unsigned long order; // order of 65536-th ROU
    ZZ fft_prime;
    ZZ twiddle_65536; //65536-th root of unity
    ZZ fft_twiddle;
    conv(fft_prime,"18446744069414584321");
    conv(twiddle_65536,"14603442835287214144");
    //generate fft_point Root of unity by 65536-th root of unity 
    order = 65536/fft_point;
    fft_twiddle = PowerMod(twiddle_65536,order,fft_prime);
    test.NTT_init(fft_point,fft_prime,fft_twiddle);
    	
    //=====================================
    unsigned long bc; //butterfly unit counter
    int bc_width;
    std::vector<ZZ> A_NTT;
    std::vector<ZZ> test_NTT;
	//======================
	std::vector<ZZ> A_M_len;
	std::vector<ZZ> A_DFT;
    //=======================
	std::vector<ZZ> h2_NTT;
    std::vector<ZZ> test_golden_NTT;
    std::string string_buf_a = "./test_input/A_NTT.txt";
    std::stringstream  ss_a;
    ss_a  << string_buf_a;
    std::ofstream A_output;
    SPMB spmb;
    
    A_output.open(ss_a.str());
    bc = fft_point/radix;
    bc_width = (int) log2(bc);
	A_DFT.resize(m);
	A_M_len.resize(m);
    A_NTT.resize(fft_point);
    h2_NTT.resize(fft_point);
    test_golden_NTT.resize(fft_point);
    //spmb init
    spmb.init_Reconfigure(fft_point,radix,bc_width,CP_width,cyclotomic_prime,m,phi_m); //spmb initial
    //=================================================
    //given data for A_NTT
	std::string A_in_string_tmp;
	long A_in_tmp;
	std::ifstream  A_input_file("./test_input/A_in.txt");
	
	for(int i=0; i<fft_point;i++){
	   getline(A_input_file,A_in_string_tmp);
	   A_in_tmp = atol(A_in_string_tmp.c_str());
	   conv(A_NTT[i],A_in_tmp);
	}		
    spmb.time_o(A_NTT,"./test_input/A_");
	//=================================================
    bluestein  bfft;  //bluestein's fft
    ZZ m_2_rou; // 2m-th root of unity
	ZZ m_rou;
	//******************
	//calculate pre_computing data
	
	long   BM_pre_computing_longtype;
	long   cyclotomic_prime_longtype;
	double BM_pre_computing_double;
	double BM_pre_computing_bits;
	ZZ     BM_pre_computing_ZZtype;
	cyclotomic_prime_longtype  = to_long(cyclotomic_prime);
	BM_pre_computing_double = exp2(2 * CP_width + 1);
	BM_pre_computing_double = floor(BM_pre_computing_double / cyclotomic_prime_longtype);
	BM_pre_computing_bits   = ceil(log2(BM_pre_computing_double));
	BM_pre_computing_longtype  = (long)BM_pre_computing_double;
	BM_pre_computing_ZZtype    = to_ZZ(BM_pre_computing_longtype);
	//string (Hex Representation)
	std::string  cyclotomic_prime_string_buf;
	std::string  pre_computing_string_buf;
	//*****************
    bfft.N_ROU(cyclotomic_prime,m_2,m_2_rou); //calculate 2m-th root of unity
    bfft.init(cyclotomic_prime,m_2_rou,m);    // initial bfft parameter
	//--
	cyclotomic_prime_string_buf = spmb.ZZtohex(cyclotomic_prime);
	pre_computing_string_buf    = spmb.ZZtohex(BM_pre_computing_ZZtype);
    std::cout << "-------------------------\n";
    std::cout << "Original prime (HeLib prime):" << cyclotomic_prime << "\n";
	std::cout << "Original prime (HeLib prime) (Hex): 22'h" << cyclotomic_prime_string_buf <<"\n";
    std::cout << "2m-th root of unity : "<< m_2_rou << "\n";
    std::cout << "Pre_computing (Hex) : "<<BM_pre_computing_bits<<"'h"<< pre_computing_string_buf << "\n";
	std::cout << "-------------------------\n";
	MulMod(m_rou,m_2_rou,m_2_rou,cyclotomic_prime);	
    //==============================================================
    for(int i=0;i<fft_point;i++){
		//if(i==0)h2_NTT[i] = 1;
		//else h2_NTT[i] = 0;
		//h2_NTT[i] = i;
		h2_NTT[i] = bfft.h2_time[i];
    }
    //===================================================================
    //A_NTT re-order  algorithm
    //because  degree of polynomial is phi_m 
    for(int i=0;i<fft_point;i++){
        if(i < phi_m){
            unsigned long exp;
            ZZ w_2m_tmp_i;    // tmp
            exp = pow(i,2); // i^2
            exp = exp % (2*m);  
            PowerMod(w_2m_tmp_i,m_2_rou,exp,cyclotomic_prime); //tmp = w^(1/2*i^2)
			//conv(w_2m_tmp_i,"1");
            MulMod(A_NTT[i],A_NTT[i],w_2m_tmp_i,cyclotomic_prime);
        }
        else conv(A_NTT[i],"0"); 
    } 
    for(int i=0;i<fft_point;i++){
        A_output << A_NTT[i] <<"\n";  
    }
    A_output.close();
    //====================================================================
     test.NTT_t(A_NTT);
	 //2020/07/04 test radix-8
     test.NTT_t(h2_NTT);
	 //*******************************************
	 // Reconfigurable data output
	 //*******************************************
	 spmb.radix16_Reconfigure_DATA(h2_NTT,m_2_rou);
	 test.NTT_pointwise_mult(test_golden_NTT,A_NTT,h2_NTT);
     std::ofstream  after_mult("./test_input/after_mult.txt");
	 for(int i=0;i<fft_point;i++){
		 after_mult << test_golden_NTT[i] << "\n";
	 }
	 after_mult.close();
	 test.INTT_t(test_golden_NTT);
     //===================================================================
	 std::ofstream before_BR("./test_input/mult_result_64.txt");
	 for(int i=0; i < m;i++){
         before_BR  <<  test_golden_NTT[i] << "\n";
		 test_golden_NTT[i] = test_golden_NTT[i] % cyclotomic_prime;
     }
	 before_BR.close();
     for(int i=0;i<fft_point;i++){
         if( i < m){
             unsigned long exp;
             ZZ w_2m_tmp_o;
             exp = pow(i,2);
             PowerMod(w_2m_tmp_o,m_2_rou,exp,cyclotomic_prime);
			 //conv(w_2m_tmp_o,"1");
             test_golden_NTT[i] = MulMod(test_golden_NTT[i],w_2m_tmp_o,cyclotomic_prime);
         }
         else test_golden_NTT[i] = 0;
     }
     //=====================================================================
      std::ofstream test_golden;
      std::string string_golden;
      string_golden = "./test_input/test_golden.txt";
      test_golden.open(string_golden);
      for(int j=0; j < fft_point; j++){
          test_golden << test_golden_NTT[j];
          test_golden << "\n";
      }
      test_golden.close();     
}
void FFTC::mkflags_gen(){
     std::ofstream mk;
     std::string        string_buf = "./mkflags";
     std::stringstream  ss;
     ss << string_buf;       
     mk.open(ss.str());	
     mk << "# add -m64 to flags for 64-bit Intel\n";
     mk << "\n";
     mk << "#CXXFLAGS=-g -DDEBUG -I../include -I. -c\n";
     mk << "#LDFLAGS=-g\n";
     mk << "CXXFLAGS= -std=c++11 -O2 -I../../ntl-5.5.2/include -I. -DNO_DEBUG -DNO_TIMER\n";
     mk << "LDFLAGS= -std=c++11  -O2 -L../..//msys/1.0/local/lib/\n";
     mk << "\n";
     mk << "##########################################################################\n";
     mk << "#File Poistion\n";
     mk << "FFTC_PATH     = /home/ldap-users/kuanyu/Desktop/BFFT_test/Compiler_cpp_code\n";
     mk << "rodsd_path    = /usr/cad/synopsys/CBDK_TSMC90GUTM_Arm_f1.0/CIC/Memory/rodsd/bin/rodsd\n";
	 mk << "sram_path    = /usr/cad/synopsys/CBDK_TSMC90GUTM_Arm_f1.0/CIC/Memory/sram_sp_adv/bin/sram_sp_adv\n";
     mk << "specname      = $(FFTC_PATH)/spec/SRAM_SP_4096_128.spec\n";
     mk << "ROM_spec      = $(FFTC_PATH)/spec/ROM.spec\n";
     mk << "ROMDATA_PATH  = $(FFTC_PATH)/ROM_Data\n";
     mk << "##########################################################################\n";
     mk << "#cpp parameter\n";
     mk << "FFT_POINT = "<< fft_point <<"\n";
     mk << "RADIX = "<< radix     <<"\n";
     mk << "##########################################################################\n";
     mk << "#ROM AND SRAM parameter\n";
	 mk << "Freq      = "<< Freq <<"\n";
     mk << "MUX       = 8\n";
     mk << "#############################################################################\n";
	 mk << "#this parameter for synthesis , ROM Max word size = 8192 , Max bit size = 64 \n";
     mk << "MUX_16    = 16\n";
     
	 int sram_word_size_tmp = (fft_point/( radix * radix ));
	 
	 if(radix== 4) {
		 if( (sram_word_size_tmp * 2) > 4096 ) {
			 mk << "sram_word_size = "<< fft_point / (radix * radix )<<"\n";
			 mk << "reorder_MUX    =  16\n";
         }
		 else {
			 mk << "sram_word_size = "<< fft_point / (2 * radix )<<"\n";
			 mk << "reorder_MUX    =  8\n";
		 }
	 }
	 if(radix== 8) mk << "sram_word_size = "<< fft_point / (2 * radix )<<"\n";
	 if(radix== 16) mk << "sram_word_size = "<< fft_point / (2 * radix )<<"\n";
     mk << "#rom word size\n";
     mk << "#radix-4  rom word size = fft_point  / (radix * radix)\n";
     mk << "#radix-16 rom word size = fft_point / 16\n";
     if(radix == 4)  mk << "rom_word_size   = "<< fft_point  / (radix * radix) <<"\n"; 
	 if(radix == 16) mk << "rom_word_size  = "<< fft_point / 16 <<"\n"; 
     mk << "rom_word_size_N4D  = "<< fft_point / 4 <<"\n";
     mk << "rom_word_size_r8   = "<< fft_point / 8 <<"\n";
	 mk << "#H2 ROM Word size\n";
     mk << "#H2 ROM Word size = fft_point / (2 * radix)\n";
     mk << "H2rom_word_size    = "<< fft_point / (2 * radix ) <<"\n";
     mk << "#Re order ROM WORD SIZE\n";
     mk << "#H2 ROM word size = fft / (2 * radix)\n";
	 if(4 * CP_width <= 96)mk << "reROM_r8_bitsize   = 32\n";
	 else mk << "reROM_r8_bitsize   = 64\n";
     mk << "reROM_word_size    = "<< fft_point / (2 * radix) <<"\n";
     mk << "#Inverse reorder ROM Word size\n";
     mk << "#chage with phi(m)\n";
     mk << "IreROM_word_size   = "<< exp2(IReROM_width) <<"\n";
     mk << "half_bit_size      = 32\n";
     mk << "bit_size           = 64\n";
     mk << "double_bit_size    = 128\n";
     mk << "instname           = SRAM_SP_$(sram_word_size)_$(double_bit_size)\n";
     mk << "############################################################\n";
	 mk << "#radix-4 FFT twiddle factor\n";
	 mk << "instnamer4ROM0 = R4_FFTROM0.txt\n";
	 mk << "instnamer4ROM1 = R4_FFTROM1.txt\n";
	 mk << "Iinstnamer4ROM0 = R4_IFFTROM0.txt\n";
     mk << "Iinstnamer4ROM1 = R4_IFFTROM1.txt\n";
	 mk << "############################################################\n";
     mk << "#radix-8 FFT twiddle factor\n";
	 mk << "instnamer8ROM0  = R8_FFTROM0.txt\n";
	 mk << "instnamer8ROM1  = R8_FFTROM1.txt\n";
	 mk << "instnamer8ROM2  = R8_FFTROM2.txt\n";
	 mk << "instnamer8ROM3  = R8_FFTROM3.txt\n";
	 mk << "Iinstnamer8ROM0 = R8_IFFTROM0.txt\n";
     mk << "Iinstnamer8ROM1 = R8_IFFTROM1.txt\n";
     mk << "Iinstnamer8ROM2 = R8_IFFTROM2.txt\n";
     mk << "Iinstnamer8ROM3 = R8_IFFTROM3.txt\n";
	 mk << "############################################################\n";	 
     mk << "#radix-4 FFT twiddle factor divided into  4 bank \n";
     mk << "#ROM.txt file \n";
     mk << "instnamer0d0   = R4_FFTROM0_D0_4Bank.txt\n";
     mk << "instnamer0d1   = R4_FFTROM0_D1_4Bank.txt\n";
     mk << "instnamer0d2   = R4_FFTROM0_D2_4Bank.txt\n";
     mk << "instnamer0d3   = R4_FFTROM0_D3_4Bank.txt\n";
     mk << "instnamer1d0   = R4_FFTROM1_D0_4Bank.txt\n";
     mk << "instnamer1d1   = R4_FFTROM1_D1_4Bank.txt\n";
     mk << "instnamer1d2   = R4_FFTROM1_D2_4Bank.txt\n";
     mk << "instnamer1d3   = R4_FFTROM1_D3_4Bank.txt\n";
     mk << "############################################################\n";
     mk << "#radix-16 FFT \n";
     mk << "#ROM.txt file \n";
     mk << "instnamerom0 = R16_FFTROM0.txt\n";
     mk << "instnamerom1 = R16_FFTROM1.txt\n";
     mk << "instnamerom2 = R16_FFTROM2.txt\n";
     mk << "instnamerom3 = R16_FFTROM3.txt\n";
     mk << "instnamerom4 = R16_FFTROM4.txt\n";
     mk << "instnamerom5 = R16_FFTROM5.txt\n";
     mk << "instnamerom6 = R16_FFTROM6.txt\n";
     mk << "instnamerom7 = R16_FFTROM7.txt\n";
     mk << "##############################################\n";
     mk << "#radix-4 IFFT  \n";
     mk << "###Inverse ROM \n";
     mk << "Iinstnamer0d0   = R4_IFFTROM0_D0_4Bank.txt\n";
     mk << "Iinstnamer0d1   = R4_IFFTROM0_D1_4Bank.txt\n";
     mk << "Iinstnamer0d2   = R4_IFFTROM0_D2_4Bank.txt\n";
     mk << "Iinstnamer0d3   = R4_IFFTROM0_D3_4Bank.txt\n";
     mk << "Iinstnamer1d0   = R4_IFFTROM1_D0_4Bank.txt\n";
     mk << "Iinstnamer1d1   = R4_IFFTROM1_D1_4Bank.txt\n";
     mk << "Iinstnamer1d2   = R4_IFFTROM1_D2_4Bank.txt\n";
     mk << "Iinstnamer1d3   = R4_IFFTROM1_D3_4Bank.txt\n";
     mk << "##############################################\n";
     mk << "#radix-16 IFFT\n";
     mk << "###Inverse ROM\n";
     mk << "Iinstnamerom0 = R16_IFFTROM0.txt\n";
     mk << "Iinstnamerom1 = R16_IFFTROM1.txt\n";
     mk << "Iinstnamerom2 = R16_IFFTROM2.txt\n";
     mk << "Iinstnamerom3 = R16_IFFTROM3.txt\n";
     mk << "Iinstnamerom4 = R16_IFFTROM4.txt\n";
     mk << "Iinstnamerom5 = R16_IFFTROM5.txt\n";
     mk << "Iinstnamerom6 = R16_IFFTROM6.txt\n";
     mk << "Iinstnamerom7 = R16_IFFTROM7.txt\n";
     mk << "##############################################\n";
     mk << "#raidx-4\n";
     mk << "#reorder factor and inverse reorder rom\n";
     mk << "reorderROM0   = reorder_ROM0.txt\n";
     mk << "reorderROM1   = reorder_ROM1.txt\n";
     mk << "ireorderROM0  = ireorder_ROM0.txt\n";
     mk << "ireorderROM1  = ireorder_ROM1.txt\n";
     if( 4 * CP_width > 96) mk << "IReROM1_BIT_SIZE = 64\n";
	 else mk << "IReROM1_BIT_SIZE = 32\n";
     mk << "##############################################\n";
     mk << "#raidx-8\n";
     mk << "#reorder factor and inverse reorder rom\n";
     mk << "reorderROM0_R8   = reorder_ROM0.txt\n";
     mk << "reorderROM1_R8   = reorder_ROM1.txt\n";
     mk << "reorderROM2_R8   = reorder_ROM2.txt\n";
     mk << "reorderROM3_R8   = reorder_ROM3.txt\n";
     mk << "ireorderROM0_R8  = ireorder_ROM0.txt\n";
     mk << "ireorderROM1_R8  = ireorder_ROM1.txt\n";
     mk << "ireorderROM2_R8  = ireorder_ROM2.txt\n";
     mk << "ireorderROM3_R8  = ireorder_ROM3.txt\n";
     mk << "##############################################\n";
     mk << "#raidx-16\n";
     mk << "#reorder factor and inverse reorder rom\n";
     mk << "reorderROM0_R16   = reorder_ROM0.txt\n";
     mk << "reorderROM1_R16   = reorder_ROM1.txt\n";
     mk << "reorderROM2_R16   = reorder_ROM2.txt\n";
     mk << "reorderROM3_R16   = reorder_ROM3.txt\n";
     mk << "ireorderROM0_R16  = ireorder_ROM0.txt\n";
     mk << "ireorderROM1_R16  = ireorder_ROM1.txt\n";
     mk << "ireorderROM2_R16  = ireorder_ROM2.txt\n";
     mk << "ireorderROM3_R16  = ireorder_ROM3.txt\n";
     mk << "##############################################\n";
     mk << "H_b0ROM0_r4        = H_b0ROM0.txt\n";
     mk << "H_b0ROM1_r4        = H_b0ROM1.txt\n";
     mk << "H_b1ROM0_r4        = H_b1ROM0.txt\n";
     mk << "H_b1ROM1_r4        = H_b1ROM1.txt\n";
     mk << "##############################################\n";
	 mk << "H_b0r0_r4_mux16        = H_b0r0.txt\n";
	 mk << "H_b0r1_r4_mux16        = H_b0r1.txt\n";
	 mk << "H_b0r2_r4_mux16        = H_b0r2.txt\n";
	 mk << "H_b0r3_r4_mux16        = H_b0r3.txt\n";
	 mk << "H_b1r0_r4_mux16        = H_b1r0.txt\n";
	 mk << "H_b1r1_r4_mux16        = H_b1r1.txt\n";
	 mk << "H_b1r2_r4_mux16        = H_b1r2.txt\n";
	 mk << "H_b1r3_r4_mux16        = H_b1r3.txt\n";
	 mk << "##############################################\n";
     mk << "H_b0ROM0_r8        = H_b0ROM0.txt\n";
     mk << "H_b0ROM1_r8        = H_b0ROM1.txt\n";
     mk << "H_b0ROM2_r8        = H_b0ROM2.txt\n";
     mk << "H_b0ROM3_r8        = H_b0ROM3.txt\n";
     mk << "H_b1ROM0_r8        = H_b1ROM0.txt\n";
     mk << "H_b1ROM1_r8        = H_b1ROM1.txt\n";
     mk << "H_b1ROM2_r8        = H_b1ROM2.txt\n";
     mk << "H_b1ROM3_r8        = H_b1ROM3.txt\n";
     mk << "##############################################\n";	 
	 mk << "H_b0ROM0_r16        = H_b0ROM0.txt\n";
     mk << "H_b0ROM1_r16        = H_b0ROM1.txt\n";
     mk << "H_b0ROM2_r16        = H_b0ROM2.txt\n";
     mk << "H_b0ROM3_r16        = H_b0ROM3.txt\n";
     mk << "H_b0ROM4_r16        = H_b0ROM4.txt\n";
     mk << "H_b0ROM5_r16        = H_b0ROM5.txt\n";
     mk << "H_b0ROM6_r16        = H_b0ROM6.txt\n";
     mk << "H_b0ROM7_r16        = H_b0ROM7.txt\n";
     mk << "H_b1ROM0_r16        = H_b1ROM0.txt\n";
     mk << "H_b1ROM1_r16        = H_b1ROM1.txt\n";
     mk << "H_b1ROM2_r16        = H_b1ROM2.txt\n";
     mk << "H_b1ROM3_r16        = H_b1ROM3.txt\n";
     mk << "H_b1ROM4_r16        = H_b1ROM4.txt\n";
     mk << "H_b1ROM5_r16        = H_b1ROM5.txt\n";
     mk << "H_b1ROM6_r16        = H_b1ROM6.txt\n";
     mk << "H_b1ROM7_r16        = H_b1ROM7.txt\n";
     mk << "##############################################\n";
	 mk.close();
}
void FFTC::mkflags_Reconfigure_gen(){
     std::ofstream mk;
     std::string        string_buf = "./mkflags";
     std::stringstream  ss;
     ss << string_buf;       
     mk.open(ss.str());	
     mk << "# add -m64 to flags for 64-bit Intel\n";
     mk << "\n";
     mk << "#CXXFLAGS=-g -DDEBUG -I../include -I. -c\n";
     mk << "#LDFLAGS=-g\n";
     mk << "CXXFLAGS= -std=c++11 -O2 -I../../ntl-5.5.2/include -I. -DNO_DEBUG -DNO_TIMER\n";
     mk << "LDFLAGS= -std=c++11  -O2 -L../..//msys/1.0/local/lib/\n";
     mk << "\n";
     mk << "##########################################################################\n";
     mk << "#File Poistion\n";
     mk << "FFTC_PATH     = /home/ldap-users/shiyong/Downloads/FFT_Compiler/FFTC\n";
     mk << "rodsd_path    = /opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/Memory/rodsd/bin/rodsd\n";
     mk << "specname      = $(FFTC_PATH)/spec/SRAM_SP_4096_128.spec\n";
     mk << "ROM_spec      = $(FFTC_PATH)/spec/ROM.spec\n";
     mk << "ROMDATA_PATH  = $(FFTC_PATH)/ROM_Data\n";
     mk << "##########################################################################\n";
     mk << "#cpp parameter\n";
     mk << "FFT_POINT = "<< fft_point <<"\n";
     mk << "RADIX = "<< radix     <<"\n";
     mk << "##########################################################################\n";
     mk << "#ROM AND SRAM parameter\n";
     mk << "Freq      = "<< Freq <<"\n";
     mk << "MUX       = 8\n";
     mk << "#############################################################################\n";
	 mk << "#this parameter for synthesis , ROM Max word size = 8192 , Max bit size = 64 \n";
     mk << "MUX_16    = 16\n";
	 mk << "sram_word_size = 2048\n";
     mk << "#Configurable BFFT rom word size\n";
     mk << "#Configurable BFFT radix-16 rom word size = 4096\n";
	 mk << "rom_word_size  = 4096\n"; 
     mk << "rom_word_size_N4D  = "<< fft_point / 4 <<"\n";
     mk << "rom_word_size_r8   = "<< fft_point / 8 <<"\n";
	 mk << "#H2 ROM Word size\n";
     mk << "#H2 ROM Word size = fft_point / (2 * radix)\n";
     mk << "H2rom_word_size    = "<< fft_point / (2 * radix ) <<"\n";
     mk << "#Re order ROM WORD SIZE\n";
     mk << "#H2 ROM word size = fft / (2 * radix)\n";
	 mk << "reROM_r8_bitsize   = 64\n";
     mk << "reROM_word_size    = "<< fft_point / (2 * radix) <<"\n";
     mk << "#Inverse reorder ROM Word size\n";
     mk << "#chage with phi(m)\n";
     mk << "IreROM_word_size   = "<< exp2(IReROM_width) <<"\n";
     mk << "half_bit_size      = 32\n";
     mk << "bit_size           = 64\n";
     mk << "double_bit_size    = 128\n";
     mk << "instname           = SRAM_SP_$(sram_word_size)_$(double_bit_size)\n";
     mk << "instname_64        = SRAM_SP_$(sram_word_size)_$(bit_size)\n";
     mk << "############################################################\n";
	 mk << "#radix-4 FFT twiddle factor\n";
	 mk << "instnamer4ROM0 = R4_FFTROM0.txt\n";
	 mk << "instnamer4ROM1 = R4_FFTROM1.txt\n";
	 mk << "Iinstnamer4ROM0 = R4_IFFTROM0.txt\n";
     mk << "Iinstnamer4ROM1 = R4_IFFTROM1.txt\n";
	 mk << "############################################################\n";
     mk << "#radix-8 FFT twiddle factor\n";
	 mk << "instnamer8ROM0  = R8_FFTROM0.txt\n";
	 mk << "instnamer8ROM1  = R8_FFTROM1.txt\n";
	 mk << "instnamer8ROM2  = R8_FFTROM2.txt\n";
	 mk << "instnamer8ROM3  = R8_FFTROM3.txt\n";
	 mk << "Iinstnamer8ROM0 = R8_IFFTROM0.txt\n";
     mk << "Iinstnamer8ROM1 = R8_IFFTROM1.txt\n";
     mk << "Iinstnamer8ROM2 = R8_IFFTROM2.txt\n";
     mk << "Iinstnamer8ROM3 = R8_IFFTROM3.txt\n";
	 mk << "############################################################\n";	 
     mk << "#radix-4 FFT twiddle factor divided into  4 bank \n";
     mk << "#ROM.txt file \n";
     mk << "instnamer0d0   = R4_FFTROM0_D0_4Bank.txt\n";
     mk << "instnamer0d1   = R4_FFTROM0_D1_4Bank.txt\n";
     mk << "instnamer0d2   = R4_FFTROM0_D2_4Bank.txt\n";
     mk << "instnamer0d3   = R4_FFTROM0_D3_4Bank.txt\n";
     mk << "instnamer1d0   = R4_FFTROM1_D0_4Bank.txt\n";
     mk << "instnamer1d1   = R4_FFTROM1_D1_4Bank.txt\n";
     mk << "instnamer1d2   = R4_FFTROM1_D2_4Bank.txt\n";
     mk << "instnamer1d3   = R4_FFTROM1_D3_4Bank.txt\n";
     mk << "############################################################\n";
     mk << "#radix-16 FFT \n";
     mk << "#ROM.txt file \n";
     mk << "instnamerom0 = R16_FFTROM0.txt\n";
     mk << "instnamerom1 = R16_FFTROM1.txt\n";
     mk << "instnamerom2 = R16_FFTROM2.txt\n";
     mk << "instnamerom3 = R16_FFTROM3.txt\n";
     mk << "instnamerom4 = R16_FFTROM4.txt\n";
     mk << "instnamerom5 = R16_FFTROM5.txt\n";
     mk << "instnamerom6 = R16_FFTROM6.txt\n";
     mk << "instnamerom7 = R16_FFTROM7.txt\n";
     mk << "##############################################\n";
     mk << "#radix-4 IFFT  \n";
     mk << "###Inverse ROM \n";
     mk << "Iinstnamer0d0   = R4_IFFTROM0_D0_4Bank.txt\n";
     mk << "Iinstnamer0d1   = R4_IFFTROM0_D1_4Bank.txt\n";
     mk << "Iinstnamer0d2   = R4_IFFTROM0_D2_4Bank.txt\n";
     mk << "Iinstnamer0d3   = R4_IFFTROM0_D3_4Bank.txt\n";
     mk << "Iinstnamer1d0   = R4_IFFTROM1_D0_4Bank.txt\n";
     mk << "Iinstnamer1d1   = R4_IFFTROM1_D1_4Bank.txt\n";
     mk << "Iinstnamer1d2   = R4_IFFTROM1_D2_4Bank.txt\n";
     mk << "Iinstnamer1d3   = R4_IFFTROM1_D3_4Bank.txt\n";
     mk << "##############################################\n";
     mk << "#radix-16 IFFT\n";
     mk << "###Inverse ROM\n";
     mk << "Iinstnamerom0 = R16_IFFTROM0.txt\n";
     mk << "Iinstnamerom1 = R16_IFFTROM1.txt\n";
     mk << "Iinstnamerom2 = R16_IFFTROM2.txt\n";
     mk << "Iinstnamerom3 = R16_IFFTROM3.txt\n";
     mk << "Iinstnamerom4 = R16_IFFTROM4.txt\n";
     mk << "Iinstnamerom5 = R16_IFFTROM5.txt\n";
     mk << "Iinstnamerom6 = R16_IFFTROM6.txt\n";
     mk << "Iinstnamerom7 = R16_IFFTROM7.txt\n";
     mk << "##############################################\n";
     mk << "#raidx-4\n";
     mk << "#reorder factor and inverse reorder rom\n";
     mk << "reorderROM0   = reorder_ROM0.txt\n";
     mk << "reorderROM1   = reorder_ROM1.txt\n";
     mk << "ireorderROM0  = ireorder_ROM0.txt\n";
     mk << "ireorderROM1  = ireorder_ROM1.txt\n";
     mk << "IReROM1_BIT_SIZE = 64\n";
     mk << "##############################################\n";
     mk << "#raidx-8\n";
     mk << "#reorder factor and inverse reorder rom\n";
     mk << "reorderROM0_R8   = reorder_ROM0.txt\n";
     mk << "reorderROM1_R8   = reorder_ROM1.txt\n";
     mk << "reorderROM2_R8   = reorder_ROM2.txt\n";
     mk << "reorderROM3_R8   = reorder_ROM3.txt\n";
     mk << "ireorderROM0_R8  = ireorder_ROM0.txt\n";
     mk << "ireorderROM1_R8  = ireorder_ROM1.txt\n";
     mk << "ireorderROM2_R8  = ireorder_ROM2.txt\n";
     mk << "ireorderROM3_R8  = ireorder_ROM3.txt\n";
     mk << "##############################################\n";
     mk << "#raidx-16\n";
     mk << "#reorder factor and inverse reorder rom\n";
     mk << "#cyclotomic prime is 22 bits , then ireorder ROM5 bit size is 32 bits\n";
     mk << "#otherwise rom5 bit size is 64 bits\n";
     mk << "reorderROM0_R16   = reorder_ROM0.txt\n";
     mk << "reorderROM1_R16   = reorder_ROM1.txt\n";
     mk << "reorderROM2_R16   = reorder_ROM2.txt\n";
     mk << "reorderROM3_R16   = reorder_ROM3.txt\n";
     mk << "reorderROM4_R16   = reorder_ROM4.txt\n";
     mk << "reorderROM5_R16   = reorder_ROM5.txt\n";
     mk << "ireorderROM0_R16  = ireorder_ROM0.txt\n";
     mk << "ireorderROM1_R16  = ireorder_ROM1.txt\n";
     mk << "ireorderROM2_R16  = ireorder_ROM2.txt\n";
     mk << "ireorderROM3_R16  = ireorder_ROM3.txt\n";
     mk << "ireorderROM4_R16  = ireorder_ROM4.txt\n";
     mk << "ireorderROM5_R16  = ireorder_ROM5.txt\n";
	 mk << "IReROM5_BIT_SIZE = 64\n";
     mk << "##############################################\n";
     mk << "H_b0ROM0_r4        = H_b0ROM0.txt\n";
     mk << "H_b0ROM1_r4        = H_b0ROM1.txt\n";
     mk << "H_b1ROM0_r4        = H_b1ROM0.txt\n";
     mk << "H_b1ROM1_r4        = H_b1ROM1.txt\n";
     mk << "##############################################\n";
	 mk << "H_b0r0_r4_mux16        = H_b0r0.txt\n";
	 mk << "H_b0r1_r4_mux16        = H_b0r1.txt\n";
	 mk << "H_b0r2_r4_mux16        = H_b0r2.txt\n";
	 mk << "H_b0r3_r4_mux16        = H_b0r3.txt\n";
	 mk << "H_b1r0_r4_mux16        = H_b1r0.txt\n";
	 mk << "H_b1r1_r4_mux16        = H_b1r1.txt\n";
	 mk << "H_b1r2_r4_mux16        = H_b1r2.txt\n";
	 mk << "H_b1r3_r4_mux16        = H_b1r3.txt\n";
	 mk << "##############################################\n";
     mk << "H_b0ROM0_r8        = H_b0ROM0.txt\n";
     mk << "H_b0ROM1_r8        = H_b0ROM1.txt\n";
     mk << "H_b0ROM2_r8        = H_b0ROM2.txt\n";
     mk << "H_b0ROM3_r8        = H_b0ROM3.txt\n";
     mk << "H_b1ROM0_r8        = H_b1ROM0.txt\n";
     mk << "H_b1ROM1_r8        = H_b1ROM1.txt\n";
     mk << "H_b1ROM2_r8        = H_b1ROM2.txt\n";
     mk << "H_b1ROM3_r8        = H_b1ROM3.txt\n";
     mk << "##############################################\n";	 
	 mk << "H_b0ROM0_r16        = H_b0ROM0.txt\n";
     mk << "H_b0ROM1_r16        = H_b0ROM1.txt\n";
     mk << "H_b0ROM2_r16        = H_b0ROM2.txt\n";
     mk << "H_b0ROM3_r16        = H_b0ROM3.txt\n";
     mk << "H_b0ROM4_r16        = H_b0ROM4.txt\n";
     mk << "H_b0ROM5_r16        = H_b0ROM5.txt\n";
     mk << "H_b0ROM6_r16        = H_b0ROM6.txt\n";
     mk << "H_b0ROM7_r16        = H_b0ROM7.txt\n";
     mk << "H_b1ROM0_r16        = H_b1ROM0.txt\n";
     mk << "H_b1ROM1_r16        = H_b1ROM1.txt\n";
     mk << "H_b1ROM2_r16        = H_b1ROM2.txt\n";
     mk << "H_b1ROM3_r16        = H_b1ROM3.txt\n";
     mk << "H_b1ROM4_r16        = H_b1ROM4.txt\n";
     mk << "H_b1ROM5_r16        = H_b1ROM5.txt\n";
     mk << "H_b1ROM6_r16        = H_b1ROM6.txt\n";
     mk << "H_b1ROM7_r16        = H_b1ROM7.txt\n";
     mk << "##############################################\n";
	 mk.close();
}
void FFTC::testingData_gen(std::string Data_in , int random_data_option){
	std::ofstream Ain("./test_input/A_in.txt");
	ZZ random_number_tmp;
	std::stringstream ss;
	ss << Data_in;
	std::string DATA_i_string_buf;
	//index > phim , data value is zero;
	if(random_data_option == 1){
		int random_number;
		srand(time(NULL));
		for(int i = 0; i < fft_point ; i++){
			if(i < phi_m) {
				//generate random number
				random_number = rand(); 
				conv(random_number_tmp , random_number);
				random_number_tmp = random_number_tmp % cyclotomic_prime;
				Ain << random_number_tmp << "\n";
			}else  Ain << "0\n";
		}	
	}else {
		std::ifstream DATA_i;
		DATA_i.open((ss.str()));
		if(!DATA_i) {
			std::cout << "**************************************************\n";
			std::cout << "ERROR!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
			std::cout << "Data_in open fail!!!!!!\n";
		}
		long DATA_i_tmp;
		for(int i = 0 ; i < fft_point; i++){
		   if(i  < phi_m){
				getline(DATA_i , DATA_i_string_buf);
				DATA_i_tmp  = atol(DATA_i_string_buf.c_str());
				Ain << DATA_i_tmp <<"\n";
		   }else Ain << "0\n";
		}
	}
	
}
//Test bench generate
void FFTC::testfftp_r4(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //                                                                                                                                       \n";
 testfftp << " //Date       : 2018/8/1                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                  << char_tmp << "                                                                                           \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux1.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_AGU.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Radix4_Pipe.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg2.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg3.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg4.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg4_2.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg5_1.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg5_2.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_NPipeReg1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_NPipeReg2.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_NPipeReg3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_ROMPipeReg1.v"        << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_CSAout0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_CSAout1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_CSAout2.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_CSAout3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_out0.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_out1.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_out2.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum4_out3.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod96.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod96PD.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ModMux.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_DC.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_WAddr.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA24.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA24clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA96.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA96clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA192.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA192clg.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_WD_buf.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_TMulMod.v"            << char_tmp << "                                                                                         \n";
 
 int SRAM_word_size;
 SRAM_word_size = fft_point / (radix * radix); // [ fft_point / (2 * radix) ] / 2
 
 if( (SRAM_word_size * 2 ) > 4096)testfftp << "  `include "<< char_tmp << "MuxMA.v"                 << char_tmp << "                                                                                         \n";
 if( (SRAM_word_size * 2 ) > 4096)testfftp << "  `include "<< char_tmp << "MuxROMA.v"               << char_tmp << "                                                                                         \n"; 
 
 if( (SRAM_word_size * 2) > 4096) {
	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << SRAM_word_size <<"_128.v" << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D0_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n";  
     testfftp << "  `include "<< char_tmp << "R0D1_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D2_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D3_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D0_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D1_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D2_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D3_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "IR0D0_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D1_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D2_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D3_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D0_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D1_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D2_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D3_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
 }
 else {
	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << (SRAM_word_size*2) <<"_128.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM1.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM1.v" << char_tmp << "\n";
 
 }
 testfftp << "  `include "<< char_tmp << "Mux6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                    << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_BU_outpipe.v"            << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"        << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_InpipeReg.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul.v"                   << char_tmp << "                                                                                         \n";
 testfftp << "                                                                                                                          \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_orderROM_Pipe.v"      << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"           << char_tmp << "                                                                                         \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                << char_tmp << "                                                                                         \n";
if((SRAM_word_size * 2) > 4096){
	testfftp << "  `include "<< char_tmp << "H_b0r0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r3.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r3.v"<< char_tmp << "\n";
	
}else {
	testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"<< char_tmp << "\n";
}
 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 testfftp << " parameter CYCLE = 5 ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
// std::cout << "m: "     << m <<"\n";
 //std::cout << "phi_m: " << phi_m << "\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 4 ; // butterfly number of point                                                                    \n";
 double RR_w;
 long   G;
 long   RR_width;
 long   INI_VALUE;
 long   ADDR_VALUE;
 RR_w = log2(fft_point/radix);
 RR_width   = (long) RR_w;
 G          = fft_point /(radix * radix);
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 
 testfftp << " parameter RR_WIDTH = " << RR_width << "; //Rotate width = log_2(POINT_NUM/BF_POINT_NUM)                                                     \n";
 testfftp << " parameter G = " << G << "; // POINT_NUM/((BF_POINT_NUM)^2)                                                                          \n";
 testfftp << " parameter R = 4 ; // BF_POINT_NUM                                                                                            \n";
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)                                                                      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0 = "<< char_tmp << "./data/A_b0radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1 = "<< char_tmp << "./data/A_b0radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2 = "<< char_tmp << "./data/A_b0radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3 = "<< char_tmp << "./data/A_b0radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0 = "<< char_tmp << "./data/A_b1radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1 = "<< char_tmp << "./data/A_b1radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2 = "<< char_tmp << "./data/A_b1radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3 = "<< char_tmp << "./data/A_b1radix3.txt" << char_tmp << ";  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " wire               MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] temp[0:BF_POINT_NUM-1] ;                                                                                  \n";
 testfftp << " reg  [P_WIDTH-1:0] temp2[0:BF_POINT_NUM-1] ;                                                                                 \n";
 testfftp << " reg  [P_WIDTH-1:0] inc ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDA ;                                                                                                   \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDB ;                                                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] Mul_Result_Golden[0:POINT_NUM-1] ;                                                                        \n";
 testfftp << " reg  [RR_WIDTH-1:0] BC ;                                                                                                     \n";
 testfftp << " reg                 BN ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef ,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin                                                                                                            \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 $fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 		//$fsdbDumpvars(3,test_FFTP) ;                                                                                          \n";
 testfftp << " 		// $fsdbDumpvars(3,test_FFTP); //top level signal                                                                       \n";
 testfftp << " 		//$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal                                                                                   \n";
 testfftp << " 		//$fsdbDumpvars(1,test_DualECP); //top level signal                                                                     \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		for(i=0;i<(BF_POINT_NUM);i=i+1) begin                                                                                   \n";
 testfftp << " 			temp[i] = INI_VALUE*i ; // (256/4)*i                                                                                \n";
 testfftp << " 			temp2[i] = INI_VALUE*i ; // (256/4)*i                                                                               \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 			ExtB0_D0_in = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in = Ext_B0R1_mem[j] ;                                                                                     \n";
 testfftp << " 			ExtB0_D2_in = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 			ExtB1_D0_in = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0 ;\n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[4*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 4*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i,MulD0_out,4*i,golden_mem[4*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[4*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 4*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+1,MulD1_out,4*i+1,golden_mem[4*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[4*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 4*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+2,MulD2_out,4*i+2,golden_mem[4*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[4*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 4*i+3,MulD3_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+3,MulD3_out,4*i+3,golden_mem[4*i + 3]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ;         \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_r4_R2P(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //                                                                                                                                       \n";
 testfftp << " //Date       : 2018/8/1                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                  << char_tmp << "                                                                                           \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux1.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_AGU.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BU.v"                    << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BU_S0.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Pipe.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Radix4_Pipe.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R4_PipeReg1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg2.v"           << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R4_PipeReg3.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg4.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_PipeReg4_2.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R4_PipeReg5_1.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R4_PipeReg5_2.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R4_NPipeReg1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_NPipeReg2.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_NPipeReg3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_ROMPipeReg1.v"        << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_CSAout0.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_CSAout1.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_CSAout2.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_CSAout3.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_out0.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_out1.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_out2.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum4_out3.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Mod96.v"                 << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Mod96PD.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ModMux.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_DC.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_WAddr.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                  << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA24.v"                 << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA24clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA64clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA96.v"                 << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA96clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA192.v"                << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA192clg.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_WD_buf.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_TMulMod.v"            << char_tmp << "                                                                                         \n";
 
 int SRAM_word_size;
 SRAM_word_size = fft_point / (radix * radix); // [ fft_point / (2 * radix) ] / 2
 
 if( (SRAM_word_size * 2 ) > 4096)testfftp << "  `include "<< char_tmp << "MuxMA.v"                 << char_tmp << "                                                                                         \n";
 if( (SRAM_word_size * 2 ) > 4096)testfftp << "  `include "<< char_tmp << "MuxROMA.v"               << char_tmp << "                                                                                         \n"; 
 
 if( (SRAM_word_size * 2) > 4096) {
	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << SRAM_word_size <<"_128.v" << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D0_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n";  
     testfftp << "  `include "<< char_tmp << "R0D1_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D2_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D3_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D0_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D1_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D2_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D3_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "IR0D0_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D1_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D2_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D3_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D0_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D1_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D2_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D3_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
 }
 else {
	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << (SRAM_word_size*2) <<"_128.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM1.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM1.v" << char_tmp << "\n";
 
 }
 testfftp << "  `include "<< char_tmp << "Mux6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                    << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_BU_outpipe.v"            << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"        << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_InpipeReg.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul.v"                   << char_tmp << "                                                                                         \n";
 testfftp << "                                                                                                                          \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R4_orderROM_Pipe.v"      << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"           << char_tmp << "                                                                                         \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                << char_tmp << "                                                                                         \n";
if((SRAM_word_size * 2) > 4096){
	testfftp << "  `include "<< char_tmp << "H_b0r0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r3.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r3.v"<< char_tmp << "\n";
	
}else {
	testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"<< char_tmp << "\n";
}
 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 testfftp << " parameter CYCLE = 5 ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
// std::cout << "m: "     << m <<"\n";
 //std::cout << "phi_m: " << phi_m << "\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 4 ; // butterfly number of point                                                                    \n";
 double RR_w;
 long   G;
 long   RR_width;
 long   INI_VALUE;
 long   ADDR_VALUE;
 RR_w = log2(fft_point/radix);
 RR_width   = (long) RR_w;
 G          = fft_point /(radix * radix);
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 
 testfftp << " parameter RR_WIDTH = " << RR_width << "; //Rotate width = log_2(POINT_NUM/BF_POINT_NUM)                                                     \n";
 testfftp << " parameter G = " << G << "; // POINT_NUM/((BF_POINT_NUM)^2)                                                                          \n";
 testfftp << " parameter R = 4 ; // BF_POINT_NUM                                                                                            \n";
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)                                                                      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0 = "<< char_tmp << "./data/A_b0radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1 = "<< char_tmp << "./data/A_b0radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2 = "<< char_tmp << "./data/A_b0radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3 = "<< char_tmp << "./data/A_b0radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0 = "<< char_tmp << "./data/A_b1radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1 = "<< char_tmp << "./data/A_b1radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2 = "<< char_tmp << "./data/A_b1radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3 = "<< char_tmp << "./data/A_b1radix3.txt" << char_tmp << ";  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " wire               MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] temp[0:BF_POINT_NUM-1] ;                                                                                  \n";
 testfftp << " reg  [P_WIDTH-1:0] temp2[0:BF_POINT_NUM-1] ;                                                                                 \n";
 testfftp << " reg  [P_WIDTH-1:0] inc ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDA ;                                                                                                   \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDB ;                                                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] Mul_Result_Golden[0:POINT_NUM-1] ;                                                                        \n";
 testfftp << " reg  [RR_WIDTH-1:0] BC ;                                                                                                     \n";
 testfftp << " reg                 BN ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef ,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin                                                                                                            \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 $fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 		//$fsdbDumpvars(3,test_FFTP) ;                                                                                          \n";
 testfftp << " 		// $fsdbDumpvars(3,test_FFTP); //top level signal                                                                       \n";
 testfftp << " 		//$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal                                                                                   \n";
 testfftp << " 		//$fsdbDumpvars(1,test_DualECP); //top level signal                                                                     \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		for(i=0;i<(BF_POINT_NUM);i=i+1) begin                                                                                   \n";
 testfftp << " 			temp[i] = INI_VALUE*i ; // (256/4)*i                                                                                \n";
 testfftp << " 			temp2[i] = INI_VALUE*i ; // (256/4)*i                                                                               \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 			ExtB0_D0_in = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in = Ext_B0R1_mem[j] ;                                                                                     \n";
 testfftp << " 			ExtB0_D2_in = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 			ExtB1_D0_in = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0 ;\n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[4*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 4*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i,MulD0_out,4*i,golden_mem[4*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[4*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 4*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+1,MulD1_out,4*i+1,golden_mem[4*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[4*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 4*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+2,MulD2_out,4*i+2,golden_mem[4*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[4*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 4*i+3,MulD3_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+3,MulD3_out,4*i+3,golden_mem[4*i + 3]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ;         \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_syn_r4(){
     std::ofstream testfftp("./syn_tcl/test_FFTP.v");
     char char_tmp = 34; // ascii code 32 = 
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //Writer     : shi-yong wu                                                                                                  \n";
 testfftp << " //Date       : 2020/06/18                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank BFFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP_pipe_syn.v"         << char_tmp << "\n"; 
 int SRAM_word_size;
 SRAM_word_size = fft_point / (radix * radix); // [ fft_point / (2 * radix) ] / 2
  
 if( (SRAM_word_size * 2) > 4096) {
	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << SRAM_word_size <<"_128.v" << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D0_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n";  
     testfftp << "  `include "<< char_tmp << "R0D1_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D2_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R0D3_" << SRAM_word_size <<"_64.v"           << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D0_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D1_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D2_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "R1D3_" << SRAM_word_size <<"_128.v"          << char_tmp << "\n"; 
     testfftp << "  `include "<< char_tmp << "IR0D0_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D1_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D2_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR0D3_" << SRAM_word_size << "_64.v"          << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D0_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D1_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D2_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
     testfftp << "  `include "<< char_tmp << "IR1D3_" << SRAM_word_size << "_128.v"         << char_tmp << "\n";
 }
 else {
	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << (SRAM_word_size*2) <<"_128.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM1.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM1.v" << char_tmp << "\n";
 
 }
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"          << char_tmp << "                                                                                         \n";
if((SRAM_word_size * 2) > 4096){
	testfftp << "  `include "<< char_tmp << "H_b0r0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0r3.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1r3.v"<< char_tmp << "\n";
	
}else {
	testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"<< char_tmp << "\n";
}
 testfftp << "  `include "<< char_tmp << "/opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/Verilog/tsmc090.v"          << char_tmp << "\n";
 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 testfftp << " parameter CYCLE = 5 ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
// std::cout << "m: "     << m <<"\n";
 //std::cout << "phi_m: " << phi_m << "\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 4 ; // butterfly number of point                                                                    \n";
 double RR_w;
 long   G;
 long   RR_width;
 long   INI_VALUE;
 long   ADDR_VALUE;
 RR_w = log2(fft_point/radix);
 RR_width   = (long) RR_w;
 G          = fft_point /(radix * radix);
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 
 testfftp << " parameter RR_WIDTH = " << RR_width << "; //Rotate width = log_2(POINT_NUM/BF_POINT_NUM)                                                     \n";
 testfftp << " parameter G = " << G << "; // POINT_NUM/((BF_POINT_NUM)^2)                                                                          \n";
 testfftp << " parameter R = 4 ; // BF_POINT_NUM                                                                                            \n";
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)                                                                      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0 = "<< char_tmp << "./data/A_b0radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1 = "<< char_tmp << "./data/A_b0radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2 = "<< char_tmp << "./data/A_b0radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3 = "<< char_tmp << "./data/A_b0radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0 = "<< char_tmp << "./data/A_b1radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1 = "<< char_tmp << "./data/A_b1radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2 = "<< char_tmp << "./data/A_b1radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3 = "<< char_tmp << "./data/A_b1radix3.txt" << char_tmp << ";  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " wire               MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] temp[0:BF_POINT_NUM-1] ;                                                                                  \n";
 testfftp << " reg  [P_WIDTH-1:0] temp2[0:BF_POINT_NUM-1] ;                                                                                 \n";
 testfftp << " reg  [P_WIDTH-1:0] inc ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDA ;                                                                                                   \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDB ;                                                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] Mul_Result_Golden[0:POINT_NUM-1] ;                                                                        \n";
 testfftp << " reg  [RR_WIDTH-1:0] BC ;                                                                                                     \n";
 testfftp << " reg                 BN ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin                                                                                                            \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 //$fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 		$fsdbDumpvars(3,test_FFTP) ;                                                                                          \n";
 testfftp << " 		// $fsdbDumpvars(3,test_FFTP); //top level signal                                                                       \n";
 testfftp << " 		//$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal                                                                                   \n";
 testfftp << " 		//$fsdbDumpvars(1,test_DualECP); //top level signal                                                                     \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  initial begin\n";
 testfftp << "     $sdf_annotate(" << char_tmp <<"FFTP_pipe.sdf"<<char_tmp<<",u_FFTP);\n";
 testfftp << "  end                                                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		for(i=0;i<(BF_POINT_NUM);i=i+1) begin                                                                                   \n";
 testfftp << " 			temp[i] = INI_VALUE*i ; // (256/4)*i                                                                                \n";
 testfftp << " 			temp2[i] = INI_VALUE*i ; // (256/4)*i                                                                               \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 			ExtB0_D0_in = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in = Ext_B0R1_mem[j] ;                                                                                     \n";
 testfftp << " 			ExtB0_D2_in = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 			ExtB1_D0_in = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[4*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 4*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i,MulD0_out,4*i,golden_mem[4*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[4*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 4*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+1,MulD1_out,4*i+1,golden_mem[4*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[4*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 4*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+2,MulD2_out,4*i+2,golden_mem[4*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[4*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 4*i+3,MulD3_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 4*i+3,MulD3_out,4*i+3,golden_mem[4*i + 3]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<", error ) ;         \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_r8(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //                                                                                                                                       \n";
 testfftp << " //Date       : 2018/8/1                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                  << char_tmp << "                                                                                           \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux1.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_AGU.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Radix8_Pipe.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg2.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg3.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg4.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg4_2.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg5_1.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg5_2.v"         << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_NPipeReg1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_NPipeReg2.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_NPipeReg3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_ROMPipeReg1.v"        << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout2.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout4.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout5.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout6.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_CSAout7.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out0.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out1.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out2.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out3.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out4.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out5.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out6.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Sum8_out7.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod96.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod96PD.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ModMux.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_DC.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_WAddr.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA24.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA24clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA96.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA96clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA192.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA192clg.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_WD_buf.v"             << char_tmp << "                                                                                         \n";
 int SRAM_word_size;
 SRAM_word_size = fft_point / (2 * radix); // [ fft_point / (2 * radix) ] / 2

	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << (SRAM_word_size) <<"_128.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM1.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM2.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM3.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM1.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM2.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM3.v" << char_tmp << "\n";

 testfftp << "  `include "<< char_tmp << "Mux6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                    << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_BU_outpipe.v"            << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"        << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_InpipeReg.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul.v"                   << char_tmp << "                                                                                         \n";
 testfftp << "                                                                                                                          \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_orderROM_Pipe.v"      << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM2.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM3.v"           << char_tmp << "                                                                                         \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM2.v"          << char_tmp << "                                                                                         \n";
 if(8 * CP_width > 192)testfftp << "  `include "<< char_tmp << "ireorderROM3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                << char_tmp << "                                                                                         \n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM3.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM3.v"<< char_tmp << "\n";

 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 testfftp << " parameter CYCLE = 5 ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
// std::cout << "m: "     << m <<"\n";
 //std::cout << "phi_m: " << phi_m << "\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 8 ; // butterfly number of point                                                                    \n";
 double RR_w;
 long   G;
 long   RR_width;
 long   INI_VALUE;
 long   ADDR_VALUE;
 RR_w = log2(fft_point/radix);
 RR_width   = (long) RR_w;
 G          = fft_point /(radix * radix);
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 
 testfftp << " parameter RR_WIDTH = " << RR_width << "; //Rotate width = log_2(POINT_NUM/BF_POINT_NUM)                                                     \n";
 testfftp << " parameter G = " << G << "; // POINT_NUM/((BF_POINT_NUM)^2)                                                                          \n";
 testfftp << " parameter R = 8 ; // BF_POINT_NUM                                                                                            \n";
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)                                                                      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0 = "<< char_tmp << "./data/A_b0radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1 = "<< char_tmp << "./data/A_b0radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2 = "<< char_tmp << "./data/A_b0radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3 = "<< char_tmp << "./data/A_b0radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4 = "<< char_tmp << "./data/A_b0radix4.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5 = "<< char_tmp << "./data/A_b0radix5.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6 = "<< char_tmp << "./data/A_b0radix6.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7 = "<< char_tmp << "./data/A_b0radix7.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0 = "<< char_tmp << "./data/A_b1radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1 = "<< char_tmp << "./data/A_b1radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2 = "<< char_tmp << "./data/A_b1radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3 = "<< char_tmp << "./data/A_b1radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4 = "<< char_tmp << "./data/A_b1radix4.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5 = "<< char_tmp << "./data/A_b1radix5.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6 = "<< char_tmp << "./data/A_b1radix6.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7 = "<< char_tmp << "./data/A_b1radix7.txt" << char_tmp << ";  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " wire               MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] temp[0:BF_POINT_NUM-1] ;                                                                                  \n";
 testfftp << " reg  [P_WIDTH-1:0] temp2[0:BF_POINT_NUM-1] ;                                                                                 \n";
 testfftp << " reg  [P_WIDTH-1:0] inc ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDA ;                                                                                                   \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDB ;                                                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] Mul_Result_Golden[0:POINT_NUM-1] ;                                                                        \n";
 testfftp << " reg  [RR_WIDTH-1:0] BC ;                                                                                                     \n";
 testfftp << " reg                 BN ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef ,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin                                                                                                            \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.MulD4_out(MulD4_out),                                                                                          \n";
 testfftp << " 				.MulD5_out(MulD5_out),                                                                                          \n";
 testfftp << " 				.MulD6_out(MulD6_out),                                                                                          \n";
 testfftp << " 				.MulD7_out(MulD7_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 $fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 		//$fsdbDumpvars(3,test_FFTP) ;                                                                                          \n";
 testfftp << " 		// $fsdbDumpvars(3,test_FFTP); //top level signal                                                                       \n";
 testfftp << " 		//$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal                                                                                   \n";
 testfftp << " 		//$fsdbDumpvars(1,test_DualECP); //top level signal                                                                     \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		for(i=0;i<(BF_POINT_NUM);i=i+1) begin                                                                                   \n";
 testfftp << " 			temp[i] = INI_VALUE*i ; // (256/4)*i                                                                                \n";
 testfftp << " 			temp2[i] = INI_VALUE*i ; // (256/4)*i                                                                               \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 			ExtB0_D0_in = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in = Ext_B0R1_mem[j] ;                                                                                     \n";
 testfftp << " 			ExtB0_D2_in = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D4_in = Ext_B0R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D5_in = Ext_B0R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D6_in = Ext_B0R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D7_in = Ext_B0R7_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 			ExtB1_D0_in = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D4_in = Ext_B1R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D5_in = Ext_B1R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D6_in = Ext_B1R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D7_in = Ext_B1R7_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0 ;\n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[8*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 8*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i,MulD0_out,8*i,golden_mem[8*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[8*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 8*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+1,MulD1_out,8*i+1,golden_mem[8*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[8*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 8*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+2,MulD2_out,8*i+2,golden_mem[8*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[8*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 8*i+3,MulD3_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+3,MulD3_out,8*i+3,golden_mem[8*i + 3]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[8*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 8*i+4,MulD4_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+4,MulD4_out,8*i+4,golden_mem[8*i + 4]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[8*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 8*i+5,MulD5_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+5,MulD5_out,8*i+5,golden_mem[8*i + 5]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[8*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 8*i+6,MulD6_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+6,MulD6_out,8*i+6,golden_mem[8*i + 6]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[8*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 8*i+7,MulD7_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+7,MulD7_out,8*i+7,golden_mem[8*i + 7]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ;         \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_r8_R2P(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //                                                                                                                                       \n";
 testfftp << " //Date       : 2018/8/1                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                  << char_tmp << "                                                                                           \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux1.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_AGU.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BU.v"                    << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BU_S0.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Pipe.v"                  << char_tmp << "                                                                                         \n"; 
 testfftp << "  `include "<< char_tmp << "Radix8_Pipe.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R8_PipeReg1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg2.v"           << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R8_PipeReg3.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg4.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_PipeReg4_2.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R8_PipeReg5_1.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R8_PipeReg5_2.v"         << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "R8_NPipeReg1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_NPipeReg2.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_NPipeReg3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_ROMPipeReg1.v"        << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout0.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout1.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout2.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout3.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout4.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout5.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout6.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_CSAout7.v"          << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out0.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out1.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out2.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out3.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out4.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out5.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out6.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Sum8_out7.v"             << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Mod96.v"                 << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "Mod96PD.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ModMux.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_DC.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_WAddr.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                  << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA24.v"                 << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA24clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA64.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA64clg.v"              << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                 << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA96.v"                 << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA96clg.v"              << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA192.v"                << char_tmp << "                                                                                         \n";
 //testfftp << "  `include "<< char_tmp << "CLA192clg.v"             << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_WD_buf.v"             << char_tmp << "                                                                                         \n";
 int SRAM_word_size;
 SRAM_word_size = fft_point / (2 * radix); // [ fft_point / (2 * radix) ] / 2

	 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << (SRAM_word_size) <<"_128.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM1.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM2.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "ROM3.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM0.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM1.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM2.v" << char_tmp << "\n";
	 testfftp << "  `include "<< char_tmp << "IROM3.v" << char_tmp << "\n";

 testfftp << "  `include "<< char_tmp << "Mux6.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                    << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_BU_outpipe.v"            << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"        << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_InpipeReg.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "MulMod.v"                << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "Mul.v"                   << char_tmp << "                                                                                         \n";
 testfftp << "                                                                                                                          \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                  << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "R8_orderROM_Pipe.v"      << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM2.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM3.v"           << char_tmp << "                                                                                         \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM2.v"          << char_tmp << "                                                                                         \n";
 if(8 * CP_width > 192)testfftp << "  `include "<< char_tmp << "ireorderROM3.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"               << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                << char_tmp << "                                                                                         \n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b0ROM3.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM2.v"<< char_tmp << "\n";
	testfftp << "  `include "<< char_tmp << "H_b1ROM3.v"<< char_tmp << "\n";

 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 testfftp << " parameter CYCLE = 5 ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
// std::cout << "m: "     << m <<"\n";
 //std::cout << "phi_m: " << phi_m << "\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 8 ; // butterfly number of point                                                                    \n";
 double RR_w;
 long   G;
 long   RR_width;
 long   INI_VALUE;
 long   ADDR_VALUE;
 RR_w = log2(fft_point/radix);
 RR_width   = (long) RR_w;
 G          = fft_point /(radix * radix);
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 
 testfftp << " parameter RR_WIDTH = " << RR_width << "; //Rotate width = log_2(POINT_NUM/BF_POINT_NUM)                                                     \n";
 testfftp << " parameter G = " << G << "; // POINT_NUM/((BF_POINT_NUM)^2)                                                                          \n";
 testfftp << " parameter R = 8 ; // BF_POINT_NUM                                                                                            \n";
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)                                                                      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0 = "<< char_tmp << "./data/A_b0radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1 = "<< char_tmp << "./data/A_b0radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2 = "<< char_tmp << "./data/A_b0radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3 = "<< char_tmp << "./data/A_b0radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4 = "<< char_tmp << "./data/A_b0radix4.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5 = "<< char_tmp << "./data/A_b0radix5.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6 = "<< char_tmp << "./data/A_b0radix6.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7 = "<< char_tmp << "./data/A_b0radix7.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0 = "<< char_tmp << "./data/A_b1radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1 = "<< char_tmp << "./data/A_b1radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2 = "<< char_tmp << "./data/A_b1radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3 = "<< char_tmp << "./data/A_b1radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4 = "<< char_tmp << "./data/A_b1radix4.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5 = "<< char_tmp << "./data/A_b1radix5.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6 = "<< char_tmp << "./data/A_b1radix6.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7 = "<< char_tmp << "./data/A_b1radix7.txt" << char_tmp << ";  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " wire               MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] temp[0:BF_POINT_NUM-1] ;                                                                                  \n";
 testfftp << " reg  [P_WIDTH-1:0] temp2[0:BF_POINT_NUM-1] ;                                                                                 \n";
 testfftp << " reg  [P_WIDTH-1:0] inc ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDA ;                                                                                                   \n";
 testfftp << " reg  [P_WIDTH-1:0] MulDB ;                                                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] Mul_Result_Golden[0:POINT_NUM-1] ;                                                                        \n";
 testfftp << " reg  [RR_WIDTH-1:0] BC ;                                                                                                     \n";
 testfftp << " reg                 BN ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef ,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin                                                                                                            \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.MulD4_out(MulD4_out),                                                                                          \n";
 testfftp << " 				.MulD5_out(MulD5_out),                                                                                          \n";
 testfftp << " 				.MulD6_out(MulD6_out),                                                                                          \n";
 testfftp << " 				.MulD7_out(MulD7_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 $fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 		//$fsdbDumpvars(3,test_FFTP) ;                                                                                          \n";
 testfftp << " 		// $fsdbDumpvars(3,test_FFTP); //top level signal                                                                       \n";
 testfftp << " 		//$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal                                                                                   \n";
 testfftp << " 		//$fsdbDumpvars(1,test_DualECP); //top level signal                                                                     \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		for(i=0;i<(BF_POINT_NUM);i=i+1) begin                                                                                   \n";
 testfftp << " 			temp[i] = INI_VALUE*i ; // (256/4)*i                                                                                \n";
 testfftp << " 			temp2[i] = INI_VALUE*i ; // (256/4)*i                                                                               \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 			ExtB0_D0_in = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in = Ext_B0R1_mem[j] ;                                                                                     \n";
 testfftp << " 			ExtB0_D2_in = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D4_in = Ext_B0R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D5_in = Ext_B0R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D6_in = Ext_B0R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D7_in = Ext_B0R7_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 			ExtB1_D0_in = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D4_in = Ext_B1R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D5_in = Ext_B1R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D6_in = Ext_B1R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D7_in = Ext_B1R7_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0 ;\n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[8*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 8*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i,MulD0_out,8*i,golden_mem[8*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[8*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 8*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+1,MulD1_out,8*i+1,golden_mem[8*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[8*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 8*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+2,MulD2_out,8*i+2,golden_mem[8*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[8*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 8*i+3,MulD3_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+3,MulD3_out,8*i+3,golden_mem[8*i + 3]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[8*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 8*i+4,MulD4_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+4,MulD4_out,8*i+4,golden_mem[8*i + 4]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[8*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 8*i+5,MulD5_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+5,MulD5_out,8*i+5,golden_mem[8*i + 5]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[8*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 8*i+6,MulD6_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+6,MulD6_out,8*i+6,golden_mem[8*i + 6]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[8*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 8*i+7,MulD7_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+7,MulD7_out,8*i+7,golden_mem[8*i + 7]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ;         \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_syn_r8(){
     std::ofstream testfftp("./syn_tcl/test_FFTP.v");
     char char_tmp = 34; // ascii code 32 = 
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //Writer     : shi-yong wu                                                                                                  \n";
 testfftp << " //Date       : 2020/06/18                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank BFFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP_pipe_syn.v"         << char_tmp << "\n"; 
 int SRAM_word_size;
 SRAM_word_size = fft_point / (2 * radix); // [ fft_point / (2 * radix) ] / 2
 
 testfftp << "  `include "<< char_tmp << "SRAM_SP_" << (SRAM_word_size) <<"_128.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "ROM0.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "ROM1.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "ROM2.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "ROM3.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "IROM0.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "IROM1.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "IROM2.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "IROM3.v" << char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM2.v"           << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "reorderROM3.v"           << char_tmp << "                                                                                         \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"          << char_tmp << "                                                                                         \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM2.v"          << char_tmp << "                                                                                         \n";
 if(8 * CP_width > 192)testfftp << "  `include "<< char_tmp << "ireorderROM3.v"          << char_tmp << "                                                                                         \n";

 testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"<< char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"<< char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM2.v"<< char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM3.v"<< char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"<< char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"<< char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM2.v"<< char_tmp << "\n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM3.v"<< char_tmp << "\n";

 testfftp << "  `include "<< char_tmp << "/opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/Verilog/tsmc090.v"          << char_tmp << "\n";
 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 testfftp << " parameter CYCLE = 5 ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
// std::cout << "m: "     << m <<"\n";
 //std::cout << "phi_m: " << phi_m << "\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 8 ; // butterfly number of point                                                                    \n";
 double RR_w;
 long   G;
 long   RR_width;
 long   INI_VALUE;
 long   ADDR_VALUE;
 RR_w = log2(fft_point/radix);
 RR_width   = (long) RR_w;
 G          = fft_point /(radix * radix);
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 
 testfftp << " parameter RR_WIDTH = " << RR_width << "; //Rotate width = log_2(POINT_NUM/BF_POINT_NUM)                                                     \n";
 testfftp << " parameter G = " << G << "; // POINT_NUM/((BF_POINT_NUM)^2)                                                                          \n";
 testfftp << " parameter R = 8 ; // BF_POINT_NUM                                                                                            \n";
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)                                                                      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0 = "<< char_tmp << "./data/A_b0radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1 = "<< char_tmp << "./data/A_b0radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2 = "<< char_tmp << "./data/A_b0radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3 = "<< char_tmp << "./data/A_b0radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4 = "<< char_tmp << "./data/A_b0radix4.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5 = "<< char_tmp << "./data/A_b0radix5.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6 = "<< char_tmp << "./data/A_b0radix6.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7 = "<< char_tmp << "./data/A_b0radix7.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0 = "<< char_tmp << "./data/A_b1radix0.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1 = "<< char_tmp << "./data/A_b1radix1.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2 = "<< char_tmp << "./data/A_b1radix2.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3 = "<< char_tmp << "./data/A_b1radix3.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4 = "<< char_tmp << "./data/A_b1radix4.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5 = "<< char_tmp << "./data/A_b1radix5.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6 = "<< char_tmp << "./data/A_b1radix6.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7 = "<< char_tmp << "./data/A_b1radix7.txt" << char_tmp << ";  \n";
 testfftp << " \n";
 testfftp << " \n";
 testfftp << " wire             MulValid_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;\n";
 testfftp << "\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;\n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;\n";
 testfftp << " reg                ExtValid_in;\n";
 testfftp << " reg                rst_n ;\n";
 testfftp << " reg                clk ;\n";
 testfftp << "\n";
 testfftp << " reg  [P_WIDTH-1:0] temp[0:BF_POINT_NUM-1] ;\n";
 testfftp << " reg  [P_WIDTH-1:0] temp2[0:BF_POINT_NUM-1];\n";
 testfftp << " reg  [P_WIDTH-1:0] inc ;\n";
 testfftp << "\n";
 testfftp << " reg  [P_WIDTH-1:0] MulDA ;\n";
 testfftp << " reg  [P_WIDTH-1:0] MulDB ;\n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [P_WIDTH-1:0] Mul_Result_Golden[0:POINT_NUM-1] ;                                                                        \n";
 testfftp << " reg  [RR_WIDTH-1:0] BC ;                                                                                                     \n";
 testfftp << " reg                 BN ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin                                                                                                            \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),\n";
 testfftp << " 				.MulD0_out(MulD0_out),\n";
 testfftp << " 				.MulD1_out(MulD1_out),\n";
 testfftp << " 				.MulD2_out(MulD2_out),\n";
 testfftp << " 				.MulD3_out(MulD3_out),\n";
 testfftp << " 				.MulD4_out(MulD4_out),\n";
 testfftp << " 				.MulD5_out(MulD5_out),\n";
 testfftp << " 				.MulD6_out(MulD6_out),\n";
 testfftp << " 				.MulD7_out(MulD7_out),\n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),\n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),\n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),\n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),\n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),\n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),\n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),\n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),\n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),\n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),\n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),\n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),\n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),\n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),\n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),\n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),\n";
 testfftp << " 				.N_in(N_in),\n";
 testfftp << " 				.ExtValid_in(ExtValid_in),\n";
 testfftp << " 				.rst_n(rst_n),\n";
 testfftp << " 				.clk(clk)\n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 //$fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 		$fsdbDumpvars(3,test_FFTP) ;                                                                                          \n";
 testfftp << " 		// $fsdbDumpvars(3,test_FFTP); //top level signal                                                                       \n";
 testfftp << " 		//$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal                                                                                   \n";
 testfftp << " 		//$fsdbDumpvars(1,test_DualECP); //top level signal                                                                     \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  initial begin\n";
 testfftp << "     $sdf_annotate(" << char_tmp <<"FFTP_pipe.sdf"<<char_tmp<<",u_FFTP);\n";
 testfftp << "  end                                                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		for(i=0;i<(BF_POINT_NUM);i=i+1) begin                                                                                   \n";
 testfftp << " 			temp[i] = INI_VALUE*i ; // (256/4)*i                                                                                \n";
 testfftp << " 			temp2[i] = INI_VALUE*i ; // (256/4)*i                                                                               \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 			ExtB0_D0_in = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in = Ext_B0R1_mem[j] ;                                                                                     \n";
 testfftp << " 			ExtB0_D2_in = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D4_in = Ext_B0R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D5_in = Ext_B0R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D6_in = Ext_B0R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D7_in = Ext_B0R7_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 			ExtB1_D0_in = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D4_in = Ext_B1R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D5_in = Ext_B1R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D6_in = Ext_B1R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D7_in = Ext_B1R7_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[8*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 8*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i,MulD0_out,8*i,golden_mem[8*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[8*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 8*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+1,MulD1_out,8*i+1,golden_mem[8*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[8*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 8*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+2,MulD2_out,8*i+2,golden_mem[8*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[8*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 8*i+3,MulD3_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+3,MulD3_out,8*i+3,golden_mem[8*i + 3]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[8*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 8*i+4,MulD4_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+4,MulD3_out,8*i+4,golden_mem[8*i + 4]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[8*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 8*i+5,MulD5_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+5,MulD5_out,8*i+5,golden_mem[8*i + 5]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[8*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 8*i+6,MulD6_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+6,MulD6_out,8*i+6,golden_mem[8*i + 6]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[8*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 8*i+7,MulD7_out) ;                                \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 8*i+7,MulD7_out,8*i+7,golden_mem[8*i + 7]) ;         \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                                                                                                                    \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<", error ) ;         \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_r16(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //Writer     : Shi-Yong Wu                                                                                                  \n";
 testfftp << " //Date       : 2020/6/20                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                  << char_tmp << "      \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux1.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_AGU.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Radix16_Pipe.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg1.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg2.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg3.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4_2.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg5_1.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg5_2.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg1.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg2.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg3.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_ROMPipeReg1.v"        << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout0.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout1.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout2.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout3.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout4.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout5.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout6.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout7.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout8.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout9.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout10.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout11.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout12.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout13.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout14.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout15.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out0.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out1.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out2.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out3.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out4.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out5.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out6.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out7.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out8.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out9.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out10.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out11.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out12.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out13.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out14.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out15.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mod96.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mod96PD.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mod192.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"              << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "ModMux.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_DC.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_WAddr.v"              << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                  << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA6.v"                  << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"              << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA24.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA24clg.v"              << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"              << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA64.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"              << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg.v"              << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"              << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA96.v"                 << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA96clg.v"              << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA192.v"                << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA192clg.v"             << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                  << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "R16_WD_buf.v"             << char_tmp << "  \n";

 //------------------------------------------------------------------------------- 
 //Radix-16 FFT twiddle word size
 //only ROM0 bit size is  64 bits;
 //other ROMs bit size = 128
 //because Twiddle factor radix0  is zero
 int r16_twiddleROM_worde_size;
 int SRAM_word_size;
 r16_twiddleROM_worde_size = fft_point / radix;
 SRAM_word_size  = (fft_point / (2*radix));
 
 testfftp << "  `include "<< char_tmp << "SRAM_SP_" <<   SRAM_word_size            <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM0_"<< (SRAM_word_size * 2) <<"_64.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM1_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM2_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM3_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM4_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM5_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM6_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM7_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR0_"<<  (SRAM_word_size * 2) <<"_64.v"            << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR1_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR2_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR3_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR4_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR5_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR6_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR7_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 //--------------------------------------------------------------------------------
 testfftp << "                                                                      \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                   << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "Mux6.v"                   << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                     << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "R16_BU_outpipe.v"         << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "R16_orderROM_Pipe.v"         << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"         << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                 << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "R16_InpipeReg.v"          << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "MulMod.v"                 << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "Mul.v"                    << char_tmp << " \n";
 testfftp << "                                                                      \n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM2.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM3.v"            << char_tmp << "  \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM2.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM3.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"                << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM2.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM3.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM4.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM5.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM6.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM7.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM2.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM3.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM4.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM5.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM6.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM7.v"                   << char_tmp << "  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 
 double period;
 period =  ((1 / (double)Freq) * 1000);
 
 testfftp << " parameter CYCLE = "<< period <<" ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
 //std::cout << "m: " << m <<"\n";
 //std::cout << "phi_m: " << phi_m <<"\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 16 ; // butterfly number of point                                                                    \n";
 long   INI_VALUE;
 long   ADDR_VALUE;
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);

 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))  \n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0  = "<< char_tmp << "./data/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1  = "<< char_tmp << "./data/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2  = "<< char_tmp << "./data/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3  = "<< char_tmp << "./data/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4  = "<< char_tmp << "./data/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5  = "<< char_tmp << "./data/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6  = "<< char_tmp << "./data/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7  = "<< char_tmp << "./data/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0  = "<< char_tmp << "./data/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1  = "<< char_tmp << "./data/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2  = "<< char_tmp << "./data/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3  = "<< char_tmp << "./data/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4  = "<< char_tmp << "./data/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5  = "<< char_tmp << "./data/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6  = "<< char_tmp << "./data/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7  = "<< char_tmp << "./data/A_b1radix7.txt"  << char_tmp << ";  \n";
 testfftp << " \n";
 testfftp << " \n";
 testfftp << " wire                MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD8_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD9_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD10_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD11_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD12_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD13_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD14_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD15_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.MulD4_out(MulD4_out),                                                                                          \n";
 testfftp << " 				.MulD5_out(MulD5_out),                                                                                          \n";
 testfftp << " 				.MulD6_out(MulD6_out),                                                                                          \n";
 testfftp << " 				.MulD7_out(MulD7_out),                                                                                          \n";
 testfftp << " 				.MulD8_out(MulD8_out),                                                                                          \n";
 testfftp << " 				.MulD9_out(MulD9_out),                                                                                          \n";
 testfftp << " 				.MulD10_out(MulD10_out),                                                                                          \n";
 testfftp << " 				.MulD11_out(MulD11_out),                                                                                          \n";
 testfftp << " 				.MulD12_out(MulD12_out),                                                                                          \n";
 testfftp << " 				.MulD13_out(MulD13_out),                                                                                          \n";
 testfftp << " 				.MulD14_out(MulD14_out),                                                                                          \n";
 testfftp << " 				.MulD15_out(MulD15_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 $fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem[j] ;                                                                                       \n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                         \n";
 testfftp << " 			                                                                                                               \n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0;                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[16*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 16*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i,MulD0_out,16*i,golden_mem[16*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[16*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out,16*i+1,golden_mem[16*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[16*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out,16*i+2,golden_mem[16*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[16*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out,16*i+3,golden_mem[16*i + 3]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[16*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out,16*i+4,golden_mem[16*i + 4]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[16*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out,16*i+5,golden_mem[16*i + 5]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[16*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out,16*i+6,golden_mem[16*i + 6]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[16*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out,16*i+7,golden_mem[16*i + 7]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD8_out == golden_mem[16*i+8]) $display("<<char_tmp << "MulD8_out[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD8_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out,16*i+8,golden_mem[16*i + 8]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD9_out == golden_mem[16*i+9]) $display("<<char_tmp << "MulD9_out[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD9_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out,16*i+9,golden_mem[16*i + 9]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD10_out == golden_mem[16*i+10]) $display("<<char_tmp << "MulD10_out[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD10_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out,16*i+10,golden_mem[16*i + 10]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD11_out == golden_mem[16*i+11]) $display("<<char_tmp << "MulD11_out[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD11_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out,16*i+11,golden_mem[16*i + 11]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD12_out == golden_mem[16*i+12]) $display("<<char_tmp << "MulD12_out[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD12_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out,16*i+12,golden_mem[16*i + 12]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD13_out == golden_mem[16*i+13]) $display("<<char_tmp << "MulD13_out[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD13_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out,16*i+13,golden_mem[16*i + 13]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD14_out == golden_mem[16*i+14]) $display("<<char_tmp << "MulD14_out[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD14_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out,16*i+14,golden_mem[16*i + 14]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD15_out == golden_mem[16*i+15]) $display("<<char_tmp << "MulD15_out[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD15_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out,16*i+15,golden_mem[16*i + 15]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_r16_R2P(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //Writer     : Shi-Yong Wu                                                                                                  \n";
 testfftp << " //Date       : 2020/6/20                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                  << char_tmp << "      \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux1.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_AGU.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "BU.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "BU_S0.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Pipe.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Radix16_Pipe.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg1.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg2.v"           << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg3.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4_2.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg5_1.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg5_2.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_NPipeReg1.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg2.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg3.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_ROMPipeReg1.v"        << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout0.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout1.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout2.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout3.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout4.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout5.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout6.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout7.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout8.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout9.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout10.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout11.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout12.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout13.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout14.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout15.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out0.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out1.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out2.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out3.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out4.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out5.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out6.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out7.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out8.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out9.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out10.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out11.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out12.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out13.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out14.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out15.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Mod96.v"                 << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Mod96PD.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mod192.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"              << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "ModMux.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_DC.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_WAddr.v"              << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                  << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA6.v"                  << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"              << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA24.v"                 << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA24clg.v"              << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"              << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA64.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"              << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA64clg.v"              << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"              << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA96.v"                 << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA96clg.v"              << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA192.v"                << char_tmp << "  \n";
 //testfftp << "  `include "<< char_tmp << "CLA192clg.v"             << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                  << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "R16_WD_buf.v"             << char_tmp << "  \n";

 //------------------------------------------------------------------------------- 
 //Radix-16 FFT twiddle word size
 //only ROM0 bit size is  64 bits;
 //other ROMs bit size = 128
 //because Twiddle factor radix0  is zero
 int r16_twiddleROM_worde_size;
 int SRAM_word_size;
 r16_twiddleROM_worde_size = fft_point / radix;
 SRAM_word_size  = (fft_point / (2*radix));
 
 testfftp << "  `include "<< char_tmp << "SRAM_SP_" <<   SRAM_word_size            <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM0_"<< (SRAM_word_size * 2) <<"_64.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM1_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM2_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM3_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM4_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM5_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM6_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM7_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR0_"<<  (SRAM_word_size * 2) <<"_64.v"            << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR1_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR2_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR3_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR4_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR5_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR6_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR7_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 //--------------------------------------------------------------------------------
 testfftp << "                                                                      \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                   << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "Mux6.v"                   << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                     << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "R16_BU_outpipe.v"         << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "R16_orderROM_Pipe.v"         << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"         << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                 << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "R16_InpipeReg.v"          << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "MulMod.v"                 << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "Mul.v"                    << char_tmp << " \n";
 testfftp << "                                                                      \n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM2.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM3.v"            << char_tmp << "  \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM2.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM3.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"                << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM2.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM3.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM4.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM5.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM6.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM7.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM2.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM3.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM4.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM5.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM6.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM7.v"                   << char_tmp << "  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 
 double period;
 period =  ((1 / (double)Freq) * 1000);
 
 testfftp << " parameter CYCLE = "<< period <<" ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
 //std::cout << "m: " << m <<"\n";
 //std::cout << "phi_m: " << phi_m <<"\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 16 ; // butterfly number of point                                                                    \n";
 long   INI_VALUE;
 long   ADDR_VALUE;
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);

 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))  \n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0  = "<< char_tmp << "./data/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1  = "<< char_tmp << "./data/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2  = "<< char_tmp << "./data/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3  = "<< char_tmp << "./data/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4  = "<< char_tmp << "./data/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5  = "<< char_tmp << "./data/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6  = "<< char_tmp << "./data/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7  = "<< char_tmp << "./data/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0  = "<< char_tmp << "./data/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1  = "<< char_tmp << "./data/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2  = "<< char_tmp << "./data/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3  = "<< char_tmp << "./data/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4  = "<< char_tmp << "./data/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5  = "<< char_tmp << "./data/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6  = "<< char_tmp << "./data/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7  = "<< char_tmp << "./data/A_b1radix7.txt"  << char_tmp << ";  \n";
 testfftp << " \n";
 testfftp << " \n";
 testfftp << " wire                MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD8_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD9_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD10_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD11_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD12_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD13_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD14_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD15_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.MulD4_out(MulD4_out),                                                                                          \n";
 testfftp << " 				.MulD5_out(MulD5_out),                                                                                          \n";
 testfftp << " 				.MulD6_out(MulD6_out),                                                                                          \n";
 testfftp << " 				.MulD7_out(MulD7_out),                                                                                          \n";
 testfftp << " 				.MulD8_out(MulD8_out),                                                                                          \n";
 testfftp << " 				.MulD9_out(MulD9_out),                                                                                          \n";
 testfftp << " 				.MulD10_out(MulD10_out),                                                                                          \n";
 testfftp << " 				.MulD11_out(MulD11_out),                                                                                          \n";
 testfftp << " 				.MulD12_out(MulD12_out),                                                                                          \n";
 testfftp << " 				.MulD13_out(MulD13_out),                                                                                          \n";
 testfftp << " 				.MulD14_out(MulD14_out),                                                                                          \n";
 testfftp << " 				.MulD15_out(MulD15_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 $fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D7_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem[j] ;                                                                                       \n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                         \n";
 testfftp << " 			                                                                                                               \n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem[j] ;                                                                                               \n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0;                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[16*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 16*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i,MulD0_out,16*i,golden_mem[16*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[16*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out,16*i+1,golden_mem[16*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[16*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out,16*i+2,golden_mem[16*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[16*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out,16*i+3,golden_mem[16*i + 3]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[16*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out,16*i+4,golden_mem[16*i + 4]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[16*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out,16*i+5,golden_mem[16*i + 5]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[16*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out,16*i+6,golden_mem[16*i + 6]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[16*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out,16*i+7,golden_mem[16*i + 7]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD8_out == golden_mem[16*i+8]) $display("<<char_tmp << "MulD8_out[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD8_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out,16*i+8,golden_mem[16*i + 8]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD9_out == golden_mem[16*i+9]) $display("<<char_tmp << "MulD9_out[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD9_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out,16*i+9,golden_mem[16*i + 9]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD10_out == golden_mem[16*i+10]) $display("<<char_tmp << "MulD10_out[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD10_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out,16*i+10,golden_mem[16*i + 10]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD11_out == golden_mem[16*i+11]) $display("<<char_tmp << "MulD11_out[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD11_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out,16*i+11,golden_mem[16*i + 11]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD12_out == golden_mem[16*i+12]) $display("<<char_tmp << "MulD12_out[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD12_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out,16*i+12,golden_mem[16*i + 12]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD13_out == golden_mem[16*i+13]) $display("<<char_tmp << "MulD13_out[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD13_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out,16*i+13,golden_mem[16*i + 13]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD14_out == golden_mem[16*i+14]) $display("<<char_tmp << "MulD14_out[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD14_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out,16*i+14,golden_mem[16*i + 14]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD15_out == golden_mem[16*i+15]) $display("<<char_tmp << "MulD15_out[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD15_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out,16*i+15,golden_mem[16*i + 15]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";

 
 testfftp.close();
}
void FFTC::testfftp_syn_r16(){
     std::ofstream testfftp("./syn_tcl/test_FFTP.v");
     char char_tmp = 34; // ascii code 32 = 
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //Writer     : shiyong wu                                                                                                  \n";
 testfftp << " //Date       : 2020/06/18                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank BFFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "FFTP_pipe_syn.v"         << char_tmp << "      \n";
 //------------------------------------------------------------------------------- 
 //Radix-16 FFT twiddle word size
 //only ROM0 bit size is  64 bits;
 //other ROMs bit size = 128
 //because Twiddle factor radix0  is zero
 int r16_twiddleROM_worde_size;
 int SRAM_word_size;
 r16_twiddleROM_worde_size = fft_point / radix;
 SRAM_word_size  = (fft_point / (2*radix));
 
 testfftp << "  `include "<< char_tmp << "SRAM_SP_" <<   SRAM_word_size            <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM0_"<< (SRAM_word_size * 2) <<"_64.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM1_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM2_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM3_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM4_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM5_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM6_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "ROM7_"<< (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR0_"<<  (SRAM_word_size * 2) <<"_64.v"            << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR1_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR2_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR3_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR4_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR5_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR6_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 testfftp << "  `include "<< char_tmp << "IFFTR7_"<<  (SRAM_word_size * 2) <<"_128.v"           << char_tmp << " \n";
 //--------------------------------------------------------------------------------
 testfftp << "  `include "<< char_tmp << "/opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/Verilog/tsmc090.v"          << char_tmp << "\n";
 testfftp << "                                                                      \n";
 testfftp << "  `include "<< char_tmp << "reorderROM0.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM1.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM2.v"            << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "reorderROM3.v"            << char_tmp << "  \n";
 
 testfftp << "  `include "<< char_tmp << "ireorderROM0.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM1.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM2.v"           << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "ireorderROM3.v"           << char_tmp << "  \n";
 
 testfftp << "  `include "<< char_tmp << "H_b0ROM0.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM1.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM2.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM3.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM4.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM5.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM6.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b0ROM7.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM0.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM1.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM2.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM3.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM4.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM5.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM6.v"                   << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "H_b1ROM7.v"                   << char_tmp << "  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " `timescale 1 ns/1 ps                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " module test_FFTP ;                                                                                                           \n";
 
 double period;
 period =  ((1 / (double)Freq) * 1000);
 
 testfftp << " parameter CYCLE = "<< period <<" ;                                                                                                       \n";
 testfftp << " parameter P_WIDTH   = 64 ;  \n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
 //std::cout << "m: " << m <<"\n";
 //std::cout << "phi_m: " << phi_m <<"\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width << ";  // original prime or small prime		2020/04/09	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                                                                        \n";
 testfftp << " parameter BF_POINT_NUM = 16 ; // butterfly number of point                                                                    \n";
 long   INI_VALUE;
 long   ADDR_VALUE;
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
  testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)                                                                      \n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))                                                                   \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";  \n";
 testfftp << " parameter A_B0R0  = "<< char_tmp << "./data/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1  = "<< char_tmp << "./data/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2  = "<< char_tmp << "./data/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3  = "<< char_tmp << "./data/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4  = "<< char_tmp << "./data/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5  = "<< char_tmp << "./data/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6  = "<< char_tmp << "./data/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7  = "<< char_tmp << "./data/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0  = "<< char_tmp << "./data/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1  = "<< char_tmp << "./data/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2  = "<< char_tmp << "./data/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3  = "<< char_tmp << "./data/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4  = "<< char_tmp << "./data/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5  = "<< char_tmp << "./data/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6  = "<< char_tmp << "./data/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7  = "<< char_tmp << "./data/A_b1radix7.txt"  << char_tmp << ";  \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " wire                MulValid_out ;                                                                                            \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD8_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD9_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD10_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD11_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD12_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD13_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD14_out ;                                                                                              \n";
 testfftp << " wire [CP_WIDTH-1:0] MulD15_out ;                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;                                                                                            \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;                                                                                            \n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;                                                                                                    \n";
 testfftp << " reg                ExtValid_in ;                                                                                             \n";
 testfftp << " reg                rst_n ;                                                                                                   \n";
 testfftp << " reg                clk ;                                                                                                     \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];                                                                               \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " integer            i, j ,k ,ef,error;                                                                                             \n";
 testfftp << " integer            gd; // golden_data                                                                                        \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //read file                                                                                                              \n";
 testfftp << "     initial begin \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //golden data                                                                                                        \n";
 testfftp << "         k = 0;                                                                                                               \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin                                                                                                    \n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;                                                                                                         \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "         while(!$feof(gd))begin                                                                                               \n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;                                                                                                      \n";
 testfftp << "         end                                                                                                                  \n";
 testfftp << "     end                                                                                                                      \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	//                                                                                                                          \n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),                                                                                    \n";
 testfftp << " 				.MulD0_out(MulD0_out),                                                                                          \n";
 testfftp << " 				.MulD1_out(MulD1_out),                                                                                          \n";
 testfftp << " 				.MulD2_out(MulD2_out),                                                                                          \n";
 testfftp << " 				.MulD3_out(MulD3_out),                                                                                          \n";
 testfftp << " 				.MulD4_out(MulD4_out),                                                                                          \n";
 testfftp << " 				.MulD5_out(MulD5_out),                                                                                          \n";
 testfftp << " 				.MulD6_out(MulD6_out),                                                                                          \n";
 testfftp << " 				.MulD7_out(MulD7_out),                                                                                          \n";
 testfftp << " 				.MulD8_out(MulD8_out),                                                                                          \n";
 testfftp << " 				.MulD9_out(MulD9_out),                                                                                          \n";
 testfftp << " 				.MulD10_out(MulD10_out),                                                                                          \n";
 testfftp << " 				.MulD11_out(MulD11_out),                                                                                          \n";
 testfftp << " 				.MulD12_out(MulD12_out),                                                                                          \n";
 testfftp << " 				.MulD13_out(MulD13_out),                                                                                          \n";
 testfftp << " 				.MulD14_out(MulD14_out),                                                                                          \n";
 testfftp << " 				.MulD15_out(MulD15_out),                                                                                          \n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),                                                                                      \n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),                                                                                      \n";
 testfftp << " 				.N_in(N_in),                                                                                                    \n";
 testfftp << " 				.ExtValid_in(ExtValid_in),                                                                                      \n";
 testfftp << " 				.rst_n(rst_n),                                                                                                  \n";
 testfftp << " 				.clk(clk)                                                                                                       \n";
 testfftp << " 				) ;                                                                                                             \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;                                                                                            \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "     //FSDB                                                                                                                   \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		 $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << " 		 //$fsdbDumpvars ;                                                                                                        \n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << " 		$fsdbDumpvars(3,test_FFTP) ;                                                                                          \n";
 testfftp << " 		// $fsdbDumpvars(3,test_FFTP); //top level signal                                                                       \n";
 testfftp << " 		//$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal                                                         \n";
 testfftp << " 		//$fsdbDumpvars(1,test_DualECP); //top level signal                                                                     \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  initial  begin\n";
 testfftp << "     $sdf_annotate(" << char_tmp <<"FFTP_pipe.sdf"<<char_tmp<<",u_FFTP);\n";
 testfftp << "  end\n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	initial begin                                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		clk = 1 ;                                                                                                               \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;                                                                                          \n";
 testfftp << " 		ExtB0_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB0_D7_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D8_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D9_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D10_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D11_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D12_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D13_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D14_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB0_D15_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D0_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D1_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D2_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D3_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D4_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D5_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D6_in = 0 ;                                                                                                       \n";
 testfftp << " 		ExtB1_D7_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D8_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D9_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D10_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D11_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D12_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D13_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D14_in = 0 ;                                                                                                       \n";
 //testfftp << " 		ExtB1_D15_in = 0 ;                                                                                                       \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << "      #(CYCLE)                                                                                                                \n";
 testfftp << " 		rst_n = 0 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(2*CYCLE)                                                                                                              \n";
 testfftp << " 		ExtValid_in = 1 ;                                                                                                       \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(0.1*CYCLE)                                                                                                            \n";
 testfftp << " 		// Load parameters                                                                                                      \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		//---test Mul all 1-----------------------                                                                              \n";
 testfftp << " 		// address=0~31                                                                                                         \n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin                                                                                       \n";
 testfftp << " 			#(CYCLE)                                                                                                            \n";
 testfftp << "          ExtB0_D0_in  = Ext_B0R0_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem[j] ;                                                                                       \n";
 testfftp << "          ExtB0_D2_in  = Ext_B0R2_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB0_D3_in  = Ext_B0R3_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB0_D4_in  = Ext_B0R4_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB0_D5_in  = Ext_B0R5_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB0_D6_in  = Ext_B0R6_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB0_D7_in  = Ext_B0R7_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D8_in  = Ext_B0R8_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D9_in  = Ext_B0R9_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D10_in = Ext_B0R10_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D11_in = Ext_B0R11_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D12_in = Ext_B0R12_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D13_in = Ext_B0R13_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D14_in = Ext_B0R14_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB0_D15_in = Ext_B0R15_mem[j] ;                                                                                               \n";
 testfftp << "                                                                                                                         \n";
 testfftp << "                                                                                                                         \n";
 testfftp << "          ExtB1_D0_in  = Ext_B1R0_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB1_D1_in  = Ext_B1R1_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB1_D2_in  = Ext_B1R2_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB1_D3_in  = Ext_B1R3_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB1_D4_in  = Ext_B1R4_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB1_D5_in  = Ext_B1R5_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB1_D6_in  = Ext_B1R6_mem[j] ;                                                                                               \n";
 testfftp << "          ExtB1_D7_in  = Ext_B1R7_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D8_in  = Ext_B1R8_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D9_in  = Ext_B1R9_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D10_in = Ext_B1R10_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D11_in = Ext_B1R11_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D12_in = Ext_B1R12_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D13_in = Ext_B1R13_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D14_in = Ext_B1R14_mem[j] ;                                                                                               \n";
 //testfftp << "          ExtB1_D15_in = Ext_B1R15_mem[j] ;                                                                                               \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		end		                                                                                                                \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		//                                                                                                                      \n";
 testfftp << " 		#(CYCLE)                                                                                                                \n";
 testfftp << " 		ExtValid_in = 0 ;                                                                                                       \n";
 testfftp << " 		error = 0;                                                                                                                        \n";
 testfftp << " 		///*                                                                                                                    \n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 if( fft_point == 8192){
    testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";	
 }
 if( fft_point == 16384){
	 testfftp << " 		@(posedge clk)                                                                                                          \n";
	 testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
 }
 if( fft_point == 32768){
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
 }
 if( fft_point == 65536){
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
	testfftp << " 		@(posedge clk)                                                                                                          \n";
 }
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[16*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 16*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i,MulD0_out,16*i,golden_mem[16*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[16*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out,16*i+1,golden_mem[16*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[16*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out,16*i+2,golden_mem[16*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[16*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out,16*i+3,golden_mem[16*i + 3]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[16*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out,16*i+4,golden_mem[16*i + 4]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[16*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out,16*i+5,golden_mem[16*i + 5]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[16*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out,16*i+6,golden_mem[16*i + 6]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[16*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out,16*i+7,golden_mem[16*i + 7]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD8_out == golden_mem[16*i+8]) $display("<<char_tmp << "MulD8_out[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD8_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out,16*i+8,golden_mem[16*i + 8]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD9_out == golden_mem[16*i+9]) $display("<<char_tmp << "MulD9_out[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD9_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out,16*i+9,golden_mem[16*i + 9]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD10_out == golden_mem[16*i+10]) $display("<<char_tmp << "MulD10_out[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD10_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out,16*i+10,golden_mem[16*i + 10]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD11_out == golden_mem[16*i+11]) $display("<<char_tmp << "MulD11_out[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD11_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out,16*i+11,golden_mem[16*i + 11]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD12_out == golden_mem[16*i+12]) $display("<<char_tmp << "MulD12_out[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD12_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out,16*i+12,golden_mem[16*i + 12]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD13_out == golden_mem[16*i+13]) $display("<<char_tmp << "MulD13_out[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD13_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out,16*i+13,golden_mem[16*i + 13]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD14_out == golden_mem[16*i+14]) $display("<<char_tmp << "MulD14_out[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD14_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out,16*i+14,golden_mem[16*i + 14]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD15_out == golden_mem[16*i+15]) $display("<<char_tmp << "MulD15_out[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD15_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out,16*i+15,golden_mem[16*i + 15]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";
 
 testfftp.close();	
	
}
void FFTC::testfftp_Reconfigure_r16(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //Writer     : Shi-Yong Wu                                                                                                  \n";
 testfftp << " //Date       : 2020/6/20                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                     << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                   << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA6.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA24.v"                  << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA24clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA64.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA64clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA96.v"                  << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA96clg.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA192.v"                 << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CLA192clg.v"              << char_tmp << "    \n"; 
 //                                                                                     
 
 //testfftp << "  `include "<< char_tmp << "CSM_4096.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_8192.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_16384.v"              << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_32768.v"              << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_65536.v"              << char_tmp << "    \n";
 //                                                                 
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Config_Reg.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"         << char_tmp << "    \n";
 
 testfftp << "  `include "<< char_tmp << "MAMux_HSRAM.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MAMux_RESRAM.v"           << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Mod96.v"                  << char_tmp << "    \n"; 
 //testfftp << "  `include "<< char_tmp << "Mod96PD.v"                << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "Mod192.v"                 << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"               << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "ModMux.v"                 << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "Mul.v"                    << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                  << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "MulMod.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"              << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"            << char_tmp << "    \n";
 //                                                                 
 testfftp << "  `include "<< char_tmp << "Mux1.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux6.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_AGU.v"                << char_tmp << "    \n";
 //
 
 //testfftp << "  `include "<< char_tmp << "R16_AGU_4096.v"           << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_8192.v"           << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_16384.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_32768.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_65536.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_BU_outpipe.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_DC.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_InpipeReg.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_NPipeReg1.v"          << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg2.v"          << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg3.v"          << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_orderROM_Pipe.v"      << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg1.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg2.v"           << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg3.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4_2.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg5_1.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_PipeReg5_2.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_ROMPipeReg1.v"        << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_WAddr.v"              << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_WD_buf.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "BU_S0.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "BU.v"                     << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Pipe.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Radix16_Pipe.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                 << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout0.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout1.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout2.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout3.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout4.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout5.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout6.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout7.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout8.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout9.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout10.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout11.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout12.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout13.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout14.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_CSAout15.v"         << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out0.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out1.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out2.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out3.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out4.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out5.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out6.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out7.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out8.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out9.v"             << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out10.v"            << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out11.v"            << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out12.v"            << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out13.v"            << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out14.v"            << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "Sum16_out15.v"            << char_tmp << "    \n";
 //------------------------------------------------------------------------------- 
 testfftp << "  `include "<< char_tmp << "SRAM_SP_2048_64.v"        << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "SRAM_SP_2048_128.v"        << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM0_4096_64.v"            << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM1_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM2_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM3_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM4_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM5_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM6_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM7_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR0_4096_64.v"          << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR1_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR2_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR3_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR4_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR5_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR6_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR7_4096_128.v"         << char_tmp << "   \n";
 //--------------------------------------------------------------------------------
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"                << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                 << char_tmp << "  \n";
 testfftp << "\n";
 testfftp << " `timescale 1 ns/1 ps\n";
 testfftp << "\n";
 testfftp << " module test_FFTP ;\n";
 
 double period;
 period =  ((1 / (double)Freq) * 1000);
 
 testfftp << " parameter CYCLE     = "<< period <<"  ;\n";
 testfftp << " parameter P_WIDTH   = 64 ;\n";
 testfftp << " parameter SD_WIDTH  = 128;\n";
 testfftp << " parameter A_WIDTH   = 11 ;\n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
 //std::cout << "m: " << m <<"\n";
 //std::cout << "phi_m: " << phi_m <<"\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width  << ";  // original prime or small prime		2020/04/09	\n";
 testfftp << " parameter Pre_WIDTH = " << PRE_width << ";  	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                          \n";
 testfftp << " parameter BF_POINT_NUM = 16 ; // butterfly number of point                                   \n";
 long   INI_VALUE;
 long   ADDR_VALUE;
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)\n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))\n";
 testfftp << "                                                                                 \n";
 testfftp << " parameter H_B0S0  = "<< char_tmp << "./data/H_b0SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S1  = "<< char_tmp << "./data/H_b0SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S2  = "<< char_tmp << "./data/H_b0SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S3  = "<< char_tmp << "./data/H_b0SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S4  = "<< char_tmp << "./data/H_b0SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S5  = "<< char_tmp << "./data/H_b0SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S6  = "<< char_tmp << "./data/H_b0SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S7  = "<< char_tmp << "./data/H_b0SRAM7.txt"   << char_tmp << ";  \n";
 testfftp << "                                                                                 \n";
 testfftp << " parameter H_B1S0  = "<< char_tmp << "./data/H_b1SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S1  = "<< char_tmp << "./data/H_b1SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S2  = "<< char_tmp << "./data/H_b1SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S3  = "<< char_tmp << "./data/H_b1SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S4  = "<< char_tmp << "./data/H_b1SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S5  = "<< char_tmp << "./data/H_b1SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S6  = "<< char_tmp << "./data/H_b1SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S7  = "<< char_tmp << "./data/H_b1SRAM7.txt"   << char_tmp << ";  \n"; 
 testfftp << "                                                                                 \n";
 testfftp << " parameter REORD_S0  = "<< char_tmp << "./data/Reorder_SRAM0.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S1  = "<< char_tmp << "./data/Reorder_SRAM1.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S2  = "<< char_tmp << "./data/Reorder_SRAM2.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S3  = "<< char_tmp << "./data/Reorder_SRAM3.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S0 = "<< char_tmp << "./data/IReorder_SRAM0.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S1 = "<< char_tmp << "./data/IReorder_SRAM1.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S2 = "<< char_tmp << "./data/IReorder_SRAM2.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S3 = "<< char_tmp << "./data/IReorder_SRAM3.txt"  << char_tmp << ";\n"; 
 testfftp << "                                                                                 \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";\n";
 testfftp << " parameter A_B0R0  = "<< char_tmp << "./data/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1  = "<< char_tmp << "./data/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2  = "<< char_tmp << "./data/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3  = "<< char_tmp << "./data/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4  = "<< char_tmp << "./data/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5  = "<< char_tmp << "./data/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6  = "<< char_tmp << "./data/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7  = "<< char_tmp << "./data/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0  = "<< char_tmp << "./data/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1  = "<< char_tmp << "./data/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2  = "<< char_tmp << "./data/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3  = "<< char_tmp << "./data/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4  = "<< char_tmp << "./data/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5  = "<< char_tmp << "./data/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6  = "<< char_tmp << "./data/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7  = "<< char_tmp << "./data/A_b1radix7.txt"  << char_tmp << ";  \n";
 testfftp << " \n";
 testfftp << " \n";
 testfftp << " wire                MulValid_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD8_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD9_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD10_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD11_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD12_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD13_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD14_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD15_out ;\n";
 testfftp << "\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;\n";

 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;\n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;         \n";
 testfftp << " reg                ExtValid_in ;  \n";
 testfftp << " //Reconfigurable data in \n";
 testfftp << "\n";
 testfftp << " // Mixed_radix_sel_in    \n";
 testfftp << " // 2'd0: radix-2         \n";
 testfftp << " // 2'd1: radix-4         \n";
 testfftp << " // 2'd2: radix-8         \n";
 testfftp << " // Point_sel_in          \n";
 testfftp << " // 3'd0 : 65536 Point    \n";
 testfftp << " // 3'd1 : 32768 Point    \n";
 testfftp << " // 3'd2 : 16384 Point    \n";
 testfftp << " // 3'd3 :  8192 Point    \n";
 testfftp << " // 3'd4 :  4096 Point    \n";
 testfftp << " // 3'd5 :  2048 Point    \n";
 testfftp << "reg  [CP_WIDTH-1 :0]  Prime;             \n";
 testfftp << "reg  [Pre_WIDTH-1:0]  Pre_computing;     \n";
 testfftp << "reg  [1:0]            MixRadix_sel;      \n";
 testfftp << "reg  [2:0]            Point_sel;         \n";
 testfftp << "reg  [A_WIDTH-1:0]    MA_Configure;      \n";
 testfftp << "reg                   H_MA_sel;          \n";
 testfftp << "reg                   H_SRAM_CEN;        \n";
 testfftp << "reg                   H_SRAM_WEN;        \n";
 testfftp << "//\n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S0;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S1;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S2;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S3;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S4;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S5;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S6;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S7;         \n";
 testfftp << "//\n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S0;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S1;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S2;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S3;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S4;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S5;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S6;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S7;         \n";
 testfftp << "//\n";
 testfftp << "reg                 order_SRAM_CEN;      \n";
 testfftp << "reg                 order_SRAM_WEN;      \n";
 testfftp << "reg  [A_WIDTH-1:0]  order_MA;            \n";
 testfftp << "reg                 order_sel;           \n";
 testfftp << "//\n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM0;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM1;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM2;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM3;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM0; \n";
 testfftp << "reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM1; \n";
 testfftp << "reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM2; \n";
 testfftp << "reg  [P_WIDTH-1:0]  IReorder_DATA_SRAM3; \n";
 testfftp << "//\n";
 testfftp << " reg                rst_n ;\n";
 testfftp << " reg                clk ;  \n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " //---------------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S0_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S1_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S2_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S4_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S5_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S6_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S0_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S1_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S2_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S4_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S5_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S6_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1 :0]  REORD_S1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S2_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1 :0]  REORD_S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S2_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [P_WIDTH-1:0]   IREORD_S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " //\n";
 testfftp << " integer            i, j ,k ,ef,error;\n";
 testfftp << " integer            gd; // golden_data\n";
 testfftp << "\n";
 testfftp << "     //read file\n";
 testfftp << "     initial begin \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //----\n";
 testfftp << "         $readmemh(H_B0S0,H_B0S0_mem);\n";
 testfftp << "         $readmemh(H_B0S1,H_B0S1_mem);\n";
 testfftp << "         $readmemh(H_B0S2,H_B0S2_mem);\n";
 testfftp << "         $readmemh(H_B0S3,H_B0S3_mem);\n";
 testfftp << "         $readmemh(H_B0S4,H_B0S4_mem);\n";
 testfftp << "         $readmemh(H_B0S5,H_B0S5_mem);\n";
 testfftp << "         $readmemh(H_B0S6,H_B0S6_mem);\n";
 testfftp << "         $readmemh(H_B0S7,H_B0S7_mem);\n";
 testfftp << "         //\n";
 testfftp << "         $readmemh(H_B1S0,H_B1S0_mem);\n";
 testfftp << "         $readmemh(H_B1S1,H_B1S1_mem);\n";
 testfftp << "         $readmemh(H_B1S2,H_B1S2_mem);\n";
 testfftp << "         $readmemh(H_B1S3,H_B1S3_mem);\n";
 testfftp << "         $readmemh(H_B1S4,H_B1S4_mem);\n";
 testfftp << "         $readmemh(H_B1S5,H_B1S5_mem);\n";
 testfftp << "         $readmemh(H_B1S6,H_B1S6_mem);\n";
 testfftp << "         $readmemh(H_B1S7,H_B1S7_mem);\n";
 testfftp << "         //\n";
 testfftp << "         $readmemh(REORD_S0,REORD_S0_mem);\n";
 testfftp << "         $readmemh(REORD_S1,REORD_S1_mem);\n";
 testfftp << "         $readmemh(REORD_S2,REORD_S2_mem);\n";
 testfftp << "         $readmemh(REORD_S3,REORD_S3_mem);\n";
 testfftp << "         //\n";
 testfftp << "         $readmemh(IREORD_S0,IREORD_S0_mem);\n";
 testfftp << "         $readmemh(IREORD_S1,IREORD_S1_mem);\n";
 testfftp << "         $readmemh(IREORD_S2,IREORD_S2_mem);\n";
 testfftp << "         $readmemh(IREORD_S3,IREORD_S3_mem);\n";
 testfftp << "         //golden data\n";
 testfftp << "         k = 0;       \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin\n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;\n";
 testfftp << "         end\n";
 testfftp << "         while(!$feof(gd))begin\n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;\n";
 testfftp << "         end\n";
 testfftp << "     end\n";
 testfftp << "\n";
 testfftp << " 	//\n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),\n";
 testfftp << " 				.MulD0_out(MulD0_out),\n";
 testfftp << " 				.MulD1_out(MulD1_out),\n";
 testfftp << " 				.MulD2_out(MulD2_out),\n";
 testfftp << " 				.MulD3_out(MulD3_out),\n";
 testfftp << " 				.MulD4_out(MulD4_out),\n";
 testfftp << " 				.MulD5_out(MulD5_out),\n";
 testfftp << " 				.MulD6_out(MulD6_out),\n";
 testfftp << " 				.MulD7_out(MulD7_out),\n";
 testfftp << " 				.MulD8_out(MulD8_out),\n";
 testfftp << " 				.MulD9_out(MulD9_out),\n";
 testfftp << " 				.MulD10_out(MulD10_out),\n";
 testfftp << " 				.MulD11_out(MulD11_out),\n";
 testfftp << " 				.MulD12_out(MulD12_out),\n";
 testfftp << " 				.MulD13_out(MulD13_out),\n";
 testfftp << " 				.MulD14_out(MulD14_out),\n";
 testfftp << " 				.MulD15_out(MulD15_out),\n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),\n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),\n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),\n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),\n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),\n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),\n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),\n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),\n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),\n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),\n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),\n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),\n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),\n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),\n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),\n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),\n";
 testfftp << " 				.N_in(N_in),\n";
 testfftp << " 				.ExtValid_in(ExtValid_in),\n";
 testfftp << "              .Prime(Prime),\n";
 testfftp << "              .Pre_computing(Pre_computing),\n";
 testfftp << "              .MixRadix_sel(MixRadix_sel),\n";
 testfftp << "              .Point_sel(Point_sel),\n";
 testfftp << "              .MA_Configure(MA_Configure),\n";
 testfftp << "              .H_MA_sel(H_MA_sel),\n";
 testfftp << "              .H_SRAM_CEN(H_SRAM_CEN),\n";
 testfftp << "              .H_SRAM_WEN(H_SRAM_WEN),\n";
 testfftp << "              //bank0\n";
 testfftp << "              .H_DATA_B0S0(H_DATA_B0S0),\n";
 testfftp << "              .H_DATA_B0S1(H_DATA_B0S1),\n";
 testfftp << "              .H_DATA_B0S2(H_DATA_B0S2),\n";
 testfftp << "              .H_DATA_B0S3(H_DATA_B0S3),\n";
 testfftp << "              .H_DATA_B0S4(H_DATA_B0S4),\n";
 testfftp << "              .H_DATA_B0S5(H_DATA_B0S5),\n";
 testfftp << "              .H_DATA_B0S6(H_DATA_B0S6),\n";
 testfftp << "              .H_DATA_B0S7(H_DATA_B0S7),\n";
 testfftp << "              //bank1\n";
 testfftp << "              .H_DATA_B1S0(H_DATA_B1S0),\n";
 testfftp << "              .H_DATA_B1S1(H_DATA_B1S1),\n";
 testfftp << "              .H_DATA_B1S2(H_DATA_B1S2),\n";
 testfftp << "              .H_DATA_B1S3(H_DATA_B1S3),\n";
 testfftp << "              .H_DATA_B1S4(H_DATA_B1S4),\n";
 testfftp << "              .H_DATA_B1S5(H_DATA_B1S5),\n";
 testfftp << "              .H_DATA_B1S6(H_DATA_B1S6),\n";
 testfftp << "              .H_DATA_B1S7(H_DATA_B1S7),\n";
 testfftp << "              // order_sram\n";
 testfftp << "              .order_SRAM_CEN(order_SRAM_CEN),\n";
 testfftp << "              .order_SRAM_WEN(order_SRAM_WEN),\n";
 testfftp << "              .order_MA(order_MA),\n";
 testfftp << "              .order_sel(order_sel),\n";
 testfftp << "              //\n";
 testfftp << "              .Reorder_DATA_SRAM0(Reorder_DATA_SRAM0),\n";
 testfftp << "              .Reorder_DATA_SRAM1(Reorder_DATA_SRAM1),\n";
 testfftp << "              .Reorder_DATA_SRAM2(Reorder_DATA_SRAM2),\n";
 testfftp << "              .Reorder_DATA_SRAM3(Reorder_DATA_SRAM3),\n";
 testfftp << "              //\n";
 testfftp << "              .IReorder_DATA_SRAM0(IReorder_DATA_SRAM0),\n";
 testfftp << "              .IReorder_DATA_SRAM1(IReorder_DATA_SRAM1),\n";
 testfftp << "              .IReorder_DATA_SRAM2(IReorder_DATA_SRAM2),\n";
 testfftp << "              .IReorder_DATA_SRAM3(IReorder_DATA_SRAM3),\n";
 testfftp << "              //\n";
 testfftp << " 				.rst_n(rst_n),\n";
 testfftp << " 				.clk(clk)\n";
 testfftp << " 				) ;\n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;\n";
 testfftp << "                                  \n";
 testfftp << "                                  \n";
 testfftp << "     //FSDB                       \n";
 testfftp << " 	initial begin                   \n";
 testfftp << "          $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << "          $fsdbDumpvars ;\n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << "          //$fsdbDumpvars(3,test_FFTP) ;\n";
 testfftp << "          // $fsdbDumpvars(3,test_FFTP); //top level signal\n";
 testfftp << "          //$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal\n";
 testfftp << "          //$fsdbDumpvars(1,test_DualECP); //top level signal            \n";
 testfftp << " 	end\n";
 testfftp << "     \n";
 testfftp << " 	initial begin\n";
 testfftp << "\n";
 testfftp << " 		clk = 1 ;\n";
 testfftp << " 		rst_n = 1 ;\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;\n";
 testfftp << " 		ExtB0_D0_in = 0 ;\n";
 testfftp << " 		ExtB0_D1_in = 0 ;\n";
 testfftp << " 		ExtB0_D2_in = 0 ;\n";
 testfftp << " 		ExtB0_D3_in = 0 ;\n";
 testfftp << " 		ExtB0_D4_in = 0 ;\n";
 testfftp << " 		ExtB0_D5_in = 0 ;\n";
 testfftp << " 		ExtB0_D6_in = 0 ;\n";
 testfftp << " 		ExtB0_D7_in = 0 ;\n";
 testfftp << " 		ExtB1_D0_in = 0 ;\n";
 testfftp << " 		ExtB1_D1_in = 0 ;\n";
 testfftp << " 		ExtB1_D2_in = 0 ;\n";
 testfftp << " 		ExtB1_D3_in = 0 ;\n";
 testfftp << " 		ExtB1_D4_in = 0 ;\n";
 testfftp << " 		ExtB1_D5_in = 0 ;\n";
 testfftp << " 		ExtB1_D6_in = 0 ;\n";
 testfftp << " 		ExtB1_D7_in = 0 ;\n";
 testfftp << "      //change with number of points\n";
 // Mixed_radix_sel_in 
 // 2'd0: radix-2 
 // 2'd1: radix-4  
 // 2'd2: radix-8 
 // Point_sel_in 
 // 3'd0 : 65536 Point
 // 3'd1 : 32768 Point
 // 3'd2 : 16384 Point
 // 3'd3 :  8192 Point
 // 3'd4 :  4096 Point
 //*******************************************
 int  mix_radix_sel;
 int  point_sel;
 if(fft_point == 4096){
     mix_radix_sel = 3; // 2'd3: radix-16
	 point_sel     = 4; // 3'd4 :  4096 Point
 } 	 
 if(fft_point == 8192){
     mix_radix_sel = 0; // 2'd0: radix-2
	 point_sel     = 3; // 3'd3 :  8192 Point
 } 	 	 
 if(fft_point == 16384){
     mix_radix_sel = 1; // 2'd1: radix-4
	 point_sel     = 2; // 3'd2 :  16384 Point
 }
 if(fft_point == 32768){
     mix_radix_sel = 2; // 2'd2: radix-8
	 point_sel     = 1; // 3'd1 :  32768 Point
 } 
 if(fft_point == 65536){
     mix_radix_sel = 3; // 2'd3: radix-16
	 point_sel     = 0; // 3'd0 :  65536 Point
 } 	  
 //hex 
 std::string  prime_hex;
 std::string  pre_computing_hex;
 prime_hex = ZZtohex(cyclotomic_prime,CP_width);
 pre_computing_hex = ZZtohex(pre_computing,PRE_width);
 //-------------------------------------------------------------
 testfftp << "      //change with number of points\n";
 //-------------------------------------------------------------
 testfftp << "      Prime         = "<< CP_width  <<"'h"<< prime_hex <<";\n";
 testfftp << "      Pre_computing = "<< PRE_width <<"'h"<< pre_computing_hex <<";\n";
 testfftp << "      MixRadix_sel  = 2'h"<< mix_radix_sel <<";\n";
 testfftp << "      Point_sel     = 3'h"<< point_sel     <<";\n";
 testfftp << "      //\n";
 testfftp << "      \n";
 testfftp << "      H_MA_sel      = 0;\n";
 testfftp << "      H_SRAM_CEN    = 1'b1;\n";
 testfftp << "      H_SRAM_WEN    = 1'b1;\n";
 testfftp << "      MA_Configure  = 0;\n";
 testfftp << "      H_DATA_B0S0   = 0;\n";
 testfftp << "      H_DATA_B0S1   = 0;\n";
 testfftp << "      H_DATA_B0S2   = 0;\n";
 testfftp << "      H_DATA_B0S3   = 0;\n";
 testfftp << "      H_DATA_B0S4   = 0;\n";
 testfftp << "      H_DATA_B0S5   = 0;\n";
 testfftp << "      H_DATA_B0S6   = 0;\n";
 testfftp << "      H_DATA_B0S7   = 0;\n";
 testfftp << "      //\n";
 testfftp << "      H_DATA_B1S0   = 0;\n";
 testfftp << "      H_DATA_B1S1   = 0;\n";
 testfftp << "      H_DATA_B1S2   = 0;\n";
 testfftp << "      H_DATA_B1S3   = 0;\n";
 testfftp << "      H_DATA_B1S4   = 0;\n";
 testfftp << "      H_DATA_B1S5   = 0;\n";
 testfftp << "      H_DATA_B1S6   = 0;\n";
 testfftp << "      H_DATA_B1S7   = 0;\n";
 testfftp << "      //\n";
 testfftp << "      order_SRAM_CEN = 1'b1;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "      order_MA       = 0;\n";
 testfftp << "      order_sel      = 0;\n";
 testfftp << "      //\n";
 testfftp << "      Reorder_DATA_SRAM0 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM1 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM2 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM3 = 0;\n";
 testfftp << "      //\n";
 testfftp << "      IReorder_DATA_SRAM0 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM1 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM2 = 0;\n"; 
 testfftp << "      IReorder_DATA_SRAM3 = 0;\n"; 

 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		rst_n = 0 ;\n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << "      // Configure H_SRAM and Reorder SRAM\n";
 testfftp << "      H_MA_sel        = 1'b1;\n";
 testfftp << "      H_SRAM_CEN      = 1'b0;\n";
 testfftp << "      H_SRAM_WEN      = 1'b0;\n";
 testfftp << "      order_sel       = 1'b1;\n";
 testfftp << "      order_SRAM_CEN  = 1'b0;\n";
 testfftp << "      order_SRAM_WEN  = 1'b0;\n";
 testfftp << "      //----------------------\n";
 testfftp << "      //----------------------\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      // address=0~31\n";
 testfftp << "      for(j=0;j<ADDR_VALUE;j=j+1) begin \n";
 testfftp << "      	//Address \n";
 testfftp << "          MA_Configure = j[A_WIDTH-1:0];\n";
 testfftp << "      	order_MA     = j[A_WIDTH-1:0];\n";
 testfftp << "      	#(CYCLE)\n";
 testfftp << "      	//data\n";
 testfftp << "      	H_DATA_B0S0  = H_B0S0_mem[j] ;   \n";
 testfftp << "          H_DATA_B0S1  = H_B0S1_mem[j] ;\n"; 
 testfftp << "      	H_DATA_B0S2  = H_B0S2_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S3  = H_B0S3_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S4  = H_B0S4_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S5  = H_B0S5_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S6  = H_B0S6_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S7  = H_B0S7_mem[j] ;\n";      
 testfftp << "\n";
 testfftp << "      	H_DATA_B1S0  = H_B1S0_mem[j] ;\n";
 testfftp << "          H_DATA_B1S1  = H_B1S1_mem[j] ;\n"; 
 testfftp << "      	H_DATA_B1S2  = H_B1S2_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S3  = H_B1S3_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S4  = H_B1S4_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S5  = H_B1S5_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S6  = H_B1S6_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S7  = H_B1S7_mem[j] ;\n";      
 testfftp << "//\n";
 testfftp << "          Reorder_DATA_SRAM0  = REORD_S0_mem[j];\n";
 testfftp << "          Reorder_DATA_SRAM1  = REORD_S1_mem[j];\n";
 testfftp << "          Reorder_DATA_SRAM2  = REORD_S2_mem[j];\n";
 testfftp << "          Reorder_DATA_SRAM3  = REORD_S3_mem[j];\n";
 testfftp << "//\n";
 testfftp << "          IReorder_DATA_SRAM0 = IREORD_S0_mem[j];\n";
 testfftp << "          IReorder_DATA_SRAM1 = IREORD_S1_mem[j];\n";
 testfftp << "          IReorder_DATA_SRAM2 = IREORD_S2_mem[j];\n";
 testfftp << "          IReorder_DATA_SRAM3 = IREORD_S3_mem[j];\n";
 testfftp << "      end	\n";
 testfftp << "\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      H_MA_sel       = 1'b0;\n";
 testfftp << "      H_SRAM_WEN     = 1'b1;\n"; 
 testfftp << "      order_sel      = 1'b0;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "\n";
 testfftp << " 		#(4*CYCLE)\n";
 testfftp << " 		ExtValid_in = 1 ;\n";
 testfftp << "\n";
 testfftp << " 		// address=0~31\n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem[j] ;\n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem[j] ;\n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem[j] ;\n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem[j] ;\n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem[j] ;\n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem[j] ;\n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem[j] ;\n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem[j] ;\n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem[j] ;\n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem[j] ;\n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem[j] ;\n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem[j] ;\n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem[j] ;\n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem[j] ;\n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem[j] ;\n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem[j] ;\n";

 testfftp << "\n";
 testfftp << " 		end\n";
 testfftp << " 		//\n";
 testfftp << "\n";
 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		//\n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[16*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 16*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i,MulD0_out,16*i,golden_mem[16*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[16*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out,16*i+1,golden_mem[16*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[16*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out,16*i+2,golden_mem[16*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[16*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out,16*i+3,golden_mem[16*i + 3]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[16*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out,16*i+4,golden_mem[16*i + 4]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[16*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out,16*i+5,golden_mem[16*i + 5]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[16*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out,16*i+6,golden_mem[16*i + 6]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[16*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out,16*i+7,golden_mem[16*i + 7]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD8_out == golden_mem[16*i+8]) $display("<<char_tmp << "MulD8_out[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD8_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out,16*i+8,golden_mem[16*i + 8]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD9_out == golden_mem[16*i+9]) $display("<<char_tmp << "MulD9_out[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD9_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out,16*i+9,golden_mem[16*i + 9]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD10_out == golden_mem[16*i+10]) $display("<<char_tmp << "MulD10_out[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD10_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out,16*i+10,golden_mem[16*i + 10]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD11_out == golden_mem[16*i+11]) $display("<<char_tmp << "MulD11_out[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD11_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out,16*i+11,golden_mem[16*i + 11]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD12_out == golden_mem[16*i+12]) $display("<<char_tmp << "MulD12_out[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD12_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out,16*i+12,golden_mem[16*i + 12]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD13_out == golden_mem[16*i+13]) $display("<<char_tmp << "MulD13_out[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD13_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out,16*i+13,golden_mem[16*i + 13]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD14_out == golden_mem[16*i+14]) $display("<<char_tmp << "MulD14_out[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD14_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out,16*i+14,golden_mem[16*i + 14]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD15_out == golden_mem[16*i+15]) $display("<<char_tmp << "MulD15_out[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD15_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out,16*i+15,golden_mem[16*i + 15]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";
 testfftp.close();
}
void FFTC::testfftp_Reconfigure_r16_for_coverage(std::string string_in){
     std::ofstream testfftp;
     std::string        string_buf = "/test_FFTP_for_coverage.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     char char_tmp = 34; // ascii code 32 = 
     testfftp.open(ss.str());
 testfftp << " //==================================================                                                                         \n";
 testfftp << " //Writer     : Shi-Yong Wu                                                                                                  \n";
 testfftp << " //Date       : 2021/02/20                                                                                                      \n";
 testfftp << " //Note       : testbench for Merged Bank FFT Processor                                                                       \n";
 testfftp << " //==================================================                                                                         \n";
 testfftp << "                                                                                                                              \n";
 testfftp << "  `include "<< char_tmp << "BR.v"                     << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CenCtrl.v"                << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "FFTP.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA4.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA6.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA16.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA16clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA24.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA24clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA32.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA32clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA64.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA64_co.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA64clg_co.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA65.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA65clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA96.v"                  << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA96clg.v"               << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA192.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "CLA192clg.v"              << char_tmp << "    \n"; 
 //                                                                                     
 //testfftp << "  `include "<< char_tmp << "CSM_4096.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_8192.v"               << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_16384.v"              << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_32768.v"              << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "CSM_65536.v"              << char_tmp << "    \n";
 //                                                                 
 testfftp << "  `include "<< char_tmp << "Ctrl_PipeReg1.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Config_Reg.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "IReorderMA_pip.v"         << char_tmp << "    \n";
 
 testfftp << "  `include "<< char_tmp << "MAMux_HSRAM.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MAMux_RESRAM.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mod96.v"                  << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "Mod96PD.v"                << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "Mod192.v"                 << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "Mod192PD.v"               << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "ModMux.v"                 << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "Mul.v"                    << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mul64.v"                  << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "MulMod.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "MulMod128.v"              << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "MulMod128PD.v"            << char_tmp << "    \n";
 //                                                                 
 testfftp << "  `include "<< char_tmp << "Mux1.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux2.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux3.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux4.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux5.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Mux6.v"                   << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_AGU.v"                << char_tmp << "    \n";
 //
 //testfftp << "  `include "<< char_tmp << "R16_AGU_4096.v"           << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_8192.v"           << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_16384.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_32768.v"          << char_tmp << "    \n";
 //testfftp << "  `include "<< char_tmp << "R16_AGU_65536.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_BU_outpipe.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_DC.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_InpipeReg.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg1.v"          << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg2.v"          << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_NPipeReg3.v"          << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_orderROM_Pipe.v"      << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg1.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg2.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg3.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg4_2.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg5_1.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_PipeReg5_2.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_ROMPipeReg1.v"        << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "R16_WAddr.v"              << char_tmp << "    \n"; 
 testfftp << "  `include "<< char_tmp << "R16_WD_buf.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Radix16_Pipe.v"           << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Rectrl.v"                 << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout0.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout1.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout2.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout3.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout4.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout5.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout6.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout7.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout8.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout9.v"          << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout10.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout11.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout12.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout13.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout14.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_CSAout15.v"         << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out0.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out1.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out2.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out3.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out4.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out5.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out6.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out7.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out8.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out9.v"             << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out10.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out11.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out12.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out13.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out14.v"            << char_tmp << "    \n";
 testfftp << "  `include "<< char_tmp << "Sum16_out15.v"            << char_tmp << "    \n";
 //------------------------------------------------------------------------------- 
 testfftp << "  `include "<< char_tmp << "SRAM_SP_2048_64.v"        << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "SRAM_SP_2048_128.v"        << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM0_4096_64.v"            << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM1_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM2_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM3_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM4_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM5_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM6_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM7_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR0_4096_64.v"          << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR1_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR2_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR3_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR4_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR5_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR6_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR7_4096_128.v"         << char_tmp << "   \n";
 //--------------------------------------------------------------------------------
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"                << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                 << char_tmp << "  \n";
 testfftp << "\n";
 testfftp << " `timescale 1 ns/1 ps\n";
 testfftp << "\n";
 testfftp << " module test_FFTP_for_coverage ;\n";
 
 double period;
 period =  ((1 / (double)Freq) * 1000);
 
 testfftp << " parameter CYCLE     = "<< period <<"  ;\n";
 testfftp << " parameter P_WIDTH   = 64 ;\n";
 testfftp << " parameter SD_WIDTH  = 128;\n";
 testfftp << " parameter A_WIDTH   = 11 ;\n";
  //  FFT Point ======> m-th
 //   4096             2047
 //   8192             4095
 //  16384             8191
 //  32768            16383
 //  65536            32767
 testfftp << " parameter test_data_index_over_4096  = 128;\n";
 testfftp << " parameter test_data_index_over_8192  = 256;\n";
 testfftp << " parameter test_data_index_over_16384 = 512;\n";
 testfftp << " parameter test_data_index_over_32768 = 1024;\n";
 testfftp << " parameter test_data_index_over_65536 = 2048;\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width  << ";  // original prime or small prime		2020/04/09	\n";
 testfftp << " parameter Pre_WIDTH = " << PRE_width << ";  	                                                \n";
 testfftp << " parameter POINT_NUM_4096  = 4096 ;\n";
 testfftp << " parameter POINT_NUM_8192  = 8192 ;\n";
 testfftp << " parameter POINT_NUM_16384 = 16384 ;\n";
 testfftp << " parameter POINT_NUM_32768 = 32768 ;\n";
 testfftp << " parameter POINT_NUM_65536 = 65536 ;\n";

 testfftp << " parameter BF_POINT_NUM = 16 ; // butterfly number of point\n";
 testfftp << "\n";
 testfftp << " parameter INI_VALUE_4096   = 256; //(POINT_NUM/BF_POINT_NUM)\n";
 testfftp << " parameter INI_VALUE_8192   = 512; //(POINT_NUM/BF_POINT_NUM)\n";
 testfftp << " parameter INI_VALUE_16384  = 1024; //(POINT_NUM/BF_POINT_NUM)\n";
 testfftp << " parameter INI_VALUE_32768  = 2048; //(POINT_NUM/BF_POINT_NUM)\n";
 testfftp << " parameter INI_VALUE_65536  = 4096; //(POINT_NUM/BF_POINT_NUM)\n";
 testfftp << "\n";
 testfftp << " parameter ADDR_VALUE_4096  = 128; //(POINT_NUM/(BF_POINT_NUM*2))\n";
 testfftp << " parameter ADDR_VALUE_8192  = 256; //(POINT_NUM/(BF_POINT_NUM*2))\n";
 testfftp << " parameter ADDR_VALUE_16384  = 512; //(POINT_NUM/(BF_POINT_NUM*2))\n";
 testfftp << " parameter ADDR_VALUE_32768  = 1024; //(POINT_NUM/(BF_POINT_NUM*2))\n";
 testfftp << " parameter ADDR_VALUE_65536  = 2048; //(POINT_NUM/(BF_POINT_NUM*2))\n";
 testfftp << "                                                                                 \n";
 // 4096 Point
 testfftp << " parameter H_B0S0_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S1_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S2_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S3_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S4_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S5_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S6_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S7_4096  = "<< char_tmp << "./data/4096P/H_b0SRAM7.txt"   << char_tmp << ";  \n";
 testfftp << "                                                                                 \n";
 testfftp << " parameter H_B1S0_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S1_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S2_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S3_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S4_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S5_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S6_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S7_4096  = "<< char_tmp << "./data/4096P/H_b1SRAM7.txt"   << char_tmp << ";  \n"; 
 testfftp << "                                                                                 \n";
 testfftp << " parameter REORD_S0_4096  = "<< char_tmp << "./data/4096P/Reorder_SRAM0.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S1_4096  = "<< char_tmp << "./data/4096P/Reorder_SRAM1.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S2_4096  = "<< char_tmp << "./data/4096P/Reorder_SRAM2.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S3_4096  = "<< char_tmp << "./data/4096P/Reorder_SRAM3.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S0_4096 = "<< char_tmp << "./data/4096P/IReorder_SRAM0.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S1_4096 = "<< char_tmp << "./data/4096P/IReorder_SRAM1.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S2_4096 = "<< char_tmp << "./data/4096P/IReorder_SRAM2.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S3_4096 = "<< char_tmp << "./data/4096P/IReorder_SRAM3.txt"  << char_tmp << ";\n"; 
 testfftp << "                                                                                 \n";
 testfftp << " parameter golden_file_4096 = "<< char_tmp << "./data/4096P/test_golden.txt" << char_tmp << ";\n";
 testfftp << " parameter A_B0R0_4096  = "<< char_tmp << "./data/4096P/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1_4096  = "<< char_tmp << "./data/4096P/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2_4096  = "<< char_tmp << "./data/4096P/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3_4096  = "<< char_tmp << "./data/4096P/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4_4096  = "<< char_tmp << "./data/4096P/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5_4096  = "<< char_tmp << "./data/4096P/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6_4096  = "<< char_tmp << "./data/4096P/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7_4096  = "<< char_tmp << "./data/4096P/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0_4096  = "<< char_tmp << "./data/4096P/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1_4096  = "<< char_tmp << "./data/4096P/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2_4096  = "<< char_tmp << "./data/4096P/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3_4096  = "<< char_tmp << "./data/4096P/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4_4096  = "<< char_tmp << "./data/4096P/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5_4096  = "<< char_tmp << "./data/4096P/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6_4096  = "<< char_tmp << "./data/4096P/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7_4096  = "<< char_tmp << "./data/4096P/A_b1radix7.txt"  << char_tmp << ";  \n";
 //--------------------------------------------------------------------------------------------------------------
 // 8192 Point
 testfftp << " parameter H_B0S0_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S1_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S2_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S3_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S4_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S5_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S6_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S7_8192  = "<< char_tmp << "./data/8192P/H_b0SRAM7.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S0_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S1_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S2_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S3_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S4_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S5_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S6_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S7_8192  = "<< char_tmp << "./data/8192P/H_b1SRAM7.txt"   << char_tmp << ";  \n"; 
 testfftp << " parameter REORD_S0_8192  = "<< char_tmp << "./data/8192P/Reorder_SRAM0.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S1_8192  = "<< char_tmp << "./data/8192P/Reorder_SRAM1.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S2_8192  = "<< char_tmp << "./data/8192P/Reorder_SRAM2.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S3_8192  = "<< char_tmp << "./data/8192P/Reorder_SRAM3.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S0_8192 = "<< char_tmp << "./data/8192P/IReorder_SRAM0.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S1_8192 = "<< char_tmp << "./data/8192P/IReorder_SRAM1.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S2_8192 = "<< char_tmp << "./data/8192P/IReorder_SRAM2.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S3_8192 = "<< char_tmp << "./data/8192P/IReorder_SRAM3.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter golden_file_8192 = "<< char_tmp << "./data/8192P/test_golden.txt" << char_tmp << ";\n";
 testfftp << " parameter A_B0R0_8192  = "<< char_tmp << "./data/8192P/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1_8192  = "<< char_tmp << "./data/8192P/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2_8192  = "<< char_tmp << "./data/8192P/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3_8192  = "<< char_tmp << "./data/8192P/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4_8192  = "<< char_tmp << "./data/8192P/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5_8192  = "<< char_tmp << "./data/8192P/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6_8192  = "<< char_tmp << "./data/8192P/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7_8192  = "<< char_tmp << "./data/8192P/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0_8192  = "<< char_tmp << "./data/8192P/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1_8192  = "<< char_tmp << "./data/8192P/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2_8192  = "<< char_tmp << "./data/8192P/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3_8192  = "<< char_tmp << "./data/8192P/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4_8192  = "<< char_tmp << "./data/8192P/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5_8192  = "<< char_tmp << "./data/8192P/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6_8192  = "<< char_tmp << "./data/8192P/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7_8192  = "<< char_tmp << "./data/8192P/A_b1radix7.txt"  << char_tmp << ";  \n";
 //-------------------------------------------------------------------------------------------------------------- 
 //16384 Point
 testfftp << " parameter H_B0S0_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S1_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S2_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S3_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S4_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S5_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S6_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S7_16384  = "<< char_tmp << "./data/16384P/H_b0SRAM7.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S0_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S1_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S2_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S3_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S4_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S5_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S6_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S7_16384  = "<< char_tmp << "./data/16384P/H_b1SRAM7.txt"   << char_tmp << ";  \n"; 
 testfftp << " parameter REORD_S0_16384  = "<< char_tmp << "./data/16384P/Reorder_SRAM0.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S1_16384  = "<< char_tmp << "./data/16384P/Reorder_SRAM1.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S2_16384  = "<< char_tmp << "./data/16384P/Reorder_SRAM2.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S3_16384  = "<< char_tmp << "./data/16384P/Reorder_SRAM3.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S0_16384 = "<< char_tmp << "./data/16384P/IReorder_SRAM0.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S1_16384 = "<< char_tmp << "./data/16384P/IReorder_SRAM1.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S2_16384 = "<< char_tmp << "./data/16384P/IReorder_SRAM2.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S3_16384 = "<< char_tmp << "./data/16384P/IReorder_SRAM3.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter golden_file_16384 = "<< char_tmp << "./data/16384P/test_golden.txt" << char_tmp << ";\n";
 testfftp << " parameter A_B0R0_16384  = "<< char_tmp << "./data/16384P/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1_16384  = "<< char_tmp << "./data/16384P/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2_16384  = "<< char_tmp << "./data/16384P/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3_16384  = "<< char_tmp << "./data/16384P/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4_16384  = "<< char_tmp << "./data/16384P/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5_16384  = "<< char_tmp << "./data/16384P/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6_16384  = "<< char_tmp << "./data/16384P/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7_16384  = "<< char_tmp << "./data/16384P/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0_16384  = "<< char_tmp << "./data/16384P/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1_16384  = "<< char_tmp << "./data/16384P/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2_16384  = "<< char_tmp << "./data/16384P/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3_16384  = "<< char_tmp << "./data/16384P/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4_16384  = "<< char_tmp << "./data/16384P/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5_16384  = "<< char_tmp << "./data/16384P/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6_16384  = "<< char_tmp << "./data/16384P/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7_16384  = "<< char_tmp << "./data/16384P/A_b1radix7.txt"  << char_tmp << ";  \n";
 //-------------------------------------------------------------------------------------------------------------- 
 // 32768 Point
 testfftp << " parameter H_B0S0_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S1_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S2_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S3_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S4_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S5_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S6_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S7_32768  = "<< char_tmp << "./data/32768P/H_b0SRAM7.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S0_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S1_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S2_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S3_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S4_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S5_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S6_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S7_32768  = "<< char_tmp << "./data/32768P/H_b1SRAM7.txt"   << char_tmp << ";  \n"; 
 testfftp << " parameter REORD_S0_32768  = "<< char_tmp << "./data/32768P/Reorder_SRAM0.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S1_32768  = "<< char_tmp << "./data/32768P/Reorder_SRAM1.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S2_32768  = "<< char_tmp << "./data/32768P/Reorder_SRAM2.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S3_32768  = "<< char_tmp << "./data/32768P/Reorder_SRAM3.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S0_32768 = "<< char_tmp << "./data/32768P/IReorder_SRAM0.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S1_32768 = "<< char_tmp << "./data/32768P/IReorder_SRAM1.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S2_32768 = "<< char_tmp << "./data/32768P/IReorder_SRAM2.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S3_32768 = "<< char_tmp << "./data/32768P/IReorder_SRAM3.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter golden_file_32768 = "<< char_tmp << "./data/32768P/test_golden.txt" << char_tmp << ";\n";
 testfftp << " parameter A_B0R0_32768  = "<< char_tmp << "./data/32768P/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1_32768  = "<< char_tmp << "./data/32768P/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2_32768  = "<< char_tmp << "./data/32768P/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3_32768  = "<< char_tmp << "./data/32768P/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4_32768  = "<< char_tmp << "./data/32768P/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5_32768  = "<< char_tmp << "./data/32768P/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6_32768  = "<< char_tmp << "./data/32768P/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7_32768  = "<< char_tmp << "./data/32768P/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0_32768  = "<< char_tmp << "./data/32768P/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1_32768  = "<< char_tmp << "./data/32768P/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2_32768  = "<< char_tmp << "./data/32768P/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3_32768  = "<< char_tmp << "./data/32768P/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4_32768  = "<< char_tmp << "./data/32768P/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5_32768  = "<< char_tmp << "./data/32768P/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6_32768  = "<< char_tmp << "./data/32768P/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7_32768  = "<< char_tmp << "./data/32768P/A_b1radix7.txt"  << char_tmp << ";  \n";
 //--------------------------------------------------------------------------------------------------------------  
 // 65536 Point
 testfftp << " parameter H_B0S0_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S1_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S2_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S3_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S4_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S5_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S6_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S7_65536  = "<< char_tmp << "./data/65536P/H_b0SRAM7.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S0_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S1_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S2_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S3_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S4_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S5_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S6_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S7_65536  = "<< char_tmp << "./data/65536P/H_b1SRAM7.txt"   << char_tmp << ";  \n"; 
 testfftp << " parameter REORD_S0_65536  = "<< char_tmp << "./data/65536P/Reorder_SRAM0.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S1_65536  = "<< char_tmp << "./data/65536P/Reorder_SRAM1.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S2_65536  = "<< char_tmp << "./data/65536P/Reorder_SRAM2.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S3_65536  = "<< char_tmp << "./data/65536P/Reorder_SRAM3.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S0_65536 = "<< char_tmp << "./data/65536P/IReorder_SRAM0.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S1_65536 = "<< char_tmp << "./data/65536P/IReorder_SRAM1.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S2_65536 = "<< char_tmp << "./data/65536P/IReorder_SRAM2.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S3_65536 = "<< char_tmp << "./data/65536P/IReorder_SRAM3.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter golden_file_65536 = "<< char_tmp << "./data/65536P/test_golden.txt" << char_tmp << ";\n";
 testfftp << " parameter A_B0R0_65536  = "<< char_tmp << "./data/65536P/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1_65536  = "<< char_tmp << "./data/65536P/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2_65536  = "<< char_tmp << "./data/65536P/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3_65536  = "<< char_tmp << "./data/65536P/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4_65536  = "<< char_tmp << "./data/65536P/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5_65536  = "<< char_tmp << "./data/65536P/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6_65536  = "<< char_tmp << "./data/65536P/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7_65536  = "<< char_tmp << "./data/65536P/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0_65536  = "<< char_tmp << "./data/65536P/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1_65536  = "<< char_tmp << "./data/65536P/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2_65536  = "<< char_tmp << "./data/65536P/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3_65536  = "<< char_tmp << "./data/65536P/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4_65536  = "<< char_tmp << "./data/65536P/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5_65536  = "<< char_tmp << "./data/65536P/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6_65536  = "<< char_tmp << "./data/65536P/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7_65536  = "<< char_tmp << "./data/65536P/A_b1radix7.txt"  << char_tmp << ";  \n";
 //--------------------------------------------------------------------------------------------------------------   
 testfftp << " \n";
 testfftp << " \n";
 testfftp << " wire                MulValid_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD8_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD9_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD10_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD11_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD12_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD13_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD14_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD15_out ;\n";
 testfftp << " \n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;\n";

 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;\n";
 testfftp << " reg  [P_WIDTH-1:0]  N_in ;       \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S0;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S1;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S2;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S3;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S4;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S5;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S6;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B0S7;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S0;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S1;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S2;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S3;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S4;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S5;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S6;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] H_DATA_B1S7;         \n";
 testfftp << " reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM0;  \n";
 testfftp << " reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM1;  \n";
 testfftp << " reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM2;  \n";
 testfftp << " reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM3;  \n";
 testfftp << " reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM0; \n";
 testfftp << " reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM1; \n";
 testfftp << " reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM2; \n";
 testfftp << " reg  [P_WIDTH-1:0]  IReorder_DATA_SRAM3; \n"; 
 testfftp << " reg                 ExtValid_in ;  \n";
 testfftp << " //Reconfigurable data in \n";
 testfftp << "\n";
 testfftp << " // Mixed_radix_sel_in    \n";
 testfftp << " // 2'd0: radix-2         \n";
 testfftp << " // 2'd1: radix-4         \n";
 testfftp << " // 2'd2: radix-8         \n";
 testfftp << " // Point_sel_in          \n";
 testfftp << " // 3'd0 : 65536 Point    \n";
 testfftp << " // 3'd1 : 32768 Point    \n";
 testfftp << " // 3'd2 : 16384 Point    \n";
 testfftp << " // 3'd3 :  8192 Point    \n";
 testfftp << " // 3'd4 :  4096 Point    \n";
 testfftp << " // 3'd5 :  2048 Point    \n";
 testfftp << " reg  [CP_WIDTH-1 :0]  Prime;             \n";
 testfftp << " reg  [Pre_WIDTH-1:0]  Pre_computing;     \n";
 testfftp << " reg  [1:0]            MixRadix_sel;      \n";
 testfftp << " reg  [2:0]            Point_sel;         \n";
 testfftp << " reg  [A_WIDTH-1:0]    MA_Configure;      \n";
 testfftp << " reg                   H_MA_sel;          \n";
 testfftp << " reg                   H_SRAM_CEN;        \n";
 testfftp << " reg                   H_SRAM_WEN;        \n";
 testfftp << " reg                   order_SRAM_CEN;    \n"; 
 testfftp << " reg                   order_SRAM_WEN;    \n"; 
 testfftp << " reg  [A_WIDTH-1:0]    order_MA;          \n"; 
 testfftp << " reg                   order_sel;         \n"; 
 testfftp << "//\n";
 testfftp << " reg                rst_n ;\n";
 testfftp << " reg                clk ;  \n";
 testfftp << "\n";
 //--------------------------------------------------------------------------------------------
 //4096
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem_4096[0:POINT_NUM_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S0_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S1_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S2_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S3_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S4_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S5_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S6_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S7_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S0_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S1_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S2_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S3_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S4_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S5_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S6_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S7_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S0_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S1_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S2_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S3_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S0_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S1_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S2_mem_4096[0:ADDR_VALUE_4096-1];\n";
 testfftp << " reg [P_WIDTH-1:0]   IREORD_S3_mem_4096[0:ADDR_VALUE_4096-1];\n"; 
 //--------------------------------------------------------------------------------------------
 //8192
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem_8192[0:POINT_NUM_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S0_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S1_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S2_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S3_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S4_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S5_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S6_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S7_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S0_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S1_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S2_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S3_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S4_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S5_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S6_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S7_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S0_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S1_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S2_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S3_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S0_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S1_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S2_mem_8192[0:ADDR_VALUE_8192-1];\n";
 testfftp << " reg [P_WIDTH-1:0]   IREORD_S3_mem_8192[0:ADDR_VALUE_8192-1];\n"; 
 //-------------------------------------------------------------------------------------------- 
 //16384
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem_16384[0:POINT_NUM_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S0_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S1_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S2_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S3_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S4_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S5_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S6_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S7_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S0_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S1_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S2_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S3_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S4_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S5_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S6_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S7_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S0_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S1_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S2_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S3_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S0_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S1_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S2_mem_16384[0:ADDR_VALUE_16384-1];\n";
 testfftp << " reg [P_WIDTH-1:0]   IREORD_S3_mem_16384[0:ADDR_VALUE_16384-1];\n"; 
 //--------------------------------------------------------------------------------------------
 //32768
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem_32768[0:POINT_NUM_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S0_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S1_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S2_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S3_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S4_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S5_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S6_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S7_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S0_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S1_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S2_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S3_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S4_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S5_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S6_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S7_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S0_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S1_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S2_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S3_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S0_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S1_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S2_mem_32768[0:ADDR_VALUE_32768-1];\n";
 testfftp << " reg [P_WIDTH-1:0]   IREORD_S3_mem_32768[0:ADDR_VALUE_32768-1];\n"; 
 //--------------------------------------------------------------------------------------------
 //65536
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem_65536[0:POINT_NUM_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S0_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S1_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S2_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S3_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S4_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S5_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S6_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S7_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S0_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S1_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S2_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S3_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S4_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S5_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S6_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S7_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S0_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S1_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S2_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]   REORD_S3_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S0_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S1_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S2_mem_65536[0:ADDR_VALUE_65536-1];\n";
 testfftp << " reg [P_WIDTH-1:0]   IREORD_S3_mem_65536[0:ADDR_VALUE_65536-1];\n"; 
 //--------------------------------------------------------------------------------------------  
 testfftp << " //\n";
 testfftp << " integer            i, j ,k,tmp_coverage,tmp_8192,ef,error;\n";
 testfftp << " integer            gd_4096, gd_8192,gd_16384,gd_32768,gd_65536; // golden_data\n";
 testfftp << "\n";
 testfftp << "     //read file\n";
 testfftp << "     initial begin \n";
 // 4096
 testfftp << "     	   $readmemh(A_B0R0_4096,Ext_B0R0_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B0R1_4096,Ext_B0R1_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B0R2_4096,Ext_B0R2_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B0R3_4096,Ext_B0R3_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B0R4_4096,Ext_B0R4_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B0R5_4096,Ext_B0R5_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B0R6_4096,Ext_B0R6_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B0R7_4096,Ext_B0R7_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R0_4096,Ext_B1R0_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R1_4096,Ext_B1R1_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R2_4096,Ext_B1R2_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R3_4096,Ext_B1R3_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R4_4096,Ext_B1R4_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R5_4096,Ext_B1R5_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R6_4096,Ext_B1R6_mem_4096);\n";
 testfftp << "     	   $readmemh(A_B1R7_4096,Ext_B1R7_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S0_4096,H_B0S0_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S1_4096,H_B0S1_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S2_4096,H_B0S2_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S3_4096,H_B0S3_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S4_4096,H_B0S4_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S5_4096,H_B0S5_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S6_4096,H_B0S6_mem_4096);\n";
 testfftp << "         $readmemh(H_B0S7_4096,H_B0S7_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S0_4096,H_B1S0_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S1_4096,H_B1S1_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S2_4096,H_B1S2_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S3_4096,H_B1S3_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S4_4096,H_B1S4_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S5_4096,H_B1S5_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S6_4096,H_B1S6_mem_4096);\n";
 testfftp << "         $readmemh(H_B1S7_4096,H_B1S7_mem_4096);\n";
 testfftp << "         $readmemh(REORD_S0_4096,REORD_S0_mem_4096);\n";
 testfftp << "         $readmemh(REORD_S1_4096,REORD_S1_mem_4096);\n";
 testfftp << "         $readmemh(REORD_S2_4096,REORD_S2_mem_4096);\n";
 testfftp << "         $readmemh(REORD_S3_4096,REORD_S3_mem_4096);\n";
 testfftp << "         $readmemh(IREORD_S0_4096,IREORD_S0_mem_4096);\n";
 testfftp << "         $readmemh(IREORD_S1_4096,IREORD_S1_mem_4096);\n";
 testfftp << "         $readmemh(IREORD_S2_4096,IREORD_S2_mem_4096);\n";
 testfftp << "         $readmemh(IREORD_S3_4096,IREORD_S3_mem_4096);\n";
 // 8192
 testfftp << "     	   $readmemh(A_B0R0_8192,Ext_B0R0_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B0R1_8192,Ext_B0R1_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B0R2_8192,Ext_B0R2_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B0R3_8192,Ext_B0R3_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B0R4_8192,Ext_B0R4_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B0R5_8192,Ext_B0R5_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B0R6_8192,Ext_B0R6_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B0R7_8192,Ext_B0R7_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R0_8192,Ext_B1R0_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R1_8192,Ext_B1R1_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R2_8192,Ext_B1R2_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R3_8192,Ext_B1R3_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R4_8192,Ext_B1R4_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R5_8192,Ext_B1R5_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R6_8192,Ext_B1R6_mem_8192);\n";
 testfftp << "     	   $readmemh(A_B1R7_8192,Ext_B1R7_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S0_8192,H_B0S0_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S1_8192,H_B0S1_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S2_8192,H_B0S2_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S3_8192,H_B0S3_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S4_8192,H_B0S4_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S5_8192,H_B0S5_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S6_8192,H_B0S6_mem_8192);\n";
 testfftp << "         $readmemh(H_B0S7_8192,H_B0S7_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S0_8192,H_B1S0_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S1_8192,H_B1S1_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S2_8192,H_B1S2_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S3_8192,H_B1S3_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S4_8192,H_B1S4_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S5_8192,H_B1S5_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S6_8192,H_B1S6_mem_8192);\n";
 testfftp << "         $readmemh(H_B1S7_8192,H_B1S7_mem_8192);\n";
 testfftp << "         $readmemh(REORD_S0_8192,REORD_S0_mem_8192);\n";
 testfftp << "         $readmemh(REORD_S1_8192,REORD_S1_mem_8192);\n";
 testfftp << "         $readmemh(REORD_S2_8192,REORD_S2_mem_8192);\n";
 testfftp << "         $readmemh(REORD_S3_8192,REORD_S3_mem_8192);\n";
 testfftp << "         $readmemh(IREORD_S0_8192,IREORD_S0_mem_8192);\n";
 testfftp << "         $readmemh(IREORD_S1_8192,IREORD_S1_mem_8192);\n";
 testfftp << "         $readmemh(IREORD_S2_8192,IREORD_S2_mem_8192);\n";
 testfftp << "         $readmemh(IREORD_S3_8192,IREORD_S3_mem_8192);\n";
 //16384
 testfftp << "     	   $readmemh(A_B0R0_16384,Ext_B0R0_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B0R1_16384,Ext_B0R1_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B0R2_16384,Ext_B0R2_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B0R3_16384,Ext_B0R3_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B0R4_16384,Ext_B0R4_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B0R5_16384,Ext_B0R5_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B0R6_16384,Ext_B0R6_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B0R7_16384,Ext_B0R7_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R0_16384,Ext_B1R0_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R1_16384,Ext_B1R1_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R2_16384,Ext_B1R2_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R3_16384,Ext_B1R3_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R4_16384,Ext_B1R4_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R5_16384,Ext_B1R5_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R6_16384,Ext_B1R6_mem_16384);\n";
 testfftp << "     	   $readmemh(A_B1R7_16384,Ext_B1R7_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S0_16384,H_B0S0_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S1_16384,H_B0S1_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S2_16384,H_B0S2_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S3_16384,H_B0S3_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S4_16384,H_B0S4_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S5_16384,H_B0S5_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S6_16384,H_B0S6_mem_16384);\n";
 testfftp << "         $readmemh(H_B0S7_16384,H_B0S7_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S0_16384,H_B1S0_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S1_16384,H_B1S1_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S2_16384,H_B1S2_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S3_16384,H_B1S3_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S4_16384,H_B1S4_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S5_16384,H_B1S5_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S6_16384,H_B1S6_mem_16384);\n";
 testfftp << "         $readmemh(H_B1S7_16384,H_B1S7_mem_16384);\n";
 testfftp << "         $readmemh(REORD_S0_16384,REORD_S0_mem_16384);\n";
 testfftp << "         $readmemh(REORD_S1_16384,REORD_S1_mem_16384);\n";
 testfftp << "         $readmemh(REORD_S2_16384,REORD_S2_mem_16384);\n";
 testfftp << "         $readmemh(REORD_S3_16384,REORD_S3_mem_16384);\n";
 testfftp << "         $readmemh(IREORD_S0_16384,IREORD_S0_mem_16384);\n";
 testfftp << "         $readmemh(IREORD_S1_16384,IREORD_S1_mem_16384);\n";
 testfftp << "         $readmemh(IREORD_S2_16384,IREORD_S2_mem_16384);\n";
 testfftp << "         $readmemh(IREORD_S3_16384,IREORD_S3_mem_16384);\n"; 
 //32768
 testfftp << "     	   $readmemh(A_B0R0_32768,Ext_B0R0_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B0R1_32768,Ext_B0R1_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B0R2_32768,Ext_B0R2_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B0R3_32768,Ext_B0R3_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B0R4_32768,Ext_B0R4_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B0R5_32768,Ext_B0R5_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B0R6_32768,Ext_B0R6_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B0R7_32768,Ext_B0R7_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R0_32768,Ext_B1R0_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R1_32768,Ext_B1R1_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R2_32768,Ext_B1R2_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R3_32768,Ext_B1R3_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R4_32768,Ext_B1R4_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R5_32768,Ext_B1R5_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R6_32768,Ext_B1R6_mem_32768);\n";
 testfftp << "     	   $readmemh(A_B1R7_32768,Ext_B1R7_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S0_32768,H_B0S0_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S1_32768,H_B0S1_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S2_32768,H_B0S2_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S3_32768,H_B0S3_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S4_32768,H_B0S4_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S5_32768,H_B0S5_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S6_32768,H_B0S6_mem_32768);\n";
 testfftp << "         $readmemh(H_B0S7_32768,H_B0S7_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S0_32768,H_B1S0_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S1_32768,H_B1S1_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S2_32768,H_B1S2_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S3_32768,H_B1S3_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S4_32768,H_B1S4_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S5_32768,H_B1S5_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S6_32768,H_B1S6_mem_32768);\n";
 testfftp << "         $readmemh(H_B1S7_32768,H_B1S7_mem_32768);\n";
 testfftp << "         $readmemh(REORD_S0_32768,REORD_S0_mem_32768);\n";
 testfftp << "         $readmemh(REORD_S1_32768,REORD_S1_mem_32768);\n";
 testfftp << "         $readmemh(REORD_S2_32768,REORD_S2_mem_32768);\n";
 testfftp << "         $readmemh(REORD_S3_32768,REORD_S3_mem_32768);\n";
 testfftp << "         $readmemh(IREORD_S0_32768,IREORD_S0_mem_32768);\n";
 testfftp << "         $readmemh(IREORD_S1_32768,IREORD_S1_mem_32768);\n";
 testfftp << "         $readmemh(IREORD_S2_32768,IREORD_S2_mem_32768);\n";
 testfftp << "         $readmemh(IREORD_S3_32768,IREORD_S3_mem_32768);\n";
 //65536
 testfftp << "     	   $readmemh(A_B0R0_65536,Ext_B0R0_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B0R1_65536,Ext_B0R1_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B0R2_65536,Ext_B0R2_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B0R3_65536,Ext_B0R3_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B0R4_65536,Ext_B0R4_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B0R5_65536,Ext_B0R5_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B0R6_65536,Ext_B0R6_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B0R7_65536,Ext_B0R7_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R0_65536,Ext_B1R0_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R1_65536,Ext_B1R1_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R2_65536,Ext_B1R2_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R3_65536,Ext_B1R3_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R4_65536,Ext_B1R4_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R5_65536,Ext_B1R5_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R6_65536,Ext_B1R6_mem_65536);\n";
 testfftp << "     	   $readmemh(A_B1R7_65536,Ext_B1R7_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S0_65536,H_B0S0_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S1_65536,H_B0S1_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S2_65536,H_B0S2_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S3_65536,H_B0S3_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S4_65536,H_B0S4_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S5_65536,H_B0S5_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S6_65536,H_B0S6_mem_65536);\n";
 testfftp << "         $readmemh(H_B0S7_65536,H_B0S7_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S0_65536,H_B1S0_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S1_65536,H_B1S1_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S2_65536,H_B1S2_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S3_65536,H_B1S3_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S4_65536,H_B1S4_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S5_65536,H_B1S5_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S6_65536,H_B1S6_mem_65536);\n";
 testfftp << "         $readmemh(H_B1S7_65536,H_B1S7_mem_65536);\n";
 testfftp << "         $readmemh(REORD_S0_65536,REORD_S0_mem_65536);\n";
 testfftp << "         $readmemh(REORD_S1_65536,REORD_S1_mem_65536);\n";
 testfftp << "         $readmemh(REORD_S2_65536,REORD_S2_mem_65536);\n";
 testfftp << "         $readmemh(REORD_S3_65536,REORD_S3_mem_65536);\n";
 testfftp << "         $readmemh(IREORD_S0_65536,IREORD_S0_mem_65536);\n";
 testfftp << "         $readmemh(IREORD_S1_65536,IREORD_S1_mem_65536);\n";
 testfftp << "         $readmemh(IREORD_S2_65536,IREORD_S2_mem_65536);\n";
 testfftp << "         $readmemh(IREORD_S3_65536,IREORD_S3_mem_65536);\n";  
 //4096 golden data open
 testfftp << "         //golden data\n";
 testfftp << "         k = 0;       \n";
 testfftp << "         gd_4096 = $fopen(golden_file_4096," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd_4096 == 0) begin\n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;\n";
 testfftp << "         end\n";
 testfftp << "         while(!$feof(gd_4096))begin\n";
 testfftp << "             ef = $fscanf(gd_4096 , "<< char_tmp << "%d" << char_tmp << ",golden_mem_4096[k]); \n";
 testfftp << "             k  = k + 1;\n";
 testfftp << "         end\n";
 // 8192 golden data open
 testfftp << "         k = 0;       \n";
 testfftp << "         gd_8192 = $fopen(golden_file_8192," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd_8192 == 0) begin\n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;\n";
 testfftp << "         end\n";
 testfftp << "         while(!$feof(gd_8192))begin\n";
 testfftp << "             ef = $fscanf(gd_8192 , "<< char_tmp << "%d" << char_tmp << ",golden_mem_8192[k]); \n";
 testfftp << "             k  = k + 1;\n";
 testfftp << "         end\n";
 //16384 golden data open
 testfftp << "         k = 0;       \n";
 testfftp << "         gd_16384 = $fopen(golden_file_16384," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd_16384 == 0) begin\n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;\n";
 testfftp << "         end\n";
 testfftp << "         while(!$feof(gd_16384))begin\n";
 testfftp << "             ef = $fscanf(gd_16384 , "<< char_tmp << "%d" << char_tmp << ",golden_mem_16384[k]); \n";
 testfftp << "             k  = k + 1;\n";
 testfftp << "         end\n";
 //32768 golden data open 
 testfftp << "         k = 0;       \n";
 testfftp << "         gd_32768 = $fopen(golden_file_32768," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd_32768 == 0) begin\n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;\n";
 testfftp << "         end\n";
 testfftp << "         while(!$feof(gd_32768))begin\n";
 testfftp << "             ef = $fscanf(gd_32768 , "<< char_tmp << "%d" << char_tmp << ",golden_mem_32768[k]); \n";
 testfftp << "             k  = k + 1;\n";
 testfftp << "         end\n";
 //65536 golden data open
 testfftp << "         k = 0;       \n";
 testfftp << "         gd_65536 = $fopen(golden_file_65536," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd_65536 == 0) begin\n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;\n";
 testfftp << "         end\n";
 testfftp << "         while(!$feof(gd_65536))begin\n";
 testfftp << "             ef = $fscanf(gd_65536 , "<< char_tmp << "%d" << char_tmp << ",golden_mem_65536[k]); \n";
 testfftp << "             k  = k + 1;\n";
 testfftp << "         end\n"; 
 testfftp << "     end\n";
 testfftp << "\n";
 testfftp << " 	//\n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),\n";
 testfftp << " 				.MulD0_out(MulD0_out),\n";
 testfftp << " 				.MulD1_out(MulD1_out),\n";
 testfftp << " 				.MulD2_out(MulD2_out),\n";
 testfftp << " 				.MulD3_out(MulD3_out),\n";
 testfftp << " 				.MulD4_out(MulD4_out),\n";
 testfftp << " 				.MulD5_out(MulD5_out),\n";
 testfftp << " 				.MulD6_out(MulD6_out),\n";
 testfftp << " 				.MulD7_out(MulD7_out),\n";
 testfftp << " 				.MulD8_out(MulD8_out),\n";
 testfftp << " 				.MulD9_out(MulD9_out),\n";
 testfftp << " 				.MulD10_out(MulD10_out),\n";
 testfftp << " 				.MulD11_out(MulD11_out),\n";
 testfftp << " 				.MulD12_out(MulD12_out),\n";
 testfftp << " 				.MulD13_out(MulD13_out),\n";
 testfftp << " 				.MulD14_out(MulD14_out),\n";
 testfftp << " 				.MulD15_out(MulD15_out),\n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),\n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),\n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),\n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),\n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),\n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),\n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),\n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),\n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),\n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),\n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),\n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),\n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),\n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),\n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),\n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),\n";
 testfftp << " 				.N_in(N_in),\n";
 testfftp << " 				.ExtValid_in(ExtValid_in),\n";
 testfftp << "              .Prime(Prime),\n";
 testfftp << "              .Pre_computing(Pre_computing),\n";
 testfftp << "              .MixRadix_sel(MixRadix_sel),\n";
 testfftp << "              .Point_sel(Point_sel),\n";
 testfftp << "              .MA_Configure(MA_Configure),\n";
 testfftp << "              .H_MA_sel(H_MA_sel),\n";
 testfftp << "              .H_SRAM_CEN(H_SRAM_CEN),\n";
 testfftp << "              .H_SRAM_WEN(H_SRAM_WEN),\n";
 testfftp << "              //bank0\n";
 testfftp << "              .H_DATA_B0S0(H_DATA_B0S0),\n";
 testfftp << "              .H_DATA_B0S1(H_DATA_B0S1),\n";
 testfftp << "              .H_DATA_B0S2(H_DATA_B0S2),\n";
 testfftp << "              .H_DATA_B0S3(H_DATA_B0S3),\n";
 testfftp << "              .H_DATA_B0S4(H_DATA_B0S4),\n";
 testfftp << "              .H_DATA_B0S5(H_DATA_B0S5),\n";
 testfftp << "              .H_DATA_B0S6(H_DATA_B0S6),\n";
 testfftp << "              .H_DATA_B0S7(H_DATA_B0S7),\n";
 testfftp << "              //bank1\n";
 testfftp << "              .H_DATA_B1S0(H_DATA_B1S0),\n";
 testfftp << "              .H_DATA_B1S1(H_DATA_B1S1),\n";
 testfftp << "              .H_DATA_B1S2(H_DATA_B1S2),\n";
 testfftp << "              .H_DATA_B1S3(H_DATA_B1S3),\n";
 testfftp << "              .H_DATA_B1S4(H_DATA_B1S4),\n";
 testfftp << "              .H_DATA_B1S5(H_DATA_B1S5),\n";
 testfftp << "              .H_DATA_B1S6(H_DATA_B1S6),\n";
 testfftp << "              .H_DATA_B1S7(H_DATA_B1S7),\n";
 testfftp << "              // order_sram\n";
 testfftp << "              .order_SRAM_CEN(order_SRAM_CEN),\n";
 testfftp << "              .order_SRAM_WEN(order_SRAM_WEN),\n";
 testfftp << "              .order_MA(order_MA),\n";
 testfftp << "              .order_sel(order_sel),\n";
 testfftp << "              //\n";
 testfftp << "              .Reorder_DATA_SRAM0(Reorder_DATA_SRAM0),\n";
 testfftp << "              .Reorder_DATA_SRAM1(Reorder_DATA_SRAM1),\n";
 testfftp << "              .Reorder_DATA_SRAM2(Reorder_DATA_SRAM2),\n";
 testfftp << "              .Reorder_DATA_SRAM3(Reorder_DATA_SRAM3),\n";
 testfftp << "              //\n";
 testfftp << "              .IReorder_DATA_SRAM0(IReorder_DATA_SRAM0),\n";
 testfftp << "              .IReorder_DATA_SRAM1(IReorder_DATA_SRAM1),\n";
 testfftp << "              .IReorder_DATA_SRAM2(IReorder_DATA_SRAM2),\n";
 testfftp << "              .IReorder_DATA_SRAM3(IReorder_DATA_SRAM3),\n";
 testfftp << "              //\n";
 testfftp << " 				.rst_n(rst_n),\n";
 testfftp << " 				.clk(clk)\n";
 testfftp << " 				) ;\n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;\n";
 testfftp << "                                  \n";
 //testfftp << "     //FSDB                       \n";
 //testfftp << " 	initial begin                   \n";
 //testfftp << "          $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 //testfftp << "          $fsdbDumpvars ;\n";
 //testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 //testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 //testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 //testfftp << "          //$fsdbDumpvars(3,test_FFTP) ;\n";
 //testfftp << "          // $fsdbDumpvars(3,test_FFTP); //top level signal\n";
 //testfftp << "          //$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal\n";
 //testfftp << "          //$fsdbDumpvars(1,test_DualECP); //top level signal            \n";
 //testfftp << " 	end\n";
 testfftp << "\n";
 testfftp << " 	initial begin\n";
 testfftp << "\n";
 testfftp << " 		clk = 1 ;\n";
 testfftp << " 		rst_n = 1 ;\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;\n";
 testfftp << " 		ExtB0_D0_in = 0 ;\n";
 testfftp << " 		ExtB0_D1_in = 0 ;\n";
 testfftp << " 		ExtB0_D2_in = 0 ;\n";
 testfftp << " 		ExtB0_D3_in = 0 ;\n";
 testfftp << " 		ExtB0_D4_in = 0 ;\n";
 testfftp << " 		ExtB0_D5_in = 0 ;\n";
 testfftp << " 		ExtB0_D6_in = 0 ;\n";
 testfftp << " 		ExtB0_D7_in = 0 ;\n";
 testfftp << " 		ExtB1_D0_in = 0 ;\n";
 testfftp << " 		ExtB1_D1_in = 0 ;\n";
 testfftp << " 		ExtB1_D2_in = 0 ;\n";
 testfftp << " 		ExtB1_D3_in = 0 ;\n";
 testfftp << " 		ExtB1_D4_in = 0 ;\n";
 testfftp << " 		ExtB1_D5_in = 0 ;\n";
 testfftp << " 		ExtB1_D6_in = 0 ;\n";
 testfftp << " 		ExtB1_D7_in = 0 ;\n";
 testfftp << "      //change with number of points\n";
 //-------------------------------------------------------------
 testfftp << "      //4096 Point configure\n";
 testfftp << "      Prime         = "<< CP_width  <<"'h205bf5;\n";
 testfftp << "      Pre_computing = "<< PRE_width <<"'hfd2882;\n";
 testfftp << "      MixRadix_sel  = 2'd3;\n";
 testfftp << "      Point_sel     = 3'd4;\n";
 testfftp << "      //------------------------------\n";
 testfftp << "      H_MA_sel      = 0;\n";
 testfftp << "      H_SRAM_CEN    = 1'b1;\n";
 testfftp << "      H_SRAM_WEN    = 1'b1;\n";
 testfftp << "      MA_Configure  = 0;\n";
 testfftp << "      H_DATA_B0S0   = 0;\n";
 testfftp << "      H_DATA_B0S1   = 0;\n";
 testfftp << "      H_DATA_B0S2   = 0;\n";
 testfftp << "      H_DATA_B0S3   = 0;\n";
 testfftp << "      H_DATA_B0S4   = 0;\n";
 testfftp << "      H_DATA_B0S5   = 0;\n";
 testfftp << "      H_DATA_B0S6   = 0;\n";
 testfftp << "      H_DATA_B0S7   = 0;\n";
 testfftp << "      H_DATA_B1S0   = 0;\n";
 testfftp << "      H_DATA_B1S1   = 0;\n";
 testfftp << "      H_DATA_B1S2   = 0;\n";
 testfftp << "      H_DATA_B1S3   = 0;\n";
 testfftp << "      H_DATA_B1S4   = 0;\n";
 testfftp << "      H_DATA_B1S5   = 0;\n";
 testfftp << "      H_DATA_B1S6   = 0;\n";
 testfftp << "      H_DATA_B1S7   = 0;\n";
 testfftp << "      order_SRAM_CEN = 1'b1;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "      order_MA       = 0;\n";
 testfftp << "      order_sel      = 0;\n";
 testfftp << "      Reorder_DATA_SRAM0 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM1 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM2 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM3 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM0 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM1 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM2 = 0;\n"; 
 testfftp << "      IReorder_DATA_SRAM3 = 0;\n"; 
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		rst_n = 0 ;\n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << "      // Configure H_SRAM and Reorder SRAM\n";
 testfftp << "      H_MA_sel        = 1'b1;\n";
 testfftp << "      H_SRAM_CEN      = 1'b0;\n";
 testfftp << "      H_SRAM_WEN      = 1'b0;\n";
 testfftp << "      order_sel       = 1'b1;\n";
 testfftp << "      order_SRAM_CEN  = 1'b0;\n";
 testfftp << "      order_SRAM_WEN  = 1'b0;\n";
 testfftp << "      //----------------------\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      // address=0~31\n";
 testfftp << "      for(j=0;j<ADDR_VALUE_4096;j=j+1) begin \n";
 testfftp << "      	//Address \n";
 testfftp << "          MA_Configure = j[A_WIDTH-1:0];\n";
 testfftp << "      	order_MA     = j[A_WIDTH-1:0];\n";
 testfftp << "      	#(CYCLE)\n";
 testfftp << "      	//data\n";
 testfftp << "      	H_DATA_B0S0  = H_B0S0_mem_4096[j] ;   \n";
 testfftp << "          H_DATA_B0S1  = H_B0S1_mem_4096[j] ;\n"; 
 testfftp << "      	H_DATA_B0S2  = H_B0S2_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B0S3  = H_B0S3_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B0S4  = H_B0S4_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B0S5  = H_B0S5_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B0S6  = H_B0S6_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B0S7  = H_B0S7_mem_4096[j] ;\n";      
 testfftp << "\n";
 testfftp << "      	H_DATA_B1S0  = H_B1S0_mem_4096[j] ;\n";
 testfftp << "          H_DATA_B1S1  = H_B1S1_mem_4096[j] ;\n"; 
 testfftp << "      	H_DATA_B1S2  = H_B1S2_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B1S3  = H_B1S3_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B1S4  = H_B1S4_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B1S5  = H_B1S5_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B1S6  = H_B1S6_mem_4096[j] ;\n";      
 testfftp << "      	H_DATA_B1S7  = H_B1S7_mem_4096[j] ;\n";      
 testfftp << "//\n";
 testfftp << "          Reorder_DATA_SRAM0  = REORD_S0_mem_4096[j];\n";
 testfftp << "          Reorder_DATA_SRAM1  = REORD_S1_mem_4096[j];\n";
 testfftp << "          Reorder_DATA_SRAM2  = REORD_S2_mem_4096[j];\n";
 testfftp << "          Reorder_DATA_SRAM3  = REORD_S3_mem_4096[j];\n";
 testfftp << "//\n";
 testfftp << "          IReorder_DATA_SRAM0 = IREORD_S0_mem_4096[j];\n";
 testfftp << "          IReorder_DATA_SRAM1 = IREORD_S1_mem_4096[j];\n";
 testfftp << "          IReorder_DATA_SRAM2 = IREORD_S2_mem_4096[j];\n";
 testfftp << "          IReorder_DATA_SRAM3 = IREORD_S3_mem_4096[j];\n";
 testfftp << "      end	\n";
 testfftp << "\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      H_MA_sel       = 1'b0;\n";
 testfftp << "      H_SRAM_WEN     = 1'b1;\n"; 
 testfftp << "      order_sel      = 1'b0;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "\n";
 testfftp << " 		#(4*CYCLE)\n";
 testfftp << " 		ExtValid_in = 1 ;\n";
 testfftp << "\n";
 testfftp << " 		// address=0~31\n";
 testfftp << " 		for(j=0;j<ADDR_VALUE_4096;j=j+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem_4096[j] ;\n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem_4096[j] ;\n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem_4096[j] ;\n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem_4096[j] ;\n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem_4096[j] ;\n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem_4096[j] ;\n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem_4096[j] ;\n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem_4096[j] ;\n";
 testfftp << "\n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem_4096[j] ;\n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem_4096[j] ;\n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem_4096[j] ;\n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem_4096[j] ;\n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem_4096[j] ;\n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem_4096[j] ;\n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem_4096[j] ;\n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem_4096[j] ;\n";
 testfftp << " 		end\n";
 testfftp << " 		//\n";
 testfftp << "\n";
 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		tmp_coverage = 0;\n";
 testfftp << " 		//\n";
 testfftp << " 		@(posedge MulValid_out)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;\n";
 testfftp << " 		for(i=0; i< test_data_index_over_4096; i=i+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			if(MulD0_out == golden_mem_4096[16*i+0])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD1_out == golden_mem_4096[16*i+1])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD2_out == golden_mem_4096[16*i+2])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD3_out == golden_mem_4096[16*i+3])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD4_out == golden_mem_4096[16*i+4])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD5_out == golden_mem_4096[16*i+5])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD6_out == golden_mem_4096[16*i+6])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD7_out == golden_mem_4096[16*i+7])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD8_out == golden_mem_4096[16*i+8])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD9_out == golden_mem_4096[16*i+9])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD10_out == golden_mem_4096[16*i+10])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD11_out == golden_mem_4096[16*i+11])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD12_out == golden_mem_4096[16*i+12])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD13_out == golden_mem_4096[16*i+13])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD14_out == golden_mem_4096[16*i+14])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD15_out == golden_mem_4096[16*i+15])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 		end\n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF 4096 Point FFT IS COMPLETED  ==== "<<char_tmp<<") ;\n";
 testfftp << " 		$display("<<char_tmp<<"Total error of 4096 Point FFT = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/       \n";
 testfftp << " 		//********************************************************************\n";
 testfftp << " 		//8192 Point\n";
 testfftp << " 		ExtB0_D0_in = 0 ;\n";
 testfftp << " 		ExtB0_D1_in = 0 ;\n";
 testfftp << " 		ExtB0_D2_in = 0 ;\n";
 testfftp << " 		ExtB0_D3_in = 0 ;\n";
 testfftp << " 		ExtB0_D4_in = 0 ;\n";
 testfftp << " 		ExtB0_D5_in = 0 ;\n";
 testfftp << " 		ExtB0_D6_in = 0 ;\n";
 testfftp << " 		ExtB0_D7_in = 0 ;\n";
 testfftp << " 		ExtB1_D0_in = 0 ;\n";
 testfftp << " 		ExtB1_D1_in = 0 ;\n";
 testfftp << " 		ExtB1_D2_in = 0 ;\n";
 testfftp << " 		ExtB1_D3_in = 0 ;\n";
 testfftp << " 		ExtB1_D4_in = 0 ;\n";
 testfftp << " 		ExtB1_D5_in = 0 ;\n";
 testfftp << " 		ExtB1_D6_in = 0 ;\n";
 testfftp << " 		ExtB1_D7_in = 0 ;\n";
 testfftp << "      //8192 Point configure\n";
 testfftp << "      Prime         = "<< CP_width  <<"'h207df9;\n";
 testfftp << "      Pre_computing = "<< PRE_width <<"'hfc1f7b;\n";
 testfftp << "      MixRadix_sel  = 2'd0;\n";
 testfftp << "      Point_sel     = 3'd3;\n";
 testfftp << "      //------------------------------\n";
 testfftp << "      H_MA_sel      = 0;\n";
 testfftp << "      H_SRAM_CEN    = 1'b1;\n";
 testfftp << "      H_SRAM_WEN    = 1'b1;\n";
 testfftp << "      MA_Configure  = 0;\n";
 testfftp << "      H_DATA_B0S0   = 0;\n";
 testfftp << "      H_DATA_B0S1   = 0;\n";
 testfftp << "      H_DATA_B0S2   = 0;\n";
 testfftp << "      H_DATA_B0S3   = 0;\n";
 testfftp << "      H_DATA_B0S4   = 0;\n";
 testfftp << "      H_DATA_B0S5   = 0;\n";
 testfftp << "      H_DATA_B0S6   = 0;\n";
 testfftp << "      H_DATA_B0S7   = 0;\n";
 testfftp << "      H_DATA_B1S0   = 0;\n";
 testfftp << "      H_DATA_B1S1   = 0;\n";
 testfftp << "      H_DATA_B1S2   = 0;\n";
 testfftp << "      H_DATA_B1S3   = 0;\n";
 testfftp << "      H_DATA_B1S4   = 0;\n";
 testfftp << "      H_DATA_B1S5   = 0;\n";
 testfftp << "      H_DATA_B1S6   = 0;\n";
 testfftp << "      H_DATA_B1S7   = 0;\n";
 testfftp << "      order_SRAM_CEN = 1'b1;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "      order_MA       = 0;\n";
 testfftp << "      order_sel      = 0;\n";
 testfftp << "      Reorder_DATA_SRAM0 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM1 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM2 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM3 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM0 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM1 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM2 = 0;\n"; 
 testfftp << "      IReorder_DATA_SRAM3 = 0;\n"; 
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		rst_n = 0 ;\n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << "      // Configure H_SRAM and Reorder SRAM\n";
 testfftp << "      H_MA_sel        = 1'b1;\n";
 testfftp << "      H_SRAM_CEN      = 1'b0;\n";
 testfftp << "      H_SRAM_WEN      = 1'b0;\n";
 testfftp << "      order_sel       = 1'b1;\n";
 testfftp << "      order_SRAM_CEN  = 1'b0;\n";
 testfftp << "      order_SRAM_WEN  = 1'b0;\n";
 testfftp << "      //----------------------\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      // address=0~31\n";
 testfftp << "      for(j=0;j<ADDR_VALUE_8192;j=j+1) begin \n";
 testfftp << "      	//Address \n";
 testfftp << "          MA_Configure = j[A_WIDTH-1:0];\n";
 testfftp << "      	order_MA     = j[A_WIDTH-1:0];\n";
 testfftp << "      	#(CYCLE)\n";
 testfftp << "      	//data\n";
 testfftp << "      	H_DATA_B0S0  = H_B0S0_mem_8192[j] ;   \n";
 testfftp << "          H_DATA_B0S1  = H_B0S1_mem_8192[j] ;\n"; 
 testfftp << "      	H_DATA_B0S2  = H_B0S2_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B0S3  = H_B0S3_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B0S4  = H_B0S4_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B0S5  = H_B0S5_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B0S6  = H_B0S6_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B0S7  = H_B0S7_mem_8192[j] ;\n";      
 testfftp << "\n";
 testfftp << "      	H_DATA_B1S0  = H_B1S0_mem_8192[j] ;\n";
 testfftp << "          H_DATA_B1S1  = H_B1S1_mem_8192[j] ;\n"; 
 testfftp << "      	H_DATA_B1S2  = H_B1S2_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B1S3  = H_B1S3_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B1S4  = H_B1S4_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B1S5  = H_B1S5_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B1S6  = H_B1S6_mem_8192[j] ;\n";      
 testfftp << "      	H_DATA_B1S7  = H_B1S7_mem_8192[j] ;\n";      
 testfftp << "//\n";
 testfftp << "          Reorder_DATA_SRAM0  = REORD_S0_mem_8192[j];\n";
 testfftp << "          Reorder_DATA_SRAM1  = REORD_S1_mem_8192[j];\n";
 testfftp << "          Reorder_DATA_SRAM2  = REORD_S2_mem_8192[j];\n";
 testfftp << "          Reorder_DATA_SRAM3  = REORD_S3_mem_8192[j];\n";
 testfftp << "//\n";
 testfftp << "          IReorder_DATA_SRAM0 = IREORD_S0_mem_8192[j];\n";
 testfftp << "          IReorder_DATA_SRAM1 = IREORD_S1_mem_8192[j];\n";
 testfftp << "          IReorder_DATA_SRAM2 = IREORD_S2_mem_8192[j];\n";
 testfftp << "          IReorder_DATA_SRAM3 = IREORD_S3_mem_8192[j];\n";
 testfftp << "      end	\n";
 testfftp << "\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      H_MA_sel       = 1'b0;\n";
 testfftp << "      H_SRAM_WEN     = 1'b1;\n"; 
 testfftp << "      order_sel      = 1'b0;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "\n";
 testfftp << " 		#(4*CYCLE)\n";
 testfftp << " 		ExtValid_in = 1 ;\n";
 testfftp << "\n";
 testfftp << " 		for(j=0;j<ADDR_VALUE_8192;j=j+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem_8192[j] ;\n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem_8192[j] ;\n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem_8192[j] ;\n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem_8192[j] ;\n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem_8192[j] ;\n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem_8192[j] ;\n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem_8192[j] ;\n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem_8192[j] ;\n";
 testfftp << "\n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem_8192[j] ;\n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem_8192[j] ;\n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem_8192[j] ;\n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem_8192[j] ;\n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem_8192[j] ;\n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem_8192[j] ;\n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem_8192[j] ;\n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem_8192[j] ;\n";
 testfftp << " 		end\n";
 testfftp << " 		//\n";
 testfftp << "\n";
 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		tmp_8192 = 0;\n";
 testfftp << " 		//\n";
 testfftp << " 		@(posedge MulValid_out)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;\n";
 testfftp << " 		for(i=0; i< test_data_index_over_8192; i=i+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			if(MulD0_out == golden_mem_8192[16*i+0])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD1_out == golden_mem_8192[16*i+1])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD2_out == golden_mem_8192[16*i+2])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD3_out == golden_mem_8192[16*i+3])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD4_out == golden_mem_8192[16*i+4])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD5_out == golden_mem_8192[16*i+5])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD6_out == golden_mem_8192[16*i+6])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD7_out == golden_mem_8192[16*i+7])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD8_out == golden_mem_8192[16*i+8])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD9_out == golden_mem_8192[16*i+9])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD10_out == golden_mem_8192[16*i+10])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD11_out == golden_mem_8192[16*i+11])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD12_out == golden_mem_8192[16*i+12])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD13_out == golden_mem_8192[16*i+13])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD14_out == golden_mem_8192[16*i+14])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD15_out == golden_mem_8192[16*i+15])tmp_8192 = tmp_8192 +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 		end\n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF 8192 Point FFT IS COMPLETED  ==== "<<char_tmp<<") ;\n";
 testfftp << " 		$display("<<char_tmp<<"Total error of 8192 Point FFT = %d"<<char_tmp<<",error) ; \n";
 //*******************************************************************************************************************
 //16384 point
 testfftp << " 		ExtB0_D0_in = 0 ;\n";
 testfftp << " 		ExtB0_D1_in = 0 ;\n";
 testfftp << " 		ExtB0_D2_in = 0 ;\n";
 testfftp << " 		ExtB0_D3_in = 0 ;\n";
 testfftp << " 		ExtB0_D4_in = 0 ;\n";
 testfftp << " 		ExtB0_D5_in = 0 ;\n";
 testfftp << " 		ExtB0_D6_in = 0 ;\n";
 testfftp << " 		ExtB0_D7_in = 0 ;\n";
 testfftp << " 		ExtB1_D0_in = 0 ;\n";
 testfftp << " 		ExtB1_D1_in = 0 ;\n";
 testfftp << " 		ExtB1_D2_in = 0 ;\n";
 testfftp << " 		ExtB1_D3_in = 0 ;\n";
 testfftp << " 		ExtB1_D4_in = 0 ;\n";
 testfftp << " 		ExtB1_D5_in = 0 ;\n";
 testfftp << " 		ExtB1_D6_in = 0 ;\n";
 testfftp << " 		ExtB1_D7_in = 0 ;\n";
 testfftp << "      //change with number of points\n";
 //-------------------------------------------------------------
 testfftp << "      //16384 Point configure\n";
 testfftp << "      Prime         = "<< CP_width  <<"'h20befb;\n";
 testfftp << "      Pre_computing = "<< PRE_width <<"'hfa2af6;\n";
 testfftp << "      MixRadix_sel  = 2'd1;\n";
 testfftp << "      Point_sel     = 3'd2;\n";
 testfftp << "      //------------------------------\n";
 testfftp << "      H_MA_sel      = 0;\n";
 testfftp << "      H_SRAM_CEN    = 1'b1;\n";
 testfftp << "      H_SRAM_WEN    = 1'b1;\n";
 testfftp << "      MA_Configure  = 0;\n";
 testfftp << "      H_DATA_B0S0   = 0;\n";
 testfftp << "      H_DATA_B0S1   = 0;\n";
 testfftp << "      H_DATA_B0S2   = 0;\n";
 testfftp << "      H_DATA_B0S3   = 0;\n";
 testfftp << "      H_DATA_B0S4   = 0;\n";
 testfftp << "      H_DATA_B0S5   = 0;\n";
 testfftp << "      H_DATA_B0S6   = 0;\n";
 testfftp << "      H_DATA_B0S7   = 0;\n";
 testfftp << "      H_DATA_B1S0   = 0;\n";
 testfftp << "      H_DATA_B1S1   = 0;\n";
 testfftp << "      H_DATA_B1S2   = 0;\n";
 testfftp << "      H_DATA_B1S3   = 0;\n";
 testfftp << "      H_DATA_B1S4   = 0;\n";
 testfftp << "      H_DATA_B1S5   = 0;\n";
 testfftp << "      H_DATA_B1S6   = 0;\n";
 testfftp << "      H_DATA_B1S7   = 0;\n";
 testfftp << "      order_SRAM_CEN = 1'b1;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "      order_MA       = 0;\n";
 testfftp << "      order_sel      = 0;\n";
 testfftp << "      Reorder_DATA_SRAM0 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM1 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM2 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM3 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM0 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM1 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM2 = 0;\n"; 
 testfftp << "      IReorder_DATA_SRAM3 = 0;\n"; 
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		rst_n = 0 ;\n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << "      // Configure H_SRAM and Reorder SRAM\n";
 testfftp << "      H_MA_sel        = 1'b1;\n";
 testfftp << "      H_SRAM_CEN      = 1'b0;\n";
 testfftp << "      H_SRAM_WEN      = 1'b0;\n";
 testfftp << "      order_sel       = 1'b1;\n";
 testfftp << "      order_SRAM_CEN  = 1'b0;\n";
 testfftp << "      order_SRAM_WEN  = 1'b0;\n";
 testfftp << "      //----------------------\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      // address=0~31\n";
 testfftp << "      for(j=0;j<ADDR_VALUE_16384;j=j+1) begin \n";
 testfftp << "      	//Address \n";
 testfftp << "          MA_Configure = j[A_WIDTH-1:0];\n";
 testfftp << "      	order_MA     = j[A_WIDTH-1:0];\n";
 testfftp << "      	#(CYCLE)\n";
 testfftp << "      	//data\n";
 testfftp << "      	H_DATA_B0S0  = H_B0S0_mem_16384[j] ;   \n";
 testfftp << "          H_DATA_B0S1  = H_B0S1_mem_16384[j] ;\n"; 
 testfftp << "      	H_DATA_B0S2  = H_B0S2_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B0S3  = H_B0S3_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B0S4  = H_B0S4_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B0S5  = H_B0S5_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B0S6  = H_B0S6_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B0S7  = H_B0S7_mem_16384[j] ;\n";      
 testfftp << "\n";
 testfftp << "      	H_DATA_B1S0  = H_B1S0_mem_16384[j] ;\n";
 testfftp << "          H_DATA_B1S1  = H_B1S1_mem_16384[j] ;\n"; 
 testfftp << "      	H_DATA_B1S2  = H_B1S2_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B1S3  = H_B1S3_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B1S4  = H_B1S4_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B1S5  = H_B1S5_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B1S6  = H_B1S6_mem_16384[j] ;\n";      
 testfftp << "      	H_DATA_B1S7  = H_B1S7_mem_16384[j] ;\n";      
 testfftp << "//\n";
 testfftp << "          Reorder_DATA_SRAM0  = REORD_S0_mem_16384[j];\n";
 testfftp << "          Reorder_DATA_SRAM1  = REORD_S1_mem_16384[j];\n";
 testfftp << "          Reorder_DATA_SRAM2  = REORD_S2_mem_16384[j];\n";
 testfftp << "          Reorder_DATA_SRAM3  = REORD_S3_mem_16384[j];\n";
 testfftp << "//\n";
 testfftp << "          IReorder_DATA_SRAM0 = IREORD_S0_mem_16384[j];\n";
 testfftp << "          IReorder_DATA_SRAM1 = IREORD_S1_mem_16384[j];\n";
 testfftp << "          IReorder_DATA_SRAM2 = IREORD_S2_mem_16384[j];\n";
 testfftp << "          IReorder_DATA_SRAM3 = IREORD_S3_mem_16384[j];\n";
 testfftp << "      end	\n";
 testfftp << "\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      H_MA_sel       = 1'b0;\n";
 testfftp << "      H_SRAM_WEN     = 1'b1;\n"; 
 testfftp << "      order_sel      = 1'b0;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "\n";
 testfftp << " 		#(4*CYCLE)\n";
 testfftp << " 		ExtValid_in = 1 ;\n";
 testfftp << "\n";
 testfftp << " 		// address=0~31\n";
 testfftp << " 		for(j=0;j<ADDR_VALUE_16384;j=j+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem_16384[j] ;\n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem_16384[j] ;\n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem_16384[j] ;\n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem_16384[j] ;\n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem_16384[j] ;\n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem_16384[j] ;\n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem_16384[j] ;\n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem_16384[j] ;\n";
 testfftp << "\n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem_16384[j] ;\n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem_16384[j] ;\n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem_16384[j] ;\n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem_16384[j] ;\n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem_16384[j] ;\n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem_16384[j] ;\n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem_16384[j] ;\n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem_16384[j] ;\n";
 testfftp << " 		end\n";
 testfftp << " 		//\n";
 testfftp << "\n";
 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		tmp_coverage = 0;\n";
 testfftp << " 		//\n";
 testfftp << " 		@(posedge MulValid_out)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;\n";
 testfftp << " 		for(i=0; i< test_data_index_over_16384; i=i+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			if(MulD0_out == golden_mem_16384[16*i+0])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD1_out == golden_mem_16384[16*i+1])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD2_out == golden_mem_16384[16*i+2])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD3_out == golden_mem_16384[16*i+3])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD4_out == golden_mem_16384[16*i+4])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD5_out == golden_mem_16384[16*i+5])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD6_out == golden_mem_16384[16*i+6])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD7_out == golden_mem_16384[16*i+7])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD8_out == golden_mem_16384[16*i+8])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD9_out == golden_mem_16384[16*i+9])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD10_out == golden_mem_16384[16*i+10])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD11_out == golden_mem_16384[16*i+11])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD12_out == golden_mem_16384[16*i+12])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD13_out == golden_mem_16384[16*i+13])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD14_out == golden_mem_16384[16*i+14])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD15_out == golden_mem_16384[16*i+15])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 		end\n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF 16384 Point FFT IS COMPLETED  ==== "<<char_tmp<<") ;\n";
 testfftp << " 		$display("<<char_tmp<<"Total error of 16384 Point FFT = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/       \n";
 testfftp << " 		//********************************************************************\n";
 //32768 point
 testfftp << " 		ExtB0_D0_in = 0 ;\n";
 testfftp << " 		ExtB0_D1_in = 0 ;\n";
 testfftp << " 		ExtB0_D2_in = 0 ;\n";
 testfftp << " 		ExtB0_D3_in = 0 ;\n";
 testfftp << " 		ExtB0_D4_in = 0 ;\n";
 testfftp << " 		ExtB0_D5_in = 0 ;\n";
 testfftp << " 		ExtB0_D6_in = 0 ;\n";
 testfftp << " 		ExtB0_D7_in = 0 ;\n";
 testfftp << " 		ExtB1_D0_in = 0 ;\n";
 testfftp << " 		ExtB1_D1_in = 0 ;\n";
 testfftp << " 		ExtB1_D2_in = 0 ;\n";
 testfftp << " 		ExtB1_D3_in = 0 ;\n";
 testfftp << " 		ExtB1_D4_in = 0 ;\n";
 testfftp << " 		ExtB1_D5_in = 0 ;\n";
 testfftp << " 		ExtB1_D6_in = 0 ;\n";
 testfftp << " 		ExtB1_D7_in = 0 ;\n";
 testfftp << "      //change with number of points\n";
 //-------------------------------------------------------------
 testfftp << "      //32768 Point configure\n";
 testfftp << "      Prime         = "<< CP_width  <<"'h207f7f;\n";
 testfftp << "      Pre_computing = "<< PRE_width <<"'hfc13a9;\n";
 testfftp << "      MixRadix_sel  = 2'd2;\n";
 testfftp << "      Point_sel     = 3'd1;\n";
 testfftp << "      //------------------------------\n";
 testfftp << "      H_MA_sel      = 0;\n";
 testfftp << "      H_SRAM_CEN    = 1'b1;\n";
 testfftp << "      H_SRAM_WEN    = 1'b1;\n";
 testfftp << "      MA_Configure  = 0;\n";
 testfftp << "      H_DATA_B0S0   = 0;\n";
 testfftp << "      H_DATA_B0S1   = 0;\n";
 testfftp << "      H_DATA_B0S2   = 0;\n";
 testfftp << "      H_DATA_B0S3   = 0;\n";
 testfftp << "      H_DATA_B0S4   = 0;\n";
 testfftp << "      H_DATA_B0S5   = 0;\n";
 testfftp << "      H_DATA_B0S6   = 0;\n";
 testfftp << "      H_DATA_B0S7   = 0;\n";
 testfftp << "      H_DATA_B1S0   = 0;\n";
 testfftp << "      H_DATA_B1S1   = 0;\n";
 testfftp << "      H_DATA_B1S2   = 0;\n";
 testfftp << "      H_DATA_B1S3   = 0;\n";
 testfftp << "      H_DATA_B1S4   = 0;\n";
 testfftp << "      H_DATA_B1S5   = 0;\n";
 testfftp << "      H_DATA_B1S6   = 0;\n";
 testfftp << "      H_DATA_B1S7   = 0;\n";
 testfftp << "      order_SRAM_CEN = 1'b1;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "      order_MA       = 0;\n";
 testfftp << "      order_sel      = 0;\n";
 testfftp << "      Reorder_DATA_SRAM0 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM1 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM2 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM3 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM0 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM1 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM2 = 0;\n"; 
 testfftp << "      IReorder_DATA_SRAM3 = 0;\n"; 
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		rst_n = 0 ;\n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << "      // Configure H_SRAM and Reorder SRAM\n";
 testfftp << "      H_MA_sel        = 1'b1;\n";
 testfftp << "      H_SRAM_CEN      = 1'b0;\n";
 testfftp << "      H_SRAM_WEN      = 1'b0;\n";
 testfftp << "      order_sel       = 1'b1;\n";
 testfftp << "      order_SRAM_CEN  = 1'b0;\n";
 testfftp << "      order_SRAM_WEN  = 1'b0;\n";
 testfftp << "      //----------------------\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      // address=0~31\n";
 testfftp << "      for(j=0;j<ADDR_VALUE_32768;j=j+1) begin \n";
 testfftp << "      	//Address \n";
 testfftp << "          MA_Configure = j[A_WIDTH-1:0];\n";
 testfftp << "      	order_MA     = j[A_WIDTH-1:0];\n";
 testfftp << "      	#(CYCLE)\n";
 testfftp << "      	//data\n";
 testfftp << "      	H_DATA_B0S0  = H_B0S0_mem_32768[j] ;   \n";
 testfftp << "          H_DATA_B0S1  = H_B0S1_mem_32768[j] ;\n"; 
 testfftp << "      	H_DATA_B0S2  = H_B0S2_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B0S3  = H_B0S3_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B0S4  = H_B0S4_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B0S5  = H_B0S5_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B0S6  = H_B0S6_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B0S7  = H_B0S7_mem_32768[j] ;\n";      
 testfftp << "\n";
 testfftp << "      	H_DATA_B1S0  = H_B1S0_mem_32768[j] ;\n";
 testfftp << "          H_DATA_B1S1  = H_B1S1_mem_32768[j] ;\n"; 
 testfftp << "      	H_DATA_B1S2  = H_B1S2_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B1S3  = H_B1S3_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B1S4  = H_B1S4_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B1S5  = H_B1S5_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B1S6  = H_B1S6_mem_32768[j] ;\n";      
 testfftp << "      	H_DATA_B1S7  = H_B1S7_mem_32768[j] ;\n";      
 testfftp << "//\n";
 testfftp << "          Reorder_DATA_SRAM0  = REORD_S0_mem_32768[j];\n";
 testfftp << "          Reorder_DATA_SRAM1  = REORD_S1_mem_32768[j];\n";
 testfftp << "          Reorder_DATA_SRAM2  = REORD_S2_mem_32768[j];\n";
 testfftp << "          Reorder_DATA_SRAM3  = REORD_S3_mem_32768[j];\n";
 testfftp << "//\n";
 testfftp << "          IReorder_DATA_SRAM0 = IREORD_S0_mem_32768[j];\n";
 testfftp << "          IReorder_DATA_SRAM1 = IREORD_S1_mem_32768[j];\n";
 testfftp << "          IReorder_DATA_SRAM2 = IREORD_S2_mem_32768[j];\n";
 testfftp << "          IReorder_DATA_SRAM3 = IREORD_S3_mem_32768[j];\n";
 testfftp << "      end	\n";
 testfftp << "\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      H_MA_sel       = 1'b0;\n";
 testfftp << "      H_SRAM_WEN     = 1'b1;\n"; 
 testfftp << "      order_sel      = 1'b0;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "\n";
 testfftp << " 		#(4*CYCLE)\n";
 testfftp << " 		ExtValid_in = 1 ;\n";
 testfftp << "\n";
 testfftp << " 		// address=0~31\n";
 testfftp << " 		for(j=0;j<ADDR_VALUE_32768;j=j+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem_32768[j] ;\n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem_32768[j] ;\n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem_32768[j] ;\n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem_32768[j] ;\n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem_32768[j] ;\n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem_32768[j] ;\n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem_32768[j] ;\n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem_32768[j] ;\n";
 testfftp << "\n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem_32768[j] ;\n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem_32768[j] ;\n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem_32768[j] ;\n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem_32768[j] ;\n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem_32768[j] ;\n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem_32768[j] ;\n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem_32768[j] ;\n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem_32768[j] ;\n";
 testfftp << " 		end\n";
 testfftp << " 		//\n";
 testfftp << "\n";
 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		tmp_coverage = 0;\n";
 testfftp << " 		//\n";
 testfftp << " 		@(posedge MulValid_out)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;\n";
 testfftp << " 		for(i=0; i< test_data_index_over_32768; i=i+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			if(MulD0_out == golden_mem_32768[16*i+0])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD1_out == golden_mem_32768[16*i+1])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD2_out == golden_mem_32768[16*i+2])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD3_out == golden_mem_32768[16*i+3])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD4_out == golden_mem_32768[16*i+4])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD5_out == golden_mem_32768[16*i+5])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD6_out == golden_mem_32768[16*i+6])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD7_out == golden_mem_32768[16*i+7])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD8_out == golden_mem_32768[16*i+8])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD9_out == golden_mem_32768[16*i+9])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD10_out == golden_mem_32768[16*i+10])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD11_out == golden_mem_32768[16*i+11])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD12_out == golden_mem_32768[16*i+12])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD13_out == golden_mem_32768[16*i+13])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD14_out == golden_mem_32768[16*i+14])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD15_out == golden_mem_32768[16*i+15])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 		end\n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF 32768 Point FFT IS COMPLETED  ==== "<<char_tmp<<") ;\n";
 testfftp << " 		$display("<<char_tmp<<"Total error of 32768 Point FFT = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/       \n";
 testfftp << " 		//********************************************************************\n";
 //65536 point
 testfftp << " 		ExtB0_D0_in = 0 ;\n";
 testfftp << " 		ExtB0_D1_in = 0 ;\n";
 testfftp << " 		ExtB0_D2_in = 0 ;\n";
 testfftp << " 		ExtB0_D3_in = 0 ;\n";
 testfftp << " 		ExtB0_D4_in = 0 ;\n";
 testfftp << " 		ExtB0_D5_in = 0 ;\n";
 testfftp << " 		ExtB0_D6_in = 0 ;\n";
 testfftp << " 		ExtB0_D7_in = 0 ;\n";
 testfftp << " 		ExtB1_D0_in = 0 ;\n";
 testfftp << " 		ExtB1_D1_in = 0 ;\n";
 testfftp << " 		ExtB1_D2_in = 0 ;\n";
 testfftp << " 		ExtB1_D3_in = 0 ;\n";
 testfftp << " 		ExtB1_D4_in = 0 ;\n";
 testfftp << " 		ExtB1_D5_in = 0 ;\n";
 testfftp << " 		ExtB1_D6_in = 0 ;\n";
 testfftp << " 		ExtB1_D7_in = 0 ;\n";
 testfftp << "      //change with number of points\n";
 //-------------------------------------------------------------
 testfftp << "      //65536 Point configure\n";
 testfftp << "      Prime         = "<< CP_width  <<"'h20ffbf;\n";
 testfftp << "      Pre_computing = "<< PRE_width <<"'hf83ff8;\n";
 testfftp << "      MixRadix_sel  = 2'd3;\n";
 testfftp << "      Point_sel     = 3'd0;\n";
 testfftp << "      //------------------------------\n";
 testfftp << "      H_MA_sel      = 0;\n";
 testfftp << "      H_SRAM_CEN    = 1'b1;\n";
 testfftp << "      H_SRAM_WEN    = 1'b1;\n";
 testfftp << "      MA_Configure  = 0;\n";
 testfftp << "      H_DATA_B0S0   = 0;\n";
 testfftp << "      H_DATA_B0S1   = 0;\n";
 testfftp << "      H_DATA_B0S2   = 0;\n";
 testfftp << "      H_DATA_B0S3   = 0;\n";
 testfftp << "      H_DATA_B0S4   = 0;\n";
 testfftp << "      H_DATA_B0S5   = 0;\n";
 testfftp << "      H_DATA_B0S6   = 0;\n";
 testfftp << "      H_DATA_B0S7   = 0;\n";
 testfftp << "      H_DATA_B1S0   = 0;\n";
 testfftp << "      H_DATA_B1S1   = 0;\n";
 testfftp << "      H_DATA_B1S2   = 0;\n";
 testfftp << "      H_DATA_B1S3   = 0;\n";
 testfftp << "      H_DATA_B1S4   = 0;\n";
 testfftp << "      H_DATA_B1S5   = 0;\n";
 testfftp << "      H_DATA_B1S6   = 0;\n";
 testfftp << "      H_DATA_B1S7   = 0;\n";
 testfftp << "      order_SRAM_CEN = 1'b1;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "      order_MA       = 0;\n";
 testfftp << "      order_sel      = 0;\n";
 testfftp << "      Reorder_DATA_SRAM0 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM1 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM2 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM3 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM0 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM1 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM2 = 0;\n"; 
 testfftp << "      IReorder_DATA_SRAM3 = 0;\n"; 
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		rst_n = 0 ;\n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << "      // Configure H_SRAM and Reorder SRAM\n";
 testfftp << "      H_MA_sel        = 1'b1;\n";
 testfftp << "      H_SRAM_CEN      = 1'b0;\n";
 testfftp << "      H_SRAM_WEN      = 1'b0;\n";
 testfftp << "      order_sel       = 1'b1;\n";
 testfftp << "      order_SRAM_CEN  = 1'b0;\n";
 testfftp << "      order_SRAM_WEN  = 1'b0;\n";
 testfftp << "      //----------------------\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      // address=0~31\n";
 testfftp << "      for(j=0;j<ADDR_VALUE_65536;j=j+1) begin \n";
 testfftp << "      	//Address \n";
 testfftp << "          MA_Configure = j[A_WIDTH-1:0];\n";
 testfftp << "      	order_MA     = j[A_WIDTH-1:0];\n";
 testfftp << "      	#(CYCLE)\n";
 testfftp << "      	//data\n";
 testfftp << "      	H_DATA_B0S0  = H_B0S0_mem_65536[j] ;   \n";
 testfftp << "          H_DATA_B0S1  = H_B0S1_mem_65536[j] ;\n"; 
 testfftp << "      	H_DATA_B0S2  = H_B0S2_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B0S3  = H_B0S3_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B0S4  = H_B0S4_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B0S5  = H_B0S5_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B0S6  = H_B0S6_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B0S7  = H_B0S7_mem_65536[j] ;\n";      
 testfftp << "\n";
 testfftp << "      	H_DATA_B1S0  = H_B1S0_mem_65536[j] ;\n";
 testfftp << "          H_DATA_B1S1  = H_B1S1_mem_65536[j] ;\n"; 
 testfftp << "      	H_DATA_B1S2  = H_B1S2_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B1S3  = H_B1S3_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B1S4  = H_B1S4_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B1S5  = H_B1S5_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B1S6  = H_B1S6_mem_65536[j] ;\n";      
 testfftp << "      	H_DATA_B1S7  = H_B1S7_mem_65536[j] ;\n";      
 testfftp << "//\n";
 testfftp << "          Reorder_DATA_SRAM0  = REORD_S0_mem_65536[j];\n";
 testfftp << "          Reorder_DATA_SRAM1  = REORD_S1_mem_65536[j];\n";
 testfftp << "          Reorder_DATA_SRAM2  = REORD_S2_mem_65536[j];\n";
 testfftp << "          Reorder_DATA_SRAM3  = REORD_S3_mem_65536[j];\n";
 testfftp << "//\n";
 testfftp << "          IReorder_DATA_SRAM0 = IREORD_S0_mem_65536[j];\n";
 testfftp << "          IReorder_DATA_SRAM1 = IREORD_S1_mem_65536[j];\n";
 testfftp << "          IReorder_DATA_SRAM2 = IREORD_S2_mem_65536[j];\n";
 testfftp << "          IReorder_DATA_SRAM3 = IREORD_S3_mem_65536[j];\n";
 testfftp << "      end	\n";
 testfftp << "\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      H_MA_sel       = 1'b0;\n";
 testfftp << "      H_SRAM_WEN     = 1'b1;\n"; 
 testfftp << "      order_sel      = 1'b0;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "\n";
 testfftp << " 		#(4*CYCLE)\n";
 testfftp << " 		ExtValid_in = 1 ;\n";
 testfftp << "\n";
 testfftp << " 		// address=0~31\n";
 testfftp << " 		for(j=0;j<ADDR_VALUE_65536;j=j+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem_65536[j] ;\n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem_65536[j] ;\n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem_65536[j] ;\n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem_65536[j] ;\n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem_65536[j] ;\n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem_65536[j] ;\n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem_65536[j] ;\n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem_65536[j] ;\n";
 testfftp << "\n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem_65536[j] ;\n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem_65536[j] ;\n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem_65536[j] ;\n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem_65536[j] ;\n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem_65536[j] ;\n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem_65536[j] ;\n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem_65536[j] ;\n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem_65536[j] ;\n";
 testfftp << " 		end\n";
 testfftp << " 		//\n";
 testfftp << "\n";
 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		tmp_coverage = 0;\n";
 testfftp << " 		//\n";
 testfftp << " 		@(posedge MulValid_out)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		@(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << "      @(posedge clk)\n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;\n";
 testfftp << " 		for(i=0; i< test_data_index_over_65536; i=i+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			if(MulD0_out == golden_mem_65536[16*i+0])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD1_out == golden_mem_65536[16*i+1])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD2_out == golden_mem_65536[16*i+2])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD3_out == golden_mem_65536[16*i+3])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD4_out == golden_mem_65536[16*i+4])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD5_out == golden_mem_65536[16*i+5])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD6_out == golden_mem_65536[16*i+6])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD7_out == golden_mem_65536[16*i+7])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD8_out == golden_mem_65536[16*i+8])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD9_out == golden_mem_65536[16*i+9])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD10_out == golden_mem_65536[16*i+10])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD11_out == golden_mem_65536[16*i+11])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD12_out == golden_mem_65536[16*i+12])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD13_out == golden_mem_65536[16*i+13])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD14_out == golden_mem_65536[16*i+14])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 			if(MulD15_out == golden_mem_65536[16*i+15])tmp_coverage = tmp_coverage +1;\n";
 testfftp << " 			else begin\n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 			end\n";
 testfftp << " 		end\n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF 65536 Point FFT IS COMPLETED  ==== "<<char_tmp<<") ;\n";
 testfftp << " 		$display("<<char_tmp<<"Total error of 65536 Point FFT = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/       \n";
 testfftp << " 		//********************************************************************\n"; 
 testfftp << " 		#(10*CYCLE)\n";
 testfftp << " 		$finish ;\n";
 testfftp << " 	end\n";
 testfftp << "\n";
 testfftp << " endmodule\n";
 testfftp.close();
}
void FFTC::testfftp_Reconfigure_syn_r16(){
     std::ofstream testfftp("./syn_tcl/test_FFTP.v");
     char char_tmp = 34; // ascii code 32 = 
 testfftp << " //==================================================                     \n";
 testfftp << " //Writer     : shiyong wu                                                \n";
 testfftp << " //Date       : 2020/06/18                                                \n";
 testfftp << " //Note       : testbench for Configurable BFFT Processor                 \n";
 testfftp << " //==================================================                     \n";
 testfftp << "                                                                          \n";
 testfftp << "  `include "<< char_tmp << "FFTP_pipe_syn.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "SRAM_SP_2048_64.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "SRAM_SP_2048_128.v"        << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM0_4096_64.v"            << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM1_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM2_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM3_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM4_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM5_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM6_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "ROM7_4096_128.v"           << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR0_4096_64.v"          << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR1_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR2_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR3_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR4_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR5_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR6_4096_128.v"         << char_tmp << "   \n";
 testfftp << "  `include "<< char_tmp << "IFFTR7_4096_128.v"         << char_tmp << "   \n";
 //--------------------------------------------------------------------------------
 testfftp << "  `include "<< char_tmp << "TWIpipe.v"                << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "TWIMux.v"                 << char_tmp << "  \n";
 testfftp << "  `include "<< char_tmp << "/opt/CIC/share/CBDK_TSMC90GUTM_Arm_f1.0/CIC/Verilog/tsmc090.v"          << char_tmp << "\n";
 testfftp << "\n";
 testfftp << " `timescale 1 ns/1 ps\n";
 testfftp << "\n";
 testfftp << " module test_FFTP ;\n";
 
 double period;
 period =  ((1 / (double)Freq) * 1000);
 
 testfftp << " parameter CYCLE     = "<< period <<"  ;\n";
 testfftp << " parameter P_WIDTH   = 64 ;\n";
 testfftp << " parameter SD_WIDTH  = 128;\n";
 testfftp << " parameter A_WIDTH   = 11 ;\n";
 
 double test_data_index_over ;
 int m_tmp,radix_tmp;
 m_tmp     = (int) m;
 radix_tmp = (int) radix;
 //std::cout << "m: " << m <<"\n";
 //std::cout << "phi_m: " << phi_m <<"\n";
 test_data_index_over = (double) m_tmp / radix_tmp;
 //std::cout << "test_data_index_over: " << test_data_index_over << "\n";
 test_data_index_over = ceil(test_data_index_over);
 
 testfftp << " parameter test_data_index_over = "<< test_data_index_over <<";\n";
 testfftp << " parameter CP_WIDTH  = " << CP_width  << ";  // original prime or small prime		2020/04/09	\n";
 testfftp << " parameter Pre_WIDTH = " << PRE_width << ";  	                                                \n";
 testfftp << " parameter POINT_NUM = " << fft_point << "; // total number of point                          \n";
 testfftp << " parameter BF_POINT_NUM = 16 ; // butterfly number of point                                   \n";
 long   INI_VALUE;
 long   ADDR_VALUE;
 INI_VALUE  = fft_point / radix;
 ADDR_VALUE = fft_point /(2*radix);
 testfftp << " parameter INI_VALUE = " << INI_VALUE  << "; //(POINT_NUM/BF_POINT_NUM)\n";
 testfftp << " parameter ADDR_VALUE =" << ADDR_VALUE << "; //(POINT_NUM/(BF_POINT_NUM*2))\n";
 testfftp << "                                                                                 \n";
 testfftp << " parameter H_B0S0  = "<< char_tmp << "./data/H_b0SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S1  = "<< char_tmp << "./data/H_b0SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S2  = "<< char_tmp << "./data/H_b0SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S3  = "<< char_tmp << "./data/H_b0SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S4  = "<< char_tmp << "./data/H_b0SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S5  = "<< char_tmp << "./data/H_b0SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S6  = "<< char_tmp << "./data/H_b0SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B0S7  = "<< char_tmp << "./data/H_b0SRAM7.txt"   << char_tmp << ";  \n";
 testfftp << "                                                                                 \n";
 testfftp << " parameter H_B1S0  = "<< char_tmp << "./data/H_b1SRAM0.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S1  = "<< char_tmp << "./data/H_b1SRAM1.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S2  = "<< char_tmp << "./data/H_b1SRAM2.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S3  = "<< char_tmp << "./data/H_b1SRAM3.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S4  = "<< char_tmp << "./data/H_b1SRAM4.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S5  = "<< char_tmp << "./data/H_b1SRAM5.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S6  = "<< char_tmp << "./data/H_b1SRAM6.txt"   << char_tmp << ";  \n";
 testfftp << " parameter H_B1S7  = "<< char_tmp << "./data/H_b1SRAM7.txt"   << char_tmp << ";  \n"; 
 testfftp << "                                                                                 \n";
 testfftp << " parameter REORD_S0  = "<< char_tmp << "./data/Reorder_SRAM0.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S1  = "<< char_tmp << "./data/Reorder_SRAM1.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S2  = "<< char_tmp << "./data/Reorder_SRAM2.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter REORD_S3  = "<< char_tmp << "./data/Reorder_SRAM3.txt"   << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S0 = "<< char_tmp << "./data/IReorder_SRAM0.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S1 = "<< char_tmp << "./data/IReorder_SRAM1.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S2 = "<< char_tmp << "./data/IReorder_SRAM2.txt"  << char_tmp << ";\n"; 
 testfftp << " parameter IREORD_S3 = "<< char_tmp << "./data/IReorder_SRAM3.txt"  << char_tmp << ";\n"; 
 testfftp << "                                                                                 \n";
 testfftp << " parameter golden_file = "<< char_tmp << "./data/test_golden.txt" << char_tmp << ";\n";
 testfftp << " parameter A_B0R0  = "<< char_tmp << "./data/A_b0radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R1  = "<< char_tmp << "./data/A_b0radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R2  = "<< char_tmp << "./data/A_b0radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R3  = "<< char_tmp << "./data/A_b0radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R4  = "<< char_tmp << "./data/A_b0radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R5  = "<< char_tmp << "./data/A_b0radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R6  = "<< char_tmp << "./data/A_b0radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B0R7  = "<< char_tmp << "./data/A_b0radix7.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R0  = "<< char_tmp << "./data/A_b1radix0.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R1  = "<< char_tmp << "./data/A_b1radix1.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R2  = "<< char_tmp << "./data/A_b1radix2.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R3  = "<< char_tmp << "./data/A_b1radix3.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R4  = "<< char_tmp << "./data/A_b1radix4.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R5  = "<< char_tmp << "./data/A_b1radix5.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R6  = "<< char_tmp << "./data/A_b1radix6.txt"  << char_tmp << ";  \n";
 testfftp << " parameter A_B1R7  = "<< char_tmp << "./data/A_b1radix7.txt"  << char_tmp << ";  \n";
 testfftp << " \n";
 testfftp << " \n";
 testfftp << " wire                MulValid_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD0_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD1_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD2_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD3_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD4_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD5_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD6_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD7_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD8_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD9_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD10_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD11_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD12_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD13_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD14_out ;\n";
 testfftp << " wire [CP_WIDTH-1:0] MulD15_out ;\n";
 testfftp << "\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB0_D7_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D0_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D1_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D2_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D3_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D4_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D5_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D6_in ;\n";
 testfftp << " reg  [CP_WIDTH-1:0] ExtB1_D7_in ;\n";
 testfftp << " reg  [P_WIDTH-1:0] N_in ;         \n";
 testfftp << " reg                ExtValid_in ;  \n";
 testfftp << " //Reconfigurable data in \n";
 testfftp << "\n";
 testfftp << " // Mixed_radix_sel_in    \n";
 testfftp << " // 2'd0: radix-2         \n";
 testfftp << " // 2'd1: radix-4         \n";
 testfftp << " // 2'd2: radix-8         \n";
 testfftp << " // Point_sel_in          \n";
 testfftp << " // 3'd0 : 65536 Point    \n";
 testfftp << " // 3'd1 : 32768 Point    \n";
 testfftp << " // 3'd2 : 16384 Point    \n";
 testfftp << " // 3'd3 :  8192 Point    \n";
 testfftp << " // 3'd4 :  4096 Point    \n";
 testfftp << " // 3'd5 :  2048 Point    \n";
 testfftp << "reg  [CP_WIDTH-1 :0]  Prime;             \n";
 testfftp << "reg  [Pre_WIDTH-1:0]  Pre_computing;     \n";
 testfftp << "reg  [1:0]            MixRadix_sel;      \n";
 testfftp << "reg  [2:0]            Point_sel;         \n";
 testfftp << "reg  [A_WIDTH-1:0]    MA_Configure;      \n";
 testfftp << "reg                   H_MA_sel;          \n";
 testfftp << "reg                   H_SRAM_CEN;        \n";
 testfftp << "reg                   H_SRAM_WEN;        \n";
 testfftp << "//\n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S0;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S1;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S2;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S3;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S4;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S5;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S6;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B0S7;         \n";
 testfftp << "//\n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S0;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S1;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S2;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S3;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S4;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S5;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S6;         \n";
 testfftp << "reg  [SD_WIDTH-1:0] H_DATA_B1S7;         \n";
 testfftp << "//\n";
 testfftp << "reg                 order_SRAM_CEN;      \n";
 testfftp << "reg                 order_SRAM_WEN;      \n";
 testfftp << "reg  [A_WIDTH-1:0]  order_MA;            \n";
 testfftp << "reg                 order_sel;           \n";
 testfftp << "//\n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM0;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM1;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM2;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] Reorder_DATA_SRAM3;  \n";
 testfftp << "reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM0; \n";
 testfftp << "reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM1; \n";
 testfftp << "reg  [SD_WIDTH-1:0] IReorder_DATA_SRAM2; \n";
 testfftp << "reg  [P_WIDTH-1:0]  IReorder_DATA_SRAM3; \n";
 testfftp << "//\n";
 testfftp << " reg                rst_n ;\n";
 testfftp << " reg                clk ;  \n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " reg [CP_WIDTH-1:0]  golden_mem[0:POINT_NUM-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R2_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R3_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R4_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R5_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R6_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B0R7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R2_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R3_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R4_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R5_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R6_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [CP_WIDTH-1:0]  Ext_B1R7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " //---------------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S0_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S1_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S2_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S4_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S5_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S6_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B0S7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " //------\n";
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S0_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S1_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S2_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S4_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S5_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S6_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [SD_WIDTH-1:0]  H_B1S7_mem[0:ADDR_VALUE-1];\n";
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S2_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  REORD_S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " //\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S0_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S1_mem[0:ADDR_VALUE-1];\n";
 testfftp << " reg [SD_WIDTH-1:0]  IREORD_S2_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " reg [P_WIDTH-1:0]   IREORD_S3_mem[0:ADDR_VALUE-1];\n"; 
 testfftp << " //\n";
 testfftp << " integer            i, j ,k ,ef,error;\n";
 testfftp << " integer            gd; // golden_data\n";
 testfftp << "\n";
 testfftp << "     //read file\n";
 testfftp << "     initial begin \n";
 testfftp << "     	   $readmemh(A_B0R0,Ext_B0R0_mem);\n";
 testfftp << "     	   $readmemh(A_B0R1,Ext_B0R1_mem);\n";
 testfftp << "     	   $readmemh(A_B0R2,Ext_B0R2_mem);\n";
 testfftp << "     	   $readmemh(A_B0R3,Ext_B0R3_mem);\n";
 testfftp << "     	   $readmemh(A_B0R4,Ext_B0R4_mem);\n";
 testfftp << "     	   $readmemh(A_B0R5,Ext_B0R5_mem);\n";
 testfftp << "     	   $readmemh(A_B0R6,Ext_B0R6_mem);\n";
 testfftp << "     	   $readmemh(A_B0R7,Ext_B0R7_mem);\n";
 testfftp << "     	   $readmemh(A_B1R0,Ext_B1R0_mem);\n";
 testfftp << "     	   $readmemh(A_B1R1,Ext_B1R1_mem);\n";
 testfftp << "     	   $readmemh(A_B1R2,Ext_B1R2_mem);\n";
 testfftp << "     	   $readmemh(A_B1R3,Ext_B1R3_mem);\n";
 testfftp << "     	   $readmemh(A_B1R4,Ext_B1R4_mem);\n";
 testfftp << "     	   $readmemh(A_B1R5,Ext_B1R5_mem);\n";
 testfftp << "     	   $readmemh(A_B1R6,Ext_B1R6_mem);\n";
 testfftp << "     	   $readmemh(A_B1R7,Ext_B1R7_mem);\n";
 testfftp << "         //----\n";
 testfftp << "         $readmemh(H_B0S0,H_B0S0_mem);\n";
 testfftp << "         $readmemh(H_B0S1,H_B0S1_mem);\n";
 testfftp << "         $readmemh(H_B0S2,H_B0S2_mem);\n";
 testfftp << "         $readmemh(H_B0S3,H_B0S3_mem);\n";
 testfftp << "         $readmemh(H_B0S4,H_B0S4_mem);\n";
 testfftp << "         $readmemh(H_B0S5,H_B0S5_mem);\n";
 testfftp << "         $readmemh(H_B0S6,H_B0S6_mem);\n";
 testfftp << "         $readmemh(H_B0S7,H_B0S7_mem);\n";
 testfftp << "         //\n";
 testfftp << "         $readmemh(H_B1S0,H_B1S0_mem);\n";
 testfftp << "         $readmemh(H_B1S1,H_B1S1_mem);\n";
 testfftp << "         $readmemh(H_B1S2,H_B1S2_mem);\n";
 testfftp << "         $readmemh(H_B1S3,H_B1S3_mem);\n";
 testfftp << "         $readmemh(H_B1S4,H_B1S4_mem);\n";
 testfftp << "         $readmemh(H_B1S5,H_B1S5_mem);\n";
 testfftp << "         $readmemh(H_B1S6,H_B1S6_mem);\n";
 testfftp << "         $readmemh(H_B1S7,H_B1S7_mem);\n";
 testfftp << "         //\n";
 testfftp << "         $readmemh(REORD_S0,REORD_S0_mem);\n";
 testfftp << "         $readmemh(REORD_S1,REORD_S1_mem);\n";
 testfftp << "         $readmemh(REORD_S2,REORD_S2_mem);\n";
 testfftp << "         $readmemh(REORD_S3,REORD_S3_mem);\n";
 testfftp << "         //\n";
 testfftp << "         $readmemh(IREORD_S0,IREORD_S0_mem);\n";
 testfftp << "         $readmemh(IREORD_S1,IREORD_S1_mem);\n";
 testfftp << "         $readmemh(IREORD_S2,IREORD_S2_mem);\n";
 testfftp << "         $readmemh(IREORD_S3,IREORD_S3_mem);\n";
 testfftp << "         //golden data\n";
 testfftp << "         k = 0;       \n";
 testfftp << "         gd = $fopen(golden_file," << char_tmp << "r"<< char_tmp << ");\n";
 testfftp << "         if(gd == 0) begin\n";
 testfftp << "             $display(" << char_tmp << "read file open error !" << char_tmp <<");\n";
 testfftp << "             $finish;\n";
 testfftp << "         end\n";
 testfftp << "         while(!$feof(gd))begin\n";
 testfftp << "             ef = $fscanf(gd , "<< char_tmp << "%d" << char_tmp << ",golden_mem[k]); \n";
 testfftp << "             k  = k + 1;\n";
 testfftp << "         end\n";
 testfftp << "     end\n";
 testfftp << "\n";
 testfftp << " 	//\n";
 testfftp << " 	FFTP u_FFTP(.MulValid_out(MulValid_out),\n";
 testfftp << " 				.MulD0_out(MulD0_out),\n";
 testfftp << " 				.MulD1_out(MulD1_out),\n";
 testfftp << " 				.MulD2_out(MulD2_out),\n";
 testfftp << " 				.MulD3_out(MulD3_out),\n";
 testfftp << " 				.MulD4_out(MulD4_out),\n";
 testfftp << " 				.MulD5_out(MulD5_out),\n";
 testfftp << " 				.MulD6_out(MulD6_out),\n";
 testfftp << " 				.MulD7_out(MulD7_out),\n";
 testfftp << " 				.MulD8_out(MulD8_out),\n";
 testfftp << " 				.MulD9_out(MulD9_out),\n";
 testfftp << " 				.MulD10_out(MulD10_out),\n";
 testfftp << " 				.MulD11_out(MulD11_out),\n";
 testfftp << " 				.MulD12_out(MulD12_out),\n";
 testfftp << " 				.MulD13_out(MulD13_out),\n";
 testfftp << " 				.MulD14_out(MulD14_out),\n";
 testfftp << " 				.MulD15_out(MulD15_out),\n";
 testfftp << " 				.ExtB0_D0_in(ExtB0_D0_in),\n";
 testfftp << " 				.ExtB0_D1_in(ExtB0_D1_in),\n";
 testfftp << " 				.ExtB0_D2_in(ExtB0_D2_in),\n";
 testfftp << " 				.ExtB0_D3_in(ExtB0_D3_in),\n";
 testfftp << " 				.ExtB0_D4_in(ExtB0_D4_in),\n";
 testfftp << " 				.ExtB0_D5_in(ExtB0_D5_in),\n";
 testfftp << " 				.ExtB0_D6_in(ExtB0_D6_in),\n";
 testfftp << " 				.ExtB0_D7_in(ExtB0_D7_in),\n";
 testfftp << " 				.ExtB1_D0_in(ExtB1_D0_in),\n";
 testfftp << " 				.ExtB1_D1_in(ExtB1_D1_in),\n";
 testfftp << " 				.ExtB1_D2_in(ExtB1_D2_in),\n";
 testfftp << " 				.ExtB1_D3_in(ExtB1_D3_in),\n";
 testfftp << " 				.ExtB1_D4_in(ExtB1_D4_in),\n";
 testfftp << " 				.ExtB1_D5_in(ExtB1_D5_in),\n";
 testfftp << " 				.ExtB1_D6_in(ExtB1_D6_in),\n";
 testfftp << " 				.ExtB1_D7_in(ExtB1_D7_in),\n";
 testfftp << " 				.N_in(N_in),\n";
 testfftp << " 				.ExtValid_in(ExtValid_in),\n";
 testfftp << "              .Prime(Prime),\n";
 testfftp << "              .Pre_computing(Pre_computing),\n";
 testfftp << "              .MixRadix_sel(MixRadix_sel),\n";
 testfftp << "              .Point_sel(Point_sel),\n";
 testfftp << "              .MA_Configure(MA_Configure),\n";
 testfftp << "              .H_MA_sel(H_MA_sel),\n";
 testfftp << "              .H_SRAM_CEN(H_SRAM_CEN),\n";
 testfftp << "              .H_SRAM_WEN(H_SRAM_WEN),\n";
 testfftp << "              //bank0\n";
 testfftp << "              .H_DATA_B0S0(H_DATA_B0S0),\n";
 testfftp << "              .H_DATA_B0S1(H_DATA_B0S1),\n";
 testfftp << "              .H_DATA_B0S2(H_DATA_B0S2),\n";
 testfftp << "              .H_DATA_B0S3(H_DATA_B0S3),\n";
 testfftp << "              .H_DATA_B0S4(H_DATA_B0S4),\n";
 testfftp << "              .H_DATA_B0S5(H_DATA_B0S5),\n";
 testfftp << "              .H_DATA_B0S6(H_DATA_B0S6),\n";
 testfftp << "              .H_DATA_B0S7(H_DATA_B0S7),\n";
 testfftp << "              //bank1\n";
 testfftp << "              .H_DATA_B1S0(H_DATA_B1S0),\n";
 testfftp << "              .H_DATA_B1S1(H_DATA_B1S1),\n";
 testfftp << "              .H_DATA_B1S2(H_DATA_B1S2),\n";
 testfftp << "              .H_DATA_B1S3(H_DATA_B1S3),\n";
 testfftp << "              .H_DATA_B1S4(H_DATA_B1S4),\n";
 testfftp << "              .H_DATA_B1S5(H_DATA_B1S5),\n";
 testfftp << "              .H_DATA_B1S6(H_DATA_B1S6),\n";
 testfftp << "              .H_DATA_B1S7(H_DATA_B1S7),\n";
 testfftp << "              // order_sram\n";
 testfftp << "              .order_SRAM_CEN(order_SRAM_CEN),\n";
 testfftp << "              .order_SRAM_WEN(order_SRAM_WEN),\n";
 testfftp << "              .order_MA(order_MA),\n";
 testfftp << "              .order_sel(order_sel),\n";
 testfftp << "              //\n";
 testfftp << "              .Reorder_DATA_SRAM0(Reorder_DATA_SRAM0),\n";
 testfftp << "              .Reorder_DATA_SRAM1(Reorder_DATA_SRAM1),\n";
 testfftp << "              .Reorder_DATA_SRAM2(Reorder_DATA_SRAM2),\n";
 testfftp << "              .Reorder_DATA_SRAM3(Reorder_DATA_SRAM3),\n";
 testfftp << "              //\n";
 testfftp << "              .IReorder_DATA_SRAM0(IReorder_DATA_SRAM0),\n";
 testfftp << "              .IReorder_DATA_SRAM1(IReorder_DATA_SRAM1),\n";
 testfftp << "              .IReorder_DATA_SRAM2(IReorder_DATA_SRAM2),\n";
 testfftp << "              .IReorder_DATA_SRAM3(IReorder_DATA_SRAM3),\n";
 testfftp << "              //\n";
 testfftp << " 				.rst_n(rst_n),\n";
 testfftp << " 				.clk(clk)\n";
 testfftp << " 				) ;\n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " 	always #(0.5*CYCLE) clk = ~clk ;\n";
 testfftp << "                                  \n";
 testfftp << "                                  \n";
 testfftp << "     //FSDB                       \n";
 testfftp << " 	initial begin                   \n";
 testfftp << "          $fsdbDumpfile("<< char_tmp << "FFTP.fsdb"<<char_tmp<<"); \n";
 testfftp << "          $fsdbDumpvars ;\n";
 testfftp << "          $dumpfile("<<char_tmp << "FFTP.vcd"<< char_tmp<<");\n";
 testfftp << "          $shm_open("<<char_tmp << "FFTP.shm"<< char_tmp<<");\n";
 testfftp << "          $shm_probe(test_FFTP.u_FFTP, "<<char_tmp << "ASCM" <<char_tmp<<"); \n";
 testfftp << "          //$fsdbDumpvars(3,test_FFTP) ;\n";
 testfftp << "          // $fsdbDumpvars(3,test_FFTP); //top level signal\n";
 testfftp << "          //$fsdbDumpvars("<<char_tmp<<"+mda"<<char_tmp<<"); //all signal\n";
 testfftp << "          //$fsdbDumpvars(1,test_DualECP); //top level signal            \n";
 testfftp << " 	end\n";
 testfftp << "     \n";
 testfftp << "  initial  begin\n";
 testfftp << "     $sdf_annotate(" << char_tmp <<"FFTP_pipe.sdf"<<char_tmp<<",u_FFTP);\n";
 testfftp << "  end\n";
 testfftp << "     \n";
 testfftp << " 	initial begin\n";
 testfftp << "\n";
 testfftp << " 		clk = 1 ;\n";
 testfftp << " 		rst_n = 1 ;\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		N_in = 64'hFFFFFFFF_00000001 ;\n";
 testfftp << " 		ExtB0_D0_in = 0 ;\n";
 testfftp << " 		ExtB0_D1_in = 0 ;\n";
 testfftp << " 		ExtB0_D2_in = 0 ;\n";
 testfftp << " 		ExtB0_D3_in = 0 ;\n";
 testfftp << " 		ExtB0_D4_in = 0 ;\n";
 testfftp << " 		ExtB0_D5_in = 0 ;\n";
 testfftp << " 		ExtB0_D6_in = 0 ;\n";
 testfftp << " 		ExtB0_D7_in = 0 ;\n";
 testfftp << " 		ExtB1_D0_in = 0 ;\n";
 testfftp << " 		ExtB1_D1_in = 0 ;\n";
 testfftp << " 		ExtB1_D2_in = 0 ;\n";
 testfftp << " 		ExtB1_D3_in = 0 ;\n";
 testfftp << " 		ExtB1_D4_in = 0 ;\n";
 testfftp << " 		ExtB1_D5_in = 0 ;\n";
 testfftp << " 		ExtB1_D6_in = 0 ;\n";
 testfftp << " 		ExtB1_D7_in = 0 ;\n";
 testfftp << "      //change with number of points\n";
 // Mixed_radix_sel_in 
 // 2'd0: radix-2 
 // 2'd1: radix-4  
 // 2'd2: radix-8 
 // Point_sel_in 
 // 3'd0 : 65536 Point
 // 3'd1 : 32768 Point
 // 3'd2 : 16384 Point
 // 3'd3 :  8192 Point
 // 3'd4 :  4096 Point

 //*******************************************
 int  mix_radix_sel;
 int  point_sel;
 if(fft_point == 4096){
     mix_radix_sel = 3; // 2'd3: radix-16
	 point_sel     = 4; // 3'd4 :  4096 Point
 } 	 
 if(fft_point == 8192){
     mix_radix_sel = 0; // 2'd0: radix-2
	 point_sel     = 3; // 3'd3 :  8192 Point
 } 	 	 
 if(fft_point == 16384){
     mix_radix_sel = 1; // 2'd1: radix-4
	 point_sel     = 2; // 3'd2 :  16384 Point
 }
 if(fft_point == 32768){
     mix_radix_sel = 2; // 2'd2: radix-8
	 point_sel     = 1; // 3'd1 :  32768 Point
 } 
 if(fft_point == 65536){
     mix_radix_sel = 3; // 2'd3: radix-16
	 point_sel     = 0; // 3'd0 :  65536 Point
 } 	  
 //hex 
 std::string  prime_hex;
 std::string  pre_computing_hex;
 prime_hex = ZZtohex(cyclotomic_prime,CP_width);
 pre_computing_hex = ZZtohex(pre_computing,PRE_width);
 //-------------------------------------------------------------
 testfftp << "      //change with number of points\n";
 //-------------------------------------------------------------
 testfftp << "      Prime         = "<< CP_width  <<"'h"<< prime_hex <<";\n";
 testfftp << "      Pre_computing = "<< PRE_width <<"'h"<< pre_computing_hex <<";\n";
 testfftp << "      MixRadix_sel  = 2'h"<< mix_radix_sel <<";\n";
 testfftp << "      Point_sel     = 3'h"<< point_sel     <<";\n";
 testfftp << "      //\n";
 testfftp << "      \n";
 testfftp << "      H_MA_sel      = 0;\n";
 testfftp << "      H_SRAM_CEN    = 1'b1;\n";
 testfftp << "      H_SRAM_WEN    = 1'b1;\n";
 testfftp << "      MA_Configure  = 0;\n";
 testfftp << "      H_DATA_B0S0   = 0;\n";
 testfftp << "      H_DATA_B0S1   = 0;\n";
 testfftp << "      H_DATA_B0S2   = 0;\n";
 testfftp << "      H_DATA_B0S3   = 0;\n";
 testfftp << "      H_DATA_B0S4   = 0;\n";
 testfftp << "      H_DATA_B0S5   = 0;\n";
 testfftp << "      H_DATA_B0S6   = 0;\n";
 testfftp << "      H_DATA_B0S7   = 0;\n";
 testfftp << "      //\n";
 testfftp << "      H_DATA_B1S0   = 0;\n";
 testfftp << "      H_DATA_B1S1   = 0;\n";
 testfftp << "      H_DATA_B1S2   = 0;\n";
 testfftp << "      H_DATA_B1S3   = 0;\n";
 testfftp << "      H_DATA_B1S4   = 0;\n";
 testfftp << "      H_DATA_B1S5   = 0;\n";
 testfftp << "      H_DATA_B1S6   = 0;\n";
 testfftp << "      H_DATA_B1S7   = 0;\n";
 testfftp << "      //\n";
 testfftp << "      order_SRAM_CEN = 1'b1;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "      order_MA       = 0;\n";
 testfftp << "      order_sel      = 0;\n";
 testfftp << "      //\n";
 testfftp << "      Reorder_DATA_SRAM0 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM1 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM2 = 0;\n";
 testfftp << "      Reorder_DATA_SRAM3 = 0;\n";
 testfftp << "      //\n";
 testfftp << "      IReorder_DATA_SRAM0 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM1 = 0;\n";
 testfftp << "      IReorder_DATA_SRAM2 = 0;\n"; 
 testfftp << "      IReorder_DATA_SRAM3 = 0;\n"; 

 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		rst_n = 0 ;\n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(3.1*CYCLE)                                                                                                            \n";
 testfftp << " 		rst_n = 1 ;                                                                                                             \n";
 testfftp << "      // Configure H_SRAM and Reorder SRAM\n";
 testfftp << "      H_MA_sel        = 1'b1;\n";
 testfftp << "      H_SRAM_CEN      = 1'b0;\n";
 testfftp << "      H_SRAM_WEN      = 1'b0;\n";
 testfftp << "      order_sel       = 1'b1;\n";
 testfftp << "      order_SRAM_CEN  = 1'b0;\n";
 testfftp << "      order_SRAM_WEN  = 1'b0;\n";
 testfftp << "      //----------------------\n";
 testfftp << "      //----------------------\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      // address=0~31\n";
 testfftp << "      for(j=0;j<ADDR_VALUE;j=j+1) begin \n";
 testfftp << "      	//Address \n";
 testfftp << "          MA_Configure = j[A_WIDTH-1:0];\n";
 testfftp << "      	order_MA     = j[A_WIDTH-1:0];\n";
 testfftp << "      	#(CYCLE)\n";
 testfftp << "      	//data\n";
 testfftp << "      	H_DATA_B0S0  = H_B0S0_mem[j] ;   \n";
 testfftp << "          H_DATA_B0S1  = H_B0S1_mem[j] ;\n"; 
 testfftp << "      	H_DATA_B0S2  = H_B0S2_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S3  = H_B0S3_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S4  = H_B0S4_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S5  = H_B0S5_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S6  = H_B0S6_mem[j] ;\n";      
 testfftp << "      	H_DATA_B0S7  = H_B0S7_mem[j] ;\n";      
 testfftp << "\n";
 testfftp << "      	H_DATA_B1S0  = H_B1S0_mem[j] ;\n";
 testfftp << "          H_DATA_B1S1  = H_B1S1_mem[j] ;\n"; 
 testfftp << "      	H_DATA_B1S2  = H_B1S2_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S3  = H_B1S3_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S4  = H_B1S4_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S5  = H_B1S5_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S6  = H_B1S6_mem[j] ;\n";      
 testfftp << "      	H_DATA_B1S7  = H_B1S7_mem[j] ;\n";      
 testfftp << "//\n";
 testfftp << "          Reorder_DATA_SRAM0  = REORD_S0_mem[j];\n";
 testfftp << "          Reorder_DATA_SRAM1  = REORD_S1_mem[j];\n";
 testfftp << "          Reorder_DATA_SRAM2  = REORD_S2_mem[j];\n";
 testfftp << "          Reorder_DATA_SRAM3  = REORD_S3_mem[j];\n";
 testfftp << "//\n";
 testfftp << "          IReorder_DATA_SRAM0 = IREORD_S0_mem[j];\n";
 testfftp << "          IReorder_DATA_SRAM1 = IREORD_S1_mem[j];\n";
 testfftp << "          IReorder_DATA_SRAM2 = IREORD_S2_mem[j];\n";
 testfftp << "          IReorder_DATA_SRAM3 = IREORD_S3_mem[j];\n";
 testfftp << "      end	\n";
 testfftp << "\n";
 testfftp << "      #(CYCLE)\n";
 testfftp << "      H_MA_sel       = 1'b0;\n";
 testfftp << "      H_SRAM_WEN     = 1'b1;\n"; 
 testfftp << "      order_sel      = 1'b0;\n";
 testfftp << "      order_SRAM_WEN = 1'b1;\n";
 testfftp << "\n";
 testfftp << " 		#(4*CYCLE)\n";
 testfftp << " 		ExtValid_in = 1 ;\n";
 testfftp << "\n";
 testfftp << " 		// address=0~31\n";
 testfftp << " 		for(j=0;j<ADDR_VALUE;j=j+1) begin\n";
 testfftp << " 			#(CYCLE)\n";
 testfftp << " 			ExtB0_D0_in  = Ext_B0R0_mem[j] ;\n";
 testfftp << "          ExtB0_D1_in  = Ext_B0R1_mem[j] ;\n";
 testfftp << " 			ExtB0_D2_in  = Ext_B0R2_mem[j] ;\n";
 testfftp << " 			ExtB0_D3_in  = Ext_B0R3_mem[j] ;\n";
 testfftp << " 			ExtB0_D4_in  = Ext_B0R4_mem[j] ;\n";
 testfftp << " 			ExtB0_D5_in  = Ext_B0R5_mem[j] ;\n";
 testfftp << " 			ExtB0_D6_in  = Ext_B0R6_mem[j] ;\n";
 testfftp << " 			ExtB0_D7_in  = Ext_B0R7_mem[j] ;\n";
 testfftp << "\n";
 testfftp << "\n";
 testfftp << " 			ExtB1_D0_in  = Ext_B1R0_mem[j] ;\n";
 testfftp << " 			ExtB1_D1_in  = Ext_B1R1_mem[j] ;\n";
 testfftp << " 			ExtB1_D2_in  = Ext_B1R2_mem[j] ;\n";
 testfftp << " 			ExtB1_D3_in  = Ext_B1R3_mem[j] ;\n";
 testfftp << " 			ExtB1_D4_in  = Ext_B1R4_mem[j] ;\n";
 testfftp << " 			ExtB1_D5_in  = Ext_B1R5_mem[j] ;\n";
 testfftp << " 			ExtB1_D6_in  = Ext_B1R6_mem[j] ;\n";
 testfftp << " 			ExtB1_D7_in  = Ext_B1R7_mem[j] ;\n";
 testfftp << "\n";
 testfftp << " 		end\n";
 testfftp << " 		//\n";
 testfftp << "\n";
 testfftp << " 		//\n";
 testfftp << " 		#(CYCLE)\n";
 testfftp << " 		ExtValid_in = 0 ;\n";
 testfftp << " 		error = 0;\n";
 testfftp << " 		//\n";
 testfftp << " 		@(posedge MulValid_out)                                                                                                 \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		@(posedge clk)                                                                                                          \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << "      @(posedge clk)                                                                                                       \n";
 testfftp << " 		$display(" << char_tmp << " ==== Check Final Result  ==== "<< char_tmp << ") ;          \n";
 testfftp << " 		for(i=0; i< test_data_index_over; i=i+1) begin                                                                       \n";
 testfftp << " 			#(CYCLE)        //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD0_out == golden_mem[16*i+0]) $display("<<char_tmp<<"MulD0_out[%d] = %d"<<char_tmp<<", 16*i,MulD0_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD0_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i,MulD0_out,16*i,golden_mem[16*i]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			                //Mul_Result_Golden                                                                                 \n";
 testfftp << " 			if(MulD1_out == golden_mem[16*i+1]) $display("<<char_tmp<<"MulD1_out[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out) ; \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD1_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+1,MulD1_out,16*i+1,golden_mem[16*i +1] ) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD2_out == golden_mem[16*i+2]) $display("<<char_tmp<<"MulD2_out[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out) ;\n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD2_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+2,MulD2_out,16*i+2,golden_mem[16*i + 2]) ;\n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << "                             //Mul_Result_Golden                                                                              \n";
 testfftp << " 			if(MulD3_out == golden_mem[16*i+3]) $display("<<char_tmp << "MulD3_out[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD3_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+3,MulD3_out,16*i+3,golden_mem[16*i + 3]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD4_out == golden_mem[16*i+4]) $display("<<char_tmp << "MulD4_out[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD4_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+4,MulD4_out,16*i+4,golden_mem[16*i + 4]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD5_out == golden_mem[16*i+5]) $display("<<char_tmp << "MulD5_out[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD5_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+5,MulD5_out,16*i+5,golden_mem[16*i + 5]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD6_out == golden_mem[16*i+6]) $display("<<char_tmp << "MulD6_out[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD6_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+6,MulD6_out,16*i+6,golden_mem[16*i + 6]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD7_out == golden_mem[16*i+7]) $display("<<char_tmp << "MulD7_out[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD7_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+7,MulD7_out,16*i+7,golden_mem[16*i + 7]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD8_out == golden_mem[16*i+8]) $display("<<char_tmp << "MulD8_out[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD8_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+8,MulD8_out,16*i+8,golden_mem[16*i + 8]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD9_out == golden_mem[16*i+9]) $display("<<char_tmp << "MulD9_out[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD9_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+9,MulD9_out,16*i+9,golden_mem[16*i + 9]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD10_out == golden_mem[16*i+10]) $display("<<char_tmp << "MulD10_out[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD10_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+10,MulD10_out,16*i+10,golden_mem[16*i + 10]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD11_out == golden_mem[16*i+11]) $display("<<char_tmp << "MulD11_out[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD11_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+11,MulD11_out,16*i+11,golden_mem[16*i + 11]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD12_out == golden_mem[16*i+12]) $display("<<char_tmp << "MulD12_out[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD12_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+12,MulD12_out,16*i+12,golden_mem[16*i + 12]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD13_out == golden_mem[16*i+13]) $display("<<char_tmp << "MulD13_out[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD13_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+13,MulD13_out,16*i+13,golden_mem[16*i + 13]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD14_out == golden_mem[16*i+14]) $display("<<char_tmp << "MulD14_out[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD14_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+14,MulD14_out,16*i+14,golden_mem[16*i + 14]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 			if(MulD15_out == golden_mem[16*i+15]) $display("<<char_tmp << "MulD15_out[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out) ;  \n";
 testfftp << " 			else begin                                                                                                          \n";
 testfftp << " 				error = error + 1;\n";
 testfftp << " 				$display("<<char_tmp<<"MulD15_out[%d] = %d, Mul_Result_Golden[%d] = %d"<<char_tmp<<", 16*i+15,MulD15_out,16*i+15,golden_mem[16*i + 15]) ; \n";
 testfftp << " 				//$stop ;                                                                                                       \n";
 testfftp << " 			end                                                                                                                 \n";
 testfftp << " 		end                                                                                                                     \n";
 testfftp << " 		$display("<<char_tmp<<"  ==== VERFICATION OF MULTIPLCIATION IS COMPLETED  ==== "<<char_tmp<<") ;  \n";
 testfftp << " 		$display("<<char_tmp<<"Total error = %d"<<char_tmp<<",error) ; \n";
 testfftp << " 		//*/                                                                                                                    \n";
 testfftp << " 		                                                                                                                        \n";
 testfftp << " 		#(10*CYCLE)   		                                                                                                    \n";
 testfftp << " 		$finish ;                                                                                                               \n";
 testfftp << " 	end                                                                                                                         \n";
 testfftp << " 	                                                                                                                            \n";
 testfftp << " endmodule                                                                                                                    \n";
 testfftp.close();
}
// FFTP (TOP) module generate
void FFTC::FFTP_r4(std::string string_in){
	 std::ofstream fftp_r4;
     int no_address_tmp;
     no_address_tmp = exp2(addr_width-1); //number of address
     std::string        string_buf = "SRAM_SP_";
     std::stringstream  ss;
	 // For Mux-8 SRAM Max Word size is 4096 , then need word size is bigger than 4096 ,
	 // We need to  divide SRAM.  So this is a check constriant.
     if( (no_address_tmp * 2) > 4096) ss << string_buf << no_address_tmp <<"_128";
     else ss << string_buf << (no_address_tmp * 2) << "_128";
	 std::cout << "---->SRAM_NAME: "<<ss.str() <<"\n";
     //input file
     std::string string_fp = "/FFTP.v"; //file position 
     std::stringstream ss_fp;
     ss_fp << string_in << string_fp;
	 fftp_r4.open(ss_fp.str());
fftp_r4 << " //==================================================                                                                       \n";
fftp_r4 << " //                                                                                                                                     \n";
fftp_r4 << " //Date       : 2018/8/1  //modify 2020/3/11                                                                                \n";
fftp_r4 << " //Note       : FFT Processor                                                                                               \n";
fftp_r4 << " //==================================================                                                                       \n";
fftp_r4 << " `timescale 1 ns/1 ps                                                                                                       \n";
fftp_r4 << " module FFTP(MulValid_out,                                                                                                  \n";
fftp_r4 << "             MulD0_out,                                                                                                     \n";
fftp_r4 << "             MulD1_out,                                                                                                     \n";
fftp_r4 << "             MulD2_out,                                                                                                     \n";
fftp_r4 << "             MulD3_out,                                                                                                     \n";
fftp_r4 << "             ExtB0_D0_in,                                                                                                   \n";
fftp_r4 << "             ExtB0_D1_in,                                                                                                   \n";
fftp_r4 << "             ExtB0_D2_in,                                                                                                   \n";
fftp_r4 << "             ExtB0_D3_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D0_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D1_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D2_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D3_in,                                                                                                   \n";
fftp_r4 << "             N_in,                                                                                                          \n";
fftp_r4 << "             ExtValid_in,                                                                                                   \n";
fftp_r4 << "             rst_n,                                                                                                         \n";
fftp_r4 << "             clk                                                                                                            \n";
fftp_r4 << "             ) ;                                                                                                            \n";
fftp_r4 << " 			                                                                                                                \n";
fftp_r4 << " parameter CP_WIDTH  = "   << CP_width           << ";\n";
fftp_r4 << " parameter DOP_WIDTH = "   << (2*CP_width)       << ";\n";
fftp_r4 << " parameter HP_WIDTH  = 32 ;//half prime data bits 			                                                                                    \n";
fftp_r4 << " parameter P_WIDTH   = 64 ; 			                                                                                    \n";
fftp_r4 << " parameter A_WIDTH   = "   << addr_width     << ";                                                                          \n";
fftp_r4 << " parameter SD_WIDTH  = 128 ;                                                                                                \n";
fftp_r4 << " parameter ROMA_WIDTH  = " << ROM_width      << ";                                                                          \n";     
fftp_r4 << " parameter IREMA_WIDTH = " << (IReROM_width )<< ";\n";
fftp_r4 << " parameter DC_WIDTH    = " << data_cnt_width << ";                                                                          \n";          
fftp_r4 << " parameter RDC_WIDTH   = 2 ;                                                                                                \n";
fftp_r4 << " parameter OUT_PIPE_WIDTH   = "<< 64-(2*CP_width) <<";                                                                                                \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " output                MulValid_out ;                                                                                       \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD0_out ;                                                                                          \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD1_out ;                                                                                          \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD2_out ;                                                                                          \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD3_out ;                                                                                          \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                         \n";
fftp_r4 << " input  [P_WIDTH-1:0]  N_in ;                                                                                                \n";
fftp_r4 << " input                 ExtValid_in ;                                                                                         \n";
fftp_r4 << " input                 rst_n ;                                                                                               \n";
fftp_r4 << " input                 clk ;                                                                                                 \n";
fftp_r4 << " //============================================= \n";
fftp_r4 << " //twiddle factor fft type data                  \n";
if((no_address_tmp * 2) > 4096){
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r0_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r1_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r2_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r3_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r0_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r1_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r2_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r3_wire;              \n";
	fftp_r4 << "                                             \n";
}else {
	fftp_r4 << " wire [SD_WIDTH-1:0]  b0ROM0_wire;              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  b0ROM1_wire;              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  b1ROM0_wire;              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  b1ROM1_wire;              \n";
	fftp_r4 << "                                                 \n";
}
fftp_r4 << " wire 				 BN_TWI_wire;                \n";
fftp_r4 << " wire [A_WIDTH-1:0]  MA_TWI_wire;                \n";
fftp_r4 << "                                                 \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix0_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix1_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix2_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix3_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix0_pip_wire;         \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix1_pip_wire;         \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix2_pip_wire;         \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix3_pip_wire;         \n";
fftp_r4 << "  //r4_inpipeReg wire============================    \n";
fftp_r4 << "                                                     \n";
fftp_r4 << "  wire                ExtValid_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D0_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D1_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D2_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D3_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D0_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D1_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D2_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D3_wire  ;               \n";
fftp_r4 << "                                                     \n";
fftp_r4 << "  //-----------------------------------              \n";
fftp_r4 << "  wire  [A_WIDTH-1:0] REMA_wire;                  \n";
fftp_r4 << "  wire  [IREMA_WIDTH-1:0] IREMA;                  \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D0_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D1_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D2_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D3_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D0_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D1_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D2_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D3_pip_wire ;        \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M0_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M1_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M2_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M3_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M0_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M1_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M2_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M3_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M0_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M1_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M2_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M3_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M0_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M1_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M2_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M3_b_o_wire;             \n";  
fftp_r4 << "                                                  \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M0_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M1_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M2_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M3_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M0_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M1_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M2_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M3_result_wire;          \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S0_wire;                \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S1_wire;                \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S2_wire;                \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S3_wire;                \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM0_wire;          \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM1_wire;          \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  ireorderROM0_wire;         \n";

if( 4 * CP_width > 96)fftp_r4 << "  wire  [P_WIDTH-1:0] ireorderROM1_wire;  \n";
else fftp_r4 << "  wire  [HP_WIDTH-1:0] ireorderROM1_wire;         \n";

fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM0_wire_reg_in;   \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM1_wire_reg_in;   \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  ireorderROM0_wire_reg_in;  \n";

if( 4 * CP_width > 96)fftp_r4 << "  wire  [P_WIDTH-1:0] ireorderROM1_wire_reg_in;  \n";
else fftp_r4 << "  wire  [HP_WIDTH-1:0] ireorderROM1_wire_reg_in;  \n";

fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r0;                \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r1;                \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r2;                \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r3;                \n";
fftp_r4 << "  //pipe1                                                \n";
fftp_r4 << "  //pipe 2  the data for BR input                 \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD0_pip_wire;      \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD1_pip_wire;      \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD2_pip_wire;      \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD3_pip_wire;      \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR0_pip_wire;        \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR1_pip_wire;        \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR2_pip_wire;        \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR3_pip_wire;        \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire                 BND_wire_pipo ;            \n";
fftp_r4 << "  wire [DC_WIDTH-1:0]  data_cnt_wire_pipo ;       \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  //==============================================\n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
            //bank0 memory0
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out0 ;                                                                                           \n";
           // bank0 memory1
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out1 ;                                                                                           \n";
           //bank1 memory0
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out2 ;                                                                                           \n";
          //bank1 memory1
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out3 ;                                                                                           \n";
fftp_r4 << " wire                 cen_wire ;                                                                                            \n";
fftp_r4 << " wire                 wen0_wire ;                                                                                           \n";
fftp_r4 << " wire                 wen1_wire ;                                                                                           \n";
fftp_r4 << " wire [2:0]           ema_wire ;                                                                                            \n";
fftp_r4 << " wire                 SD_sel_wire ;                                                                                         \n";
fftp_r4 << " wire [A_WIDTH-1:0]   ExtMA_wire ;                                                                                          \n";
fftp_r4 << " wire [A_WIDTH-1:0]   AGUMA_wire ;                                                                                          \n";
fftp_r4 << " wire [A_WIDTH-1:0]   MA0_wire ;                                                                                            \n";
fftp_r4 << " wire [A_WIDTH-1:0]   MA1_wire ;                                                                                            \n";
fftp_r4 << " wire                 AGU_en_wire ;                                                                                         \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN0_MEM0_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN0_MEM1_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN1_MEM0_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN1_MEM1_wire ;                                                                                       \n";
fftp_r4 << " wire                 BN_wire ;                                                                                             \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA0D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA1D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA2D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA3D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA0D_out_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA1D_out_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA2D_out_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA3D_out_wire ;                                                                                       \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire                 RomCen_wire ;                                                                                         \n";
fftp_r4 << " wire [ROMA_WIDTH-1:0] ROMA_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   ROMD0_out_wire ;                                                                                      \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  ROMD1_out_wire ;                                                                                      \n";
fftp_r4 << " wire [1:0]           Mul_sel_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB0_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB1_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB2_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB3_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod0_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod1_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod2_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod3_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out0_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out1_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out2_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out3_wire ;                                                                                       \n";
fftp_r4 << " wire [RDC_WIDTH-1:0] RDC_sel_wire ;                                                                                        \n";
fftp_r4 << " wire                 BND_wire ;                                                                                            \n";
fftp_r4 << " wire [A_WIDTH-1:0]   WMA_wire ;                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire [DC_WIDTH-1:0]  data_cnt_wire ;                                                                                       \n";
fftp_r4 << " wire [RDC_WIDTH-1:0] FFT_FSmode_sel_wire ;                                                                                 \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire                 mode_sel_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulA1_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulA3_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   IFFTROMD0_out_wire ;                                                                                  \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTROMD1_out_wire ;                                                                                  \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire                 rc_sel_wire ;                                                                                         \n";
fftp_r4 << " wire                 m2_sel_wire ;                                                                                         \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD0_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD1_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD2_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD3_wire ;                                                                                          \n";
fftp_r4 << " //---2018/08/01-------------------------------------                                                                       \n";
fftp_r4 << " wire                  mode_sel_D_wire ;                                                                                    \n";
fftp_r4 << " wire [1:0]            Mul_sel_D_wire ;                                                                                     \n";
fftp_r4 << " wire [RDC_WIDTH-1:0]  RDC_sel_D_wire ;                                                                                     \n";
fftp_r4 << " wire [RDC_WIDTH-1:0]  FFT_FSmode_sel_D_wire ;                                                                              \n";
fftp_r4 << " wire                  wrfd_en_wire ;                                                                                       \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out0_D_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out1_D_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out2_D_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out3_D_wire ;                                                                                    \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire [P_WIDTH-1:0]    N_D4_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]    ROMD0_D_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]   ROMD1_D_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]    IFFTROMD0_D_wire ;                                                                                   \n";
fftp_r4 << " wire [SD_WIDTH-1:0]   IFFTROMD1_D_wire ;                                                                                   \n";
fftp_r4 << "                                                                                                                            \n";

if((no_address_tmp*2) > 4096){
	fftp_r4 << " //---2018/08/03 SubBank SRAM-----------------------------                                                                  \n";
	fftp_r4 << " wire                 wen0_mem_sb0_wire ;                                                                                   \n";
	fftp_r4 << " wire                 wen0_mem_sb1_wire ;                                                                                   \n";
	fftp_r4 << " wire                 wen1_mem_sb0_wire ;                                                                                   \n";
	fftp_r4 << " wire                 wen1_mem_sb1_wire ;                                                                                   \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem0_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem0_sb1_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem1_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem1_sb1_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem0_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem0_sb1_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem1_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem1_sb1_wire ;                                                                                 \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << "                                                                                                                            \n";

	fftp_r4 << " //---2018/08/03 SubBank ROM-----------------------------                                                                   \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb0_wire ;                                                                                  \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb1_wire ;                                                                                  \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb2_wire ;                                                                                  \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb3_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb0_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb1_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb2_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb3_wire ;                                                                                  \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb0_wire ;                                                                              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb1_wire ;                                                                              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb2_wire ;                                                                              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb3_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb0_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb1_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb2_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb3_wire ;                                                                              \n";
}
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "     Rectrl u_Rectrl(                        \n";
fftp_r4 << "             .REMA(REMA_wire),               \n";
fftp_r4 << "             .ExtValid_in(ExtValid_in),      \n";
fftp_r4 << "             .rst_n(rst_n),                  \n";
fftp_r4 << "             .clk(clk)                       \n";
fftp_r4 << "     );                                      \n"; 
fftp_r4 << "\n";
fftp_r4 << "     R4_InpipeReg u_r4_inpipreg(                            \n";
fftp_r4 << "             .ExtValid_in(ExtValid_in),                     \n";
fftp_r4 << "             .ExtB0_D0_in(ExtB0_D0_in),                     \n";
fftp_r4 << "             .ExtB0_D1_in(ExtB0_D1_in),                     \n";
fftp_r4 << "             .ExtB0_D2_in(ExtB0_D2_in),                     \n";
fftp_r4 << "             .ExtB0_D3_in(ExtB0_D3_in),                     \n";
fftp_r4 << "             .ExtB1_D0_in(ExtB1_D0_in),                     \n";
fftp_r4 << "             .ExtB1_D1_in(ExtB1_D1_in),                     \n";
fftp_r4 << "             .ExtB1_D2_in(ExtB1_D2_in),                     \n";
fftp_r4 << "             .ExtB1_D3_in(ExtB1_D3_in),                     \n";
fftp_r4 << "             .ExtValid_out(ExtValid_wire),                  \n";
fftp_r4 << "             .ExtB0_D0_out(ExtB0_D0_pip_wire),              \n";
fftp_r4 << "             .ExtB0_D1_out(ExtB0_D1_pip_wire),              \n";
fftp_r4 << "             .ExtB0_D2_out(ExtB0_D2_pip_wire),              \n";
fftp_r4 << "             .ExtB0_D3_out(ExtB0_D3_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D0_out(ExtB1_D0_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D1_out(ExtB1_D1_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D2_out(ExtB1_D2_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D3_out(ExtB1_D3_pip_wire),              \n";
fftp_r4 << "             .rst_n        (rst_n),                         \n";
fftp_r4 << "             .clk          (clk)                            \n";
fftp_r4 << "     );                                                     \n";
fftp_r4 << "     //----------------------------------------------------    \n";
fftp_r4 << "     // Barrett reduction multiplier                           \n";
fftp_r4 << "     //input A and input B Mux                                 \n";
fftp_r4 << "     Mux5 u_Mux5(                                              \n";
fftp_r4 << "                 .B0M0_ain_o(B0M0_a_o_wire),                   \n";
fftp_r4 << "                 .B0M1_ain_o(B0M1_a_o_wire),                   \n";
fftp_r4 << "                 .B0M2_ain_o(B0M2_a_o_wire),                   \n";
fftp_r4 << "                 .B0M3_ain_o(B0M3_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M0_ain_o(B1M0_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M1_ain_o(B1M1_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M2_ain_o(B1M2_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M3_ain_o(B1M3_a_o_wire),                   \n";
fftp_r4 << "                 .B0M0_bin_o(B0M0_b_o_wire),                   \n";
fftp_r4 << "                 .B0M1_bin_o(B0M1_b_o_wire),                   \n";
fftp_r4 << "                 .B0M2_bin_o(B0M2_b_o_wire),                   \n";
fftp_r4 << "                 .B0M3_bin_o(B0M3_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M0_bin_o(B1M0_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M1_bin_o(B1M1_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M2_bin_o(B1M2_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M3_bin_o(B1M3_b_o_wire),                   \n";
fftp_r4 << "                 .ExtB0_D0(ExtB0_D0_pip_wire),                 \n";
fftp_r4 << "                 .ExtB0_D1(ExtB0_D1_pip_wire),                 \n";
fftp_r4 << "                 .ExtB0_D2(ExtB0_D2_pip_wire),                 \n";
fftp_r4 << "                 .ExtB0_D3(ExtB0_D3_pip_wire),                 \n";
fftp_r4 << "     		     .ExtB1_D0_pip(ExtB1_D0_pip_wire),             \n";
fftp_r4 << "     		     .ExtB1_D1_pip(ExtB1_D1_pip_wire),             \n";
fftp_r4 << "     		     .ExtB1_D2_pip(ExtB1_D2_pip_wire),             \n";
fftp_r4 << "     		     .ExtB1_D3_pip(ExtB1_D3_pip_wire),             \n";
fftp_r4 << "                 .SP_r0(SP_Data_r0),                           \n";
fftp_r4 << "                 .SP_r1(SP_Data_r1),                           \n";
fftp_r4 << "                 .SP_r2(SP_Data_r2),                           \n";
fftp_r4 << "                 .SP_r3(SP_Data_r3),                           \n";
fftp_r4 << "     		     .CRUD0(CRUD0_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "     		     .CRUD1(CRUD1_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "     		     .CRUD2(CRUD2_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "     		     .CRUD3(CRUD3_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "                 .reorderb0r0(reorderROM0_wire[63:"<< 63 -(CP_width-1)<<"]),\n";
fftp_r4 << "                 .reorderb0r1(reorderROM0_wire["<< 63 - CP_width <<":"<< 63-(2*CP_width - 1)<<"]),\n";
fftp_r4 << "     		     .reorderb1r0(reorderROM1_wire[63:"<< 63 -(CP_width-1)<<"]),\n";
fftp_r4 << "     		     .reorderb1r1(reorderROM1_wire["<< 63 - CP_width <<":"<< 63-(2*CP_width - 1)<<"]),\n";
fftp_r4 << "                 .ireorderr0(ireorderROM0_wire[63:"<< 63 -(CP_width-1) <<"]),                 \n";
fftp_r4 << "                 .ireorderr1(ireorderROM0_wire["<< 63 - CP_width <<":"<< 63-(2*CP_width - 1) <<"]),\n";

unsigned long radix2_in_ROM1_bits;
radix2_in_ROM1_bits = 3 * CP_width - 64;

if( 4 * CP_width > 96){
	fftp_r4 << "                 .ireorderr2({ireorderROM0_wire["<< 63 - 2 * CP_width <<":0],ireorderROM1_wire[63:"<< 64 - radix2_in_ROM1_bits <<"]}),\n";
	fftp_r4 << "                 .ireorderr3(ireorderROM1_wire["<< 63 - radix2_in_ROM1_bits <<":"<< 64 - radix2_in_ROM1_bits - CP_width <<"]),\n";
}else { //ireorderROM1 bit size = 32
	fftp_r4 << "                 .ireorderr2({ireorderROM0_wire["<< 63 - 2 * CP_width <<":0],ireorderROM1_wire[31:"<< 32 - radix2_in_ROM1_bits <<"]}),\n";
	fftp_r4 << "                 .ireorderr3(ireorderROM1_wire["<< 31 - radix2_in_ROM1_bits <<":"<< 32 - radix2_in_ROM1_bits - CP_width <<"]),\n";
}
fftp_r4 << "                 .re_sel(SD_sel_wire)                          \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     Mux6 u_Mux6(                                              \n";
fftp_r4 << "             .ExtB0_D0(ExtB0_D0_wire),                         \n";
fftp_r4 << "             .ExtB0_D1(ExtB0_D1_wire),                         \n";
fftp_r4 << "             .ExtB0_D2(ExtB0_D2_wire),                         \n";
fftp_r4 << "             .ExtB0_D3(ExtB0_D3_wire),                         \n";
fftp_r4 << "             .ExtB1_D0(ExtB1_D0_wire),                         \n";
fftp_r4 << "             .ExtB1_D1(ExtB1_D1_wire),                         \n";
fftp_r4 << "             .ExtB1_D2(ExtB1_D2_wire),                         \n";
fftp_r4 << "             .ExtB1_D3(ExtB1_D3_wire),                         \n";
fftp_r4 << "             .MulD0_out(MulD0_out),                            \n";
fftp_r4 << "             .MulD1_out(MulD1_out),                            \n";
fftp_r4 << "             .MulD2_out(MulD2_out),                            \n";
fftp_r4 << "             .MulD3_out(MulD3_out),                            \n";
fftp_r4 << "             .BR_S0(BR_S0_wire),                               \n";
fftp_r4 << "             .BR_S1(BR_S1_wire),                               \n";
fftp_r4 << "             .BR_S2(BR_S2_wire),                               \n";
fftp_r4 << "             .BR_S3(BR_S3_wire),                               \n";
fftp_r4 << "             .B1M0_result({"<< (64- CP_width)<<"'d0,B1M0_result_wire}),                   \n";
fftp_r4 << "             .B1M1_result({"<< (64- CP_width)<<"'d0,B1M1_result_wire}),                   \n";
fftp_r4 << "             .B1M2_result({"<< (64- CP_width)<<"'d0,B1M2_result_wire}),                   \n";
fftp_r4 << "             .B1M3_result({"<< (64- CP_width)<<"'d0,B1M3_result_wire}),                   \n";
fftp_r4 << "             .B0M0_result({"<< (64 - CP_width) <<"'d0,B0M0_result_wire}),                   \n";
fftp_r4 << "             .B0M1_result({"<< (64 - CP_width) <<"'d0,B0M1_result_wire}),                   \n";
fftp_r4 << "             .B0M2_result({"<< (64 - CP_width) <<"'d0,B0M2_result_wire}),                   \n";
fftp_r4 << "             .B0M3_result({"<< (64 - CP_width) <<"'d0,B0M3_result_wire}),                   \n";
fftp_r4 << "             .m2_sel(m2_sel_wire)                              \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     R4_BU_outpipe u_R4_BU_outpipe(                                  \n"; 
fftp_r4 << "     		.CRUD0_o(CRUD0_pip_wire),                          \n";
fftp_r4 << "     		.CRUD1_o(CRUD1_pip_wire),                          \n";
fftp_r4 << "     		.CRUD2_o(CRUD2_pip_wire),                          \n";
fftp_r4 << "     		.CRUD3_o(CRUD3_pip_wire),                          \n";
fftp_r4 << "     		.BR0_o(BR0_pip_wire),                            \n";
fftp_r4 << "     		.BR1_o(BR1_pip_wire),                            \n";
fftp_r4 << "     		.BR2_o(BR2_pip_wire),                            \n";
fftp_r4 << "     		.BR3_o(BR3_pip_wire),                            \n";
fftp_r4 << "     		.CRUD0_i(CRUD0_wire),                              \n";
fftp_r4 << "     		.CRUD1_i(CRUD1_wire),                              \n";
fftp_r4 << "     		.CRUD2_i(CRUD2_wire),                              \n";
fftp_r4 << "     		.CRUD3_i(CRUD3_wire),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "     		.clk(clk)                                          \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     MulMod B0M0(                                              \n";
fftp_r4 << "             .A_in(B0M0_a_o_wire), //need to modify            \n";
fftp_r4 << "             .B_in(B0M0_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M0_result_wire)  //need to modify 4/19  \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B0M1(                                             \n";
fftp_r4 << "             .A_in(B0M1_a_o_wire),//need to modify 4/19        \n";
fftp_r4 << "             .B_in(B0M1_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M1_result_wire)//need to modify 4/19    \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B0M2(                                             \n";
fftp_r4 << "             .A_in(B0M2_a_o_wire),//need to modify 4/19        \n";
fftp_r4 << "             .B_in(B0M2_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M2_result_wire)//need to modify 4/19    \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B0M3(                                             \n";
fftp_r4 << "             .A_in(B0M3_a_o_wire),//need to modify 4/19        \n";
fftp_r4 << "             .B_in(B0M3_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M3_result_wire)//need to modify 4/19    \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     MulMod B1M0(                                              \n";
fftp_r4 << "             .A_in(B1M0_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M0_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M0_result_wire)                         \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B1M1(                                             \n";
fftp_r4 << "             .A_in(B1M1_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M1_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M1_result_wire)                         \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B1M2(                                             \n";
fftp_r4 << "             .A_in(B1M2_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M2_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M2_result_wire)                         \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B1M3(                                             \n";
fftp_r4 << "             .A_in(B1M3_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M3_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M3_result_wire)                            \n";
fftp_r4 << "     );                                                        \n";

int BR_bit_size;
int double_cp_width;
int padding_zero_number;

BR_bit_size = 64 - 2 * CP_width;
double_cp_width =  2 * CP_width;
padding_zero_number = double_cp_width - BR_bit_size - CP_width;

fftp_r4 << "     BR u_BR0(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S0_wire,BR0_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r0),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     BR u_BR1(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S1_wire,BR1_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r1),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     BR u_BR2(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S2_wire,BR2_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r2),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     BR u_BR3(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S3_wire,BR3_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r3),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "     //----------------------------------------------------    \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	CenCtrl u_CenCtrl(.MulValid_out(MulValid_out),                                                                          \n";
fftp_r4 << "                    .cen_out(cen_wire),                                                                                     \n";
fftp_r4 << "                    .wen0_out(wen0_wire),                                                                                   \n";
fftp_r4 << "                    .wen1_out(wen1_wire),                                                                                   \n";
fftp_r4 << "                    .ema_out(ema_wire),                                                                                     \n";
fftp_r4 << "                    .SD_sel_out(SD_sel_wire),                                                                               \n";
fftp_r4 << "                    .ExtMA_out(ExtMA_wire),                                                                                 \n";
fftp_r4 << "                    .AGU_en_out(AGU_en_wire),                                                                               \n";
fftp_r4 << "                    .RomCen_out(RomCen_wire),                                                                               \n";
fftp_r4 << "                    .mode_sel_out(mode_sel_wire),                                                                           \n";
fftp_r4 << "                    .rc_sel_out(rc_sel_wire),                                                                               \n";
fftp_r4 << "                    .m2_sel_out(m2_sel_wire),                                                                               \n";
fftp_r4 << "                    .wrfd_en_out(wrfd_en_wire), // 2018/08/01                                                               \n";
fftp_r4 << "                    .data_cnt_in(data_cnt_wire),                                                                            \n";
fftp_r4 << "                    .BND_in(BND_wire),                                                                                      \n";
fftp_r4 << "                    .ExtValid_in(ExtValid_wire),                                                                              \n";
fftp_r4 << "                    .rst_n(rst_n),                                                                                          \n";
fftp_r4 << "                    .clk(clk)                                                                                               \n";
fftp_r4 << "                    ) ;                                                                                                     \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_AGU u_R4_AGU(.BN_out(BN_wire),                                                                                       \n";
fftp_r4 << "                  .MA(AGUMA_wire),                                                                                          \n";
fftp_r4 << "                  .ROMA(ROMA_wire),                                                                                         \n";
fftp_r4 << "                  .Mul_sel_out(Mul_sel_wire),                                                                               \n";
fftp_r4 << "                  .RDC_sel_out(RDC_sel_wire),                                                                               \n";
fftp_r4 << "                  .data_cnt_reg(data_cnt_wire),                                                                             \n";
fftp_r4 << "                  .FFT_FSmode_sel(FFT_FSmode_sel_wire),                                                                     \n";
fftp_r4 << "                  .mode_sel_in(mode_sel_wire),                                                                              \n";
fftp_r4 << "                  .rc_sel_in(rc_sel_wire),                                                                                  \n";
fftp_r4 << "                  .AGU_en(AGU_en_wire),                                                                                     \n";
fftp_r4 << "                  .wrfd_en_in(wrfd_en_wire), // 2018/08/01                                                                  \n";
fftp_r4 << "                  .rst_n(rst_n),                                                                                            \n";
fftp_r4 << "                  .clk(clk)                                                                                                 \n";
fftp_r4 << "                  ) ;                                                                                                       \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//Control Signal Pipeline Register, 2018/08/01                                                                          \n";
fftp_r4 << " 	Ctrl_PipeReg1 u_Ctrl_PipeReg1(.mode_sel_Dout(mode_sel_D_wire),                                                          \n";
fftp_r4 << "                                .Mul_sel_Dout(Mul_sel_D_wire),                                                              \n";
fftp_r4 << "                                .RDC_sel_Dout(RDC_sel_D_wire),                                                              \n";
fftp_r4 << "                                .FFT_FSmode_sel_Dout(FFT_FSmode_sel_D_wire),                                                \n";
fftp_r4 << "                                .mode_sel_in(mode_sel_wire),                                                                \n";
fftp_r4 << "                                .Mul_sel_in(Mul_sel_wire),                                                                  \n";
fftp_r4 << "                                .RDC_sel_in(RDC_sel_wire),                                                                  \n";
fftp_r4 << "                                .FFT_FSmode_sel_in(FFT_FSmode_sel_wire),                                                    \n";
fftp_r4 << "                                .rst_n(rst_n),                                                                              \n";
fftp_r4 << "                                .clk(clk)                                                                                   \n";
fftp_r4 << "                                ) ;                                                                                         \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_WAddr u_R4_WAddr(.BND_out(BND_wire),                                                                                 \n";
fftp_r4 << "                      .WMA_out(WMA_wire),                                                                                   \n";
fftp_r4 << "                      .BN_in(BN_wire),                                                                                      \n";
fftp_r4 << "                      .MA_in(AGUMA_wire),                                                                                   \n";
fftp_r4 << "                      .rst_n(rst_n),                                                                                        \n";
fftp_r4 << "                      .clk(clk)                                                                                             \n";
fftp_r4 << "                      ) ;                                                                                                   \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << "    //-----------------------------------------------------\n";

if((no_address_tmp*2) > 4096){
	fftp_r4 << "	                                                       \n";
    fftp_r4 << "    TWIMux u_TWIMUX(                                       \n";
    fftp_r4 << "				    .TWIradix0(TWIradix0_wire),            \n";
    fftp_r4 << "					.TWIradix1(TWIradix1_wire),            \n";
    fftp_r4 << "					.TWIradix2(TWIradix2_wire),            \n";
    fftp_r4 << "					.TWIradix3(TWIradix3_wire),            \n";
    fftp_r4 << "					.b0radix0(b0r0_wire),                  \n";
    fftp_r4 << "					.b0radix1(b0r1_wire),                  \n";
    fftp_r4 << "					.b0radix2(b0r2_wire),                  \n";
    fftp_r4 << "					.b0radix3(b0r3_wire),                  \n";
    fftp_r4 << "					.b1radix0(b1r0_wire),                  \n";
    fftp_r4 << "					.b1radix1(b1r1_wire),                  \n";
    fftp_r4 << "					.b1radix2(b1r2_wire),                  \n";
    fftp_r4 << "					.b1radix3(b1r3_wire),                  \n";
    fftp_r4 << "					.BN_wire(BN_TWI_wire)                  \n";
	fftp_r4 << "	);                                                     \n";
}
else {
	fftp_r4 << "	                                                       \n";
	fftp_r4 << "    TWIMux u_TWIMUX(                                       \n";
	fftp_r4 << "				    .TWIradix0(TWIradix0_wire),            \n";
	fftp_r4 << "					.TWIradix1(TWIradix1_wire),            \n";
	fftp_r4 << "					.TWIradix2(TWIradix2_wire),            \n";
	fftp_r4 << "					.TWIradix3(TWIradix3_wire),            \n";
	fftp_r4 << "					.b0radix0(b0ROM0_wire[127:64]),        \n";
	fftp_r4 << "					.b0radix1(b0ROM0_wire[63:0]),          \n";
	fftp_r4 << "					.b0radix2(b0ROM1_wire[127:64]),        \n";
	fftp_r4 << "					.b0radix3(b0ROM1_wire[63:0]),          \n";
	fftp_r4 << "					.b1radix0(b1ROM0_wire[127:64]),        \n";
	fftp_r4 << "					.b1radix1(b1ROM0_wire[63:0]),          \n";
	fftp_r4 << "					.b1radix2(b1ROM1_wire[127:64]),        \n";
	fftp_r4 << "					.b1radix3(b1ROM1_wire[63:0]),          \n";
	fftp_r4 << "					.BN_wire(BN_TWI_wire)                  \n";
	fftp_r4 << "	);                                                     \n";
}
fftp_r4 << "   //---------------------------------------------------------\n";
fftp_r4 << "                                                           \n";
fftp_r4 << "	TWIpipe u_TWIpipe(                                     \n";
fftp_r4 << "					  .BN_out(BN_TWI_wire),                \n";
fftp_r4 << "					  .MA_out(MA_TWI_wire),                \n";
fftp_r4 << "	                  .TWIradix0_o(TWIradix0_pip_wire),    \n";
fftp_r4 << "	                  .TWIradix1_o(TWIradix1_pip_wire),    \n";
fftp_r4 << "	                  .TWIradix2_o(TWIradix2_pip_wire),    \n";
fftp_r4 << "	                  .TWIradix3_o(TWIradix3_pip_wire),    \n";
fftp_r4 << "	                  .BN_in(BN_wire),                     \n";
fftp_r4 << "	                  .MA_in(AGUMA_wire),                  \n";
fftp_r4 << "	                  .TWIradix0_i(TWIradix0_wire),        \n";
fftp_r4 << "	                  .TWIradix1_i(TWIradix1_wire),        \n";
fftp_r4 << "	                  .TWIradix2_i(TWIradix2_wire),        \n";
fftp_r4 << "	                  .TWIradix3_i(TWIradix3_wire),        \n";
fftp_r4 << "	                  .rst_n(rst_n),                       \n";
fftp_r4 << "	                  .clk(clk)                            \n";
fftp_r4 << "	);                                                     \n";
fftp_r4 << "	                                                       \n";
if((no_address_tmp*2) > 4096){
	fftp_r4 << "	H_b0r0 u_H_b0r0(                                       \n";
    fftp_r4 << "				.Q(b0r0_wire),                             \n";
    fftp_r4 << "				.CLK(clk),                                 \n";
    fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
    fftp_r4 << "				.A(MA_TWI_wire)                            \n";
    fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b0r1 u_H_b0r1(                                       \n";
	fftp_r4 << "				.Q(b0r1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b0r2 u_H_b0r2(                                       \n";
    fftp_r4 << "				.Q(b0r2_wire),                             \n";
    fftp_r4 << "				.CLK(clk),                                 \n";
    fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
    fftp_r4 << "				.A(MA_TWI_wire)                            \n";
    fftp_r4 << "	);                                                     \n";
    fftp_r4 << "	H_b0r3 u_H_b0r3(                                       \n";
    fftp_r4 << "				.Q(b0r3_wire),                             \n";
    fftp_r4 << "				.CLK(clk),                                 \n";
    fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
    fftp_r4 << "				.A(MA_TWI_wire)                            \n";
    fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r0 u_H_b1r0(                                       \n";
	fftp_r4 << "				.Q(b1r0_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r1 u_H_b1r1(                                       \n";
	fftp_r4 << "				.Q(b1r1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r2 u_H_b1r2(                                       \n";
	fftp_r4 << "				.Q(b1r2_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r3 u_H_b1r3(                                       \n";
	fftp_r4 << "				.Q(b1r3_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";

}else {
	fftp_r4 << "	H_b0ROM0 u_H_b0ROM0(                                       \n";
	fftp_r4 << "				.Q(b0ROM0_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "                                                           \n";
	fftp_r4 << "    H_b0ROM1 u_H_b0ROM1(                                       \n";
	fftp_r4 << "				.Q(b0ROM1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "    );                                                     \n";
	fftp_r4 << "	                                                       \n";
	fftp_r4 << "	H_b1ROM0 u_H_b1ROM0(                                       \n";
	fftp_r4 << "				.Q(b1ROM0_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "    			.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	                                                       \n";
	fftp_r4 << "	H_b1ROM1 u_H_b1ROM1(                                       \n";
	fftp_r4 << "				.Q(b1ROM1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	                                                       \n";
}
fftp_r4 << " 	//---FFT1----------------------------------------------                                                                 \n";
fftp_r4 << " 	//for SRAM                                                                                                              \n";
fftp_r4 << " 	Mux1 u_Mux1(.BN0_MEM0_Dout(BN0_MEM0_wire),                                                                              \n";
fftp_r4 << "              .BN0_MEM1_Dout(BN0_MEM1_wire),                                                                                \n";
fftp_r4 << "              .BN1_MEM0_Dout(BN1_MEM0_wire),                                                                                \n";
fftp_r4 << "              .BN1_MEM1_Dout(BN1_MEM1_wire),                                                                                \n";
fftp_r4 << "              .MA0_out(MA0_wire),                                                                                           \n";
fftp_r4 << "              .MA1_out(MA1_wire),                                                                                           \n";
fftp_r4 << "              .ExtB0_D0_in(ExtB0_D0_wire),                                                                                    \n";
fftp_r4 << "              .ExtB0_D1_in(ExtB0_D1_wire),                                                                                    \n";
fftp_r4 << "              .ExtB0_D2_in(ExtB0_D2_wire),                                                                                    \n";
fftp_r4 << "              .ExtB0_D3_in(ExtB0_D3_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D0_in(ExtB1_D0_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D1_in(ExtB1_D1_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D2_in(ExtB1_D2_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D3_in(ExtB1_D3_wire),                                                                                    \n";
fftp_r4 << "              .RDC_in0(RDC_out0_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .RDC_in1(RDC_out1_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .RDC_in2(RDC_out2_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .RDC_in3(RDC_out3_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .ExtMA_in(ExtMA_wire),                                                                                        \n";
fftp_r4 << "              .AGUMA_in(AGUMA_wire),                                                                                        \n";
fftp_r4 << "              .WMA_in(WMA_wire),                                                                                            \n";
fftp_r4 << "              .wen0_in(wen0_wire),                                                                                          \n";
fftp_r4 << "              .wen1_in(wen1_wire),                                                                                          \n";
fftp_r4 << "              .SD_sel(SD_sel_wire)                                                                                          \n";
fftp_r4 << "              ) ;                                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//for Radix-4                                                                                                           \n";
fftp_r4 << " 	Mux2 u_Mux2(.RA0_out(RA0D_in_wire),                                                                                     \n";
fftp_r4 << "              .RA1_out(RA1D_in_wire),                                                                                       \n";
fftp_r4 << "              .RA2_out(RA2D_in_wire),                                                                                       \n";
fftp_r4 << "              .RA3_out(RA3D_in_wire),                                                                                       \n";
fftp_r4 << "              .BN0_MEM0_in(Data_out0),                                                                                      \n";
fftp_r4 << "              .BN0_MEM1_in(Data_out1),                                                                                      \n";
fftp_r4 << "              .BN1_MEM0_in(Data_out2),                                                                                      \n";
fftp_r4 << "              .BN1_MEM1_in(Data_out3),                                                                                      \n";
fftp_r4 << "              .BN_sel(BN_wire)                                                                                              \n";
fftp_r4 << "              ) ;                                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	Radix4_Pipe u_Radix4_Pipe(.RA0_out(RA0D_out_wire),                                                                      \n";
fftp_r4 << "                            .RA1_out(RA1D_out_wire),                                                                        \n";
fftp_r4 << "                            .RA2_out(RA2D_out_wire),                                                                        \n";
fftp_r4 << "                            .RA3_out(RA3D_out_wire),                                                                        \n";
fftp_r4 << "                            .RA0_in(RA0D_in_wire),                                                                          \n";
fftp_r4 << "                            .RA1_in(RA1D_in_wire),                                                                          \n";
fftp_r4 << "                            .RA2_in(RA2D_in_wire),                                                                          \n";
fftp_r4 << "                            .RA3_in(RA3D_in_wire),                                                                          \n";
fftp_r4 << "                            .N_in(N_in),                                                                                    \n";
fftp_r4 << "                            .rst_n(rst_n),                                                                                  \n";
fftp_r4 << "                            .clk(clk)                                                                                       \n";
fftp_r4 << "                            ) ;                                                                                             \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//for Mul                                                                                                               \n";
fftp_r4 << " 	Mux3 u_Mux3(.MulB0_out(MulB0_wire),                                                                                     \n";
fftp_r4 << "              .MulB1_out(MulB1_wire),                                                                                       \n";
fftp_r4 << "              .MulB2_out(MulB2_wire),                                                                                       \n";
fftp_r4 << "              .MulB3_out(MulB3_wire),                                                                                       \n";
fftp_r4 << "              .MulA1_out(MulA1_wire),                                                                                       \n";
fftp_r4 << "              .MulA3_out(MulA3_wire),                                                                                       \n";
fftp_r4 << "              .IFFTROMD0_in(IFFTROMD0_D_wire), // 2018/08/01                                                                \n";
fftp_r4 << "              .IFFTROMD1_in(IFFTROMD1_D_wire), // 2018/08/01                                                                \n";
fftp_r4 << "              .ROMD0_in(ROMD0_D_wire), // 2018/08/01                                                                        \n";
fftp_r4 << "              .ROMD1_in(ROMD1_D_wire), // 2018/08/01                                                                        \n";
fftp_r4 << "              .FFTBD0_in(TWIradix0_pip_wire),                                                                                  \n";
fftp_r4 << "              .FFTBD1_in(TWIradix1_pip_wire),                                                                                  \n";
fftp_r4 << "              .FFTBD2_in(TWIradix2_pip_wire),                                                                                  \n";
fftp_r4 << "              .FFTBD3_in(TWIradix3_pip_wire),                                                                                  \n";
fftp_r4 << "              .RA1D_in(RA1D_out_wire),                                                                                      \n";
fftp_r4 << "              .RA3D_in(RA3D_out_wire),                                                                                      \n";
fftp_r4 << "              .Mul_sel(Mul_sel_D_wire), // 2018/08/01                                                                       \n";
fftp_r4 << "              .mode_sel(mode_sel_D_wire) // 2018/08/01                                                                      \n";
fftp_r4 << "              ) ;                                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//Pipeline Register, 2018/08/01                                                                                         \n";
fftp_r4 << " 	R4_NPipeReg3 u_R4_NPipeReg3(.N_D4_out(N_D4_wire),                                                                       \n";
fftp_r4 << "                              .N_in(N_in),                                                                                  \n";
fftp_r4 << "                              .rst_n(rst_n),                                                                                \n";
fftp_r4 << "                              .clk(clk)                                                                                     \n";
fftp_r4 << "                              ) ;                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_TMulMod u_R4_TMulMod(.MulMod0_out(MulMod0_out_wire),                                                                 \n";
fftp_r4 << "                          .MulMod1_out(MulMod1_out_wire),                                                                   \n";
fftp_r4 << "                          .MulMod2_out(MulMod2_out_wire),                                                                   \n";
fftp_r4 << "                          .MulMod3_out(MulMod3_out_wire),				                                                    \n";
fftp_r4 << "                          .RA0D_in(RA0D_out_wire),                                                                          \n";
fftp_r4 << "                          .MulA1_in(MulA1_wire),                                                                            \n";
fftp_r4 << "                          .RA2D_in(RA2D_out_wire),                                                                          \n";
fftp_r4 << "                          .MulA3_in(MulA3_wire),				                                                            \n";
fftp_r4 << "                          .MulB0_in(MulB0_wire),                                                                            \n";
fftp_r4 << "                          .MulB1_in(MulB1_wire),                                                                            \n";
fftp_r4 << "                          .MulB2_in(MulB2_wire),                                                                            \n";
fftp_r4 << "                          .MulB3_in(MulB3_wire),				                                                            \n";
fftp_r4 << "                          .N_in(N_D4_wire),                                                                                 \n";
fftp_r4 << "                          .rst_n(rst_n),                                                                                    \n";
fftp_r4 << "                          .clk(clk)                                                                                         \n";
fftp_r4 << "                          ) ;                                                                                               \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_DC u_R4_DC(.RDC_out0(RDC_out0_wire),                                                                                 \n";
fftp_r4 << "                .RDC_out1(RDC_out1_wire),                                                                                   \n";
fftp_r4 << "                .RDC_out2(RDC_out2_wire),                                                                                   \n";
fftp_r4 << "                .RDC_out3(RDC_out3_wire),                                                                                   \n";
fftp_r4 << "                .RDC_in0(MulMod0_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_in1(MulMod1_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_in2(MulMod2_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_in3(MulMod3_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_sel(RDC_sel_D_wire), // 2018/08/01                                                                     \n";
fftp_r4 << "                .FFT_FSmode_sel(FFT_FSmode_sel_D_wire), // 2018/08/01                                                       \n";
fftp_r4 << "                .rst_n(rst_n),                                                                                              \n";
fftp_r4 << "                .clk(clk)                                                                                                   \n";
fftp_r4 << "                ) ;                                                                                                         \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	// 2018/08/01                                                                                                           \n";
fftp_r4 << " 	R4_WD_buf u_R4_WD_buf(.RDC0_D_out(RDC_out0_D_wire),                                                                     \n";
fftp_r4 << "                        .RDC1_D_out(RDC_out1_D_wire),                                                                       \n";
fftp_r4 << "                        .RDC2_D_out(RDC_out2_D_wire),                                                                       \n";
fftp_r4 << "                        .RDC3_D_out(RDC_out3_D_wire),                                                                       \n";
fftp_r4 << "                        .RDC0_in(RDC_out0_wire),                                                                            \n";
fftp_r4 << "                        .RDC1_in(RDC_out1_wire),                                                                            \n";
fftp_r4 << "                        .RDC2_in(RDC_out2_wire),                                                                            \n";
fftp_r4 << "                        .RDC3_in(RDC_out3_wire),				                                                            \n";
fftp_r4 << "                        .rst_n(rst_n),                                                                                      \n";
fftp_r4 << "                        .clk(clk)                                                                                           \n";
fftp_r4 << "                        ) ;                                                                                                 \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//-----------------------------------------------------                                                                 \n";
fftp_r4 << " 	// for CRUR4                                                                                                            \n";
fftp_r4 << " 	Mux4 u_Mux4(.CRUD0_out(CRUD0_wire),                                                                                     \n";
fftp_r4 << "                .CRUD1_out(CRUD1_wire),                                                                                     \n";
fftp_r4 << "                .CRUD2_out(CRUD2_wire),                                                                                     \n";
fftp_r4 << "                .CRUD3_out(CRUD3_wire),                                                                                     \n";
fftp_r4 << "                .IFFTD0_in(RA0D_in_wire),                                                                                   \n";
fftp_r4 << "                .IFFTD1_in(RA1D_in_wire),                                                                                   \n";
fftp_r4 << "                .IFFTD2_in(RA2D_in_wire),                                                                                   \n";
fftp_r4 << "                .IFFTD3_in(RA3D_in_wire),                                                                                   \n";
fftp_r4 << "                .m2_sel(m2_sel_wire)                                                                                        \n";
fftp_r4 << "                ) ;                                                                                                         \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//Pipeline Register, 2018/08/01				                                                                            \n";
fftp_r4 << " 	R4_ROMPipeReg1 u_R4_ROMPipeReg1(.ROMD0_Dout(ROMD0_D_wire),                                                              \n";
fftp_r4 << " 				                    .ROMD1_Dout(ROMD1_D_wire),			                                                    \n";
fftp_r4 << " 								    .IFFTROMD0_Dout(IFFTROMD0_D_wire),                                                      \n";
fftp_r4 << " 				                    .IFFTROMD1_Dout(IFFTROMD1_D_wire),				                                        \n";
fftp_r4 << " 			                        .ROMD0_in(ROMD0_out_wire),                                                              \n";
fftp_r4 << " 					                .ROMD1_in(ROMD1_out_wire),					                                            \n";
fftp_r4 << " 								    .IFFTROMD0_in(IFFTROMD0_out_wire),                                                      \n";
fftp_r4 << " 					                .IFFTROMD1_in(IFFTROMD1_out_wire),					                                    \n";
fftp_r4 << "                                  .rst_n(rst_n),                                                                            \n";
fftp_r4 << "                                  .clk(clk)                                                                                 \n";
fftp_r4 << "                                  ) ;		                                                                                \n";
fftp_r4 << " 	                                                                                                                        \n";

if( (no_address_tmp*2) > 4096){
		fftp_r4 << " 	// for SRAM, 2018/08/03                                                                                                 \n";
		fftp_r4 << " 	MuxMA u_MuxMA(.Data_out0(Data_out0),                                                                                    \n";
		fftp_r4 << " 				  .Data_out1(Data_out1),                                                                                    \n";
		fftp_r4 << " 				  .Data_out2(Data_out2),                                                                                    \n";
		fftp_r4 << " 				  .Data_out3(Data_out3),                                                                                    \n";
		fftp_r4 << " 			      .wen0_mem_sb0(wen0_mem_sb0_wire),                                                                         \n";
		fftp_r4 << " 			      .wen0_mem_sb1(wen0_mem_sb1_wire),			                                                                \n";
		fftp_r4 << " 				  .wen1_mem_sb0(wen1_mem_sb0_wire),                                                                         \n";
		fftp_r4 << " 			      .wen1_mem_sb1(wen1_mem_sb1_wire),                                                                         \n";
		fftp_r4 << " 			      .Dout0_mem0_sb0(Dout0_mem0_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout0_mem0_sb1(Dout0_mem0_sb1_wire),			                                                            \n";
		fftp_r4 << " 				  .Dout0_mem1_sb0(Dout0_mem1_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout0_mem1_sb1(Dout0_mem1_sb1_wire),                                                                     \n";
		fftp_r4 << " 				  .Dout1_mem0_sb0(Dout1_mem0_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout1_mem0_sb1(Dout1_mem0_sb1_wire),			                                                            \n";
		fftp_r4 << " 				  .Dout1_mem1_sb0(Dout1_mem1_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout1_mem1_sb1(Dout1_mem1_sb1_wire),			      				                                        \n";
		fftp_r4 << " 			      .wen0_in(wen0_wire),                                                                                      \n";
		fftp_r4 << " 				  .wen1_in(wen1_wire),                                                                                      \n";
		fftp_r4 << " 		          .MA0_in(MA0_wire),                                                                                        \n";
		fftp_r4 << " 				  .MA1_in(MA1_wire),                                                                                        \n";
		fftp_r4 << " 				  .rst_n(rst_n),                                                                                            \n";
		fftp_r4 << "                   .clk(clk)                                                                                                \n";
		fftp_r4 << " 			      ) ;                                                                                                       \n";
		fftp_r4 << " 				                                                                                                            \n";
		fftp_r4 << " 	//---FFT1----------------------------------------------                                                                 \n";
		fftp_r4 << "    " << ss.str() << "  u0_" << ss.str() << " (.Q(Dout0_mem0_sb0_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );										                                            \n";
		fftp_r4 << "    " << ss.str() << "  u1_" << ss.str() << " (.Q(Dout0_mem0_sb1_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	                                                                                \n";
		fftp_r4 << "    //Bank0 Mem1 Subbank0~1                                                                                        			\n";                                                            
		fftp_r4 << "    " << ss.str() << "  u2_" << ss.str() << "  (.Q(Dout0_mem1_sb0_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );                                                                                  \n";
		fftp_r4 << "    " << ss.str() << "  u3_" << ss.str() << "  (.Q(Dout0_mem1_sb1_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );										                                            \n";
		fftp_r4 << "    //Bank1 Mem0 Subbank0~1                                                                                                 \n";                                                                
		fftp_r4 << "    " << ss.str() << "  u4_" << ss.str() << "  (.Q(Dout1_mem0_sb0_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	                                                                                \n";
		fftp_r4 << "    " << ss.str() << "  u5_" << ss.str() << "  (.Q(Dout1_mem0_sb1_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );										                                            \n";
		fftp_r4 << "    //Bank1 Mem1 Subbank0~1                                                                                                 \n";                                                                 
		fftp_r4 << "    " << ss.str() << "  u6_" << ss.str() << " (.Q(Dout1_mem1_sb0_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );			                                                                        \n";
		fftp_r4 << "    " << ss.str() << "  u7_" << ss.str() << " (.Q(Dout1_mem1_sb1_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );											                                        \n";
}else {
		fftp_r4 << "    " << ss.str() << "  u0_" << ss.str() << " (.Q(Data_out0), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	\n";
		fftp_r4 << "    " << ss.str() << "  u1_" << ss.str() << " (.Q(Data_out1), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );\n";		
		fftp_r4 << "    " << ss.str() << "  u2_" << ss.str() << "  (.Q(Data_out2), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );\n";
		fftp_r4 << "    " << ss.str() << "  u3_" << ss.str() << "  (.Q(Data_out3), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	  \n";		
}

fftp_r4 << "     //-----------------------------------------------------     \n";                                                            
fftp_r4 << "     //2020/04/19 modify                                         \n";
fftp_r4 << "     //re-order factor  ROM                                      \n";
fftp_r4 << "     //BANK0                                                     \n";
fftp_r4 << "     IReorderMA_pip u_IReorderMA_pip(                            \n";
fftp_r4 << "             .IREMA_o(IREMA),                                    \n";
fftp_r4 << "             .MA_i(data_cnt_wire[" << (IReROM_width-1) <<":0]),\n";
fftp_r4 << "             .rst_n(rst_n),                                      \n";
fftp_r4 << "             .clk(clk)                                           \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "                                                                 \n";
fftp_r4 << "     //BANK1                                                     \n";
fftp_r4 << "     reorderROM0 u_reorderROM0(                                  \n";
fftp_r4 << "                               .Q(reorderROM0_wire_reg_in),      \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(rc_sel_wire),                \n";
fftp_r4 << "                               .A(REMA_wire)                     \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "                                                                 \n";
fftp_r4 << "     reorderROM1 u_reorderROM1(                                  \n";
fftp_r4 << "                               .Q(reorderROM1_wire_reg_in),      \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(rc_sel_wire),                \n";
fftp_r4 << "                               .A(REMA_wire)                     \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "     //64 bits                                                   \n";
fftp_r4 << "     ireorderROM0 u_ireorderROM0(                                \n";
fftp_r4 << "                               .Q(ireorderROM0_wire_reg_in),     \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r4 << "                               .A(IREMA)                         \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "                                                                 \n";
fftp_r4 << "     ireorderROM1 u_ireorderROM1(                                \n";
fftp_r4 << "                               .Q(ireorderROM1_wire_reg_in),     \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r4 << "                               .A(IREMA)                         \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "    //-----------------------------------------------------      \n";
fftp_r4 << "    R4_orderROM_Pipe u_R4_orderROM_Pipe(.reorderROM0_o(reorderROM0_wire),\n";                                  
fftp_r4 << "                                        .reorderROM1_o(reorderROM1_wire),\n";                                  
fftp_r4 << "                                        .ireorderROM0_o(ireorderROM0_wire),\n";                                  
fftp_r4 << "                                        .ireorderROM1_o(ireorderROM1_wire),\n";                                  
fftp_r4 << "                                        .reorderROM0_i(reorderROM0_wire_reg_in),\n";                                  
fftp_r4 << "                                        .reorderROM1_i(reorderROM1_wire_reg_in),\n";                                  
fftp_r4 << "                                        .ireorderROM0_i(ireorderROM0_wire_reg_in),\n";                                  
fftp_r4 << "                                        .ireorderROM1_i(ireorderROM1_wire_reg_in),\n";                                  
fftp_r4 << "                                        .rst_n(rst_n),\n";                                  
fftp_r4 << "                                        .clk(clk)\n";                                  
fftp_r4 << "                                        );\n";                                  
fftp_r4 << "    //-----------------------------------------------------      \n";                                  
if( (no_address_tmp*2) > 4096){
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << "    // for ROM                                                                                                              \n";
	fftp_r4 << "    MuxROMA u_MuxROMA(.ROMD0_out(ROMD0_out_wire),                                                                           \n";
	fftp_r4 << "                    .ROMD1_out(ROMD1_out_wire),				                                                                \n";
	fftp_r4 << "                    .IFFTROMD0_out(IFFTROMD0_out_wire),                                                                     \n";
	fftp_r4 << "                    .IFFTROMD1_out(IFFTROMD1_out_wire),					                                                    \n";
	fftp_r4 << "                    .Dout_rom0_sb0(Dout_rom0_sb0_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom0_sb1(Dout_rom0_sb1_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom0_sb2(Dout_rom0_sb2_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom0_sb3(Dout_rom0_sb3_wire),					                                                    \n";
	fftp_r4 << "                    .Dout_rom1_sb0(Dout_rom1_sb0_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom1_sb1(Dout_rom1_sb1_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom1_sb2(Dout_rom1_sb2_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom1_sb3(Dout_rom1_sb3_wire),					                                                    \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb0(IFFTDout_rom0_sb0_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb1(IFFTDout_rom0_sb1_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb2(IFFTDout_rom0_sb2_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb3(IFFTDout_rom0_sb3_wire),					                                            \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb0(IFFTDout_rom1_sb0_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb1(IFFTDout_rom1_sb1_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb2(IFFTDout_rom1_sb2_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb3(IFFTDout_rom1_sb3_wire),                                                             \n";
	fftp_r4 << "                    .ROMA_in(ROMA_wire),                                                                                    \n";
	fftp_r4 << "                    .rst_n(rst_n),                                                                                          \n";
	fftp_r4 << "                    .clk(clk)                                                                                               \n";
	fftp_r4 << "                    ) ;                                                                                                     \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << "    //FFT ROM0 Subbank0~3                                                                                                   \n";                                                                            
	fftp_r4 << "    " << "R0D0_" << no_address_tmp << "_64 u_R0D0_" << no_address_tmp << "_64 (.Q(Dout_rom0_sb0_wire), //modify             \n";                                          
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );		                                                                                    \n";
	fftp_r4 << "    " << "R0D1_" << no_address_tmp << "_64 u_R0D1_" << no_address_tmp << "_64 (.Q(Dout_rom0_sb1_wire), //modify             \n";                                          
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );                                                                                          \n";
	fftp_r4 << "    " << "R0D2_" << no_address_tmp << "_64 u_R0D2_" << no_address_tmp << "_64  (.Q(Dout_rom0_sb2_wire), //modify            \n";                                           
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );                                                                                          \n";
	fftp_r4 << "    " << "R0D3_" << no_address_tmp << "_64 u_R0D3_" << no_address_tmp << "_64  (.Q(Dout_rom0_sb3_wire), //modify            \n";                                           
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );                                                                                          \n";
	fftp_r4 << "        //FFT ROM1 Subbank0~3                                                                                               \n";                                                                                 
	fftp_r4 << "    " << "R1D0_" << no_address_tmp << "_128 u_R1D0_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb0_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "    " << "R1D1_" << no_address_tmp << "_128 u_R1D1_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb1_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "R1D2_" << no_address_tmp << "_128 u_R1D2_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb2_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "R1D3_" << no_address_tmp << "_128 u_R1D3_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb3_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "        //IFFT ROM0 Subbank0~3                                                                                              \n";                                                                            
	fftp_r4 << "    " << "IR0D0_" << no_address_tmp << "_64 u_IR0D0_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb0_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "    " << "IR0D1_" << no_address_tmp << "_64 u_IR0D1_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb1_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR0D2_" << no_address_tmp << "_64 u_IR0D2_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb2_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR0D3_" << no_address_tmp << "_64 u_IR0D3_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb3_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );	                                                                                    \n";
	fftp_r4 << "        //IFFT ROM1 Subbank0~3                                                                                              \n";                                                                           
	fftp_r4 << "    " << "IR1D0_" << no_address_tmp << "_128 u_IR1D0_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb0_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "    " << "IR1D1_" << no_address_tmp << "_128 u_IR1D1_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb1_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR1D2_" << no_address_tmp << "_128 u_IR1D2_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb2_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR1D3_" << no_address_tmp << "_128 u_IR0D3_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb3_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";                                                                                                             
}else{
	fftp_r4 << "    " << "ROM0 u_ROM0_" << (no_address_tmp*4) << "_64 (.Q(ROMD0_out_wire), //modify             \n";	
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";	
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";	
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                      \n";	
	fftp_r4 << "                                );		                                                                                    \n";	
    fftp_r4 << "    " << "ROM1 u_ROM1_" << (no_address_tmp*4) << "_128 (.Q(ROMD1_out_wire), //modify             \n";	
    fftp_r4 << "                                .CLK(clk),                                                                                  \n";	
    fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";	
    fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                      \n";	
    fftp_r4 << "                                );		                                                                                    \n";	
    fftp_r4 << "    " << "IROM0 u_IROM0_" << (no_address_tmp*4) << "_64 (.Q(IFFTROMD0_out_wire), //modify     \n";
    fftp_r4 << "                                    .CLK(clk),                                                                              \n";
    fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
    fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                  \n";
    fftp_r4 << "                                    );		                                                                                \n";
    fftp_r4 << "    " << "IROM1 u_IROM1_" << (no_address_tmp*4) << "_128 (.Q(IFFTROMD1_out_wire), //modify     \n";
    fftp_r4 << "                                    .CLK(clk),                                                                              \n";
    fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
    fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                  \n";
    fftp_r4 << "                                    );		                                                                                \n";
}
fftp_r4 << " endmodule                                                                                                                  \n"; 
 
     fftp_r4.close();
}
void FFTC::FFTP_r4_r2(std::string string_in){
	 std::ofstream fftp_r4;
     int no_address_tmp;
     no_address_tmp = exp2(addr_width-1); //number of address
     std::string        string_buf = "SRAM_SP_";
     std::stringstream  ss;
	 // For Mux-8 SRAM Max Word size is 4096 , then need word size is bigger than 4096 ,
	 // We need to  divide SRAM.  So this is a check constriant.
     if( (no_address_tmp * 2) > 4096) ss << string_buf << no_address_tmp <<"_128";
     else ss << string_buf << (no_address_tmp * 2) << "_128";
	 std::cout << "---->SRAM_NAME: "<<ss.str() <<"\n";
     //input file
     std::string string_fp = "/FFTP.v"; //file position 
     std::stringstream ss_fp;
     ss_fp << string_in << string_fp;
	 fftp_r4.open(ss_fp.str());
fftp_r4 << " //==================================================                                                                       \n";
fftp_r4 << " //                                                                                                                                     \n";
fftp_r4 << " //Date       : 2018/8/1  //modify 2020/3/11                                                                                \n";
fftp_r4 << " //Note       : FFT Processor                                                                                               \n";
fftp_r4 << " //==================================================                                                                       \n";
fftp_r4 << " `timescale 1 ns/1 ps                                                                                                       \n";
fftp_r4 << " module FFTP(MulValid_out,                                                                                                  \n";
fftp_r4 << "             MulD0_out,                                                                                                     \n";
fftp_r4 << "             MulD1_out,                                                                                                     \n";
fftp_r4 << "             MulD2_out,                                                                                                     \n";
fftp_r4 << "             MulD3_out,                                                                                                     \n";
fftp_r4 << "             ExtB0_D0_in,                                                                                                   \n";
fftp_r4 << "             ExtB0_D1_in,                                                                                                   \n";
fftp_r4 << "             ExtB0_D2_in,                                                                                                   \n";
fftp_r4 << "             ExtB0_D3_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D0_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D1_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D2_in,                                                                                                   \n";
fftp_r4 << "             ExtB1_D3_in,                                                                                                   \n";
fftp_r4 << "             N_in,                                                                                                          \n";
fftp_r4 << "             ExtValid_in,                                                                                                   \n";
fftp_r4 << "             rst_n,                                                                                                         \n";
fftp_r4 << "             clk                                                                                                            \n";
fftp_r4 << "             ) ;                                                                                                            \n";
fftp_r4 << " 			                                                                                                                \n";
fftp_r4 << " parameter CP_WIDTH  = "   << CP_width           << ";\n";
fftp_r4 << " parameter DOP_WIDTH = "   << (2*CP_width)       << ";\n";
fftp_r4 << " parameter HP_WIDTH  = 32 ;//half prime data bits 			                                                                                    \n";
fftp_r4 << " parameter P_WIDTH   = 64 ; 			                                                                                    \n";
fftp_r4 << " parameter A_WIDTH   = "   << addr_width     << ";                                                                          \n";
fftp_r4 << " parameter SD_WIDTH  = 128 ;                                                                                                \n";
fftp_r4 << " parameter ROMA_WIDTH  = " << ROM_width      << ";                                                                          \n";     
fftp_r4 << " parameter IREMA_WIDTH = " << (IReROM_width )<< ";\n";
fftp_r4 << " parameter DC_WIDTH    = " << data_cnt_width << ";                                                                          \n";          
fftp_r4 << " parameter RDC_WIDTH   = 2 ;                                                                                                \n";
fftp_r4 << " parameter OUT_PIPE_WIDTH   = "<< 64-(2*CP_width) <<";                                                                                                \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " output                MulValid_out ;                                                                                       \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD0_out ;                                                                                          \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD1_out ;                                                                                          \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD2_out ;                                                                                          \n";
fftp_r4 << " output[CP_WIDTH-1:0]   MulD3_out ;                                                                                          \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                         \n";
fftp_r4 << " input  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                         \n";
fftp_r4 << " input  [P_WIDTH-1:0]  N_in ;                                                                                                \n";
fftp_r4 << " input                 ExtValid_in ;                                                                                         \n";
fftp_r4 << " input                 rst_n ;                                                                                               \n";
fftp_r4 << " input                 clk ;                                                                                                 \n";
fftp_r4 << " //============================================= \n";
fftp_r4 << " //twiddle factor fft type data                  \n";
if((no_address_tmp * 2) > 4096){
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r0_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r1_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r2_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b0r3_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r0_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r1_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r2_wire;              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]  b1r3_wire;              \n";
	fftp_r4 << "                                             \n";
}else {
	fftp_r4 << " wire [SD_WIDTH-1:0]  b0ROM0_wire;              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  b0ROM1_wire;              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  b1ROM0_wire;              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  b1ROM1_wire;              \n";
	fftp_r4 << "                                                 \n";
}
fftp_r4 << " wire 				 BN_TWI_wire;                \n";
fftp_r4 << " wire [A_WIDTH-1:0]  MA_TWI_wire;                \n";
fftp_r4 << "                                                 \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix0_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix1_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix2_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix3_wire;             \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix0_pip_wire;         \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix1_pip_wire;         \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix2_pip_wire;         \n";
fftp_r4 << " wire [P_WIDTH-1:0]  TWIradix3_pip_wire;         \n";
fftp_r4 << "  //r4_inpipeReg wire============================    \n";
fftp_r4 << "                                                     \n";
fftp_r4 << "  wire                ExtValid_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D0_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D1_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D2_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB0_D3_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D0_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D1_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D2_wire  ;               \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] ExtB1_D3_wire  ;               \n";
fftp_r4 << "                                                     \n";
fftp_r4 << "  //-----------------------------------              \n";
fftp_r4 << "  wire  [A_WIDTH-1:0] REMA_wire;                  \n";
fftp_r4 << "  wire  [IREMA_WIDTH-1:0] IREMA;                  \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D0_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D1_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D2_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB0_D3_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D0_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D1_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D2_pip_wire ;        \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] ExtB1_D3_pip_wire ;        \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M0_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M1_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M2_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M3_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M0_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M1_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M2_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B0M3_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M0_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M1_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M2_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M3_a_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M0_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M1_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M2_b_o_wire;             \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] B1M3_b_o_wire;             \n";  
fftp_r4 << "                                                  \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M0_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M1_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M2_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B0M3_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M0_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M1_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M2_result_wire;          \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0]  B1M3_result_wire;          \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S0_wire;                \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S1_wire;                \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S2_wire;                \n";
fftp_r4 << "  wire [CP_WIDTH-1:0]  BR_S3_wire;                \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM0_wire;          \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM1_wire;          \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  ireorderROM0_wire;         \n";

if( 4 * CP_width > 96)fftp_r4 << "  wire  [P_WIDTH-1:0] ireorderROM1_wire;  \n";
else fftp_r4 << "  wire  [HP_WIDTH-1:0] ireorderROM1_wire;         \n";

fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM0_wire_reg_in;   \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  reorderROM1_wire_reg_in;   \n";
fftp_r4 << "  wire  [P_WIDTH-1:0]  ireorderROM0_wire_reg_in;  \n";

if( 4 * CP_width > 96)fftp_r4 << "  wire  [P_WIDTH-1:0] ireorderROM1_wire_reg_in;  \n";
else fftp_r4 << "  wire  [HP_WIDTH-1:0] ireorderROM1_wire_reg_in;  \n";

fftp_r4 << "                                                  \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r0;                \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r1;                \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r2;                \n";
fftp_r4 << "  wire  [CP_WIDTH-1:0] SP_Data_r3;                \n";
fftp_r4 << "  //pipe1                                                \n";
fftp_r4 << "  //pipe 2  the data for BR input                 \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD0_pip_wire;      \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD1_pip_wire;      \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD2_pip_wire;      \n";
fftp_r4 << "  wire  [P_WIDTH-1:0] CRUD3_pip_wire;      \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR0_pip_wire;        \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR1_pip_wire;        \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR2_pip_wire;        \n";
fftp_r4 << "  wire  [OUT_PIPE_WIDTH-1:0] BR3_pip_wire;        \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  wire                 BND_wire_pipo ;            \n";
fftp_r4 << "  wire [DC_WIDTH-1:0]  data_cnt_wire_pipo ;       \n";
fftp_r4 << "                                                  \n";
fftp_r4 << "  //==============================================\n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
            //bank0 memory0
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out0 ;                                                                                           \n";
           // bank0 memory1
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out1 ;                                                                                           \n";
           //bank1 memory0
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out2 ;                                                                                           \n";
          //bank1 memory1
fftp_r4 << " wire [SD_WIDTH-1:0]  Data_out3 ;                                                                                           \n";
fftp_r4 << " wire                 cen_wire ;                                                                                            \n";
fftp_r4 << " wire                 wen0_wire ;                                                                                           \n";
fftp_r4 << " wire                 wen1_wire ;                                                                                           \n";
fftp_r4 << " wire [2:0]           ema_wire ;                                                                                            \n";
fftp_r4 << " wire                 SD_sel_wire ;                                                                                         \n";
fftp_r4 << " wire [A_WIDTH-1:0]   ExtMA_wire ;                                                                                          \n";
fftp_r4 << " wire [A_WIDTH-1:0]   AGUMA_wire ;                                                                                          \n";
fftp_r4 << " wire [A_WIDTH-1:0]   MA0_wire ;                                                                                            \n";
fftp_r4 << " wire [A_WIDTH-1:0]   MA1_wire ;                                                                                            \n";
fftp_r4 << " wire                 AGU_en_wire ;                                                                                         \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN0_MEM0_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN0_MEM1_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN1_MEM0_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  BN1_MEM1_wire ;                                                                                       \n";
fftp_r4 << " wire                 BN_wire ;                                                                                             \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA0D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA1D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA2D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA3D_in_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA0D_out_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA1D_out_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA2D_out_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RA3D_out_wire ;                                                                                       \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire                 RomCen_wire ;                                                                                         \n";
fftp_r4 << " wire [ROMA_WIDTH-1:0] ROMA_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   ROMD0_out_wire ;                                                                                      \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  ROMD1_out_wire ;                                                                                      \n";
fftp_r4 << " wire [1:0]           Mul_sel_wire ;                                                                                        \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB0_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB1_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB2_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulB3_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod0_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod1_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod2_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulMod3_out_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out0_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out1_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out2_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]   RDC_out3_wire ;                                                                                       \n";
fftp_r4 << " wire [RDC_WIDTH-1:0] RDC_sel_wire ;                                                                                        \n";
fftp_r4 << " wire                 BND_wire ;                                                                                            \n";
fftp_r4 << " wire [A_WIDTH-1:0]   WMA_wire ;                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire [DC_WIDTH-1:0]  data_cnt_wire ;                                                                                       \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire                 mode_sel_wire ;                                                                                       \n";
fftp_r4 << " wire                 BU_mode_sel_wire ;                                                                                    \n";
fftp_r4 << " wire                 BU_mode_sel_D_wire ;                                                                                  \n";
fftp_r4 << " wire                 DC_mode_sel_wire ;                                                                                    \n";
fftp_r4 << " wire                 DC_mode_sel_D_wire ;                                                                                  \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulA1_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   MulA3_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   IFFTROMD0_out_wire ;                                                                                  \n";
fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTROMD1_out_wire ;                                                                                  \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire                 rc_sel_wire ;                                                                                         \n";
fftp_r4 << " wire                 m2_sel_wire ;                                                                                         \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD0_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD1_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD2_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]   CRUD3_wire ;                                                                                          \n";
fftp_r4 << " //---2018/08/01-------------------------------------                                                                       \n";
fftp_r4 << " wire                  mode_sel_D_wire ;                                                                                    \n";
fftp_r4 << " wire [1:0]            Mul_sel_D_wire ;                                                                                     \n";
fftp_r4 << " wire [RDC_WIDTH-1:0]  RDC_sel_D_wire ;                                                                                     \n";
//fftp_r4 << " wire [RDC_WIDTH-1:0]  FFT_FSmode_sel_D_wire ;                                                                              \n";
fftp_r4 << " wire                  wrfd_en_wire ;                                                                                       \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out0_D_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out1_D_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out2_D_wire ;                                                                                    \n";
fftp_r4 << " wire [P_WIDTH-1:0]    RDC_out3_D_wire ;                                                                                    \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << " wire [P_WIDTH-1:0]    N_D4_wire ;                                                                                          \n";
fftp_r4 << " wire [P_WIDTH-1:0]    ROMD0_D_wire ;                                                                                       \n";
fftp_r4 << " wire [SD_WIDTH-1:0]   ROMD1_D_wire ;                                                                                       \n";
fftp_r4 << " wire [P_WIDTH-1:0]    IFFTROMD0_D_wire ;                                                                                   \n";
fftp_r4 << " wire [SD_WIDTH-1:0]   IFFTROMD1_D_wire ;                                                                                   \n";
fftp_r4 << "                                                                                                                            \n";

if((no_address_tmp*2) > 4096){
	fftp_r4 << " //---2018/08/03 SubBank SRAM-----------------------------                                                                  \n";
	fftp_r4 << " wire                 wen0_mem_sb0_wire ;                                                                                   \n";
	fftp_r4 << " wire                 wen0_mem_sb1_wire ;                                                                                   \n";
	fftp_r4 << " wire                 wen1_mem_sb0_wire ;                                                                                   \n";
	fftp_r4 << " wire                 wen1_mem_sb1_wire ;                                                                                   \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem0_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem0_sb1_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem1_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout0_mem1_sb1_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem0_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem0_sb1_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem1_sb0_wire ;                                                                                 \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout1_mem1_sb1_wire ;                                                                                 \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << "                                                                                                                            \n";

	fftp_r4 << " //---2018/08/03 SubBank ROM-----------------------------                                                                   \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb0_wire ;                                                                                  \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb1_wire ;                                                                                  \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb2_wire ;                                                                                  \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   Dout_rom0_sb3_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb0_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb1_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb2_wire ;                                                                                  \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  Dout_rom1_sb3_wire ;                                                                                  \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb0_wire ;                                                                              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb1_wire ;                                                                              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb2_wire ;                                                                              \n";
	fftp_r4 << " wire [P_WIDTH-1:0]   IFFTDout_rom0_sb3_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb0_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb1_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb2_wire ;                                                                              \n";
	fftp_r4 << " wire [SD_WIDTH-1:0]  IFFTDout_rom1_sb3_wire ;                                                                              \n";
}
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "                                                                                                                            \n";
fftp_r4 << "     Rectrl u_Rectrl(                        \n";
fftp_r4 << "             .REMA(REMA_wire),               \n";
fftp_r4 << "             .ExtValid_in(ExtValid_in),      \n";
fftp_r4 << "             .rst_n(rst_n),                  \n";
fftp_r4 << "             .clk(clk)                       \n";
fftp_r4 << "     );                                      \n"; 
fftp_r4 << "\n";
fftp_r4 << "     R4_InpipeReg u_r4_inpipreg(                            \n";
fftp_r4 << "             .ExtValid_in(ExtValid_in),                     \n";
fftp_r4 << "             .ExtB0_D0_in(ExtB0_D0_in),                     \n";
fftp_r4 << "             .ExtB0_D1_in(ExtB0_D1_in),                     \n";
fftp_r4 << "             .ExtB0_D2_in(ExtB0_D2_in),                     \n";
fftp_r4 << "             .ExtB0_D3_in(ExtB0_D3_in),                     \n";
fftp_r4 << "             .ExtB1_D0_in(ExtB1_D0_in),                     \n";
fftp_r4 << "             .ExtB1_D1_in(ExtB1_D1_in),                     \n";
fftp_r4 << "             .ExtB1_D2_in(ExtB1_D2_in),                     \n";
fftp_r4 << "             .ExtB1_D3_in(ExtB1_D3_in),                     \n";
fftp_r4 << "             .ExtValid_out(ExtValid_wire),                  \n";
fftp_r4 << "             .ExtB0_D0_out(ExtB0_D0_pip_wire),              \n";
fftp_r4 << "             .ExtB0_D1_out(ExtB0_D1_pip_wire),              \n";
fftp_r4 << "             .ExtB0_D2_out(ExtB0_D2_pip_wire),              \n";
fftp_r4 << "             .ExtB0_D3_out(ExtB0_D3_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D0_out(ExtB1_D0_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D1_out(ExtB1_D1_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D2_out(ExtB1_D2_pip_wire),              \n";
fftp_r4 << "             .ExtB1_D3_out(ExtB1_D3_pip_wire),              \n";
fftp_r4 << "             .rst_n        (rst_n),                         \n";
fftp_r4 << "             .clk          (clk)                            \n";
fftp_r4 << "     );                                                     \n";
fftp_r4 << "     //----------------------------------------------------    \n";
fftp_r4 << "     // Barrett reduction multiplier                           \n";
fftp_r4 << "     //input A and input B Mux                                 \n";
fftp_r4 << "     Mux5 u_Mux5(                                              \n";
fftp_r4 << "                 .B0M0_ain_o(B0M0_a_o_wire),                   \n";
fftp_r4 << "                 .B0M1_ain_o(B0M1_a_o_wire),                   \n";
fftp_r4 << "                 .B0M2_ain_o(B0M2_a_o_wire),                   \n";
fftp_r4 << "                 .B0M3_ain_o(B0M3_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M0_ain_o(B1M0_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M1_ain_o(B1M1_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M2_ain_o(B1M2_a_o_wire),                   \n";
fftp_r4 << "     		     .B1M3_ain_o(B1M3_a_o_wire),                   \n";
fftp_r4 << "                 .B0M0_bin_o(B0M0_b_o_wire),                   \n";
fftp_r4 << "                 .B0M1_bin_o(B0M1_b_o_wire),                   \n";
fftp_r4 << "                 .B0M2_bin_o(B0M2_b_o_wire),                   \n";
fftp_r4 << "                 .B0M3_bin_o(B0M3_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M0_bin_o(B1M0_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M1_bin_o(B1M1_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M2_bin_o(B1M2_b_o_wire),                   \n";
fftp_r4 << "     		     .B1M3_bin_o(B1M3_b_o_wire),                   \n";
fftp_r4 << "                 .ExtB0_D0(ExtB0_D0_pip_wire),                 \n";
fftp_r4 << "                 .ExtB0_D1(ExtB0_D1_pip_wire),                 \n";
fftp_r4 << "                 .ExtB0_D2(ExtB0_D2_pip_wire),                 \n";
fftp_r4 << "                 .ExtB0_D3(ExtB0_D3_pip_wire),                 \n";
fftp_r4 << "     		     .ExtB1_D0_pip(ExtB1_D0_pip_wire),             \n";
fftp_r4 << "     		     .ExtB1_D1_pip(ExtB1_D1_pip_wire),             \n";
fftp_r4 << "     		     .ExtB1_D2_pip(ExtB1_D2_pip_wire),             \n";
fftp_r4 << "     		     .ExtB1_D3_pip(ExtB1_D3_pip_wire),             \n";
fftp_r4 << "                 .SP_r0(SP_Data_r0),                           \n";
fftp_r4 << "                 .SP_r1(SP_Data_r1),                           \n";
fftp_r4 << "                 .SP_r2(SP_Data_r2),                           \n";
fftp_r4 << "                 .SP_r3(SP_Data_r3),                           \n";
fftp_r4 << "     		     .CRUD0(CRUD0_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "     		     .CRUD1(CRUD1_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "     		     .CRUD2(CRUD2_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "     		     .CRUD3(CRUD3_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r4 << "                 .reorderb0r0(reorderROM0_wire[63:"<< 63 -(CP_width-1)<<"]),\n";
fftp_r4 << "                 .reorderb0r1(reorderROM0_wire["<< 63 - CP_width <<":"<< 63-(2*CP_width - 1)<<"]),\n";
fftp_r4 << "     		     .reorderb1r0(reorderROM1_wire[63:"<< 63 -(CP_width-1)<<"]),\n";
fftp_r4 << "     		     .reorderb1r1(reorderROM1_wire["<< 63 - CP_width <<":"<< 63-(2*CP_width - 1)<<"]),\n";
fftp_r4 << "                 .ireorderr0(ireorderROM0_wire[63:"<< 63 -(CP_width-1) <<"]),                 \n";
fftp_r4 << "                 .ireorderr1(ireorderROM0_wire["<< 63 - CP_width <<":"<< 63-(2*CP_width - 1) <<"]),\n";

unsigned long radix2_in_ROM1_bits;
radix2_in_ROM1_bits = 3 * CP_width - 64;

if( 4 * CP_width > 96){
	fftp_r4 << "                 .ireorderr2({ireorderROM0_wire["<< 63 - 2 * CP_width <<":0],ireorderROM1_wire[63:"<< 64 - radix2_in_ROM1_bits <<"]}),\n";
	fftp_r4 << "                 .ireorderr3(ireorderROM1_wire["<< 63 - radix2_in_ROM1_bits <<":"<< 64 - radix2_in_ROM1_bits - CP_width <<"]),\n";
}else { //ireorderROM1 bit size = 32
	fftp_r4 << "                 .ireorderr2({ireorderROM0_wire["<< 63 - 2 * CP_width <<":0],ireorderROM1_wire[31:"<< 32 - radix2_in_ROM1_bits <<"]}),\n";
	fftp_r4 << "                 .ireorderr3(ireorderROM1_wire["<< 31 - radix2_in_ROM1_bits <<":"<< 32 - radix2_in_ROM1_bits - CP_width <<"]),\n";
}
fftp_r4 << "                 .re_sel(SD_sel_wire)                          \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     Mux6 u_Mux6(                                              \n";
fftp_r4 << "             .ExtB0_D0(ExtB0_D0_wire),                         \n";
fftp_r4 << "             .ExtB0_D1(ExtB0_D1_wire),                         \n";
fftp_r4 << "             .ExtB0_D2(ExtB0_D2_wire),                         \n";
fftp_r4 << "             .ExtB0_D3(ExtB0_D3_wire),                         \n";
fftp_r4 << "             .ExtB1_D0(ExtB1_D0_wire),                         \n";
fftp_r4 << "             .ExtB1_D1(ExtB1_D1_wire),                         \n";
fftp_r4 << "             .ExtB1_D2(ExtB1_D2_wire),                         \n";
fftp_r4 << "             .ExtB1_D3(ExtB1_D3_wire),                         \n";
fftp_r4 << "             .MulD0_out(MulD0_out),                            \n";
fftp_r4 << "             .MulD1_out(MulD1_out),                            \n";
fftp_r4 << "             .MulD2_out(MulD2_out),                            \n";
fftp_r4 << "             .MulD3_out(MulD3_out),                            \n";
fftp_r4 << "             .BR_S0(BR_S0_wire),                               \n";
fftp_r4 << "             .BR_S1(BR_S1_wire),                               \n";
fftp_r4 << "             .BR_S2(BR_S2_wire),                               \n";
fftp_r4 << "             .BR_S3(BR_S3_wire),                               \n";
fftp_r4 << "             .B1M0_result({"<< (64- CP_width)<<"'d0,B1M0_result_wire}),                   \n";
fftp_r4 << "             .B1M1_result({"<< (64- CP_width)<<"'d0,B1M1_result_wire}),                   \n";
fftp_r4 << "             .B1M2_result({"<< (64- CP_width)<<"'d0,B1M2_result_wire}),                   \n";
fftp_r4 << "             .B1M3_result({"<< (64- CP_width)<<"'d0,B1M3_result_wire}),                   \n";
fftp_r4 << "             .B0M0_result({"<< (64 - CP_width) <<"'d0,B0M0_result_wire}),                   \n";
fftp_r4 << "             .B0M1_result({"<< (64 - CP_width) <<"'d0,B0M1_result_wire}),                   \n";
fftp_r4 << "             .B0M2_result({"<< (64 - CP_width) <<"'d0,B0M2_result_wire}),                   \n";
fftp_r4 << "             .B0M3_result({"<< (64 - CP_width) <<"'d0,B0M3_result_wire}),                   \n";
fftp_r4 << "             .m2_sel(m2_sel_wire)                              \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     R4_BU_outpipe u_R4_BU_outpipe(                                  \n"; 
fftp_r4 << "     		.CRUD0_o(CRUD0_pip_wire),                          \n";
fftp_r4 << "     		.CRUD1_o(CRUD1_pip_wire),                          \n";
fftp_r4 << "     		.CRUD2_o(CRUD2_pip_wire),                          \n";
fftp_r4 << "     		.CRUD3_o(CRUD3_pip_wire),                          \n";
fftp_r4 << "     		.BR0_o(BR0_pip_wire),                            \n";
fftp_r4 << "     		.BR1_o(BR1_pip_wire),                            \n";
fftp_r4 << "     		.BR2_o(BR2_pip_wire),                            \n";
fftp_r4 << "     		.BR3_o(BR3_pip_wire),                            \n";
fftp_r4 << "     		.CRUD0_i(CRUD0_wire),                              \n";
fftp_r4 << "     		.CRUD1_i(CRUD1_wire),                              \n";
fftp_r4 << "     		.CRUD2_i(CRUD2_wire),                              \n";
fftp_r4 << "     		.CRUD3_i(CRUD3_wire),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "     		.clk(clk)                                          \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     MulMod B0M0(                                              \n";
fftp_r4 << "             .A_in(B0M0_a_o_wire), //need to modify            \n";
fftp_r4 << "             .B_in(B0M0_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M0_result_wire)  //need to modify 4/19  \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B0M1(                                             \n";
fftp_r4 << "             .A_in(B0M1_a_o_wire),//need to modify 4/19        \n";
fftp_r4 << "             .B_in(B0M1_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M1_result_wire)//need to modify 4/19    \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B0M2(                                             \n";
fftp_r4 << "             .A_in(B0M2_a_o_wire),//need to modify 4/19        \n";
fftp_r4 << "             .B_in(B0M2_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M2_result_wire)//need to modify 4/19    \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B0M3(                                             \n";
fftp_r4 << "             .A_in(B0M3_a_o_wire),//need to modify 4/19        \n";
fftp_r4 << "             .B_in(B0M3_b_o_wire),                       \n";
fftp_r4 << "             .bypass(1'b0),                                        \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B0M3_result_wire)//need to modify 4/19    \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     MulMod B1M0(                                              \n";
fftp_r4 << "             .A_in(B1M0_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M0_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M0_result_wire)                         \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B1M1(                                             \n";
fftp_r4 << "             .A_in(B1M1_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M1_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M1_result_wire)                         \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B1M2(                                             \n";
fftp_r4 << "             .A_in(B1M2_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M2_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M2_result_wire)                         \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "      MulMod B1M3(                                             \n";
fftp_r4 << "             .A_in(B1M3_a_o_wire),                             \n";
fftp_r4 << "             .B_in(B1M3_b_o_wire),                             \n";
fftp_r4 << "             .bypass(m2_sel_wire),                             \n";
fftp_r4 << "             .clk(clk),                                        \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .result(B1M3_result_wire)                            \n";
fftp_r4 << "     );                                                        \n";

int BR_bit_size;
int double_cp_width;
int padding_zero_number;

BR_bit_size = 64 - 2 * CP_width;
double_cp_width =  2 * CP_width;
padding_zero_number = double_cp_width - BR_bit_size - CP_width;

fftp_r4 << "     BR u_BR0(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S0_wire,BR0_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r0),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     BR u_BR1(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S1_wire,BR1_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r1),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     BR u_BR2(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S2_wire,BR2_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r2),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "                                                               \n";
fftp_r4 << "     BR u_BR3(                                                 \n";
fftp_r4 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S3_wire,BR3_pip_wire}),           \n";
fftp_r4 << "             .result(SP_Data_r3),                              \n";
fftp_r4 << "             .rst_n(rst_n),                                    \n";
fftp_r4 << "             .clk(clk)	                                       \n";
fftp_r4 << "     );                                                        \n";
fftp_r4 << "     //----------------------------------------------------    \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	CenCtrl u_CenCtrl(.MulValid_out(MulValid_out),                                                                          \n";
fftp_r4 << "                    .cen_out(cen_wire),                                                                                     \n";
fftp_r4 << "                    .wen0_out(wen0_wire),                                                                                   \n";
fftp_r4 << "                    .wen1_out(wen1_wire),                                                                                   \n";
fftp_r4 << "                    .ema_out(ema_wire),                                                                                     \n";
fftp_r4 << "                    .SD_sel_out(SD_sel_wire),                                                                               \n";
fftp_r4 << "                    .ExtMA_out(ExtMA_wire),                                                                                 \n";
fftp_r4 << "                    .AGU_en_out(AGU_en_wire),                                                                               \n";
fftp_r4 << "                    .RomCen_out(RomCen_wire),                                                                               \n";
fftp_r4 << "                    .mode_sel_out(mode_sel_wire),                                                                           \n";
fftp_r4 << "                    .rc_sel_out(rc_sel_wire),                                                                               \n";
fftp_r4 << "                    .m2_sel_out(m2_sel_wire),                                                                               \n";
fftp_r4 << "                    .wrfd_en_out(wrfd_en_wire), // 2018/08/01                                                               \n";
fftp_r4 << "                    .data_cnt_in(data_cnt_wire),                                                                            \n";
fftp_r4 << "                    .BND_in(BND_wire),                                                                                      \n";
fftp_r4 << "                    .ExtValid_in(ExtValid_wire),                                                                              \n";
fftp_r4 << "                    .rst_n(rst_n),                                                                                          \n";
fftp_r4 << "                    .clk(clk)                                                                                               \n";
fftp_r4 << "                    ) ;                                                                                                     \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_AGU u_R4_AGU(.BN_out(BN_wire),                                                                                       \n";
fftp_r4 << "                  .MA(AGUMA_wire),                                                                                          \n";
fftp_r4 << "                  .ROMA(ROMA_wire),                                                                                         \n";
fftp_r4 << "                  .Mul_sel_out(Mul_sel_wire),                                                                               \n";
fftp_r4 << "                  .RDC_sel_out(RDC_sel_wire),                                                                               \n";
fftp_r4 << "                  .data_cnt_reg(data_cnt_wire),                                                                             \n";
fftp_r4 << "                  .BU_mode_sel_out(BU_mode_sel_wire),                                                                           \n";
fftp_r4 << "                  .DC_mode_sel_out(DC_mode_sel_wire),                                                                           \n";
fftp_r4 << "                  .mode_sel_in(mode_sel_wire),                                                                              \n";
fftp_r4 << "                  .rc_sel_in(rc_sel_wire),                                                                                  \n";
fftp_r4 << "                  .AGU_en(AGU_en_wire),                                                                                     \n";
fftp_r4 << "                  .wrfd_en_in(wrfd_en_wire), // 2018/08/01                                                                  \n";
fftp_r4 << "                  .rst_n(rst_n),                                                                                            \n";
fftp_r4 << "                  .clk(clk)                                                                                                 \n";
fftp_r4 << "                  ) ;                                                                                                       \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//Control Signal Pipeline Register, 2018/08/01                                                                          \n";
fftp_r4 << " 	Ctrl_PipeReg1 u_Ctrl_PipeReg1(.mode_sel_Dout(mode_sel_D_wire),                                                          \n";
fftp_r4 << "                                .Mul_sel_Dout(Mul_sel_D_wire),                                                              \n";
fftp_r4 << "                                .RDC_sel_Dout(RDC_sel_D_wire),                                                              \n";
fftp_r4 << "                                .BU_mode_sel_Dout(BU_mode_sel_D_wire),                                                              \n";
fftp_r4 << "                                .DC_mode_sel_Dout(DC_mode_sel_D_wire),                                                              \n";
//fftp_r4 << "                                .FFT_FSmode_sel_Dout(FFT_FSmode_sel_D_wire),                                                \n";
fftp_r4 << "                                .mode_sel_in(mode_sel_wire),                                                                \n";
fftp_r4 << "                                .Mul_sel_in(Mul_sel_wire),                                                                  \n";
fftp_r4 << "                                .RDC_sel_in(RDC_sel_wire),                                                                  \n";
//fftp_r4 << "                                .FFT_FSmode_sel_in(FFT_FSmode_sel_wire),                                                    \n";
fftp_r4 << "                                .BU_mode_sel_in(BU_mode_sel_wire),                                                    \n";
fftp_r4 << "                                .DC_mode_sel_in(DC_mode_sel_wire),                                                    \n";
fftp_r4 << "                                .rst_n(rst_n),                                                                              \n";
fftp_r4 << "                                .clk(clk)                                                                                   \n";
fftp_r4 << "                                ) ;                                                                                         \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_WAddr u_R4_WAddr(.BND_out(BND_wire),                                                                                 \n";
fftp_r4 << "                      .WMA_out(WMA_wire),                                                                                   \n";
fftp_r4 << "                      .BN_in(BN_wire),                                                                                      \n";
fftp_r4 << "                      .MA_in(AGUMA_wire),                                                                                   \n";
fftp_r4 << "                      .rst_n(rst_n),                                                                                        \n";
fftp_r4 << "                      .clk(clk)                                                                                             \n";
fftp_r4 << "                      ) ;                                                                                                   \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << "    //-----------------------------------------------------\n";

if((no_address_tmp*2) > 4096){
	fftp_r4 << "	                                                       \n";
    fftp_r4 << "    TWIMux u_TWIMUX(                                       \n";
    fftp_r4 << "				    .TWIradix0(TWIradix0_wire),            \n";
    fftp_r4 << "					.TWIradix1(TWIradix1_wire),            \n";
    fftp_r4 << "					.TWIradix2(TWIradix2_wire),            \n";
    fftp_r4 << "					.TWIradix3(TWIradix3_wire),            \n";
    fftp_r4 << "					.b0radix0(b0r0_wire),                  \n";
    fftp_r4 << "					.b0radix1(b0r1_wire),                  \n";
    fftp_r4 << "					.b0radix2(b0r2_wire),                  \n";
    fftp_r4 << "					.b0radix3(b0r3_wire),                  \n";
    fftp_r4 << "					.b1radix0(b1r0_wire),                  \n";
    fftp_r4 << "					.b1radix1(b1r1_wire),                  \n";
    fftp_r4 << "					.b1radix2(b1r2_wire),                  \n";
    fftp_r4 << "					.b1radix3(b1r3_wire),                  \n";
    fftp_r4 << "					.BN_wire(BN_TWI_wire)                  \n";
	fftp_r4 << "	);                                                     \n";
}
else {
	fftp_r4 << "	                                                       \n";
	fftp_r4 << "    TWIMux u_TWIMUX(                                       \n";
	fftp_r4 << "				    .TWIradix0(TWIradix0_wire),            \n";
	fftp_r4 << "					.TWIradix1(TWIradix1_wire),            \n";
	fftp_r4 << "					.TWIradix2(TWIradix2_wire),            \n";
	fftp_r4 << "					.TWIradix3(TWIradix3_wire),            \n";
	fftp_r4 << "					.b0radix0(b0ROM0_wire[127:64]),        \n";
	fftp_r4 << "					.b0radix1(b0ROM0_wire[63:0]),          \n";
	fftp_r4 << "					.b0radix2(b0ROM1_wire[127:64]),        \n";
	fftp_r4 << "					.b0radix3(b0ROM1_wire[63:0]),          \n";
	fftp_r4 << "					.b1radix0(b1ROM0_wire[127:64]),        \n";
	fftp_r4 << "					.b1radix1(b1ROM0_wire[63:0]),          \n";
	fftp_r4 << "					.b1radix2(b1ROM1_wire[127:64]),        \n";
	fftp_r4 << "					.b1radix3(b1ROM1_wire[63:0]),          \n";
	fftp_r4 << "					.BN_wire(BN_TWI_wire)                  \n";
	fftp_r4 << "	);                                                     \n";
}
fftp_r4 << "   //---------------------------------------------------------\n";
fftp_r4 << "                                                           \n";
fftp_r4 << "	TWIpipe u_TWIpipe(                                     \n";
fftp_r4 << "					  .BN_out(BN_TWI_wire),                \n";
fftp_r4 << "					  .MA_out(MA_TWI_wire),                \n";
fftp_r4 << "	                  .TWIradix0_o(TWIradix0_pip_wire),    \n";
fftp_r4 << "	                  .TWIradix1_o(TWIradix1_pip_wire),    \n";
fftp_r4 << "	                  .TWIradix2_o(TWIradix2_pip_wire),    \n";
fftp_r4 << "	                  .TWIradix3_o(TWIradix3_pip_wire),    \n";
fftp_r4 << "	                  .BN_in(BN_wire),                     \n";
fftp_r4 << "	                  .MA_in(AGUMA_wire),                  \n";
fftp_r4 << "	                  .TWIradix0_i(TWIradix0_wire),        \n";
fftp_r4 << "	                  .TWIradix1_i(TWIradix1_wire),        \n";
fftp_r4 << "	                  .TWIradix2_i(TWIradix2_wire),        \n";
fftp_r4 << "	                  .TWIradix3_i(TWIradix3_wire),        \n";
fftp_r4 << "	                  .rst_n(rst_n),                       \n";
fftp_r4 << "	                  .clk(clk)                            \n";
fftp_r4 << "	);                                                     \n";
fftp_r4 << "	                                                       \n";
if((no_address_tmp*2) > 4096){
	fftp_r4 << "	H_b0r0 u_H_b0r0(                                       \n";
    fftp_r4 << "				.Q(b0r0_wire),                             \n";
    fftp_r4 << "				.CLK(clk),                                 \n";
    fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
    fftp_r4 << "				.A(MA_TWI_wire)                            \n";
    fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b0r1 u_H_b0r1(                                       \n";
	fftp_r4 << "				.Q(b0r1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b0r2 u_H_b0r2(                                       \n";
    fftp_r4 << "				.Q(b0r2_wire),                             \n";
    fftp_r4 << "				.CLK(clk),                                 \n";
    fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
    fftp_r4 << "				.A(MA_TWI_wire)                            \n";
    fftp_r4 << "	);                                                     \n";
    fftp_r4 << "	H_b0r3 u_H_b0r3(                                       \n";
    fftp_r4 << "				.Q(b0r3_wire),                             \n";
    fftp_r4 << "				.CLK(clk),                                 \n";
    fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
    fftp_r4 << "				.A(MA_TWI_wire)                            \n";
    fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r0 u_H_b1r0(                                       \n";
	fftp_r4 << "				.Q(b1r0_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r1 u_H_b1r1(                                       \n";
	fftp_r4 << "				.Q(b1r1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r2 u_H_b1r2(                                       \n";
	fftp_r4 << "				.Q(b1r2_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	H_b1r3 u_H_b1r3(                                       \n";
	fftp_r4 << "				.Q(b1r3_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";

}else {
	fftp_r4 << "	H_b0ROM0 u_H_b0ROM0(                                       \n";
	fftp_r4 << "				.Q(b0ROM0_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "                                                           \n";
	fftp_r4 << "    H_b0ROM1 u_H_b0ROM1(                                       \n";
	fftp_r4 << "				.Q(b0ROM1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "    );                                                     \n";
	fftp_r4 << "	                                                       \n";
	fftp_r4 << "	H_b1ROM0 u_H_b1ROM0(                                       \n";
	fftp_r4 << "				.Q(b1ROM0_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "    			.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	                                                       \n";
	fftp_r4 << "	H_b1ROM1 u_H_b1ROM1(                                       \n";
	fftp_r4 << "				.Q(b1ROM1_wire),                             \n";
	fftp_r4 << "				.CLK(clk),                                 \n";
	fftp_r4 << "				.CEN(~AGU_en_wire),                        \n";
	fftp_r4 << "				.A(MA_TWI_wire)                            \n";
	fftp_r4 << "	);                                                     \n";
	fftp_r4 << "	                                                       \n";
}
fftp_r4 << " 	//---FFT1----------------------------------------------                                                                 \n";
fftp_r4 << " 	//for SRAM                                                                                                              \n";
fftp_r4 << " 	Mux1 u_Mux1(.BN0_MEM0_Dout(BN0_MEM0_wire),                                                                              \n";
fftp_r4 << "              .BN0_MEM1_Dout(BN0_MEM1_wire),                                                                                \n";
fftp_r4 << "              .BN1_MEM0_Dout(BN1_MEM0_wire),                                                                                \n";
fftp_r4 << "              .BN1_MEM1_Dout(BN1_MEM1_wire),                                                                                \n";
fftp_r4 << "              .MA0_out(MA0_wire),                                                                                           \n";
fftp_r4 << "              .MA1_out(MA1_wire),                                                                                           \n";
fftp_r4 << "              .ExtB0_D0_in(ExtB0_D0_wire),                                                                                    \n";
fftp_r4 << "              .ExtB0_D1_in(ExtB0_D1_wire),                                                                                    \n";
fftp_r4 << "              .ExtB0_D2_in(ExtB0_D2_wire),                                                                                    \n";
fftp_r4 << "              .ExtB0_D3_in(ExtB0_D3_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D0_in(ExtB1_D0_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D1_in(ExtB1_D1_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D2_in(ExtB1_D2_wire),                                                                                    \n";
fftp_r4 << "              .ExtB1_D3_in(ExtB1_D3_wire),                                                                                    \n";
fftp_r4 << "              .RDC_in0(RDC_out0_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .RDC_in1(RDC_out1_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .RDC_in2(RDC_out2_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .RDC_in3(RDC_out3_D_wire), // 2018/08/01                                                                      \n";
fftp_r4 << "              .ExtMA_in(ExtMA_wire),                                                                                        \n";
fftp_r4 << "              .AGUMA_in(AGUMA_wire),                                                                                        \n";
fftp_r4 << "              .WMA_in(WMA_wire),                                                                                            \n";
fftp_r4 << "              .wen0_in(wen0_wire),                                                                                          \n";
fftp_r4 << "              .wen1_in(wen1_wire),                                                                                          \n";
fftp_r4 << "              .SD_sel(SD_sel_wire)                                                                                          \n";
fftp_r4 << "              ) ;                                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//for Radix-4                                                                                                           \n";
fftp_r4 << " 	Mux2 u_Mux2(.RA0_out(RA0D_in_wire),                                                                                     \n";
fftp_r4 << "              .RA1_out(RA1D_in_wire),                                                                                       \n";
fftp_r4 << "              .RA2_out(RA2D_in_wire),                                                                                       \n";
fftp_r4 << "              .RA3_out(RA3D_in_wire),                                                                                       \n";
fftp_r4 << "              .BN0_MEM0_in(Data_out0),                                                                                      \n";
fftp_r4 << "              .BN0_MEM1_in(Data_out1),                                                                                      \n";
fftp_r4 << "              .BN1_MEM0_in(Data_out2),                                                                                      \n";
fftp_r4 << "              .BN1_MEM1_in(Data_out3),                                                                                      \n";
fftp_r4 << "              .BN_sel(BN_wire)                                                                                              \n";
fftp_r4 << "              ) ;                                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	Radix4_Pipe u_Radix4_Pipe(.RA0_out(RA0D_out_wire),                                                                      \n";
fftp_r4 << "                            .RA1_out(RA1D_out_wire),                                                                        \n";
fftp_r4 << "                            .RA2_out(RA2D_out_wire),                                                                        \n";
fftp_r4 << "                            .RA3_out(RA3D_out_wire),                                                                        \n";
fftp_r4 << "                            .RA0_in(RA0D_in_wire),                                                                          \n";
fftp_r4 << "                            .RA1_in(RA1D_in_wire),                                                                          \n";
fftp_r4 << "                            .RA2_in(RA2D_in_wire),                                                                          \n";
fftp_r4 << "                            .RA3_in(RA3D_in_wire),                                                                          \n";
fftp_r4 << "                            .N_in(N_in),                                                                                    \n";
fftp_r4 << "                            .BU_mode_sel_in(BU_mode_sel_D_wire), // 2018/08/01                                                       \n";
fftp_r4 << "                            .rst_n(rst_n),                                                                                  \n";
fftp_r4 << "                            .clk(clk)                                                                                       \n";
fftp_r4 << "                            ) ;                                                                                             \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//for Mul                                                                                                               \n";
fftp_r4 << " 	Mux3 u_Mux3(.MulB0_out(MulB0_wire),                                                                                     \n";
fftp_r4 << "              .MulB1_out(MulB1_wire),                                                                                       \n";
fftp_r4 << "              .MulB2_out(MulB2_wire),                                                                                       \n";
fftp_r4 << "              .MulB3_out(MulB3_wire),                                                                                       \n";
fftp_r4 << "              .MulA1_out(MulA1_wire),                                                                                       \n";
fftp_r4 << "              .MulA3_out(MulA3_wire),                                                                                       \n";
fftp_r4 << "              .IFFTROMD0_in(IFFTROMD0_D_wire), // 2018/08/01                                                                \n";
fftp_r4 << "              .IFFTROMD1_in(IFFTROMD1_D_wire), // 2018/08/01                                                                \n";
fftp_r4 << "              .ROMD0_in(ROMD0_D_wire), // 2018/08/01                                                                        \n";
fftp_r4 << "              .ROMD1_in(ROMD1_D_wire), // 2018/08/01                                                                        \n";
fftp_r4 << "              .FFTBD0_in(TWIradix0_pip_wire),                                                                                  \n";
fftp_r4 << "              .FFTBD1_in(TWIradix1_pip_wire),                                                                                  \n";
fftp_r4 << "              .FFTBD2_in(TWIradix2_pip_wire),                                                                                  \n";
fftp_r4 << "              .FFTBD3_in(TWIradix3_pip_wire),                                                                                  \n";
fftp_r4 << "              .RA1D_in(RA1D_out_wire),                                                                                      \n";
fftp_r4 << "              .RA3D_in(RA3D_out_wire),                                                                                      \n";
fftp_r4 << "              .Mul_sel(Mul_sel_D_wire), // 2018/08/01                                                                       \n";
fftp_r4 << "              .mode_sel(mode_sel_D_wire) // 2018/08/01                                                                      \n";
fftp_r4 << "              ) ;                                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//Pipeline Register, 2018/08/01                                                                                         \n";
fftp_r4 << " 	R4_NPipeReg3 u_R4_NPipeReg3(.N_D4_out(N_D4_wire),                                                                       \n";
fftp_r4 << "                              .N_in(N_in),                                                                                  \n";
fftp_r4 << "                              .rst_n(rst_n),                                                                                \n";
fftp_r4 << "                              .clk(clk)                                                                                     \n";
fftp_r4 << "                              ) ;                                                                                           \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_TMulMod u_R4_TMulMod(.MulMod0_out(MulMod0_out_wire),                                                                 \n";
fftp_r4 << "                          .MulMod1_out(MulMod1_out_wire),                                                                   \n";
fftp_r4 << "                          .MulMod2_out(MulMod2_out_wire),                                                                   \n";
fftp_r4 << "                          .MulMod3_out(MulMod3_out_wire),				                                                    \n";
fftp_r4 << "                          .RA0D_in(RA0D_out_wire),                                                                          \n";
fftp_r4 << "                          .MulA1_in(MulA1_wire),                                                                            \n";
fftp_r4 << "                          .RA2D_in(RA2D_out_wire),                                                                          \n";
fftp_r4 << "                          .MulA3_in(MulA3_wire),				                                                            \n";
fftp_r4 << "                          .MulB0_in(MulB0_wire),                                                                            \n";
fftp_r4 << "                          .MulB1_in(MulB1_wire),                                                                            \n";
fftp_r4 << "                          .MulB2_in(MulB2_wire),                                                                            \n";
fftp_r4 << "                          .MulB3_in(MulB3_wire),				                                                            \n";
fftp_r4 << "                          .N_in(N_D4_wire),                                                                                 \n";
fftp_r4 << "                          .rst_n(rst_n),                                                                                    \n";
fftp_r4 << "                          .clk(clk)                                                                                         \n";
fftp_r4 << "                          ) ;                                                                                               \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//                                                                                                                      \n";
fftp_r4 << " 	R4_DC u_R4_DC(.RDC_out0(RDC_out0_wire),                                                                                 \n";
fftp_r4 << "                .RDC_out1(RDC_out1_wire),                                                                                   \n";
fftp_r4 << "                .RDC_out2(RDC_out2_wire),                                                                                   \n";
fftp_r4 << "                .RDC_out3(RDC_out3_wire),                                                                                   \n";
fftp_r4 << "                .RDC_in0(MulMod0_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_in1(MulMod1_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_in2(MulMod2_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_in3(MulMod3_out_wire),                                                                                 \n";
fftp_r4 << "                .RDC_sel(RDC_sel_D_wire), // 2018/08/01                                                                     \n";
//fftp_r4 << "                .FFT_FSmode_sel(FFT_FSmode_sel_D_wire), // 2018/08/01                                                       \n";
fftp_r4 << "                .DC_mode_sel_in(DC_mode_sel_D_wire), // 2018/08/01                                                       \n";
fftp_r4 << "                .rst_n(rst_n),                                                                                              \n";
fftp_r4 << "                .clk(clk)                                                                                                   \n";
fftp_r4 << "                ) ;                                                                                                         \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	// 2018/08/01                                                                                                           \n";
fftp_r4 << " 	R4_WD_buf u_R4_WD_buf(.RDC0_D_out(RDC_out0_D_wire),                                                                     \n";
fftp_r4 << "                        .RDC1_D_out(RDC_out1_D_wire),                                                                       \n";
fftp_r4 << "                        .RDC2_D_out(RDC_out2_D_wire),                                                                       \n";
fftp_r4 << "                        .RDC3_D_out(RDC_out3_D_wire),                                                                       \n";
fftp_r4 << "                        .RDC0_in(RDC_out0_wire),                                                                            \n";
fftp_r4 << "                        .RDC1_in(RDC_out1_wire),                                                                            \n";
fftp_r4 << "                        .RDC2_in(RDC_out2_wire),                                                                            \n";
fftp_r4 << "                        .RDC3_in(RDC_out3_wire),				                                                            \n";
fftp_r4 << "                        .rst_n(rst_n),                                                                                      \n";
fftp_r4 << "                        .clk(clk)                                                                                           \n";
fftp_r4 << "                        ) ;                                                                                                 \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//-----------------------------------------------------                                                                 \n";
fftp_r4 << " 	// for CRUR4                                                                                                            \n";
fftp_r4 << " 	Mux4 u_Mux4(.CRUD0_out(CRUD0_wire),                                                                                     \n";
fftp_r4 << "                .CRUD1_out(CRUD1_wire),                                                                                     \n";
fftp_r4 << "                .CRUD2_out(CRUD2_wire),                                                                                     \n";
fftp_r4 << "                .CRUD3_out(CRUD3_wire),                                                                                     \n";
fftp_r4 << "                .IFFTD0_in(RA0D_in_wire),                                                                                   \n";
fftp_r4 << "                .IFFTD1_in(RA1D_in_wire),                                                                                   \n";
fftp_r4 << "                .IFFTD2_in(RA2D_in_wire),                                                                                   \n";
fftp_r4 << "                .IFFTD3_in(RA3D_in_wire),                                                                                   \n";
fftp_r4 << "                .m2_sel(m2_sel_wire)                                                                                        \n";
fftp_r4 << "                ) ;                                                                                                         \n";
fftp_r4 << " 	                                                                                                                        \n";
fftp_r4 << " 	//Pipeline Register, 2018/08/01				                                                                            \n";
fftp_r4 << " 	R4_ROMPipeReg1 u_R4_ROMPipeReg1(.ROMD0_Dout(ROMD0_D_wire),                                                              \n";
fftp_r4 << " 				                    .ROMD1_Dout(ROMD1_D_wire),			                                                    \n";
fftp_r4 << " 								    .IFFTROMD0_Dout(IFFTROMD0_D_wire),                                                      \n";
fftp_r4 << " 				                    .IFFTROMD1_Dout(IFFTROMD1_D_wire),				                                        \n";
fftp_r4 << " 			                        .ROMD0_in(ROMD0_out_wire),                                                              \n";
fftp_r4 << " 					                .ROMD1_in(ROMD1_out_wire),					                                            \n";
fftp_r4 << " 								    .IFFTROMD0_in(IFFTROMD0_out_wire),                                                      \n";
fftp_r4 << " 					                .IFFTROMD1_in(IFFTROMD1_out_wire),					                                    \n";
fftp_r4 << "                                  .rst_n(rst_n),                                                                            \n";
fftp_r4 << "                                  .clk(clk)                                                                                 \n";
fftp_r4 << "                                  ) ;		                                                                                \n";
fftp_r4 << " 	                                                                                                                        \n";


if( (no_address_tmp*2) > 4096){
		fftp_r4 << " 	// for SRAM, 2018/08/03                                                                                                 \n";
		fftp_r4 << " 	MuxMA u_MuxMA(.Data_out0(Data_out0),                                                                                    \n";
		fftp_r4 << " 				  .Data_out1(Data_out1),                                                                                    \n";
		fftp_r4 << " 				  .Data_out2(Data_out2),                                                                                    \n";
		fftp_r4 << " 				  .Data_out3(Data_out3),                                                                                    \n";
		fftp_r4 << " 			      .wen0_mem_sb0(wen0_mem_sb0_wire),                                                                         \n";
		fftp_r4 << " 			      .wen0_mem_sb1(wen0_mem_sb1_wire),			                                                                \n";
		fftp_r4 << " 				  .wen1_mem_sb0(wen1_mem_sb0_wire),                                                                         \n";
		fftp_r4 << " 			      .wen1_mem_sb1(wen1_mem_sb1_wire),                                                                         \n";
		fftp_r4 << " 			      .Dout0_mem0_sb0(Dout0_mem0_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout0_mem0_sb1(Dout0_mem0_sb1_wire),			                                                            \n";
		fftp_r4 << " 				  .Dout0_mem1_sb0(Dout0_mem1_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout0_mem1_sb1(Dout0_mem1_sb1_wire),                                                                     \n";
		fftp_r4 << " 				  .Dout1_mem0_sb0(Dout1_mem0_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout1_mem0_sb1(Dout1_mem0_sb1_wire),			                                                            \n";
		fftp_r4 << " 				  .Dout1_mem1_sb0(Dout1_mem1_sb0_wire),                                                                     \n";
		fftp_r4 << " 			      .Dout1_mem1_sb1(Dout1_mem1_sb1_wire),			      				                                        \n";
		fftp_r4 << " 			      .wen0_in(wen0_wire),                                                                                      \n";
		fftp_r4 << " 				  .wen1_in(wen1_wire),                                                                                      \n";
		fftp_r4 << " 		          .MA0_in(MA0_wire),                                                                                        \n";
		fftp_r4 << " 				  .MA1_in(MA1_wire),                                                                                        \n";
		fftp_r4 << " 				  .rst_n(rst_n),                                                                                            \n";
		fftp_r4 << "                   .clk(clk)                                                                                                \n";
		fftp_r4 << " 			      ) ;                                                                                                       \n";
		fftp_r4 << " 				                                                                                                            \n";
		fftp_r4 << " 	//---FFT1----------------------------------------------                                                                 \n";
		fftp_r4 << "    " << ss.str() << "  u0_" << ss.str() << " (.Q(Dout0_mem0_sb0_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );										                                            \n";
		fftp_r4 << "    " << ss.str() << "  u1_" << ss.str() << " (.Q(Dout0_mem0_sb1_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	                                                                                \n";
		fftp_r4 << "    //Bank0 Mem1 Subbank0~1                                                                                        			\n";                                                            
		fftp_r4 << "    " << ss.str() << "  u2_" << ss.str() << "  (.Q(Dout0_mem1_sb0_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );                                                                                  \n";
		fftp_r4 << "    " << ss.str() << "  u3_" << ss.str() << "  (.Q(Dout0_mem1_sb1_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );										                                            \n";
		fftp_r4 << "    //Bank1 Mem0 Subbank0~1                                                                                                 \n";                                                                
		fftp_r4 << "    " << ss.str() << "  u4_" << ss.str() << "  (.Q(Dout1_mem0_sb0_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	                                                                                \n";
		fftp_r4 << "    " << ss.str() << "  u5_" << ss.str() << "  (.Q(Dout1_mem0_sb1_wire), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );										                                            \n";
		fftp_r4 << "    //Bank1 Mem1 Subbank0~1                                                                                                 \n";                                                                 
		fftp_r4 << "    " << ss.str() << "  u6_" << ss.str() << " (.Q(Dout1_mem1_sb0_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );			                                                                        \n";
		fftp_r4 << "    " << ss.str() << "  u7_" << ss.str() << " (.Q(Dout1_mem1_sb1_wire), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_mem_sb1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-2:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );											                                        \n";
}else {
		fftp_r4 << "    " << ss.str() << "  u0_" << ss.str() << " (.Q(Data_out0), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	\n";
		fftp_r4 << "    " << ss.str() << "  u1_" << ss.str() << " (.Q(Data_out1), //modify                                            \n"; 
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen0_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN0_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );\n";		
		fftp_r4 << "    " << ss.str() << "  u2_" << ss.str() << "  (.Q(Data_out2), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM0_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );\n";
		fftp_r4 << "    " << ss.str() << "  u3_" << ss.str() << "  (.Q(Data_out3), //modify                                           \n";  
		fftp_r4 << "                                        .CLK(clk),                                                                          \n";
		fftp_r4 << "                                        .CEN(cen_wire),                                                                     \n";
		fftp_r4 << "                                        .WEN(wen1_wire), //modify                                                   \n";
		fftp_r4 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
		fftp_r4 << "                                        .D(BN1_MEM1_wire),                                                                  \n";
		fftp_r4 << "                                        .EMA(ema_wire)                                                                      \n";
		fftp_r4 << "                                        );	  \n";		
}

fftp_r4 << "     //-----------------------------------------------------     \n";                                                            
fftp_r4 << "     //2020/04/19 modify                                         \n";
fftp_r4 << "     //re-order factor  ROM                                      \n";
fftp_r4 << "     //BANK0                                                     \n";
fftp_r4 << "     IReorderMA_pip u_IReorderMA_pip(                            \n";
fftp_r4 << "             .IREMA_o(IREMA),                                    \n";
fftp_r4 << "             .MA_i(data_cnt_wire[" << (IReROM_width-1) <<":0]),\n";
fftp_r4 << "             .rst_n(rst_n),                                      \n";
fftp_r4 << "             .clk(clk)                                           \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "                                                                 \n";
fftp_r4 << "     //BANK1                                                     \n";
fftp_r4 << "     reorderROM0 u_reorderROM0(                                  \n";
fftp_r4 << "                               .Q(reorderROM0_wire_reg_in),      \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(rc_sel_wire),                \n";
fftp_r4 << "                               .A(REMA_wire)                     \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "                                                                 \n";
fftp_r4 << "     reorderROM1 u_reorderROM1(                                  \n";
fftp_r4 << "                               .Q(reorderROM1_wire_reg_in),      \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(rc_sel_wire),                \n";
fftp_r4 << "                               .A(REMA_wire)                     \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "     //64 bits                                                   \n";
fftp_r4 << "     ireorderROM0 u_ireorderROM0(                                \n";
fftp_r4 << "                               .Q(ireorderROM0_wire_reg_in),     \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r4 << "                               .A(IREMA)                         \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "                                                                 \n";
fftp_r4 << "     ireorderROM1 u_ireorderROM1(                                \n";
fftp_r4 << "                               .Q(ireorderROM1_wire_reg_in),     \n";
fftp_r4 << "                               .CLK(clk),                        \n";
fftp_r4 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r4 << "                               .A(IREMA)                         \n";
fftp_r4 << "     );                                                          \n";
fftp_r4 << "    //-----------------------------------------------------      \n";
fftp_r4 << "    R4_orderROM_Pipe u_R4_orderROM_Pipe(.reorderROM0_o(reorderROM0_wire),\n";                                  
fftp_r4 << "                                        .reorderROM1_o(reorderROM1_wire),\n";                                  
fftp_r4 << "                                        .ireorderROM0_o(ireorderROM0_wire),\n";                                  
fftp_r4 << "                                        .ireorderROM1_o(ireorderROM1_wire),\n";                                  
fftp_r4 << "                                        .reorderROM0_i(reorderROM0_wire_reg_in),\n";                                  
fftp_r4 << "                                        .reorderROM1_i(reorderROM1_wire_reg_in),\n";                                  
fftp_r4 << "                                        .ireorderROM0_i(ireorderROM0_wire_reg_in),\n";                                  
fftp_r4 << "                                        .ireorderROM1_i(ireorderROM1_wire_reg_in),\n";                                  
fftp_r4 << "                                        .rst_n(rst_n),\n";                                  
fftp_r4 << "                                        .clk(clk)\n";                                  
fftp_r4 << "                                        );\n";                                  
fftp_r4 << "    //-----------------------------------------------------      \n";                                  
if( (no_address_tmp*2) > 4096){
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << "    // for ROM                                                                                                              \n";
	fftp_r4 << "    MuxROMA u_MuxROMA(.ROMD0_out(ROMD0_out_wire),                                                                           \n";
	fftp_r4 << "                    .ROMD1_out(ROMD1_out_wire),				                                                                \n";
	fftp_r4 << "                    .IFFTROMD0_out(IFFTROMD0_out_wire),                                                                     \n";
	fftp_r4 << "                    .IFFTROMD1_out(IFFTROMD1_out_wire),					                                                    \n";
	fftp_r4 << "                    .Dout_rom0_sb0(Dout_rom0_sb0_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom0_sb1(Dout_rom0_sb1_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom0_sb2(Dout_rom0_sb2_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom0_sb3(Dout_rom0_sb3_wire),					                                                    \n";
	fftp_r4 << "                    .Dout_rom1_sb0(Dout_rom1_sb0_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom1_sb1(Dout_rom1_sb1_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom1_sb2(Dout_rom1_sb2_wire),                                                                     \n";
	fftp_r4 << "                    .Dout_rom1_sb3(Dout_rom1_sb3_wire),					                                                    \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb0(IFFTDout_rom0_sb0_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb1(IFFTDout_rom0_sb1_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb2(IFFTDout_rom0_sb2_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom0_sb3(IFFTDout_rom0_sb3_wire),					                                            \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb0(IFFTDout_rom1_sb0_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb1(IFFTDout_rom1_sb1_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb2(IFFTDout_rom1_sb2_wire),                                                             \n";
	fftp_r4 << "                    .IFFTDout_rom1_sb3(IFFTDout_rom1_sb3_wire),                                                             \n";
	fftp_r4 << "                    .ROMA_in(ROMA_wire),                                                                                    \n";
	fftp_r4 << "                    .rst_n(rst_n),                                                                                          \n";
	fftp_r4 << "                    .clk(clk)                                                                                               \n";
	fftp_r4 << "                    ) ;                                                                                                     \n";
	fftp_r4 << "                                                                                                                            \n";
	fftp_r4 << "    //FFT ROM0 Subbank0~3                                                                                                   \n";                                                                            
	fftp_r4 << "    " << "R0D0_" << no_address_tmp << "_64 u_R0D0_" << no_address_tmp << "_64 (.Q(Dout_rom0_sb0_wire), //modify             \n";                                          
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );		                                                                                    \n";
	fftp_r4 << "    " << "R0D1_" << no_address_tmp << "_64 u_R0D1_" << no_address_tmp << "_64 (.Q(Dout_rom0_sb1_wire), //modify             \n";                                          
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );                                                                                          \n";
	fftp_r4 << "    " << "R0D2_" << no_address_tmp << "_64 u_R0D2_" << no_address_tmp << "_64  (.Q(Dout_rom0_sb2_wire), //modify            \n";                                           
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );                                                                                          \n";
	fftp_r4 << "    " << "R0D3_" << no_address_tmp << "_64 u_R0D3_" << no_address_tmp << "_64  (.Q(Dout_rom0_sb3_wire), //modify            \n";                                           
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                      \n";
	fftp_r4 << "                                );                                                                                          \n";
	fftp_r4 << "        //FFT ROM1 Subbank0~3                                                                                               \n";                                                                                 
	fftp_r4 << "    " << "R1D0_" << no_address_tmp << "_128 u_R1D0_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb0_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "    " << "R1D1_" << no_address_tmp << "_128 u_R1D1_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb1_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "R1D2_" << no_address_tmp << "_128 u_R1D2_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb2_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "R1D3_" << no_address_tmp << "_128 u_R1D3_" << no_address_tmp << "_128 (.Q(Dout_rom1_sb3_wire), //modify           \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "        //IFFT ROM0 Subbank0~3                                                                                              \n";                                                                            
	fftp_r4 << "    " << "IR0D0_" << no_address_tmp << "_64 u_IR0D0_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb0_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "    " << "IR0D1_" << no_address_tmp << "_64 u_IR0D1_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb1_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR0D2_" << no_address_tmp << "_64 u_IR0D2_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb2_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR0D3_" << no_address_tmp << "_64 u_IR0D3_" << no_address_tmp << "_64 (.Q(IFFTDout_rom0_sb3_wire), //modify       \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );	                                                                                    \n";
	fftp_r4 << "        //IFFT ROM1 Subbank0~3                                                                                              \n";                                                                           
	fftp_r4 << "    " << "IR1D0_" << no_address_tmp << "_128 u_IR1D0_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb0_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );		                                                                                \n";
	fftp_r4 << "    " << "IR1D1_" << no_address_tmp << "_128 u_IR1D1_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb1_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR1D2_" << no_address_tmp << "_128 u_IR1D2_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb2_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";
	fftp_r4 << "    " << "IR1D3_" << no_address_tmp << "_128 u_IR0D3_" << no_address_tmp << "_128 (.Q(IFFTDout_rom1_sb3_wire), //modify     \n";                                          
	fftp_r4 << "                                    .CLK(clk),                                                                              \n";
	fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
	fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-3:0]) //modify                                                  \n";
	fftp_r4 << "                                    );                                                                                      \n";                                                                                                             
}else{
	fftp_r4 << "    " << "ROM0 u_ROM0_" << (no_address_tmp*4) << "_64 (.Q(ROMD0_out_wire), //modify             \n";	
	fftp_r4 << "                                .CLK(clk),                                                                                  \n";	
	fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";	
	fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                      \n";	
	fftp_r4 << "                                );		                                                                                    \n";	
    fftp_r4 << "    " << "ROM1 u_ROM1_" << (no_address_tmp*4) << "_128 (.Q(ROMD1_out_wire), //modify             \n";	
    fftp_r4 << "                                .CLK(clk),                                                                                  \n";	
    fftp_r4 << "                                .CEN(RomCen_wire),                                                                          \n";	
    fftp_r4 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                      \n";	
    fftp_r4 << "                                );		                                                                                    \n";	
    fftp_r4 << "    " << "IROM0 u_IROM0_" << (no_address_tmp*4) << "_64 (.Q(IFFTROMD0_out_wire), //modify     \n";
    fftp_r4 << "                                    .CLK(clk),                                                                              \n";
    fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
    fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                  \n";
    fftp_r4 << "                                    );		                                                                                \n";
    fftp_r4 << "    " << "IROM1 u_IROM1_" << (no_address_tmp*4) << "_128 (.Q(IFFTROMD1_out_wire), //modify     \n";
    fftp_r4 << "                                    .CLK(clk),                                                                              \n";
    fftp_r4 << "                                    .CEN(RomCen_wire),                                                                      \n";
    fftp_r4 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                                                  \n";
    fftp_r4 << "                                    );		                                                                                \n";
}
fftp_r4 << " endmodule                                                                                                                  \n"; 
 
     fftp_r4.close();
}
void FFTC::FFTP_r8(std::string string_in){
	 std::ofstream fftp_r8;
     int no_address_tmp;
     no_address_tmp = exp2(addr_width-1); //number of address
     std::string        string_buf = "SRAM_SP_";
     std::stringstream  ss;
	 // For Mux-8 SRAM Max Word size is 4096 , then need word size is bigger than 4096 ,
	 // We need to  divide SRAM.  So this is a check constriant.
     ss << string_buf << (no_address_tmp * 2) << "_128";
	 std::cout << "---->SRAM_NAME: "<<ss.str() <<"\n";
     //input file
     std::string string_fp = "/FFTP.v"; //file position 
     std::stringstream ss_fp;
     ss_fp << string_in << string_fp;
	 fftp_r8.open(ss_fp.str());
fftp_r8 << " //==================================================                                                                       \n";
fftp_r8 << " //                                                                                                                                     \n";
fftp_r8 << " //Date       : 2018/8/1  //modify 2020/3/11                                                                                \n";
fftp_r8 << " //Note       : FFT Processor                                                                                               \n";
fftp_r8 << " //==================================================                                                                       \n";
fftp_r8 << " `timescale 1 ns/1 ps                                                                                                       \n";
fftp_r8 << " module FFTP(MulValid_out,                                                                                                  \n";
fftp_r8 << "             MulD0_out,                                                                                                     \n";
fftp_r8 << "             MulD1_out,                                                                                                     \n";
fftp_r8 << "             MulD2_out,                                                                                                     \n";
fftp_r8 << "             MulD3_out,                                                                                                     \n";
fftp_r8 << "             MulD4_out,                                                                                                     \n";
fftp_r8 << "             MulD5_out,                                                                                                     \n";
fftp_r8 << "             MulD6_out,                                                                                                     \n";
fftp_r8 << "             MulD7_out,                                                                                                     \n";
fftp_r8 << "             ExtB0_D0_in,                                                                                                   \n";
fftp_r8 << "             ExtB0_D1_in,                                                                                                   \n";
fftp_r8 << "             ExtB0_D2_in,                                                                                                   \n";
fftp_r8 << "             ExtB0_D3_in,                                                                                                   \n";
fftp_r8 << "             ExtB0_D4_in,                                                                                                   \n";
fftp_r8 << "             ExtB0_D5_in,                                                                                                   \n";
fftp_r8 << "             ExtB0_D6_in,                                                                                                   \n";
fftp_r8 << "             ExtB0_D7_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D0_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D1_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D2_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D3_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D4_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D5_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D6_in,                                                                                                   \n";
fftp_r8 << "             ExtB1_D7_in,                                                                                                   \n";
fftp_r8 << "             N_in,                                                                                                          \n";
fftp_r8 << "             ExtValid_in,                                                                                                   \n";
fftp_r8 << "             rst_n,                                                                                                         \n";
fftp_r8 << "             clk                                                                                                            \n";
fftp_r8 << "             ) ;                                                                                                            \n";
fftp_r8 << " 			                                                                                                                \n";
fftp_r8 << " parameter CP_WIDTH  = "   << CP_width           << ";\n";
fftp_r8 << " parameter DOP_WIDTH = "   << (2*CP_width)       << ";\n";
fftp_r8 << " parameter HP_WIDTH  = 32 ;//half prime data bits 			                                                                                    \n";
fftp_r8 << " parameter P_WIDTH   = 64 ; 			                                                                                    \n";
fftp_r8 << " parameter A_WIDTH   = "   << addr_width     << ";                                                                          \n";
fftp_r8 << " parameter SD_WIDTH  = 128 ;                                                                                                \n";
fftp_r8 << " parameter ROMA_WIDTH  = " << ROM_width      << ";                                                                          \n";     
fftp_r8 << " parameter IREMA_WIDTH = " << (IReROM_width )<< ";\n";
fftp_r8 << " parameter DC_WIDTH    = " << data_cnt_width << ";                                                                          \n";          
fftp_r8 << " parameter RDC_WIDTH   = 3 ;                                                                                                \n";
fftp_r8 << " parameter OUT_PIPE_WIDTH   = "<< 64-(2*CP_width) <<";                                                                                                \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " output                MulValid_out ;                                                                                       \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD0_out ;                                                                                          \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD1_out ;                                                                                          \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD2_out ;                                                                                          \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD3_out ;                                                                                          \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD4_out ;                                                                                          \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD5_out ;                                                                                          \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD6_out ;                                                                                          \n";
fftp_r8 << " output[CP_WIDTH-1:0]   MulD7_out ;                                                                                          \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D4_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D5_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D6_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB0_D7_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D4_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D5_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D6_in ;                                                                                         \n";
fftp_r8 << " input  [CP_WIDTH-1:0] ExtB1_D7_in ;                                                                                         \n";
fftp_r8 << " input  [P_WIDTH-1:0]  N_in ;                                                                                                \n";
fftp_r8 << " input                 ExtValid_in ;                                                                                         \n";
fftp_r8 << " input                 rst_n ;                                                                                               \n";
fftp_r8 << " input                 clk ;                                                                                                 \n";
fftp_r8 << " //============================================= \n";
fftp_r8 << " //twiddle factor fft type data                  \n";

fftp_r8 << " wire [SD_WIDTH-1:0]  b0ROM0_wire;              \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  b0ROM1_wire;              \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  b0ROM2_wire;              \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  b0ROM3_wire;              \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  b1ROM0_wire;              \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  b1ROM1_wire;              \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  b1ROM2_wire;              \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  b1ROM3_wire;              \n";
fftp_r8 << "                                                 \n";
fftp_r8 << " wire 				 BN_TWI_wire;                \n";
fftp_r8 << " wire [A_WIDTH-1:0]  MA_TWI_wire;                \n";
fftp_r8 << "                                                 \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix0_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix1_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix2_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix3_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix4_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix5_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix6_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix7_wire;             \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix0_pip_wire;         \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix1_pip_wire;         \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix2_pip_wire;         \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix3_pip_wire;         \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix4_pip_wire;         \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix5_pip_wire;         \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix6_pip_wire;         \n";
fftp_r8 << " wire [P_WIDTH-1:0]  TWIradix7_pip_wire;         \n";
fftp_r8 << "  //r4_inpipeReg wire============================    \n";
fftp_r8 << "                                                     \n";
fftp_r8 << "  wire                ExtValid_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D0_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D1_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D2_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D3_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D4_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D5_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D6_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB0_D7_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D0_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D1_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D2_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D3_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D4_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D5_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D6_wire  ;               \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ExtB1_D7_wire  ;               \n";
fftp_r8 << "                                                     \n";
fftp_r8 << "  //-----------------------------------              \n";
fftp_r8 << "  wire  [A_WIDTH-1:0] REMA_wire;                  \n";
fftp_r8 << "  wire  [IREMA_WIDTH-1:0] IREMA;                  \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D0_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D1_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D2_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D3_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D4_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D5_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D6_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB0_D7_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D0_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D1_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D2_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D3_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D4_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D5_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D6_pip_wire ;        \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] ExtB1_D7_pip_wire ;        \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M0_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M1_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M2_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M3_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M4_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M5_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M6_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M7_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M0_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M1_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M2_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M3_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M4_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M5_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M6_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B0M7_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M0_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M1_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M2_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M3_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M4_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M5_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M6_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M7_a_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M0_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M1_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M2_b_o_wire;             \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M3_b_o_wire;             \n";  
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M4_b_o_wire;             \n";  
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M5_b_o_wire;             \n";  
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M6_b_o_wire;             \n";  
fftp_r8 << "  wire  [CP_WIDTH-1:0] B1M7_b_o_wire;             \n";  
fftp_r8 << "                                                  \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M0_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M1_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M2_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M3_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M4_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M5_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M6_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B0M7_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M0_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M1_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M2_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M3_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M4_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M5_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M6_result_wire;          \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0]  B1M7_result_wire;          \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S0_wire;                \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S1_wire;                \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S2_wire;                \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S3_wire;                \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S4_wire;                \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S5_wire;                \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S6_wire;                \n";
fftp_r8 << "  wire [CP_WIDTH-1:0]  BR_S7_wire;                \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  reorderROM0_wire;          \n";
fftp_r8 << "  wire  [HP_WIDTH-1:0]  reorderROM1_wire;          \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  reorderROM2_wire;          \n";
fftp_r8 << "  wire  [HP_WIDTH-1:0]  reorderROM3_wire;          \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  ireorderROM0_wire;         \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  ireorderROM1_wire;         \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  ireorderROM2_wire;         \n";
if(8*CP_width > 192)fftp_r8 << "  wire  [7:0] ireorderROM3_wire;  \n";

fftp_r8 << "                                                  \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  reorderROM0_wire_reg_in;   \n";
fftp_r8 << "  wire  [HP_WIDTH-1:0]  reorderROM1_wire_reg_in;   \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  reorderROM2_wire_reg_in;   \n";
fftp_r8 << "  wire  [HP_WIDTH-1:0]  reorderROM3_wire_reg_in;   \n";
fftp_r8 << "  wire  [P_WIDTH-1:0]  ireorderROM0_wire_reg_in;  \n";

fftp_r8 << "  wire  [P_WIDTH-1:0] ireorderROM1_wire_reg_in;  \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] ireorderROM2_wire_reg_in;  \n";
if(8*CP_width > 192)fftp_r8 << "  wire  [7:0] ireorderROM3_wire_reg_in;  \n";

fftp_r8 << "                                                  \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r0;                \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r1;                \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r2;                \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r3;                \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r4;                \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r5;                \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r6;                \n";
fftp_r8 << "  wire  [CP_WIDTH-1:0] SP_Data_r7;                \n";
fftp_r8 << "  //pipe1                                                \n";
fftp_r8 << "  //pipe 2  the data for BR input                 \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD0_pip_wire;      \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD1_pip_wire;      \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD2_pip_wire;      \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD3_pip_wire;      \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD4_pip_wire;      \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD5_pip_wire;      \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD6_pip_wire;      \n";
fftp_r8 << "  wire  [P_WIDTH-1:0] CRUD7_pip_wire;      \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR0_pip_wire;        \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR1_pip_wire;        \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR2_pip_wire;        \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR3_pip_wire;        \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR4_pip_wire;        \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR5_pip_wire;        \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR6_pip_wire;        \n";
fftp_r8 << "  wire  [OUT_PIPE_WIDTH-1:0] BR7_pip_wire;        \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  wire                 BND_wire_pipo ;            \n";
fftp_r8 << "  wire [DC_WIDTH-1:0]  data_cnt_wire_pipo ;       \n";
fftp_r8 << "                                                  \n";
fftp_r8 << "  //==============================================\n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << "                                                                                                                            \n";
            //bank0 memory0
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out0 ;                                                                                           \n";
           // bank0 memory1
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out1 ;                                                                                           \n";
           //bank0 memory2
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out2 ;                                                                                           \n";
          //bank0 memory3
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out3 ;                                                                                           \n";
         //bank1 memory0
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out4 ;                                                                                           \n";
          //bank1 memory1
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out5 ;                                                                                           \n";
          //bank1 memory2
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out6 ;                                                                                           \n";
         //bank1 memory3
fftp_r8 << " wire [SD_WIDTH-1:0]  Data_out7 ;                                                                                           \n";
fftp_r8 << " wire                 cen_wire ;                                                                                            \n";
fftp_r8 << " wire                 wen0_wire ;                                                                                           \n";
fftp_r8 << " wire                 wen1_wire ;                                                                                           \n";
fftp_r8 << " wire [2:0]           ema_wire ;                                                                                            \n";
fftp_r8 << " wire                 SD_sel_wire ;                                                                                         \n";
fftp_r8 << " wire [A_WIDTH-1:0]   ExtMA_wire ;                                                                                          \n";
fftp_r8 << " wire [A_WIDTH-1:0]   AGUMA_wire ;                                                                                          \n";
fftp_r8 << " wire [A_WIDTH-1:0]   MA0_wire ;                                                                                            \n";
fftp_r8 << " wire [A_WIDTH-1:0]   MA1_wire ;                                                                                            \n";
fftp_r8 << " wire                 AGU_en_wire ;                                                                                         \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN0_MEM0_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN0_MEM1_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN0_MEM2_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN0_MEM3_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN1_MEM0_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN1_MEM1_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN1_MEM2_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  BN1_MEM3_wire ;                                                                                       \n";
fftp_r8 << " wire                 BN_wire ;                                                                                             \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA0D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA1D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA2D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA3D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA4D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA5D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA6D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA7D_in_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA0D_out_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA1D_out_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA2D_out_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA3D_out_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA4D_out_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA5D_out_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA6D_out_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RA7D_out_wire ;                                                                                       \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " wire                 RomCen_wire ;                                                                                         \n";
fftp_r8 << " wire [ROMA_WIDTH-1:0] ROMA_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   ROMD0_out_wire ;                                                                                      \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  ROMD1_out_wire ;                                                                                      \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  ROMD2_out_wire ;                                                                                      \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  ROMD3_out_wire ;                                                                                      \n";
fftp_r8 << " wire [1:0]           Mul_sel_wire ;                                                                                        \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB0_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB1_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB2_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB3_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB4_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB5_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB6_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulB7_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod0_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod1_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod2_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod3_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod4_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod5_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod6_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulMod7_out_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out0_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out1_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out2_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out3_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out4_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out5_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out6_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   RDC_out7_wire ;                                                                                       \n";
fftp_r8 << " wire [RDC_WIDTH-1:0] RDC_sel_wire ;                                                                                        \n";
fftp_r8 << " wire                 BND_wire ;                                                                                            \n";
fftp_r8 << " wire [A_WIDTH-1:0]   WMA_wire ;                                                                                            \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " wire [DC_WIDTH-1:0]  data_cnt_wire ;                                                                                       \n";
fftp_r8 << " wire [RDC_WIDTH-1:0] FFT_FSmode_sel_wire ;                                                                                 \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " wire                 mode_sel_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulA1_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulA2_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulA3_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulA5_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulA6_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   MulA7_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   IFFTROMD0_out_wire ;                                                                                  \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  IFFTROMD1_out_wire ;                                                                                  \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  IFFTROMD2_out_wire ;                                                                                  \n";
fftp_r8 << " wire [SD_WIDTH-1:0]  IFFTROMD3_out_wire ;                                                                                  \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " wire                 rc_sel_wire ;                                                                                         \n";
fftp_r8 << " wire                 m2_sel_wire ;                                                                                         \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD0_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD1_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD2_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD3_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD4_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD5_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD6_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]   CRUD7_wire ;                                                                                          \n";
fftp_r8 << " //---2018/08/01-------------------------------------                                                                       \n";
fftp_r8 << " wire                  mode_sel_D_wire ;                                                                                    \n";
fftp_r8 << " wire [1:0]            Mul_sel_D_wire ;                                                                                     \n";
fftp_r8 << " wire [RDC_WIDTH-1:0]  RDC_sel_D_wire ;                                                                                     \n";
fftp_r8 << " wire [RDC_WIDTH-1:0]  FFT_FSmode_sel_D_wire ;                                                                              \n";
fftp_r8 << " wire                  wrfd_en_wire ;                                                                                       \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out0_D_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out1_D_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out2_D_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out3_D_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out4_D_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out5_D_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out6_D_wire ;                                                                                    \n";
fftp_r8 << " wire [P_WIDTH-1:0]    RDC_out7_D_wire ;                                                                                    \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << " wire [P_WIDTH-1:0]    N_D4_wire ;                                                                                          \n";
fftp_r8 << " wire [P_WIDTH-1:0]    ROMD0_D_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]   ROMD1_D_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]   ROMD2_D_wire ;                                                                                       \n";
fftp_r8 << " wire [SD_WIDTH-1:0]   ROMD3_D_wire ;                                                                                       \n";
fftp_r8 << " wire [P_WIDTH-1:0]    IFFTROMD0_D_wire ;                                                                                   \n";
fftp_r8 << " wire [SD_WIDTH-1:0]   IFFTROMD1_D_wire ;                                                                                   \n";
fftp_r8 << " wire [SD_WIDTH-1:0]   IFFTROMD2_D_wire ;                                                                                   \n";
fftp_r8 << " wire [SD_WIDTH-1:0]   IFFTROMD3_D_wire ;                                                                                   \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << "                                                                                                                            \n";
fftp_r8 << "     Rectrl u_Rectrl(                        \n";
fftp_r8 << "             .REMA(REMA_wire),               \n";
fftp_r8 << "             .ExtValid_in(ExtValid_in),      \n";
fftp_r8 << "             .rst_n(rst_n),                  \n";
fftp_r8 << "             .clk(clk)                       \n";
fftp_r8 << "     );                                      \n"; 
fftp_r8 << "\n";
fftp_r8 << "     R8_InpipeReg u_r8_inpipreg(                            \n";
fftp_r8 << "             .ExtValid_in(ExtValid_in),                     \n";
fftp_r8 << "             .ExtB0_D0_in(ExtB0_D0_in),                     \n";
fftp_r8 << "             .ExtB0_D1_in(ExtB0_D1_in),                     \n";
fftp_r8 << "             .ExtB0_D2_in(ExtB0_D2_in),                     \n";
fftp_r8 << "             .ExtB0_D3_in(ExtB0_D3_in),                     \n";
fftp_r8 << "             .ExtB0_D4_in(ExtB0_D4_in),                     \n";
fftp_r8 << "             .ExtB0_D5_in(ExtB0_D5_in),                     \n";
fftp_r8 << "             .ExtB0_D6_in(ExtB0_D6_in),                     \n";
fftp_r8 << "             .ExtB0_D7_in(ExtB0_D7_in),                     \n";
fftp_r8 << "             .ExtB1_D0_in(ExtB1_D0_in),                     \n";
fftp_r8 << "             .ExtB1_D1_in(ExtB1_D1_in),                     \n";
fftp_r8 << "             .ExtB1_D2_in(ExtB1_D2_in),                     \n";
fftp_r8 << "             .ExtB1_D3_in(ExtB1_D3_in),                     \n";
fftp_r8 << "             .ExtB1_D4_in(ExtB1_D4_in),                     \n";
fftp_r8 << "             .ExtB1_D5_in(ExtB1_D5_in),                     \n";
fftp_r8 << "             .ExtB1_D6_in(ExtB1_D6_in),                     \n";
fftp_r8 << "             .ExtB1_D7_in(ExtB1_D7_in),                     \n";
fftp_r8 << "             .ExtValid_out(ExtValid_wire),                  \n";
fftp_r8 << "             .ExtB0_D0_out(ExtB0_D0_pip_wire),              \n";
fftp_r8 << "             .ExtB0_D1_out(ExtB0_D1_pip_wire),              \n";
fftp_r8 << "             .ExtB0_D2_out(ExtB0_D2_pip_wire),              \n";
fftp_r8 << "             .ExtB0_D3_out(ExtB0_D3_pip_wire),              \n";
fftp_r8 << "             .ExtB0_D4_out(ExtB0_D4_pip_wire),              \n";
fftp_r8 << "             .ExtB0_D5_out(ExtB0_D5_pip_wire),              \n";
fftp_r8 << "             .ExtB0_D6_out(ExtB0_D6_pip_wire),              \n";
fftp_r8 << "             .ExtB0_D7_out(ExtB0_D7_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D0_out(ExtB1_D0_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D1_out(ExtB1_D1_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D2_out(ExtB1_D2_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D3_out(ExtB1_D3_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D4_out(ExtB1_D4_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D5_out(ExtB1_D5_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D6_out(ExtB1_D6_pip_wire),              \n";
fftp_r8 << "             .ExtB1_D7_out(ExtB1_D7_pip_wire),              \n";
fftp_r8 << "             .rst_n        (rst_n),                         \n";
fftp_r8 << "             .clk          (clk)                            \n";
fftp_r8 << "     );                                                     \n";
fftp_r8 << "     //----------------------------------------------------    \n";
fftp_r8 << "     // Barrett reduction multiplier                           \n";
fftp_r8 << "     //input A and input B Mux                                 \n";
fftp_r8 << "     Mux5 u_Mux5(                                              \n";
fftp_r8 << "                 .B0M0_ain_o(B0M0_a_o_wire),                   \n";
fftp_r8 << "                 .B0M1_ain_o(B0M1_a_o_wire),                   \n";
fftp_r8 << "                 .B0M2_ain_o(B0M2_a_o_wire),                   \n";
fftp_r8 << "                 .B0M3_ain_o(B0M3_a_o_wire),                   \n";
fftp_r8 << "                 .B0M4_ain_o(B0M4_a_o_wire),                   \n";
fftp_r8 << "                 .B0M5_ain_o(B0M5_a_o_wire),                   \n";
fftp_r8 << "                 .B0M6_ain_o(B0M6_a_o_wire),                   \n";
fftp_r8 << "                 .B0M7_ain_o(B0M7_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M0_ain_o(B1M0_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M1_ain_o(B1M1_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M2_ain_o(B1M2_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M3_ain_o(B1M3_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M4_ain_o(B1M4_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M5_ain_o(B1M5_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M6_ain_o(B1M6_a_o_wire),                   \n";
fftp_r8 << "     		     .B1M7_ain_o(B1M7_a_o_wire),                   \n";
fftp_r8 << "                 .B0M0_bin_o(B0M0_b_o_wire),                   \n";
fftp_r8 << "                 .B0M1_bin_o(B0M1_b_o_wire),                   \n";
fftp_r8 << "                 .B0M2_bin_o(B0M2_b_o_wire),                   \n";
fftp_r8 << "                 .B0M3_bin_o(B0M3_b_o_wire),                   \n";
fftp_r8 << "                 .B0M4_bin_o(B0M4_b_o_wire),                   \n";
fftp_r8 << "                 .B0M5_bin_o(B0M5_b_o_wire),                   \n";
fftp_r8 << "                 .B0M6_bin_o(B0M6_b_o_wire),                   \n";
fftp_r8 << "                 .B0M7_bin_o(B0M7_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M0_bin_o(B1M0_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M1_bin_o(B1M1_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M2_bin_o(B1M2_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M3_bin_o(B1M3_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M4_bin_o(B1M4_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M5_bin_o(B1M5_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M6_bin_o(B1M6_b_o_wire),                   \n";
fftp_r8 << "     		     .B1M7_bin_o(B1M7_b_o_wire),                   \n";
fftp_r8 << "                 .ExtB0_D0(ExtB0_D0_pip_wire),                 \n";
fftp_r8 << "                 .ExtB0_D1(ExtB0_D1_pip_wire),                 \n";
fftp_r8 << "                 .ExtB0_D2(ExtB0_D2_pip_wire),                 \n";
fftp_r8 << "                 .ExtB0_D3(ExtB0_D3_pip_wire),                 \n";
fftp_r8 << "                 .ExtB0_D4(ExtB0_D4_pip_wire),                 \n";
fftp_r8 << "                 .ExtB0_D5(ExtB0_D5_pip_wire),                 \n";
fftp_r8 << "                 .ExtB0_D6(ExtB0_D6_pip_wire),                 \n";
fftp_r8 << "                 .ExtB0_D7(ExtB0_D7_pip_wire),                 \n";
fftp_r8 << "     		     .ExtB1_D0_pip(ExtB1_D0_pip_wire),             \n";
fftp_r8 << "     		     .ExtB1_D1_pip(ExtB1_D1_pip_wire),             \n";
fftp_r8 << "     		     .ExtB1_D2_pip(ExtB1_D2_pip_wire),             \n";
fftp_r8 << "     		     .ExtB1_D3_pip(ExtB1_D3_pip_wire),             \n";
fftp_r8 << "     		     .ExtB1_D4_pip(ExtB1_D4_pip_wire),             \n";
fftp_r8 << "     		     .ExtB1_D5_pip(ExtB1_D5_pip_wire),             \n";
fftp_r8 << "     		     .ExtB1_D6_pip(ExtB1_D6_pip_wire),             \n";
fftp_r8 << "     		     .ExtB1_D7_pip(ExtB1_D7_pip_wire),             \n";
fftp_r8 << "                 .SP_r0(SP_Data_r0),                           \n";
fftp_r8 << "                 .SP_r1(SP_Data_r1),                           \n";
fftp_r8 << "                 .SP_r2(SP_Data_r2),                           \n";
fftp_r8 << "                 .SP_r3(SP_Data_r3),                           \n";
fftp_r8 << "                 .SP_r4(SP_Data_r4),                           \n";
fftp_r8 << "                 .SP_r5(SP_Data_r5),                           \n";
fftp_r8 << "                 .SP_r6(SP_Data_r6),                           \n";
fftp_r8 << "                 .SP_r7(SP_Data_r7),                           \n";
fftp_r8 << "     		     .CRUD0(CRUD0_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r8 << "     		     .CRUD1(CRUD1_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r8 << "     		     .CRUD2(CRUD2_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r8 << "     		     .CRUD3(CRUD3_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r8 << "     		     .CRUD4(CRUD4_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r8 << "     		     .CRUD5(CRUD5_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r8 << "     		     .CRUD6(CRUD6_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
fftp_r8 << "     		     .CRUD7(CRUD7_pip_wire[P_WIDTH-1:64 - 2 * CP_WIDTH]),          \n";
int reorderRadix0_INROM0_msb;
int reorderRadix0_INROM0_lsb;
int reorderRadix1_INROM0_msb;
int reorderRadix1_INROM0_lsb;
reorderRadix0_INROM0_msb = 63;
reorderRadix0_INROM0_lsb = 64 - CP_width;
reorderRadix1_INROM0_msb = reorderRadix0_INROM0_lsb - 1;
reorderRadix1_INROM0_lsb = reorderRadix0_INROM0_lsb - CP_width;

fftp_r8 << "                 .reorderb0r0(reorderROM0_wire["<<reorderRadix0_INROM0_msb<<":"<< reorderRadix0_INROM0_lsb <<"]),\n";
fftp_r8 << "                 .reorderb0r1(reorderROM0_wire["<<reorderRadix1_INROM0_msb<<":"<< reorderRadix1_INROM0_lsb <<"]),\n";

int ROM0_Remaining_bits;
int reorderRadix2_INROM0_msb;
int reorderRadix2_INROM1_lsb;
int reorderRadix3_INROM1_msb;
int reorderRadix3_INROM1_lsb;
ROM0_Remaining_bits = 64 - 2*CP_width;
reorderRadix2_INROM0_msb = ROM0_Remaining_bits - 1;
if((4*CP_width)  > 96)reorderRadix2_INROM1_lsb = 64 - (CP_width - ROM0_Remaining_bits);
if((4*CP_width) <= 96)reorderRadix2_INROM1_lsb = 32 - (CP_width - ROM0_Remaining_bits);
reorderRadix3_INROM1_msb = reorderRadix2_INROM1_lsb - 1;
reorderRadix3_INROM1_lsb = reorderRadix3_INROM1_msb - CP_width + 1;

fftp_r8 << "                 .reorderb0r2({reorderROM0_wire["<< reorderRadix2_INROM0_msb <<":0],reorderROM1_wire[31:"<< reorderRadix2_INROM1_lsb <<"]}),\n";
fftp_r8 << "                 .reorderb0r3(reorderROM1_wire["<<  reorderRadix3_INROM1_msb <<":"<< reorderRadix3_INROM1_lsb <<"]),\n";
int reorderB1Radix0_INROM2_msb;
int reorderB1Radix0_INROM2_lsb;
int reorderB1Radix1_INROM2_msb;
int reorderB1Radix1_INROM2_lsb;
reorderB1Radix0_INROM2_msb = 63;
reorderB1Radix0_INROM2_lsb = 64 - CP_width;
reorderB1Radix1_INROM2_msb = reorderB1Radix0_INROM2_lsb - 1;
reorderB1Radix1_INROM2_lsb = reorderB1Radix0_INROM2_lsb - CP_width;

fftp_r8 << "     		     .reorderb1r0(reorderROM2_wire["<< reorderB1Radix0_INROM2_msb <<":"<< reorderB1Radix0_INROM2_lsb<<"]),\n";
fftp_r8 << "     		     .reorderb1r1(reorderROM2_wire["<< reorderB1Radix1_INROM2_msb <<":"<< reorderB1Radix1_INROM2_lsb<<"]),\n";

int ROM2_Remaining_bits;
int reorderB1Radix2_INROM2_msb;
int reorderB1Radix2_INROM3_lsb;
int reorderB1Radix3_INROM3_msb;
int reorderB1Radix3_INROM3_lsb;
ROM0_Remaining_bits = ROM2_Remaining_bits = 64 - 2*CP_width;
reorderB1Radix2_INROM2_msb = ROM0_Remaining_bits - 1;
if((4*CP_width)  > 96)reorderB1Radix2_INROM3_lsb = 64 - (CP_width - ROM2_Remaining_bits);
if((4*CP_width) <= 96)reorderB1Radix2_INROM3_lsb = 32 - (CP_width - ROM2_Remaining_bits);
reorderB1Radix3_INROM3_msb = reorderB1Radix2_INROM3_lsb - 1;
reorderB1Radix3_INROM3_lsb = reorderB1Radix3_INROM3_msb - CP_width + 1;

fftp_r8 << "     		     .reorderb1r2({reorderROM2_wire["<< reorderB1Radix2_INROM2_msb <<":0],reorderROM3_wire[31:"<< reorderB1Radix2_INROM3_lsb <<"]}),\n";
fftp_r8 << "     		     .reorderb1r3(reorderROM3_wire["<< reorderB1Radix3_INROM3_msb <<":"<< reorderB1Radix3_INROM3_lsb<<"]),\n";


int irreoderRadix0_IROM0_lsb;
int irreoderRadix1_IROM0_msb;
int irreoderRadix1_IROM0_lsb;
irreoderRadix0_IROM0_lsb = 64 - CP_width;
irreoderRadix1_IROM0_msb = irreoderRadix0_IROM0_lsb - 1;
irreoderRadix1_IROM0_lsb = irreoderRadix0_IROM0_lsb - CP_width;

fftp_r8 << "                 .ireorderr0(ireorderROM0_wire[63:"<< irreoderRadix0_IROM0_lsb <<"]),                 \n";
fftp_r8 << "                 .ireorderr1(ireorderROM0_wire["<< irreoderRadix1_IROM0_msb <<":"<< irreoderRadix1_IROM0_lsb <<"]),\n";

int ireorderRadix2_IROM0_msb;
int ireorderRadix2_IROM1_lsb;
int ireorderRadix3_IROM1_msb;
int ireorderRadix3_IROM1_lsb;
int ireorderRadix4_IROM1_msb;
int ireorderRadix4_IROM1_lsb;
ireorderRadix2_IROM0_msb = irreoderRadix1_IROM0_lsb - 1;
ireorderRadix2_IROM1_lsb = 64 - (CP_width - irreoderRadix1_IROM0_lsb);
ireorderRadix3_IROM1_msb = ireorderRadix2_IROM1_lsb - 1;
ireorderRadix3_IROM1_lsb = ireorderRadix2_IROM1_lsb - CP_width;
ireorderRadix4_IROM1_msb = ireorderRadix3_IROM1_lsb - 1;
ireorderRadix4_IROM1_lsb = ireorderRadix3_IROM1_lsb - CP_width;

fftp_r8 << "                 .ireorderr2({ireorderROM0_wire["<< ireorderRadix2_IROM0_msb <<":0],ireorderROM1_wire[63:"<< ireorderRadix2_IROM1_lsb <<"]}),\n";
fftp_r8 << "                 .ireorderr3(ireorderROM1_wire["<< ireorderRadix3_IROM1_msb <<":"<< ireorderRadix3_IROM1_lsb <<"]),\n";
fftp_r8 << "                 .ireorderr4(ireorderROM1_wire["<< ireorderRadix4_IROM1_msb <<":"<< ireorderRadix4_IROM1_lsb <<"]),\n";

int ireorderRadix5_IROM1_msb;
int ireorderRadix5_IROM2_lsb;
int ireorderRadix6_IROM2_msb;
int ireorderRadix6_IROM2_lsb;
int ireorderRadix7_IROM2_msb;
int ireorderRadix7_IROM2_lsb;

ireorderRadix5_IROM1_msb = ireorderRadix4_IROM1_lsb - 1;
ireorderRadix5_IROM2_lsb = 64 - (CP_width - ireorderRadix4_IROM1_lsb);
ireorderRadix6_IROM2_msb = ireorderRadix5_IROM2_lsb - 1;
ireorderRadix6_IROM2_lsb = ireorderRadix5_IROM2_lsb - CP_width;
ireorderRadix7_IROM2_msb = ireorderRadix6_IROM2_lsb - 1;
if(8 * CP_width < 192) ireorderRadix7_IROM2_lsb  = ireorderRadix6_IROM2_lsb - CP_width;
else ireorderRadix7_IROM2_lsb = 0;
fftp_r8 << "                 .ireorderr5({ireorderROM1_wire["<< ireorderRadix5_IROM1_msb <<":0],ireorderROM2_wire[63:"<< ireorderRadix5_IROM2_lsb <<"]}),\n";
fftp_r8 << "                 .ireorderr6(ireorderROM2_wire["<< ireorderRadix6_IROM2_msb <<":"<< ireorderRadix6_IROM2_lsb <<"]),\n";
if(8 * CP_width < 192)fftp_r8 << "                 .ireorderr7(ireorderROM2_wire["<< ireorderRadix7_IROM2_msb <<":"<< ireorderRadix7_IROM2_lsb <<"]),\n";
else fftp_r8 << "                 .ireorderr7(ireorderROM2_wire["<< ireorderRadix7_IROM2_msb <<":0],ireorderROM3_wire[7:0]}),\n";
fftp_r8 << "                 .re_sel(SD_sel_wire)                          \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "     Mux6 u_Mux6(                                              \n";
fftp_r8 << "             .ExtB0_D0(ExtB0_D0_wire),                         \n";
fftp_r8 << "             .ExtB0_D1(ExtB0_D1_wire),                         \n";
fftp_r8 << "             .ExtB0_D2(ExtB0_D2_wire),                         \n";
fftp_r8 << "             .ExtB0_D3(ExtB0_D3_wire),                         \n";
fftp_r8 << "             .ExtB0_D4(ExtB0_D4_wire),                         \n";
fftp_r8 << "             .ExtB0_D5(ExtB0_D5_wire),                         \n";
fftp_r8 << "             .ExtB0_D6(ExtB0_D6_wire),                         \n";
fftp_r8 << "             .ExtB0_D7(ExtB0_D7_wire),                         \n";
fftp_r8 << "             .ExtB1_D0(ExtB1_D0_wire),                         \n";
fftp_r8 << "             .ExtB1_D1(ExtB1_D1_wire),                         \n";
fftp_r8 << "             .ExtB1_D2(ExtB1_D2_wire),                         \n";
fftp_r8 << "             .ExtB1_D3(ExtB1_D3_wire),                         \n";
fftp_r8 << "             .ExtB1_D4(ExtB1_D4_wire),                         \n";
fftp_r8 << "             .ExtB1_D5(ExtB1_D5_wire),                         \n";
fftp_r8 << "             .ExtB1_D6(ExtB1_D6_wire),                         \n";
fftp_r8 << "             .ExtB1_D7(ExtB1_D7_wire),                         \n";
fftp_r8 << "             .MulD0_out(MulD0_out),                            \n";
fftp_r8 << "             .MulD1_out(MulD1_out),                            \n";
fftp_r8 << "             .MulD2_out(MulD2_out),                            \n";
fftp_r8 << "             .MulD3_out(MulD3_out),                            \n";
fftp_r8 << "             .MulD4_out(MulD4_out),                            \n";
fftp_r8 << "             .MulD5_out(MulD5_out),                            \n";
fftp_r8 << "             .MulD6_out(MulD6_out),                            \n";
fftp_r8 << "             .MulD7_out(MulD7_out),                            \n";
fftp_r8 << "             .BR_S0(BR_S0_wire),                               \n";
fftp_r8 << "             .BR_S1(BR_S1_wire),                               \n";
fftp_r8 << "             .BR_S2(BR_S2_wire),                               \n";
fftp_r8 << "             .BR_S3(BR_S3_wire),                               \n";
fftp_r8 << "             .BR_S4(BR_S4_wire),                               \n";
fftp_r8 << "             .BR_S5(BR_S5_wire),                               \n";
fftp_r8 << "             .BR_S6(BR_S6_wire),                               \n";
fftp_r8 << "             .BR_S7(BR_S7_wire),                               \n";
fftp_r8 << "             .B1M0_result({"<< (64- CP_width)<<"'d0,B1M0_result_wire}),                   \n";
fftp_r8 << "             .B1M1_result({"<< (64- CP_width)<<"'d0,B1M1_result_wire}),                   \n";
fftp_r8 << "             .B1M2_result({"<< (64- CP_width)<<"'d0,B1M2_result_wire}),                   \n";
fftp_r8 << "             .B1M3_result({"<< (64- CP_width)<<"'d0,B1M3_result_wire}),                   \n";
fftp_r8 << "             .B1M4_result({"<< (64- CP_width)<<"'d0,B1M4_result_wire}),                   \n";
fftp_r8 << "             .B1M5_result({"<< (64- CP_width)<<"'d0,B1M5_result_wire}),                   \n";
fftp_r8 << "             .B1M6_result({"<< (64- CP_width)<<"'d0,B1M6_result_wire}),                   \n";
fftp_r8 << "             .B1M7_result({"<< (64- CP_width)<<"'d0,B1M7_result_wire}),                   \n";
fftp_r8 << "             .B0M0_result({"<< (64 - CP_width) <<"'d0,B0M0_result_wire}),                   \n";
fftp_r8 << "             .B0M1_result({"<< (64 - CP_width) <<"'d0,B0M1_result_wire}),                   \n";
fftp_r8 << "             .B0M2_result({"<< (64 - CP_width) <<"'d0,B0M2_result_wire}),                   \n";
fftp_r8 << "             .B0M3_result({"<< (64 - CP_width) <<"'d0,B0M3_result_wire}),                   \n";
fftp_r8 << "             .B0M4_result({"<< (64 - CP_width) <<"'d0,B0M4_result_wire}),                   \n";
fftp_r8 << "             .B0M5_result({"<< (64 - CP_width) <<"'d0,B0M5_result_wire}),                   \n";
fftp_r8 << "             .B0M6_result({"<< (64 - CP_width) <<"'d0,B0M6_result_wire}),                   \n";
fftp_r8 << "             .B0M7_result({"<< (64 - CP_width) <<"'d0,B0M7_result_wire}),                   \n";
fftp_r8 << "             .m2_sel(m2_sel_wire)                              \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "     R8_BU_outpipe u_R8_BU_outpipe(                                  \n"; 
fftp_r8 << "     		.CRUD0_o(CRUD0_pip_wire),                          \n";
fftp_r8 << "     		.CRUD1_o(CRUD1_pip_wire),                          \n";
fftp_r8 << "     		.CRUD2_o(CRUD2_pip_wire),                          \n";
fftp_r8 << "     		.CRUD3_o(CRUD3_pip_wire),                          \n";
fftp_r8 << "     		.CRUD4_o(CRUD4_pip_wire),                          \n";
fftp_r8 << "     		.CRUD5_o(CRUD5_pip_wire),                          \n";
fftp_r8 << "     		.CRUD6_o(CRUD6_pip_wire),                          \n";
fftp_r8 << "     		.CRUD7_o(CRUD7_pip_wire),                          \n";
fftp_r8 << "     		.BR0_o(BR0_pip_wire),                            \n";
fftp_r8 << "     		.BR1_o(BR1_pip_wire),                            \n";
fftp_r8 << "     		.BR2_o(BR2_pip_wire),                            \n";
fftp_r8 << "     		.BR3_o(BR3_pip_wire),                            \n";
fftp_r8 << "     		.BR4_o(BR4_pip_wire),                            \n";
fftp_r8 << "     		.BR5_o(BR5_pip_wire),                            \n";
fftp_r8 << "     		.BR6_o(BR6_pip_wire),                            \n";
fftp_r8 << "     		.BR7_o(BR7_pip_wire),                            \n";
fftp_r8 << "     		.CRUD0_i(CRUD0_wire),                              \n";
fftp_r8 << "     		.CRUD1_i(CRUD1_wire),                              \n";
fftp_r8 << "     		.CRUD2_i(CRUD2_wire),                              \n";
fftp_r8 << "     		.CRUD3_i(CRUD3_wire),                              \n";
fftp_r8 << "     		.CRUD4_i(CRUD4_wire),                              \n";
fftp_r8 << "     		.CRUD5_i(CRUD5_wire),                              \n";
fftp_r8 << "     		.CRUD6_i(CRUD6_wire),                              \n";
fftp_r8 << "     		.CRUD7_i(CRUD7_wire),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "     		.clk(clk)                                          \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "     MulMod B0M0(                                              \n";
fftp_r8 << "             .A_in(B0M0_a_o_wire), //need to modify            \n";
fftp_r8 << "             .B_in(B0M0_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M0_result_wire)  //need to modify 4/19  \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "      MulMod B0M1(                                             \n";
fftp_r8 << "             .A_in(B0M1_a_o_wire),//need to modify 4/19        \n";
fftp_r8 << "             .B_in(B0M1_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M1_result_wire)//need to modify 4/19    \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "      MulMod B0M2(                                             \n";
fftp_r8 << "             .A_in(B0M2_a_o_wire),//need to modify 4/19        \n";
fftp_r8 << "             .B_in(B0M2_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M2_result_wire)//need to modify 4/19    \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "      MulMod B0M3(                                             \n";
fftp_r8 << "             .A_in(B0M3_a_o_wire),//need to modify 4/19        \n";
fftp_r8 << "             .B_in(B0M3_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M3_result_wire)//need to modify 4/19    \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B0M4(                                             \n";
fftp_r8 << "             .A_in(B0M4_a_o_wire),//need to modify 4/19        \n";
fftp_r8 << "             .B_in(B0M4_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M4_result_wire)//need to modify 4/19    \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B0M5(                                             \n";
fftp_r8 << "             .A_in(B0M5_a_o_wire),//need to modify 4/19        \n";
fftp_r8 << "             .B_in(B0M5_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M5_result_wire)//need to modify 4/19    \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B0M6(                                             \n";
fftp_r8 << "             .A_in(B0M6_a_o_wire),//need to modify 4/19        \n";
fftp_r8 << "             .B_in(B0M6_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M6_result_wire)//need to modify 4/19    \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B0M7(                                             \n";
fftp_r8 << "             .A_in(B0M7_a_o_wire),//need to modify 4/19        \n";
fftp_r8 << "             .B_in(B0M7_b_o_wire),                       \n";
fftp_r8 << "             .bypass(1'b0),                                        \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B0M7_result_wire)//need to modify 4/19    \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "     MulMod B1M0(                                              \n";
fftp_r8 << "             .A_in(B1M0_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M0_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M0_result_wire)                         \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "      MulMod B1M1(                                             \n";
fftp_r8 << "             .A_in(B1M1_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M1_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M1_result_wire)                         \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "      MulMod B1M2(                                             \n";
fftp_r8 << "             .A_in(B1M2_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M2_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M2_result_wire)                         \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "      MulMod B1M3(                                             \n";
fftp_r8 << "             .A_in(B1M3_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M3_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M3_result_wire)                            \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B1M4(                                             \n";
fftp_r8 << "             .A_in(B1M4_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M4_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M4_result_wire)                            \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B1M5(                                             \n";
fftp_r8 << "             .A_in(B1M5_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M5_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M5_result_wire)                            \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B1M6(                                             \n";
fftp_r8 << "             .A_in(B1M6_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M6_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M6_result_wire)                            \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "      MulMod B1M7(                                             \n";
fftp_r8 << "             .A_in(B1M7_a_o_wire),                             \n";
fftp_r8 << "             .B_in(B1M7_b_o_wire),                             \n";
fftp_r8 << "             .bypass(m2_sel_wire),                             \n";
fftp_r8 << "             .clk(clk),                                        \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .result(B1M7_result_wire)                            \n";
fftp_r8 << "     );                                                        \n";
int BR_bit_size;
int double_cp_width;
int padding_zero_number;

BR_bit_size = 64 - 2 * CP_width;
double_cp_width =  2 * CP_width;
padding_zero_number = double_cp_width - BR_bit_size - CP_width;

fftp_r8 << "     BR u_BR0(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S0_wire,BR0_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r0),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "     BR u_BR1(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S1_wire,BR1_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r1),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "     BR u_BR2(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S2_wire,BR2_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r2),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "                                                               \n";
fftp_r8 << "     BR u_BR3(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S3_wire,BR3_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r3),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "     BR u_BR4(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S4_wire,BR4_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r4),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "     BR u_BR5(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S5_wire,BR5_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r5),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "     BR u_BR6(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S6_wire,BR6_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r6),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "     BR u_BR7(                                                 \n";
fftp_r8 << "     		.S_in({" << padding_zero_number <<"'b0,BR_S7_wire,BR7_pip_wire}),           \n";
fftp_r8 << "             .result(SP_Data_r7),                              \n";
fftp_r8 << "             .rst_n(rst_n),                                    \n";
fftp_r8 << "             .clk(clk)	                                       \n";
fftp_r8 << "     );                                                        \n";
fftp_r8 << "     //----------------------------------------------------    \n";
fftp_r8 << " 	//                                                                                                                      \n";
fftp_r8 << " 	CenCtrl u_CenCtrl(.MulValid_out(MulValid_out),                                                                          \n";
fftp_r8 << "                    .cen_out(cen_wire),                                                                                     \n";
fftp_r8 << "                    .wen0_out(wen0_wire),                                                                                   \n";
fftp_r8 << "                    .wen1_out(wen1_wire),                                                                                   \n";
fftp_r8 << "                    .ema_out(ema_wire),                                                                                     \n";
fftp_r8 << "                    .SD_sel_out(SD_sel_wire),                                                                               \n";
fftp_r8 << "                    .ExtMA_out(ExtMA_wire),                                                                                 \n";
fftp_r8 << "                    .AGU_en_out(AGU_en_wire),                                                                               \n";
fftp_r8 << "                    .RomCen_out(RomCen_wire),                                                                               \n";
fftp_r8 << "                    .mode_sel_out(mode_sel_wire),                                                                           \n";
fftp_r8 << "                    .rc_sel_out(rc_sel_wire),                                                                               \n";
fftp_r8 << "                    .m2_sel_out(m2_sel_wire),                                                                               \n";
fftp_r8 << "                    .wrfd_en_out(wrfd_en_wire), // 2018/08/01                                                               \n";
fftp_r8 << "                    .data_cnt_in(data_cnt_wire),                                                                            \n";
fftp_r8 << "                    .BND_in(BND_wire),                                                                                      \n";
fftp_r8 << "                    .ExtValid_in(ExtValid_wire),                                                                              \n";
fftp_r8 << "                    .rst_n(rst_n),                                                                                          \n";
fftp_r8 << "                    .clk(clk)                                                                                               \n";
fftp_r8 << "                    ) ;                                                                                                     \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//                                                                                                                      \n";
fftp_r8 << " 	R8_AGU u_R8_AGU(.BN_out(BN_wire),                                                                                       \n";
fftp_r8 << "                  .MA(AGUMA_wire),                                                                                          \n";
fftp_r8 << "                  .ROMA(ROMA_wire),                                                                                         \n";
fftp_r8 << "                  .Mul_sel_out(Mul_sel_wire),                                                                               \n";
fftp_r8 << "                  .RDC_sel_out(RDC_sel_wire),                                                                               \n";
fftp_r8 << "                  .data_cnt_reg(data_cnt_wire),                                                                             \n";
fftp_r8 << "                  .FFT_FSmode_sel(FFT_FSmode_sel_wire),                                                                     \n";
fftp_r8 << "                  .mode_sel_in(mode_sel_wire),                                                                              \n";
fftp_r8 << "                  .rc_sel_in(rc_sel_wire),                                                                                  \n";
fftp_r8 << "                  .AGU_en(AGU_en_wire),                                                                                     \n";
fftp_r8 << "                  .wrfd_en_in(wrfd_en_wire), // 2018/08/01                                                                  \n";
fftp_r8 << "                  .rst_n(rst_n),                                                                                            \n";
fftp_r8 << "                  .clk(clk)                                                                                                 \n";
fftp_r8 << "                  ) ;                                                                                                       \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//Control Signal Pipeline Register, 2018/08/01                                                                          \n";
fftp_r8 << " 	Ctrl_PipeReg1 u_Ctrl_PipeReg1(.mode_sel_Dout(mode_sel_D_wire),                                                          \n";
fftp_r8 << "                                .Mul_sel_Dout(Mul_sel_D_wire),                                                              \n";
fftp_r8 << "                                .RDC_sel_Dout(RDC_sel_D_wire),                                                              \n";
fftp_r8 << "                                .FFT_FSmode_sel_Dout(FFT_FSmode_sel_D_wire),                                                \n";
fftp_r8 << "                                .mode_sel_in(mode_sel_wire),                                                                \n";
fftp_r8 << "                                .Mul_sel_in(Mul_sel_wire),                                                                  \n";
fftp_r8 << "                                .RDC_sel_in(RDC_sel_wire),                                                                  \n";
fftp_r8 << "                                .FFT_FSmode_sel_in(FFT_FSmode_sel_wire),                                                    \n";
fftp_r8 << "                                .rst_n(rst_n),                                                                              \n";
fftp_r8 << "                                .clk(clk)                                                                                   \n";
fftp_r8 << "                                ) ;                                                                                         \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//                                                                                                                      \n";
fftp_r8 << " 	R8_WAddr u_R8_WAddr(.BND_out(BND_wire),                                                                                 \n";
fftp_r8 << "                      .WMA_out(WMA_wire),                                                                                   \n";
fftp_r8 << "                      .BN_in(BN_wire),                                                                                      \n";
fftp_r8 << "                      .MA_in(AGUMA_wire),                                                                                   \n";
fftp_r8 << "                      .rst_n(rst_n),                                                                                        \n";
fftp_r8 << "                      .clk(clk)                                                                                             \n";
fftp_r8 << "                      ) ;                                                                                                   \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << "    //-----------------------------------------------------\n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "    TWIMux u_TWIMUX(                                       \n";
fftp_r8 << "				    .TWIradix0(TWIradix0_wire),            \n";
fftp_r8 << "					.TWIradix1(TWIradix1_wire),            \n";
fftp_r8 << "					.TWIradix2(TWIradix2_wire),            \n";
fftp_r8 << "					.TWIradix3(TWIradix3_wire),            \n";
fftp_r8 << "					.TWIradix4(TWIradix4_wire),            \n";
fftp_r8 << "					.TWIradix5(TWIradix5_wire),            \n";
fftp_r8 << "					.TWIradix6(TWIradix6_wire),            \n";
fftp_r8 << "					.TWIradix7(TWIradix7_wire),            \n";
fftp_r8 << "					.b0radix0(b0ROM0_wire[127:64]),        \n";
fftp_r8 << "					.b0radix1(b0ROM0_wire[63:0]),          \n";
fftp_r8 << "					.b0radix2(b0ROM1_wire[127:64]),        \n";
fftp_r8 << "					.b0radix3(b0ROM1_wire[63:0]),          \n";
fftp_r8 << "					.b0radix4(b0ROM2_wire[127:64]),        \n";
fftp_r8 << "					.b0radix5(b0ROM2_wire[63:0]),          \n";
fftp_r8 << "					.b0radix6(b0ROM3_wire[127:64]),        \n";
fftp_r8 << "					.b0radix7(b0ROM3_wire[63:0]),          \n";
fftp_r8 << "					.b1radix0(b1ROM0_wire[127:64]),        \n";
fftp_r8 << "					.b1radix1(b1ROM0_wire[63:0]),          \n";
fftp_r8 << "					.b1radix2(b1ROM1_wire[127:64]),        \n";
fftp_r8 << "					.b1radix3(b1ROM1_wire[63:0]),          \n";
fftp_r8 << "					.b1radix4(b1ROM2_wire[127:64]),        \n";
fftp_r8 << "					.b1radix5(b1ROM2_wire[63:0]),          \n";
fftp_r8 << "					.b1radix6(b1ROM3_wire[127:64]),        \n";
fftp_r8 << "					.b1radix7(b1ROM3_wire[63:0]),          \n";
fftp_r8 << "					.BN_wire(BN_TWI_wire)                  \n";
fftp_r8 << "	);                                                     \n";
fftp_r8 << "   //---------------------------------------------------------\n";
fftp_r8 << "                                                           \n";
fftp_r8 << "	TWIpipe u_TWIpipe(                                     \n";
fftp_r8 << "					  .BN_out(BN_TWI_wire),                \n";
fftp_r8 << "					  .MA_out(MA_TWI_wire),                \n";
fftp_r8 << "	                  .TWIradix0_o(TWIradix0_pip_wire),    \n";
fftp_r8 << "	                  .TWIradix1_o(TWIradix1_pip_wire),    \n";
fftp_r8 << "	                  .TWIradix2_o(TWIradix2_pip_wire),    \n";
fftp_r8 << "	                  .TWIradix3_o(TWIradix3_pip_wire),    \n";
fftp_r8 << "	                  .TWIradix4_o(TWIradix4_pip_wire),    \n";
fftp_r8 << "	                  .TWIradix5_o(TWIradix5_pip_wire),    \n";
fftp_r8 << "	                  .TWIradix6_o(TWIradix6_pip_wire),    \n";
fftp_r8 << "	                  .TWIradix7_o(TWIradix7_pip_wire),    \n";
fftp_r8 << "	                  .BN_in(BN_wire),                     \n";
fftp_r8 << "	                  .MA_in(AGUMA_wire),                  \n";
fftp_r8 << "	                  .TWIradix0_i(TWIradix0_wire),        \n";
fftp_r8 << "	                  .TWIradix1_i(TWIradix1_wire),        \n";
fftp_r8 << "	                  .TWIradix2_i(TWIradix2_wire),        \n";
fftp_r8 << "	                  .TWIradix3_i(TWIradix3_wire),        \n";
fftp_r8 << "	                  .TWIradix4_i(TWIradix4_wire),        \n";
fftp_r8 << "	                  .TWIradix5_i(TWIradix5_wire),        \n";
fftp_r8 << "	                  .TWIradix6_i(TWIradix6_wire),        \n";
fftp_r8 << "	                  .TWIradix7_i(TWIradix7_wire),        \n";
fftp_r8 << "	                  .rst_n(rst_n),                       \n";
fftp_r8 << "	                  .clk(clk)                            \n";
fftp_r8 << "	);                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "	H_b0ROM0 u_H_b0ROM0(                                       \n";
fftp_r8 << "				.Q(b0ROM0_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "				.A(MA_TWI_wire)                            \n";
fftp_r8 << "	);                                                     \n";
fftp_r8 << "                                                           \n";
fftp_r8 << "    H_b0ROM1 u_H_b0ROM1(                                       \n";
fftp_r8 << "				.Q(b0ROM1_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "				.A(MA_TWI_wire)                            \n";
fftp_r8 << "    );                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "    H_b0ROM2 u_H_b0ROM2(                                       \n";
fftp_r8 << "				.Q(b0ROM2_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "				.A(MA_TWI_wire)                            \n";
fftp_r8 << "    );                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "    H_b0ROM3 u_H_b0ROM3(                                       \n";
fftp_r8 << "				.Q(b0ROM3_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "				.A(MA_TWI_wire)                            \n";
fftp_r8 << "    );                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "	H_b1ROM0 u_H_b1ROM0(                                       \n";
fftp_r8 << "				.Q(b1ROM0_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "    			.A(MA_TWI_wire)                            \n";
fftp_r8 << "	);                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "	H_b1ROM1 u_H_b1ROM1(                                       \n";
fftp_r8 << "				.Q(b1ROM1_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "				.A(MA_TWI_wire)                            \n";
fftp_r8 << "	);                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "    H_b1ROM2 u_H_b1ROM2(                                       \n";
fftp_r8 << "				.Q(b1ROM2_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "				.A(MA_TWI_wire)                            \n";
fftp_r8 << "    );                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << "    H_b1ROM3 u_H_b1ROM3(                                       \n";
fftp_r8 << "				.Q(b1ROM3_wire),                             \n";
fftp_r8 << "				.CLK(clk),                                 \n";
fftp_r8 << "				.CEN(~AGU_en_wire),                        \n";
fftp_r8 << "				.A(MA_TWI_wire)                            \n";
fftp_r8 << "    );                                                     \n";
fftp_r8 << "	                                                       \n";
fftp_r8 << " 	//---FFT1----------------------------------------------                                                                 \n";
fftp_r8 << " 	//for SRAM                                                                                                              \n";
fftp_r8 << " 	Mux1 u_Mux1(.BN0_MEM0_Dout(BN0_MEM0_wire),                                                                              \n";
fftp_r8 << "              .BN0_MEM1_Dout(BN0_MEM1_wire),                                                                                \n";
fftp_r8 << "              .BN0_MEM2_Dout(BN0_MEM2_wire),                                                                                \n";
fftp_r8 << "              .BN0_MEM3_Dout(BN0_MEM3_wire),                                                                                \n";
fftp_r8 << "              .BN1_MEM0_Dout(BN1_MEM0_wire),                                                                                \n";
fftp_r8 << "              .BN1_MEM1_Dout(BN1_MEM1_wire),                                                                                \n";
fftp_r8 << "              .BN1_MEM2_Dout(BN1_MEM2_wire),                                                                                \n";
fftp_r8 << "              .BN1_MEM3_Dout(BN1_MEM3_wire),                                                                                \n";
fftp_r8 << "              .MA0_out(MA0_wire),                                                                                           \n";
fftp_r8 << "              .MA1_out(MA1_wire),                                                                                           \n";
fftp_r8 << "              .ExtB0_D0_in(ExtB0_D0_wire),                                                                                    \n";
fftp_r8 << "              .ExtB0_D1_in(ExtB0_D1_wire),                                                                                    \n";
fftp_r8 << "              .ExtB0_D2_in(ExtB0_D2_wire),                                                                                    \n";
fftp_r8 << "              .ExtB0_D3_in(ExtB0_D3_wire),                                                                                    \n";
fftp_r8 << "              .ExtB0_D4_in(ExtB0_D4_wire),                                                                                    \n";
fftp_r8 << "              .ExtB0_D5_in(ExtB0_D5_wire),                                                                                    \n";
fftp_r8 << "              .ExtB0_D6_in(ExtB0_D6_wire),                                                                                    \n";
fftp_r8 << "              .ExtB0_D7_in(ExtB0_D7_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D0_in(ExtB1_D0_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D1_in(ExtB1_D1_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D2_in(ExtB1_D2_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D3_in(ExtB1_D3_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D4_in(ExtB1_D4_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D5_in(ExtB1_D5_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D6_in(ExtB1_D6_wire),                                                                                    \n";
fftp_r8 << "              .ExtB1_D7_in(ExtB1_D7_wire),                                                                                    \n";
fftp_r8 << "              .RDC_in0(RDC_out0_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .RDC_in1(RDC_out1_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .RDC_in2(RDC_out2_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .RDC_in3(RDC_out3_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .RDC_in4(RDC_out4_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .RDC_in5(RDC_out5_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .RDC_in6(RDC_out6_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .RDC_in7(RDC_out7_D_wire), // 2018/08/01                                                                      \n";
fftp_r8 << "              .ExtMA_in(ExtMA_wire),                                                                                        \n";
fftp_r8 << "              .AGUMA_in(AGUMA_wire),                                                                                        \n";
fftp_r8 << "              .WMA_in(WMA_wire),                                                                                            \n";
fftp_r8 << "              .wen0_in(wen0_wire),                                                                                          \n";
fftp_r8 << "              .wen1_in(wen1_wire),                                                                                          \n";
fftp_r8 << "              .SD_sel(SD_sel_wire)                                                                                          \n";
fftp_r8 << "              ) ;                                                                                                           \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//for Radix-8                                                                                                           \n";
fftp_r8 << " 	Mux2 u_Mux2(.RA0_out(RA0D_in_wire),                                                                                     \n";
fftp_r8 << "              .RA1_out(RA1D_in_wire),                                                                                       \n";
fftp_r8 << "              .RA2_out(RA2D_in_wire),                                                                                       \n";
fftp_r8 << "              .RA3_out(RA3D_in_wire),                                                                                       \n";
fftp_r8 << "              .RA4_out(RA4D_in_wire),                                                                                       \n";
fftp_r8 << "              .RA5_out(RA5D_in_wire),                                                                                       \n";
fftp_r8 << "              .RA6_out(RA6D_in_wire),                                                                                       \n";
fftp_r8 << "              .RA7_out(RA7D_in_wire),                                                                                       \n";
fftp_r8 << "              .BN0_MEM0_in(Data_out0),                                                                                      \n";
fftp_r8 << "              .BN0_MEM1_in(Data_out1),                                                                                      \n";
fftp_r8 << "              .BN0_MEM2_in(Data_out2),                                                                                      \n";
fftp_r8 << "              .BN0_MEM3_in(Data_out3),                                                                                      \n";
fftp_r8 << "              .BN1_MEM0_in(Data_out4),                                                                                      \n";
fftp_r8 << "              .BN1_MEM1_in(Data_out5),                                                                                      \n";
fftp_r8 << "              .BN1_MEM2_in(Data_out6),                                                                                      \n";
fftp_r8 << "              .BN1_MEM3_in(Data_out7),                                                                                      \n";
fftp_r8 << "              .BN_sel(BN_wire)                                                                                              \n";
fftp_r8 << "              ) ;                                                                                                           \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//                                                                                                                      \n";
fftp_r8 << " 	Radix8_Pipe u_Radix8_Pipe(.RA0_out(RA0D_out_wire),                                                                      \n";
fftp_r8 << "                            .RA1_out(RA1D_out_wire),                                                                        \n";
fftp_r8 << "                            .RA2_out(RA2D_out_wire),                                                                        \n";
fftp_r8 << "                            .RA3_out(RA3D_out_wire),                                                                        \n";
fftp_r8 << "                            .RA4_out(RA4D_out_wire),                                                                        \n";
fftp_r8 << "                            .RA5_out(RA5D_out_wire),                                                                        \n";
fftp_r8 << "                            .RA6_out(RA6D_out_wire),                                                                        \n";
fftp_r8 << "                            .RA7_out(RA7D_out_wire),                                                                        \n";
fftp_r8 << "                            .RA0_in(RA0D_in_wire),                                                                          \n";
fftp_r8 << "                            .RA1_in(RA1D_in_wire),                                                                          \n";
fftp_r8 << "                            .RA2_in(RA2D_in_wire),                                                                          \n";
fftp_r8 << "                            .RA3_in(RA3D_in_wire),                                                                          \n";
fftp_r8 << "                            .RA4_in(RA4D_in_wire),                                                                          \n";
fftp_r8 << "                            .RA5_in(RA5D_in_wire),                                                                          \n";
fftp_r8 << "                            .RA6_in(RA6D_in_wire),                                                                          \n";
fftp_r8 << "                            .RA7_in(RA7D_in_wire),                                                                          \n";
fftp_r8 << "                            .N_in(N_in),                                                                                    \n";
fftp_r8 << "                            .rst_n(rst_n),                                                                                  \n";
fftp_r8 << "                            .clk(clk)                                                                                       \n";
fftp_r8 << "                            ) ;                                                                                             \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//for Mul                                                                                                               \n";
fftp_r8 << " 	Mux3 u_Mux3(.MulB0_out(MulB0_wire),                                                                                     \n";
fftp_r8 << "              .MulB1_out(MulB1_wire),                                                                                       \n";
fftp_r8 << "              .MulB2_out(MulB2_wire),                                                                                       \n";
fftp_r8 << "              .MulB3_out(MulB3_wire),                                                                                       \n";
fftp_r8 << "              .MulB4_out(MulB4_wire),                                                                                       \n";
fftp_r8 << "              .MulB5_out(MulB5_wire),                                                                                       \n";
fftp_r8 << "              .MulB6_out(MulB6_wire),                                                                                       \n";
fftp_r8 << "              .MulB7_out(MulB7_wire),                                                                                       \n";
fftp_r8 << "              .MulA1_out(MulA1_wire),                                                                                       \n";
fftp_r8 << "              .MulA2_out(MulA2_wire),                                                                                       \n";
fftp_r8 << "              .MulA3_out(MulA3_wire),                                                                                       \n";
fftp_r8 << "              .MulA5_out(MulA5_wire),                                                                                       \n";
fftp_r8 << "              .MulA6_out(MulA6_wire),                                                                                       \n";
fftp_r8 << "              .MulA7_out(MulA7_wire),                                                                                       \n";
fftp_r8 << "              .IFFTROMD0_in(IFFTROMD0_D_wire), // 2018/08/01                                                                \n";
fftp_r8 << "              .IFFTROMD1_in(IFFTROMD1_D_wire), // 2018/08/01                                                                \n";
fftp_r8 << "              .IFFTROMD2_in(IFFTROMD2_D_wire), // 2018/08/01                                                                \n";
fftp_r8 << "              .IFFTROMD3_in(IFFTROMD3_D_wire), // 2018/08/01                                                                \n";
fftp_r8 << "              .ROMD0_in(ROMD0_D_wire), // 2018/08/01                                                                        \n";
fftp_r8 << "              .ROMD1_in(ROMD1_D_wire), // 2018/08/01                                                                        \n";
fftp_r8 << "              .ROMD2_in(ROMD2_D_wire), // 2018/08/01                                                                        \n";
fftp_r8 << "              .ROMD3_in(ROMD3_D_wire), // 2018/08/01                                                                        \n";
fftp_r8 << "              .FFTBD0_in(TWIradix0_pip_wire),                                                                                  \n";
fftp_r8 << "              .FFTBD1_in(TWIradix1_pip_wire),                                                                                  \n";
fftp_r8 << "              .FFTBD2_in(TWIradix2_pip_wire),                                                                                  \n";
fftp_r8 << "              .FFTBD3_in(TWIradix3_pip_wire),                                                                                  \n";
fftp_r8 << "              .FFTBD4_in(TWIradix4_pip_wire),                                                                                  \n";
fftp_r8 << "              .FFTBD5_in(TWIradix5_pip_wire),                                                                                  \n";
fftp_r8 << "              .FFTBD6_in(TWIradix6_pip_wire),                                                                                  \n";
fftp_r8 << "              .FFTBD7_in(TWIradix7_pip_wire),                                                                                  \n";
fftp_r8 << "              .RA1D_in(RA1D_out_wire),                                                                                      \n";
fftp_r8 << "              .RA2D_in(RA2D_out_wire),                                                                                      \n";
fftp_r8 << "              .RA3D_in(RA3D_out_wire),                                                                                      \n";
fftp_r8 << "              .RA5D_in(RA5D_out_wire),                                                                                      \n";
fftp_r8 << "              .RA6D_in(RA6D_out_wire),                                                                                      \n";
fftp_r8 << "              .RA7D_in(RA7D_out_wire),                                                                                      \n";
fftp_r8 << "              .Mul_sel(Mul_sel_D_wire), // 2018/08/01                                                                       \n";
fftp_r8 << "              .mode_sel(mode_sel_D_wire) // 2018/08/01                                                                      \n";
fftp_r8 << "              ) ;                                                                                                           \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//Pipeline Register, 2018/08/01                                                                                         \n";
fftp_r8 << " 	R8_NPipeReg3 u_R8_NPipeReg3(.N_D4_out(N_D4_wire),                                                                       \n";
fftp_r8 << "                              .N_in(N_in),                                                                                  \n";
fftp_r8 << "                              .rst_n(rst_n),                                                                                \n";
fftp_r8 << "                              .clk(clk)                                                                                     \n";
fftp_r8 << "                              ) ;                                                                                           \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//                                                                      \n";
fftp_r8 << " 	MulMod128 u0_MulMod128(.S_out(MulMod0_out_wire),                        \n";
fftp_r8 << "                         .A_in(RA0D_out_wire),                              \n";
fftp_r8 << " 		                   .B_in(MulB0_wire),                               \n";
fftp_r8 << " 		                   .N_in(N_D4_wire),                                \n";
fftp_r8 << " 						   .rst_n(rst_n),                                   \n";
fftp_r8 << "                         .clk(clk)                                          \n";
fftp_r8 << "                         ) ;                                                \n";
fftp_r8 << " 	//                                                                      \n";
fftp_r8 << " 	MulMod128 u1_MulMod128(.S_out(MulMod1_out_wire),                        \n";
fftp_r8 << "                         .A_in(MulA1_wire),                                 \n";
fftp_r8 << " 		                 .B_in(MulB1_wire),                                 \n";
fftp_r8 << " 		                 .N_in(N_D4_wire),                                  \n";
fftp_r8 << " 						 .rst_n(rst_n),                                     \n";
fftp_r8 << "                         .clk(clk)                                          \n";
fftp_r8 << "                         ) ;                                                \n";
fftp_r8 << " 	//                                                                      \n";
fftp_r8 << " 	MulMod128 u2_MulMod128(.S_out(MulMod2_out_wire),                        \n";
fftp_r8 << "                         .A_in(MulA2_wire),                                 \n";
fftp_r8 << " 		                   .B_in(MulB2_wire),                               \n";
fftp_r8 << " 		                   .N_in(N_D4_wire),                                \n";
fftp_r8 << " 						   .rst_n(rst_n),                                   \n";
fftp_r8 << "                         .clk(clk)                                          \n";
fftp_r8 << "                         ) ;                                                \n";
fftp_r8 << " 	//                                                                        \n";
fftp_r8 << " 	MulMod128 u3_MulMod128(.S_out(MulMod3_out_wire),                          \n";
fftp_r8 << "                         .A_in(MulA3_wire),                                 \n";
fftp_r8 << " 		                   .B_in(MulB3_wire),                                 \n";
fftp_r8 << " 		                   .N_in(N_D4_wire),                                  \n";
fftp_r8 << " 						   .rst_n(rst_n),                                     \n";
fftp_r8 << "                         .clk(clk)                                          \n";
fftp_r8 << "                         ) ;                                                \n";
fftp_r8 << " 	//                                                                        \n";
fftp_r8 << " 	MulMod128 u4_MulMod128(.S_out(MulMod4_out_wire),                          \n";
fftp_r8 << "                         .A_in(RA4D_out_wire),                                 \n";
fftp_r8 << " 		                   .B_in(MulB4_wire),                                 \n";
fftp_r8 << " 		                   .N_in(N_D4_wire),                                  \n";
fftp_r8 << " 						   .rst_n(rst_n),                                     \n";
fftp_r8 << "                         .clk(clk)                                          \n";
fftp_r8 << "                         ) ;                                                \n";
fftp_r8 << " 	//                                                                        \n";
fftp_r8 << " 	MulMod128 u5_MulMod128(.S_out(MulMod5_out_wire),                          \n";
fftp_r8 << "                         .A_in(MulA5_wire),                                 \n";
fftp_r8 << " 		                   .B_in(MulB5_wire),                                 \n";
fftp_r8 << " 		                   .N_in(N_D4_wire),                                  \n";
fftp_r8 << " 						   .rst_n(rst_n),                                     \n";
fftp_r8 << "                         .clk(clk)                                          \n";
fftp_r8 << "                         ) ;                                                \n";
fftp_r8 << " 	//                                                                        \n";
fftp_r8 << " 	MulMod128 u6_MulMod128(.S_out(MulMod6_out_wire),                          \n";
fftp_r8 << "                            .A_in(MulA6_wire),                              \n";
fftp_r8 << " 		                   .B_in(MulB6_wire),                                 \n";
fftp_r8 << " 		                   .N_in(N_D4_wire),                                  \n";
fftp_r8 << " 						   .rst_n(rst_n),                                     \n";
fftp_r8 << "                            .clk(clk)                                       \n";
fftp_r8 << "                            ) ;                                             \n";
fftp_r8 << " 	//                                                                        \n";
fftp_r8 << " 	MulMod128 u7_MulMod128(.S_out(MulMod7_out_wire),                          \n";
fftp_r8 << "                            .A_in(MulA7_wire),                              \n";
fftp_r8 << " 		                   .B_in(MulB7_wire),                                 \n";
fftp_r8 << " 		                   .N_in(N_D4_wire),                                  \n";
fftp_r8 << " 						   .rst_n(rst_n),                                     \n";
fftp_r8 << "                            .clk(clk)                                       \n";
fftp_r8 << "                            ) ;                                             \n";
fftp_r8 << " 	R8_DC u_R8_DC(.RDC_out0(RDC_out0_wire),                                                                                 \n";
fftp_r8 << "                .RDC_out1(RDC_out1_wire),                                                                                   \n";
fftp_r8 << "                .RDC_out2(RDC_out2_wire),                                                                                   \n";
fftp_r8 << "                .RDC_out3(RDC_out3_wire),                                                                                   \n";
fftp_r8 << "                .RDC_out4(RDC_out4_wire),                                                                                   \n";
fftp_r8 << "                .RDC_out5(RDC_out5_wire),                                                                                   \n";
fftp_r8 << "                .RDC_out6(RDC_out6_wire),                                                                                   \n";
fftp_r8 << "                .RDC_out7(RDC_out7_wire),                                                                                   \n";
fftp_r8 << "                .RDC_in0(MulMod0_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_in1(MulMod1_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_in2(MulMod2_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_in3(MulMod3_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_in4(MulMod4_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_in5(MulMod5_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_in6(MulMod6_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_in7(MulMod7_out_wire),                                                                                 \n";
fftp_r8 << "                .RDC_sel(RDC_sel_D_wire), // 2018/08/01                                                                     \n";
fftp_r8 << "                .FFT_FSmode_sel(FFT_FSmode_sel_D_wire), // 2018/08/01                                                       \n";
fftp_r8 << "                .rst_n(rst_n),                                                                                              \n";
fftp_r8 << "                .clk(clk)                                                                                                   \n";
fftp_r8 << "                ) ;                                                                                                         \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	// 2018/08/01                                                                                                           \n";
fftp_r8 << " 	R8_WD_buf u_R8_WD_buf(.RDC0_D_out(RDC_out0_D_wire),                                                                     \n";
fftp_r8 << "                        .RDC1_D_out(RDC_out1_D_wire),                                                                       \n";
fftp_r8 << "                        .RDC2_D_out(RDC_out2_D_wire),                                                                       \n";
fftp_r8 << "                        .RDC3_D_out(RDC_out3_D_wire),                                                                       \n";
fftp_r8 << "                        .RDC4_D_out(RDC_out4_D_wire),                                                                       \n";
fftp_r8 << "                        .RDC5_D_out(RDC_out5_D_wire),                                                                       \n";
fftp_r8 << "                        .RDC6_D_out(RDC_out6_D_wire),                                                                       \n";
fftp_r8 << "                        .RDC7_D_out(RDC_out7_D_wire),                                                                       \n";
fftp_r8 << "                        .RDC0_in(RDC_out0_wire),                                                                            \n";
fftp_r8 << "                        .RDC1_in(RDC_out1_wire),                                                                            \n";
fftp_r8 << "                        .RDC2_in(RDC_out2_wire),                                                                            \n";
fftp_r8 << "                        .RDC3_in(RDC_out3_wire),				                                                            \n";
fftp_r8 << "                        .RDC4_in(RDC_out4_wire),				                                                            \n";
fftp_r8 << "                        .RDC5_in(RDC_out5_wire),				                                                            \n";
fftp_r8 << "                        .RDC6_in(RDC_out6_wire),				                                                            \n";
fftp_r8 << "                        .RDC7_in(RDC_out7_wire),				                                                            \n";
fftp_r8 << "                        .rst_n(rst_n),                                                                                      \n";
fftp_r8 << "                        .clk(clk)                                                                                           \n";
fftp_r8 << "                        ) ;                                                                                                 \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//-----------------------------------------------------                                                                 \n";
fftp_r8 << " 	// for CRUR4                                                                                                            \n";
fftp_r8 << " 	Mux4 u_Mux4(.CRUD0_out(CRUD0_wire),                                                                                     \n";
fftp_r8 << "                .CRUD1_out(CRUD1_wire),                                                                                     \n";
fftp_r8 << "                .CRUD2_out(CRUD2_wire),                                                                                     \n";
fftp_r8 << "                .CRUD3_out(CRUD3_wire),                                                                                     \n";
fftp_r8 << "                .CRUD4_out(CRUD4_wire),                                                                                     \n";
fftp_r8 << "                .CRUD5_out(CRUD5_wire),                                                                                     \n";
fftp_r8 << "                .CRUD6_out(CRUD6_wire),                                                                                     \n";
fftp_r8 << "                .CRUD7_out(CRUD7_wire),                                                                                     \n";
fftp_r8 << "                .IFFTD0_in(RA0D_in_wire),                                                                                   \n";
fftp_r8 << "                .IFFTD1_in(RA1D_in_wire),                                                                                   \n";
fftp_r8 << "                .IFFTD2_in(RA2D_in_wire),                                                                                   \n";
fftp_r8 << "                .IFFTD3_in(RA3D_in_wire),                                                                                   \n";
fftp_r8 << "                .IFFTD4_in(RA4D_in_wire),                                                                                   \n";
fftp_r8 << "                .IFFTD5_in(RA5D_in_wire),                                                                                   \n";
fftp_r8 << "                .IFFTD6_in(RA6D_in_wire),                                                                                   \n";
fftp_r8 << "                .IFFTD7_in(RA7D_in_wire),                                                                                   \n";
fftp_r8 << "                .m2_sel(m2_sel_wire)                                                                                        \n";
fftp_r8 << "                ) ;                                                                                                         \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << " 	//Pipeline Register, 2018/08/01				                                                                            \n";
fftp_r8 << " 	R8_ROMPipeReg1 u_R8_ROMPipeReg1(.ROMD0_Dout(ROMD0_D_wire),                                                              \n";
fftp_r8 << " 				                    .ROMD1_Dout(ROMD1_D_wire),			                                                    \n";
fftp_r8 << " 				                    .ROMD2_Dout(ROMD2_D_wire),			                                                    \n";
fftp_r8 << " 				                    .ROMD3_Dout(ROMD3_D_wire),			                                                    \n";
fftp_r8 << " 								    .IFFTROMD0_Dout(IFFTROMD0_D_wire),                                                      \n";
fftp_r8 << " 				                    .IFFTROMD1_Dout(IFFTROMD1_D_wire),				                                        \n";
fftp_r8 << " 				                    .IFFTROMD2_Dout(IFFTROMD2_D_wire),				                                        \n";
fftp_r8 << " 				                    .IFFTROMD3_Dout(IFFTROMD3_D_wire),				                                        \n";
fftp_r8 << " 			                        .ROMD0_in(ROMD0_out_wire),                                                              \n";
fftp_r8 << " 					                .ROMD1_in(ROMD1_out_wire),					                                            \n";
fftp_r8 << " 					                .ROMD2_in(ROMD2_out_wire),					                                            \n";
fftp_r8 << " 					                .ROMD3_in(ROMD3_out_wire),					                                            \n";
fftp_r8 << " 								    .IFFTROMD0_in(IFFTROMD0_out_wire),                                                      \n";
fftp_r8 << " 					                .IFFTROMD1_in(IFFTROMD1_out_wire),					                                    \n";
fftp_r8 << " 					                .IFFTROMD2_in(IFFTROMD2_out_wire),					                                    \n";
fftp_r8 << " 					                .IFFTROMD3_in(IFFTROMD3_out_wire),					                                    \n";
fftp_r8 << "                                  .rst_n(rst_n),                                                                            \n";
fftp_r8 << "                                  .clk(clk)                                                                                 \n";
fftp_r8 << "                                  ) ;		                                                                                \n";
fftp_r8 << " 	                                                                                                                        \n";
fftp_r8 << "    " << ss.str() << "  u0_" << ss.str() << " (.Q(Data_out0), //modify                                            \n"; 
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen0_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN0_MEM0_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );	\n";
fftp_r8 << "    " << ss.str() << "  u1_" << ss.str() << " (.Q(Data_out1), //modify                                            \n"; 
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen0_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN0_MEM1_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );\n";		
fftp_r8 << "    " << ss.str() << "  u2_" << ss.str() << " (.Q(Data_out2), //modify                                            \n"; 
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen0_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN0_MEM2_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );\n";		
fftp_r8 << "    " << ss.str() << "  u3_" << ss.str() << " (.Q(Data_out3), //modify                                            \n"; 
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen0_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA0_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN0_MEM3_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );\n";		
fftp_r8 << "    " << ss.str() << "  u4_" << ss.str() << "  (.Q(Data_out4), //modify                                           \n";  
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen1_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN1_MEM0_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );\n";
fftp_r8 << "    " << ss.str() << "  u5_" << ss.str() << "  (.Q(Data_out5), //modify                                           \n";  
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen1_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN1_MEM1_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );	  \n";		
fftp_r8 << "    " << ss.str() << "  u6_" << ss.str() << "  (.Q(Data_out6), //modify                                           \n";  
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen1_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN1_MEM2_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );	  \n";		
fftp_r8 << "    " << ss.str() << "  u7_" << ss.str() << "  (.Q(Data_out7), //modify                                           \n";  
fftp_r8 << "                                        .CLK(clk),                                                                          \n";
fftp_r8 << "                                        .CEN(cen_wire),                                                                     \n";
fftp_r8 << "                                        .WEN(wen1_wire), //modify                                                   \n";
fftp_r8 << "                                        .A(MA1_wire[A_WIDTH-1:0]), //modify                                                 \n";
fftp_r8 << "                                        .D(BN1_MEM3_wire),                                                                  \n";
fftp_r8 << "                                        .EMA(ema_wire)                                                                      \n";
fftp_r8 << "                                        );	  \n";		
fftp_r8 << "     //-----------------------------------------------------     \n";                                                            
fftp_r8 << "     //2020/04/19 modify                                         \n";
fftp_r8 << "     //re-order factor  ROM                                      \n";
fftp_r8 << "     //BANK0                                                     \n";
fftp_r8 << "     IReorderMA_pip u_IReorderMA_pip(                            \n";
fftp_r8 << "             .IREMA_o(IREMA),                                    \n";
fftp_r8 << "             .MA_i(data_cnt_wire[" << (IReROM_width-1) <<":0]),\n";
fftp_r8 << "             .rst_n(rst_n),                                      \n";
fftp_r8 << "             .clk(clk)                                           \n";
fftp_r8 << "     );                                                          \n";
fftp_r8 << "                                                                 \n";
fftp_r8 << "     //BANK1                                                     \n";
fftp_r8 << "     reorderROM0 u_reorderROM0(                                  \n";
fftp_r8 << "                               .Q(reorderROM0_wire_reg_in),      \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(rc_sel_wire),                \n";
fftp_r8 << "                               .A(REMA_wire)                     \n";
fftp_r8 << "     );                                                          \n";
fftp_r8 << "                                                                 \n";
fftp_r8 << "     reorderROM1 u_reorderROM1(                                  \n";
fftp_r8 << "                               .Q(reorderROM1_wire_reg_in),      \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(rc_sel_wire),                \n";
fftp_r8 << "                               .A(REMA_wire)                     \n";
fftp_r8 << "     );                                                          \n";
fftp_r8 << "     reorderROM2 u_reorderROM2(                                  \n";
fftp_r8 << "                               .Q(reorderROM2_wire_reg_in),      \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(rc_sel_wire),                \n";
fftp_r8 << "                               .A(REMA_wire)                     \n";
fftp_r8 << "     );                                                          \n";
fftp_r8 << "     reorderROM3 u_reorderROM3(                                  \n";
fftp_r8 << "                               .Q(reorderROM3_wire_reg_in),      \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(rc_sel_wire),                \n";
fftp_r8 << "                               .A(REMA_wire)                     \n";
fftp_r8 << "     );                                                          \n";
fftp_r8 << "     //64 bits                                                   \n";
fftp_r8 << "     ireorderROM0 u_ireorderROM0(                                \n";
fftp_r8 << "                               .Q(ireorderROM0_wire_reg_in),     \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r8 << "                               .A(IREMA)                         \n";
fftp_r8 << "     );                                                          \n";
fftp_r8 << "                                                                 \n";
fftp_r8 << "     ireorderROM1 u_ireorderROM1(                                \n";
fftp_r8 << "                               .Q(ireorderROM1_wire_reg_in),     \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r8 << "                               .A(IREMA)                         \n";
fftp_r8 << "     );                                                          \n";
fftp_r8 << "     ireorderROM2 u_ireorderROM2(                                \n";
fftp_r8 << "                               .Q(ireorderROM2_wire_reg_in),     \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r8 << "                               .A(IREMA)                         \n";
fftp_r8 << "     );                                                          \n";

if(8 * CP_width > 192){
fftp_r8 << "     ireorderROM3 u_ireorderROM3(                                \n";
fftp_r8 << "                               .Q(ireorderROM3_wire_reg_in),     \n";
fftp_r8 << "                               .CLK(clk),                        \n";
fftp_r8 << "                               .CEN(~rc_sel_wire),               \n";
fftp_r8 << "                               .A(IREMA)                         \n";
fftp_r8 << "     );                                                          \n";
}

fftp_r8 << "    //-----------------------------------------------------      \n";
fftp_r8 << "    R8_orderROM_Pipe u_R8_orderROM_Pipe(.reorderROM0_o(reorderROM0_wire),\n";                                  
fftp_r8 << "                                        .reorderROM1_o(reorderROM1_wire),\n";                                  
fftp_r8 << "                                        .reorderROM2_o(reorderROM2_wire),\n";                                  
fftp_r8 << "                                        .reorderROM3_o(reorderROM3_wire),\n";                                  
fftp_r8 << "                                        .ireorderROM0_o(ireorderROM0_wire),\n";                                  
fftp_r8 << "                                        .ireorderROM1_o(ireorderROM1_wire),\n";                                  
fftp_r8 << "                                        .ireorderROM2_o(ireorderROM2_wire),\n";                                  
if(8 * CP_width > 192)fftp_r8 << "                                        .ireorderROM3_o(ireorderROM3_wire),\n";                                  
fftp_r8 << "                                        .reorderROM0_i(reorderROM0_wire_reg_in),\n";                                  
fftp_r8 << "                                        .reorderROM1_i(reorderROM1_wire_reg_in),\n";                                  
fftp_r8 << "                                        .reorderROM2_i(reorderROM2_wire_reg_in),\n";                                  
fftp_r8 << "                                        .reorderROM3_i(reorderROM3_wire_reg_in),\n";                                  
fftp_r8 << "                                        .ireorderROM0_i(ireorderROM0_wire_reg_in),\n";                                  
fftp_r8 << "                                        .ireorderROM1_i(ireorderROM1_wire_reg_in),\n";                                  
fftp_r8 << "                                        .ireorderROM2_i(ireorderROM2_wire_reg_in),\n";                                  
if(8 * CP_width >192)fftp_r8 << "                                        .ireorderROM3_i(ireorderROM3_wire_reg_in),\n";                                  
fftp_r8 << "                                        .rst_n(rst_n),\n";                                  
fftp_r8 << "                                        .clk(clk)\n";                                  
fftp_r8 << "                                        );\n";                                  
fftp_r8 << "    //-----------------------------------------------------      \n";                                  
fftp_r8 << "    " << "ROM0 u_ROM0_" << (no_address_tmp*4) << "_64 (.Q(ROMD0_out_wire), //modify             \n";	
fftp_r8 << "                                .CLK(clk),                                                      \n";	
fftp_r8 << "                                .CEN(RomCen_wire),                                              \n";	
fftp_r8 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                          \n";	
fftp_r8 << "                                );		                                                        \n";	
fftp_r8 << "    " << "ROM1 u_ROM1_" << (no_address_tmp*4) << "_128 (.Q(ROMD1_out_wire), //modify            \n";	
fftp_r8 << "                                .CLK(clk),                                                      \n";	
fftp_r8 << "                                .CEN(RomCen_wire),                                              \n";	
fftp_r8 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                          \n";	
fftp_r8 << "                                );		                                                        \n";
fftp_r8 << "    " << "ROM2 u_ROM2_" << (no_address_tmp*4) << "_128 (.Q(ROMD2_out_wire), //modify            \n";	
fftp_r8 << "                                .CLK(clk),                                                      \n";	
fftp_r8 << "                                .CEN(RomCen_wire),                                              \n";	
fftp_r8 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                          \n";	
fftp_r8 << "                                );		                                                        \n";	
fftp_r8 << "    " << "ROM3 u_ROM3_" << (no_address_tmp*4) << "_128 (.Q(ROMD3_out_wire), //modify            \n";	
fftp_r8 << "                                .CLK(clk),                                                      \n";	
fftp_r8 << "                                .CEN(RomCen_wire),                                              \n";	
fftp_r8 << "                                .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                          \n";	
fftp_r8 << "                                );		                                                        \n";	
fftp_r8 << "    " << "IROM0 u_IROM0_" << (no_address_tmp*4) << "_64 (.Q(IFFTROMD0_out_wire), //modify       \n";
fftp_r8 << "                                    .CLK(clk),                                                  \n";
fftp_r8 << "                                    .CEN(RomCen_wire),                                          \n";
fftp_r8 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                      \n";
fftp_r8 << "                                    );		                                                    \n";
fftp_r8 << "    " << "IROM1 u_IROM1_" << (no_address_tmp*4) << "_128 (.Q(IFFTROMD1_out_wire), //modify      \n";
fftp_r8 << "                                    .CLK(clk),                                                  \n";
fftp_r8 << "                                    .CEN(RomCen_wire),                                          \n";
fftp_r8 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                      \n";
fftp_r8 << "                                    );		                                                    \n";
fftp_r8 << "    " << "IROM2 u_IROM2_" << (no_address_tmp*4) << "_128 (.Q(IFFTROMD2_out_wire), //modify      \n";
fftp_r8 << "                                    .CLK(clk),                                                  \n";
fftp_r8 << "                                    .CEN(RomCen_wire),                                          \n";
fftp_r8 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                      \n";
fftp_r8 << "                                    );		                                                    \n";
fftp_r8 << "    " << "IROM3 u_IROM3_" << (no_address_tmp*4) << "_128 (.Q(IFFTROMD3_out_wire), //modify      \n";
fftp_r8 << "                                    .CLK(clk),                                                  \n";
fftp_r8 << "                                    .CEN(RomCen_wire),                                          \n";
fftp_r8 << "                                    .A(ROMA_wire[ROMA_WIDTH-1:0]) //modify                      \n";
fftp_r8 << "                                    );		                                                    \n";
fftp_r8 << " endmodule                                                                                      \n"; 
     fftp_r8.close();
}
void FFTC::FFTP_r16(std::string string_in){
	 std::ofstream fftp;
     int no_address_tmp;
     no_address_tmp = exp2(addr_width); //number of address
     std::string        string_buf = "SRAM_SP_";
     std::stringstream  ss;
     ss << string_buf << no_address_tmp <<"_128";
     std::cout <<"--->SRAM name :" << ss.str() <<"\n";
     //input file
     std::string string_fp = "/FFTP.v"; //file position 
     std::stringstream ss_fp;
     ss_fp << string_in << string_fp;
	 fftp.open(ss_fp.str());
     fftp << " `timescale 1 ns/1 ps                                                       \n";
     fftp << " module FFTP(MulValid_out,                                                  \n";
     fftp << "             MulD0_out,                                                     \n";
     fftp << " 		       MulD1_out,                                                     \n";
     fftp << " 			   MulD2_out,                                                     \n";
     fftp << " 			   MulD3_out,                                                     \n";
     fftp << " 			   MulD4_out,                                                     \n";
     fftp << " 			   MulD5_out,                                                     \n";
     fftp << " 			   MulD6_out,                                                     \n";
     fftp << " 			   MulD7_out,                                                     \n";
     fftp << " 			   MulD8_out,                                                     \n";
     fftp << " 			   MulD9_out,                                                     \n";
     fftp << " 			   MulD10_out,                                                    \n";
     fftp << " 			   MulD11_out,                                                    \n";
     fftp << " 			   MulD12_out,                                                    \n";
     fftp << " 			   MulD13_out,                                                    \n";
     fftp << " 			   MulD14_out,                                                    \n";
     fftp << " 			   MulD15_out,                                                    \n";
     fftp << " 			   ExtB0_D0_in,                                                   \n";
     fftp << " 			   ExtB0_D1_in,                                                   \n";
     fftp << " 			   ExtB0_D2_in,                                                   \n";
     fftp << " 			   ExtB0_D3_in,                                                   \n";
     fftp << " 			   ExtB0_D4_in,                                                   \n";
     fftp << " 			   ExtB0_D5_in,                                                   \n";
     fftp << " 			   ExtB0_D6_in,                                                   \n";
     fftp << " 			   ExtB0_D7_in,                                                   \n";     
     fftp << " 			   ExtB1_D0_in,                                                   \n";
     fftp << " 			   ExtB1_D1_in,                                                   \n";
     fftp << " 			   ExtB1_D2_in,                                                   \n";
     fftp << " 			   ExtB1_D3_in,                                                   \n";
     fftp << " 			   ExtB1_D4_in,                                                   \n";
     fftp << " 			   ExtB1_D5_in,                                                   \n";
     fftp << " 			   ExtB1_D6_in,                                                   \n";
     fftp << " 			   ExtB1_D7_in,                                                   \n";
     fftp << " 			   N_in,                                                          \n";
     fftp << " 			   ExtValid_in,                                                   \n";
     fftp << "             rst_n,                                                         \n";
     fftp << "             clk                                                            \n";
     fftp << "             ) ;                                                            \n";
     fftp << " 			                                                                  \n";
     fftp << " parameter CP_WIDTH    = " << CP_width           << ";\n"; 			                              
     fftp << " parameter DOP_WIDTH   = " << (2*CP_width)       << ";\n"; 			                              
     fftp << " parameter HP_WIDTH    = 32 ; 			                                  \n";
     fftp << " parameter P_WIDTH     = 64 ; 			                                  \n";
     fftp << " parameter A_WIDTH     = " << addr_width <<";\n";
     fftp << " parameter SD_WIDTH    = 128 ;                                              \n";
     fftp << " parameter ROMA_WIDTH  = " << ROM_width  << ";\n";
     fftp << " parameter IREMA_WIDTH = " << IReROM_width   << ";\n";
	 fftp << " parameter DC_WIDTH    = " << data_cnt_width << ";\n";
     fftp << " parameter OUT_PIPE_WIDTH   = "<< 64-(2*CP_width) <<";\n";
	 fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " output                MulValid_out ;                                       \n";
     fftp << "                                                                            \n";
     fftp << " output[CP_WIDTH-1:0]   MulD0_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD1_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD2_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD3_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD4_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD5_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD6_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD7_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD8_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD9_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD10_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD11_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD12_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD13_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD14_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD15_out ;                                         \n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D0_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D1_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D2_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D3_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D4_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D5_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D6_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D7_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D0_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D1_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D2_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D3_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D4_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D5_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D6_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D7_in ;                                         \n";
     fftp << " input  [P_WIDTH-1:0] N_in ;                                                \n";
     fftp << " input                ExtValid_in ;                                         \n";
     fftp << " input                rst_n ;                                               \n";
     fftp << " input                clk ;                                                 \n";
	 fftp << " //============================================= \n";
	 fftp << " //twiddle factor fft type data                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM0_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM1_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM2_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM3_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM4_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM5_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM6_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM7_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM0_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM1_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM2_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM3_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM4_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM5_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM6_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM7_wire;                  \n";
	 fftp << "                                                 \n";
	 fftp << " wire 			   BN_TWI_wire;                \n";
	 fftp << " wire [A_WIDTH-1:0]  MA_TWI_wire;                \n";
	 fftp << "                                                 \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix0_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix1_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix2_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix3_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix4_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix5_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix6_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix7_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix8_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix9_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix10_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix11_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix12_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix13_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix14_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix15_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix0_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix1_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix2_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix3_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix4_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix5_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix6_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix7_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix8_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix9_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix10_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix11_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix12_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix13_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix14_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix15_pip_wire;         \n";
	 fftp << "  //r4_inpipeReg wire============================    \n";
	 fftp << "                                                     \n";
	 fftp << "  wire                ExtValid_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D0_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D1_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D2_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D3_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D4_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D5_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D6_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D7_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D8_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D9_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D10_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D11_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D12_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D13_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D14_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D15_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D0_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D1_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D2_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D3_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D4_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D5_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D6_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D7_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D8_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D9_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D10_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D11_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D12_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D13_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D14_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D15_wire  ;              \n";
	 fftp << "                                                     \n";
	 fftp << "  //-----------------------------------              \n";
	 fftp << "  wire  [A_WIDTH-1:0] REMA_wire;                  \n";
	 fftp << "  wire  [IREMA_WIDTH-1:0] IREMA;                  \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D0_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D1_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D2_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D3_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D4_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D5_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D6_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D7_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D0_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D1_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D2_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D3_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D4_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D5_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D6_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D7_pip_wire ;        \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M0_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M1_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M2_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M3_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M4_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M5_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M6_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M7_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M8_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M9_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M10_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M11_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M12_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M13_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M14_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M15_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M0_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M1_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M2_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M3_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M4_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M5_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M6_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M7_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M8_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M9_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M10_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M11_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M12_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M13_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M14_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M15_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M0_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M1_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M2_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M3_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M4_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M5_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M6_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M7_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M8_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M9_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M10_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M11_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M12_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M13_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M14_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M15_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M0_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M1_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M2_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M3_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M4_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M5_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M6_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M7_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M8_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M9_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M10_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M11_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M12_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M13_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M14_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M15_b_o_wire;             \n";  
	 fftp << "                                                  \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M0_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M1_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M2_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M3_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M4_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M5_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M6_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M7_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M8_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M9_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M10_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M11_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M12_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M13_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M14_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M15_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M0_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M1_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M2_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M3_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M4_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M5_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M6_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M7_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M8_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M9_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M10_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M11_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M12_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M13_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M14_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M15_result_wire;          \n";
	 fftp << "                                                  \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S0_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S1_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S2_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S3_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S4_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S5_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S6_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S7_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S8_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S9_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S10_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S11_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S12_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S13_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S14_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S15_wire;                \n";
	 fftp << "                                                  \n";
     //--------------------------------------------------------------------
     // modify at 2021/02/18
	 // ROM bit size : 128 bits
     //--------------------------------------------------------------------
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM0_wire;          \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM1_wire;          \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM2_wire;          \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM3_wire;          \n";
	
	 fftp << "                                                  \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM0_wire;         \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM1_wire;         \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM2_wire;         \n";
	 fftp << "  wire  [P_WIDTH-1:0]   ireorderROM3_wire;         \n";
     //------------------------------------------------------------------------ 

     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM0_wire_reg_in;          \n";
     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM1_wire_reg_in;          \n";
     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM2_wire_reg_in;          \n";
     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM3_wire_reg_in;          \n";
     fftp << "\n";
     fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM0_wire_reg_in;         \n";
     fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM1_wire_reg_in;         \n";
     fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM2_wire_reg_in;         \n";
     fftp << "  wire  [P_WIDTH-1:0]   ireorderROM3_wire_reg_in;         \n";
    
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r0;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r1;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r2;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r3;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r4;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r5;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r6;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r7;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r8;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r9;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r10;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r11;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r12;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r13;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r14;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r15;                \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD0_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD1_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD2_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD3_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD4_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD5_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD6_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD7_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD8_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD9_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD10_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD11_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD12_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD13_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD14_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD15_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR0_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR1_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR2_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR3_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR4_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR5_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR6_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR7_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR8_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR9_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR10_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR11_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR12_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR13_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR14_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR15_pip_wire;      \n";
	 fftp << "                                                  \n";
	 fftp << "  wire                 BND_wire_pipo ;            \n";
	 fftp << "  wire [DC_WIDTH-1:0]  data_cnt_wire_pipo ;       \n";
	 fftp << "                                                  \n";
	 fftp << "  //==============================================\n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out0 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out1 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out2 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out3 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out4 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out5 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out6 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out7 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out8 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out9 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out10 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out11 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out12 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out13 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out14 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out15 ;                                          \n";
     fftp << " wire                 cen_wire ;                                            \n";
     fftp << " wire                 wen0_wire ;                                           \n";
     fftp << " wire                 wen1_wire ;                                           \n";
     fftp << " wire                 SD_sel_wire ;                                         \n";
     fftp << " wire [A_WIDTH-1:0]   ExtMA_wire ;                                          \n";
     fftp << " wire [A_WIDTH-1:0]   AGUMA_wire ;                                          \n";
     fftp << " wire [A_WIDTH-1:0]   MA0_wire ;                                            \n";
     fftp << " wire [A_WIDTH-1:0]   MA1_wire ;                                            \n";
     fftp << " wire                 AGU_en_wire ;                                         \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM0_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM1_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM2_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM3_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM4_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM5_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM6_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM7_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM0_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM1_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM2_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM3_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM4_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM5_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM6_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM7_wire ;                                       \n";
     fftp << " wire                 BN_wire ;                                             \n";
     fftp << " wire [P_WIDTH-1:0]   RA0D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA1D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA2D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA3D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA4D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA5D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA6D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA7D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA8D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA9D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA10D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA11D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA12D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA13D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA14D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA15D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA0D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA1D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA2D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA3D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA4D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA5D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA6D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA7D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA8D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA9D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA10D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA11D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA12D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA13D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA14D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA15D_out_wire ;                                      \n";
     fftp << "                                                                            \n";
     fftp << " wire                 RomCen_wire ;                                         \n";
     fftp << " wire [ROMA_WIDTH-1:0] ROMA_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   ROMD0_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD1_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD2_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD3_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD4_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD5_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD6_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD7_out_wire ;                                      \n";
     fftp << " wire [1:0]           Mul_sel_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   MulB0_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB1_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB2_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB3_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB5_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB6_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB7_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB8_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB9_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB10_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB11_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB12_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB13_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB14_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB15_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod0_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod1_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod2_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod3_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod4_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod5_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod6_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod7_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod8_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod9_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod10_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod11_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod12_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod13_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod14_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod15_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out0_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out1_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out2_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out3_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out4_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out5_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out6_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out7_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out8_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out9_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out10_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out11_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out12_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out13_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out14_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out15_wire ;                                      \n";
     fftp << " wire [3:0]           RDC_sel_wire ;                                        \n";
     fftp << " wire                 BND_wire ;                                            \n";
     fftp << " wire [A_WIDTH-1:0]   WMA_wire ;                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire [DC_WIDTH-1:0]  data_cnt_wire ;                                       \n";
     //fftp << " wire [3:0]           FFT_FSmode_sel_wire ;                                 \n";
     fftp << " wire [1:0]           DC_mode_sel_wire ;                                    \n";
     fftp << "                                                                            \n";
     fftp << " wire                 mode_sel_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   MulA1_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA2_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA3_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA5_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA6_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA7_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA9_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA10_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA11_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA12_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA13_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA14_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA15_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   IFFTROMD0_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD1_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD2_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD3_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD4_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD5_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD6_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD7_out_wire ;                                  \n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire                 rc_sel_wire ; //modify 2020/02/24                     \n";
     fftp << " wire                 m2_sel_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD0_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD1_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD2_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD3_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD5_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD6_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD7_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD8_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD9_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD10_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD11_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD12_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD13_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD14_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD15_wire ;                                         \n";
     fftp << "                                                                            \n";
     fftp << " wire                  mode_sel_D_wire ;                                    \n";
     fftp << " wire [1:0]            Mul_sel_D_wire ;                                     \n";
     fftp << " wire [3:0]            RDC_sel_D_wire ;                                     \n";
     //fftp << " wire [3:0]            FFT_FSmode_sel_D_wire ;                              \n";
     fftp << " wire [1:0]            DC_mode_sel_D_wire ;                                 \n";
     fftp << " wire                  wrfd_en_wire ;                                       \n";
     fftp << "                                                                            \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out0_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out1_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out2_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out3_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out4_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out5_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out6_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out7_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out8_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out9_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out10_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out11_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out12_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out13_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out14_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out15_D_wire ;                                   \n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire [P_WIDTH-1:0]    N_D4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]    ROMD0_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD1_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD2_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD3_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD4_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD5_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD6_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD7_D_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]    IFFTROMD0_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD1_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD2_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD3_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD4_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD5_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD6_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD7_D_wire ;                                   \n";
     fftp << "                                                                            \n";
	 fftp << "     Rectrl u_Rectrl(                        \n";
	 fftp << "             .REMA(REMA_wire),               \n";
	 fftp << "             .ExtValid_in(ExtValid_in),      \n";
	 fftp << "             .rst_n(rst_n),                  \n";
	 fftp << "             .clk(clk)                       \n";
	 fftp << "     );                                      \n";     
	 fftp << "                                                                            \n";
     fftp << " 	//                                                                        \n";
fftp << "     R16_InpipeReg u_r16_inpipreg(                            \n";
fftp << "             .ExtValid_in(ExtValid_in),                     \n";
fftp << "             .ExtB0_D0_in(ExtB0_D0_in),                     \n";
fftp << "             .ExtB0_D1_in(ExtB0_D1_in),                     \n";
fftp << "             .ExtB0_D2_in(ExtB0_D2_in),                     \n";
fftp << "             .ExtB0_D3_in(ExtB0_D3_in),                     \n";
fftp << "             .ExtB0_D4_in(ExtB0_D4_in),                     \n";
fftp << "             .ExtB0_D5_in(ExtB0_D5_in),                     \n";
fftp << "             .ExtB0_D6_in(ExtB0_D6_in),                     \n";
fftp << "             .ExtB0_D7_in(ExtB0_D7_in),                     \n";
fftp << "             .ExtB1_D0_in(ExtB1_D0_in),                     \n";
fftp << "             .ExtB1_D1_in(ExtB1_D1_in),                     \n";
fftp << "             .ExtB1_D2_in(ExtB1_D2_in),                     \n";
fftp << "             .ExtB1_D3_in(ExtB1_D3_in),                     \n";
fftp << "             .ExtB1_D4_in(ExtB1_D4_in),                     \n";
fftp << "             .ExtB1_D5_in(ExtB1_D5_in),                     \n";
fftp << "             .ExtB1_D6_in(ExtB1_D6_in),                     \n";
fftp << "             .ExtB1_D7_in(ExtB1_D7_in),                     \n";
fftp << "             .ExtValid_out(ExtValid_wire),                  \n";
fftp << "             .ExtB0_D0_out(ExtB0_D0_pip_wire),              \n";
fftp << "             .ExtB0_D1_out(ExtB0_D1_pip_wire),              \n";
fftp << "             .ExtB0_D2_out(ExtB0_D2_pip_wire),              \n";
fftp << "             .ExtB0_D3_out(ExtB0_D3_pip_wire),              \n";
fftp << "             .ExtB0_D4_out(ExtB0_D4_pip_wire),              \n";
fftp << "             .ExtB0_D5_out(ExtB0_D5_pip_wire),              \n";
fftp << "             .ExtB0_D6_out(ExtB0_D6_pip_wire),              \n";
fftp << "             .ExtB0_D7_out(ExtB0_D7_pip_wire),              \n";
fftp << "             .ExtB1_D0_out(ExtB1_D0_pip_wire),              \n";
fftp << "             .ExtB1_D1_out(ExtB1_D1_pip_wire),              \n";
fftp << "             .ExtB1_D2_out(ExtB1_D2_pip_wire),              \n";
fftp << "             .ExtB1_D3_out(ExtB1_D3_pip_wire),              \n";
fftp << "             .ExtB1_D4_out(ExtB1_D4_pip_wire),              \n";
fftp << "             .ExtB1_D5_out(ExtB1_D5_pip_wire),              \n";
fftp << "             .ExtB1_D6_out(ExtB1_D6_pip_wire),              \n";
fftp << "             .ExtB1_D7_out(ExtB1_D7_pip_wire),              \n";
fftp << "             .rst_n        (rst_n),                         \n";
fftp << "             .clk          (clk)                            \n";
fftp << "     );                                                     \n";
fftp << "     //----------------------------------------------------    \n";
fftp << "     // Barrett reduction multiplier                           \n";
fftp << "     //input A and input B Mux                                 \n";
fftp << "     Mux5 u_Mux5(                                              \n";
fftp << "                 .B0M0_ain_o(B0M0_a_o_wire),                   \n";
fftp << "                 .B0M1_ain_o(B0M1_a_o_wire),                   \n";
fftp << "                 .B0M2_ain_o(B0M2_a_o_wire),                   \n";
fftp << "                 .B0M3_ain_o(B0M3_a_o_wire),                   \n";
fftp << "                 .B0M4_ain_o(B0M4_a_o_wire),                   \n";
fftp << "                 .B0M5_ain_o(B0M5_a_o_wire),                   \n";
fftp << "                 .B0M6_ain_o(B0M6_a_o_wire),                   \n";
fftp << "                 .B0M7_ain_o(B0M7_a_o_wire),                   \n";
fftp << "                 .B0M8_ain_o(B0M8_a_o_wire),                   \n";
fftp << "                 .B0M9_ain_o(B0M9_a_o_wire),                   \n";
fftp << "                 .B0M10_ain_o(B0M10_a_o_wire),                   \n";
fftp << "                 .B0M11_ain_o(B0M11_a_o_wire),                   \n";
fftp << "                 .B0M12_ain_o(B0M12_a_o_wire),                   \n";
fftp << "                 .B0M13_ain_o(B0M13_a_o_wire),                   \n";
fftp << "                 .B0M14_ain_o(B0M14_a_o_wire),                   \n";
fftp << "                 .B0M15_ain_o(B0M15_a_o_wire),                   \n";
fftp << "                 .B0M0_bin_o(B0M0_b_o_wire),                   \n";
fftp << "                 .B0M1_bin_o(B0M1_b_o_wire),                   \n";
fftp << "                 .B0M2_bin_o(B0M2_b_o_wire),                   \n";
fftp << "                 .B0M3_bin_o(B0M3_b_o_wire),                   \n";
fftp << "                 .B0M4_bin_o(B0M4_b_o_wire),                   \n";
fftp << "                 .B0M5_bin_o(B0M5_b_o_wire),                   \n";
fftp << "                 .B0M6_bin_o(B0M6_b_o_wire),                   \n";
fftp << "                 .B0M7_bin_o(B0M7_b_o_wire),                   \n";
fftp << "                 .B0M8_bin_o(B0M8_b_o_wire),                   \n";
fftp << "                 .B0M9_bin_o(B0M9_b_o_wire),                   \n";
fftp << "                 .B0M10_bin_o(B0M10_b_o_wire),                   \n";
fftp << "                 .B0M11_bin_o(B0M11_b_o_wire),                   \n";
fftp << "                 .B0M12_bin_o(B0M12_b_o_wire),                   \n";
fftp << "                 .B0M13_bin_o(B0M13_b_o_wire),                   \n";
fftp << "                 .B0M14_bin_o(B0M14_b_o_wire),                   \n";
fftp << "                 .B0M15_bin_o(B0M15_b_o_wire),                   \n";
fftp << "                 .ExtB0_D0_pip(ExtB0_D0_pip_wire),                 \n";
fftp << "                 .ExtB0_D1_pip(ExtB0_D1_pip_wire),                 \n";
fftp << "                 .ExtB0_D2_pip(ExtB0_D2_pip_wire),                 \n";
fftp << "                 .ExtB0_D3_pip(ExtB0_D3_pip_wire),                 \n";
fftp << "                 .ExtB0_D4_pip(ExtB0_D4_pip_wire),                 \n";
fftp << "                 .ExtB0_D5_pip(ExtB0_D5_pip_wire),                 \n";
fftp << "                 .ExtB0_D6_pip(ExtB0_D6_pip_wire),                 \n";
fftp << "                 .ExtB0_D7_pip(ExtB0_D7_pip_wire),                 \n";
fftp << "     		      .ExtB1_D0_pip(ExtB1_D0_pip_wire),                  \n";
fftp << "     		      .ExtB1_D1_pip(ExtB1_D1_pip_wire),                  \n";
fftp << "     		      .ExtB1_D2_pip(ExtB1_D2_pip_wire),                  \n";
fftp << "     		      .ExtB1_D3_pip(ExtB1_D3_pip_wire),                  \n";
fftp << "     		      .ExtB1_D4_pip(ExtB1_D4_pip_wire),                  \n";
fftp << "     		      .ExtB1_D5_pip(ExtB1_D5_pip_wire),                  \n";
fftp << "     		      .ExtB1_D6_pip(ExtB1_D6_pip_wire),                  \n";
fftp << "     		      .ExtB1_D7_pip(ExtB1_D7_pip_wire),                  \n";
fftp << "                 .SP_r0(SP_Data_r0),                           \n";
fftp << "                 .SP_r1(SP_Data_r1),                           \n";
fftp << "                 .SP_r2(SP_Data_r2),                           \n";
fftp << "                 .SP_r3(SP_Data_r3),                           \n";
fftp << "                 .SP_r4(SP_Data_r4),                           \n";
fftp << "                 .SP_r5(SP_Data_r5),                           \n";
fftp << "                 .SP_r6(SP_Data_r6),                           \n";
fftp << "                 .SP_r7(SP_Data_r7),                           \n";
fftp << "                 .SP_r8(SP_Data_r8),                           \n";
fftp << "                 .SP_r9(SP_Data_r9),                           \n";
fftp << "                 .SP_r10(SP_Data_r10),                           \n";
fftp << "                 .SP_r11(SP_Data_r11),                           \n";
fftp << "                 .SP_r12(SP_Data_r12),                           \n";
fftp << "                 .SP_r13(SP_Data_r13),                           \n";
fftp << "                 .SP_r14(SP_Data_r14),                           \n";
fftp << "                 .SP_r15(SP_Data_r15),                           \n";
//**********************************************************************************************************
int reorder_b0r0_ROM0_lsb;
int reorder_b0r1_ROM0_msb;
int reorder_b0r1_ROM0_lsb;
int reorder_b0r2_ROM0_msb;
int reorder_b0r2_ROM0_lsb;
int reorder_b0r3_ROM0_msb;
int reorder_b0r3_ROM0_lsb;
int reorder_b0r4_ROM0_msb;
int reorder_b0r4_ROM0_lsb;
// CP_width = 22 , 22*5 = 110 , CP_width = 25 , 25 * 5 = 125
// another part of Radix5 is stored in ROM1
int reorder_b0r5_ROM0_msb;
int reorder_b0r5_ROM1_lsb;
int reorder_b0r6_ROM1_msb;
int reorder_b0r6_ROM1_lsb;
int reorder_b0r7_ROM1_msb;
int reorder_b0r7_ROM1_lsb;

reorder_b0r0_ROM0_lsb = 128 - CP_width;
reorder_b0r1_ROM0_msb = reorder_b0r0_ROM0_lsb - 1;
reorder_b0r1_ROM0_lsb = reorder_b0r0_ROM0_lsb - CP_width;
reorder_b0r2_ROM0_msb = reorder_b0r1_ROM0_lsb - 1;
reorder_b0r2_ROM0_lsb = reorder_b0r1_ROM0_lsb - CP_width;
reorder_b0r3_ROM0_msb = reorder_b0r2_ROM0_lsb - 1;
reorder_b0r3_ROM0_lsb = reorder_b0r2_ROM0_lsb - CP_width;
reorder_b0r4_ROM0_msb = reorder_b0r3_ROM0_lsb - 1;
reorder_b0r4_ROM0_lsb = reorder_b0r3_ROM0_lsb - CP_width;
reorder_b0r5_ROM0_msb = reorder_b0r4_ROM0_lsb - 1;
reorder_b0r5_ROM1_lsb = 128 - ( CP_width - reorder_b0r4_ROM0_lsb);
reorder_b0r6_ROM1_msb = reorder_b0r5_ROM1_lsb - 1;
reorder_b0r6_ROM1_lsb = reorder_b0r5_ROM1_lsb - CP_width;
reorder_b0r7_ROM1_msb = reorder_b0r6_ROM1_lsb - 1;
reorder_b0r7_ROM1_lsb = reorder_b0r6_ROM1_lsb - CP_width;
//**********************************************************************************************************
fftp << "                 .reorderb0r0(reorderROM0_wire[127:"<< reorder_b0r0_ROM0_lsb<<"]),\n";
fftp << "                 .reorderb0r1(reorderROM0_wire[" << reorder_b0r1_ROM0_msb <<":"<<  reorder_b0r1_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r2(reorderROM0_wire[" << reorder_b0r2_ROM0_msb <<":"<<  reorder_b0r2_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r3(reorderROM0_wire[" << reorder_b0r3_ROM0_msb <<":"<<  reorder_b0r3_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r4(reorderROM0_wire[" << reorder_b0r4_ROM0_msb <<":"<<  reorder_b0r4_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r5({reorderROM0_wire["<< reorder_b0r5_ROM0_msb <<":0],reorderROM1_wire[127:"<< reorder_b0r5_ROM1_lsb <<"]}),\n";
fftp << "                 .reorderb0r6(reorderROM1_wire[" << reorder_b0r6_ROM1_msb <<":"<<  reorder_b0r6_ROM1_lsb <<"]),\n";
fftp << "                 .reorderb0r7(reorderROM1_wire[" << reorder_b0r7_ROM1_msb <<":"<<  reorder_b0r7_ROM1_lsb <<"]),\n";
//****************************************
int ireorder_r0_ROM0_lsb;
int ireorder_r1_ROM0_msb;
int ireorder_r1_ROM0_lsb;
int ireorder_r2_ROM0_msb;
int ireorder_r2_ROM0_lsb;
int ireorder_r3_ROM0_msb;
int ireorder_r3_ROM0_lsb;
int ireorder_r4_ROM0_msb;
int ireorder_r4_ROM0_lsb;
//--------------
int ireorder_r5_ROM1_lsb;
int ireorder_r6_ROM1_msb;
int ireorder_r6_ROM1_lsb;
int ireorder_r7_ROM1_msb;
int ireorder_r7_ROM1_lsb;
int ireorder_r8_ROM1_msb;
int ireorder_r8_ROM1_lsb;
int ireorder_r9_ROM1_msb;
int ireorder_r9_ROM1_lsb;
//---------------
int ireorder_r10_ROM2_lsb;
int ireorder_r11_ROM2_msb;
int ireorder_r11_ROM2_lsb;
int ireorder_r12_ROM2_msb;
int ireorder_r12_ROM2_lsb;
int ireorder_r13_ROM2_msb;
int ireorder_r13_ROM2_lsb;
int ireorder_r14_ROM2_msb;
int ireorder_r14_ROM2_lsb;
//----------------
// 64 bits
int ireorder_r15_ROM3_lsb;

// r0 ~ r4
ireorder_r0_ROM0_lsb = 128 - CP_width;
ireorder_r1_ROM0_msb = ireorder_r0_ROM0_lsb - 1;
ireorder_r1_ROM0_lsb = ireorder_r0_ROM0_lsb - CP_width;
ireorder_r2_ROM0_msb = ireorder_r1_ROM0_lsb - 1;
ireorder_r2_ROM0_lsb = ireorder_r1_ROM0_lsb - CP_width;
ireorder_r3_ROM0_msb = ireorder_r2_ROM0_lsb - 1;
ireorder_r3_ROM0_lsb = ireorder_r2_ROM0_lsb - CP_width;
ireorder_r4_ROM0_msb = ireorder_r3_ROM0_lsb - 1;
ireorder_r4_ROM0_lsb = ireorder_r3_ROM0_lsb - CP_width;
// r5 ~ r9
ireorder_r5_ROM1_lsb = 128 - CP_width;
ireorder_r6_ROM1_msb = ireorder_r5_ROM1_lsb - 1;
ireorder_r6_ROM1_lsb = ireorder_r5_ROM1_lsb - CP_width;
ireorder_r7_ROM1_msb = ireorder_r6_ROM1_lsb - 1;
ireorder_r7_ROM1_lsb = ireorder_r6_ROM1_lsb - CP_width;
ireorder_r8_ROM1_msb = ireorder_r7_ROM1_lsb - 1;
ireorder_r8_ROM1_lsb = ireorder_r7_ROM1_lsb - CP_width;
ireorder_r9_ROM1_msb = ireorder_r8_ROM1_lsb - 1;
ireorder_r9_ROM1_lsb = ireorder_r8_ROM1_lsb - CP_width;
// r10 ~ r14
ireorder_r10_ROM2_lsb = 128 - CP_width;
ireorder_r11_ROM2_msb = ireorder_r10_ROM2_lsb - 1;
ireorder_r11_ROM2_lsb = ireorder_r10_ROM2_lsb - CP_width;
ireorder_r12_ROM2_msb = ireorder_r11_ROM2_lsb - 1;
ireorder_r12_ROM2_lsb = ireorder_r11_ROM2_lsb - CP_width;
ireorder_r13_ROM2_msb = ireorder_r12_ROM2_lsb - 1;
ireorder_r13_ROM2_lsb = ireorder_r12_ROM2_lsb - CP_width;
ireorder_r14_ROM2_msb = ireorder_r13_ROM2_lsb - 1;
ireorder_r14_ROM2_lsb = ireorder_r13_ROM2_lsb - CP_width;
// r15
ireorder_r15_ROM3_lsb = 64 - CP_width;

fftp << "                 .ireorderr0(ireorderROM0_wire[127:"<< ireorder_r0_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr1(ireorderROM0_wire["<< ireorder_r1_ROM0_msb <<":"<< ireorder_r1_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr2(ireorderROM0_wire["<< ireorder_r2_ROM0_msb <<":"<< ireorder_r2_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr3(ireorderROM0_wire["<< ireorder_r3_ROM0_msb <<":"<< ireorder_r3_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr4(ireorderROM0_wire["<< ireorder_r4_ROM0_msb <<":"<< ireorder_r4_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr5(ireorderROM1_wire[127:"<< ireorder_r5_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr6(ireorderROM1_wire["<< ireorder_r6_ROM1_msb <<":"<< ireorder_r6_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr7(ireorderROM1_wire["<< ireorder_r7_ROM1_msb <<":"<< ireorder_r7_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr8(ireorderROM1_wire["<< ireorder_r8_ROM1_msb <<":"<< ireorder_r8_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr9(ireorderROM1_wire["<< ireorder_r9_ROM1_msb <<":"<< ireorder_r9_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr10(ireorderROM2_wire[127:"<< ireorder_r10_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr11(ireorderROM2_wire["<< ireorder_r11_ROM2_msb <<":"<< ireorder_r11_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr12(ireorderROM2_wire["<< ireorder_r12_ROM2_msb <<":"<< ireorder_r12_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr13(ireorderROM2_wire["<< ireorder_r13_ROM2_msb <<":"<< ireorder_r13_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr14(ireorderROM2_wire["<< ireorder_r14_ROM2_msb <<":"<< ireorder_r14_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr15(ireorderROM3_wire[63:"<< ireorder_r15_ROM3_lsb <<"]),\n";
//---------------------------------------------------------------------------
fftp << "     		.B1M0_ain_o(B1M0_a_o_wire),                        \n";
fftp << "     		.B1M1_ain_o(B1M1_a_o_wire),                        \n";
fftp << "     		.B1M2_ain_o(B1M2_a_o_wire),                        \n";
fftp << "     		.B1M3_ain_o(B1M3_a_o_wire),                        \n";
fftp << "     		.B1M4_ain_o(B1M4_a_o_wire),                        \n";
fftp << "     		.B1M5_ain_o(B1M5_a_o_wire),                        \n";
fftp << "     		.B1M6_ain_o(B1M6_a_o_wire),                        \n";
fftp << "     		.B1M7_ain_o(B1M7_a_o_wire),                        \n";
fftp << "     		.B1M8_ain_o(B1M8_a_o_wire),                        \n";
fftp << "     		.B1M9_ain_o(B1M9_a_o_wire),                        \n";
fftp << "     		.B1M10_ain_o(B1M10_a_o_wire),                        \n";
fftp << "     		.B1M11_ain_o(B1M11_a_o_wire),                        \n";
fftp << "     		.B1M12_ain_o(B1M12_a_o_wire),                        \n";
fftp << "     		.B1M13_ain_o(B1M13_a_o_wire),                        \n";
fftp << "     		.B1M14_ain_o(B1M14_a_o_wire),                        \n";
fftp << "     		.B1M15_ain_o(B1M15_a_o_wire),                        \n";
fftp << "     		.B1M0_bin_o(B1M0_b_o_wire),                        \n";
fftp << "     		.B1M1_bin_o(B1M1_b_o_wire),                        \n";
fftp << "     		.B1M2_bin_o(B1M2_b_o_wire),                        \n";
fftp << "     		.B1M3_bin_o(B1M3_b_o_wire),                        \n";
fftp << "     		.B1M4_bin_o(B1M4_b_o_wire),                        \n";
fftp << "     		.B1M5_bin_o(B1M5_b_o_wire),                        \n";
fftp << "     		.B1M6_bin_o(B1M6_b_o_wire),                        \n";
fftp << "     		.B1M7_bin_o(B1M7_b_o_wire),                        \n";
fftp << "     		.B1M8_bin_o(B1M8_b_o_wire),                        \n";
fftp << "     		.B1M9_bin_o(B1M9_b_o_wire),                        \n";
fftp << "     		.B1M10_bin_o(B1M10_b_o_wire),                        \n";
fftp << "     		.B1M11_bin_o(B1M11_b_o_wire),                        \n";
fftp << "     		.B1M12_bin_o(B1M12_b_o_wire),                        \n";
fftp << "     		.B1M13_bin_o(B1M13_b_o_wire),                        \n";
fftp << "     		.B1M14_bin_o(B1M14_b_o_wire),                        \n";
fftp << "     		.B1M15_bin_o(B1M15_b_o_wire),                        \n";
fftp << "     		.CRUD0(CRUD0_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD1(CRUD1_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD2(CRUD2_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD3(CRUD3_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD4(CRUD4_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD5(CRUD5_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD6(CRUD6_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD7(CRUD7_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD8(CRUD8_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD9(CRUD9_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD10(CRUD10_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD11(CRUD11_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD12(CRUD12_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD13(CRUD13_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD14(CRUD14_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD15(CRUD15_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
//*******************************************
int reorder_b1r0_ROM2_lsb;
int reorder_b1r1_ROM2_msb;
int reorder_b1r1_ROM2_lsb;
int reorder_b1r2_ROM2_msb;
int reorder_b1r2_ROM2_lsb;
int reorder_b1r3_ROM2_msb;
int reorder_b1r3_ROM2_lsb;
int reorder_b1r4_ROM2_msb;
int reorder_b1r4_ROM2_lsb;
// CP_width = 22 , 22*5 = 110 , CP_width = 25 , 25 * 5 = 125
// another part of Radix5 is stored in ROM1
int reorder_b1r5_ROM2_msb;
int reorder_b1r5_ROM3_lsb;
int reorder_b1r6_ROM3_msb;
int reorder_b1r6_ROM3_lsb;
int reorder_b1r7_ROM3_msb;
int reorder_b1r7_ROM3_lsb;

reorder_b1r0_ROM2_lsb = 128 - CP_width;
reorder_b1r1_ROM2_msb = reorder_b1r0_ROM2_lsb - 1;
reorder_b1r1_ROM2_lsb = reorder_b1r0_ROM2_lsb - CP_width;
reorder_b1r2_ROM2_msb = reorder_b1r1_ROM2_lsb - 1;
reorder_b1r2_ROM2_lsb = reorder_b1r1_ROM2_lsb - CP_width;
reorder_b1r3_ROM2_msb = reorder_b1r2_ROM2_lsb - 1;
reorder_b1r3_ROM2_lsb = reorder_b1r2_ROM2_lsb - CP_width;
reorder_b1r4_ROM2_msb = reorder_b1r3_ROM2_lsb - 1;
reorder_b1r4_ROM2_lsb = reorder_b1r3_ROM2_lsb - CP_width;
reorder_b1r5_ROM2_msb = reorder_b1r4_ROM2_lsb - 1;
reorder_b1r5_ROM3_lsb = 128 - ( CP_width - reorder_b1r4_ROM2_lsb);
reorder_b1r6_ROM3_msb = reorder_b1r5_ROM3_lsb - 1;
reorder_b1r6_ROM3_lsb = reorder_b1r5_ROM3_lsb - CP_width;
reorder_b1r7_ROM3_msb = reorder_b1r6_ROM3_lsb - 1;
reorder_b1r7_ROM3_lsb = reorder_b1r6_ROM3_lsb - CP_width;
//*******************************************
fftp << "                 .reorderb1r0(reorderROM2_wire[127:"<< reorder_b1r0_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r1(reorderROM2_wire[" << reorder_b1r1_ROM2_msb <<":"<<  reorder_b1r1_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r2(reorderROM2_wire[" << reorder_b1r2_ROM2_msb <<":"<<  reorder_b1r2_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r3(reorderROM2_wire[" << reorder_b1r3_ROM2_msb <<":"<<  reorder_b1r3_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r4(reorderROM2_wire[" << reorder_b1r4_ROM2_msb <<":"<<  reorder_b1r4_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r5({reorderROM2_wire[" << reorder_b1r5_ROM2_msb <<":0],reorderROM3_wire[127:"<<  reorder_b1r5_ROM3_lsb <<"]}),\n";  
fftp << "                 .reorderb1r6(reorderROM3_wire[" << reorder_b1r6_ROM3_msb <<":"<<  reorder_b1r6_ROM3_lsb <<"]),\n";
fftp << "                 .reorderb1r7(reorderROM3_wire[" << reorder_b1r7_ROM3_msb <<":"<<  reorder_b1r7_ROM3_lsb <<"]),\n";
fftp << "                 .re_sel(SD_sel_wire)                          \n";
//*******************************
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     Mux6 u_Mux6(                                              \n";
fftp << "             .ExtB0_D0(ExtB0_D0_wire),                         \n";
fftp << "             .ExtB0_D1(ExtB0_D1_wire),                         \n";
fftp << "             .ExtB0_D2(ExtB0_D2_wire),                         \n";
fftp << "             .ExtB0_D3(ExtB0_D3_wire),                         \n";
fftp << "             .ExtB0_D4(ExtB0_D4_wire),                         \n";
fftp << "             .ExtB0_D5(ExtB0_D5_wire),                         \n";
fftp << "             .ExtB0_D6(ExtB0_D6_wire),                         \n";
fftp << "             .ExtB0_D7(ExtB0_D7_wire),                         \n";
fftp << "             .ExtB0_D8(ExtB0_D8_wire),                         \n";
fftp << "             .ExtB0_D9(ExtB0_D9_wire),                         \n";
fftp << "             .ExtB0_D10(ExtB0_D10_wire),                         \n";
fftp << "             .ExtB0_D11(ExtB0_D11_wire),                         \n";
fftp << "             .ExtB0_D12(ExtB0_D12_wire),                         \n";
fftp << "             .ExtB0_D13(ExtB0_D13_wire),                         \n";
fftp << "             .ExtB0_D14(ExtB0_D14_wire),                         \n";
fftp << "             .ExtB0_D15(ExtB0_D15_wire),                         \n";
fftp << "             .MulD0_out(MulD0_out),                            \n";
fftp << "             .MulD1_out(MulD1_out),                            \n";
fftp << "             .MulD2_out(MulD2_out),                            \n";
fftp << "             .MulD3_out(MulD3_out),                            \n";
fftp << "             .MulD4_out(MulD4_out),                            \n";
fftp << "             .MulD5_out(MulD5_out),                            \n";
fftp << "             .MulD6_out(MulD6_out),                            \n";
fftp << "             .MulD7_out(MulD7_out),                            \n";
fftp << "             .MulD8_out(MulD8_out),                            \n";
fftp << "             .MulD9_out(MulD9_out),                            \n";
fftp << "             .MulD10_out(MulD10_out),                            \n";
fftp << "             .MulD11_out(MulD11_out),                            \n";
fftp << "             .MulD12_out(MulD12_out),                            \n";
fftp << "             .MulD13_out(MulD13_out),                            \n";
fftp << "             .MulD14_out(MulD14_out),                            \n";
fftp << "             .MulD15_out(MulD15_out),                            \n";
fftp << "             .B0M0_result(B0M0_result_wire),                   \n";
fftp << "             .B0M1_result(B0M1_result_wire),                   \n";
fftp << "             .B0M2_result(B0M2_result_wire),                   \n";
fftp << "             .B0M3_result(B0M3_result_wire),                   \n";
fftp << "             .B0M4_result(B0M4_result_wire),                   \n";
fftp << "             .B0M5_result(B0M5_result_wire),                   \n";
fftp << "             .B0M6_result(B0M6_result_wire),                   \n";
fftp << "             .B0M7_result(B0M7_result_wire),                   \n";
fftp << "             .B0M8_result(B0M8_result_wire),                   \n";
fftp << "             .B0M9_result(B0M9_result_wire),                   \n";
fftp << "             .B0M10_result(B0M10_result_wire),                   \n";
fftp << "             .B0M11_result(B0M11_result_wire),                   \n";
fftp << "             .B0M12_result(B0M12_result_wire),                   \n";
fftp << "             .B0M13_result(B0M13_result_wire),                   \n";
fftp << "             .B0M14_result(B0M14_result_wire),                   \n";
fftp << "             .B0M15_result(B0M15_result_wire),                   \n";
fftp << "             .ExtB1_D0(ExtB1_D0_wire),                         \n";
fftp << "             .ExtB1_D1(ExtB1_D1_wire),                         \n";
fftp << "             .ExtB1_D2(ExtB1_D2_wire),                         \n";
fftp << "             .ExtB1_D3(ExtB1_D3_wire),                         \n";
fftp << "             .ExtB1_D4(ExtB1_D4_wire),                         \n";
fftp << "             .ExtB1_D5(ExtB1_D5_wire),                         \n";
fftp << "             .ExtB1_D6(ExtB1_D6_wire),                         \n";
fftp << "             .ExtB1_D7(ExtB1_D7_wire),                         \n";
fftp << "             .ExtB1_D8(ExtB1_D8_wire),                         \n";
fftp << "             .ExtB1_D9(ExtB1_D9_wire),                         \n";
fftp << "             .ExtB1_D10(ExtB1_D10_wire),                         \n";
fftp << "             .ExtB1_D11(ExtB1_D11_wire),                         \n";
fftp << "             .ExtB1_D12(ExtB1_D12_wire),                         \n";
fftp << "             .ExtB1_D13(ExtB1_D13_wire),                         \n";
fftp << "             .ExtB1_D14(ExtB1_D14_wire),                         \n";
fftp << "             .ExtB1_D15(ExtB1_D15_wire),                         \n";
fftp << "             .BR_S0(BR_S0_wire),                               \n";
fftp << "             .BR_S1(BR_S1_wire),                               \n";
fftp << "             .BR_S2(BR_S2_wire),                               \n";
fftp << "             .BR_S3(BR_S3_wire),                               \n";
fftp << "             .BR_S4(BR_S4_wire),                               \n";
fftp << "             .BR_S5(BR_S5_wire),                               \n";
fftp << "             .BR_S6(BR_S6_wire),                               \n";
fftp << "             .BR_S7(BR_S7_wire),                               \n";
fftp << "             .BR_S8(BR_S8_wire),                               \n";
fftp << "             .BR_S9(BR_S9_wire),                               \n";
fftp << "             .BR_S10(BR_S10_wire),                               \n";
fftp << "             .BR_S11(BR_S11_wire),                               \n";
fftp << "             .BR_S12(BR_S12_wire),                               \n";
fftp << "             .BR_S13(BR_S13_wire),                               \n";
fftp << "             .BR_S14(BR_S14_wire),                               \n";
fftp << "             .BR_S15(BR_S15_wire),                               \n";
fftp << "             .B1M0_result(B1M0_result_wire),                   \n";
fftp << "             .B1M1_result(B1M1_result_wire),                   \n";
fftp << "             .B1M2_result(B1M2_result_wire),                   \n";
fftp << "             .B1M3_result(B1M3_result_wire),                   \n";
fftp << "             .B1M4_result(B1M4_result_wire),                   \n";
fftp << "             .B1M5_result(B1M5_result_wire),                   \n";
fftp << "             .B1M6_result(B1M6_result_wire),                   \n";
fftp << "             .B1M7_result(B1M7_result_wire),                   \n";
fftp << "             .B1M8_result(B1M8_result_wire),                   \n";
fftp << "             .B1M9_result(B1M9_result_wire),                   \n";
fftp << "             .B1M10_result(B1M10_result_wire),                   \n";
fftp << "             .B1M11_result(B1M11_result_wire),                   \n";
fftp << "             .B1M12_result(B1M12_result_wire),                   \n";
fftp << "             .B1M13_result(B1M13_result_wire),                   \n";
fftp << "             .B1M14_result(B1M14_result_wire),                   \n";
fftp << "             .B1M15_result(B1M15_result_wire),                   \n";
fftp << "             .m2_sel(m2_sel_wire)                              \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     R16_BU_outpipe u_R16_BU_outpipe(                                  \n"; 
fftp << "     		.CRUD0_o(CRUD0_pip_wire),                          \n";
fftp << "     		.CRUD1_o(CRUD1_pip_wire),                          \n";
fftp << "     		.CRUD2_o(CRUD2_pip_wire),                          \n";
fftp << "     		.CRUD3_o(CRUD3_pip_wire),                          \n";
fftp << "     		.CRUD4_o(CRUD4_pip_wire),                          \n";
fftp << "     		.CRUD5_o(CRUD5_pip_wire),                          \n";
fftp << "     		.CRUD6_o(CRUD6_pip_wire),                          \n";
fftp << "     		.CRUD7_o(CRUD7_pip_wire),                          \n";
fftp << "     		.CRUD8_o(CRUD8_pip_wire),                          \n";
fftp << "     		.CRUD9_o(CRUD9_pip_wire),                          \n";
fftp << "     		.CRUD10_o(CRUD10_pip_wire),                          \n";
fftp << "     		.CRUD11_o(CRUD11_pip_wire),                          \n";
fftp << "     		.CRUD12_o(CRUD12_pip_wire),                          \n";
fftp << "     		.CRUD13_o(CRUD13_pip_wire),                          \n";
fftp << "     		.CRUD14_o(CRUD14_pip_wire),                          \n";
fftp << "     		.CRUD15_o(CRUD15_pip_wire),                          \n";
fftp << "     		.BR0_o(BR0_pip_wire),                          \n";
fftp << "     		.BR1_o(BR1_pip_wire),                          \n";
fftp << "     		.BR2_o(BR2_pip_wire),                          \n";
fftp << "     		.BR3_o(BR3_pip_wire),                          \n";
fftp << "     		.BR4_o(BR4_pip_wire),                          \n";
fftp << "     		.BR5_o(BR5_pip_wire),                          \n";
fftp << "     		.BR6_o(BR6_pip_wire),                          \n";
fftp << "     		.BR7_o(BR7_pip_wire),                          \n";
fftp << "     		.BR8_o(BR8_pip_wire),                          \n";
fftp << "     		.BR9_o(BR9_pip_wire),                          \n";
fftp << "     		.BR10_o(BR10_pip_wire),                          \n";
fftp << "     		.BR11_o(BR11_pip_wire),                          \n";
fftp << "     		.BR12_o(BR12_pip_wire),                          \n";
fftp << "     		.BR13_o(BR13_pip_wire),                          \n";
fftp << "     		.BR14_o(BR14_pip_wire),                          \n";
fftp << "     		.BR15_o(BR15_pip_wire),                          \n";
fftp << "     		.CRUD0_i(CRUD0_wire),                \n";
fftp << "     		.CRUD1_i(CRUD1_wire),                \n";
fftp << "     		.CRUD2_i(CRUD2_wire),                \n";
fftp << "     		.CRUD3_i(CRUD3_wire),                \n";
fftp << "     		.CRUD4_i(CRUD4_wire),                \n";
fftp << "     		.CRUD5_i(CRUD5_wire),                \n";
fftp << "     		.CRUD6_i(CRUD6_wire),                \n";
fftp << "     		.CRUD7_i(CRUD7_wire),                \n";
fftp << "     		.CRUD8_i(CRUD8_wire),                \n";
fftp << "     		.CRUD9_i(CRUD9_wire),                \n";
fftp << "     		.CRUD10_i(CRUD10_wire),                \n";
fftp << "     		.CRUD11_i(CRUD11_wire),                \n";
fftp << "     		.CRUD12_i(CRUD12_wire),                \n";
fftp << "     		.CRUD13_i(CRUD13_wire),                \n";
fftp << "     		.CRUD14_i(CRUD14_wire),                \n";
fftp << "     		.CRUD15_i(CRUD15_wire),                \n";
fftp << "           .rst_n(rst_n),                                      \n";
fftp << "     		.clk(clk)                                          \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";                                             
fftp << "                                                               \n";
fftp << "     MulMod B0M0(                                              \n";
fftp << "             .A_in(B0M0_a_o_wire), //need to modify            \n";
fftp << "             .B_in(B0M0_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M0_result_wire)  //need to modify 4/19  \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M1(                                             \n";
fftp << "             .A_in(B0M1_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M1_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M1_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M2(                                             \n";
fftp << "             .A_in(B0M2_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M2_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M2_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M3(                                             \n";
fftp << "             .A_in(B0M3_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M3_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M3_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B0M4(                                             \n";
fftp << "             .A_in(B0M4_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M4_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M4_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M5(                                             \n";
fftp << "             .A_in(B0M5_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M5_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M5_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M6(                                             \n";
fftp << "             .A_in(B0M6_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M6_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M6_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M7(                                             \n";
fftp << "             .A_in(B0M7_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M7_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M7_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M8(                                             \n";
fftp << "             .A_in(B0M8_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M8_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M8_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M9(                                             \n";
fftp << "             .A_in(B0M9_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M9_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M9_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M10(                                             \n";
fftp << "             .A_in(B0M10_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M10_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M10_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M11(                                             \n";
fftp << "             .A_in(B0M11_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M11_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M11_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M12(                                             \n";
fftp << "             .A_in(B0M12_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M12_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M12_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M13(                                             \n";
fftp << "             .A_in(B0M13_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M13_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M13_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M14(                                             \n";
fftp << "             .A_in(B0M14_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M14_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M14_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M15(                                             \n";
fftp << "             .A_in(B0M15_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M15_b_o_wire),                       \n";
fftp << "             .bypass(1'b0),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M15_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     MulMod B1M0(                                              \n";
fftp << "             .A_in(B1M0_a_o_wire),                         \n";
fftp << "             .B_in(B1M0_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M0_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B1M1(                                             \n";
fftp << "             .A_in(B1M1_a_o_wire),                         \n";
fftp << "             .B_in(B1M1_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M1_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B1M2(                                             \n";
fftp << "             .A_in(B1M2_a_o_wire),                         \n";
fftp << "             .B_in(B1M2_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M2_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B1M3(                                             \n";
fftp << "             .A_in(B1M3_a_o_wire),                         \n";
fftp << "             .B_in(B1M3_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M3_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M4(                                             \n";
fftp << "             .A_in(B1M4_a_o_wire),                         \n";
fftp << "             .B_in(B1M4_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M4_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M5(                                             \n";
fftp << "             .A_in(B1M5_a_o_wire),                         \n";
fftp << "             .B_in(B1M5_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M5_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M6(                                             \n";
fftp << "             .A_in(B1M6_a_o_wire),                         \n";
fftp << "             .B_in(B1M6_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M6_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M7(                                             \n";
fftp << "             .A_in(B1M7_a_o_wire),                         \n";
fftp << "             .B_in(B1M7_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M7_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M8(                                             \n";
fftp << "             .A_in(B1M8_a_o_wire),                         \n";
fftp << "             .B_in(B1M8_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M8_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M9(                                             \n";
fftp << "             .A_in(B1M9_a_o_wire),                         \n";
fftp << "             .B_in(B1M9_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M9_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M10(                                             \n";
fftp << "             .A_in(B1M10_a_o_wire),                         \n";
fftp << "             .B_in(B1M10_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M10_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M11(                                             \n";
fftp << "             .A_in(B1M11_a_o_wire),                         \n";
fftp << "             .B_in(B1M11_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M11_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M12(                                             \n";
fftp << "             .A_in(B1M12_a_o_wire),                         \n";
fftp << "             .B_in(B1M12_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M12_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M13(                                             \n";
fftp << "             .A_in(B1M13_a_o_wire),                         \n";
fftp << "             .B_in(B1M13_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M13_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M14(                                             \n";
fftp << "             .A_in(B1M14_a_o_wire),                         \n";
fftp << "             .B_in(B1M14_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M14_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M15(                                             \n";
fftp << "             .A_in(B1M15_a_o_wire),                         \n";
fftp << "             .B_in(B1M15_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M15_result_wire)                            \n";
fftp << "     );                                                        \n";

int BR_bit_size;
int double_cp_width;
int padding_zero_number;

BR_bit_size = 64 - 2 * CP_width;
double_cp_width =  2 * CP_width;
padding_zero_number = double_cp_width - BR_bit_size - CP_width;


fftp << "     BR u_BR0(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S0_wire,BR0_pip_wire}),           \n";
fftp << "             .result(SP_Data_r0),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR1(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S1_wire,BR1_pip_wire}),           \n";
fftp << "             .result(SP_Data_r1),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR2(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S2_wire,BR2_pip_wire}),           \n";
fftp << "             .result(SP_Data_r2),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR3(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S3_wire,BR3_pip_wire}),           \n";
fftp << "             .result(SP_Data_r3),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "     BR u_BR4(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S4_wire,BR4_pip_wire}),           \n";
fftp << "             .result(SP_Data_r4),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR5(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S5_wire,BR5_pip_wire}),           \n";
fftp << "             .result(SP_Data_r5),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR6(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S6_wire,BR6_pip_wire}),           \n";
fftp << "             .result(SP_Data_r6),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR7(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S7_wire,BR7_pip_wire}),           \n";
fftp << "             .result(SP_Data_r7),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR8(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S8_wire,BR8_pip_wire}),           \n";
fftp << "             .result(SP_Data_r8),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR9(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S9_wire,BR9_pip_wire}),           \n";
fftp << "             .result(SP_Data_r9),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR10(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S10_wire,BR10_pip_wire}),           \n";
fftp << "             .result(SP_Data_r10),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR11(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S11_wire,BR11_pip_wire}),           \n";
fftp << "             .result(SP_Data_r11),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR12(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S12_wire,BR12_pip_wire}),           \n";
fftp << "             .result(SP_Data_r12),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR13(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S13_wire,BR13_pip_wire}),           \n";
fftp << "             .result(SP_Data_r13),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR14(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S14_wire,BR14_pip_wire}),           \n";
fftp << "             .result(SP_Data_r14),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR15(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S15_wire,BR15_pip_wire}),           \n";
fftp << "             .result(SP_Data_r15),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     //----------------------------------------------------    \n";
     fftp << " 	CenCtrl u_CenCtrl(.MulValid_out(MulValid_out),                            \n";
     fftp << " 			          .cen_out(cen_wire),                                     \n";
     fftp << " 			          .wen0_out(wen0_wire),                                   \n";
     fftp << " 			          .wen1_out(wen1_wire),                                   \n";
     fftp << " 			          .SD_sel_out(SD_sel_wire),                               \n";
     fftp << " 			          .ExtMA_out(ExtMA_wire),                                 \n";
     fftp << " 					  .AGU_en_out(AGU_en_wire),                               \n";
     fftp << " 					  .RomCen_out(RomCen_wire),                               \n";
     fftp << " 					  .mode_sel_out(mode_sel_wire),                           \n";
     fftp << " 					  .rc_sel_out(rc_sel_wire),                               \n";
     fftp << " 					  .m2_sel_out(m2_sel_wire),  //modify 2020/02/24          \n";
     fftp << " 					  .wrfd_en_out(wrfd_en_wire),                             \n";
     fftp << " 					  .data_cnt_in(data_cnt_wire),                            \n";
     fftp << " 					  .BND_in(BND_wire),                                      \n";
     fftp << " 			          .ExtValid_in(ExtValid_wire),                              \n";
     fftp << "                    .rst_n(rst_n),                                          \n";
     fftp << "                    .clk(clk)                                               \n";
     fftp << "                    ) ;                                                     \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	R16_AGU u_R16_AGU(.BN_out(BN_wire),                                       \n";
     fftp << " 			          .MA(AGUMA_wire),                                        \n";
     fftp << " 					  .ROMA(ROMA_wire),                                       \n";
     fftp << " 					  .Mul_sel_out(Mul_sel_wire),                             \n";
     fftp << " 					  .RDC_sel_out(RDC_sel_wire),                             \n";
     fftp << " 					  .data_cnt_reg(data_cnt_wire),                           \n";
     //fftp << " 					  .FFT_FSmode_sel(FFT_FSmode_sel_wire),                   \n";
     fftp << " 					  .DC_mode_sel_out(DC_mode_sel_wire),                   \n";
     fftp << " 					  .mode_sel_in(mode_sel_wire),                            \n";
     fftp << " 					  .rc_sel_in(rc_sel_wire),                                \n";
     fftp << " 			          .AGU_en(AGU_en_wire),                                   \n";
     fftp << " 					  .wrfd_en_in(wrfd_en_wire),                              \n";
     fftp << "                    .rst_n(rst_n),                                          \n";
     fftp << "                    .clk(clk)                                               \n";
     fftp << "                    ) ;                                                     \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//Control Signal Pipeline Register                                        \n";
     fftp << " 	Ctrl_PipeReg1 u_Ctrl_PipeReg1(.mode_sel_Dout(mode_sel_D_wire),            \n";
     fftp << " 				                  .Mul_sel_Dout(Mul_sel_D_wire),              \n";
     fftp << " 				                  .RDC_sel_Dout(RDC_sel_D_wire),              \n";
     //fftp << " 				                  .FFT_FSmode_sel_Dout(FFT_FSmode_sel_D_wire),\n";
     fftp << " 				                  .DC_mode_sel_Dout(DC_mode_sel_D_wire),\n";
     fftp << "                                .mode_sel_in(mode_sel_wire),                \n";
     fftp << " 			                      .Mul_sel_in(Mul_sel_wire),                  \n";
     fftp << " 			                      .RDC_sel_in(RDC_sel_wire),                  \n";
     //fftp << " 			                      .FFT_FSmode_sel_in(FFT_FSmode_sel_wire),    \n";
     fftp << " 			                      .DC_mode_sel_in(DC_mode_sel_wire),    \n";
     fftp << "                                .rst_n(rst_n),                              \n";
     fftp << "                                .clk(clk)                                   \n";
     fftp << "                                ) ;                                         \n";
     fftp << " 	R16_WAddr u_R16_WAddr(.BND_out(BND_wire),                                 \n";
	 fftp << " 			              .WMA_out(WMA_wire),                                 \n";
	 fftp << "                        .BN_in(BN_wire),                                 \n";
	 fftp << " 		                  .MA_in(AGUMA_wire),                                 \n";
	 fftp << "                        .rst_n(rst_n),                                   \n";
	 fftp << "                        .clk(clk)                                        \n";
	 fftp << "                        ) ;                                              \n";
	 fftp << " 	                                                                          \n";
     fftp << "    //-----------------------------------------------------\n";
	 fftp << "	                                                       \n";
	 fftp << "    TWIMux u_TWIMux(                                       \n";
	 fftp << "				    .TWIradix0(TWIradix0_wire),            \n";
	 fftp << "					.TWIradix1(TWIradix1_wire),            \n";
	 fftp << "					.TWIradix2(TWIradix2_wire),            \n";
	 fftp << "					.TWIradix3(TWIradix3_wire),            \n";
	 fftp << "					.TWIradix4(TWIradix4_wire),            \n";
	 fftp << "					.TWIradix5(TWIradix5_wire),            \n";
	 fftp << "					.TWIradix6(TWIradix6_wire),            \n";
	 fftp << "					.TWIradix7(TWIradix7_wire),            \n";
	 fftp << "					.TWIradix8(TWIradix8_wire),            \n";
	 fftp << "					.TWIradix9(TWIradix9_wire),            \n";
	 fftp << "					.TWIradix10(TWIradix10_wire),            \n";
	 fftp << "					.TWIradix11(TWIradix11_wire),            \n";
	 fftp << "					.TWIradix12(TWIradix12_wire),            \n";
	 fftp << "					.TWIradix13(TWIradix13_wire),            \n";
	 fftp << "					.TWIradix14(TWIradix14_wire),            \n";
	 fftp << "					.TWIradix15(TWIradix15_wire),            \n";
	 fftp << "					.b0radix0(H_b0ROM0_wire[127:64]),                  \n";
	 fftp << "					.b0radix1(H_b0ROM0_wire[63:0]),                  \n";
	 fftp << "					.b0radix2(H_b0ROM1_wire[127:64]),                  \n";
	 fftp << "					.b0radix3(H_b0ROM1_wire[63:0]),                  \n";
	 fftp << "					.b0radix4(H_b0ROM2_wire[127:64]),                  \n";
	 fftp << "					.b0radix5(H_b0ROM2_wire[63:0]),                  \n";
	 fftp << "					.b0radix6(H_b0ROM3_wire[127:64]),                  \n";
	 fftp << "					.b0radix7(H_b0ROM3_wire[63:0]),                  \n";
	 fftp << "					.b0radix8(H_b0ROM4_wire[127:64]),                  \n";
	 fftp << "					.b0radix9(H_b0ROM4_wire[63:0]),                  \n";
	 fftp << "					.b0radix10(H_b0ROM5_wire[127:64]),                  \n";
	 fftp << "					.b0radix11(H_b0ROM5_wire[63:0]),                  \n";
	 fftp << "					.b0radix12(H_b0ROM6_wire[127:64]),                  \n";
	 fftp << "					.b0radix13(H_b0ROM6_wire[63:0]),                  \n";
	 fftp << "					.b0radix14(H_b0ROM7_wire[127:64]),                  \n";
	 fftp << "					.b0radix15(H_b0ROM7_wire[63:0]),                  \n";
	 fftp << "					.b1radix0(H_b1ROM0_wire[127:64]),                  \n";
	 fftp << "					.b1radix1(H_b1ROM0_wire[63:0]),                  \n";
	 fftp << "					.b1radix2(H_b1ROM1_wire[127:64]),                  \n";
	 fftp << "					.b1radix3(H_b1ROM1_wire[63:0]),                  \n";
	 fftp << "					.b1radix4(H_b1ROM2_wire[127:64]),                  \n";
	 fftp << "					.b1radix5(H_b1ROM2_wire[63:0]),                  \n";
	 fftp << "					.b1radix6(H_b1ROM3_wire[127:64]),                  \n";
	 fftp << "					.b1radix7(H_b1ROM3_wire[63:0]),                  \n";
	 fftp << "					.b1radix8(H_b1ROM4_wire[127:64]),                  \n";
	 fftp << "					.b1radix9(H_b1ROM4_wire[63:0]),                  \n";
	 fftp << "					.b1radix10(H_b1ROM5_wire[127:64]),                  \n";
	 fftp << "					.b1radix11(H_b1ROM5_wire[63:0]),                  \n";
	 fftp << "					.b1radix12(H_b1ROM6_wire[127:64]),                  \n";
	 fftp << "					.b1radix13(H_b1ROM6_wire[63:0]),                  \n";
	 fftp << "					.b1radix14(H_b1ROM7_wire[127:64]),                  \n";
	 fftp << "					.b1radix15(H_b1ROM7_wire[63:0]),                  \n";
	 fftp << "					.BN_wire(BN_TWI_wire)                  \n";
	 fftp << "	);                                                     \n";
	 fftp << "                                                           \n";
	 fftp << "	TWIpipe u_TWIpipe(                                     \n";
	 fftp << "					  .BN_out(BN_TWI_wire),                \n";
	 fftp << "					  .MA_out(MA_TWI_wire),                \n";
	 fftp << "	                  .TWIradix0_o(TWIradix0_pip_wire),    \n";
	 fftp << "	                  .TWIradix1_o(TWIradix1_pip_wire),    \n";
	 fftp << "	                  .TWIradix2_o(TWIradix2_pip_wire),    \n";
	 fftp << "	                  .TWIradix3_o(TWIradix3_pip_wire),    \n";
	 fftp << "	                  .TWIradix4_o(TWIradix4_pip_wire),    \n";
	 fftp << "	                  .TWIradix5_o(TWIradix5_pip_wire),    \n";
	 fftp << "	                  .TWIradix6_o(TWIradix6_pip_wire),    \n";
	 fftp << "	                  .TWIradix7_o(TWIradix7_pip_wire),    \n";
	 fftp << "	                  .TWIradix8_o(TWIradix8_pip_wire),    \n";
	 fftp << "	                  .TWIradix9_o(TWIradix9_pip_wire),    \n";
	 fftp << "	                  .TWIradix10_o(TWIradix10_pip_wire),    \n";
	 fftp << "	                  .TWIradix11_o(TWIradix11_pip_wire),    \n";
	 fftp << "	                  .TWIradix12_o(TWIradix12_pip_wire),    \n";
	 fftp << "	                  .TWIradix13_o(TWIradix13_pip_wire),    \n";
	 fftp << "	                  .TWIradix14_o(TWIradix14_pip_wire),    \n";
	 fftp << "	                  .TWIradix15_o(TWIradix15_pip_wire),    \n";
	 fftp << "	                  .BN_in(BN_wire),                     \n";
	 fftp << "	                  .MA_in(AGUMA_wire),                  \n";
	 fftp << "	                  .TWIradix0_i(TWIradix0_wire),        \n";
	 fftp << "	                  .TWIradix1_i(TWIradix1_wire),        \n";
	 fftp << "	                  .TWIradix2_i(TWIradix2_wire),        \n";
	 fftp << "	                  .TWIradix3_i(TWIradix3_wire),        \n";
	 fftp << "	                  .TWIradix4_i(TWIradix4_wire),        \n";
	 fftp << "	                  .TWIradix5_i(TWIradix5_wire),        \n";
	 fftp << "	                  .TWIradix6_i(TWIradix6_wire),        \n";
	 fftp << "	                  .TWIradix7_i(TWIradix7_wire),        \n";
	 fftp << "	                  .TWIradix8_i(TWIradix8_wire),        \n";
	 fftp << "	                  .TWIradix9_i(TWIradix9_wire),        \n";
	 fftp << "	                  .TWIradix10_i(TWIradix10_wire),        \n";
	 fftp << "	                  .TWIradix11_i(TWIradix11_wire),        \n";
	 fftp << "	                  .TWIradix12_i(TWIradix12_wire),        \n";
	 fftp << "	                  .TWIradix13_i(TWIradix13_wire),        \n";
	 fftp << "	                  .TWIradix14_i(TWIradix14_wire),        \n";
	 fftp << "	                  .TWIradix15_i(TWIradix15_wire),        \n";
	 fftp << "	                  .rst_n(rst_n),                       \n";
	 fftp << "	                  .clk(clk)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b0ROM0 u_H_b0ROM0(                                           \n";
	 fftp << "				.Q(H_b0ROM0_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "                                                           \n";
	 fftp << "   H_b0ROM1 u_H_b0ROM1(                                           \n";
	 fftp << "				.Q(H_b0ROM1_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "    );                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b0ROM2 u_H_b0ROM2(                                           \n";
	 fftp << "				.Q(H_b0ROM2_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "    			.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b0ROM3 u_H_b0ROM3(                                           \n";
	 fftp << "				.Q(H_b0ROM3_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM4 u_H_b0ROM4(                                           \n";
	 fftp << "				.Q(H_b0ROM4_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM5 u_H_b0ROM5(                                           \n";
	 fftp << "				.Q(H_b0ROM5_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM6 u_H_b0ROM6(                                           \n";
	 fftp << "				.Q(H_b0ROM6_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM7 u_H_b0ROM7(                                           \n";
	 fftp << "				.Q(H_b0ROM7_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "  H_b1ROM0 u_H_b1ROM0(                                           \n";
	 fftp << "				.Q(H_b1ROM0_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "                                                           \n";
	 fftp << "	H_b1ROM1 u_H_b1ROM1(                                           \n";
	 fftp << "				.Q(H_b1ROM1_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b1ROM2 u_H_b1ROM2(                                           \n";
	 fftp << "				.Q(H_b1ROM2_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b1ROM3 u_H_b1ROM3(                                           \n";
	 fftp << "				.Q(H_b1ROM3_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM4 u_H_b1ROM4(                                           \n";
	 fftp << "				.Q(H_b1ROM4_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM5 u_H_b1ROM5(                                           \n";
	 fftp << "				.Q(H_b1ROM5_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM6 u_H_b1ROM6(                                           \n";
	 fftp << "				.Q(H_b1ROM6_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM7 u_H_b1ROM7(                                           \n";
	 fftp << "				.Q(H_b1ROM7_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << " 	//for SRAM                                                                \n";
	 fftp << " 	Mux1 u_Mux1(.BN0_MEM0_Dout(BN0_MEM0_wire),                                \n";
	 fftp << " 			    .BN0_MEM1_Dout(BN0_MEM1_wire),                                \n";
	 fftp << " 				.BN0_MEM2_Dout(BN0_MEM2_wire),                                \n";
	 fftp << " 				.BN0_MEM3_Dout(BN0_MEM3_wire),                                \n";
	 fftp << " 			    .BN0_MEM4_Dout(BN0_MEM4_wire),                                \n";
	 fftp << " 			    .BN0_MEM5_Dout(BN0_MEM5_wire),                                \n";
	 fftp << " 			    .BN0_MEM6_Dout(BN0_MEM6_wire),                                \n";
	 fftp << " 			    .BN0_MEM7_Dout(BN0_MEM7_wire),                                \n";
	 fftp << " 			    .BN1_MEM0_Dout(BN1_MEM0_wire),                                \n";
	 fftp << " 			    .BN1_MEM1_Dout(BN1_MEM1_wire),                                \n";
	 fftp << " 				.BN1_MEM2_Dout(BN1_MEM2_wire),                                \n";
	 fftp << " 			    .BN1_MEM3_Dout(BN1_MEM3_wire),                                \n";
	 fftp << " 			    .BN1_MEM4_Dout(BN1_MEM4_wire),                                \n";
	 fftp << " 			    .BN1_MEM5_Dout(BN1_MEM5_wire),                                \n";
	 fftp << " 			    .BN1_MEM6_Dout(BN1_MEM6_wire),                                \n";
	 fftp << " 			    .BN1_MEM7_Dout(BN1_MEM7_wire),                                \n";
	 fftp << " 				.MA0_out(MA0_wire),                                           \n";
	 fftp << " 				.MA1_out(MA1_wire),                                           \n";
	 fftp << " 		        .ExtB0_D0_in(ExtB0_D0_wire),                                    \n";
	 fftp << " 			    .ExtB0_D1_in(ExtB0_D1_wire),                                    \n";
	 fftp << " 			    .ExtB0_D2_in(ExtB0_D2_wire),                                    \n";
	 fftp << " 			    .ExtB0_D3_in(ExtB0_D3_wire),                                    \n";
	 fftp << " 				.ExtB0_D4_in(ExtB0_D4_wire),                                    \n";
	 fftp << " 				.ExtB0_D5_in(ExtB0_D5_wire),                                    \n";
	 fftp << " 			    .ExtB0_D6_in(ExtB0_D6_wire),                                    \n";
	 fftp << " 			    .ExtB0_D7_in(ExtB0_D7_wire),                                    \n";
	 fftp << " 			    .ExtB0_D8_in(ExtB0_D8_wire),                                    \n";
	 fftp << " 			    .ExtB0_D9_in(ExtB0_D9_wire),                                    \n";
	 fftp << " 			    .ExtB0_D10_in(ExtB0_D10_wire),                                  \n";
	 fftp << " 			    .ExtB0_D11_in(ExtB0_D11_wire),                                  \n";
	 fftp << " 			    .ExtB0_D12_in(ExtB0_D12_wire),                                  \n";
	 fftp << " 			    .ExtB0_D13_in(ExtB0_D13_wire),                                  \n";
	 fftp << " 			    .ExtB0_D14_in(ExtB0_D14_wire),                                  \n";
	 fftp << " 			    .ExtB0_D15_in(ExtB0_D15_wire),                                  \n";
	 fftp << " 			    .ExtB1_D0_in(ExtB1_D0_wire),                                    \n";
	 fftp << " 			    .ExtB1_D1_in(ExtB1_D1_wire),                                    \n";
	 fftp << "              .ExtB1_D2_in(ExtB1_D2_wire),                                    \n";
	 fftp << " 			    .ExtB1_D3_in(ExtB1_D3_wire),                                    \n";
	 fftp << " 				.ExtB1_D4_in(ExtB1_D4_wire),                                    \n";
	 fftp << " 			    .ExtB1_D5_in(ExtB1_D5_wire),                                    \n";
	 fftp << " 			    .ExtB1_D6_in(ExtB1_D6_wire),                                    \n";
	 fftp << " 			    .ExtB1_D7_in(ExtB1_D7_wire),                                    \n";
	 fftp << " 			    .ExtB1_D8_in(ExtB1_D8_wire),                                    \n";
	 fftp << " 			    .ExtB1_D9_in(ExtB1_D9_wire),                                    \n";
	 fftp << " 			    .ExtB1_D10_in(ExtB1_D10_wire),                                  \n";
	 fftp << " 			    .ExtB1_D11_in(ExtB1_D11_wire),                                  \n";
	 fftp << " 			    .ExtB1_D12_in(ExtB1_D12_wire),                                  \n";
	 fftp << " 			    .ExtB1_D13_in(ExtB1_D13_wire),                                  \n";
	 fftp << " 			    .ExtB1_D14_in(ExtB1_D14_wire),                                  \n";
	 fftp << " 			    .ExtB1_D15_in(ExtB1_D15_wire),                                  \n";
	 fftp << " 				.RDC_in0(RDC_out0_D_wire),                                    \n";
	 fftp << " 				.RDC_in1(RDC_out1_D_wire),                                    \n";
	 fftp << " 				.RDC_in2(RDC_out2_D_wire),                                    \n";
	 fftp << " 				.RDC_in3(RDC_out3_D_wire),                                    \n";
	 fftp << " 				.RDC_in4(RDC_out4_D_wire),                                    \n";
	 fftp << " 			    .RDC_in5(RDC_out5_D_wire),                                    \n";
	 fftp << " 			    .RDC_in6(RDC_out6_D_wire),                                    \n";
	 fftp << " 			    .RDC_in7(RDC_out7_D_wire),                                    \n";
	 fftp << " 			    .RDC_in8(RDC_out8_D_wire),                                    \n";
	 fftp << " 			    .RDC_in9(RDC_out9_D_wire),                                    \n";
	 fftp << " 			    .RDC_in10(RDC_out10_D_wire),                                  \n";
	 fftp << " 			    .RDC_in11(RDC_out11_D_wire),                                  \n";
	 fftp << " 			    .RDC_in12(RDC_out12_D_wire),                                  \n";
	 fftp << " 			    .RDC_in13(RDC_out13_D_wire),                                  \n";
	 fftp << " 			    .RDC_in14(RDC_out14_D_wire),                                  \n";
	 fftp << " 			    .RDC_in15(RDC_out15_D_wire),                                  \n";
	 fftp << " 				.ExtMA_in(ExtMA_wire),                                        \n";
	 fftp << " 				.AGUMA_in(AGUMA_wire),                                        \n";
	 fftp << " 				.WMA_in(WMA_wire),                                            \n";
	 fftp << " 				.wen0_in(wen0_wire),                                          \n";
	 fftp << " 				.wen1_in(wen1_wire),                                          \n";
	 fftp << " 			    .SD_sel(SD_sel_wire)                                          \n";
	 fftp << " 			    ) ;                                                           \n";
	 fftp << " 	                                                                          \n";
	 fftp << " 	//for Radix-16                                                            \n";
     fftp << " 	Mux2 u_Mux2(.RA0_out(RA0D_in_wire),                                       \n";
     fftp << " 			    .RA1_out(RA1D_in_wire),                                       \n";
     fftp << " 			    .RA2_out(RA2D_in_wire),                                       \n";
     fftp << " 			    .RA3_out(RA3D_in_wire),                                       \n";
     fftp << " 				.RA4_out(RA4D_in_wire),                                       \n";
     fftp << " 			    .RA5_out(RA5D_in_wire),                                       \n";
     fftp << " 			    .RA6_out(RA6D_in_wire),                                       \n";
     fftp << " 			    .RA7_out(RA7D_in_wire),                                       \n";
     fftp << " 			    .RA8_out(RA8D_in_wire),                                       \n";
     fftp << " 			    .RA9_out(RA9D_in_wire),                                       \n";
     fftp << " 			    .RA10_out(RA10D_in_wire),                                     \n";
     fftp << " 			    .RA11_out(RA11D_in_wire),                                     \n";
     fftp << " 			    .RA12_out(RA12D_in_wire),                                     \n";
     fftp << " 			    .RA13_out(RA13D_in_wire),                                     \n";
     fftp << " 			    .RA14_out(RA14D_in_wire),                                     \n";
     fftp << " 			    .RA15_out(RA15D_in_wire),                                     \n";
     fftp << " 		        .BN0_MEM0_in(Data_out0),                                      \n";
     fftp << " 			    .BN0_MEM1_in(Data_out1),                                      \n";
     fftp << " 				.BN0_MEM2_in(Data_out2),                                      \n";
     fftp << " 				.BN0_MEM3_in(Data_out3),                                      \n";
     fftp << " 			    .BN0_MEM4_in(Data_out4),                                      \n";
     fftp << " 			    .BN0_MEM5_in(Data_out5),                                      \n";
     fftp << " 			    .BN0_MEM6_in(Data_out6),                                      \n";
     fftp << " 			    .BN0_MEM7_in(Data_out7),                                      \n";
     fftp << " 			    .BN1_MEM0_in(Data_out8),                                      \n";
     fftp << " 			    .BN1_MEM1_in(Data_out9),                                      \n";
     fftp << " 				.BN1_MEM2_in(Data_out10),                                     \n";
     fftp << " 			    .BN1_MEM3_in(Data_out11),                                     \n";
     fftp << " 			    .BN1_MEM4_in(Data_out12),                                     \n";
     fftp << " 			    .BN1_MEM5_in(Data_out13),                                     \n";
     fftp << " 			    .BN1_MEM6_in(Data_out14),                                     \n";
     fftp << " 			    .BN1_MEM7_in(Data_out15),                                     \n";
     fftp << " 			    .BN_sel(BN_wire)                                              \n";
     fftp << " 			    ) ;                                                           \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	Radix16_Pipe u_Radix16_Pipe(.RA0_out(RA0D_out_wire),                      \n";
     fftp << " 			                    .RA1_out(RA1D_out_wire),                      \n";
     fftp << " 			                    .RA2_out(RA2D_out_wire),                      \n";
     fftp << " 			                    .RA3_out(RA3D_out_wire),                      \n";
     fftp << " 					            .RA4_out(RA4D_out_wire),                      \n";
     fftp << " 			                    .RA5_out(RA5D_out_wire),                      \n";
     fftp << " 			                    .RA6_out(RA6D_out_wire),                      \n";
     fftp << " 			                    .RA7_out(RA7D_out_wire),                      \n";
     fftp << " 			                    .RA8_out(RA8D_out_wire),                      \n";
     fftp << " 			                    .RA9_out(RA9D_out_wire),                      \n";
     fftp << " 			                    .RA10_out(RA10D_out_wire),                    \n";
     fftp << " 			                    .RA11_out(RA11D_out_wire),                    \n";
     fftp << " 			                    .RA12_out(RA12D_out_wire),                    \n";
     fftp << " 			                    .RA13_out(RA13D_out_wire),                    \n";
     fftp << " 			                    .RA14_out(RA14D_out_wire),                    \n";
     fftp << " 			                    .RA15_out(RA15D_out_wire),                    \n";
     fftp << "                              .RA0_in(RA0D_in_wire),                        \n";
     fftp << " 			                    .RA1_in(RA1D_in_wire),                        \n";
     fftp << " 			                    .RA2_in(RA2D_in_wire),                        \n";
     fftp << " 			                    .RA3_in(RA3D_in_wire),                        \n";
     fftp << " 					            .RA4_in(RA4D_in_wire),                        \n";
     fftp << " 			                    .RA5_in(RA5D_in_wire),                        \n";
     fftp << " 			                    .RA6_in(RA6D_in_wire),                        \n";
     fftp << " 			                    .RA7_in(RA7D_in_wire),                        \n";
     fftp << " 			                    .RA8_in(RA8D_in_wire),                        \n";
     fftp << " 			                    .RA9_in(RA9D_in_wire),                        \n";
     fftp << " 			                    .RA10_in(RA10D_in_wire),                      \n";
     fftp << " 			                    .RA11_in(RA11D_in_wire),                      \n";
     fftp << " 			                    .RA12_in(RA12D_in_wire),                      \n";
     fftp << " 			                    .RA13_in(RA13D_in_wire),                      \n";
     fftp << " 			                    .RA14_in(RA14D_in_wire),                      \n";
     fftp << " 			                    .RA15_in(RA15D_in_wire),                      \n";
     fftp << " 		                        .N_in(N_in),                                  \n";
     fftp << "                              .rst_n(rst_n),                                \n";
     fftp << "                              .clk(clk)                                     \n";
     fftp << "                              ) ;                                           \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	//for Mul                                                                 \n";
	 fftp << " 	Mux3 u_Mux3(.MulB0_out(MulB0_wire),                                       \n";
	 fftp << " 			    .MulB1_out(MulB1_wire),                                       \n";
	 fftp << " 			    .MulB2_out(MulB2_wire),                                       \n";
	 fftp << " 			    .MulB3_out(MulB3_wire),                                       \n";
	 fftp << " 				.MulB4_out(MulB4_wire),                                       \n";
	 fftp << " 			    .MulB5_out(MulB5_wire),                                       \n";
	 fftp << " 			    .MulB6_out(MulB6_wire),                                       \n";
	 fftp << " 			    .MulB7_out(MulB7_wire),                                       \n";
	 fftp << " 			    .MulB8_out(MulB8_wire),                                       \n";
	 fftp << " 			    .MulB9_out(MulB9_wire),                                       \n";
	 fftp << " 			    .MulB10_out(MulB10_wire),                                     \n";
	 fftp << " 			    .MulB11_out(MulB11_wire),                                     \n";
	 fftp << " 			    .MulB12_out(MulB12_wire),                                     \n";
	 fftp << " 			    .MulB13_out(MulB13_wire),                                     \n";
	 fftp << " 			    .MulB14_out(MulB14_wire),                                     \n";
	 fftp << " 			    .MulB15_out(MulB15_wire),                                     \n";
	 fftp << " 				.MulA1_out(MulA1_wire),                                       \n";
	 fftp << " 				.MulA2_out(MulA2_wire),                                       \n";
	 fftp << " 				.MulA3_out(MulA3_wire),                                       \n";
	 fftp << " 				.MulA4_out(MulA4_wire),                                       \n";
	 fftp << " 			    .MulA5_out(MulA5_wire),                                       \n";
	 fftp << " 			    .MulA6_out(MulA6_wire),                                       \n";
	 fftp << " 			    .MulA7_out(MulA7_wire),                                       \n";
	 fftp << " 			    .MulA9_out(MulA9_wire),                                       \n";
	 fftp << " 			    .MulA10_out(MulA10_wire),                                     \n";
	 fftp << " 			    .MulA11_out(MulA11_wire),                                     \n";
	 fftp << " 			    .MulA12_out(MulA12_wire),                                     \n";
	 fftp << " 			    .MulA13_out(MulA13_wire),                                     \n";
	 fftp << " 			    .MulA14_out(MulA14_wire),                                     \n";
	 fftp << " 			    .MulA15_out(MulA15_wire),                                     \n";
	 fftp << " 				.IFFTROMD0_in(IFFTROMD0_D_wire),                              \n";
	 fftp << " 				.IFFTROMD1_in(IFFTROMD1_D_wire),                              \n";
	 fftp << " 				.IFFTROMD2_in(IFFTROMD2_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD3_in(IFFTROMD3_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD4_in(IFFTROMD4_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD5_in(IFFTROMD5_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD6_in(IFFTROMD6_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD7_in(IFFTROMD7_D_wire),                              \n";
	 fftp << "              .ROMD0_in(ROMD0_D_wire),                                      \n";
	 fftp << " 			    .ROMD1_in(ROMD1_D_wire),                                      \n";
	 fftp << " 				.ROMD2_in(ROMD2_D_wire),                                      \n";
	 fftp << " 				.ROMD3_in(ROMD3_D_wire),                                      \n";
	 fftp << " 			    .ROMD4_in(ROMD4_D_wire),                                      \n";
	 fftp << " 			    .ROMD5_in(ROMD5_D_wire),                                      \n";
	 fftp << " 			    .ROMD6_in(ROMD6_D_wire),                                      \n";
	 fftp << " 			    .ROMD7_in(ROMD7_D_wire),                                      \n";
	 fftp << " 		        .FFTBD0_in(TWIradix0_pip_wire),                               \n";
	 fftp << " 			    .FFTBD1_in(TWIradix1_pip_wire),                               \n";
     fftp << " 			    .FFTBD2_in(TWIradix2_pip_wire),                               \n";
     fftp << " 			    .FFTBD3_in(TWIradix3_pip_wire),                               \n";
     fftp << " 				.FFTBD4_in(TWIradix4_pip_wire),                               \n";
     fftp << " 			    .FFTBD5_in(TWIradix5_pip_wire),                               \n";
     fftp << " 			    .FFTBD6_in(TWIradix6_pip_wire),                               \n";
     fftp << " 			    .FFTBD7_in(TWIradix7_pip_wire),                               \n";
     fftp << " 			    .FFTBD8_in(TWIradix8_pip_wire),                               \n";
     fftp << " 			    .FFTBD9_in(TWIradix9_pip_wire),                               \n";
     fftp << " 			    .FFTBD10_in(TWIradix10_pip_wire),                              \n";
     fftp << " 			    .FFTBD11_in(TWIradix11_pip_wire),                             \n";
     fftp << " 			    .FFTBD12_in(TWIradix12_pip_wire),                             \n";
     fftp << " 			    .FFTBD13_in(TWIradix13_pip_wire),                             \n";
     fftp << " 			    .FFTBD14_in(TWIradix14_pip_wire),                             \n";
     fftp << " 			    .FFTBD15_in(TWIradix15_pip_wire),                             \n";
     fftp << " 				.RA1D_in(RA1D_out_wire),                                      \n";
     fftp << " 				.RA2D_in(RA2D_out_wire),                                      \n";
     fftp << " 				.RA3D_in(RA3D_out_wire),                                      \n";
     fftp << " 				.RA4D_in(RA4D_out_wire),                                      \n";
     fftp << " 			    .RA5D_in(RA5D_out_wire),                                      \n";
     fftp << " 			    .RA6D_in(RA6D_out_wire),                                      \n";
     fftp << " 			    .RA7D_in(RA7D_out_wire),                                      \n";
     fftp << " 			    .RA9D_in(RA9D_out_wire),                                      \n";
     fftp << " 			    .RA10D_in(RA10D_out_wire),                                    \n";
     fftp << " 			    .RA11D_in(RA11D_out_wire),                                    \n";
     fftp << " 			    .RA12D_in(RA12D_out_wire),                                    \n";
     fftp << " 			    .RA13D_in(RA13D_out_wire),                                    \n";
     fftp << " 			    .RA14D_in(RA14D_out_wire),                                    \n";
     fftp << " 			    .RA15D_in(RA15D_out_wire),                                    \n";
     fftp << " 			    .Mul_sel(Mul_sel_D_wire),                                     \n";
     fftp << " 				.mode_sel(mode_sel_D_wire)                                    \n";
     fftp << " 			    ) ;                                                           \n";
     
     fftp << " 	                                                                          \n";
     fftp << " 	//Pipeline Register                                                       \n";
     fftp << " 	R16_NPipeReg3 u_R16_NPipeReg3(.N_D4_out(N_D4_wire),                       \n";
     fftp << "                                   .N_in(N_in),                             \n";
     fftp << "                                   .rst_n(rst_n),                           \n";
     fftp << "                                   .clk(clk)                                \n";
     fftp << "                                   ) ;                                      \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u0_MulMod128(.S_out(MulMod0_out_wire),                          \n";
     fftp << "                         .A_in(RA0D_out_wire),                              \n";
     fftp << " 		                   .B_in(MulB0_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u1_MulMod128(.S_out(MulMod1_out_wire),                          \n";
     fftp << "                         .A_in(MulA1_wire),                                 \n";
     fftp << " 		                   .B_in(MulB1_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u2_MulMod128(.S_out(MulMod2_out_wire),                          \n";
     fftp << "                         .A_in(MulA2_wire),                                 \n";
     fftp << " 		                   .B_in(MulB2_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u3_MulMod128(.S_out(MulMod3_out_wire),                          \n";
     fftp << "                         .A_in(MulA3_wire),                                 \n";
     fftp << " 		                   .B_in(MulB3_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u4_MulMod128(.S_out(MulMod4_out_wire),                          \n";
     fftp << "                         .A_in(MulA4_wire),                                 \n";
     fftp << " 		                   .B_in(MulB4_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u5_MulMod128(.S_out(MulMod5_out_wire),                          \n";
     fftp << "                         .A_in(MulA5_wire),                                 \n";
     fftp << " 		                   .B_in(MulB5_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u6_MulMod128(.S_out(MulMod6_out_wire),                          \n";
     fftp << "                            .A_in(MulA6_wire),                              \n";
     fftp << " 		                   .B_in(MulB6_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u7_MulMod128(.S_out(MulMod7_out_wire),                          \n";
     fftp << "                            .A_in(MulA7_wire),                              \n";
     fftp << " 		                   .B_in(MulB7_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u8_MulMod128(.S_out(MulMod8_out_wire),                          \n";
     fftp << "                            .A_in(RA8D_out_wire),                           \n";
     fftp << " 		                   .B_in(MulB8_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u9_MulMod128(.S_out(MulMod9_out_wire),                          \n";
     fftp << "                            .A_in(MulA9_wire),                              \n";
     fftp << " 		                   .B_in(MulB9_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u10_MulMod128(.S_out(MulMod10_out_wire),                        \n";
     fftp << "                             .A_in(MulA10_wire),                            \n";
     fftp << " 		                    .B_in(MulB10_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u11_MulMod128(.S_out(MulMod11_out_wire),                        \n";
     fftp << "                             .A_in(MulA11_wire),                            \n";
     fftp << " 		                    .B_in(MulB11_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u12_MulMod128(.S_out(MulMod12_out_wire),                        \n";
     fftp << "                             .A_in(MulA12_wire),                            \n";
     fftp << " 		                    .B_in(MulB12_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u13_MulMod128(.S_out(MulMod13_out_wire),                        \n";
     fftp << "                             .A_in(MulA13_wire),                            \n";
     fftp << " 		                    .B_in(MulB13_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u14_MulMod128(.S_out(MulMod14_out_wire),                        \n";
     fftp << "                             .A_in(MulA14_wire),                            \n";
     fftp << " 		                    .B_in(MulB14_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u15_MulMod128(.S_out(MulMod15_out_wire),                        \n";
     fftp << "                             .A_in(MulA15_wire),                            \n";
     fftp << " 		                    .B_in(MulB15_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	R16_DC u_R16_DC(.RDC_out0(RDC_out0_wire),                                 \n";
	 fftp << " 			        .RDC_out1(RDC_out1_wire),                                 \n";
	 fftp << " 			        .RDC_out2(RDC_out2_wire),                                 \n";
	 fftp << " 			        .RDC_out3(RDC_out3_wire),                                 \n";
	 fftp << " 					.RDC_out4(RDC_out4_wire),                                 \n";
	 fftp << " 			        .RDC_out5(RDC_out5_wire),                                 \n";
	 fftp << " 			        .RDC_out6(RDC_out6_wire),                                 \n";
	 fftp << " 			        .RDC_out7(RDC_out7_wire),                                 \n";
	 fftp << " 			        .RDC_out8(RDC_out8_wire),                                 \n";
	 fftp << " 			        .RDC_out9(RDC_out9_wire),                                 \n";
	 fftp << " 			        .RDC_out10(RDC_out10_wire),                               \n";
	 fftp << " 			        .RDC_out11(RDC_out11_wire),                               \n";
	 fftp << " 			        .RDC_out12(RDC_out12_wire),                               \n";
	 fftp << " 			        .RDC_out13(RDC_out13_wire),                               \n";
	 fftp << " 			        .RDC_out14(RDC_out14_wire),                               \n";
	 fftp << " 			        .RDC_out15(RDC_out15_wire),                               \n";
	 fftp << "                  .RDC_in0(MulMod0_out_wire),                               \n";
	 fftp << " 		            .RDC_in1(MulMod1_out_wire),                               \n";
	 fftp << " 			        .RDC_in2(MulMod2_out_wire),                               \n";
	 fftp << " 			        .RDC_in3(MulMod3_out_wire),                               \n";
	 fftp << " 					.RDC_in4(MulMod4_out_wire),                               \n";
	 fftp << " 			        .RDC_in5(MulMod5_out_wire),                               \n";
	 fftp << " 			        .RDC_in6(MulMod6_out_wire),                               \n";
	 fftp << " 			        .RDC_in7(MulMod7_out_wire),                               \n";
	 fftp << " 			        .RDC_in8(MulMod8_out_wire),                               \n";
	 fftp << " 			        .RDC_in9(MulMod9_out_wire),                               \n";
	 fftp << " 			        .RDC_in10(MulMod10_out_wire),                             \n";
	 fftp << " 			        .RDC_in11(MulMod11_out_wire),                             \n";
	 fftp << " 			        .RDC_in12(MulMod12_out_wire),                             \n";
	 fftp << " 			        .RDC_in13(MulMod13_out_wire),                             \n";
	 fftp << " 			        .RDC_in14(MulMod14_out_wire),                             \n";
	 fftp << " 			        .RDC_in15(MulMod15_out_wire),                             \n";
	 fftp << " 			        .RDC_sel(RDC_sel_D_wire),                                 \n";
	 //fftp << " 				    .FFT_FSmode_sel(FFT_FSmode_sel_D_wire),                   \n";
	 fftp << " 				    .DC_mode_sel(DC_mode_sel_D_wire),                   \n";
	 fftp << "                     .rst_n(rst_n),                                         \n";
	 fftp << "                     .clk(clk)                                              \n";
	 fftp << "                     ) ;                                                    \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	R16_WD_buf u_R16_WD_buf(.RDC0_D_out(RDC_out0_D_wire),                     \n";
     fftp << " 			                .RDC1_D_out(RDC_out1_D_wire),                     \n";
     fftp << " 				            .RDC2_D_out(RDC_out2_D_wire),                     \n";
     fftp << " 				            .RDC3_D_out(RDC_out3_D_wire),                     \n";
     fftp << " 				            .RDC4_D_out(RDC_out4_D_wire),                     \n";
     fftp << " 				            .RDC5_D_out(RDC_out5_D_wire),                     \n";
     fftp << " 				            .RDC6_D_out(RDC_out6_D_wire),                     \n";
     fftp << " 				            .RDC7_D_out(RDC_out7_D_wire),                     \n";
     fftp << " 				            .RDC8_D_out(RDC_out8_D_wire),                     \n";
     fftp << " 				            .RDC9_D_out(RDC_out9_D_wire),                     \n";
     fftp << " 				            .RDC10_D_out(RDC_out10_D_wire),                   \n";
     fftp << " 				            .RDC11_D_out(RDC_out11_D_wire),                   \n";
     fftp << " 				            .RDC12_D_out(RDC_out12_D_wire),                   \n";
     fftp << " 				            .RDC13_D_out(RDC_out13_D_wire),                   \n";
     fftp << " 				            .RDC14_D_out(RDC_out14_D_wire),                   \n";
     fftp << " 				            .RDC15_D_out(RDC_out15_D_wire),                   \n";
     fftp << " 		                    .RDC0_in(RDC_out0_wire),                          \n";
     fftp << " 				            .RDC1_in(RDC_out1_wire),                          \n";
     fftp << " 				            .RDC2_in(RDC_out2_wire),                          \n";
     fftp << " 				            .RDC3_in(RDC_out3_wire),                          \n";
     fftp << " 				            .RDC4_in(RDC_out4_wire),                          \n";
     fftp << " 				            .RDC5_in(RDC_out5_wire),                          \n";
     fftp << " 				            .RDC6_in(RDC_out6_wire),                          \n";
     fftp << " 				            .RDC7_in(RDC_out7_wire),                          \n";
     fftp << " 				            .RDC8_in(RDC_out8_wire),                          \n";
     fftp << " 				            .RDC9_in(RDC_out9_wire),                          \n";
     fftp << " 				            .RDC10_in(RDC_out10_wire),                        \n";
     fftp << " 				            .RDC11_in(RDC_out11_wire),                        \n";
     fftp << " 				            .RDC12_in(RDC_out12_wire),                        \n";
     fftp << " 				            .RDC13_in(RDC_out13_wire),                        \n";
     fftp << " 				            .RDC14_in(RDC_out14_wire),                        \n";
     fftp << " 				            .RDC15_in(RDC_out15_wire),                        \n";
     fftp << "                          .rst_n(rst_n),                                    \n";
     fftp << "                          .clk(clk)                                         \n";
     fftp << "                          ) ;                                               \n";
     fftp << " 	                                                                          \n"; 
     fftp << " 	//-----------------------------------------------------                   \n";
     fftp << " 	// for CRUR16                                                             \n";
     fftp << " 	Mux4 u_Mux4(.CRUD0_out(CRUD0_wire),                                       \n";
     fftp << " 			    .CRUD1_out(CRUD1_wire),                                       \n";
     fftp << " 			    .CRUD2_out(CRUD2_wire),                                       \n";
     fftp << " 			    .CRUD3_out(CRUD3_wire),                                       \n";
     fftp << " 				.CRUD4_out(CRUD4_wire),                                       \n";
     fftp << " 			    .CRUD5_out(CRUD5_wire),                                       \n";
     fftp << " 			    .CRUD6_out(CRUD6_wire),                                       \n";
     fftp << " 			    .CRUD7_out(CRUD7_wire),                                       \n";
     fftp << " 			    .CRUD8_out(CRUD8_wire),                                       \n";
     fftp << " 			    .CRUD9_out(CRUD9_wire),                                       \n";
     fftp << " 			    .CRUD10_out(CRUD10_wire),                                     \n";
     fftp << " 			    .CRUD11_out(CRUD11_wire),                                     \n";
     fftp << " 			    .CRUD12_out(CRUD12_wire),                                     \n";
     fftp << " 			    .CRUD13_out(CRUD13_wire),                                     \n";
     fftp << " 			    .CRUD14_out(CRUD14_wire),                                     \n";
     fftp << " 			    .CRUD15_out(CRUD15_wire),                                     \n";
     fftp << " 			    .IFFTD0_in(RA0D_in_wire),                                     \n";
     fftp << "              .IFFTD1_in(RA1D_in_wire),                                     \n";
     fftp << "              .IFFTD2_in(RA2D_in_wire),                                     \n";
     fftp << "              .IFFTD3_in(RA3D_in_wire),                                     \n";
     fftp << " 				.IFFTD4_in(RA4D_in_wire),                                     \n";
     fftp << " 			    .IFFTD5_in(RA5D_in_wire),                                     \n";
     fftp << " 			    .IFFTD6_in(RA6D_in_wire),                                     \n";
     fftp << " 			    .IFFTD7_in(RA7D_in_wire),                                     \n";
     fftp << " 			    .IFFTD8_in(RA8D_in_wire),                                     \n";
     fftp << " 			    .IFFTD9_in(RA9D_in_wire),                                     \n";
     fftp << " 			    .IFFTD10_in(RA10D_in_wire),                                   \n";
     fftp << " 			    .IFFTD11_in(RA11D_in_wire),                                   \n";
     fftp << " 			    .IFFTD12_in(RA12D_in_wire),                                   \n";
     fftp << " 			    .IFFTD13_in(RA13D_in_wire),                                   \n";
     fftp << " 			    .IFFTD14_in(RA14D_in_wire),                                   \n";
     fftp << " 			    .IFFTD15_in(RA15D_in_wire),                                   \n";
     fftp << " 			    .m2_sel(m2_sel_wire)                                          \n";
     fftp << " 			    ) ;                                                           \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//Pipeline Register				                                          \n";
     fftp << " 	R16_ROMPipeReg1 u_R16_ROMPipeReg1(.ROMD0_Dout(ROMD0_D_wire),              \n";
     fftp << " 				                      .ROMD1_Dout(ROMD1_D_wire),              \n";
     fftp << " 				                      .ROMD2_Dout(ROMD2_D_wire),              \n";
     fftp << " 				                      .ROMD3_Dout(ROMD3_D_wire),              \n";
     fftp << " 					                  .ROMD4_Dout(ROMD4_D_wire),              \n";
     fftp << " 					                  .ROMD5_Dout(ROMD5_D_wire),              \n";
     fftp << " 					                  .ROMD6_Dout(ROMD6_D_wire),              \n";
     fftp << " 					                  .ROMD7_Dout(ROMD7_D_wire),              \n";
     fftp << " 									  .IFFTROMD0_Dout(IFFTROMD0_D_wire),      \n";
     fftp << " 				                      .IFFTROMD1_Dout(IFFTROMD1_D_wire),      \n";
     fftp << " 				                      .IFFTROMD2_Dout(IFFTROMD2_D_wire),      \n";
     fftp << " 				                      .IFFTROMD3_Dout(IFFTROMD3_D_wire),      \n";
     fftp << " 					                  .IFFTROMD4_Dout(IFFTROMD4_D_wire),      \n";
     fftp << " 					                  .IFFTROMD5_Dout(IFFTROMD5_D_wire),      \n";
     fftp << " 					                  .IFFTROMD6_Dout(IFFTROMD6_D_wire),      \n";
     fftp << " 					                  .IFFTROMD7_Dout(IFFTROMD7_D_wire),      \n";
     fftp << " 			                          .ROMD0_in(ROMD0_out_wire),              \n";
     fftp << " 					                  .ROMD1_in(ROMD1_out_wire),              \n";
     fftp << " 					                  .ROMD2_in(ROMD2_out_wire),              \n";
     fftp << " 					                  .ROMD3_in(ROMD3_out_wire),              \n";
     fftp << " 					                  .ROMD4_in(ROMD4_out_wire),              \n";
     fftp << " 					                  .ROMD5_in(ROMD5_out_wire),              \n";
     fftp << " 					                  .ROMD6_in(ROMD6_out_wire),              \n";
     fftp << " 					                  .ROMD7_in(ROMD7_out_wire),              \n";
     fftp << " 									  .IFFTROMD0_in(IFFTROMD0_out_wire),      \n";
     fftp << " 					                  .IFFTROMD1_in(IFFTROMD1_out_wire),      \n";
     fftp << " 					                  .IFFTROMD2_in(IFFTROMD2_out_wire),      \n";
     fftp << " 					                  .IFFTROMD3_in(IFFTROMD3_out_wire),      \n";
     fftp << " 					                  .IFFTROMD4_in(IFFTROMD4_out_wire),      \n";
     fftp << " 					                  .IFFTROMD5_in(IFFTROMD5_out_wire),      \n";
     fftp << " 					                  .IFFTROMD6_in(IFFTROMD6_out_wire),      \n";
     fftp << " 					                  .IFFTROMD7_in(IFFTROMD7_out_wire),      \n";
     fftp << "                                       .rst_n(rst_n),                       \n";
     fftp << "                                       .clk(clk)                            \n";
     fftp << "                                       ) ;		                          \n";
     fftp << " 	//---FFT1----------------------------------------------                   \n";
     fftp << " 	//Bank0 Mem0                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u0_SRAM_SP_2048_128 (.Q(Data_out0),                      \n";
     fftp << "  "<<ss.str()<<" u0_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out0),\n";
     fftp << "                                        .CLK(clk),                       \n";
     fftp << "                                        .CEN(cen_wire),                  \n";
     fftp << "                                        .WEN(wen0_wire),                 \n";
     fftp << "                                        .A(MA0_wire),                    \n";
     fftp << "                                        .D(BN0_MEM0_wire),               \n";
     fftp << "                                        .EMA(3'd0)                   \n";
     fftp << "                                        );                               \n";
     fftp << " 	//Bank0 Mem1                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u1_SRAM_SP_2048_128 (.Q(Data_out1),                      \n";
     fftp << "  "<<ss.str()<<" u1_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out1),\n";
     fftp << "                                        .CLK(clk),                       \n";
     fftp << "                                        .CEN(cen_wire),                  \n";
     fftp << "                                        .WEN(wen0_wire),                 \n";
     fftp << "                                        .A(MA0_wire),                    \n";
     fftp << "                                        .D(BN0_MEM1_wire),               \n";
     fftp << "                                        .EMA(3'd0)                   \n";
     fftp << "                                        );							      \n";
     fftp << " 	//Bank0 Mem2                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u2_SRAM_SP_2048_128 (.Q(Data_out2),                      \n";
     fftp << "  "<<ss.str()<<" u2_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out2),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM2_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem3                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u3_SRAM_SP_2048_128 (.Q(Data_out3),                      \n";
     fftp << "  "<<ss.str()<<" u3_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out3),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM3_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem4                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u4_SRAM_SP_2048_128 (.Q(Data_out4),                      \n";
     fftp << "  "<<ss.str()<<" u4_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out4),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM4_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );							      \n";
     fftp << " 	//Bank0 Mem5                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u5_SRAM_SP_2048_128 (.Q(Data_out5),                      \n";
     fftp << "  "<<ss.str()<<" u5_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out5),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM5_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem6                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u6_SRAM_SP_2048_128 (.Q(Data_out6),                      \n";
     fftp << "  "<<ss.str()<<" u6_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out6),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM6_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem7                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u7_SRAM_SP_2048_128 (.Q(Data_out7),                      \n";
     fftp << "  "<<ss.str()<<" u7_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out7),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM7_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 			                                                                  \n";
     fftp << " 			                                                                  \n";
     fftp << " 	//Bank1 Mem0                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u8_SRAM_SP_2048_128 (.Q(Data_out8),                      \n";
     fftp << "  "<<ss.str()<<" u8_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out8),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen1_wire),                 \n";
     fftp << "                                           .A(MA1_wire),                    \n";
     fftp << "                                           .D(BN1_MEM0_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );							      \n";
     fftp << " 	//Bank0 Mem1                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u9_SRAM_SP_2048_128 (.Q(Data_out9),                      \n";
     fftp << "  "<<ss.str()<<" u9_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out9),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen1_wire),                 \n";
     fftp << "                                           .A(MA1_wire),                    \n";
     fftp << "                                           .D(BN1_MEM1_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );	                              \n";
     fftp << " 	//Bank1 Mem2                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u10_SRAM_SP_2048_128 (.Q(Data_out10),                    \n";
     fftp << "  "<<ss.str()<<" u10_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out10),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM2_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );		                      \n";
     fftp << " 	//Bank1 Mem3                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u11_SRAM_SP_2048_128 (.Q(Data_out11),                    \n";
     fftp << "  "<<ss.str()<<" u11_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out11),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM3_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );		                      \n";
     fftp << " 	//Bank1 Mem4                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u12_SRAM_SP_2048_128 (.Q(Data_out12),                    \n";
     fftp << "  "<<ss.str()<<" u12_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out12),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM4_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );	                          \n";
     fftp << " 	//Bank1 Mem5                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u13_SRAM_SP_2048_128 (.Q(Data_out13),                    \n";
     fftp << "  "<<ss.str()<<" u13_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out13),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM5_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );	                          \n";
     fftp << " 	//Bank1 Mem6                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u14_SRAM_SP_2048_128 (.Q(Data_out14),                    \n";
     fftp << "  "<<ss.str()<<" u14_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out14),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM6_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );		                      \n";
     fftp << " 	//Bank1 Mem7                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u15_SRAM_SP_2048_128 (.Q(Data_out15),                    \n";
     fftp << "  "<<ss.str()<<" u15_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out15),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM7_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );						      \n";	  
     //
	 fftp << "     //-----------------------------------------------------     \n";    
	 fftp << "     //2020/04/19 modify                                         \n";
	 fftp << "     //re-order factor  ROM                                      \n";
	 fftp << "     //BANK0                                                     \n";
	 fftp << "     IReorderMA_pip u_IReorderMA_pip(                            \n";
	 fftp << "             .IREMA_o(IREMA),                                    \n";
	 fftp << "             .MA_i(data_cnt_wire[" << (IReROM_width-1) <<":0]),\n";
	 fftp << "             .rst_n(rst_n),                                      \n";
	 fftp << "             .clk(clk)                                           \n";
	 fftp << "     );                                                          \n";
	 fftp << "                                                                 \n";
	 fftp << "     //bank0                                                     \n";
	 fftp << "     reorderROM0 u_reorderROM0(                                  \n";
	 fftp << "                               .Q(reorderROM0_wire_reg_in),             \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "                                                                 \n";
	 fftp << "     reorderROM1 u_reorderROM1(                                  \n";
	 fftp << "                               .Q(reorderROM1_wire_reg_in),             \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "     //bank1                                                     \n";
	 fftp << "     reorderROM2 u_reorderROM2(                                  \n";
	 fftp << "                               .Q(reorderROM2_wire_reg_in),      \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "     reorderROM3 u_reorderROM3(                                  \n";
	 fftp << "                               .Q(reorderROM3_wire_reg_in),             \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "     //128 bits                                                  \n";
	 fftp << "     ireorderROM0 u_ireorderROM0(                                \n";
	 fftp << "                               .Q(ireorderROM0_wire_reg_in),            \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << "                                                                 \n";
	 fftp << "     ireorderROM1 u_ireorderROM1(                                    \n";
	 fftp << "                               .Q(ireorderROM1_wire_reg_in),              \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << "     ireorderROM2 u_ireorderROM2(                                \n";
	 fftp << "                               .Q(ireorderROM2_wire_reg_in),            \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << "     //64 bits                                                   \n";
	 fftp << "     ireorderROM3 u_ireorderROM3(                                \n";
	 fftp << "                               .Q(ireorderROM3_wire_reg_in),     \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";  
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << " 	//-----------------------------------------------------     \n";
	 fftp << " 	R16_orderROM_Pipe u_R16_orderROM_Pipe(\n";
	 fftp << " 				.reorderROM0_o(reorderROM0_wire), 				\n";
	 fftp << " 				.reorderROM1_o(reorderROM1_wire), 				\n";
	 fftp << " 				.reorderROM2_o(reorderROM2_wire), 				\n";
	 fftp << " 				.reorderROM3_o(reorderROM3_wire), 				\n";
	 fftp << " 				.ireorderROM0_o(ireorderROM0_wire),				\n";
	 fftp << " 				.ireorderROM1_o(ireorderROM1_wire),				\n";
	 fftp << " 				.ireorderROM2_o(ireorderROM2_wire),				\n";
	 fftp << " 				.ireorderROM3_o(ireorderROM3_wire),				\n";
	 fftp << " 				.reorderROM0_i(reorderROM0_wire_reg_in), 		\n";
	 fftp << " 				.reorderROM1_i(reorderROM1_wire_reg_in), 		\n";
	 fftp << " 				.reorderROM2_i(reorderROM2_wire_reg_in), 		\n";
	 fftp << " 				.reorderROM3_i(reorderROM3_wire_reg_in), 		\n";
	 fftp << " 				.ireorderROM0_i(ireorderROM0_wire_reg_in),		\n";
	 fftp << " 				.ireorderROM1_i(ireorderROM1_wire_reg_in),		\n";
	 fftp << " 				.ireorderROM2_i(ireorderROM2_wire_reg_in),		\n";
	 fftp << " 				.ireorderROM3_i(ireorderROM3_wire_reg_in),		\n";
	 fftp << " 				.rst_n(rst_n),         				\n";
	 fftp << " 				.clk(clk)            				\n";
	 fftp << " 	);													\n";
	 fftp << " 	//-----------------------------------------------------                   \n";
     fftp << " 	                                                                          \n";
     fftp << "     //FFT ROM0                                                             \n";
     fftp << " 	ROM0_"<<no_address_tmp*2<<"_64 u_ROM0_"<<no_address_tmp*2<<"_64 (.Q(ROMD0_out_wire),\n";
     fftp << "                                  .CLK(clk),                                \n";
     fftp << "                                  .CEN(RomCen_wire),                        \n";
     fftp << "                                  .A(ROMA_wire)                             \n";
     fftp << "                                   );                                       \n";
     fftp << " 	//FFT ROM1                                                                \n";
     fftp << " 	ROM1_"<<no_address_tmp*2<<"_128 u_ROM1_"<<no_address_tmp*2<<"_128 (.Q(ROMD1_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 	//FFT ROM2                                                                \n";
     fftp << " 	ROM2_"<<no_address_tmp*2<<"_128 u_ROM2_"<<no_address_tmp*2<<"_128 (.Q(ROMD2_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                     );                                     \n";
     fftp << " 	//FFT ROM3                                                                \n";
     fftp << " 	ROM3_"<<no_address_tmp*2<<"_128 u_ROM3_"<<no_address_tmp*2<<"_128 (.Q(ROMD3_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 	//FFT ROM4                                                                \n";
     fftp << " 	ROM4_"<<no_address_tmp*2<<"_128 u_ROM4_"<<no_address_tmp*2<<"_128 (.Q(ROMD4_out_wire),\n";
     fftp << "                                .CLK(clk),                              \n";
     fftp << "                                .CEN(RomCen_wire),                      \n";
     fftp << "                                .A(ROMA_wire)                           \n";
     fftp << "                                );						              \n";
     fftp << " 	//FFT ROM5                                                            \n";
     fftp << " 	ROM5_"<<no_address_tmp*2<<"_128 u_ROM5_"<<no_address_tmp*2<<"_128 (.Q(ROMD5_out_wire),\n";
     fftp << "                                .CLK(clk),                              \n";
     fftp << "                                .CEN(RomCen_wire),                      \n";
     fftp << "                                .A(ROMA_wire)                           \n";
     fftp << "                                );                                      \n";
     fftp << " 	//FFT ROM6                                                            \n";
     fftp << " 	ROM6_"<<no_address_tmp*2<<"_128 u_ROM6_"<<no_address_tmp*2<<"_128 (.Q(ROMD6_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 	//FFT ROM7                                                                \n";
     fftp << " 	ROM7_"<<no_address_tmp*2<<"_128 u_ROM7_"<<no_address_tmp*2<<"_128 (.Q(ROMD7_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 							                                                  \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//IFFT ROM0                                                               \n";
     fftp << " 	IFFTR0_"<<no_address_tmp*2<<"_64 u_IFFTR0_"<<no_address_tmp*2<<"_64 (.Q(IFFTROMD0_out_wire),                  \n";
     fftp << "                                  .CLK(clk),                            \n";
     fftp << "                                  .CEN(RomCen_wire),                    \n";
     fftp << "                                  .A(ROMA_wire)                         \n";
     fftp << "                                   );                                   \n";
     fftp << " 	//IFFT ROM1                                                           \n";
     fftp << " 	IFFTR1_"<<no_address_tmp*2<<"_128 u_IFFTR1_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD1_out_wire),\n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM2                                                           \n";
     fftp << " 	IFFTR2_"<<no_address_tmp*2<<"_128 u_IFFTR2_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD2_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM3                                                           \n";
     fftp << " 	IFFTR3_"<<no_address_tmp*2<<"_128 u_IFFTR3_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD3_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM4                                                           \n";
     fftp << " 	IFFTR4_"<<no_address_tmp*2<<"_128 u_IFFTR4_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD4_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM5                                                           \n";
     fftp << " 	IFFTR5_"<<no_address_tmp*2<<"_128 u_IFFTR5_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD5_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM6                                                           \n";
     fftp << " 	IFFTR6_"<<no_address_tmp*2<<"_128 u_IFFTR6_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD6_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM7                                                           \n";
     fftp << " 	IFFTR7_"<<no_address_tmp*2<<"_128 u_IFFTR7_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD7_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 									                                          \n";
     fftp << " endmodule                                                                  \n";

     fftp.close();	 
	
}
void FFTC::FFTP_r16_Mixed_radix(std::string string_in){
	 std::ofstream fftp;
     int no_address_tmp;
     no_address_tmp = exp2(addr_width); //number of address
     std::string        string_buf = "SRAM_SP_";
     std::stringstream  ss;
     ss << string_buf << no_address_tmp <<"_128";
     std::cout <<"--->SRAM name :" << ss.str() <<"\n";
     //input file
     std::string string_fp = "/FFTP.v"; //file position 
     std::stringstream ss_fp;
     ss_fp << string_in << string_fp;
	 fftp.open(ss_fp.str());
     fftp << " `timescale 1 ns/1 ps                                                       \n";
     fftp << " module FFTP(MulValid_out,                                                  \n";
     fftp << "             MulD0_out,                                                     \n";
     fftp << " 		       MulD1_out,                                                     \n";
     fftp << " 			   MulD2_out,                                                     \n";
     fftp << " 			   MulD3_out,                                                     \n";
     fftp << " 			   MulD4_out,                                                     \n";
     fftp << " 			   MulD5_out,                                                     \n";
     fftp << " 			   MulD6_out,                                                     \n";
     fftp << " 			   MulD7_out,                                                     \n";
     fftp << " 			   MulD8_out,                                                     \n";
     fftp << " 			   MulD9_out,                                                     \n";
     fftp << " 			   MulD10_out,                                                    \n";
     fftp << " 			   MulD11_out,                                                    \n";
     fftp << " 			   MulD12_out,                                                    \n";
     fftp << " 			   MulD13_out,                                                    \n";
     fftp << " 			   MulD14_out,                                                    \n";
     fftp << " 			   MulD15_out,                                                    \n";
     fftp << " 			   ExtB0_D0_in,                                                   \n";
     fftp << " 			   ExtB0_D1_in,                                                   \n";
     fftp << " 			   ExtB0_D2_in,                                                   \n";
     fftp << " 			   ExtB0_D3_in,                                                   \n";
     fftp << " 			   ExtB0_D4_in,                                                   \n";
     fftp << " 			   ExtB0_D5_in,                                                   \n";
     fftp << " 			   ExtB0_D6_in,                                                   \n";
     fftp << " 			   ExtB0_D7_in,                                                   \n";
     fftp << " 			   ExtB1_D0_in,                                                   \n";
     fftp << " 			   ExtB1_D1_in,                                                   \n";
     fftp << " 			   ExtB1_D2_in,                                                   \n";
     fftp << " 			   ExtB1_D3_in,                                                   \n";
     fftp << " 			   ExtB1_D4_in,                                                   \n";
     fftp << " 			   ExtB1_D5_in,                                                   \n";
     fftp << " 			   ExtB1_D6_in,                                                   \n";
     fftp << " 			   ExtB1_D7_in,                                                   \n";
     fftp << " 			   N_in,                                                          \n";
     fftp << " 			   ExtValid_in,                                                   \n";
     fftp << "             rst_n,                                                         \n";
     fftp << "             clk                                                            \n";
     fftp << "             ) ;                                                            \n";
     fftp << " 			                                                                  \n";
     fftp << " parameter CP_WIDTH    = " << CP_width           << ";\n"; 			                              
     fftp << " parameter DOP_WIDTH   = " << (2*CP_width)       << ";\n"; 			                              
     fftp << " parameter HP_WIDTH    = 32 ; 			                                  \n";
     fftp << " parameter P_WIDTH     = 64 ; 			                                  \n";
     fftp << " parameter A_WIDTH     = " << addr_width <<";\n";
     fftp << " parameter SD_WIDTH    = 128 ;                                              \n";
     fftp << " parameter ROMA_WIDTH  = " << ROM_width  << ";\n";
     fftp << " parameter IREMA_WIDTH = " << IReROM_width   << ";\n";
	 fftp << " parameter DC_WIDTH    = " << data_cnt_width << ";\n";
     fftp << " parameter OUT_PIPE_WIDTH   = "<< 64-(2*CP_width) <<";\n";
	 fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " output                MulValid_out ;                                       \n";
     fftp << "                                                                            \n";
     fftp << " output[CP_WIDTH-1:0]   MulD0_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD1_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD2_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD3_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD4_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD5_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD6_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD7_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD8_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD9_out ;                                          \n";
     fftp << " output[CP_WIDTH-1:0]   MulD10_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD11_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD12_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD13_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD14_out ;                                         \n";
     fftp << " output[CP_WIDTH-1:0]   MulD15_out ;                                         \n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D0_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D1_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D2_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D3_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D4_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D5_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D6_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB0_D7_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D0_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D1_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D2_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D3_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D4_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D5_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D6_in ;                                         \n";
     fftp << " input  [CP_WIDTH-1:0] ExtB1_D7_in ;                                         \n";
     fftp << " input  [P_WIDTH-1:0] N_in ;                                                \n";
     fftp << " input                ExtValid_in ;                                         \n";
     fftp << " input                rst_n ;                                               \n";
     fftp << " input                clk ;                                                 \n";
	 fftp << " //============================================= \n";
	 fftp << " //twiddle factor fft type data                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM0_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM1_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM2_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM3_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM4_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM5_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM6_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b0ROM7_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM0_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM1_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM2_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM3_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM4_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM5_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM6_wire;                  \n";
	 fftp << " wire [SD_WIDTH-1:0]  H_b1ROM7_wire;                  \n";
	 fftp << "                                                 \n";
	 fftp << " wire 			   BN_TWI_wire;                \n";
	 fftp << " wire [A_WIDTH-1:0]  MA_TWI_wire;                \n";
	 fftp << "                                                 \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix0_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix1_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix2_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix3_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix4_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix5_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix6_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix7_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix8_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix9_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix10_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix11_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix12_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix13_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix14_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix15_wire;             \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix0_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix1_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix2_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix3_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix4_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix5_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix6_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix7_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix8_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix9_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix10_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix11_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix12_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix13_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix14_pip_wire;         \n";
	 fftp << " wire [P_WIDTH-1:0]  TWIradix15_pip_wire;         \n";
	 fftp << "  //r4_inpipeReg wire============================    \n";
	 fftp << "                                                     \n";
	 fftp << "  wire                ExtValid_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D0_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D1_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D2_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D3_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D4_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D5_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D6_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D7_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D8_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D9_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D10_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D11_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D12_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D13_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D14_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D15_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D0_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D1_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D2_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D3_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D4_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D5_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D6_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D7_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D8_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D9_wire  ;               \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D10_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D11_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D12_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D13_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D14_wire  ;              \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D15_wire  ;              \n";
	 fftp << "                                                     \n";
	 fftp << "  //-----------------------------------              \n";
	 fftp << "  wire  [A_WIDTH-1:0] REMA_wire;                  \n";
	 fftp << "  wire  [IREMA_WIDTH-1:0] IREMA;                  \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D0_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D1_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D2_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D3_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D4_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D5_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D6_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D7_pip_wire ;        \n";	 
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D0_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D1_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D2_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D3_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D4_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D5_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D6_pip_wire ;        \n";
	 fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D7_pip_wire ;        \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M0_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M1_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M2_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M3_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M4_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M5_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M6_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M7_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M8_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M9_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M10_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M11_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M12_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M13_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M14_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M15_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M0_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M1_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M2_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M3_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M4_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M5_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M6_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M7_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M8_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M9_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M10_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M11_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M12_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M13_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M14_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B0M15_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M0_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M1_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M2_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M3_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M4_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M5_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M6_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M7_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M8_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M9_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M10_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M11_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M12_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M13_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M14_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M15_a_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M0_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M1_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M2_b_o_wire;             \n";
	 fftp << "  wire  [CP_WIDTH-1:0] B1M3_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M4_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M5_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M6_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M7_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M8_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M9_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M10_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M11_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M12_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M13_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M14_b_o_wire;             \n";  
	 fftp << "  wire  [CP_WIDTH-1:0] B1M15_b_o_wire;             \n";  
	 fftp << "                                                  \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M0_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M1_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M2_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M3_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M4_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M5_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M6_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M7_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M8_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M9_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M10_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M11_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M12_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M13_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M14_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B0M15_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M0_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M1_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M2_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M3_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M4_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M5_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M6_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M7_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M8_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M9_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M10_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M11_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M12_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M13_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M14_result_wire;          \n";
	 fftp << "  wire  [CP_WIDTH-1:0]  B1M15_result_wire;          \n";
	 fftp << "                                                  \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S0_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S1_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S2_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S3_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S4_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S5_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S6_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S7_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S8_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S9_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S10_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S11_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S12_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S13_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S14_wire;                \n";
	 fftp << "  wire [CP_WIDTH-1:0]  BR_S15_wire;                \n";
	 fftp << "                                                  \n";
     //*********************************
     // modify at 2021/02/18
     //********************************
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM0_wire;          \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM1_wire;          \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM2_wire;          \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  reorderROM3_wire;          \n";
	 fftp << "                                                   \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM0_wire;         \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM1_wire;         \n";
	 fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM2_wire;         \n";
	 fftp << "  wire  [P_WIDTH-1:0]   ireorderROM3_wire;         \n";
     //--------------------------------------------------------------------
     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM0_wire_reg_in;          \n";
     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM1_wire_reg_in;          \n";
     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM2_wire_reg_in;          \n";
     fftp << "  wire  [SD_WIDTH-1:0]  reorderROM3_wire_reg_in;          \n";
     fftp << "                                                          \n";
     fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM0_wire_reg_in;         \n";
     fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM1_wire_reg_in;         \n";
     fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM2_wire_reg_in;         \n";
     fftp << "  wire  [P_WIDTH-1:0]   ireorderROM3_wire_reg_in;         \n";
     //----------------------------------------------------------------------
	 fftp << "                                                  \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r0;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r1;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r2;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r3;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r4;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r5;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r6;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r7;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r8;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r9;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r10;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r11;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r12;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r13;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r14;                \n";
	 fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r15;                \n";
	 fftp << "                                                  \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD0_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD1_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD2_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD3_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD4_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD5_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD6_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD7_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD8_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD9_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD10_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD11_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD12_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD13_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD14_pip_wire;      \n";
	 fftp << "  wire  [P_WIDTH-1:0] CRUD15_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR0_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR1_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR2_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR3_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR4_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR5_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR6_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR7_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR8_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR9_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR10_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR11_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR12_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR13_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR14_pip_wire;      \n";
	 fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR15_pip_wire;      \n";
	 fftp << "                                                  \n";
	 fftp << "  wire                 BND_wire_pipo ;            \n";
	 fftp << "  wire [DC_WIDTH-1:0]  data_cnt_wire_pipo ;       \n";
	 fftp << "                                                  \n";
	 fftp << "  //==============================================\n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out0 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out1 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out2 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out3 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out4 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out5 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out6 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out7 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out8 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out9 ;                                           \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out10 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out11 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out12 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out13 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out14 ;                                          \n";
     fftp << " wire [SD_WIDTH-1:0]  Data_out15 ;                                          \n";
     fftp << " wire                 cen_wire ;                                            \n";
     fftp << " wire                 wen0_wire ;                                           \n";
     fftp << " wire                 wen1_wire ;                                           \n";
     fftp << " wire                 SD_sel_wire ;                                         \n";
     fftp << " wire [A_WIDTH-1:0]   ExtMA_wire ;                                          \n";
     fftp << " wire [A_WIDTH-1:0]   AGUMA_wire ;                                          \n";
     fftp << " wire [A_WIDTH-1:0]   MA0_wire ;                                            \n";
     fftp << " wire [A_WIDTH-1:0]   MA1_wire ;                                            \n";
     fftp << " wire                 AGU_en_wire ;                                         \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM0_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM1_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM2_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM3_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM4_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM5_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM6_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN0_MEM7_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM0_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM1_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM2_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM3_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM4_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM5_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM6_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]  BN1_MEM7_wire ;                                       \n";
     fftp << " wire                 BN_wire ;                                             \n";
     fftp << " wire [P_WIDTH-1:0]   RA0D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA1D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA2D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA3D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA4D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA5D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA6D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA7D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA8D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA9D_in_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   RA10D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA11D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA12D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA13D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA14D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA15D_in_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA0D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA1D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA2D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA3D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA4D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA5D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA6D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA7D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA8D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA9D_out_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RA10D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA11D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA12D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA13D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA14D_out_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RA15D_out_wire ;                                      \n";
     fftp << "                                                                            \n";
     fftp << " wire                 RomCen_wire ;                                         \n";
     fftp << " wire [ROMA_WIDTH-1:0] ROMA_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   ROMD0_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD1_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD2_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD3_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD4_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD5_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD6_out_wire ;                                      \n";
     fftp << " wire [SD_WIDTH-1:0]  ROMD7_out_wire ;                                      \n";
     fftp << " wire [1:0]           Mul_sel_wire ;                                        \n";
     fftp << " wire [P_WIDTH-1:0]   MulB0_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB1_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB2_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB3_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB5_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB6_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB7_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB8_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB9_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulB10_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB11_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB12_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB13_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB14_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulB15_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod0_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod1_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod2_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod3_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod4_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod5_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod6_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod7_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod8_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod9_out_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod10_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod11_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod12_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod13_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod14_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   MulMod15_out_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out0_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out1_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out2_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out3_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out4_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out5_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out6_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out7_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out8_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out9_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out10_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out11_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out12_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out13_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out14_wire ;                                      \n";
     fftp << " wire [P_WIDTH-1:0]   RDC_out15_wire ;                                      \n";
     fftp << " wire [3:0]           RDC_sel_wire ;                                        \n";
     fftp << " wire                 BND_wire ;                                            \n";
     fftp << " wire [A_WIDTH-1:0]   WMA_wire ;                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire [DC_WIDTH-1:0]  data_cnt_wire ;                                       \n";
     fftp << " wire [1:0]           DC_mode_sel_wire ;                                    \n";
     fftp << " wire                 BU_mode_sel_wire ;                                    \n";
     fftp << " wire                 BU_dc_sel_wire ;                                      \n";
     fftp << "                                                                            \n";
     fftp << " wire                 mode_sel_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]   MulA1_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA2_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA3_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA5_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA6_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA7_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA9_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   MulA10_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA11_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA12_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA13_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA14_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   MulA15_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   IFFTROMD0_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD1_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD2_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD3_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD4_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD5_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD6_out_wire ;                                  \n";
     fftp << " wire [SD_WIDTH-1:0]  IFFTROMD7_out_wire ;                                  \n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire                 rc_sel_wire ; //modify 2020/02/24                     \n";
     fftp << " wire                 m2_sel_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD0_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD1_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD2_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD3_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD5_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD6_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD7_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD8_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD9_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD10_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD11_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD12_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD13_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD14_wire ;                                         \n";
     fftp << " wire [P_WIDTH-1:0]   CRUD15_wire ;                                         \n";
     fftp << "                                                                            \n";
     fftp << " wire                  mode_sel_D_wire ;                                    \n";
     fftp << " wire [1:0]            Mul_sel_D_wire ;                                     \n";
     fftp << " wire [3:0]            RDC_sel_D_wire ;                                     \n";
	 fftp << " wire [1:0]            DC_mode_sel_D_wire ;                                 \n";
	 fftp << " wire                  BU_mode_sel_D_wire ;                                 \n";
	 fftp << " wire                  BU_dc_sel_D_wire ;                                   \n";
     fftp << " wire                  wrfd_en_wire ;                                       \n";
     fftp << "                                                                            \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out0_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out1_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out2_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out3_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out4_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out5_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out6_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out7_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out8_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out9_D_wire ;                                    \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out10_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out11_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out12_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out13_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out14_D_wire ;                                   \n";
     fftp << " wire [P_WIDTH-1:0]    RDC_out15_D_wire ;                                   \n";
     fftp << "                                                                            \n";
     fftp << "                                                                            \n";
     fftp << " wire [P_WIDTH-1:0]    N_D4_wire ;                                          \n";
     fftp << " wire [P_WIDTH-1:0]    ROMD0_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD1_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD2_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD3_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD4_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD5_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD6_D_wire ;                                       \n";
     fftp << " wire [SD_WIDTH-1:0]   ROMD7_D_wire ;                                       \n";
     fftp << " wire [P_WIDTH-1:0]    IFFTROMD0_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD1_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD2_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD3_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD4_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD5_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD6_D_wire ;                                   \n";
     fftp << " wire [SD_WIDTH-1:0]   IFFTROMD7_D_wire ;                                   \n";
     fftp << "                                                                            \n";
	 fftp << "     Rectrl u_Rectrl(                        \n";
	 fftp << "             .REMA(REMA_wire),               \n";
	 fftp << "             .ExtValid_in(ExtValid_in),      \n";
	 fftp << "             .rst_n(rst_n),                  \n";
	 fftp << "             .clk(clk)                       \n";
	 fftp << "     );                                      \n";     
	 fftp << "                                                                            \n";
     fftp << " 	//                                                                        \n";
fftp << "     R16_InpipeReg u_r16_inpipreg(                            \n";
fftp << "             .ExtValid_in(ExtValid_in),                     \n";
fftp << "             .ExtB0_D0_in(ExtB0_D0_in),                     \n";
fftp << "             .ExtB0_D1_in(ExtB0_D1_in),                     \n";
fftp << "             .ExtB0_D2_in(ExtB0_D2_in),                     \n";
fftp << "             .ExtB0_D3_in(ExtB0_D3_in),                     \n";
fftp << "             .ExtB0_D4_in(ExtB0_D4_in),                     \n";
fftp << "             .ExtB0_D5_in(ExtB0_D5_in),                     \n";
fftp << "             .ExtB0_D6_in(ExtB0_D6_in),                     \n";
fftp << "             .ExtB0_D7_in(ExtB0_D7_in),                     \n";
fftp << "             .ExtB1_D0_in(ExtB1_D0_in),                     \n";
fftp << "             .ExtB1_D1_in(ExtB1_D1_in),                     \n";
fftp << "             .ExtB1_D2_in(ExtB1_D2_in),                     \n";
fftp << "             .ExtB1_D3_in(ExtB1_D3_in),                     \n";
fftp << "             .ExtB1_D4_in(ExtB1_D4_in),                     \n";
fftp << "             .ExtB1_D5_in(ExtB1_D5_in),                     \n";
fftp << "             .ExtB1_D6_in(ExtB1_D6_in),                     \n";
fftp << "             .ExtB1_D7_in(ExtB1_D7_in),                     \n";
fftp << "             .ExtValid_out(ExtValid_wire),                  \n";
fftp << "             .ExtB0_D0_out(ExtB0_D0_pip_wire),              \n";
fftp << "             .ExtB0_D1_out(ExtB0_D1_pip_wire),              \n";
fftp << "             .ExtB0_D2_out(ExtB0_D2_pip_wire),              \n";
fftp << "             .ExtB0_D3_out(ExtB0_D3_pip_wire),              \n";
fftp << "             .ExtB0_D4_out(ExtB0_D4_pip_wire),              \n";
fftp << "             .ExtB0_D5_out(ExtB0_D5_pip_wire),              \n";
fftp << "             .ExtB0_D6_out(ExtB0_D6_pip_wire),              \n";
fftp << "             .ExtB0_D7_out(ExtB0_D7_pip_wire),              \n";
fftp << "             .ExtB1_D0_out(ExtB1_D0_pip_wire),              \n";
fftp << "             .ExtB1_D1_out(ExtB1_D1_pip_wire),              \n";
fftp << "             .ExtB1_D2_out(ExtB1_D2_pip_wire),              \n";
fftp << "             .ExtB1_D3_out(ExtB1_D3_pip_wire),              \n";
fftp << "             .ExtB1_D4_out(ExtB1_D4_pip_wire),              \n";
fftp << "             .ExtB1_D5_out(ExtB1_D5_pip_wire),              \n";
fftp << "             .ExtB1_D6_out(ExtB1_D6_pip_wire),              \n";
fftp << "             .ExtB1_D7_out(ExtB1_D7_pip_wire),              \n";
fftp << "             .rst_n        (rst_n),                         \n";
fftp << "             .clk          (clk)                            \n";
fftp << "     );                                                     \n";
fftp << "     //----------------------------------------------------    \n";
fftp << "     // Barrett reduction multiplier                           \n";
fftp << "     //input A and input B Mux                                 \n";
fftp << "     Mux5 u_Mux5(                                              \n";
fftp << "                 .B0M0_ain_o(B0M0_a_o_wire),                   \n";
fftp << "                 .B0M1_ain_o(B0M1_a_o_wire),                   \n";
fftp << "                 .B0M2_ain_o(B0M2_a_o_wire),                   \n";
fftp << "                 .B0M3_ain_o(B0M3_a_o_wire),                   \n";
fftp << "                 .B0M4_ain_o(B0M4_a_o_wire),                   \n";
fftp << "                 .B0M5_ain_o(B0M5_a_o_wire),                   \n";
fftp << "                 .B0M6_ain_o(B0M6_a_o_wire),                   \n";
fftp << "                 .B0M7_ain_o(B0M7_a_o_wire),                   \n";
fftp << "                 .B0M8_ain_o(B0M8_a_o_wire),                   \n";
fftp << "                 .B0M9_ain_o(B0M9_a_o_wire),                   \n";
fftp << "                 .B0M10_ain_o(B0M10_a_o_wire),                   \n";
fftp << "                 .B0M11_ain_o(B0M11_a_o_wire),                   \n";
fftp << "                 .B0M12_ain_o(B0M12_a_o_wire),                   \n";
fftp << "                 .B0M13_ain_o(B0M13_a_o_wire),                   \n";
fftp << "                 .B0M14_ain_o(B0M14_a_o_wire),                   \n";
fftp << "                 .B0M15_ain_o(B0M15_a_o_wire),                   \n";
fftp << "                 .B0M0_bin_o(B0M0_b_o_wire),                   \n";
fftp << "                 .B0M1_bin_o(B0M1_b_o_wire),                   \n";
fftp << "                 .B0M2_bin_o(B0M2_b_o_wire),                   \n";
fftp << "                 .B0M3_bin_o(B0M3_b_o_wire),                   \n";
fftp << "                 .B0M4_bin_o(B0M4_b_o_wire),                   \n";
fftp << "                 .B0M5_bin_o(B0M5_b_o_wire),                   \n";
fftp << "                 .B0M6_bin_o(B0M6_b_o_wire),                   \n";
fftp << "                 .B0M7_bin_o(B0M7_b_o_wire),                   \n";
fftp << "                 .B0M8_bin_o(B0M8_b_o_wire),                   \n";
fftp << "                 .B0M9_bin_o(B0M9_b_o_wire),                   \n";
fftp << "                 .B0M10_bin_o(B0M10_b_o_wire),                   \n";
fftp << "                 .B0M11_bin_o(B0M11_b_o_wire),                   \n";
fftp << "                 .B0M12_bin_o(B0M12_b_o_wire),                   \n";
fftp << "                 .B0M13_bin_o(B0M13_b_o_wire),                   \n";
fftp << "                 .B0M14_bin_o(B0M14_b_o_wire),                   \n";
fftp << "                 .B0M15_bin_o(B0M15_b_o_wire),                   \n";
fftp << "                 .ExtB0_D0_pip(ExtB0_D0_pip_wire),                 \n";
fftp << "                 .ExtB0_D1_pip(ExtB0_D1_pip_wire),                 \n";
fftp << "                 .ExtB0_D2_pip(ExtB0_D2_pip_wire),                 \n";
fftp << "                 .ExtB0_D3_pip(ExtB0_D3_pip_wire),                 \n";
fftp << "                 .ExtB0_D4_pip(ExtB0_D4_pip_wire),                 \n";
fftp << "                 .ExtB0_D5_pip(ExtB0_D5_pip_wire),                 \n";
fftp << "                 .ExtB0_D6_pip(ExtB0_D6_pip_wire),                 \n";
fftp << "                 .ExtB0_D7_pip(ExtB0_D7_pip_wire),                 \n";
fftp << "     		      .ExtB1_D0_pip(ExtB1_D0_pip_wire),                  \n";
fftp << "     		      .ExtB1_D1_pip(ExtB1_D1_pip_wire),                  \n";
fftp << "     		      .ExtB1_D2_pip(ExtB1_D2_pip_wire),                  \n";
fftp << "     		      .ExtB1_D3_pip(ExtB1_D3_pip_wire),                  \n";
fftp << "     		      .ExtB1_D4_pip(ExtB1_D4_pip_wire),                  \n";
fftp << "     		      .ExtB1_D5_pip(ExtB1_D5_pip_wire),                  \n";
fftp << "     		      .ExtB1_D6_pip(ExtB1_D6_pip_wire),                  \n";
fftp << "     		      .ExtB1_D7_pip(ExtB1_D7_pip_wire),                  \n";
fftp << "                 .SP_r0(SP_Data_r0),                           \n";
fftp << "                 .SP_r1(SP_Data_r1),                           \n";
fftp << "                 .SP_r2(SP_Data_r2),                           \n";
fftp << "                 .SP_r3(SP_Data_r3),                           \n";
fftp << "                 .SP_r4(SP_Data_r4),                           \n";
fftp << "                 .SP_r5(SP_Data_r5),                           \n";
fftp << "                 .SP_r6(SP_Data_r6),                           \n";
fftp << "                 .SP_r7(SP_Data_r7),                           \n";
fftp << "                 .SP_r8(SP_Data_r8),                           \n";
fftp << "                 .SP_r9(SP_Data_r9),                           \n";
fftp << "                 .SP_r10(SP_Data_r10),                           \n";
fftp << "                 .SP_r11(SP_Data_r11),                           \n";
fftp << "                 .SP_r12(SP_Data_r12),                           \n";
fftp << "                 .SP_r13(SP_Data_r13),                           \n";
fftp << "                 .SP_r14(SP_Data_r14),                           \n";
fftp << "                 .SP_r15(SP_Data_r15),                           \n";
//*****************************************************************************
int reorder_b0r0_ROM0_lsb;
int reorder_b0r1_ROM0_msb;
int reorder_b0r1_ROM0_lsb;
int reorder_b0r2_ROM0_msb;
int reorder_b0r2_ROM0_lsb;
int reorder_b0r3_ROM0_msb;
int reorder_b0r3_ROM0_lsb;
int reorder_b0r4_ROM0_msb;
int reorder_b0r4_ROM0_lsb;
// CP_width = 22 , 22*5 = 110 , CP_width = 25 , 25 * 5 = 125
// another part of Radix5 is stored in ROM1
int reorder_b0r5_ROM0_msb;
int reorder_b0r5_ROM1_lsb;
int reorder_b0r6_ROM1_msb;
int reorder_b0r6_ROM1_lsb;
int reorder_b0r7_ROM1_msb;
int reorder_b0r7_ROM1_lsb;

reorder_b0r0_ROM0_lsb = 128 - CP_width;
reorder_b0r1_ROM0_msb = reorder_b0r0_ROM0_lsb - 1;
reorder_b0r1_ROM0_lsb = reorder_b0r0_ROM0_lsb - CP_width;
reorder_b0r2_ROM0_msb = reorder_b0r1_ROM0_lsb - 1;
reorder_b0r2_ROM0_lsb = reorder_b0r1_ROM0_lsb - CP_width;
reorder_b0r3_ROM0_msb = reorder_b0r2_ROM0_lsb - 1;
reorder_b0r3_ROM0_lsb = reorder_b0r2_ROM0_lsb - CP_width;
reorder_b0r4_ROM0_msb = reorder_b0r3_ROM0_lsb - 1;
reorder_b0r4_ROM0_lsb = reorder_b0r3_ROM0_lsb - CP_width;
reorder_b0r5_ROM0_msb = reorder_b0r4_ROM0_lsb - 1;
reorder_b0r5_ROM1_lsb = 128 - ( CP_width - reorder_b0r4_ROM0_lsb);
reorder_b0r6_ROM1_msb = reorder_b0r5_ROM1_lsb - 1;
reorder_b0r6_ROM1_lsb = reorder_b0r5_ROM1_lsb - CP_width;
reorder_b0r7_ROM1_msb = reorder_b0r6_ROM1_lsb - 1;
reorder_b0r7_ROM1_lsb = reorder_b0r6_ROM1_lsb - CP_width;

//**********************************************************************************************************
fftp << "                 .reorderb0r0(reorderROM0_wire[127:"<< reorder_b0r0_ROM0_lsb<<"]),\n";
fftp << "                 .reorderb0r1(reorderROM0_wire[" << reorder_b0r1_ROM0_msb <<":"<<  reorder_b0r1_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r2(reorderROM0_wire[" << reorder_b0r2_ROM0_msb <<":"<<  reorder_b0r2_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r3(reorderROM0_wire[" << reorder_b0r3_ROM0_msb <<":"<<  reorder_b0r3_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r4(reorderROM0_wire[" << reorder_b0r4_ROM0_msb <<":"<<  reorder_b0r4_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r5({reorderROM0_wire["<< reorder_b0r5_ROM0_msb <<":0],reorderROM1_wire[127:"<< reorder_b0r5_ROM1_lsb <<"]}),\n";
fftp << "                 .reorderb0r6(reorderROM1_wire[" << reorder_b0r6_ROM1_msb <<":"<<  reorder_b0r6_ROM1_lsb <<"]),\n";
fftp << "                 .reorderb0r7(reorderROM1_wire[" << reorder_b0r7_ROM1_msb <<":"<<  reorder_b0r7_ROM1_lsb <<"]),\n";
//****************************************
int ireorder_r0_ROM0_lsb;
int ireorder_r1_ROM0_msb;
int ireorder_r1_ROM0_lsb;
int ireorder_r2_ROM0_msb;
int ireorder_r2_ROM0_lsb;
int ireorder_r3_ROM0_msb;
int ireorder_r3_ROM0_lsb;
int ireorder_r4_ROM0_msb;
int ireorder_r4_ROM0_lsb;
//--------------
int ireorder_r5_ROM1_lsb;
int ireorder_r6_ROM1_msb;
int ireorder_r6_ROM1_lsb;
int ireorder_r7_ROM1_msb;
int ireorder_r7_ROM1_lsb;
int ireorder_r8_ROM1_msb;
int ireorder_r8_ROM1_lsb;
int ireorder_r9_ROM1_msb;
int ireorder_r9_ROM1_lsb;
//---------------
int ireorder_r10_ROM2_lsb;
int ireorder_r11_ROM2_msb;
int ireorder_r11_ROM2_lsb;
int ireorder_r12_ROM2_msb;
int ireorder_r12_ROM2_lsb;
int ireorder_r13_ROM2_msb;
int ireorder_r13_ROM2_lsb;
int ireorder_r14_ROM2_msb;
int ireorder_r14_ROM2_lsb;
//----------------
// 64 bits
int ireorder_r15_ROM3_lsb;

// r0 ~ r4
ireorder_r0_ROM0_lsb = 128 - CP_width;
ireorder_r1_ROM0_msb = ireorder_r0_ROM0_lsb - 1;
ireorder_r1_ROM0_lsb = ireorder_r0_ROM0_lsb - CP_width;
ireorder_r2_ROM0_msb = ireorder_r1_ROM0_lsb - 1;
ireorder_r2_ROM0_lsb = ireorder_r1_ROM0_lsb - CP_width;
ireorder_r3_ROM0_msb = ireorder_r2_ROM0_lsb - 1;
ireorder_r3_ROM0_lsb = ireorder_r2_ROM0_lsb - CP_width;
ireorder_r4_ROM0_msb = ireorder_r3_ROM0_lsb - 1;
ireorder_r4_ROM0_lsb = ireorder_r3_ROM0_lsb - CP_width;
// r5 ~ r9
ireorder_r5_ROM1_lsb = 128 - CP_width;
ireorder_r6_ROM1_msb = ireorder_r5_ROM1_lsb - 1;
ireorder_r6_ROM1_lsb = ireorder_r5_ROM1_lsb - CP_width;
ireorder_r7_ROM1_msb = ireorder_r6_ROM1_lsb - 1;
ireorder_r7_ROM1_lsb = ireorder_r6_ROM1_lsb - CP_width;
ireorder_r8_ROM1_msb = ireorder_r7_ROM1_lsb - 1;
ireorder_r8_ROM1_lsb = ireorder_r7_ROM1_lsb - CP_width;
ireorder_r9_ROM1_msb = ireorder_r8_ROM1_lsb - 1;
ireorder_r9_ROM1_lsb = ireorder_r8_ROM1_lsb - CP_width;
// r10 ~ r14
ireorder_r10_ROM2_lsb = 128 - CP_width;
ireorder_r11_ROM2_msb = ireorder_r10_ROM2_lsb - 1;
ireorder_r11_ROM2_lsb = ireorder_r10_ROM2_lsb - CP_width;
ireorder_r12_ROM2_msb = ireorder_r11_ROM2_lsb - 1;
ireorder_r12_ROM2_lsb = ireorder_r11_ROM2_lsb - CP_width;
ireorder_r13_ROM2_msb = ireorder_r12_ROM2_lsb - 1;
ireorder_r13_ROM2_lsb = ireorder_r12_ROM2_lsb - CP_width;
ireorder_r14_ROM2_msb = ireorder_r13_ROM2_lsb - 1;
ireorder_r14_ROM2_lsb = ireorder_r13_ROM2_lsb - CP_width;
// r15
ireorder_r15_ROM3_lsb = 64 - CP_width;

fftp << "                 .ireorderr0(ireorderROM0_wire[127:"<< ireorder_r0_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr1(ireorderROM0_wire["<< ireorder_r1_ROM0_msb <<":"<< ireorder_r1_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr2(ireorderROM0_wire["<< ireorder_r2_ROM0_msb <<":"<< ireorder_r2_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr3(ireorderROM0_wire["<< ireorder_r3_ROM0_msb <<":"<< ireorder_r3_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr4(ireorderROM0_wire["<< ireorder_r4_ROM0_msb <<":"<< ireorder_r4_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr5(ireorderROM1_wire[127:"<< ireorder_r5_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr6(ireorderROM1_wire["<< ireorder_r6_ROM1_msb <<":"<< ireorder_r6_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr7(ireorderROM1_wire["<< ireorder_r7_ROM1_msb <<":"<< ireorder_r7_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr8(ireorderROM1_wire["<< ireorder_r8_ROM1_msb <<":"<< ireorder_r8_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr9(ireorderROM1_wire["<< ireorder_r9_ROM1_msb <<":"<< ireorder_r9_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr10(ireorderROM2_wire[127:"<< ireorder_r10_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr11(ireorderROM2_wire["<< ireorder_r11_ROM2_msb <<":"<< ireorder_r11_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr12(ireorderROM2_wire["<< ireorder_r12_ROM2_msb <<":"<< ireorder_r12_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr13(ireorderROM2_wire["<< ireorder_r13_ROM2_msb <<":"<< ireorder_r13_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr14(ireorderROM2_wire["<< ireorder_r14_ROM2_msb <<":"<< ireorder_r14_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr15(ireorderROM3_wire[63:"<< ireorder_r15_ROM3_lsb <<"]),\n";
//-----------------------------------------------------------------------------
fftp << "     		.B1M0_ain_o(B1M0_a_o_wire),                        \n";
fftp << "     		.B1M1_ain_o(B1M1_a_o_wire),                        \n";
fftp << "     		.B1M2_ain_o(B1M2_a_o_wire),                        \n";
fftp << "     		.B1M3_ain_o(B1M3_a_o_wire),                        \n";
fftp << "     		.B1M4_ain_o(B1M4_a_o_wire),                        \n";
fftp << "     		.B1M5_ain_o(B1M5_a_o_wire),                        \n";
fftp << "     		.B1M6_ain_o(B1M6_a_o_wire),                        \n";
fftp << "     		.B1M7_ain_o(B1M7_a_o_wire),                        \n";
fftp << "     		.B1M8_ain_o(B1M8_a_o_wire),                        \n";
fftp << "     		.B1M9_ain_o(B1M9_a_o_wire),                        \n";
fftp << "     		.B1M10_ain_o(B1M10_a_o_wire),                        \n";
fftp << "     		.B1M11_ain_o(B1M11_a_o_wire),                        \n";
fftp << "     		.B1M12_ain_o(B1M12_a_o_wire),                        \n";
fftp << "     		.B1M13_ain_o(B1M13_a_o_wire),                        \n";
fftp << "     		.B1M14_ain_o(B1M14_a_o_wire),                        \n";
fftp << "     		.B1M15_ain_o(B1M15_a_o_wire),                        \n";
fftp << "     		.B1M0_bin_o(B1M0_b_o_wire),                        \n";
fftp << "     		.B1M1_bin_o(B1M1_b_o_wire),                        \n";
fftp << "     		.B1M2_bin_o(B1M2_b_o_wire),                        \n";
fftp << "     		.B1M3_bin_o(B1M3_b_o_wire),                        \n";
fftp << "     		.B1M4_bin_o(B1M4_b_o_wire),                        \n";
fftp << "     		.B1M5_bin_o(B1M5_b_o_wire),                        \n";
fftp << "     		.B1M6_bin_o(B1M6_b_o_wire),                        \n";
fftp << "     		.B1M7_bin_o(B1M7_b_o_wire),                        \n";
fftp << "     		.B1M8_bin_o(B1M8_b_o_wire),                        \n";
fftp << "     		.B1M9_bin_o(B1M9_b_o_wire),                        \n";
fftp << "     		.B1M10_bin_o(B1M10_b_o_wire),                        \n";
fftp << "     		.B1M11_bin_o(B1M11_b_o_wire),                        \n";
fftp << "     		.B1M12_bin_o(B1M12_b_o_wire),                        \n";
fftp << "     		.B1M13_bin_o(B1M13_b_o_wire),                        \n";
fftp << "     		.B1M14_bin_o(B1M14_b_o_wire),                        \n";
fftp << "     		.B1M15_bin_o(B1M15_b_o_wire),                        \n";
fftp << "     		.CRUD0(CRUD0_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD1(CRUD1_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD2(CRUD2_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD3(CRUD3_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD4(CRUD4_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD5(CRUD5_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD6(CRUD6_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD7(CRUD7_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD8(CRUD8_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD9(CRUD9_pip_wire[P_WIDTH-1:"<< (64 - 2 * CP_width) <<"]),          \n";
fftp << "     		.CRUD10(CRUD10_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD11(CRUD11_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD12(CRUD12_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD13(CRUD13_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD14(CRUD14_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
fftp << "     		.CRUD15(CRUD15_pip_wire[P_WIDTH-1:" << (64 - 2 * CP_width) << "]),          \n";
//*******************************************
int reorder_b1r0_ROM2_lsb;
int reorder_b1r1_ROM2_msb;
int reorder_b1r1_ROM2_lsb;
int reorder_b1r2_ROM2_msb;
int reorder_b1r2_ROM2_lsb;
int reorder_b1r3_ROM2_msb;
int reorder_b1r3_ROM2_lsb;
int reorder_b1r4_ROM2_msb;
int reorder_b1r4_ROM2_lsb;
// CP_width = 22 , 22*5 = 110 , CP_width = 25 , 25 * 5 = 125
// another part of Radix5 is stored in ROM1
int reorder_b1r5_ROM2_msb;
int reorder_b1r5_ROM3_lsb;
int reorder_b1r6_ROM3_msb;
int reorder_b1r6_ROM3_lsb;
int reorder_b1r7_ROM3_msb;
int reorder_b1r7_ROM3_lsb;

reorder_b1r0_ROM2_lsb = 128 - CP_width;
reorder_b1r1_ROM2_msb = reorder_b1r0_ROM2_lsb - 1;
reorder_b1r1_ROM2_lsb = reorder_b1r0_ROM2_lsb - CP_width;
reorder_b1r2_ROM2_msb = reorder_b1r1_ROM2_lsb - 1;
reorder_b1r2_ROM2_lsb = reorder_b1r1_ROM2_lsb - CP_width;
reorder_b1r3_ROM2_msb = reorder_b1r2_ROM2_lsb - 1;
reorder_b1r3_ROM2_lsb = reorder_b1r2_ROM2_lsb - CP_width;
reorder_b1r4_ROM2_msb = reorder_b1r3_ROM2_lsb - 1;
reorder_b1r4_ROM2_lsb = reorder_b1r3_ROM2_lsb - CP_width;
reorder_b1r5_ROM2_msb = reorder_b1r4_ROM2_lsb - 1;
reorder_b1r5_ROM3_lsb = 128 - ( CP_width - reorder_b1r4_ROM2_lsb);
reorder_b1r6_ROM3_msb = reorder_b1r5_ROM3_lsb - 1;
reorder_b1r6_ROM3_lsb = reorder_b1r5_ROM3_lsb - CP_width;
reorder_b1r7_ROM3_msb = reorder_b1r6_ROM3_lsb - 1;
reorder_b1r7_ROM3_lsb = reorder_b1r6_ROM3_lsb - CP_width;
//*******************************************
fftp << "                 .reorderb1r0(reorderROM2_wire[127:"<< reorder_b1r0_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r1(reorderROM2_wire[" << reorder_b1r1_ROM2_msb <<":"<<  reorder_b1r1_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r2(reorderROM2_wire[" << reorder_b1r2_ROM2_msb <<":"<<  reorder_b1r2_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r3(reorderROM2_wire[" << reorder_b1r3_ROM2_msb <<":"<<  reorder_b1r3_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r4(reorderROM2_wire[" << reorder_b1r4_ROM2_msb <<":"<<  reorder_b1r4_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r5({reorderROM2_wire[" << reorder_b1r5_ROM2_msb <<":0],reorderROM3_wire[127:"<<  reorder_b1r5_ROM3_lsb <<"]}),\n";  
fftp << "                 .reorderb1r6(reorderROM3_wire[" << reorder_b1r6_ROM3_msb <<":"<<  reorder_b1r6_ROM3_lsb <<"]),\n";
fftp << "                 .reorderb1r7(reorderROM3_wire[" << reorder_b1r7_ROM3_msb <<":"<<  reorder_b1r7_ROM3_lsb <<"]),\n";
fftp << "                 .re_sel(SD_sel_wire)                          \n";
//*******************************
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     Mux6 u_Mux6(                                              \n";
fftp << "             .ExtB0_D0(ExtB0_D0_wire),                         \n";
fftp << "             .ExtB0_D1(ExtB0_D1_wire),                         \n";
fftp << "             .ExtB0_D2(ExtB0_D2_wire),                         \n";
fftp << "             .ExtB0_D3(ExtB0_D3_wire),                         \n";
fftp << "             .ExtB0_D4(ExtB0_D4_wire),                         \n";
fftp << "             .ExtB0_D5(ExtB0_D5_wire),                         \n";
fftp << "             .ExtB0_D6(ExtB0_D6_wire),                         \n";
fftp << "             .ExtB0_D7(ExtB0_D7_wire),                         \n";
fftp << "             .ExtB0_D8(ExtB0_D8_wire),                         \n";
fftp << "             .ExtB0_D9(ExtB0_D9_wire),                         \n";
fftp << "             .ExtB0_D10(ExtB0_D10_wire),                         \n";
fftp << "             .ExtB0_D11(ExtB0_D11_wire),                         \n";
fftp << "             .ExtB0_D12(ExtB0_D12_wire),                         \n";
fftp << "             .ExtB0_D13(ExtB0_D13_wire),                         \n";
fftp << "             .ExtB0_D14(ExtB0_D14_wire),                         \n";
fftp << "             .ExtB0_D15(ExtB0_D15_wire),                         \n";
fftp << "             .MulD0_out(MulD0_out),                            \n";
fftp << "             .MulD1_out(MulD1_out),                            \n";
fftp << "             .MulD2_out(MulD2_out),                            \n";
fftp << "             .MulD3_out(MulD3_out),                            \n";
fftp << "             .MulD4_out(MulD4_out),                            \n";
fftp << "             .MulD5_out(MulD5_out),                            \n";
fftp << "             .MulD6_out(MulD6_out),                            \n";
fftp << "             .MulD7_out(MulD7_out),                            \n";
fftp << "             .MulD8_out(MulD8_out),                            \n";
fftp << "             .MulD9_out(MulD9_out),                            \n";
fftp << "             .MulD10_out(MulD10_out),                          \n";
fftp << "             .MulD11_out(MulD11_out),                          \n";
fftp << "             .MulD12_out(MulD12_out),                          \n";
fftp << "             .MulD13_out(MulD13_out),                          \n";
fftp << "             .MulD14_out(MulD14_out),                          \n";
fftp << "             .MulD15_out(MulD15_out),                          \n";
fftp << "             .B0M0_result(B0M0_result_wire),                   \n";
fftp << "             .B0M1_result(B0M1_result_wire),                   \n";
fftp << "             .B0M2_result(B0M2_result_wire),                   \n";
fftp << "             .B0M3_result(B0M3_result_wire),                   \n";
fftp << "             .B0M4_result(B0M4_result_wire),                   \n";
fftp << "             .B0M5_result(B0M5_result_wire),                   \n";
fftp << "             .B0M6_result(B0M6_result_wire),                   \n";
fftp << "             .B0M7_result(B0M7_result_wire),                   \n";
fftp << "             .B0M8_result(B0M8_result_wire),                   \n";
fftp << "             .B0M9_result(B0M9_result_wire),                   \n";
fftp << "             .B0M10_result(B0M10_result_wire),                 \n";
fftp << "             .B0M11_result(B0M11_result_wire),                 \n";
fftp << "             .B0M12_result(B0M12_result_wire),                 \n";
fftp << "             .B0M13_result(B0M13_result_wire),                 \n";
fftp << "             .B0M14_result(B0M14_result_wire),                 \n";
fftp << "             .B0M15_result(B0M15_result_wire),                 \n";
fftp << "             .ExtB1_D0(ExtB1_D0_wire),                         \n";
fftp << "             .ExtB1_D1(ExtB1_D1_wire),                         \n";
fftp << "             .ExtB1_D2(ExtB1_D2_wire),                         \n";
fftp << "             .ExtB1_D3(ExtB1_D3_wire),                         \n";
fftp << "             .ExtB1_D4(ExtB1_D4_wire),                         \n";
fftp << "             .ExtB1_D5(ExtB1_D5_wire),                         \n";
fftp << "             .ExtB1_D6(ExtB1_D6_wire),                         \n";
fftp << "             .ExtB1_D7(ExtB1_D7_wire),                         \n";
fftp << "             .ExtB1_D8(ExtB1_D8_wire),                         \n";
fftp << "             .ExtB1_D9(ExtB1_D9_wire),                         \n";
fftp << "             .ExtB1_D10(ExtB1_D10_wire),                         \n";
fftp << "             .ExtB1_D11(ExtB1_D11_wire),                         \n";
fftp << "             .ExtB1_D12(ExtB1_D12_wire),                         \n";
fftp << "             .ExtB1_D13(ExtB1_D13_wire),                         \n";
fftp << "             .ExtB1_D14(ExtB1_D14_wire),                         \n";
fftp << "             .ExtB1_D15(ExtB1_D15_wire),                         \n";
fftp << "             .BR_S0(BR_S0_wire),                               \n";
fftp << "             .BR_S1(BR_S1_wire),                               \n";
fftp << "             .BR_S2(BR_S2_wire),                               \n";
fftp << "             .BR_S3(BR_S3_wire),                               \n";
fftp << "             .BR_S4(BR_S4_wire),                               \n";
fftp << "             .BR_S5(BR_S5_wire),                               \n";
fftp << "             .BR_S6(BR_S6_wire),                               \n";
fftp << "             .BR_S7(BR_S7_wire),                               \n";
fftp << "             .BR_S8(BR_S8_wire),                               \n";
fftp << "             .BR_S9(BR_S9_wire),                               \n";
fftp << "             .BR_S10(BR_S10_wire),                               \n";
fftp << "             .BR_S11(BR_S11_wire),                               \n";
fftp << "             .BR_S12(BR_S12_wire),                               \n";
fftp << "             .BR_S13(BR_S13_wire),                               \n";
fftp << "             .BR_S14(BR_S14_wire),                               \n";
fftp << "             .BR_S15(BR_S15_wire),                               \n";
fftp << "             .B1M0_result(B1M0_result_wire),                   \n";
fftp << "             .B1M1_result(B1M1_result_wire),                   \n";
fftp << "             .B1M2_result(B1M2_result_wire),                   \n";
fftp << "             .B1M3_result(B1M3_result_wire),                   \n";
fftp << "             .B1M4_result(B1M4_result_wire),                   \n";
fftp << "             .B1M5_result(B1M5_result_wire),                   \n";
fftp << "             .B1M6_result(B1M6_result_wire),                   \n";
fftp << "             .B1M7_result(B1M7_result_wire),                   \n";
fftp << "             .B1M8_result(B1M8_result_wire),                   \n";
fftp << "             .B1M9_result(B1M9_result_wire),                   \n";
fftp << "             .B1M10_result(B1M10_result_wire),                 \n";
fftp << "             .B1M11_result(B1M11_result_wire),                 \n";
fftp << "             .B1M12_result(B1M12_result_wire),                 \n";
fftp << "             .B1M13_result(B1M13_result_wire),                 \n";
fftp << "             .B1M14_result(B1M14_result_wire),                 \n";
fftp << "             .B1M15_result(B1M15_result_wire),                 \n";
fftp << "             .m2_sel(m2_sel_wire)                              \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     R16_BU_outpipe u_R16_BU_outpipe(                                  \n"; 
fftp << "     		.CRUD0_o(CRUD0_pip_wire),                          \n";
fftp << "     		.CRUD1_o(CRUD1_pip_wire),                          \n";
fftp << "     		.CRUD2_o(CRUD2_pip_wire),                          \n";
fftp << "     		.CRUD3_o(CRUD3_pip_wire),                          \n";
fftp << "     		.CRUD4_o(CRUD4_pip_wire),                          \n";
fftp << "     		.CRUD5_o(CRUD5_pip_wire),                          \n";
fftp << "     		.CRUD6_o(CRUD6_pip_wire),                          \n";
fftp << "     		.CRUD7_o(CRUD7_pip_wire),                          \n";
fftp << "     		.CRUD8_o(CRUD8_pip_wire),                          \n";
fftp << "     		.CRUD9_o(CRUD9_pip_wire),                          \n";
fftp << "     		.CRUD10_o(CRUD10_pip_wire),                          \n";
fftp << "     		.CRUD11_o(CRUD11_pip_wire),                          \n";
fftp << "     		.CRUD12_o(CRUD12_pip_wire),                          \n";
fftp << "     		.CRUD13_o(CRUD13_pip_wire),                          \n";
fftp << "     		.CRUD14_o(CRUD14_pip_wire),                          \n";
fftp << "     		.CRUD15_o(CRUD15_pip_wire),                          \n";
fftp << "     		.BR0_o(BR0_pip_wire),                          \n";
fftp << "     		.BR1_o(BR1_pip_wire),                          \n";
fftp << "     		.BR2_o(BR2_pip_wire),                          \n";
fftp << "     		.BR3_o(BR3_pip_wire),                          \n";
fftp << "     		.BR4_o(BR4_pip_wire),                          \n";
fftp << "     		.BR5_o(BR5_pip_wire),                          \n";
fftp << "     		.BR6_o(BR6_pip_wire),                          \n";
fftp << "     		.BR7_o(BR7_pip_wire),                          \n";
fftp << "     		.BR8_o(BR8_pip_wire),                          \n";
fftp << "     		.BR9_o(BR9_pip_wire),                          \n";
fftp << "     		.BR10_o(BR10_pip_wire),                          \n";
fftp << "     		.BR11_o(BR11_pip_wire),                          \n";
fftp << "     		.BR12_o(BR12_pip_wire),                          \n";
fftp << "     		.BR13_o(BR13_pip_wire),                          \n";
fftp << "     		.BR14_o(BR14_pip_wire),                          \n";
fftp << "     		.BR15_o(BR15_pip_wire),                          \n";
fftp << "     		.CRUD0_i(CRUD0_wire),                \n";
fftp << "     		.CRUD1_i(CRUD1_wire),                \n";
fftp << "     		.CRUD2_i(CRUD2_wire),                \n";
fftp << "     		.CRUD3_i(CRUD3_wire),                \n";
fftp << "     		.CRUD4_i(CRUD4_wire),                \n";
fftp << "     		.CRUD5_i(CRUD5_wire),                \n";
fftp << "     		.CRUD6_i(CRUD6_wire),                \n";
fftp << "     		.CRUD7_i(CRUD7_wire),                \n";
fftp << "     		.CRUD8_i(CRUD8_wire),                \n";
fftp << "     		.CRUD9_i(CRUD9_wire),                \n";
fftp << "     		.CRUD10_i(CRUD10_wire),                \n";
fftp << "     		.CRUD11_i(CRUD11_wire),                \n";
fftp << "     		.CRUD12_i(CRUD12_wire),                \n";
fftp << "     		.CRUD13_i(CRUD13_wire),                \n";
fftp << "     		.CRUD14_i(CRUD14_wire),                \n";
fftp << "     		.CRUD15_i(CRUD15_wire),                \n";
fftp << "           .rst_n(rst_n),                                      \n";
fftp << "     		.clk(clk)                                           \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";                                             
fftp << "                                                               \n";
fftp << "     MulMod B0M0(                                              \n";
fftp << "             .A_in(B0M0_a_o_wire), //need to modify            \n";
fftp << "             .B_in(B0M0_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M0_result_wire)  //need to modify 4/19  \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M1(                                             \n";
fftp << "             .A_in(B0M1_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M1_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M1_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M2(                                             \n";
fftp << "             .A_in(B0M2_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M2_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M2_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M3(                                             \n";
fftp << "             .A_in(B0M3_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M3_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M3_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B0M4(                                             \n";
fftp << "             .A_in(B0M4_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M4_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M4_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M5(                                             \n";
fftp << "             .A_in(B0M5_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M5_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M5_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M6(                                             \n";
fftp << "             .A_in(B0M6_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M6_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M6_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M7(                                             \n";
fftp << "             .A_in(B0M7_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M7_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M7_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M8(                                             \n";
fftp << "             .A_in(B0M8_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M8_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M8_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M9(                                             \n";
fftp << "             .A_in(B0M9_a_o_wire),//need to modify 4/19        \n";
fftp << "             .B_in(B0M9_b_o_wire),                             \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M9_result_wire)//need to modify 4/19    \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M10(                                            \n";
fftp << "             .A_in(B0M10_a_o_wire),//need to modify 4/19       \n";
fftp << "             .B_in(B0M10_b_o_wire),                            \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M10_result_wire)//need to modify 4/19   \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M11(                                            \n";
fftp << "             .A_in(B0M11_a_o_wire),//need to modify 4/19       \n";
fftp << "             .B_in(B0M11_b_o_wire),                            \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M11_result_wire)//need to modify 4/19   \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M12(                                            \n";
fftp << "             .A_in(B0M12_a_o_wire),//need to modify 4/19       \n";
fftp << "             .B_in(B0M12_b_o_wire),                            \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M12_result_wire)//need to modify 4/19   \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M13(                                            \n";
fftp << "             .A_in(B0M13_a_o_wire),//need to modify 4/19       \n";
fftp << "             .B_in(B0M13_b_o_wire),                            \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M13_result_wire)//need to modify 4/19   \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M14(                                            \n";
fftp << "             .A_in(B0M14_a_o_wire),//need to modify 4/19       \n";
fftp << "             .B_in(B0M14_b_o_wire),                            \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M14_result_wire)//need to modify 4/19   \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B0M15(                                            \n";
fftp << "             .A_in(B0M15_a_o_wire),//need to modify 4/19       \n";
fftp << "             .B_in(B0M15_b_o_wire),                            \n";
fftp << "             .bypass(1'b0),                                    \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B0M15_result_wire)//need to modify 4/19   \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     MulMod B1M0(                                              \n";
fftp << "             .A_in(B1M0_a_o_wire),                             \n";
fftp << "             .B_in(B1M0_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M0_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B1M1(                                             \n";
fftp << "             .A_in(B1M1_a_o_wire),                             \n";
fftp << "             .B_in(B1M1_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M1_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B1M2(                                             \n";
fftp << "             .A_in(B1M2_a_o_wire),                             \n";
fftp << "             .B_in(B1M2_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M2_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "      MulMod B1M3(                                             \n";
fftp << "             .A_in(B1M3_a_o_wire),                             \n";
fftp << "             .B_in(B1M3_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M3_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M4(                                             \n";
fftp << "             .A_in(B1M4_a_o_wire),                             \n";
fftp << "             .B_in(B1M4_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M4_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M5(                                             \n";
fftp << "             .A_in(B1M5_a_o_wire),                             \n";
fftp << "             .B_in(B1M5_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M5_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M6(                                             \n";
fftp << "             .A_in(B1M6_a_o_wire),                             \n";
fftp << "             .B_in(B1M6_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M6_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M7(                                             \n";
fftp << "             .A_in(B1M7_a_o_wire),                             \n";
fftp << "             .B_in(B1M7_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M7_result_wire)                         \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M8(                                             \n";
fftp << "             .A_in(B1M8_a_o_wire),                             \n";
fftp << "             .B_in(B1M8_b_o_wire),                             \n";
fftp << "             .bypass(m2_sel_wire),                             \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M8_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M9(                                             \n";
fftp << "             .A_in(B1M9_a_o_wire),                         \n";
fftp << "             .B_in(B1M9_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M9_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M10(                                             \n";
fftp << "             .A_in(B1M10_a_o_wire),                         \n";
fftp << "             .B_in(B1M10_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M10_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M11(                                             \n";
fftp << "             .A_in(B1M11_a_o_wire),                         \n";
fftp << "             .B_in(B1M11_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M11_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M12(                                             \n";
fftp << "             .A_in(B1M12_a_o_wire),                         \n";
fftp << "             .B_in(B1M12_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M12_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M13(                                             \n";
fftp << "             .A_in(B1M13_a_o_wire),                         \n";
fftp << "             .B_in(B1M13_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M13_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M14(                                             \n";
fftp << "             .A_in(B1M14_a_o_wire),                         \n";
fftp << "             .B_in(B1M14_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M14_result_wire)                            \n";
fftp << "     );                                                        \n";
fftp << "      MulMod B1M15(                                             \n";
fftp << "             .A_in(B1M15_a_o_wire),                         \n";
fftp << "             .B_in(B1M15_b_o_wire),                    \n";
fftp << "             .bypass(m2_sel_wire),                                        \n";
fftp << "             .clk(clk),                                        \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .result(B1M15_result_wire)                            \n";
fftp << "     );                                                        \n";

int BR_bit_size;
int double_cp_width;
int padding_zero_number;

BR_bit_size = 64 - 2 * CP_width;
double_cp_width =  2 * CP_width;
padding_zero_number = double_cp_width - BR_bit_size - CP_width;


fftp << "     BR u_BR0(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S0_wire,BR0_pip_wire}), \n";
fftp << "             .result(SP_Data_r0),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR1(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S1_wire,BR1_pip_wire}),\n";
fftp << "             .result(SP_Data_r1),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR2(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S2_wire,BR2_pip_wire}),\n";
fftp << "             .result(SP_Data_r2),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR3(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S3_wire,BR3_pip_wire}),\n";
fftp << "             .result(SP_Data_r3),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "     BR u_BR4(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S4_wire,BR4_pip_wire}),\n";
fftp << "             .result(SP_Data_r4),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR5(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S5_wire,BR5_pip_wire}),\n";
fftp << "             .result(SP_Data_r5),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR6(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S6_wire,BR6_pip_wire}),\n";
fftp << "             .result(SP_Data_r6),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR7(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S7_wire,BR7_pip_wire}),\n";
fftp << "             .result(SP_Data_r7),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR8(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S8_wire,BR8_pip_wire}),\n";
fftp << "             .result(SP_Data_r8),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR9(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S9_wire,BR9_pip_wire}),\n";
fftp << "             .result(SP_Data_r9),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR10(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S10_wire,BR10_pip_wire}),\n";
fftp << "             .result(SP_Data_r10),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR11(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S11_wire,BR11_pip_wire}),\n";
fftp << "             .result(SP_Data_r11),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR12(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S12_wire,BR12_pip_wire}),\n";
fftp << "             .result(SP_Data_r12),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR13(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S13_wire,BR13_pip_wire}),\n";
fftp << "             .result(SP_Data_r13),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR14(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S14_wire,BR14_pip_wire}),\n";
fftp << "             .result(SP_Data_r14),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     BR u_BR15(                                                 \n";
fftp << "     		.S_in({"<< padding_zero_number <<"'b0,BR_S15_wire,BR15_pip_wire}),\n";
fftp << "             .result(SP_Data_r15),                              \n";
fftp << "             .rst_n(rst_n),                                    \n";
fftp << "             .clk(clk)	                                       \n";
fftp << "     );                                                        \n";
fftp << "                                                               \n";
fftp << "     //----------------------------------------------------    \n";
     fftp << " 	CenCtrl u_CenCtrl(.MulValid_out(MulValid_out),                            \n";
     fftp << " 			          .cen_out(cen_wire),                                     \n";
     fftp << " 			          .wen0_out(wen0_wire),                                   \n";
     fftp << " 			          .wen1_out(wen1_wire),                                   \n";
     fftp << " 			          .SD_sel_out(SD_sel_wire),                               \n";
     fftp << " 			          .ExtMA_out(ExtMA_wire),                                 \n";
     fftp << " 					  .AGU_en_out(AGU_en_wire),                               \n";
     fftp << " 					  .RomCen_out(RomCen_wire),                               \n";
     fftp << " 					  .mode_sel_out(mode_sel_wire),                           \n";
     fftp << " 					  .rc_sel_out(rc_sel_wire),                               \n";
     fftp << " 					  .m2_sel_out(m2_sel_wire),  //modify 2020/02/24          \n";
     fftp << " 					  .wrfd_en_out(wrfd_en_wire),                             \n";
     fftp << " 					  .data_cnt_in(data_cnt_wire),                            \n";
     fftp << " 					  .BND_in(BND_wire),                                      \n";
     fftp << " 			          .ExtValid_in(ExtValid_wire),                            \n";
     fftp << "                    .rst_n(rst_n),                                          \n";
     fftp << "                    .clk(clk)                                               \n";
     fftp << "                    ) ;                                                     \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	R16_AGU u_R16_AGU(.BN_out(BN_wire),                                       \n";
     fftp << " 			          .MA(AGUMA_wire),                                        \n";
     fftp << " 					  .ROMA(ROMA_wire),                                       \n";
     fftp << " 					  .Mul_sel_out(Mul_sel_wire),                             \n";
     fftp << " 					  .RDC_sel_out(RDC_sel_wire),                             \n";
     fftp << " 					  .data_cnt_reg(data_cnt_wire),                           \n";
     fftp << " 					  .BU_mode_sel_out(BU_mode_sel_wire),                     \n";
     fftp << " 					  .BU_dc_sel_out(BU_dc_sel_wire),                         \n";
     fftp << " 					  .DC_mode_sel_out(DC_mode_sel_wire),                     \n";
     fftp << " 					  .mode_sel_in(mode_sel_wire),                            \n";
     fftp << " 					  .rc_sel_in(rc_sel_wire),                                \n";
     fftp << " 			          .AGU_en(AGU_en_wire),                                   \n";
     fftp << " 					  .wrfd_en_in(wrfd_en_wire),                              \n";
     fftp << "                    .rst_n(rst_n),                                          \n";
     fftp << "                    .clk(clk)                                               \n";
     fftp << "                    ) ;                                                     \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//Control Signal Pipeline Register                                        \n";
     fftp << " 	Ctrl_PipeReg1 u_Ctrl_PipeReg1(.mode_sel_Dout(mode_sel_D_wire),            \n";
     fftp << " 				                  .Mul_sel_Dout(Mul_sel_D_wire),              \n";
     fftp << " 				                  .RDC_sel_Dout(RDC_sel_D_wire),              \n";
     fftp << " 				                  .BU_mode_sel_Dout(BU_mode_sel_D_wire),      \n";
     fftp << " 				                  .BU_dc_sel_Dout(BU_dc_sel_D_wire),          \n";
     fftp << " 				                  .DC_mode_sel_Dout(DC_mode_sel_D_wire),      \n";
     fftp << "                                .mode_sel_in(mode_sel_wire),                \n";
     fftp << " 			                      .Mul_sel_in(Mul_sel_wire),                  \n";
     fftp << " 			                      .RDC_sel_in(RDC_sel_wire),                  \n";
     fftp << " 			                      .BU_mode_sel_in(BU_mode_sel_wire),          \n";
     fftp << " 			                      .BU_dc_sel_in(BU_dc_sel_wire),              \n";
     fftp << " 			                      .DC_mode_sel_in(DC_mode_sel_wire),          \n";
     fftp << "                                .rst_n(rst_n),                              \n";
     fftp << "                                .clk(clk)                                   \n";
     fftp << "                                ) ;                                         \n";
     fftp << " 	R16_WAddr u_R16_WAddr(.BND_out(BND_wire),                                 \n";
	 fftp << " 			              .WMA_out(WMA_wire),                                 \n";
	 fftp << "                        .BN_in(BN_wire),                                    \n";
	 fftp << " 		                  .MA_in(AGUMA_wire),                                 \n";
	 fftp << "                        .rst_n(rst_n),                                      \n";
	 fftp << "                        .clk(clk)                                           \n";
	 fftp << "                        ) ;                                                 \n";
	 fftp << " 	                                                                          \n";
     fftp << "    //-----------------------------------------------------\n";
	 fftp << "	                                                       \n";
	 fftp << "    TWIMux u_TWIMux(                                       \n";
	 fftp << "				    .TWIradix0(TWIradix0_wire),            \n";
	 fftp << "					.TWIradix1(TWIradix1_wire),            \n";
	 fftp << "					.TWIradix2(TWIradix2_wire),            \n";
	 fftp << "					.TWIradix3(TWIradix3_wire),            \n";
	 fftp << "					.TWIradix4(TWIradix4_wire),            \n";
	 fftp << "					.TWIradix5(TWIradix5_wire),            \n";
	 fftp << "					.TWIradix6(TWIradix6_wire),            \n";
	 fftp << "					.TWIradix7(TWIradix7_wire),            \n";
	 fftp << "					.TWIradix8(TWIradix8_wire),            \n";
	 fftp << "					.TWIradix9(TWIradix9_wire),            \n";
	 fftp << "					.TWIradix10(TWIradix10_wire),            \n";
	 fftp << "					.TWIradix11(TWIradix11_wire),            \n";
	 fftp << "					.TWIradix12(TWIradix12_wire),            \n";
	 fftp << "					.TWIradix13(TWIradix13_wire),            \n";
	 fftp << "					.TWIradix14(TWIradix14_wire),            \n";
	 fftp << "					.TWIradix15(TWIradix15_wire),            \n";
	 fftp << "					.b0radix0(H_b0ROM0_wire[127:64]),                  \n";
	 fftp << "					.b0radix1(H_b0ROM0_wire[63:0]),                  \n";
	 fftp << "					.b0radix2(H_b0ROM1_wire[127:64]),                  \n";
	 fftp << "					.b0radix3(H_b0ROM1_wire[63:0]),                  \n";
	 fftp << "					.b0radix4(H_b0ROM2_wire[127:64]),                  \n";
	 fftp << "					.b0radix5(H_b0ROM2_wire[63:0]),                  \n";
	 fftp << "					.b0radix6(H_b0ROM3_wire[127:64]),                  \n";
	 fftp << "					.b0radix7(H_b0ROM3_wire[63:0]),                  \n";
	 fftp << "					.b0radix8(H_b0ROM4_wire[127:64]),                  \n";
	 fftp << "					.b0radix9(H_b0ROM4_wire[63:0]),                  \n";
	 fftp << "					.b0radix10(H_b0ROM5_wire[127:64]),                  \n";
	 fftp << "					.b0radix11(H_b0ROM5_wire[63:0]),                  \n";
	 fftp << "					.b0radix12(H_b0ROM6_wire[127:64]),                  \n";
	 fftp << "					.b0radix13(H_b0ROM6_wire[63:0]),                  \n";
	 fftp << "					.b0radix14(H_b0ROM7_wire[127:64]),                  \n";
	 fftp << "					.b0radix15(H_b0ROM7_wire[63:0]),                  \n";
	 fftp << "					.b1radix0(H_b1ROM0_wire[127:64]),                  \n";
	 fftp << "					.b1radix1(H_b1ROM0_wire[63:0]),                  \n";
	 fftp << "					.b1radix2(H_b1ROM1_wire[127:64]),                  \n";
	 fftp << "					.b1radix3(H_b1ROM1_wire[63:0]),                  \n";
	 fftp << "					.b1radix4(H_b1ROM2_wire[127:64]),                  \n";
	 fftp << "					.b1radix5(H_b1ROM2_wire[63:0]),                  \n";
	 fftp << "					.b1radix6(H_b1ROM3_wire[127:64]),                  \n";
	 fftp << "					.b1radix7(H_b1ROM3_wire[63:0]),                  \n";
	 fftp << "					.b1radix8(H_b1ROM4_wire[127:64]),                  \n";
	 fftp << "					.b1radix9(H_b1ROM4_wire[63:0]),                  \n";
	 fftp << "					.b1radix10(H_b1ROM5_wire[127:64]),                  \n";
	 fftp << "					.b1radix11(H_b1ROM5_wire[63:0]),                  \n";
	 fftp << "					.b1radix12(H_b1ROM6_wire[127:64]),                  \n";
	 fftp << "					.b1radix13(H_b1ROM6_wire[63:0]),                  \n";
	 fftp << "					.b1radix14(H_b1ROM7_wire[127:64]),                  \n";
	 fftp << "					.b1radix15(H_b1ROM7_wire[63:0]),                  \n";
	 fftp << "					.BN_wire(BN_TWI_wire)                  \n";
	 fftp << "	);                                                     \n";
	 fftp << "                                                           \n";
	 fftp << "	TWIpipe u_TWIpipe(                                     \n";
	 fftp << "					  .BN_out(BN_TWI_wire),                \n";
	 fftp << "					  .MA_out(MA_TWI_wire),                \n";
	 fftp << "	                  .TWIradix0_o(TWIradix0_pip_wire),    \n";
	 fftp << "	                  .TWIradix1_o(TWIradix1_pip_wire),    \n";
	 fftp << "	                  .TWIradix2_o(TWIradix2_pip_wire),    \n";
	 fftp << "	                  .TWIradix3_o(TWIradix3_pip_wire),    \n";
	 fftp << "	                  .TWIradix4_o(TWIradix4_pip_wire),    \n";
	 fftp << "	                  .TWIradix5_o(TWIradix5_pip_wire),    \n";
	 fftp << "	                  .TWIradix6_o(TWIradix6_pip_wire),    \n";
	 fftp << "	                  .TWIradix7_o(TWIradix7_pip_wire),    \n";
	 fftp << "	                  .TWIradix8_o(TWIradix8_pip_wire),    \n";
	 fftp << "	                  .TWIradix9_o(TWIradix9_pip_wire),    \n";
	 fftp << "	                  .TWIradix10_o(TWIradix10_pip_wire),    \n";
	 fftp << "	                  .TWIradix11_o(TWIradix11_pip_wire),    \n";
	 fftp << "	                  .TWIradix12_o(TWIradix12_pip_wire),    \n";
	 fftp << "	                  .TWIradix13_o(TWIradix13_pip_wire),    \n";
	 fftp << "	                  .TWIradix14_o(TWIradix14_pip_wire),    \n";
	 fftp << "	                  .TWIradix15_o(TWIradix15_pip_wire),    \n";
	 fftp << "	                  .BN_in(BN_wire),                     \n";
	 fftp << "	                  .MA_in(AGUMA_wire),                  \n";
	 fftp << "	                  .TWIradix0_i(TWIradix0_wire),        \n";
	 fftp << "	                  .TWIradix1_i(TWIradix1_wire),        \n";
	 fftp << "	                  .TWIradix2_i(TWIradix2_wire),        \n";
	 fftp << "	                  .TWIradix3_i(TWIradix3_wire),        \n";
	 fftp << "	                  .TWIradix4_i(TWIradix4_wire),        \n";
	 fftp << "	                  .TWIradix5_i(TWIradix5_wire),        \n";
	 fftp << "	                  .TWIradix6_i(TWIradix6_wire),        \n";
	 fftp << "	                  .TWIradix7_i(TWIradix7_wire),        \n";
	 fftp << "	                  .TWIradix8_i(TWIradix8_wire),        \n";
	 fftp << "	                  .TWIradix9_i(TWIradix9_wire),        \n";
	 fftp << "	                  .TWIradix10_i(TWIradix10_wire),        \n";
	 fftp << "	                  .TWIradix11_i(TWIradix11_wire),        \n";
	 fftp << "	                  .TWIradix12_i(TWIradix12_wire),        \n";
	 fftp << "	                  .TWIradix13_i(TWIradix13_wire),        \n";
	 fftp << "	                  .TWIradix14_i(TWIradix14_wire),        \n";
	 fftp << "	                  .TWIradix15_i(TWIradix15_wire),        \n";
	 fftp << "	                  .rst_n(rst_n),                       \n";
	 fftp << "	                  .clk(clk)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b0ROM0 u_H_b0ROM0(                                           \n";
	 fftp << "				.Q(H_b0ROM0_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "                                                           \n";
	 fftp << "   H_b0ROM1 u_H_b0ROM1(                                           \n";
	 fftp << "				.Q(H_b0ROM1_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "    );                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b0ROM2 u_H_b0ROM2(                                           \n";
	 fftp << "				.Q(H_b0ROM2_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "    			.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b0ROM3 u_H_b0ROM3(                                           \n";
	 fftp << "				.Q(H_b0ROM3_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM4 u_H_b0ROM4(                                           \n";
	 fftp << "				.Q(H_b0ROM4_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM5 u_H_b0ROM5(                                           \n";
	 fftp << "				.Q(H_b0ROM5_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM6 u_H_b0ROM6(                                           \n";
	 fftp << "				.Q(H_b0ROM6_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	H_b0ROM7 u_H_b0ROM7(                                           \n";
	 fftp << "				.Q(H_b0ROM7_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "  H_b1ROM0 u_H_b1ROM0(                                           \n";
	 fftp << "				.Q(H_b1ROM0_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "                                                           \n";
	 fftp << "	H_b1ROM1 u_H_b1ROM1(                                           \n";
	 fftp << "				.Q(H_b1ROM1_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b1ROM2 u_H_b1ROM2(                                           \n";
	 fftp << "				.Q(H_b1ROM2_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";
	 fftp << "	                                                       \n";
	 fftp << "	H_b1ROM3 u_H_b1ROM3(                                           \n";
	 fftp << "				.Q(H_b1ROM3_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM4 u_H_b1ROM4(                                           \n";
	 fftp << "				.Q(H_b1ROM4_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM5 u_H_b1ROM5(                                           \n";
	 fftp << "				.Q(H_b1ROM5_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM6 u_H_b1ROM6(                                           \n";
	 fftp << "				.Q(H_b1ROM6_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << "	H_b1ROM7 u_H_b1ROM7(                                           \n";
	 fftp << "				.Q(H_b1ROM7_wire),                             \n";
	 fftp << "				.CLK(clk),                                 \n";
	 fftp << "				.CEN(~AGU_en_wire),                        \n";
	 fftp << "				.A(MA_TWI_wire)                            \n";
	 fftp << "	);                                                     \n";   
	 fftp << " 	//for SRAM                                                                \n";
	 fftp << " 	Mux1 u_Mux1(.BN0_MEM0_Dout(BN0_MEM0_wire),                                \n";
	 fftp << " 			    .BN0_MEM1_Dout(BN0_MEM1_wire),                                \n";
	 fftp << " 				.BN0_MEM2_Dout(BN0_MEM2_wire),                                \n";
	 fftp << " 				.BN0_MEM3_Dout(BN0_MEM3_wire),                                \n";
	 fftp << " 			    .BN0_MEM4_Dout(BN0_MEM4_wire),                                \n";
	 fftp << " 			    .BN0_MEM5_Dout(BN0_MEM5_wire),                                \n";
	 fftp << " 			    .BN0_MEM6_Dout(BN0_MEM6_wire),                                \n";
	 fftp << " 			    .BN0_MEM7_Dout(BN0_MEM7_wire),                                \n";
	 fftp << " 			    .BN1_MEM0_Dout(BN1_MEM0_wire),                                \n";
	 fftp << " 			    .BN1_MEM1_Dout(BN1_MEM1_wire),                                \n";
	 fftp << " 				.BN1_MEM2_Dout(BN1_MEM2_wire),                                \n";
	 fftp << " 			    .BN1_MEM3_Dout(BN1_MEM3_wire),                                \n";
	 fftp << " 			    .BN1_MEM4_Dout(BN1_MEM4_wire),                                \n";
	 fftp << " 			    .BN1_MEM5_Dout(BN1_MEM5_wire),                                \n";
	 fftp << " 			    .BN1_MEM6_Dout(BN1_MEM6_wire),                                \n";
	 fftp << " 			    .BN1_MEM7_Dout(BN1_MEM7_wire),                                \n";
	 fftp << " 				.MA0_out(MA0_wire),                                           \n";
	 fftp << " 				.MA1_out(MA1_wire),                                           \n";
	 fftp << " 		        .ExtB0_D0_in(ExtB0_D0_wire),                                    \n";
	 fftp << " 			    .ExtB0_D1_in(ExtB0_D1_wire),                                    \n";
	 fftp << " 			    .ExtB0_D2_in(ExtB0_D2_wire),                                    \n";
	 fftp << " 			    .ExtB0_D3_in(ExtB0_D3_wire),                                    \n";
	 fftp << " 				.ExtB0_D4_in(ExtB0_D4_wire),                                    \n";
	 fftp << " 				.ExtB0_D5_in(ExtB0_D5_wire),                                    \n";
	 fftp << " 			    .ExtB0_D6_in(ExtB0_D6_wire),                                    \n";
	 fftp << " 			    .ExtB0_D7_in(ExtB0_D7_wire),                                    \n";
	 fftp << " 			    .ExtB0_D8_in(ExtB0_D8_wire),                                    \n";
	 fftp << " 			    .ExtB0_D9_in(ExtB0_D9_wire),                                    \n";
	 fftp << " 			    .ExtB0_D10_in(ExtB0_D10_wire),                                  \n";
	 fftp << " 			    .ExtB0_D11_in(ExtB0_D11_wire),                                  \n";
	 fftp << " 			    .ExtB0_D12_in(ExtB0_D12_wire),                                  \n";
	 fftp << " 			    .ExtB0_D13_in(ExtB0_D13_wire),                                  \n";
	 fftp << " 			    .ExtB0_D14_in(ExtB0_D14_wire),                                  \n";
	 fftp << " 			    .ExtB0_D15_in(ExtB0_D15_wire),                                  \n";
	 fftp << " 			    .ExtB1_D0_in(ExtB1_D0_wire),                                    \n";
	 fftp << " 			    .ExtB1_D1_in(ExtB1_D1_wire),                                    \n";
	 fftp << "              .ExtB1_D2_in(ExtB1_D2_wire),                                    \n";
	 fftp << " 			    .ExtB1_D3_in(ExtB1_D3_wire),                                    \n";
	 fftp << " 				.ExtB1_D4_in(ExtB1_D4_wire),                                    \n";
	 fftp << " 			    .ExtB1_D5_in(ExtB1_D5_wire),                                    \n";
	 fftp << " 			    .ExtB1_D6_in(ExtB1_D6_wire),                                    \n";
	 fftp << " 			    .ExtB1_D7_in(ExtB1_D7_wire),                                    \n";
	 fftp << " 			    .ExtB1_D8_in(ExtB1_D8_wire),                                    \n";
	 fftp << " 			    .ExtB1_D9_in(ExtB1_D9_wire),                                    \n";
	 fftp << " 			    .ExtB1_D10_in(ExtB1_D10_wire),                                  \n";
	 fftp << " 			    .ExtB1_D11_in(ExtB1_D11_wire),                                  \n";
	 fftp << " 			    .ExtB1_D12_in(ExtB1_D12_wire),                                  \n";
	 fftp << " 			    .ExtB1_D13_in(ExtB1_D13_wire),                                  \n";
	 fftp << " 			    .ExtB1_D14_in(ExtB1_D14_wire),                                  \n";
	 fftp << " 			    .ExtB1_D15_in(ExtB1_D15_wire),                                  \n";
	 fftp << " 				.RDC_in0(RDC_out0_D_wire),                                    \n";
	 fftp << " 				.RDC_in1(RDC_out1_D_wire),                                    \n";
	 fftp << " 				.RDC_in2(RDC_out2_D_wire),                                    \n";
	 fftp << " 				.RDC_in3(RDC_out3_D_wire),                                    \n";
	 fftp << " 				.RDC_in4(RDC_out4_D_wire),                                    \n";
	 fftp << " 			    .RDC_in5(RDC_out5_D_wire),                                    \n";
	 fftp << " 			    .RDC_in6(RDC_out6_D_wire),                                    \n";
	 fftp << " 			    .RDC_in7(RDC_out7_D_wire),                                    \n";
	 fftp << " 			    .RDC_in8(RDC_out8_D_wire),                                    \n";
	 fftp << " 			    .RDC_in9(RDC_out9_D_wire),                                    \n";
	 fftp << " 			    .RDC_in10(RDC_out10_D_wire),                                  \n";
	 fftp << " 			    .RDC_in11(RDC_out11_D_wire),                                  \n";
	 fftp << " 			    .RDC_in12(RDC_out12_D_wire),                                  \n";
	 fftp << " 			    .RDC_in13(RDC_out13_D_wire),                                  \n";
	 fftp << " 			    .RDC_in14(RDC_out14_D_wire),                                  \n";
	 fftp << " 			    .RDC_in15(RDC_out15_D_wire),                                  \n";
	 fftp << " 				.ExtMA_in(ExtMA_wire),                                        \n";
	 fftp << " 				.AGUMA_in(AGUMA_wire),                                        \n";
	 fftp << " 				.WMA_in(WMA_wire),                                            \n";
	 fftp << " 				.wen0_in(wen0_wire),                                          \n";
	 fftp << " 				.wen1_in(wen1_wire),                                          \n";
	 fftp << " 			    .SD_sel(SD_sel_wire)                                          \n";
	 fftp << " 			    ) ;                                                           \n";
	 fftp << " 	                                                                          \n";
	 fftp << " 	//for Radix-16                                                            \n";
     fftp << " 	Mux2 u_Mux2(.RA0_out(RA0D_in_wire),                                       \n";
     fftp << " 			    .RA1_out(RA1D_in_wire),                                       \n";
     fftp << " 			    .RA2_out(RA2D_in_wire),                                       \n";
     fftp << " 			    .RA3_out(RA3D_in_wire),                                       \n";
     fftp << " 				.RA4_out(RA4D_in_wire),                                       \n";
     fftp << " 			    .RA5_out(RA5D_in_wire),                                       \n";
     fftp << " 			    .RA6_out(RA6D_in_wire),                                       \n";
     fftp << " 			    .RA7_out(RA7D_in_wire),                                       \n";
     fftp << " 			    .RA8_out(RA8D_in_wire),                                       \n";
     fftp << " 			    .RA9_out(RA9D_in_wire),                                       \n";
     fftp << " 			    .RA10_out(RA10D_in_wire),                                     \n";
     fftp << " 			    .RA11_out(RA11D_in_wire),                                     \n";
     fftp << " 			    .RA12_out(RA12D_in_wire),                                     \n";
     fftp << " 			    .RA13_out(RA13D_in_wire),                                     \n";
     fftp << " 			    .RA14_out(RA14D_in_wire),                                     \n";
     fftp << " 			    .RA15_out(RA15D_in_wire),                                     \n";
     fftp << " 		        .BN0_MEM0_in(Data_out0),                                      \n";
     fftp << " 			    .BN0_MEM1_in(Data_out1),                                      \n";
     fftp << " 				.BN0_MEM2_in(Data_out2),                                      \n";
     fftp << " 				.BN0_MEM3_in(Data_out3),                                      \n";
     fftp << " 			    .BN0_MEM4_in(Data_out4),                                      \n";
     fftp << " 			    .BN0_MEM5_in(Data_out5),                                      \n";
     fftp << " 			    .BN0_MEM6_in(Data_out6),                                      \n";
     fftp << " 			    .BN0_MEM7_in(Data_out7),                                      \n";
     fftp << " 			    .BN1_MEM0_in(Data_out8),                                      \n";
     fftp << " 			    .BN1_MEM1_in(Data_out9),                                      \n";
     fftp << " 				.BN1_MEM2_in(Data_out10),                                     \n";
     fftp << " 			    .BN1_MEM3_in(Data_out11),                                     \n";
     fftp << " 			    .BN1_MEM4_in(Data_out12),                                     \n";
     fftp << " 			    .BN1_MEM5_in(Data_out13),                                     \n";
     fftp << " 			    .BN1_MEM6_in(Data_out14),                                     \n";
     fftp << " 			    .BN1_MEM7_in(Data_out15),                                     \n";
     fftp << " 			    .BN_sel(BN_wire)                                              \n";
     fftp << " 			    ) ;                                                           \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	Radix16_Pipe u_Radix16_Pipe(.RA0_out(RA0D_out_wire),                      \n";
     fftp << " 			                    .RA1_out(RA1D_out_wire),                      \n";
     fftp << " 			                    .RA2_out(RA2D_out_wire),                      \n";
     fftp << " 			                    .RA3_out(RA3D_out_wire),                      \n";
     fftp << " 					            .RA4_out(RA4D_out_wire),                      \n";
     fftp << " 			                    .RA5_out(RA5D_out_wire),                      \n";
     fftp << " 			                    .RA6_out(RA6D_out_wire),                      \n";
     fftp << " 			                    .RA7_out(RA7D_out_wire),                      \n";
     fftp << " 			                    .RA8_out(RA8D_out_wire),                      \n";
     fftp << " 			                    .RA9_out(RA9D_out_wire),                      \n";
     fftp << " 			                    .RA10_out(RA10D_out_wire),                    \n";
     fftp << " 			                    .RA11_out(RA11D_out_wire),                    \n";
     fftp << " 			                    .RA12_out(RA12D_out_wire),                    \n";
     fftp << " 			                    .RA13_out(RA13D_out_wire),                    \n";
     fftp << " 			                    .RA14_out(RA14D_out_wire),                    \n";
     fftp << " 			                    .RA15_out(RA15D_out_wire),                    \n";
     fftp << "                              .RA0_in(RA0D_in_wire),                        \n";
     fftp << " 			                    .RA1_in(RA1D_in_wire),                        \n";
     fftp << " 			                    .RA2_in(RA2D_in_wire),                        \n";
     fftp << " 			                    .RA3_in(RA3D_in_wire),                        \n";
     fftp << " 					            .RA4_in(RA4D_in_wire),                        \n";
     fftp << " 			                    .RA5_in(RA5D_in_wire),                        \n";
     fftp << " 			                    .RA6_in(RA6D_in_wire),                        \n";
     fftp << " 			                    .RA7_in(RA7D_in_wire),                        \n";
     fftp << " 			                    .RA8_in(RA8D_in_wire),                        \n";
     fftp << " 			                    .RA9_in(RA9D_in_wire),                        \n";
     fftp << " 			                    .RA10_in(RA10D_in_wire),                      \n";
     fftp << " 			                    .RA11_in(RA11D_in_wire),                      \n";
     fftp << " 			                    .RA12_in(RA12D_in_wire),                      \n";
     fftp << " 			                    .RA13_in(RA13D_in_wire),                      \n";
     fftp << " 			                    .RA14_in(RA14D_in_wire),                      \n";
     fftp << " 			                    .RA15_in(RA15D_in_wire),                      \n";
     fftp << " 			                    .BU_mode_sel(BU_mode_sel_D_wire),             \n";
     fftp << " 			                    .BU_dc_sel(BU_dc_sel_D_wire),                 \n";
     fftp << " 		                        .N_in(N_in),                                  \n";
     fftp << "                              .rst_n(rst_n),                                \n";
     fftp << "                              .clk(clk)                                     \n";
     fftp << "                              ) ;                                           \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	//for Mul                                                                 \n";
	 fftp << " 	Mux3 u_Mux3(.MulB0_out(MulB0_wire),                                       \n";
	 fftp << " 			    .MulB1_out(MulB1_wire),                                       \n";
	 fftp << " 			    .MulB2_out(MulB2_wire),                                       \n";
	 fftp << " 			    .MulB3_out(MulB3_wire),                                       \n";
	 fftp << " 				.MulB4_out(MulB4_wire),                                       \n";
	 fftp << " 			    .MulB5_out(MulB5_wire),                                       \n";
	 fftp << " 			    .MulB6_out(MulB6_wire),                                       \n";
	 fftp << " 			    .MulB7_out(MulB7_wire),                                       \n";
	 fftp << " 			    .MulB8_out(MulB8_wire),                                       \n";
	 fftp << " 			    .MulB9_out(MulB9_wire),                                       \n";
	 fftp << " 			    .MulB10_out(MulB10_wire),                                     \n";
	 fftp << " 			    .MulB11_out(MulB11_wire),                                     \n";
	 fftp << " 			    .MulB12_out(MulB12_wire),                                     \n";
	 fftp << " 			    .MulB13_out(MulB13_wire),                                     \n";
	 fftp << " 			    .MulB14_out(MulB14_wire),                                     \n";
	 fftp << " 			    .MulB15_out(MulB15_wire),                                     \n";
	 fftp << " 				.MulA1_out(MulA1_wire),                                       \n";
	 fftp << " 				.MulA2_out(MulA2_wire),                                       \n";
	 fftp << " 				.MulA3_out(MulA3_wire),                                       \n";
	 fftp << " 				.MulA4_out(MulA4_wire),                                       \n";
	 fftp << " 			    .MulA5_out(MulA5_wire),                                       \n";
	 fftp << " 			    .MulA6_out(MulA6_wire),                                       \n";
	 fftp << " 			    .MulA7_out(MulA7_wire),                                       \n";
	 fftp << " 			    .MulA9_out(MulA9_wire),                                       \n";
	 fftp << " 			    .MulA10_out(MulA10_wire),                                     \n";
	 fftp << " 			    .MulA11_out(MulA11_wire),                                     \n";
	 fftp << " 			    .MulA12_out(MulA12_wire),                                     \n";
	 fftp << " 			    .MulA13_out(MulA13_wire),                                     \n";
	 fftp << " 			    .MulA14_out(MulA14_wire),                                     \n";
	 fftp << " 			    .MulA15_out(MulA15_wire),                                     \n";
	 fftp << " 				.IFFTROMD0_in(IFFTROMD0_D_wire),                              \n";
	 fftp << " 				.IFFTROMD1_in(IFFTROMD1_D_wire),                              \n";
	 fftp << " 				.IFFTROMD2_in(IFFTROMD2_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD3_in(IFFTROMD3_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD4_in(IFFTROMD4_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD5_in(IFFTROMD5_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD6_in(IFFTROMD6_D_wire),                              \n";
	 fftp << " 			    .IFFTROMD7_in(IFFTROMD7_D_wire),                              \n";
	 fftp << "              .ROMD0_in(ROMD0_D_wire),                                      \n";
	 fftp << " 			    .ROMD1_in(ROMD1_D_wire),                                      \n";
	 fftp << " 				.ROMD2_in(ROMD2_D_wire),                                      \n";
	 fftp << " 				.ROMD3_in(ROMD3_D_wire),                                      \n";
	 fftp << " 			    .ROMD4_in(ROMD4_D_wire),                                      \n";
	 fftp << " 			    .ROMD5_in(ROMD5_D_wire),                                      \n";
	 fftp << " 			    .ROMD6_in(ROMD6_D_wire),                                      \n";
	 fftp << " 			    .ROMD7_in(ROMD7_D_wire),                                      \n";
	 fftp << " 		        .FFTBD0_in(TWIradix0_pip_wire),                               \n";
	 fftp << " 			    .FFTBD1_in(TWIradix1_pip_wire),                               \n";
     fftp << " 			    .FFTBD2_in(TWIradix2_pip_wire),                               \n";
     fftp << " 			    .FFTBD3_in(TWIradix3_pip_wire),                               \n";
     fftp << " 				.FFTBD4_in(TWIradix4_pip_wire),                               \n";
     fftp << " 			    .FFTBD5_in(TWIradix5_pip_wire),                               \n";
     fftp << " 			    .FFTBD6_in(TWIradix6_pip_wire),                               \n";
     fftp << " 			    .FFTBD7_in(TWIradix7_pip_wire),                               \n";
     fftp << " 			    .FFTBD8_in(TWIradix8_pip_wire),                               \n";
     fftp << " 			    .FFTBD9_in(TWIradix9_pip_wire),                               \n";
     fftp << " 			    .FFTBD10_in(TWIradix10_pip_wire),                              \n";
     fftp << " 			    .FFTBD11_in(TWIradix11_pip_wire),                             \n";
     fftp << " 			    .FFTBD12_in(TWIradix12_pip_wire),                             \n";
     fftp << " 			    .FFTBD13_in(TWIradix13_pip_wire),                             \n";
     fftp << " 			    .FFTBD14_in(TWIradix14_pip_wire),                             \n";
     fftp << " 			    .FFTBD15_in(TWIradix15_pip_wire),                             \n";
     fftp << " 				.RA1D_in(RA1D_out_wire),                                      \n";
     fftp << " 				.RA2D_in(RA2D_out_wire),                                      \n";
     fftp << " 				.RA3D_in(RA3D_out_wire),                                      \n";
     fftp << " 				.RA4D_in(RA4D_out_wire),                                      \n";
     fftp << " 			    .RA5D_in(RA5D_out_wire),                                      \n";
     fftp << " 			    .RA6D_in(RA6D_out_wire),                                      \n";
     fftp << " 			    .RA7D_in(RA7D_out_wire),                                      \n";
     fftp << " 			    .RA9D_in(RA9D_out_wire),                                      \n";
     fftp << " 			    .RA10D_in(RA10D_out_wire),                                    \n";
     fftp << " 			    .RA11D_in(RA11D_out_wire),                                    \n";
     fftp << " 			    .RA12D_in(RA12D_out_wire),                                    \n";
     fftp << " 			    .RA13D_in(RA13D_out_wire),                                    \n";
     fftp << " 			    .RA14D_in(RA14D_out_wire),                                    \n";
     fftp << " 			    .RA15D_in(RA15D_out_wire),                                    \n";
     fftp << " 			    .Mul_sel(Mul_sel_D_wire),                                     \n";
     fftp << " 				.mode_sel(mode_sel_D_wire)                                    \n";
     fftp << " 			    ) ;                                                           \n";
     
     fftp << " 	                                                                          \n";
     fftp << " 	//Pipeline Register                                                       \n";
     fftp << " 	R16_NPipeReg3 u_R16_NPipeReg3(.N_D4_out(N_D4_wire),                       \n";
     fftp << "                                   .N_in(N_in),                             \n";
     fftp << "                                   .rst_n(rst_n),                           \n";
     fftp << "                                   .clk(clk)                                \n";
     fftp << "                                   ) ;                                      \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u0_MulMod128(.S_out(MulMod0_out_wire),                          \n";
     fftp << "                         .A_in(RA0D_out_wire),                              \n";
     fftp << " 		                   .B_in(MulB0_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u1_MulMod128(.S_out(MulMod1_out_wire),                          \n";
     fftp << "                         .A_in(MulA1_wire),                                 \n";
     fftp << " 		                   .B_in(MulB1_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u2_MulMod128(.S_out(MulMod2_out_wire),                          \n";
     fftp << "                         .A_in(MulA2_wire),                                 \n";
     fftp << " 		                   .B_in(MulB2_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u3_MulMod128(.S_out(MulMod3_out_wire),                          \n";
     fftp << "                         .A_in(MulA3_wire),                                 \n";
     fftp << " 		                   .B_in(MulB3_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u4_MulMod128(.S_out(MulMod4_out_wire),                          \n";
     fftp << "                         .A_in(MulA4_wire),                                 \n";
     fftp << " 		                   .B_in(MulB4_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u5_MulMod128(.S_out(MulMod5_out_wire),                          \n";
     fftp << "                         .A_in(MulA5_wire),                                 \n";
     fftp << " 		                   .B_in(MulB5_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                         .clk(clk)                                          \n";
     fftp << "                         ) ;                                                \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u6_MulMod128(.S_out(MulMod6_out_wire),                          \n";
     fftp << "                            .A_in(MulA6_wire),                              \n";
     fftp << " 		                   .B_in(MulB6_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u7_MulMod128(.S_out(MulMod7_out_wire),                          \n";
     fftp << "                            .A_in(MulA7_wire),                              \n";
     fftp << " 		                   .B_in(MulB7_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u8_MulMod128(.S_out(MulMod8_out_wire),                          \n";
     fftp << "                            .A_in(RA8D_out_wire),                           \n";
     fftp << " 		                   .B_in(MulB8_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u9_MulMod128(.S_out(MulMod9_out_wire),                          \n";
     fftp << "                            .A_in(MulA9_wire),                              \n";
     fftp << " 		                   .B_in(MulB9_wire),                                 \n";
     fftp << " 		                   .N_in(N_D4_wire),                                  \n";
     fftp << " 						   .rst_n(rst_n),                                     \n";
     fftp << "                            .clk(clk)                                       \n";
     fftp << "                            ) ;                                             \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u10_MulMod128(.S_out(MulMod10_out_wire),                        \n";
     fftp << "                             .A_in(MulA10_wire),                            \n";
     fftp << " 		                    .B_in(MulB10_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u11_MulMod128(.S_out(MulMod11_out_wire),                        \n";
     fftp << "                             .A_in(MulA11_wire),                            \n";
     fftp << " 		                    .B_in(MulB11_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u12_MulMod128(.S_out(MulMod12_out_wire),                        \n";
     fftp << "                             .A_in(MulA12_wire),                            \n";
     fftp << " 		                    .B_in(MulB12_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u13_MulMod128(.S_out(MulMod13_out_wire),                        \n";
     fftp << "                             .A_in(MulA13_wire),                            \n";
     fftp << " 		                    .B_in(MulB13_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u14_MulMod128(.S_out(MulMod14_out_wire),                        \n";
     fftp << "                             .A_in(MulA14_wire),                            \n";
     fftp << " 		                    .B_in(MulB14_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	MulMod128 u15_MulMod128(.S_out(MulMod15_out_wire),                        \n";
     fftp << "                             .A_in(MulA15_wire),                            \n";
     fftp << " 		                    .B_in(MulB15_wire),                               \n";
     fftp << " 		                    .N_in(N_D4_wire),                                 \n";
     fftp << " 							.rst_n(rst_n),                                    \n";
     fftp << "                             .clk(clk)                                      \n";
     fftp << "                             ) ;                                            \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	R16_DC u_R16_DC(.RDC_out0(RDC_out0_wire),                                 \n";
	 fftp << " 			        .RDC_out1(RDC_out1_wire),                                 \n";
	 fftp << " 			        .RDC_out2(RDC_out2_wire),                                 \n";
	 fftp << " 			        .RDC_out3(RDC_out3_wire),                                 \n";
	 fftp << " 					.RDC_out4(RDC_out4_wire),                                 \n";
	 fftp << " 			        .RDC_out5(RDC_out5_wire),                                 \n";
	 fftp << " 			        .RDC_out6(RDC_out6_wire),                                 \n";
	 fftp << " 			        .RDC_out7(RDC_out7_wire),                                 \n";
	 fftp << " 			        .RDC_out8(RDC_out8_wire),                                 \n";
	 fftp << " 			        .RDC_out9(RDC_out9_wire),                                 \n";
	 fftp << " 			        .RDC_out10(RDC_out10_wire),                               \n";
	 fftp << " 			        .RDC_out11(RDC_out11_wire),                               \n";
	 fftp << " 			        .RDC_out12(RDC_out12_wire),                               \n";
	 fftp << " 			        .RDC_out13(RDC_out13_wire),                               \n";
	 fftp << " 			        .RDC_out14(RDC_out14_wire),                               \n";
	 fftp << " 			        .RDC_out15(RDC_out15_wire),                               \n";
	 fftp << "                  .RDC_in0(MulMod0_out_wire),                               \n";
	 fftp << " 		            .RDC_in1(MulMod1_out_wire),                               \n";
	 fftp << " 			        .RDC_in2(MulMod2_out_wire),                               \n";
	 fftp << " 			        .RDC_in3(MulMod3_out_wire),                               \n";
	 fftp << " 					.RDC_in4(MulMod4_out_wire),                               \n";
	 fftp << " 			        .RDC_in5(MulMod5_out_wire),                               \n";
	 fftp << " 			        .RDC_in6(MulMod6_out_wire),                               \n";
	 fftp << " 			        .RDC_in7(MulMod7_out_wire),                               \n";
	 fftp << " 			        .RDC_in8(MulMod8_out_wire),                               \n";
	 fftp << " 			        .RDC_in9(MulMod9_out_wire),                               \n";
	 fftp << " 			        .RDC_in10(MulMod10_out_wire),                             \n";
	 fftp << " 			        .RDC_in11(MulMod11_out_wire),                             \n";
	 fftp << " 			        .RDC_in12(MulMod12_out_wire),                             \n";
	 fftp << " 			        .RDC_in13(MulMod13_out_wire),                             \n";
	 fftp << " 			        .RDC_in14(MulMod14_out_wire),                             \n";
	 fftp << " 			        .RDC_in15(MulMod15_out_wire),                             \n";
	 fftp << " 			        .RDC_sel(RDC_sel_D_wire),                                 \n";
	 fftp << " 				    .DC_mode_sel_in(DC_mode_sel_D_wire),                      \n";
	 fftp << "                     .rst_n(rst_n),                                         \n";
	 fftp << "                     .clk(clk)                                              \n";
	 fftp << "                     ) ;                                                    \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//                                                                        \n";
     fftp << " 	R16_WD_buf u_R16_WD_buf(.RDC0_D_out(RDC_out0_D_wire),                     \n";
     fftp << " 			                .RDC1_D_out(RDC_out1_D_wire),                     \n";
     fftp << " 				            .RDC2_D_out(RDC_out2_D_wire),                     \n";
     fftp << " 				            .RDC3_D_out(RDC_out3_D_wire),                     \n";
     fftp << " 				            .RDC4_D_out(RDC_out4_D_wire),                     \n";
     fftp << " 				            .RDC5_D_out(RDC_out5_D_wire),                     \n";
     fftp << " 				            .RDC6_D_out(RDC_out6_D_wire),                     \n";
     fftp << " 				            .RDC7_D_out(RDC_out7_D_wire),                     \n";
     fftp << " 				            .RDC8_D_out(RDC_out8_D_wire),                     \n";
     fftp << " 				            .RDC9_D_out(RDC_out9_D_wire),                     \n";
     fftp << " 				            .RDC10_D_out(RDC_out10_D_wire),                   \n";
     fftp << " 				            .RDC11_D_out(RDC_out11_D_wire),                   \n";
     fftp << " 				            .RDC12_D_out(RDC_out12_D_wire),                   \n";
     fftp << " 				            .RDC13_D_out(RDC_out13_D_wire),                   \n";
     fftp << " 				            .RDC14_D_out(RDC_out14_D_wire),                   \n";
     fftp << " 				            .RDC15_D_out(RDC_out15_D_wire),                   \n";
     fftp << " 		                    .RDC0_in(RDC_out0_wire),                          \n";
     fftp << " 				            .RDC1_in(RDC_out1_wire),                          \n";
     fftp << " 				            .RDC2_in(RDC_out2_wire),                          \n";
     fftp << " 				            .RDC3_in(RDC_out3_wire),                          \n";
     fftp << " 				            .RDC4_in(RDC_out4_wire),                          \n";
     fftp << " 				            .RDC5_in(RDC_out5_wire),                          \n";
     fftp << " 				            .RDC6_in(RDC_out6_wire),                          \n";
     fftp << " 				            .RDC7_in(RDC_out7_wire),                          \n";
     fftp << " 				            .RDC8_in(RDC_out8_wire),                          \n";
     fftp << " 				            .RDC9_in(RDC_out9_wire),                          \n";
     fftp << " 				            .RDC10_in(RDC_out10_wire),                        \n";
     fftp << " 				            .RDC11_in(RDC_out11_wire),                        \n";
     fftp << " 				            .RDC12_in(RDC_out12_wire),                        \n";
     fftp << " 				            .RDC13_in(RDC_out13_wire),                        \n";
     fftp << " 				            .RDC14_in(RDC_out14_wire),                        \n";
     fftp << " 				            .RDC15_in(RDC_out15_wire),                        \n";
     fftp << "                          .rst_n(rst_n),                                    \n";
     fftp << "                          .clk(clk)                                         \n";
     fftp << "                          ) ;                                               \n";
     fftp << " 	                                                                          \n"; 
     fftp << " 	//-----------------------------------------------------                   \n";
     fftp << " 	// for CRUR16                                                             \n";
     fftp << " 	Mux4 u_Mux4(.CRUD0_out(CRUD0_wire),                                       \n";
     fftp << " 			    .CRUD1_out(CRUD1_wire),                                       \n";
     fftp << " 			    .CRUD2_out(CRUD2_wire),                                       \n";
     fftp << " 			    .CRUD3_out(CRUD3_wire),                                       \n";
     fftp << " 				.CRUD4_out(CRUD4_wire),                                       \n";
     fftp << " 			    .CRUD5_out(CRUD5_wire),                                       \n";
     fftp << " 			    .CRUD6_out(CRUD6_wire),                                       \n";
     fftp << " 			    .CRUD7_out(CRUD7_wire),                                       \n";
     fftp << " 			    .CRUD8_out(CRUD8_wire),                                       \n";
     fftp << " 			    .CRUD9_out(CRUD9_wire),                                       \n";
     fftp << " 			    .CRUD10_out(CRUD10_wire),                                     \n";
     fftp << " 			    .CRUD11_out(CRUD11_wire),                                     \n";
     fftp << " 			    .CRUD12_out(CRUD12_wire),                                     \n";
     fftp << " 			    .CRUD13_out(CRUD13_wire),                                     \n";
     fftp << " 			    .CRUD14_out(CRUD14_wire),                                     \n";
     fftp << " 			    .CRUD15_out(CRUD15_wire),                                     \n";
     fftp << " 			    .IFFTD0_in(RA0D_in_wire),                                     \n";
     fftp << "              .IFFTD1_in(RA1D_in_wire),                                     \n";
     fftp << "              .IFFTD2_in(RA2D_in_wire),                                     \n";
     fftp << "              .IFFTD3_in(RA3D_in_wire),                                     \n";
     fftp << " 				.IFFTD4_in(RA4D_in_wire),                                     \n";
     fftp << " 			    .IFFTD5_in(RA5D_in_wire),                                     \n";
     fftp << " 			    .IFFTD6_in(RA6D_in_wire),                                     \n";
     fftp << " 			    .IFFTD7_in(RA7D_in_wire),                                     \n";
     fftp << " 			    .IFFTD8_in(RA8D_in_wire),                                     \n";
     fftp << " 			    .IFFTD9_in(RA9D_in_wire),                                     \n";
     fftp << " 			    .IFFTD10_in(RA10D_in_wire),                                   \n";
     fftp << " 			    .IFFTD11_in(RA11D_in_wire),                                   \n";
     fftp << " 			    .IFFTD12_in(RA12D_in_wire),                                   \n";
     fftp << " 			    .IFFTD13_in(RA13D_in_wire),                                   \n";
     fftp << " 			    .IFFTD14_in(RA14D_in_wire),                                   \n";
     fftp << " 			    .IFFTD15_in(RA15D_in_wire),                                   \n";
     fftp << " 			    .m2_sel(m2_sel_wire)                                          \n";
     fftp << " 			    ) ;                                                           \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//Pipeline Register				                                          \n";
     fftp << " 	R16_ROMPipeReg1 u_R16_ROMPipeReg1(.ROMD0_Dout(ROMD0_D_wire),              \n";
     fftp << " 				                      .ROMD1_Dout(ROMD1_D_wire),              \n";
     fftp << " 				                      .ROMD2_Dout(ROMD2_D_wire),              \n";
     fftp << " 				                      .ROMD3_Dout(ROMD3_D_wire),              \n";
     fftp << " 					                  .ROMD4_Dout(ROMD4_D_wire),              \n";
     fftp << " 					                  .ROMD5_Dout(ROMD5_D_wire),              \n";
     fftp << " 					                  .ROMD6_Dout(ROMD6_D_wire),              \n";
     fftp << " 					                  .ROMD7_Dout(ROMD7_D_wire),              \n";
     fftp << " 									  .IFFTROMD0_Dout(IFFTROMD0_D_wire),      \n";
     fftp << " 				                      .IFFTROMD1_Dout(IFFTROMD1_D_wire),      \n";
     fftp << " 				                      .IFFTROMD2_Dout(IFFTROMD2_D_wire),      \n";
     fftp << " 				                      .IFFTROMD3_Dout(IFFTROMD3_D_wire),      \n";
     fftp << " 					                  .IFFTROMD4_Dout(IFFTROMD4_D_wire),      \n";
     fftp << " 					                  .IFFTROMD5_Dout(IFFTROMD5_D_wire),      \n";
     fftp << " 					                  .IFFTROMD6_Dout(IFFTROMD6_D_wire),      \n";
     fftp << " 					                  .IFFTROMD7_Dout(IFFTROMD7_D_wire),      \n";
     fftp << " 			                          .ROMD0_in(ROMD0_out_wire),              \n";
     fftp << " 					                  .ROMD1_in(ROMD1_out_wire),              \n";
     fftp << " 					                  .ROMD2_in(ROMD2_out_wire),              \n";
     fftp << " 					                  .ROMD3_in(ROMD3_out_wire),              \n";
     fftp << " 					                  .ROMD4_in(ROMD4_out_wire),              \n";
     fftp << " 					                  .ROMD5_in(ROMD5_out_wire),              \n";
     fftp << " 					                  .ROMD6_in(ROMD6_out_wire),              \n";
     fftp << " 					                  .ROMD7_in(ROMD7_out_wire),              \n";
     fftp << " 									  .IFFTROMD0_in(IFFTROMD0_out_wire),      \n";
     fftp << " 					                  .IFFTROMD1_in(IFFTROMD1_out_wire),      \n";
     fftp << " 					                  .IFFTROMD2_in(IFFTROMD2_out_wire),      \n";
     fftp << " 					                  .IFFTROMD3_in(IFFTROMD3_out_wire),      \n";
     fftp << " 					                  .IFFTROMD4_in(IFFTROMD4_out_wire),      \n";
     fftp << " 					                  .IFFTROMD5_in(IFFTROMD5_out_wire),      \n";
     fftp << " 					                  .IFFTROMD6_in(IFFTROMD6_out_wire),      \n";
     fftp << " 					                  .IFFTROMD7_in(IFFTROMD7_out_wire),      \n";
     fftp << "                                       .rst_n(rst_n),                       \n";
     fftp << "                                       .clk(clk)                            \n";
     fftp << "                                       ) ;		                          \n";
     fftp << " 	//---FFT1----------------------------------------------                   \n";
     fftp << " 	//Bank0 Mem0                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u0_SRAM_SP_2048_128 (.Q(Data_out0),                      \n";
     fftp << "  "<<ss.str()<<" u0_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out0),\n";
     fftp << "                                        .CLK(clk),                       \n";
     fftp << "                                        .CEN(cen_wire),                  \n";
     fftp << "                                        .WEN(wen0_wire),                 \n";
     fftp << "                                        .A(MA0_wire),                    \n";
     fftp << "                                        .D(BN0_MEM0_wire),               \n";
     fftp << "                                        .EMA(3'd0)                   \n";
     fftp << "                                        );                               \n";
     fftp << " 	//Bank0 Mem1                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u1_SRAM_SP_2048_128 (.Q(Data_out1),                      \n";
     fftp << "  "<<ss.str()<<" u1_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out1),\n";
     fftp << "                                        .CLK(clk),                       \n";
     fftp << "                                        .CEN(cen_wire),                  \n";
     fftp << "                                        .WEN(wen0_wire),                 \n";
     fftp << "                                        .A(MA0_wire),                    \n";
     fftp << "                                        .D(BN0_MEM1_wire),               \n";
     fftp << "                                        .EMA(3'd0)                   \n";
     fftp << "                                        );							      \n";
     fftp << " 	//Bank0 Mem2                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u2_SRAM_SP_2048_128 (.Q(Data_out2),                      \n";
     fftp << "  "<<ss.str()<<" u2_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out2),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM2_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem3                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u3_SRAM_SP_2048_128 (.Q(Data_out3),                      \n";
     fftp << "  "<<ss.str()<<" u3_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out3),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM3_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem4                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u4_SRAM_SP_2048_128 (.Q(Data_out4),                      \n";
     fftp << "  "<<ss.str()<<" u4_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out4),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM4_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );							      \n";
     fftp << " 	//Bank0 Mem5                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u5_SRAM_SP_2048_128 (.Q(Data_out5),                      \n";
     fftp << "  "<<ss.str()<<" u5_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out5),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM5_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem6                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u6_SRAM_SP_2048_128 (.Q(Data_out6),                      \n";
     fftp << "  "<<ss.str()<<" u6_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out6),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM6_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 	//Bank0 Mem7                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u7_SRAM_SP_2048_128 (.Q(Data_out7),                      \n";
     fftp << "  "<<ss.str()<<" u7_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out7),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen0_wire),                 \n";
     fftp << "                                           .A(MA0_wire),                    \n";
     fftp << "                                           .D(BN0_MEM7_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );                               \n";
     fftp << " 			                                                                  \n";
     fftp << " 			                                                                  \n";
     fftp << " 	//Bank1 Mem0                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u8_SRAM_SP_2048_128 (.Q(Data_out8),                      \n";
     fftp << "  "<<ss.str()<<" u8_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out8),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen1_wire),                 \n";
     fftp << "                                           .A(MA1_wire),                    \n";
     fftp << "                                           .D(BN1_MEM0_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );							      \n";
     fftp << " 	//Bank0 Mem1                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u9_SRAM_SP_2048_128 (.Q(Data_out9),                      \n";
     fftp << "  "<<ss.str()<<" u9_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out9),\n";
     fftp << "                                           .CLK(clk),                       \n";
     fftp << "                                           .CEN(cen_wire),                  \n";
     fftp << "                                           .WEN(wen1_wire),                 \n";
     fftp << "                                           .A(MA1_wire),                    \n";
     fftp << "                                           .D(BN1_MEM1_wire),               \n";
     fftp << "                                           .EMA(3'd0)                   \n";
     fftp << "                                           );	                              \n";
     fftp << " 	//Bank1 Mem2                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u10_SRAM_SP_2048_128 (.Q(Data_out10),                    \n";
     fftp << "  "<<ss.str()<<" u10_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out10),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM2_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );		                      \n";
     fftp << " 	//Bank1 Mem3                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u11_SRAM_SP_2048_128 (.Q(Data_out11),                    \n";
     fftp << "  "<<ss.str()<<" u11_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out11),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM3_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );		                      \n";
     fftp << " 	//Bank1 Mem4                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u12_SRAM_SP_2048_128 (.Q(Data_out12),                    \n";
     fftp << "  "<<ss.str()<<" u12_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out12),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM4_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );	                          \n";
     fftp << " 	//Bank1 Mem5                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u13_SRAM_SP_2048_128 (.Q(Data_out13),                    \n";
     fftp << "  "<<ss.str()<<" u13_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out13),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM5_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );	                          \n";
     fftp << " 	//Bank1 Mem6                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u14_SRAM_SP_2048_128 (.Q(Data_out14),                    \n";
     fftp << "  "<<ss.str()<<" u14_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out14),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM6_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );		                      \n";
     fftp << " 	//Bank1 Mem7                                                              \n";
     //fftp << " 	SRAM_SP_2048_128 u15_SRAM_SP_2048_128 (.Q(Data_out15),                    \n";
     fftp << "  "<<ss.str()<<" u15_SRAM_SP_"<<no_address_tmp<<"_128 (.Q(Data_out15),\n";
     fftp << "                                            .CLK(clk),                      \n";
     fftp << "                                            .CEN(cen_wire),                 \n";
     fftp << "                                            .WEN(wen1_wire),                \n";
     fftp << "                                            .A(MA1_wire),                   \n";
     fftp << "                                            .D(BN1_MEM7_wire),              \n";
     fftp << "                                            .EMA(3'd0)                  \n";
     fftp << "                                            );						      \n";	  
     //
	 fftp << "     //-----------------------------------------------------     \n";    
	 fftp << "     //2020/04/19 modify                                         \n";
	 fftp << "     //re-order factor  ROM                                      \n";
	 fftp << "     //BANK0                                                     \n";
	 fftp << "     IReorderMA_pip u_IReorderMA_pip(                            \n";
	 fftp << "             .IREMA_o(IREMA),                                    \n";
	 fftp << "             .MA_i(data_cnt_wire[" << (IReROM_width-1) <<":0]),  \n";
	 fftp << "             .rst_n(rst_n),                                      \n";
	 fftp << "             .clk(clk)                                           \n";
	 fftp << "     );                                                          \n";
	 fftp << "                                                                 \n";
	 fftp << "     //bank0                                                     \n";
	 fftp << "     //128 bits                                                  \n";
	 fftp << "     reorderROM0 u_reorderROM0(                                  \n";
	 fftp << "                               .Q(reorderROM0_wire_reg_in),      \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "                                                                 \n";
	 fftp << "     reorderROM1 u_reorderROM1(                                  \n";
	 fftp << "                               .Q(reorderROM1_wire_reg_in),      \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "     //bank1                                                     \n";
	 fftp << "     //128 bits                                                  \n";
	 fftp << "     reorderROM2 u_reorderROM2(                                  \n";
	 fftp << "                               .Q(reorderROM2_wire_reg_in),      \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "     reorderROM3 u_reorderROM3(                                  \n";
	 fftp << "                               .Q(reorderROM3_wire_reg_in),      \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(rc_sel_wire),                \n";
	 fftp << "                               .A(REMA_wire)                     \n";
	 fftp << "     );                                                          \n";
	 fftp << "     //128 bits                                                  \n";
	 fftp << "     ireorderROM0 u_ireorderROM0(                                \n";
	 fftp << "                               .Q(ireorderROM0_wire_reg_in),     \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << "                                                                 \n";
	 fftp << "     ireorderROM1 u_ireorderROM1(                                \n";
	 fftp << "                               .Q(ireorderROM1_wire_reg_in),     \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << "     ireorderROM2 u_ireorderROM2(                                \n";
	 fftp << "                               .Q(ireorderROM2_wire_reg_in),     \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << "     //64 bits                                                   \n";
	 fftp << "     ireorderROM3 u_ireorderROM3(                                \n";
	 fftp << "                               .Q(ireorderROM3_wire_reg_in),     \n";
	 fftp << "                               .CLK(clk),                        \n";
	 fftp << "                               .CEN(~rc_sel_wire),               \n";  
	 fftp << "                               .A(IREMA)                         \n";
	 fftp << "     );                                                          \n";
	 fftp << " 	//-----------------------------------------------------     \n";
	 fftp << " 	R16_orderROM_Pipe u_R16_orderROM_Pipe(\n";
	 fftp << " 				.reorderROM0_o(reorderROM0_wire), 				\n";
	 fftp << " 				.reorderROM1_o(reorderROM1_wire), 				\n";
	 fftp << " 				.reorderROM2_o(reorderROM2_wire), 				\n";
	 fftp << " 				.reorderROM3_o(reorderROM3_wire), 				\n";
	 fftp << " 				.ireorderROM0_o(ireorderROM0_wire),				\n";
	 fftp << " 				.ireorderROM1_o(ireorderROM1_wire),				\n";
	 fftp << " 				.ireorderROM2_o(ireorderROM2_wire),				\n";
	 fftp << " 				.ireorderROM3_o(ireorderROM3_wire),				\n";
	 fftp << " 				.reorderROM0_i(reorderROM0_wire_reg_in), 		\n";
	 fftp << " 				.reorderROM1_i(reorderROM1_wire_reg_in), 		\n";
	 fftp << " 				.reorderROM2_i(reorderROM2_wire_reg_in), 		\n";
	 fftp << " 				.reorderROM3_i(reorderROM3_wire_reg_in), 		\n";
	 fftp << " 				.ireorderROM0_i(ireorderROM0_wire_reg_in),		\n";
	 fftp << " 				.ireorderROM1_i(ireorderROM1_wire_reg_in),		\n";
	 fftp << " 				.ireorderROM2_i(ireorderROM2_wire_reg_in),		\n";
	 fftp << " 				.ireorderROM3_i(ireorderROM3_wire_reg_in),		\n";
	 fftp << " 				.rst_n(rst_n),         				\n";
	 fftp << " 				.clk(clk)            				\n";
	 fftp << " 	);													\n";
	 fftp << " 	//-----------------------------------------------------                   \n";
     fftp << " 	                                                                          \n";
     fftp << "     //FFT ROM0                                                             \n";
     fftp << " 	ROM0_"<<no_address_tmp*2<<"_64 u_ROM0_"<<no_address_tmp*2<<"_64 (.Q(ROMD0_out_wire),\n";
     fftp << "                                  .CLK(clk),                                \n";
     fftp << "                                  .CEN(RomCen_wire),                        \n";
     fftp << "                                  .A(ROMA_wire)                             \n";
     fftp << "                                   );                                       \n";
     fftp << " 	//FFT ROM1                                                                \n";
     fftp << " 	ROM1_"<<no_address_tmp*2<<"_128 u_ROM1_"<<no_address_tmp*2<<"_128 (.Q(ROMD1_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 	//FFT ROM2                                                                \n";
     fftp << " 	ROM2_"<<no_address_tmp*2<<"_128 u_ROM2_"<<no_address_tmp*2<<"_128 (.Q(ROMD2_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                     );                                     \n";
     fftp << " 	//FFT ROM3                                                                \n";
     fftp << " 	ROM3_"<<no_address_tmp*2<<"_128 u_ROM3_"<<no_address_tmp*2<<"_128 (.Q(ROMD3_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 	//FFT ROM4                                                                \n";
     fftp << " 	ROM4_"<<no_address_tmp*2<<"_128 u_ROM4_"<<no_address_tmp*2<<"_128 (.Q(ROMD4_out_wire),\n";
     fftp << "                                .CLK(clk),                              \n";
     fftp << "                                .CEN(RomCen_wire),                      \n";
     fftp << "                                .A(ROMA_wire)                           \n";
     fftp << "                                );						              \n";
     fftp << " 	//FFT ROM5                                                            \n";
     fftp << " 	ROM5_"<<no_address_tmp*2<<"_128 u_ROM5_"<<no_address_tmp*2<<"_128 (.Q(ROMD5_out_wire),\n";
     fftp << "                                .CLK(clk),                              \n";
     fftp << "                                .CEN(RomCen_wire),                      \n";
     fftp << "                                .A(ROMA_wire)                           \n";
     fftp << "                                );                                      \n";
     fftp << " 	//FFT ROM6                                                            \n";
     fftp << " 	ROM6_"<<no_address_tmp*2<<"_128 u_ROM6_"<<no_address_tmp*2<<"_128 (.Q(ROMD6_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 	//FFT ROM7                                                                \n";
     fftp << " 	ROM7_"<<no_address_tmp*2<<"_128 u_ROM7_"<<no_address_tmp*2<<"_128 (.Q(ROMD7_out_wire),\n";
     fftp << "                                    .CLK(clk),                              \n";
     fftp << "                                    .CEN(RomCen_wire),                      \n";
     fftp << "                                    .A(ROMA_wire)                           \n";
     fftp << "                                    );                                      \n";
     fftp << " 							                                                  \n";
     fftp << " 	                                                                          \n";
     fftp << " 	//IFFT ROM0                                                               \n";
     fftp << " 	IFFTR0_"<<no_address_tmp*2<<"_64 u_IFFTR0_"<<no_address_tmp*2<<"_64 (.Q(IFFTROMD0_out_wire),                  \n";
     fftp << "                                  .CLK(clk),                            \n";
     fftp << "                                  .CEN(RomCen_wire),                    \n";
     fftp << "                                  .A(ROMA_wire)                         \n";
     fftp << "                                   );                                   \n";
     fftp << " 	//IFFT ROM1                                                           \n";
     fftp << " 	IFFTR1_"<<no_address_tmp*2<<"_128 u_IFFTR1_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD1_out_wire),\n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM2                                                           \n";
     fftp << " 	IFFTR2_"<<no_address_tmp*2<<"_128 u_IFFTR2_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD2_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM3                                                           \n";
     fftp << " 	IFFTR3_"<<no_address_tmp*2<<"_128 u_IFFTR3_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD3_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM4                                                           \n";
     fftp << " 	IFFTR4_"<<no_address_tmp*2<<"_128 u_IFFTR4_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD4_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM5                                                           \n";
     fftp << " 	IFFTR5_"<<no_address_tmp*2<<"_128 u_IFFTR5_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD5_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM6                                                           \n";
     fftp << " 	IFFTR6_"<<no_address_tmp*2<<"_128 u_IFFTR6_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD6_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 	//IFFT ROM7                                                           \n";
     fftp << " 	IFFTR7_"<<no_address_tmp*2<<"_128 u_IFFTR7_"<<no_address_tmp*2<<"_128 (.Q(IFFTROMD7_out_wire),                \n";
     fftp << "                                    .CLK(clk),                          \n";
     fftp << "                                    .CEN(RomCen_wire),                  \n";
     fftp << "                                    .A(ROMA_wire)                       \n";
     fftp << "                                    );                                  \n";
     fftp << " 									                                          \n";
     fftp << " endmodule                                                                  \n";

     fftp.close();	 
	
}
// .lib file change to .db  script generate
void FFTC::lc_script_gen(){
	if(radix == 4)  lc_script_gen_r4();
	if(radix == 8)  lc_script_gen_r8();
	if(radix == 16) lc_script_gen_r16();
}
void FFTC::lc_script_gen_r4(){
     std::ofstream lc;
     std::string        string_buf = "./lc_script.tcl";
     std::stringstream  ss;
     ss << string_buf;       
     lc.open(ss.str());
     
	 //calculate rom_word_size 
     unsigned long rom_word_size;	 
	 rom_word_size = fft_point / (radix * radix);
	 
	 if( (rom_word_size * 2) > 4096) {
		lc << "read_lib SRAM_SP_"<< fft_point / (4 * radix) <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ireorderROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ireorderROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0r0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0r1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0r2_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0r3_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1r0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1r1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1r2_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1r3_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R0D0_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R0D1_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R0D2_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R0D3_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R1D0_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R1D1_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R1D2_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib R1D3_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR0D0_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR0D1_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR0D2_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR0D3_" << fft_point  / (radix * radix)<<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR1D0_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR1D1_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR1D2_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IR1D3_" << fft_point  / (radix * radix)<<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "write_lib SRAM_SP_"<< fft_point / (4 * radix) <<"_128 -format db -output SRAM_SP_"<< fft_point / (4 * radix) <<"_128.db\n";
		lc << "write_lib reorderROM0 -format db -output reorderROM0.db\n";
		lc << "write_lib reorderROM1 -format db -output reorderROM1.db\n";
		lc << "write_lib ireorderROM0 -format db -output ireorderROM0.db\n";
		lc << "write_lib ireorderROM1 -format db -output ireorderROM1.db\n";
		lc << "write_lib H_b0r0 -format db -output H_b0r0.db\n";
		lc << "write_lib H_b0r1 -format db -output H_b0r1.db\n";
		lc << "write_lib H_b0r2 -format db -output H_b0r2.db\n";
		lc << "write_lib H_b0r3 -format db -output H_b0r3.db\n";
		lc << "write_lib H_b1r0 -format db -output H_b1r0.db\n";
		lc << "write_lib H_b1r1 -format db -output H_b1r1.db\n";
		lc << "write_lib H_b1r2 -format db -output H_b1r2.db\n";
		lc << "write_lib H_b1r3 -format db -output H_b1r3.db\n";		
		lc << "write_lib R0D0 -format db -output R0D0_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib R0D1 -format db -output R0D1_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib R0D2 -format db -output R0D2_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib R0D3 -format db -output R0D3_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib R1D0 -format db -output R1D0_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "write_lib R1D1 -format db -output R1D1_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "write_lib R1D2 -format db -output R1D2_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "write_lib R1D3 -format db -output R1D3_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "write_lib IR0D0 -format db -output IR0D0_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib IR0D1 -format db -output IR0D1_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib IR0D2 -format db -output IR0D2_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib IR0D3 -format db -output IR0D3_" << fft_point  / (radix * radix)<<"_64.db\n";
		lc << "write_lib IR1D0 -format db -output IR1D0_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "write_lib IR1D1 -format db -output IR1D1_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "write_lib IR1D2 -format db -output IR1D2_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "write_lib IR1D3 -format db -output IR1D3_" << fft_point  / (radix * radix)<<"_128.db\n";
		lc << "exit\n";
	 }else {
		lc << "read_lib SRAM_SP_"<< fft_point / (2 * radix) <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM1_tt_1.0_25.0_syn.lib\n";		 
		lc << "read_lib IROM0_tt_1.0_25.0_syn.lib\n";		 
		lc << "read_lib IROM1_tt_1.0_25.0_syn.lib\n";		 
		lc << "read_lib H_b0ROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM1_tt_1.0_25.0_syn.lib\n";		
		lc << "read_lib ireorderROM0_tt_1.0_25.0_syn.lib\n";		
		lc << "read_lib ireorderROM1_tt_1.0_25.0_syn.lib\n";		
		lc << "write_lib SRAM_SP_"<< fft_point / (2 * radix) <<"_128 -format db -output SRAM_SP_"<< fft_point / (2 * radix) <<"_128.db\n";
		lc << "write_lib ROM0 -format db -output ROM0.db\n";
		lc << "write_lib ROM1 -format db -output ROM1.db\n";
		lc << "write_lib IROM0 -format db -output IROM0.db\n";
		lc << "write_lib IROM1 -format db -output IROM1.db\n";
		lc << "write_lib H_b0ROM0 -format db -output H_b0ROM0.db\n";
        lc << "write_lib H_b0ROM1 -format db -output H_b0ROM1.db\n";
        lc << "write_lib H_b1ROM0 -format db -output H_b1ROM0.db\n";
        lc << "write_lib H_b1ROM1 -format db -output H_b1ROM1.db\n";
		lc << "write_lib reorderROM0 -format db -output reorderROM0.db\n";
        lc << "write_lib reorderROM1 -format db -output reorderROM1.db\n";
        lc << "write_lib ireorderROM0 -format db -output ireorderROM0.db\n";
        lc << "write_lib ireorderROM1 -format db -output ireorderROM1.db\n";
		lc << "exit\n";
	 }
	 lc.close();
}
void FFTC::lc_script_gen_r8(){
     std::ofstream lc;
     std::string        string_buf = "./lc_script.tcl";
     std::stringstream  ss;
     ss << string_buf;       
     lc.open(ss.str());
     
	 //calculate rom_word_size 
     unsigned long SRAM_word_size;	 
	 SRAM_word_size = fft_point / (2 * radix);
	 
     lc << "read_lib SRAM_SP_"<< SRAM_word_size <<"_128_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib ROM0_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib ROM1_tt_1.0_25.0_syn.lib\n";		 
     lc << "read_lib ROM2_tt_1.0_25.0_syn.lib\n";		 
     lc << "read_lib ROM3_tt_1.0_25.0_syn.lib\n";		 
     lc << "read_lib IROM0_tt_1.0_25.0_syn.lib\n";		 
     lc << "read_lib IROM1_tt_1.0_25.0_syn.lib\n";		 
     lc << "read_lib IROM2_tt_1.0_25.0_syn.lib\n";		 
     lc << "read_lib IROM3_tt_1.0_25.0_syn.lib\n";		 
     lc << "read_lib H_b0ROM0_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib H_b0ROM1_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib H_b0ROM2_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib H_b0ROM3_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib H_b1ROM0_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib H_b1ROM1_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib H_b1ROM2_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib H_b1ROM3_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib reorderROM0_tt_1.0_25.0_syn.lib\n";
     lc << "read_lib reorderROM1_tt_1.0_25.0_syn.lib\n";		
     lc << "read_lib reorderROM2_tt_1.0_25.0_syn.lib\n";		
     lc << "read_lib reorderROM3_tt_1.0_25.0_syn.lib\n";		
     lc << "read_lib ireorderROM0_tt_1.0_25.0_syn.lib\n";		
     lc << "read_lib ireorderROM1_tt_1.0_25.0_syn.lib\n";		
     lc << "read_lib ireorderROM2_tt_1.0_25.0_syn.lib\n";		
     if(8 * CP_width > 192)lc << "read_lib ireorderROM3_tt_1.0_25.0_syn.lib\n";		
     lc << "write_lib SRAM_SP_"<< SRAM_word_size <<"_128 -format db -output SRAM_SP_"<< SRAM_word_size <<"_128.db\n";
     lc << "write_lib ROM0 -format db -output ROM0.db\n";
     lc << "write_lib ROM1 -format db -output ROM1.db\n";
     lc << "write_lib ROM2 -format db -output ROM2.db\n";
     lc << "write_lib ROM3 -format db -output ROM3.db\n";
     lc << "write_lib IROM0 -format db -output IROM0.db\n";
     lc << "write_lib IROM1 -format db -output IROM1.db\n";
     lc << "write_lib IROM2 -format db -output IROM2.db\n";
     lc << "write_lib IROM3 -format db -output IROM3.db\n";
     lc << "write_lib H_b0ROM0 -format db -output H_b0ROM0.db\n";
     lc << "write_lib H_b0ROM1 -format db -output H_b0ROM1.db\n";
     lc << "write_lib H_b0ROM2 -format db -output H_b0ROM2.db\n";
     lc << "write_lib H_b0ROM3 -format db -output H_b0ROM3.db\n";
     lc << "write_lib H_b1ROM0 -format db -output H_b1ROM0.db\n";
     lc << "write_lib H_b1ROM1 -format db -output H_b1ROM1.db\n";
     lc << "write_lib H_b1ROM2 -format db -output H_b1ROM2.db\n";
     lc << "write_lib H_b1ROM3 -format db -output H_b1ROM3.db\n";
     lc << "write_lib reorderROM0 -format db -output reorderROM0.db\n";
     lc << "write_lib reorderROM1 -format db -output reorderROM1.db\n";
     lc << "write_lib reorderROM2 -format db -output reorderROM2.db\n";
     lc << "write_lib reorderROM3 -format db -output reorderROM3.db\n";
     lc << "write_lib ireorderROM0 -format db -output ireorderROM0.db\n";
     lc << "write_lib ireorderROM1 -format db -output ireorderROM1.db\n";
     lc << "write_lib ireorderROM2 -format db -output ireorderROM2.db\n";
     if(8 * CP_width > 192)lc << "write_lib ireorderROM3_tt_1.0_25.0_syn.lib\n";		
	 lc << "exit\n";
	 
	 lc.close();
}
void FFTC::lc_script_gen_r16(){
		std::ofstream lc;
		std::string        string_buf = "./lc_script.tcl";
		std::stringstream  ss;
		ss << string_buf;       
		lc.open(ss.str());
		lc << "read_lib SRAM_SP_"<< fft_point / (2 * radix) <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM2_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib reorderROM3_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ireorderROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ireorderROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ireorderROM2_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ireorderROM3_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM2_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM3_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM4_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM5_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM6_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b0ROM7_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM0_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM1_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM2_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM3_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM4_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM5_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM6_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib H_b1ROM7_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM0_"   << fft_point   /  radix   <<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM1_"   << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM2_"   << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM3_"   << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM4_"   << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM5_"   << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM6_"   << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM7_"   << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR0_" << fft_point   /  radix   <<"_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR1_" << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR2_" << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR3_" << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR4_" << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR5_" << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR6_" << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR7_" << fft_point   /  radix   <<"_128_tt_1.0_25.0_syn.lib\n";
		lc << "write_lib SRAM_SP_"<< fft_point  / (2 * radix) <<"_128 -format db -output SRAM_SP_"<< fft_point / (2 * radix) <<"_128.db\n";
		lc << "write_lib reorderROM0 -format db -output reorderROM0.db\n";
		lc << "write_lib reorderROM1 -format db -output reorderROM1.db\n";
		lc << "write_lib reorderROM2 -format db -output reorderROM2.db\n";
		lc << "write_lib reorderROM3 -format db -output reorderROM3.db\n";
		lc << "write_lib ireorderROM0 -format db -output ireorderROM0.db\n";
		lc << "write_lib ireorderROM1 -format db -output ireorderROM1.db\n";
		lc << "write_lib ireorderROM2 -format db -output ireorderROM2.db\n";
		lc << "write_lib ireorderROM3 -format db -output ireorderROM3.db\n";
		lc << "write_lib H_b0ROM0 -format db -output H_b0ROM0.db\n";
		lc << "write_lib H_b0ROM1 -format db -output H_b0ROM1.db\n";
		lc << "write_lib H_b0ROM2 -format db -output H_b0ROM2.db\n";
		lc << "write_lib H_b0ROM3 -format db -output H_b0ROM3.db\n";
		lc << "write_lib H_b0ROM4 -format db -output H_b0ROM4.db\n";
		lc << "write_lib H_b0ROM5 -format db -output H_b0ROM5.db\n";
		lc << "write_lib H_b0ROM6 -format db -output H_b0ROM6.db\n";
		lc << "write_lib H_b0ROM7 -format db -output H_b0ROM7.db\n";
		lc << "write_lib H_b1ROM0 -format db -output H_b1ROM0.db\n";
		lc << "write_lib H_b1ROM1 -format db -output H_b1ROM1.db\n";
		lc << "write_lib H_b1ROM2 -format db -output H_b1ROM2.db\n";
		lc << "write_lib H_b1ROM3 -format db -output H_b1ROM3.db\n";		
		lc << "write_lib H_b1ROM4 -format db -output H_b1ROM4.db\n";		
		lc << "write_lib H_b1ROM5 -format db -output H_b1ROM5.db\n";		
		lc << "write_lib H_b1ROM6 -format db -output H_b1ROM6.db\n";		
		lc << "write_lib H_b1ROM7 -format db -output H_b1ROM7.db\n";		
		lc << "write_lib ROM0_" << fft_point  /    radix  << "_64  -format db -output ROM0_"   << fft_point  /    radix  <<"_64.db\n";
		lc << "write_lib ROM1_" << fft_point  /    radix  << "_128 -format db -output ROM1_"   << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib ROM2_" << fft_point  /    radix  << "_128 -format db -output ROM2_"   << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib ROM3_" << fft_point  /    radix  << "_128 -format db -output ROM3_"   << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib ROM4_" << fft_point  /    radix  << "_128 -format db -output ROM4_"   << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib ROM5_" << fft_point  /    radix  << "_128 -format db -output ROM5_"   << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib ROM6_" << fft_point  /    radix  << "_128 -format db -output ROM6_"   << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib ROM7_" << fft_point  /    radix  << "_128 -format db -output ROM7_"   << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib IFFTR0_" << fft_point  /    radix  << "_64  -format db -output IFFTR0_" << fft_point  /    radix  <<"_64.db\n";
		lc << "write_lib IFFTR1_" << fft_point  /    radix  << "_128 -format db -output IFFTR1_" << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib IFFTR2_" << fft_point  /    radix  << "_128 -format db -output IFFTR2_" << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib IFFTR3_" << fft_point  /    radix  << "_128 -format db -output IFFTR3_" << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib IFFTR4_" << fft_point  /    radix  << "_128 -format db -output IFFTR4_" << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib IFFTR5_" << fft_point  /    radix  << "_128 -format db -output IFFTR5_" << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib IFFTR6_" << fft_point  /    radix  << "_128 -format db -output IFFTR6_" << fft_point  /    radix  <<"_128.db\n";
		lc << "write_lib IFFTR7_" << fft_point  /    radix  << "_128 -format db -output IFFTR7_" << fft_point  /    radix  <<"_128.db\n";
		lc << "exit\n";

		lc.close();
}
void FFTC::lc_script_gen_Reconfigure_r16(){
		std::ofstream lc;
		std::string        string_buf = "./lc_script.tcl";
		std::stringstream  ss;
		ss << string_buf;
		lc.open(ss.str());
		lc << "read_lib SRAM_SP_2048_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib SRAM_SP_2048_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM0_4096_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM1_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM2_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM3_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM4_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM5_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM6_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib ROM7_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR0_4096_64_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR1_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR2_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR3_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR4_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR5_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR6_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "read_lib IFFTR7_4096_128_tt_1.0_25.0_syn.lib\n";
		lc << "write_lib SRAM_SP_2048_64 -format db -output SRAM_SP_2048_64.db\n";
		lc << "write_lib SRAM_SP_2048_128 -format db -output SRAM_SP_2048_128.db\n";
		lc << "write_lib ROM0_4096_64  -format db -output ROM0_4096_64.db\n";
		lc << "write_lib ROM1_4096_128 -format db -output ROM1_4096_128.db\n";
		lc << "write_lib ROM2_4096_128 -format db -output ROM2_4096_128.db\n";
		lc << "write_lib ROM3_4096_128 -format db -output ROM3_4096_128.db\n";
		lc << "write_lib ROM4_4096_128 -format db -output ROM4_4096_128.db\n";
		lc << "write_lib ROM5_4096_128 -format db -output ROM5_4096_128.db\n";
		lc << "write_lib ROM6_4096_128 -format db -output ROM6_4096_128.db\n";
		lc << "write_lib ROM7_4096_128 -format db -output ROM7_4096_128.db\n";
		lc << "write_lib IFFTR0_4096_64  -format db -output IFFTR0_4096_64.db\n";
		lc << "write_lib IFFTR1_4096_128 -format db -output IFFTR1_4096_128.db\n";
		lc << "write_lib IFFTR2_4096_128 -format db -output IFFTR2_4096_128.db\n";
		lc << "write_lib IFFTR3_4096_128 -format db -output IFFTR3_4096_128.db\n";
		lc << "write_lib IFFTR4_4096_128 -format db -output IFFTR4_4096_128.db\n";
		lc << "write_lib IFFTR5_4096_128 -format db -output IFFTR5_4096_128.db\n";
		lc << "write_lib IFFTR6_4096_128 -format db -output IFFTR6_4096_128.db\n";
		lc << "write_lib IFFTR7_4096_128 -format db -output IFFTR7_4096_128.db\n";
		lc << "exit\n";
		lc.close();
}
std::string FFTC::ZZtohex(ZZ zz_tmp,unsigned long data_bit_length){
    std::string string_tmp;
    std::vector<char> tmp_hex; 
    std::stringstream ss;
    
    long tmp;
    int length;
	double bit_length_double;
	bit_length_double = (double) data_bit_length;
	bit_length_double = bit_length_double / 4; // number digit in hex representment
    bit_length_double = ceil(bit_length_double);
	length = (int)bit_length_double;
    tmp_hex.resize(length);
    
    for(int i =0; i < length; i++){
        tmp  =  to_long(zz_tmp % 16);
        
        if(tmp == 0) tmp_hex[i] = '0'; 
        if(tmp == 1) tmp_hex[i] = '1'; 
        if(tmp == 2) tmp_hex[i] = '2'; 
        if(tmp == 3) tmp_hex[i] = '3'; 
        if(tmp == 4) tmp_hex[i] = '4'; 
        if(tmp == 5) tmp_hex[i] = '5'; 
        if(tmp == 6) tmp_hex[i] = '6'; 
        if(tmp == 7) tmp_hex[i] = '7'; 
        if(tmp == 8) tmp_hex[i] = '8'; 
        if(tmp == 9) tmp_hex[i] = '9'; 
        if(tmp == 10) tmp_hex[i] = 'a'; 
        if(tmp == 11) tmp_hex[i] = 'b'; 
        if(tmp == 12) tmp_hex[i] = 'c'; 
        if(tmp == 13) tmp_hex[i] = 'd'; 
        if(tmp == 14) tmp_hex[i] = 'e'; 
        if(tmp == 15) tmp_hex[i] = 'f'; 
        
        zz_tmp = zz_tmp >> 4;
    }
    for(int i = 1;i <= length; i++){
        ss << tmp_hex[length-i];
    }
    
    string_tmp = ss.str();
    
    return string_tmp;
}
