#include <vector>
#include <iostream>
#include <fstream>
#include <math.h>
#include <sstream>

#include "Pipe.h"

void Pipe::gen(unsigned long fft_p,unsigned long radix,std::string string_in){
     double addr_w;
	 double fft_p_bit_doub;
	 double radix_bit_doub;
	 double stage_floor;
	 double stage_ceil;
	 double IsMixed;
	 //parameter initinal 
	 fft_point = fft_p; 
	 r  = radix;
	 //calculate parameter for twipipe
	 addr_w         = fft_p / r;
	 addr_w         = log2(addr_w);
	 addr_w         = ceil(addr_w);
	 addr_width     =  (unsigned long)(addr_w-1);
	 fft_p_bit_doub = log2(fft_point);
	 radix_bit_doub = log2(radix);
	 stage_ceil     = ceil(fft_p_bit_doub/radix_bit_doub);
	 stage_floor    = floor(fft_p_bit_doub/radix_bit_doub);
	 if(stage_ceil == stage_floor ) IsMixed = 0;
	 else IsMixed = 1;
	 
     if(r==4){
         TWIpipe_r4(string_in);
		 //------------------------------------
		 BU_R4_S0_R2P(string_in);
		 BU_R4_R2P(string_in);
		 Pipe_R4_R2P(string_in);
		 Radix4_Pipe_R2P(string_in);
		 //-------------------------------------
		 //R4_NPipeReg1(string_in);
         R4_NPipeReg2(string_in);
         R4_NPipeReg3(string_in);
         //R4_PipeReg1(string_in);
         R4_PipeReg2(string_in);
         //R4_PipeReg3(string_in);
         R4_PipeReg4(string_in);
         R4_PipeReg4_2(string_in);
         //R4_PipeReg5_1(string_in);
         //R4_PipeReg5_2(string_in);
         //if(IsMixed == 0)Radix4_Pipe(string_in);
         //else Radix4_R2_Pipe(string_in);         
     }
	 if(r==8){
		 //TWIpipe_r8(string_in);
		 //-------------------------------
		 BU_R8_S0_R2P(string_in);
		 BU_R8_R2P(string_in);
		 Pipe_R8_R2P(string_in);
		 Radix8_Pipe_R2P(string_in);		 
		 TWIpipe_r8_R2P(string_in);
		 //-------------------------------
		 //R8_NPipeReg1(string_in);
         R8_NPipeReg2(string_in);
         R8_NPipeReg3(string_in);
         //R8_PipeReg1(string_in);
         R8_PipeReg2(string_in);
         //R8_PipeReg3(string_in);
         R8_PipeReg4(string_in);
         R8_PipeReg4_2(string_in);
         //R8_PipeReg5_1(string_in);
         //R8_PipeReg5_2(string_in);
         //Radix8_Pipe(string_in); 		 
	 }
	 if(r==16){
		 //TWIpipe_r16(string_in);
		 TWIpipe_r16_R2P(string_in);
		 Pipe_R2P(string_in);
		 BU_R16_S0_R2P(string_in);
		 BU_R16_R2P(string_in);
		 //--------------------------------------------------
         //R16_NPipeReg1(string_in);
         R16_NPipeReg2(string_in);
         R16_NPipeReg3(string_in);
         //R16_PipeReg1(string_in);
         R16_PipeReg2(string_in);
         //R16_PipeReg3(string_in);
         R16_PipeReg4(string_in);
         R16_PipeReg4_2(string_in);
         //R16_PipeReg5_1(string_in);
         //R16_PipeReg5_2(string_in);
		 //---------------------------------------------------
         //if(IsMixed == 0)Radix16_Pipe(string_in);
		 //else Radix16_Mixed_Radix_Pipe(string_in);
		 if(IsMixed == 0)Radix16_Pipe_R2P(string_in);
		 else Radix16_Pipe_R2P_Mixed_Radix(string_in);
		 
     }     
}

//radix-4
void Pipe::TWIpipe_r4(std::string string_in){
     std::ofstream twipipe;
     std::string        string_buf = "/TWIpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twipipe.open(ss.str());		
twipipe << "//=========================================                         \n";
twipipe << "//Date:2020/04/08                                                   \n";
twipipe << "//writer:shiyong                                                    \n";
twipipe << "//note: bn ank ma pipline                                           \n";
twipipe << "//      FFT type of m-th tiwiddle factor. m-th cyclotomic polynomial\n";
twipipe << "//========================================                     \n";
twipipe << "`timescale 1 ns/1 ps                     \n";
twipipe << "module TWIpipe(                                                \n";
twipipe << "    BN_out,                                                    \n";
twipipe << "    MA_out,                                                    \n";
twipipe << "	TWIradix0_o,                                               \n";
twipipe << "	TWIradix1_o,                                               \n";
twipipe << "	TWIradix2_o,                                               \n";
twipipe << "	TWIradix3_o,                                               \n";
twipipe << "    BN_in,                                                     \n";
twipipe << "    MA_in,                                                     \n";
twipipe << "	TWIradix0_i,                                               \n";
twipipe << "	TWIradix1_i,                                               \n";
twipipe << "	TWIradix2_i,                                               \n";
twipipe << "	TWIradix3_i,                                               \n";
twipipe << "	rst_n,                                                     \n";
twipipe << "    clk                                                        \n";
twipipe << ");                                                             \n";
twipipe << "                                                               \n";
twipipe << "parameter A_WIDTH = " << addr_width << ";                                         \n";
twipipe << "parameter A_ZERO  = " << addr_width << "'b0;                                      \n";
twipipe << "parameter P_WIDTH = 64;                                        \n";
twipipe << "parameter P_ZERO  = 64'd0;                                     \n";
twipipe << "                                                               \n";
twipipe << "output [A_WIDTH-1:0] MA_out;                                   \n";
twipipe << "output               BN_out;                                   \n";
twipipe << "output [P_WIDTH-1:0]TWIradix0_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix1_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix2_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix3_o;                               \n";
twipipe << "                                                               \n";
twipipe << "input  [A_WIDTH-1:0] MA_in;                                    \n";
twipipe << "input                BN_in;                                    \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix0_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix1_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix2_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix3_i;                               \n";
twipipe << "input                rst_n;                                    \n";
twipipe << "input                clk;                                      \n";
twipipe << "                                                               \n";
twipipe << "reg  [A_WIDTH-1:0] MA_out;                                     \n";
twipipe << "reg  [A_WIDTH-1:0] MA_reg0;                                    \n";
twipipe << "reg  [A_WIDTH-1:0] MA_reg1;                                    \n";
twipipe << "                                                               \n";
twipipe << "reg                BN_out;                                     \n";
twipipe << "reg                BN_reg0;                                    \n";
twipipe << "reg                BN_reg1;                                    \n";
twipipe << "                                                               \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix0_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix1_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix2_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix3_o;                                  \n";
twipipe << "                                                               \n";
twipipe << "                                                               \n";
twipipe << "    always @(posedge clk,negedge rst_n)begin                   \n";
twipipe << "        if(~rst_n)begin                                        \n";
twipipe << "            MA_reg0      <=  A_ZERO;                           \n";
twipipe << "            MA_reg1      <=  A_ZERO;                           \n";
twipipe << "            MA_out       <=  A_ZERO;                           \n";
twipipe << "            BN_reg0      <=  1'b0;                             \n";
twipipe << "            BN_reg1      <=  1'b0;                             \n";
twipipe << "			BN_out       <=  1'b0;                             \n";
twipipe << "			TWIradix0_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix1_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix2_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix3_o  <=  P_ZERO;                           \n";
twipipe << "        end                                                    \n";
twipipe << "        else begin                                             \n";
twipipe << "            MA_reg0  <= MA_in;                                 \n";
twipipe << "            MA_reg1  <= MA_reg0;                               \n";
twipipe << "            MA_out   <= MA_reg1;                               \n";
twipipe << "			//                                                 \n";
twipipe << "            BN_reg0  <= BN_in;                                 \n";
twipipe << "            BN_reg1  <= BN_reg0;                               \n";
twipipe << "            BN_out   <= BN_reg1;                               \n";
twipipe << "			//                                                 \n";
twipipe << "		    TWIradix0_o  <=  TWIradix0_i;                      \n";
twipipe << "			TWIradix1_o  <=  TWIradix1_i;                      \n";
twipipe << "			TWIradix2_o  <=  TWIradix2_i;                      \n";
twipipe << "			TWIradix3_o  <=  TWIradix3_i;                      \n";
twipipe << "        end                                                    \n";
twipipe << "    end                                                        \n";
twipipe << "                                                               \n";
twipipe << "endmodule                                                      \n";	
	 
	 twipipe.close();
}
void Pipe::R4_NPipeReg1(std::string string_in){
 	 std::ofstream r4_npipereg1;
     std::string        string_buf = "/R4_NPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_npipereg1.open(ss.str());
 r4_npipereg1 << " `timescale 1 ns/1 ps                                 \n";
 r4_npipereg1 << " module R4_NPipeReg1(N_D2_out,                        \n";
 r4_npipereg1 << "                     N_in,                            \n";
 r4_npipereg1 << "                     rst_n,                           \n";
 r4_npipereg1 << "                     clk                              \n";
 r4_npipereg1 << "                     ) ;                              \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << " parameter P_WIDTH     = 64 ;                         \n";
 r4_npipereg1 << " parameter P_ZERO      = 64'h0 ;                      \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << " output [P_WIDTH-1:0] N_D2_out ;                      \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << " input [P_WIDTH-1:0]  N_in ;                          \n";
 r4_npipereg1 << " input                rst_n ;                         \n";
 r4_npipereg1 << " input                clk ;                           \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << " reg [P_WIDTH-1:0]  N_D0reg ;                         \n";
 r4_npipereg1 << " reg [P_WIDTH-1:0]  N_D2_out ;                        \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << " 	//                                               \n";
 r4_npipereg1 << " 	always @(posedge clk or negedge rst_n) begin     \n";
 r4_npipereg1 << " 		if(~rst_n) begin                             \n";
 r4_npipereg1 << " 			N_D0reg <= P_ZERO ;                      \n";
 r4_npipereg1 << " 			N_D2_out <= P_ZERO ;                     \n";
 r4_npipereg1 << " 		end                                          \n";
 r4_npipereg1 << " 		else begin                                   \n";
 r4_npipereg1 << " 			N_D0reg <= N_in ;                        \n";
 r4_npipereg1 << " 			N_D2_out <= N_D0reg ;                    \n";
 r4_npipereg1 << " 		end                                          \n";
 r4_npipereg1 << " 	end                                              \n";
 r4_npipereg1 << "                                                      \n";
 r4_npipereg1 << " endmodule                                            \n";

     r4_npipereg1.close();     
}
void Pipe::R4_NPipeReg2(std::string string_in){
 	 std::ofstream r4_npipereg2;
     std::string        string_buf = "/R4_NPipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_npipereg2.open(ss.str());
 r4_npipereg2 << " `timescale 1 ns/1 ps                                 \n";
 r4_npipereg2 << " module R4_NPipeReg2(Ninv2_D1_out,                    \n";
 r4_npipereg2 << "                     N_D2_out,                        \n";
 r4_npipereg2 << " 					Ninv2_in,                           \n";
 r4_npipereg2 << "                     N_in,                            \n";
 r4_npipereg2 << "                     rst_n,                           \n";
 r4_npipereg2 << "                     clk                              \n";
 r4_npipereg2 << "                     ) ;                              \n";
 r4_npipereg2 << "                                                      \n";
 r4_npipereg2 << " parameter P_WIDTH     = 64 ;                         \n";
 r4_npipereg2 << " parameter P_ZERO      = 64'h0 ;                      \n";
 r4_npipereg2 << " parameter P1_ZERO     = 65'h0 ;                      \n";
 r4_npipereg2 << "                                                      \n";
 r4_npipereg2 << "                                                      \n";
 r4_npipereg2 << " output [P_WIDTH:0]   Ninv2_D1_out ;                  \n";
 r4_npipereg2 << " output [P_WIDTH-1:0] N_D2_out ;                      \n";
 r4_npipereg2 << "                                                      \n";
 r4_npipereg2 << " input [P_WIDTH:0]    Ninv2_in ;                      \n";
 r4_npipereg2 << " input [P_WIDTH-1:0]  N_in ;                          \n";
 r4_npipereg2 << " input                rst_n ;                         \n";
 r4_npipereg2 << " input                clk ;                           \n";
 r4_npipereg2 << "                                                      \n";
 r4_npipereg2 << " reg [P_WIDTH-1:0]  N_D0reg ;                         \n";
 r4_npipereg2 << " reg [P_WIDTH-1:0]  N_D2_out ;                        \n";
 r4_npipereg2 << " reg [P_WIDTH:0]    Ninv2_D1_out ;                    \n";
 r4_npipereg2 << "                                                      \n";
 r4_npipereg2 << " 	//                                                  \n";
 r4_npipereg2 << " 	always @(posedge clk or negedge rst_n) begin        \n";
 r4_npipereg2 << " 		if(~rst_n) begin                                \n";
 r4_npipereg2 << " 			N_D0reg <= P_ZERO ;                         \n";
 r4_npipereg2 << " 			N_D2_out <= P_ZERO ;                        \n";
 r4_npipereg2 << " 			Ninv2_D1_out <= P1_ZERO ;                   \n";
 r4_npipereg2 << " 		end                                             \n";
 r4_npipereg2 << " 		else begin                                      \n";
 r4_npipereg2 << " 			N_D0reg <= N_in ;                           \n";
 r4_npipereg2 << " 			N_D2_out <= N_D0reg ;                       \n";
 r4_npipereg2 << " 			Ninv2_D1_out <= Ninv2_in ;                  \n";
 r4_npipereg2 << " 		end                                             \n";
 r4_npipereg2 << " 	end                                                 \n";
 r4_npipereg2 << "                                                      \n";
 r4_npipereg2 << " endmodule                                            \n";     
     r4_npipereg2.close();         
}
void Pipe::R4_NPipeReg3(std::string string_in){
 	 std::ofstream r4_npipereg3;
     std::string        string_buf = "/R4_NPipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_npipereg3.open(ss.str());
 r4_npipereg3 << " `timescale 1 ns/1 ps                                      \n";
 r4_npipereg3 << " module R4_NPipeReg3(N_D4_out,                             \n";
 r4_npipereg3 << "                     N_in,                                 \n";
 r4_npipereg3 << "                     rst_n,                                \n";
 r4_npipereg3 << "                     clk                                   \n";
 r4_npipereg3 << "                     ) ;                                   \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << " parameter P_WIDTH     = 64 ;                              \n";
 r4_npipereg3 << " parameter P_ZERO      = 64'h0 ;                           \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << " output [P_WIDTH-1:0] N_D4_out ;                           \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << " input [P_WIDTH-1:0]  N_in ;                               \n";
 r4_npipereg3 << " input                rst_n ;                              \n";
 r4_npipereg3 << " input                clk ;                                \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << " reg [P_WIDTH-1:0]  N_D0reg ;                              \n";
 r4_npipereg3 << " reg [P_WIDTH-1:0]  N_D1reg ;                              \n";
 r4_npipereg3 << " reg [P_WIDTH-1:0]  N_D2reg ;                              \n";
 r4_npipereg3 << " reg [P_WIDTH-1:0]  N_D4_out ;                             \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << " 	//                                                       \n";
 r4_npipereg3 << " 	always @(posedge clk or negedge rst_n) begin             \n";
 r4_npipereg3 << " 		if(~rst_n) begin                                     \n";
 r4_npipereg3 << " 			N_D0reg <= P_ZERO ;                              \n";
 r4_npipereg3 << " 			N_D1reg <= P_ZERO ;                              \n";
 r4_npipereg3 << " 			N_D2reg <= P_ZERO ;                              \n";
 r4_npipereg3 << " 			N_D4_out <= P_ZERO ;                             \n";
 r4_npipereg3 << " 		end                                                  \n";
 r4_npipereg3 << " 		else begin                                           \n";
 r4_npipereg3 << " 			N_D0reg <= N_in ;                                \n";
 r4_npipereg3 << " 			N_D1reg <= N_D0reg ;                             \n";
 r4_npipereg3 << " 			N_D2reg <= N_D1reg ;                             \n";
 r4_npipereg3 << " 			N_D4_out <= N_D2reg ;                            \n";
 r4_npipereg3 << " 		end                                                  \n";
 r4_npipereg3 << " 	end                                                      \n";
 r4_npipereg3 << "                                                           \n";
 r4_npipereg3 << " endmodule                                                 \n";     
     r4_npipereg3.close();     
    
}
void Pipe::R4_PipeReg1(std::string string_in){
 	 std::ofstream r4_pipereg1;
     std::string        string_buf = "/R4_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_pipereg1.open(ss.str());
 r4_pipereg1 << " `timescale 1 ns/1 ps                                   \n";
 r4_pipereg1 << " module R4_PipeReg1(A0_out,                             \n";
 r4_pipereg1 << " 				   A1_out,                               \n";
 r4_pipereg1 << " 				   A2_out,                               \n";
 r4_pipereg1 << " 				   A3_out,				                 \n";
 r4_pipereg1 << "                    A0_in,                              \n";
 r4_pipereg1 << " 			       A1_in,                                \n";
 r4_pipereg1 << " 			       A2_in,                                \n";
 r4_pipereg1 << " 			       A3_in,			                     \n";
 r4_pipereg1 << "                    rst_n,                              \n";
 r4_pipereg1 << "                    clk                                 \n";
 r4_pipereg1 << "                    ) ;                                 \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << " parameter D_WIDTH     = 192 ;                          \n";
 r4_pipereg1 << " parameter DH_WIDTH    = 96 ;                           \n";
 r4_pipereg1 << " parameter D_ZERO      = 192'h0 ;                       \n";
 r4_pipereg1 << " parameter DH_ZERO     = 96'h0 ;                        \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << " output [DH_WIDTH-1:0] A0_out ;                         \n";
 r4_pipereg1 << " output [D_WIDTH-1:0]  A1_out ;                         \n";
 r4_pipereg1 << " output [D_WIDTH-1:0]  A2_out ;                         \n";
 r4_pipereg1 << " output [D_WIDTH-1:0]  A3_out ;                         \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << " input [DH_WIDTH-1:0] A0_in ;                           \n";
 r4_pipereg1 << " input [D_WIDTH-1:0]  A1_in ;                           \n";
 r4_pipereg1 << " input [D_WIDTH-1:0]  A2_in ;                           \n";
 r4_pipereg1 << " input [D_WIDTH-1:0]  A3_in ;                           \n";
 r4_pipereg1 << " input                rst_n ;                           \n";
 r4_pipereg1 << " input                clk ;                             \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << " reg [DH_WIDTH-1:0] A0_out ;                            \n";
 r4_pipereg1 << " reg [D_WIDTH-1:0]  A1_out ;                            \n";
 r4_pipereg1 << " reg [D_WIDTH-1:0]  A2_out ;                            \n";
 r4_pipereg1 << " reg [D_WIDTH-1:0]  A3_out ;                            \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << " 	//                                                   \n";
 r4_pipereg1 << " 	always @(posedge clk or negedge rst_n) begin         \n";
 r4_pipereg1 << " 		if(~rst_n) begin                                 \n";
 r4_pipereg1 << " 			A0_out <= DH_ZERO ;                          \n";
 r4_pipereg1 << " 			A1_out <= D_ZERO ;                           \n";
 r4_pipereg1 << " 			A2_out <= D_ZERO ;                           \n";
 r4_pipereg1 << " 			A3_out <= D_ZERO ;                           \n";
 r4_pipereg1 << " 		end                                              \n";
 r4_pipereg1 << " 		else begin                                       \n";
 r4_pipereg1 << " 			A0_out <= A0_in ;                            \n";
 r4_pipereg1 << " 			A1_out <= A1_in ;                            \n";
 r4_pipereg1 << " 			A2_out <= A2_in ;                            \n";
 r4_pipereg1 << " 			A3_out <= A3_in ;                            \n";
 r4_pipereg1 << " 		end                                              \n";
 r4_pipereg1 << " 	end                                                  \n";
 r4_pipereg1 << "                                                        \n";
 r4_pipereg1 << " endmodule                                              \n";
 r4_pipereg1 << "                                                        \n";
     
     r4_pipereg1.close();     
    
}
void Pipe::R4_PipeReg2(std::string string_in){
 	 std::ofstream r4_pipereg2;
     std::string        string_buf = "/R4_PipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_pipereg2.open(ss.str());
 r4_pipereg2 << " `timescale 1 ns/1 ps                                  \n";
 r4_pipereg2 << " module R4_PipeReg2(A0_out,                            \n";
 r4_pipereg2 << " 				   Ac_out,                              \n";
 r4_pipereg2 << "                    A0_in,                             \n";
 r4_pipereg2 << " 				   Ac_in,                               \n";
 r4_pipereg2 << "                    rst_n,                             \n";
 r4_pipereg2 << "                    clk                                \n";
 r4_pipereg2 << "                    ) ;                                \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << " parameter P_WIDTH     = 64 ;                          \n";
 r4_pipereg2 << " parameter P_ZERO      = 64'h0 ;                       \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << " output [P_WIDTH-1:0] A0_out ;                         \n";
 r4_pipereg2 << " output               Ac_out ;                         \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << " input [P_WIDTH-1:0]  A0_in ;                          \n";
 r4_pipereg2 << " input                Ac_in ;                          \n";
 r4_pipereg2 << " input                rst_n ;                          \n";
 r4_pipereg2 << " input                clk ;                            \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << " reg [P_WIDTH-1:0]  A0_out ;                           \n";
 r4_pipereg2 << " reg [P_WIDTH-1:0]  A1_out ;                           \n";
 r4_pipereg2 << " reg                Ac_out ;                           \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << " 	//                                                  \n";
 r4_pipereg2 << " 	always @(posedge clk or negedge rst_n) begin        \n";
 r4_pipereg2 << " 		if(~rst_n) begin                                \n";
 r4_pipereg2 << " 			A0_out <= P_ZERO ;                          \n";
 r4_pipereg2 << " 			Ac_out <= 1'b0 ;                            \n";
 r4_pipereg2 << " 		end                                             \n";
 r4_pipereg2 << " 		else begin                                      \n";
 r4_pipereg2 << " 			A0_out <= A0_in ;                           \n";
 r4_pipereg2 << " 			Ac_out <= Ac_in ;                           \n";
 r4_pipereg2 << " 		end                                             \n";
 r4_pipereg2 << " 	end                                                 \n";
 r4_pipereg2 << "                                                       \n";
 r4_pipereg2 << " endmodule                                             \n";     
     r4_pipereg2.close();         
}
void Pipe::R4_PipeReg3(std::string string_in){
 	 std::ofstream r4_pipereg3;
     std::string        string_buf = "/R4_PipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_pipereg3.open(ss.str());
 r4_pipereg3 << " `timescale 1 ns/1 ps                                      \n";
 r4_pipereg3 << " module R4_PipeReg3(A0_out,                                \n";
 r4_pipereg3 << " 				   Ac_out,                                  \n";
 r4_pipereg3 << " 				   Dinv_out,                                \n";
 r4_pipereg3 << " 				   Ninv2_out,                               \n";
 r4_pipereg3 << "                    A0_in,                                 \n";
 r4_pipereg3 << " 				   Ac_in,                                   \n";
 r4_pipereg3 << " 				   Dinv_in,                                 \n";
 r4_pipereg3 << " 				   Ninv2_in,                                \n";
 r4_pipereg3 << "                    rst_n,                                 \n";
 r4_pipereg3 << "                    clk                                    \n";
 r4_pipereg3 << "                    ) ;                                    \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << " parameter P_WIDTH     = 64 ;                              \n";
 r4_pipereg3 << " parameter P_ZERO      = 64'h0 ;                           \n";
 r4_pipereg3 << " parameter P1_ZERO     = 65'h0 ;                           \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << " output [P_WIDTH-1:0] A0_out ;                             \n";
 r4_pipereg3 << " output               Ac_out ;                             \n";
 r4_pipereg3 << " output [P_WIDTH-1:0] Dinv_out ;                           \n";
 r4_pipereg3 << " output [P_WIDTH:0]   Ninv2_out ;                          \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << " input [P_WIDTH-1:0]  A0_in ;                              \n";
 r4_pipereg3 << " input                Ac_in ;                              \n";
 r4_pipereg3 << " input [P_WIDTH-1:0]  Dinv_in ;                            \n";
 r4_pipereg3 << " input [P_WIDTH:0]    Ninv2_in ;                           \n";
 r4_pipereg3 << " input                rst_n ;                              \n";
 r4_pipereg3 << " input                clk ;                                \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << " reg [P_WIDTH-1:0]  A0_out ;                               \n";
 r4_pipereg3 << " reg                Ac_out ;                               \n";
 r4_pipereg3 << " reg [P_WIDTH-1:0]  Dinv_out ;                             \n";
 r4_pipereg3 << " reg [P_WIDTH:0]    Ninv2_out ;                            \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << " 	//                                                      \n";
 r4_pipereg3 << " 	always @(posedge clk or negedge rst_n) begin            \n";
 r4_pipereg3 << " 		if(~rst_n) begin                                    \n";
 r4_pipereg3 << " 			A0_out <= P_ZERO ;                              \n";
 r4_pipereg3 << " 			Ac_out <= 1'b0 ;                                \n";
 r4_pipereg3 << " 			Dinv_out <= P_ZERO ;                            \n";
 r4_pipereg3 << " 			Ninv2_out <= P1_ZERO ;                          \n";
 r4_pipereg3 << " 		end                                                 \n";
 r4_pipereg3 << " 		else begin                                          \n";
 r4_pipereg3 << " 			A0_out <= A0_in ;                               \n";
 r4_pipereg3 << " 			Ac_out <= Ac_in ;                               \n";
 r4_pipereg3 << " 			Dinv_out <= Dinv_in ;                           \n";
 r4_pipereg3 << " 			Ninv2_out <= Ninv2_in ;                         \n";
 r4_pipereg3 << " 		end                                                 \n";
 r4_pipereg3 << " 	end                                                     \n";
 r4_pipereg3 << "                                                           \n";
 r4_pipereg3 << " endmodule                                                 \n";

     
     r4_pipereg3.close();         
}
void Pipe::R4_PipeReg4(std::string string_in){
 	 std::ofstream r4_pipereg4;
     std::string        string_buf = "/R4_PipeReg4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_pipereg4.open(ss.str());
 r4_pipereg4 << " `timescale 1 ns/1 ps                                    \n";
 r4_pipereg4 << " module R4_PipeReg4(A0_out,                              \n";
 r4_pipereg4 << " 				   Ac_out,                                \n";
 r4_pipereg4 << " 				   Ninv2_D2_out,                          \n";
 r4_pipereg4 << "                    A0_in,                               \n";
 r4_pipereg4 << " 				   Ac_in,                                 \n";
 r4_pipereg4 << " 				   Ninv2_in,                              \n";
 r4_pipereg4 << "                    rst_n,                               \n";
 r4_pipereg4 << "                    clk                                  \n";
 r4_pipereg4 << "                    ) ;                                  \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << " parameter P_WIDTH     = 64 ;                            \n";
 r4_pipereg4 << " parameter P_ZERO      = 64'h0 ;                         \n";
 r4_pipereg4 << " parameter P1_ZERO     = 65'h0 ;                         \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << " output [P_WIDTH-1:0] A0_out ;                           \n";
 r4_pipereg4 << " output               Ac_out ;                           \n";
 r4_pipereg4 << " output [P_WIDTH:0]   Ninv2_D2_out ;                     \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << " input [P_WIDTH-1:0]  A0_in ;                            \n";
 r4_pipereg4 << " input                Ac_in ;                            \n";
 r4_pipereg4 << " input [P_WIDTH:0]    Ninv2_in ;                         \n";
 r4_pipereg4 << " input                rst_n ;                            \n";
 r4_pipereg4 << " input                clk ;                              \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << " reg [P_WIDTH-1:0]  A0_out ;                             \n";
 r4_pipereg4 << " reg                Ac_out ;                             \n";
 r4_pipereg4 << " reg [P_WIDTH:0]    Ninv2_D0_reg ;                       \n";
 r4_pipereg4 << " reg [P_WIDTH:0]    Ninv2_D2_out ;                       \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << " 	//Ninv2 delay 2-cycle                                 \n";
 r4_pipereg4 << " 	always @(posedge clk or negedge rst_n) begin          \n";
 r4_pipereg4 << " 		if(~rst_n) begin                                  \n";
 r4_pipereg4 << " 			A0_out <= P_ZERO ;                            \n";
 r4_pipereg4 << " 			Ac_out <= 1'b0 ;                              \n";
 r4_pipereg4 << " 			Ninv2_D0_reg <= P1_ZERO ;                     \n";
 r4_pipereg4 << " 			Ninv2_D2_out <= P1_ZERO ;                     \n";
 r4_pipereg4 << " 		end                                               \n";
 r4_pipereg4 << " 		else begin                                        \n";
 r4_pipereg4 << " 			A0_out <= A0_in ;                             \n";
 r4_pipereg4 << " 			Ac_out <= Ac_in ;                             \n";
 r4_pipereg4 << " 			Ninv2_D0_reg <= Ninv2_in ;                    \n";
 r4_pipereg4 << " 			Ninv2_D2_out <= Ninv2_D0_reg ;                \n";
 r4_pipereg4 << " 		end                                               \n";
 r4_pipereg4 << " 	end                                                   \n";
 r4_pipereg4 << "                                                         \n";
 r4_pipereg4 << " endmodule                                               \n";

     
     r4_pipereg4.close();         
}
void Pipe::R4_PipeReg4_2(std::string string_in){
 	 std::ofstream r4_pipereg4_2;
     std::string        string_buf = "/R4_PipeReg4_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_pipereg4_2.open(ss.str());
 r4_pipereg4_2 << " `timescale 1 ns/1 ps                                   \n";
 r4_pipereg4_2 << " module R4_PipeReg4_2(A0_out,                           \n";
 r4_pipereg4_2 << " 					 Ac_out,                           \n";
 r4_pipereg4_2 << " 					 N_D1_out,                         \n";
 r4_pipereg4_2 << " 					 D_out,                            \n";
 r4_pipereg4_2 << "                      A0_in,                            \n";
 r4_pipereg4_2 << " 					 Ac_in,                            \n";
 r4_pipereg4_2 << " 					 N_in,                             \n";
 r4_pipereg4_2 << " 					 D_in,                             \n";
 r4_pipereg4_2 << "                      rst_n,                            \n";
 r4_pipereg4_2 << "                      clk                               \n";
 r4_pipereg4_2 << "                      ) ;                               \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << " parameter P_WIDTH     = 64 ;                           \n";
 r4_pipereg4_2 << " parameter P_ZERO      = 64'h0 ;                        \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << " output [P_WIDTH-1:0] A0_out ;                          \n";
 r4_pipereg4_2 << " output               Ac_out ;                          \n";
 r4_pipereg4_2 << " output [P_WIDTH-1:0] N_D1_out ;                        \n";
 r4_pipereg4_2 << " output [P_WIDTH-1:0] D_out ;                           \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << " input [P_WIDTH-1:0]  A0_in ;                           \n";
 r4_pipereg4_2 << " input                Ac_in ;                           \n";
 r4_pipereg4_2 << " input [P_WIDTH-1:0]  N_in ;                            \n";
 r4_pipereg4_2 << " input [P_WIDTH-1:0]  D_in ;                            \n";
 r4_pipereg4_2 << " input                rst_n ;                           \n";
 r4_pipereg4_2 << " input                clk ;                             \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << " reg [P_WIDTH-1:0]  A0_out ;                            \n";
 r4_pipereg4_2 << " reg                Ac_out ;                            \n";
 r4_pipereg4_2 << " reg [P_WIDTH-1:0]  N_D1_out ;                          \n";
 r4_pipereg4_2 << " reg [P_WIDTH-1:0]  D_out ;                             \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << " 	//                                                 \n";
 r4_pipereg4_2 << " 	always @(posedge clk or negedge rst_n) begin       \n";
 r4_pipereg4_2 << " 		if(~rst_n) begin                               \n";
 r4_pipereg4_2 << " 			A0_out <= P_ZERO ;                         \n";
 r4_pipereg4_2 << " 			Ac_out <= 1'b0 ;                           \n";
 r4_pipereg4_2 << " 			N_D1_out <= P_ZERO ;                       \n";
 r4_pipereg4_2 << " 			D_out <= P_ZERO ;                          \n";
 r4_pipereg4_2 << " 		end                                            \n";
 r4_pipereg4_2 << " 		else begin                                     \n";
 r4_pipereg4_2 << " 			A0_out <= A0_in ;                          \n";
 r4_pipereg4_2 << " 			Ac_out <= Ac_in ;                          \n";
 r4_pipereg4_2 << " 			N_D1_out <= N_in ;                         \n";
 r4_pipereg4_2 << " 			D_out <= D_in ;                            \n";
 r4_pipereg4_2 << " 		end                                            \n";
 r4_pipereg4_2 << " 	end                                                \n";
 r4_pipereg4_2 << "                                                        \n";
 r4_pipereg4_2 << " endmodule                                              \n";     
     r4_pipereg4_2.close();         
}
void Pipe::R4_PipeReg5_1(std::string string_in){
 	 std::ofstream r4_pipereg5_1;
     std::string        string_buf = "/R4_PipeReg5_1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_pipereg5_1.open(ss.str());
 r4_pipereg5_1 << " `timescale 1 ns/1 ps                                   \n";
 r4_pipereg5_1 << " module R4_PipeReg5_1(SS_out,                           \n";
 r4_pipereg5_1 << " 					 SC_out,                           \n";
 r4_pipereg5_1 << "                      SS_in,                            \n";
 r4_pipereg5_1 << " 					 SC_in,                            \n";
 r4_pipereg5_1 << "                      rst_n,                            \n";
 r4_pipereg5_1 << "                      clk                               \n";
 r4_pipereg5_1 << "                      ) ;                               \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << " parameter DH_WIDTH     = 96 ;                          \n";
 r4_pipereg5_1 << " parameter DH_ZERO      = 96'h0 ;                       \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << " output [DH_WIDTH-1:0] SS_out ;                         \n";
 r4_pipereg5_1 << " output [DH_WIDTH-1:0] SC_out ;                         \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << " input [DH_WIDTH-1:0]  SS_in ;                          \n";
 r4_pipereg5_1 << " input [DH_WIDTH-1:0]  SC_in ;                          \n";
 r4_pipereg5_1 << " input                 rst_n ;                          \n";
 r4_pipereg5_1 << " input                 clk ;                            \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << " reg [DH_WIDTH-1:0]  SS_out ;                           \n";
 r4_pipereg5_1 << " reg [DH_WIDTH-1:0]  SC_out ;                           \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << " 	//                                                 \n";
 r4_pipereg5_1 << " 	always @(posedge clk or negedge rst_n) begin       \n";
 r4_pipereg5_1 << " 		if(~rst_n) begin                               \n";
 r4_pipereg5_1 << " 			SS_out <= DH_ZERO ;                        \n";
 r4_pipereg5_1 << " 			SC_out <= DH_ZERO ;                        \n";
 r4_pipereg5_1 << " 		end                                            \n";
 r4_pipereg5_1 << " 		else begin                                     \n";
 r4_pipereg5_1 << " 			SS_out <= SS_in ;                          \n";
 r4_pipereg5_1 << " 			SC_out <= SC_in ;                          \n";
 r4_pipereg5_1 << " 		end                                            \n";
 r4_pipereg5_1 << " 	end                                                \n";
 r4_pipereg5_1 << "                                                        \n";
 r4_pipereg5_1 << " endmodule                                              \n";
 r4_pipereg5_1 << "                                                        \n";
     
     r4_pipereg5_1.close();     
    
}
void Pipe::R4_PipeReg5_2(std::string string_in){
 	 std::ofstream r4_pipereg5_2;
     std::string        string_buf = "/R4_PipeReg5_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_pipereg5_2.open(ss.str());
 r4_pipereg5_2 << " `timescale 1 ns/1 ps                                  \n";
 r4_pipereg5_2 << " module R4_PipeReg5_2(SS_out,                          \n";
 r4_pipereg5_2 << " 					 SC_out,                           \n";
 r4_pipereg5_2 << "                      SS_in,                           \n";
 r4_pipereg5_2 << " 					 SC_in,                            \n";
 r4_pipereg5_2 << "                      rst_n,                           \n";
 r4_pipereg5_2 << "                      clk                              \n";
 r4_pipereg5_2 << "                      ) ;                              \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << " parameter D_WIDTH     = 192 ;                         \n";
 r4_pipereg5_2 << " parameter D_ZERO      = 192'h0 ;                      \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << " output [D_WIDTH-1:0] SS_out ;                         \n";
 r4_pipereg5_2 << " output [D_WIDTH-1:0] SC_out ;                         \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << " input [D_WIDTH-1:0]  SS_in ;                          \n";
 r4_pipereg5_2 << " input [D_WIDTH-1:0]  SC_in ;                          \n";
 r4_pipereg5_2 << " input                rst_n ;                          \n";
 r4_pipereg5_2 << " input                clk ;                            \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << " reg [D_WIDTH-1:0]  SS_out ;                           \n";
 r4_pipereg5_2 << " reg [D_WIDTH-1:0]  SC_out ;                           \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << " 	//                                                 \n";
 r4_pipereg5_2 << " 	always @(posedge clk or negedge rst_n) begin       \n";
 r4_pipereg5_2 << " 		if(~rst_n) begin                               \n";
 r4_pipereg5_2 << " 			SS_out <= D_ZERO ;                         \n";
 r4_pipereg5_2 << " 			SC_out <= D_ZERO ;                         \n";
 r4_pipereg5_2 << " 		end                                            \n";
 r4_pipereg5_2 << " 		else begin                                     \n";
 r4_pipereg5_2 << " 			SS_out <= SS_in ;                          \n";
 r4_pipereg5_2 << " 			SC_out <= SC_in ;                          \n";
 r4_pipereg5_2 << " 		end                                            \n";
 r4_pipereg5_2 << " 	end                                                \n";
 r4_pipereg5_2 << "                                                       \n";
 r4_pipereg5_2 << " endmodule                                             \n";
 r4_pipereg5_2 << "                                                       \n";
         
     r4_pipereg5_2.close();
}
void Pipe::Radix4_Pipe(std::string string_in){
 	 std::ofstream radix4_pipe;
     std::string        string_buf = "/Radix4_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 radix4_pipe.open(ss.str());
 radix4_pipe << " `timescale 1 ns/1 ps                                   \n";
 radix4_pipe << " module Radix4_Pipe(RA0_out,                            \n";
 radix4_pipe << " 			       RA1_out,                               \n";
 radix4_pipe << " 			       RA2_out,                               \n";
 radix4_pipe << " 			       RA3_out,                               \n";
 radix4_pipe << "                    RA0_in,                             \n";
 radix4_pipe << " 			       RA1_in,                                \n";
 radix4_pipe << " 			       RA2_in,                                \n";
 radix4_pipe << " 			       RA3_in,                                \n";
 radix4_pipe << " 		           N_in,                                  \n";
 radix4_pipe << "                    rst_n,                              \n";
 radix4_pipe << "                    clk                                 \n";
 radix4_pipe << "                    ) ;                                 \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " parameter P_WIDTH     = 64 ;                           \n";
 radix4_pipe << " parameter DH_WIDTH    = 96 ;                           \n";
 radix4_pipe << " parameter D_WIDTH     = 192 ;                          \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA0_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA1_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA2_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA3_out ;                          \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA0_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA1_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA2_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA3_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] N_in ;                             \n";
 radix4_pipe << " input               rst_n ;                            \n";
 radix4_pipe << " input               clk ;                              \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " wire  [DH_WIDTH-1:0] Sum0_wire ;                       \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum1_wire ;                       \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum2_wire ;                       \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum3_wire ;                       \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " wire  [DH_WIDTH-1:0] Sum0_reg_wire ;                   \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum1_reg_wire ;                   \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum2_reg_wire ;                   \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum3_reg_wire ;                   \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " wire  [P_WIDTH-1:0]  N_D2_wire ;                       \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //Pipeline Register                                    \n";
 radix4_pipe << " R4_NPipeReg1 u_R4_NPipeReg1(.N_D2_out(N_D2_wire),      \n";
 radix4_pipe << "                             .N_in(N_in),               \n";
 radix4_pipe << "                             .rst_n(rst_n),             \n";
 radix4_pipe << "                             .clk(clk)                  \n";
 radix4_pipe << "                             ) ;                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //output0                                              \n";
 radix4_pipe << " Sum4_out0 u0_Sum4_out0(.S_out(Sum0_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			           .A1_in(RA1_in),                    \n";
 radix4_pipe << " 			           .A2_in(RA2_in),                    \n";
 radix4_pipe << " 			           .A3_in(RA3_in),			          \n";
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod96 u0_Mod96(.S_out(RA0_out),                        \n";
 radix4_pipe << "                .A_in(Sum0_reg_wire),                   \n";
 radix4_pipe << " 		       .N_in(N_D2_wire),                          \n";
 radix4_pipe << "                .rst_n(rst_n),                          \n";
 radix4_pipe << "                .clk(clk)                               \n";
 radix4_pipe << "                ) ;                                     \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //output1                                              \n";
 radix4_pipe << " Sum4_out1 u1_Sum4_out1(.S_out(Sum1_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			           .A1_in(RA1_in),                    \n";
 radix4_pipe << " 			           .A2_in(RA2_in),                    \n";
 radix4_pipe << " 			           .A3_in(RA3_in),			          \n"; 
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod192 u1_Mod192(.S_out(RA1_out),                      \n";
 radix4_pipe << "                  .A_in(Sum1_reg_wire),                 \n";
 radix4_pipe << " 		         .N_in(N_D2_wire),                        \n";
 radix4_pipe << "                  .rst_n(rst_n),                        \n";
 radix4_pipe << "                  .clk(clk)                             \n";
 radix4_pipe << "                 ) ;                                    \n";
 radix4_pipe << " 					                                      \n";
 radix4_pipe << " //output2                                              \n";
 radix4_pipe << " Sum4_out2 u2_Sum4_out2(.S_out(Sum2_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			           .A1_in(RA1_in),                    \n";
 radix4_pipe << " 			           .A2_in(RA2_in),                    \n";
 radix4_pipe << " 			           .A3_in(RA3_in),			          \n"; 
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod192 u2_Mod192(.S_out(RA2_out),                      \n";
 radix4_pipe << "                  .A_in(Sum2_reg_wire),                 \n";
 radix4_pipe << " 		         .N_in(N_D2_wire),                        \n";
 radix4_pipe << "                  .rst_n(rst_n),                        \n";
 radix4_pipe << "                  .clk(clk)                             \n";
 radix4_pipe << "                 ) ;					                  \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //output3                                              \n";
 radix4_pipe << " Sum4_out3 u3_Sum4_out3(.S_out(Sum3_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			           .A1_in(RA1_in),                    \n";
 radix4_pipe << " 			           .A2_in(RA2_in),                    \n";
 radix4_pipe << " 			           .A3_in(RA3_in),			          \n"; 
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod192 u3_Mod192(.S_out(RA3_out),                      \n";
 radix4_pipe << "                  .A_in(Sum3_reg_wire),                 \n";
 radix4_pipe << " 		         .N_in(N_D2_wire),                        \n";
 radix4_pipe << "                  .rst_n(rst_n),                        \n";
 radix4_pipe << "                  .clk(clk)                             \n";
 radix4_pipe << "                 ) ;				                      \n";
 radix4_pipe << " 				                                          \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //Pipeline Register                                    \n";
 radix4_pipe << " R4_PipeReg1 u_R4_PipeReg1(.A0_out(Sum0_reg_wire),      \n";
 radix4_pipe << " 				          .A1_out(Sum1_reg_wire),         \n";
 radix4_pipe << " 				          .A2_out(Sum2_reg_wire),         \n";
 radix4_pipe << " 				          .A3_out(Sum3_reg_wire),		  \n";	  
 radix4_pipe << "                           .A0_in(Sum0_wire),           \n";
 radix4_pipe << " 			              .A1_in(Sum1_wire),              \n";
 radix4_pipe << " 			              .A2_in(Sum2_wire),              \n";
 radix4_pipe << " 			              .A3_in(Sum3_wire),			  \n";            
 radix4_pipe << "                           .rst_n(rst_n),               \n";
 radix4_pipe << "                           .clk(clk)                    \n";
 radix4_pipe << "                           ) ;				  		  \n";
 radix4_pipe << " 				                                          \n";
 radix4_pipe << " endmodule                                              \n";
 radix4_pipe << "                                                        \n";
  
     radix4_pipe.close();         
}
void Pipe::Radix4_R2_Pipe(std::string string_in){
 	 std::ofstream radix4_pipe;
     std::string        string_buf = "/Radix4_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 radix4_pipe.open(ss.str());
 radix4_pipe << " `timescale 1 ns/1 ps                                   \n";
 radix4_pipe << " module Radix4_Pipe(RA0_out,                            \n";
 radix4_pipe << " 			       RA1_out,                              \n";
 radix4_pipe << " 			       RA2_out,                              \n";
 radix4_pipe << " 			       RA3_out,                              \n";
 radix4_pipe << "                  RA0_in,                               \n";
 radix4_pipe << " 			       RA1_in,                               \n";
 radix4_pipe << " 			       RA2_in,                               \n";
 radix4_pipe << " 			       RA3_in,                               \n";
 radix4_pipe << " 		           N_in,                                 \n";
 radix4_pipe << " 		           BU_mode_sel_in,                      \n";
 radix4_pipe << "                  rst_n,                                \n";
 radix4_pipe << "                  clk                                   \n";
 radix4_pipe << "                  ) ;                                   \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " parameter P_WIDTH     = 64 ;                           \n";
 radix4_pipe << " parameter DH_WIDTH    = 96 ;                           \n";
 radix4_pipe << " parameter D_WIDTH     = 192 ;                          \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA0_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA1_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA2_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA3_out ;                          \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA0_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA1_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA2_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA3_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] N_in ;                             \n";
 radix4_pipe << " input               BU_mode_sel_in ;                  \n";
 radix4_pipe << " input               rst_n ;                            \n";
 radix4_pipe << " input               clk ;                              \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " wire  [DH_WIDTH-1:0] Sum0_wire ;                       \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum1_wire ;                       \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum2_wire ;                       \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum3_wire ;                       \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " wire  [DH_WIDTH-1:0] Sum0_reg_wire ;                   \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum1_reg_wire ;                   \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum2_reg_wire ;                   \n";
 radix4_pipe << " wire  [D_WIDTH-1:0]  Sum3_reg_wire ;                   \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " wire  [P_WIDTH-1:0]  N_D2_wire ;                       \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //Pipeline Register                                    \n";
 radix4_pipe << " R4_NPipeReg1 u_R4_NPipeReg1(.N_D2_out(N_D2_wire),      \n";
 radix4_pipe << "                             .N_in(N_in),               \n";
 radix4_pipe << "                             .rst_n(rst_n),             \n";
 radix4_pipe << "                             .clk(clk)                  \n";
 radix4_pipe << "                             ) ;                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //output0                                              \n";
 radix4_pipe << " Sum4_out0 u0_Sum4_out0(.S_out(Sum0_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			             .A1_in(RA1_in),                 \n";
 radix4_pipe << " 			             .A2_in(RA2_in),                 \n";
 radix4_pipe << " 			             .A3_in(RA3_in),			     \n";
 radix4_pipe << "                        .BU_mode_sel_in(BU_mode_sel_in),\n";
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod96 u0_Mod96(.S_out(RA0_out),                        \n";
 radix4_pipe << "                .A_in(Sum0_reg_wire),                   \n";
 radix4_pipe << " 		         .N_in(N_D2_wire),                       \n";
 radix4_pipe << "                .rst_n(rst_n),                          \n";
 radix4_pipe << "                .clk(clk)                               \n";
 radix4_pipe << "                ) ;                                     \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //output1                                              \n";
 radix4_pipe << " Sum4_out1 u1_Sum4_out1(.S_out(Sum1_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			             .A1_in(RA1_in),                 \n";
 radix4_pipe << " 			             .A2_in(RA2_in),                 \n";
 radix4_pipe << " 			             .A3_in(RA3_in),			     \n"; 
 radix4_pipe << "                        .BU_mode_sel_in(BU_mode_sel_in),\n";
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod192 u1_Mod192(.S_out(RA1_out),                      \n";
 radix4_pipe << "                  .A_in(Sum1_reg_wire),                 \n";
 radix4_pipe << " 		           .N_in(N_D2_wire),                     \n";
 radix4_pipe << "                  .rst_n(rst_n),                        \n";
 radix4_pipe << "                  .clk(clk)                             \n";
 radix4_pipe << "                 ) ;                                    \n";
 radix4_pipe << " 					                                     \n";
 radix4_pipe << " //output2                                              \n";
 radix4_pipe << " Sum4_out2 u2_Sum4_out2(.S_out(Sum2_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			             .A1_in(RA1_in),                 \n";
 radix4_pipe << " 			             .A2_in(RA2_in),                 \n";
 radix4_pipe << " 			             .A3_in(RA3_in),			     \n";
 radix4_pipe << "                        .BU_mode_sel_in(BU_mode_sel_in),\n";
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod192 u2_Mod192(.S_out(RA2_out),                      \n";
 radix4_pipe << "                  .A_in(Sum2_reg_wire),                 \n";
 radix4_pipe << " 		           .N_in(N_D2_wire),                     \n";
 radix4_pipe << "                  .rst_n(rst_n),                        \n";
 radix4_pipe << "                  .clk(clk)                             \n";
 radix4_pipe << "                 ) ;					                 \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //output3                                              \n";
 radix4_pipe << " Sum4_out3 u3_Sum4_out3(.S_out(Sum3_wire),              \n";
 radix4_pipe << "                        .A0_in(RA0_in),                 \n";
 radix4_pipe << " 			             .A1_in(RA1_in),                 \n";
 radix4_pipe << " 			             .A2_in(RA2_in),                 \n";
 radix4_pipe << " 			             .A3_in(RA3_in),			     \n"; 
 radix4_pipe << "                        .BU_mode_sel_in(BU_mode_sel_in),\n";
 radix4_pipe << "                        .rst_n(rst_n),                  \n";
 radix4_pipe << "                        .clk(clk)                       \n";
 radix4_pipe << "                        ) ;                             \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " Mod192 u3_Mod192(.S_out(RA3_out),                      \n";
 radix4_pipe << "                  .A_in(Sum3_reg_wire),                 \n";
 radix4_pipe << " 		           .N_in(N_D2_wire),                     \n";
 radix4_pipe << "                  .rst_n(rst_n),                        \n";
 radix4_pipe << "                  .clk(clk)                             \n";
 radix4_pipe << "                 ) ;				                     \n";
 radix4_pipe << " 				                                         \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " //Pipeline Register                                    \n";
 radix4_pipe << " R4_PipeReg1 u_R4_PipeReg1(.A0_out(Sum0_reg_wire),      \n";
 radix4_pipe << " 				            .A1_out(Sum1_reg_wire),      \n";
 radix4_pipe << " 				            .A2_out(Sum2_reg_wire),      \n";
 radix4_pipe << " 				            .A3_out(Sum3_reg_wire),		 \n";	  
 radix4_pipe << "                           .A0_in(Sum0_wire),           \n";
 radix4_pipe << " 			                .A1_in(Sum1_wire),           \n";
 radix4_pipe << " 			                .A2_in(Sum2_wire),           \n";
 radix4_pipe << " 			                .A3_in(Sum3_wire),			 \n";            
 radix4_pipe << "                           .rst_n(rst_n),               \n";
 radix4_pipe << "                           .clk(clk)                    \n";
 radix4_pipe << "                           ) ;				  		     \n";
 radix4_pipe << " 				                                         \n";
 radix4_pipe << " endmodule                                              \n";
 radix4_pipe << "                                                        \n";
     radix4_pipe.close();         
}
//--------------------------------
void Pipe::BU_R4_S0_R2P(std::string string_in){
	 std::ofstream BU_S0;
     std::string         string_buf = "/BU_S0.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU_S0.open(ss.str());
     BU_S0 << "`timescale 1ns/1ps                           \n";
     BU_S0 << "module BU_S0(R0_out, //add                   \n";
     BU_S0 << "             R1_out, //sub                   \n";
     BU_S0 << "             R0_in,                          \n";
     BU_S0 << "             R1_in                           \n";
     BU_S0 << "             );                              \n";
     BU_S0 << "parameter D_WIDTH = 192;                     \n";
     BU_S0 << "parameter P_WIDTH = 64;                      \n";
     BU_S0 << "                                             \n";
     BU_S0 << "output [D_WIDTH-1:0] R0_out;                 \n";
     BU_S0 << "output [D_WIDTH-1:0] R1_out;                 \n";
     BU_S0 << "                                             \n";
     BU_S0 << "input  [P_WIDTH-1:0] R0_in;                  \n";
     BU_S0 << "input  [P_WIDTH-1:0] R1_in;                  \n";
     BU_S0 << "                                             \n";
     BU_S0 << "assign R0_out = R0_in + R1_in;               \n";
     BU_S0 << "assign R1_out = {32'd0,R1_in,32'd0,R0_in};   \n";
     BU_S0 << "                                             \n";
     BU_S0 << "endmodule                                    \n";
	 BU_S0.close();	
}	
void Pipe::BU_R4_R2P(std::string string_in){
	 std::ofstream BU;
     std::string         string_buf = "/BU.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU.open(ss.str());
     BU << " `timescale 1ns/1ps                                                 \n";
     BU << " module BU(R0_out, //add                                            \n";
     BU << "           R1_out, //sub                                            \n";
     BU << "           R0_in,                                                   \n";
     BU << "           R1_in                                                    \n";
     BU << "           );                                                       \n";
     BU << " parameter D_WIDTH = 192;                                           \n";
     BU << "                                                                    \n";
     BU << " output [D_WIDTH-1:0] R0_out;                                       \n";
     BU << " output [D_WIDTH-1:0] R1_out;                                       \n";
     BU << " input  [D_WIDTH-1:0] R0_in;                                        \n";
     BU << " input  [D_WIDTH-1:0] R1_in;                                        \n";
     BU << "                                                                    \n";
     BU << " wire   [D_WIDTH:0]   Result_add;                                   \n";
     BU << " wire   [D_WIDTH:0]   Result_sub;                                   \n";
     BU << " wire   [D_WIDTH-1:0] R1_in_Complement;                             \n";
     BU << "                                                                    \n";
     BU << " assign R1_in_Complement = {R1_in[95:0],R1_in[191:96]};             \n";
     BU << " assign Result_add = R0_in + R1_in;                                 \n";
     BU << " assign Result_sub = R0_in + R1_in_Complement;                      \n";
     BU << " //output                                                           \n";
     BU << " assign R0_out = Result_add[D_WIDTH-1:0] + Result_add[D_WIDTH];     \n";
     BU << " assign R1_out = Result_sub[D_WIDTH-1:0] + Result_sub[D_WIDTH];     \n";
     BU << "                                                                    \n";
     BU << " endmodule                                                          \n";
	 BU.close();	
}
void Pipe::Pipe_R4_R2P(std::string string_in){
	 std::ofstream Pipe;
     std::string        string_buf = "/Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 Pipe.open(ss.str());		
Pipe << "`timescale 1ns/1ps         \n";
Pipe << "module Pipe(R0_out,        \n";
Pipe << "             R1_out,       \n";
Pipe << "             R2_out,       \n";
Pipe << "             R3_out,       \n";
Pipe << "             R0_in,        \n";
Pipe << "             R1_in,        \n";
Pipe << "             R2_in,        \n";
Pipe << "             R3_in,        \n";
Pipe << "             clk,          \n";
Pipe << "             rst_n         \n";
Pipe << "            );             \n";
Pipe << " parameter D_WIDTH = 192;        \n"; 
Pipe << " parameter D_ZERO  = 192'd0;     \n";
Pipe << " output [D_WIDTH-1:0] R0_out;    \n";
Pipe << " output [D_WIDTH-1:0] R1_out;    \n";
Pipe << " output [D_WIDTH-1:0] R2_out;    \n";
Pipe << " output [D_WIDTH-1:0] R3_out;    \n";
Pipe << " input  [D_WIDTH-1:0] R0_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R1_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R2_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R3_in;     \n";
Pipe << " input                clk;       \n";
Pipe << " input                rst_n;     \n";
Pipe << "                                 \n";
Pipe << " reg [D_WIDTH-1:0] R0_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R1_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R2_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R3_out;       \n";
Pipe << "                                 \n";
Pipe << " always@(posedge clk)begin       \n";
Pipe << "   if(~rst_n)begin               \n";
Pipe << "     R0_out  <= D_ZERO;          \n";
Pipe << "     R1_out  <= D_ZERO;          \n";
Pipe << "     R2_out  <= D_ZERO;          \n";
Pipe << "     R3_out  <= D_ZERO;          \n";
Pipe << "   end                           \n";
Pipe << "   else begin                    \n";
Pipe << "     R0_out  <= R0_in;           \n";
Pipe << "     R1_out  <= R1_in;           \n";
Pipe << "     R2_out  <= R2_in;           \n";
Pipe << "     R3_out  <= R3_in;           \n";
Pipe << "   end                           \n";
Pipe << " end                             \n";
Pipe << "                                 \n";
Pipe << "endmodule 	                      \n";
	 Pipe.close();
}
void Pipe::Radix4_Pipe_R2P(std::string string_in){
 	 std::ofstream radix4_pipe;
     std::string        string_buf = "/Radix4_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 radix4_pipe.open(ss.str());
 radix4_pipe << " `timescale 1 ns/1 ps                                   \n";
 radix4_pipe << " module Radix4_Pipe(RA0_out,                            \n";
 radix4_pipe << " 			       RA1_out,                              \n";
 radix4_pipe << " 			       RA2_out,                              \n";
 radix4_pipe << " 			       RA3_out,                              \n";
 radix4_pipe << "                  RA0_in,                               \n";
 radix4_pipe << " 			       RA1_in,                               \n";
 radix4_pipe << " 			       RA2_in,                               \n";
 radix4_pipe << " 			       RA3_in,                               \n";
 radix4_pipe << " 		           N_in,                                 \n";
 radix4_pipe << "                    rst_n,                              \n";
 radix4_pipe << "                    clk                                 \n";
 radix4_pipe << "                    ) ;                                 \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " parameter P_WIDTH     = 64 ;                           \n";
 radix4_pipe << " parameter D_WIDTH     = 192 ;                          \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA0_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA1_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA2_out ;                          \n";
 radix4_pipe << " output[P_WIDTH-1:0] RA3_out ;                          \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA0_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA1_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA2_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] RA3_in ;                           \n";
 radix4_pipe << " input [P_WIDTH-1:0] N_in ;                             \n";
 radix4_pipe << " input               rst_n ;                            \n";
 radix4_pipe << " input               clk ;                              \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S0_0_R0_out_wire;               \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S0_0_R1_out_wire;               \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S0_1_R0_out_wire;               \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S0_1_R1_out_wire;               \n";
 //-----------------------------------------------------------------------------
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S1_0_R0_out_wire;               \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S1_0_R1_out_wire;               \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S1_1_R0_out_wire;               \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] BU_S1_1_R1_out_wire;               \n";
 radix4_pipe << " //----------------                                     \n";
 radix4_pipe << " //stage 0                                              \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] R0_0_D;                            \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] R1_0_D;                            \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] R2_0_D;                            \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] R3_0_D;                            \n";
 //------------------------------------------------------------------------------
 radix4_pipe << " wire  [D_WIDTH-1:0] R0_1_D;                            \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] R1_1_D;                            \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] R2_1_D;                            \n";
 radix4_pipe << " wire  [D_WIDTH-1:0] R3_1_D;                            \n";
 //------------------------------------------------------------------------------
 radix4_pipe << "                                                        \n";
 radix4_pipe << "                                                        \n";
 radix4_pipe << " BU_S0  BU_S0_0(.R0_out(BU_S0_0_R0_out_wire),           \n";
 radix4_pipe << "                .R1_out(BU_S0_0_R1_out_wire),           \n";
 radix4_pipe << "                .R0_in(RA0_in),                         \n";
 radix4_pipe << "                .R1_in(RA2_in)                          \n";
 radix4_pipe << "               );                                       \n";
 radix4_pipe << " BU_S0  BU_S0_1(.R0_out(BU_S0_1_R0_out_wire),           \n";
 radix4_pipe << "                .R1_out(BU_S0_1_R1_out_wire),           \n";
 radix4_pipe << "                .R0_in(RA1_in),                         \n";
 radix4_pipe << "                .R1_in(RA3_in)                          \n";
 radix4_pipe << "               );                                       \n";
 radix4_pipe << " Pipe  Pipe_S0(.R0_out(R0_0_D),                         \n";
 radix4_pipe << "               .R1_out(R1_0_D),                         \n";
 radix4_pipe << "               .R2_out(R2_0_D),                         \n";
 radix4_pipe << "               .R3_out(R3_0_D),                         \n";
 radix4_pipe << "               .R0_in(BU_S0_0_R0_out_wire),             \n";
 radix4_pipe << "               .R1_in(BU_S0_1_R0_out_wire),             \n";
 radix4_pipe << "               .R2_in(BU_S0_0_R1_out_wire),             \n";
 radix4_pipe << "               .R3_in({BU_S0_1_R1_out_wire[143:0],BU_S0_1_R1_out_wire[191:144]}),\n";
 radix4_pipe << "               .clk(clk),                               \n";
 radix4_pipe << "               .rst_n(rst_n)                            \n";
 radix4_pipe << "               );                                       \n";
 radix4_pipe << "  BU   BU_S1_0(.R0_out(BU_S1_0_R0_out_wire),            \n";
 radix4_pipe << "               .R1_out(BU_S1_0_R1_out_wire),            \n";
 radix4_pipe << "               .R0_in(R0_0_D),                          \n";
 radix4_pipe << "               .R1_in(R1_0_D)                           \n";
 radix4_pipe << "              );                                        \n";
 radix4_pipe << "  BU   BU_S1_1(.R0_out(BU_S1_1_R0_out_wire),            \n"; 
 radix4_pipe << "               .R1_out(BU_S1_1_R1_out_wire),            \n"; 
 radix4_pipe << "               .R0_in(R2_0_D),                          \n"; 
 radix4_pipe << "               .R1_in(R3_0_D)                           \n"; 
 radix4_pipe << "              );                                        \n"; 
 radix4_pipe << " Pipe  Pipe_S1(.R0_out(R0_1_D),                         \n";
 radix4_pipe << "               .R1_out(R1_1_D),                         \n";
 radix4_pipe << "               .R2_out(R2_1_D),                         \n";
 radix4_pipe << "               .R3_out(R3_1_D),                         \n";
 radix4_pipe << "               .R0_in(BU_S1_0_R0_out_wire),             \n";
 radix4_pipe << "               .R1_in(BU_S1_0_R1_out_wire),             \n";
 radix4_pipe << "               .R2_in(BU_S1_1_R0_out_wire),             \n";
 radix4_pipe << "               .R3_in(BU_S1_1_R1_out_wire),             \n";
 radix4_pipe << "               .clk(clk),                               \n";
 radix4_pipe << "               .rst_n(rst_n)                            \n"; 
 radix4_pipe << "               );                                       \n";
 radix4_pipe << " Mod192 R0_Mod192(.S_out(RA0_out),                      \n";
 radix4_pipe << "                  .A_in(R0_1_D),                        \n";
 radix4_pipe << "                  .N_in(N_in),                          \n";
 radix4_pipe << "                  .clk(clk),                            \n";
 radix4_pipe << "                  .rst_n(rst_n)                         \n";
 radix4_pipe << "                 );                                     \n";
 radix4_pipe << " Mod192 R1_Mod192(.S_out(RA2_out),                      \n";
 radix4_pipe << "                  .A_in(R1_1_D),                        \n";
 radix4_pipe << "                  .N_in(N_in),                          \n";
 radix4_pipe << "                  .clk(clk),                            \n";
 radix4_pipe << "                  .rst_n(rst_n)                         \n";
 radix4_pipe << "                 );                                     \n";
 radix4_pipe << " Mod192 R2_Mod192(.S_out(RA1_out),                      \n";
 radix4_pipe << "                  .A_in(R2_1_D),                        \n";
 radix4_pipe << "                  .N_in(N_in),                          \n";
 radix4_pipe << "                  .clk(clk),                            \n";
 radix4_pipe << "                  .rst_n(rst_n)                         \n";
 radix4_pipe << "                 );                                     \n";
 radix4_pipe << " Mod192 R3_Mod192(.S_out(RA3_out),                      \n";
 radix4_pipe << "                  .A_in(R3_1_D),                        \n";
 radix4_pipe << "                  .N_in(N_in),                          \n";
 radix4_pipe << "                  .clk(clk),                            \n";
 radix4_pipe << "                  .rst_n(rst_n)                         \n";
 radix4_pipe << "                 );                                     \n";
 radix4_pipe << " endmodule                                              \n";
 radix4_pipe << "                                                        \n";
     radix4_pipe.close(); 	
}
//radix-8
void Pipe::TWIpipe_r8(std::string string_in){
     std::ofstream twipipe;
     std::string        string_buf = "/TWIpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twipipe.open(ss.str());		
twipipe << "//=========================================                         \n";
twipipe << "//Date:2020/07/1                                                   \n";
twipipe << "//writer:shiyong                                                    \n";
twipipe << "//note: bn ank ma pipline                                           \n";
twipipe << "//      FFT type of m-th tiwiddle factor. m-th cyclotomic polynomial\n";
twipipe << "//========================================                     \n";
twipipe << "`timescale 1 ns/1 ps                                                \n";
twipipe << "module TWIpipe(                                                \n";
twipipe << "    BN_out,                                                    \n";
twipipe << "    MA_out,                                                    \n";
twipipe << "	TWIradix0_o,                                               \n";
twipipe << "	TWIradix1_o,                                               \n";
twipipe << "	TWIradix2_o,                                               \n";
twipipe << "	TWIradix3_o,                                               \n";
twipipe << "	TWIradix4_o,                                               \n";
twipipe << "	TWIradix5_o,                                               \n";
twipipe << "	TWIradix6_o,                                               \n";
twipipe << "	TWIradix7_o,                                               \n";
twipipe << "    BN_in,                                                     \n";
twipipe << "    MA_in,                                                     \n";
twipipe << "	TWIradix0_i,                                               \n";
twipipe << "	TWIradix1_i,                                               \n";
twipipe << "	TWIradix2_i,                                               \n";
twipipe << "	TWIradix3_i,                                               \n";
twipipe << "	TWIradix4_i,                                               \n";
twipipe << "	TWIradix5_i,                                               \n";
twipipe << "	TWIradix6_i,                                               \n";
twipipe << "	TWIradix7_i,                                               \n";
twipipe << "	rst_n,                                                     \n";
twipipe << "    clk                                                        \n";
twipipe << ");                                                             \n";
twipipe << "                                                               \n";
twipipe << "parameter A_WIDTH = " << addr_width << ";                                         \n";
twipipe << "parameter A_ZERO  = " << addr_width << "'b0;                                      \n";
twipipe << "parameter P_WIDTH = 64;                                        \n";
twipipe << "parameter P_ZERO  = 64'd0;                                     \n";
twipipe << "                                                               \n";
twipipe << "output [A_WIDTH-1:0] MA_out;                                   \n";
twipipe << "output               BN_out;                                   \n";
twipipe << "output [P_WIDTH-1:0]TWIradix0_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix1_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix2_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix3_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix4_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix5_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix6_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix7_o;                               \n";
twipipe << "                                                               \n";
twipipe << "input  [A_WIDTH-1:0] MA_in;                                    \n";
twipipe << "input                BN_in;                                    \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix0_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix1_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix2_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix3_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix4_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix5_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix6_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix7_i;                               \n";
twipipe << "input                rst_n;                                    \n";
twipipe << "input                clk;                                      \n";
twipipe << "                                                               \n";
twipipe << "reg  [A_WIDTH-1:0] MA_out;                                     \n";
twipipe << "reg  [A_WIDTH-1:0] MA_reg0;                                    \n";
twipipe << "reg  [A_WIDTH-1:0] MA_reg1;                                    \n";
twipipe << "                                                               \n";
twipipe << "reg                BN_out;                                     \n";
twipipe << "reg                BN_reg0;                                    \n";
twipipe << "reg                BN_reg1;                                    \n";
twipipe << "                                                               \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix0_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix1_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix2_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix3_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix4_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix5_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix6_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix7_o;                                  \n";
twipipe << "                                                               \n";
twipipe << "                                                               \n";
twipipe << "    always @(posedge clk,negedge rst_n)begin                   \n";
twipipe << "        if(~rst_n)begin                                        \n";
twipipe << "            MA_reg0      <=  A_ZERO;                           \n";
twipipe << "            MA_reg1      <=  A_ZERO;                           \n";
twipipe << "            MA_out       <=  A_ZERO;                           \n";
twipipe << "            BN_reg0      <=  1'b0;                             \n";
twipipe << "            BN_reg1      <=  1'b0;                             \n";
twipipe << "			BN_out       <=  1'b0;                             \n";
twipipe << "			TWIradix0_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix1_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix2_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix3_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix4_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix5_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix6_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix7_o  <=  P_ZERO;                           \n";
twipipe << "        end                                                    \n";
twipipe << "        else begin                                             \n";
twipipe << "            MA_reg0  <= MA_in;                                 \n";
twipipe << "            MA_reg1  <= MA_reg0;                               \n";
twipipe << "            MA_out   <= MA_reg1;                               \n";
twipipe << "			//                                                 \n";
twipipe << "            BN_reg0  <= BN_in;                                 \n";
twipipe << "            BN_reg1  <= BN_reg0;                               \n";
twipipe << "            BN_out   <= BN_reg1;                               \n";
twipipe << "			//                                                 \n";
twipipe << "		    TWIradix0_o  <=  TWIradix0_i;                      \n";
twipipe << "			TWIradix1_o  <=  TWIradix1_i;                      \n";
twipipe << "			TWIradix2_o  <=  TWIradix2_i;                      \n";
twipipe << "			TWIradix3_o  <=  TWIradix3_i;                      \n";
twipipe << "			TWIradix4_o  <=  TWIradix4_i;                      \n";
twipipe << "			TWIradix5_o  <=  TWIradix5_i;                      \n";
twipipe << "			TWIradix6_o  <=  TWIradix6_i;                      \n";
twipipe << "			TWIradix7_o  <=  TWIradix7_i;                      \n";
twipipe << "        end                                                    \n";
twipipe << "    end                                                        \n";
twipipe << "                                                               \n";
twipipe << "endmodule                                                      \n";	
	 
	 twipipe.close();
}
void Pipe::R8_NPipeReg1(std::string string_in){
 	 std::ofstream r8_npipereg1;
     std::string        string_buf = "/R8_NPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_npipereg1.open(ss.str());
 r8_npipereg1 << " `timescale 1 ns/1 ps                                   \n";
 r8_npipereg1 << " module R8_NPipeReg1(N_D2_out,                          \n";
 r8_npipereg1 << "                     N_in,                              \n";
 r8_npipereg1 << "                     rst_n,                             \n";
 r8_npipereg1 << "                     clk                                \n";
 r8_npipereg1 << "                     ) ;                                \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << " parameter P_WIDTH     = 64 ;                           \n";
 r8_npipereg1 << " parameter P_ZERO      = 64'h0 ;                        \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << " output [P_WIDTH-1:0] N_D2_out ;                        \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << " input [P_WIDTH-1:0]  N_in ;                            \n";
 r8_npipereg1 << " input                rst_n ;                           \n";
 r8_npipereg1 << " input                clk ;                             \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << " reg [P_WIDTH-1:0]  N_D0reg ;                           \n";
 r8_npipereg1 << " reg [P_WIDTH-1:0]  N_D2_out ;                          \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << " 	//                                                    \n";
 r8_npipereg1 << " 	always @(posedge clk or negedge rst_n) begin          \n";
 r8_npipereg1 << " 		if(~rst_n) begin                                  \n";
 r8_npipereg1 << " 			N_D0reg <= P_ZERO ;                           \n";
 r8_npipereg1 << " 			N_D2_out <= P_ZERO ;                          \n";
 r8_npipereg1 << " 		end                                               \n";
 r8_npipereg1 << " 		else begin                                        \n";
 r8_npipereg1 << " 			N_D0reg <= N_in ;                             \n";
 r8_npipereg1 << " 			N_D2_out <= N_D0reg ;                         \n";
 r8_npipereg1 << " 		end                                               \n";
 r8_npipereg1 << " 	end                                                   \n";
 r8_npipereg1 << "                                                        \n";
 r8_npipereg1 << " endmodule                                              \n";
 r8_npipereg1 << "                                                        \n";            

     r8_npipereg1.close();     
}
void Pipe::R8_NPipeReg2(std::string string_in){
 	 std::ofstream r8_npipereg2;
     std::string        string_buf = "/R8_NPipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_npipereg2.open(ss.str());
 r8_npipereg2 << " `timescale 1 ns/1 ps                                     \n";
 r8_npipereg2 << " module R8_NPipeReg2(Ninv2_D1_out,                        \n";
 r8_npipereg2 << "                     N_D2_out,                            \n";
 r8_npipereg2 << " 					Ninv2_in,                               \n";
 r8_npipereg2 << "                     N_in,                                \n";
 r8_npipereg2 << "                     rst_n,                               \n";
 r8_npipereg2 << "                     clk                                  \n";
 r8_npipereg2 << "                     ) ;                                  \n";
 r8_npipereg2 << "                                                          \n";
 r8_npipereg2 << " parameter P_WIDTH     = 64 ;                             \n";
 r8_npipereg2 << " parameter P_ZERO      = 64'h0 ;                          \n";
 r8_npipereg2 << " parameter P1_ZERO     = 65'h0 ;                          \n";
 r8_npipereg2 << "                                                          \n";
 r8_npipereg2 << "                                                          \n";
 r8_npipereg2 << " output [P_WIDTH:0]   Ninv2_D1_out ;                      \n";
 r8_npipereg2 << " output [P_WIDTH-1:0] N_D2_out ;                          \n";
 r8_npipereg2 << "                                                          \n";
 r8_npipereg2 << " input [P_WIDTH:0]    Ninv2_in ;                          \n";
 r8_npipereg2 << " input [P_WIDTH-1:0]  N_in ;                              \n";
 r8_npipereg2 << " input                rst_n ;                             \n";
 r8_npipereg2 << " input                clk ;                               \n";
 r8_npipereg2 << "                                                          \n";
 r8_npipereg2 << " reg [P_WIDTH-1:0]  N_D0reg ;                             \n";
 r8_npipereg2 << " reg [P_WIDTH-1:0]  N_D2_out ;                            \n";
 r8_npipereg2 << " reg [P_WIDTH:0]    Ninv2_D1_out ;                        \n";
 r8_npipereg2 << "                                                          \n";
 r8_npipereg2 << " 	//                                                      \n";
 r8_npipereg2 << " 	always @(posedge clk or negedge rst_n) begin            \n";
 r8_npipereg2 << " 		if(~rst_n) begin                                    \n";
 r8_npipereg2 << " 			N_D0reg <= P_ZERO ;                             \n";
 r8_npipereg2 << " 			N_D2_out <= P_ZERO ;                            \n";
 r8_npipereg2 << " 			Ninv2_D1_out <= P1_ZERO ;                       \n";
 r8_npipereg2 << " 		end                                                 \n";
 r8_npipereg2 << " 		else begin                                          \n";
 r8_npipereg2 << " 			N_D0reg <= N_in ;                               \n";
 r8_npipereg2 << " 			N_D2_out <= N_D0reg ;                           \n";
 r8_npipereg2 << " 			Ninv2_D1_out <= Ninv2_in ;                      \n";
 r8_npipereg2 << " 		end                                                 \n";
 r8_npipereg2 << " 	end                                                     \n";
 r8_npipereg2 << "                                                          \n";
 r8_npipereg2 << " endmodule                                                \n";
 r8_npipereg2 << "                                                          \n";            
  
     r8_npipereg2.close();     
}
void Pipe::R8_NPipeReg3(std::string string_in){
 	 std::ofstream r8_npipereg3;
     std::string        string_buf = "/R8_NPipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_npipereg3.open(ss.str());
 r8_npipereg3 << " `timescale 1 ns/1 ps                                         \n";
 r8_npipereg3 << " module R8_NPipeReg3(N_D4_out,                                \n";
 r8_npipereg3 << "                     N_in,                                    \n";
 r8_npipereg3 << "                     rst_n,                                   \n";
 r8_npipereg3 << "                     clk                                      \n";
 r8_npipereg3 << "                     ) ;                                      \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << " parameter P_WIDTH     = 64 ;                                 \n";
 r8_npipereg3 << " parameter P_ZERO      = 64'h0 ;                              \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << " output [P_WIDTH-1:0] N_D4_out ;                              \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << " input [P_WIDTH-1:0]  N_in ;                                  \n";
 r8_npipereg3 << " input                rst_n ;                                 \n";
 r8_npipereg3 << " input                clk ;                                   \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << " reg [P_WIDTH-1:0]  N_D0reg ;                                 \n";
 r8_npipereg3 << " reg [P_WIDTH-1:0]  N_D1reg ;                                 \n";
 r8_npipereg3 << " reg [P_WIDTH-1:0]  N_D2reg ;                                 \n";
 r8_npipereg3 << " reg [P_WIDTH-1:0]  N_D4_out ;                                \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << " 	//                                                          \n";
 r8_npipereg3 << " 	always @(posedge clk or negedge rst_n) begin                \n";
 r8_npipereg3 << " 		if(~rst_n) begin                                        \n";
 r8_npipereg3 << " 			N_D0reg <= P_ZERO ;                                 \n";
 r8_npipereg3 << " 			N_D1reg <= P_ZERO ;                                 \n";
 r8_npipereg3 << " 			N_D2reg <= P_ZERO ;                                 \n";
 r8_npipereg3 << " 			N_D4_out <= P_ZERO ;                                \n";
 r8_npipereg3 << " 		end                                                     \n";
 r8_npipereg3 << " 		else begin                                              \n";
 r8_npipereg3 << " 			N_D0reg <= N_in ;                                   \n";
 r8_npipereg3 << " 			N_D1reg <= N_D0reg ;                                \n";
 r8_npipereg3 << " 			N_D2reg <= N_D1reg ;                                \n";
 r8_npipereg3 << " 			N_D4_out <= N_D2reg ;                               \n";
 r8_npipereg3 << " 		end                                                     \n";
 r8_npipereg3 << " 	end                                                         \n";
 r8_npipereg3 << "                                                              \n";
 r8_npipereg3 << " endmodule                                                    \n";
 r8_npipereg3 << "                                                              \n";            
 
     r8_npipereg3.close();     
}
void Pipe::R8_PipeReg1(std::string string_in){
 	 std::ofstream r8_pipereg1;
     std::string        string_buf = "/R8_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_pipereg1.open(ss.str());
 r8_pipereg1 << " `timescale 1 ns/1 ps                                              \n";
 r8_pipereg1 << " module R8_PipeReg1(A0_out,                                        \n";
 r8_pipereg1 << " 				   A1_out,                                          \n";
 r8_pipereg1 << " 				   A2_out,                                          \n";
 r8_pipereg1 << " 				   A3_out,                                          \n";
 r8_pipereg1 << " 				   A4_out,                                          \n";
 r8_pipereg1 << " 				   A5_out,                                          \n";
 r8_pipereg1 << " 				   A6_out,                                          \n";
 r8_pipereg1 << " 				   A7_out,                                          \n";
 r8_pipereg1 << "                    A0_in,                                         \n";
 r8_pipereg1 << " 			       A1_in,                                           \n";
 r8_pipereg1 << " 			       A2_in,                                           \n";
 r8_pipereg1 << " 			       A3_in,                                           \n";
 r8_pipereg1 << " 			       A4_in,                                           \n";
 r8_pipereg1 << " 			       A5_in,                                           \n";
 r8_pipereg1 << " 			       A6_in,                                           \n";
 r8_pipereg1 << " 			       A7_in,                                           \n";
 r8_pipereg1 << "                    rst_n,                                         \n";
 r8_pipereg1 << "                    clk                                            \n";
 r8_pipereg1 << "                    ) ;                                            \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << " parameter D_WIDTH     = 192 ;                                     \n";
 r8_pipereg1 << " parameter DH_WIDTH    = 96 ;                                      \n";
 r8_pipereg1 << " parameter D_ZERO      = 192'h0 ;                                  \n";
 r8_pipereg1 << " parameter DH_ZERO     = 96'h0 ;                                   \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << " output [DH_WIDTH-1:0] A0_out ;                                    \n";
 r8_pipereg1 << " output [D_WIDTH-1:0]  A1_out ;                                    \n";
 r8_pipereg1 << " output [D_WIDTH-1:0]  A2_out ;                                    \n";
 r8_pipereg1 << " output [D_WIDTH-1:0]  A3_out ;                                    \n";
 r8_pipereg1 << " output [D_WIDTH-1:0]  A4_out ;                                    \n";
 r8_pipereg1 << " output [D_WIDTH-1:0]  A5_out ;                                    \n";
 r8_pipereg1 << " output [D_WIDTH-1:0]  A6_out ;                                    \n";
 r8_pipereg1 << " output [D_WIDTH-1:0]  A7_out ;                                    \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << " input [DH_WIDTH-1:0] A0_in ;                                      \n";
 r8_pipereg1 << " input [D_WIDTH-1:0]  A1_in ;                                      \n";
 r8_pipereg1 << " input [D_WIDTH-1:0]  A2_in ;                                      \n";
 r8_pipereg1 << " input [D_WIDTH-1:0]  A3_in ;                                      \n";
 r8_pipereg1 << " input [D_WIDTH-1:0]  A4_in ;                                      \n";
 r8_pipereg1 << " input [D_WIDTH-1:0]  A5_in ;                                      \n";
 r8_pipereg1 << " input [D_WIDTH-1:0]  A6_in ;                                      \n";
 r8_pipereg1 << " input [D_WIDTH-1:0]  A7_in ;                                      \n";
 r8_pipereg1 << " input                rst_n ;                                      \n";
 r8_pipereg1 << " input                clk ;                                        \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << " reg [DH_WIDTH-1:0] A0_out ;                                       \n";
 r8_pipereg1 << " reg [D_WIDTH-1:0]  A1_out ;                                       \n";
 r8_pipereg1 << " reg [D_WIDTH-1:0]  A2_out ;                                       \n";
 r8_pipereg1 << " reg [D_WIDTH-1:0]  A3_out ;                                       \n";
 r8_pipereg1 << " reg [D_WIDTH-1:0]  A4_out ;                                       \n";
 r8_pipereg1 << " reg [D_WIDTH-1:0]  A5_out ;                                       \n";
 r8_pipereg1 << " reg [D_WIDTH-1:0]  A6_out ;                                       \n";
 r8_pipereg1 << " reg [D_WIDTH-1:0]  A7_out ;                                       \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << " 	//                                                              \n";
 r8_pipereg1 << " 	always @(posedge clk or negedge rst_n) begin                    \n";
 r8_pipereg1 << " 		if(~rst_n) begin                                            \n";
 r8_pipereg1 << " 			A0_out <= DH_ZERO ;                                     \n";
 r8_pipereg1 << " 			A1_out <= D_ZERO ;                                      \n";
 r8_pipereg1 << " 			A2_out <= D_ZERO ;                                      \n";
 r8_pipereg1 << " 			A3_out <= D_ZERO ;                                      \n";
 r8_pipereg1 << " 			A4_out <= D_ZERO ;                                      \n";
 r8_pipereg1 << " 			A5_out <= D_ZERO ;                                      \n";
 r8_pipereg1 << " 			A6_out <= D_ZERO ;                                      \n";
 r8_pipereg1 << " 			A7_out <= D_ZERO ;                                      \n";
 r8_pipereg1 << " 		end                                                         \n";
 r8_pipereg1 << " 		else begin                                                  \n";
 r8_pipereg1 << " 			A0_out <= A0_in ;                                       \n";
 r8_pipereg1 << " 			A1_out <= A1_in ;                                       \n";
 r8_pipereg1 << " 			A2_out <= A2_in ;                                       \n";
 r8_pipereg1 << " 			A3_out <= A3_in ;                                       \n";
 r8_pipereg1 << " 			A4_out <= A4_in ;                                       \n";
 r8_pipereg1 << " 			A5_out <= A5_in ;                                       \n";
 r8_pipereg1 << " 			A6_out <= A6_in ;                                       \n";
 r8_pipereg1 << " 			A7_out <= A7_in ;                                       \n";
 r8_pipereg1 << " 		end                                                         \n";
 r8_pipereg1 << " 	end                                                             \n";
 r8_pipereg1 << "                                                                   \n";
 r8_pipereg1 << " endmodule                                                         \n";
 r8_pipereg1 << "                                                                   \n";
 
     r8_pipereg1.close();     
}
void Pipe::R8_PipeReg2(std::string string_in){
 	 std::ofstream r8_pipereg2;
     std::string        string_buf = "/R8_PipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_pipereg2.open(ss.str());
 r8_pipereg2 << " `timescale 1 ns/1 ps                                               \n";
 r8_pipereg2 << " module R8_PipeReg2(A0_out,                                         \n";
 r8_pipereg2 << " 				   Ac_out,                                           \n";
 r8_pipereg2 << "                    A0_in,                                          \n";
 r8_pipereg2 << " 				   Ac_in,                                            \n";
 r8_pipereg2 << "                    rst_n,                                          \n";
 r8_pipereg2 << "                    clk                                             \n";
 r8_pipereg2 << "                    ) ;                                             \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << " parameter P_WIDTH     = 64 ;                                       \n";
 r8_pipereg2 << " parameter P_ZERO      = 64'h0 ;                                    \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << " output [P_WIDTH-1:0] A0_out ;                                      \n";
 r8_pipereg2 << " output               Ac_out ;                                      \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << " input [P_WIDTH-1:0]  A0_in ;                                       \n";
 r8_pipereg2 << " input                Ac_in ;                                       \n";
 r8_pipereg2 << " input                rst_n ;                                       \n";
 r8_pipereg2 << " input                clk ;                                         \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << " reg [P_WIDTH-1:0]  A0_out ;                                        \n";
 r8_pipereg2 << " reg [P_WIDTH-1:0]  A1_out ;                                        \n";
 r8_pipereg2 << " reg                Ac_out ;                                        \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << " 	//                                                               \n";
 r8_pipereg2 << " 	always @(posedge clk or negedge rst_n) begin                     \n";
 r8_pipereg2 << " 		if(~rst_n) begin                                             \n";
 r8_pipereg2 << " 			A0_out <= P_ZERO ;                                       \n";
 r8_pipereg2 << " 			Ac_out <= 1'b0 ;                                         \n";
 r8_pipereg2 << " 		end                                                          \n";
 r8_pipereg2 << " 		else begin                                                   \n";
 r8_pipereg2 << " 			A0_out <= A0_in ;                                        \n";
 r8_pipereg2 << " 			Ac_out <= Ac_in ;                                        \n";
 r8_pipereg2 << " 		end                                                          \n";
 r8_pipereg2 << " 	end                                                              \n";
 r8_pipereg2 << "                                                                    \n";
 r8_pipereg2 << " endmodule                                                          \n";
 r8_pipereg2 << "                                                                    \n";
  
     r8_pipereg2.close();     
}
void Pipe::R8_PipeReg3(std::string string_in){
 	 std::ofstream r8_pipereg3;
     std::string        string_buf = "/R8_PipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_pipereg3.open(ss.str());
 r8_pipereg3 << " `timescale 1 ns/1 ps                                                 \n";
 r8_pipereg3 << " module R8_PipeReg3(A0_out,                                           \n";
 r8_pipereg3 << " 				   Ac_out,                                             \n";
 r8_pipereg3 << " 				   Dinv_out,                                           \n";
 r8_pipereg3 << " 				   Ninv2_out,                                          \n";
 r8_pipereg3 << "                    A0_in,                                            \n";
 r8_pipereg3 << " 				   Ac_in,                                              \n";
 r8_pipereg3 << " 				   Dinv_in,                                            \n";
 r8_pipereg3 << " 				   Ninv2_in,                                           \n";
 r8_pipereg3 << "                    rst_n,                                            \n";
 r8_pipereg3 << "                    clk                                               \n";
 r8_pipereg3 << "                    ) ;                                               \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << " parameter P_WIDTH     = 64 ;                                         \n";
 r8_pipereg3 << " parameter P_ZERO      = 64'h0 ;                                      \n";
 r8_pipereg3 << " parameter P1_ZERO     = 65'h0 ;                                      \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << " output [P_WIDTH-1:0] A0_out ;                                        \n";
 r8_pipereg3 << " output               Ac_out ;                                        \n";
 r8_pipereg3 << " output [P_WIDTH-1:0] Dinv_out ;                                      \n";
 r8_pipereg3 << " output [P_WIDTH:0]   Ninv2_out ;                                     \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << " input [P_WIDTH-1:0]  A0_in ;                                         \n";
 r8_pipereg3 << " input                Ac_in ;                                         \n";
 r8_pipereg3 << " input [P_WIDTH-1:0]  Dinv_in ;                                       \n";
 r8_pipereg3 << " input [P_WIDTH:0]    Ninv2_in ;                                      \n";
 r8_pipereg3 << " input                rst_n ;                                         \n";
 r8_pipereg3 << " input                clk ;                                           \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << " reg [P_WIDTH-1:0]  A0_out ;                                          \n";
 r8_pipereg3 << " reg                Ac_out ;                                          \n";
 r8_pipereg3 << " reg [P_WIDTH-1:0]  Dinv_out ;                                        \n";
 r8_pipereg3 << " reg [P_WIDTH:0]    Ninv2_out ;                                       \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << " 	//                                                                 \n";
 r8_pipereg3 << " 	always @(posedge clk or negedge rst_n) begin                       \n";
 r8_pipereg3 << " 		if(~rst_n) begin                                               \n";
 r8_pipereg3 << " 			A0_out <= P_ZERO ;                                         \n";
 r8_pipereg3 << " 			Ac_out <= 1'b0 ;                                           \n";
 r8_pipereg3 << " 			Dinv_out <= P_ZERO ;                                       \n";
 r8_pipereg3 << " 			Ninv2_out <= P1_ZERO ;                                     \n";
 r8_pipereg3 << " 		end                                                            \n";
 r8_pipereg3 << " 		else begin                                                     \n";
 r8_pipereg3 << " 			A0_out <= A0_in ;                                          \n";
 r8_pipereg3 << " 			Ac_out <= Ac_in ;                                          \n";
 r8_pipereg3 << " 			Dinv_out <= Dinv_in ;                                      \n";
 r8_pipereg3 << " 			Ninv2_out <= Ninv2_in ;                                    \n";
 r8_pipereg3 << " 		end                                                            \n";
 r8_pipereg3 << " 	end                                                                \n";
 r8_pipereg3 << "                                                                      \n";
 r8_pipereg3 << " endmodule                                                            \n";
 r8_pipereg3 << "                                                                      \n";
 
     r8_pipereg3.close();     
}
void Pipe::R8_PipeReg4(std::string string_in){
 	 std::ofstream r8_pipereg4;
     std::string        string_buf = "/R8_PipeReg4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_pipereg4.open(ss.str());
 r8_pipereg4 << " `timescale 1 ns/1 ps                                          \n";
 r8_pipereg4 << " module R8_PipeReg4(A0_out,                                    \n";
 r8_pipereg4 << " 				   Ac_out,                                      \n";
 r8_pipereg4 << " 				   Ninv2_D2_out,                                \n";
 r8_pipereg4 << "                    A0_in,                                     \n";
 r8_pipereg4 << " 				   Ac_in,                                       \n";
 r8_pipereg4 << " 				   Ninv2_in,                                    \n";
 r8_pipereg4 << "                    rst_n,                                     \n";
 r8_pipereg4 << "                    clk                                        \n";
 r8_pipereg4 << "                    ) ;                                        \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << " parameter P_WIDTH     = 64 ;                                  \n";
 r8_pipereg4 << " parameter P_ZERO      = 64'h0 ;                               \n";
 r8_pipereg4 << " parameter P1_ZERO     = 65'h0 ;                               \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << " output [P_WIDTH-1:0] A0_out ;                                 \n";
 r8_pipereg4 << " output               Ac_out ;                                 \n";
 r8_pipereg4 << " output [P_WIDTH:0]   Ninv2_D2_out ;                           \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << " input [P_WIDTH-1:0]  A0_in ;                                  \n";
 r8_pipereg4 << " input                Ac_in ;                                  \n";
 r8_pipereg4 << " input [P_WIDTH:0]    Ninv2_in ;                               \n";
 r8_pipereg4 << " input                rst_n ;                                  \n";
 r8_pipereg4 << " input                clk ;                                    \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << " reg [P_WIDTH-1:0]  A0_out ;                                   \n";
 r8_pipereg4 << " reg                Ac_out ;                                   \n";
 r8_pipereg4 << " reg [P_WIDTH:0]    Ninv2_D0_reg ;                             \n";
 r8_pipereg4 << " reg [P_WIDTH:0]    Ninv2_D2_out ;                             \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << " 	//Ninv2 delay 2-cycle                                       \n";
 r8_pipereg4 << " 	always @(posedge clk or negedge rst_n) begin                \n";
 r8_pipereg4 << " 		if(~rst_n) begin                                        \n";
 r8_pipereg4 << " 			A0_out <= P_ZERO ;                                  \n";
 r8_pipereg4 << " 			Ac_out <= 1'b0 ;                                    \n";
 r8_pipereg4 << " 			Ninv2_D0_reg <= P1_ZERO ;                           \n";
 r8_pipereg4 << " 			Ninv2_D2_out <= P1_ZERO ;                           \n";
 r8_pipereg4 << " 		end                                                     \n";
 r8_pipereg4 << " 		else begin                                              \n";
 r8_pipereg4 << " 			A0_out <= A0_in ;                                   \n";
 r8_pipereg4 << " 			Ac_out <= Ac_in ;                                   \n";
 r8_pipereg4 << " 			Ninv2_D0_reg <= Ninv2_in ;                          \n";
 r8_pipereg4 << " 			Ninv2_D2_out <= Ninv2_D0_reg ;                      \n";
 r8_pipereg4 << " 		end                                                     \n";
 r8_pipereg4 << " 	end                                                         \n";
 r8_pipereg4 << "                                                               \n";
 r8_pipereg4 << " endmodule                                                     \n";
 r8_pipereg4 << "                                                               \n";            
  
     r8_pipereg4.close();     
}
void Pipe::R8_PipeReg4_2(std::string string_in){
 	 std::ofstream r8_pipereg4_2;
     std::string        string_buf = "/R8_PipeReg4_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_pipereg4_2.open(ss.str());
  r8_pipereg4_2 << " `timescale 1 ns/1 ps                                     \n";
  r8_pipereg4_2 << " module R8_PipeReg4_2(A0_out,                             \n";
  r8_pipereg4_2 << " 					 Ac_out,                              \n";
  r8_pipereg4_2 << " 					 N_D1_out,                            \n";
  r8_pipereg4_2 << " 					 D_out,                               \n";
  r8_pipereg4_2 << "                      A0_in,                              \n";
  r8_pipereg4_2 << " 					 Ac_in,                               \n";
  r8_pipereg4_2 << " 					 N_in,                                \n";
  r8_pipereg4_2 << " 					 D_in,                                \n";
  r8_pipereg4_2 << "                      rst_n,                              \n";
  r8_pipereg4_2 << "                      clk                                 \n";
  r8_pipereg4_2 << "                      ) ;                                 \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << " parameter P_WIDTH     = 64 ;                             \n";
  r8_pipereg4_2 << " parameter P_ZERO      = 64'h0 ;                          \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << " output [P_WIDTH-1:0] A0_out ;                            \n";
  r8_pipereg4_2 << " output               Ac_out ;                            \n";
  r8_pipereg4_2 << " output [P_WIDTH-1:0] N_D1_out ;                          \n";
  r8_pipereg4_2 << " output [P_WIDTH-1:0] D_out ;                             \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << " input [P_WIDTH-1:0]  A0_in ;                             \n";
  r8_pipereg4_2 << " input                Ac_in ;                             \n";
  r8_pipereg4_2 << " input [P_WIDTH-1:0]  N_in ;                              \n";
  r8_pipereg4_2 << " input [P_WIDTH-1:0]  D_in ;                              \n";
  r8_pipereg4_2 << " input                rst_n ;                             \n";
  r8_pipereg4_2 << " input                clk ;                               \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << " reg [P_WIDTH-1:0]  A0_out ;                              \n";
  r8_pipereg4_2 << " reg                Ac_out ;                              \n";
  r8_pipereg4_2 << " reg [P_WIDTH-1:0]  N_D1_out ;                            \n";
  r8_pipereg4_2 << " reg [P_WIDTH-1:0]  D_out ;                               \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << " 	//                                                    \n";
  r8_pipereg4_2 << " 	always @(posedge clk or negedge rst_n) begin          \n";
  r8_pipereg4_2 << " 		if(~rst_n) begin                                  \n";
  r8_pipereg4_2 << " 			A0_out <= P_ZERO ;                            \n";
  r8_pipereg4_2 << " 			Ac_out <= 1'b0 ;                              \n";
  r8_pipereg4_2 << " 			N_D1_out <= P_ZERO ;                          \n";
  r8_pipereg4_2 << " 			D_out <= P_ZERO ;                             \n";
  r8_pipereg4_2 << " 		end                                               \n";
  r8_pipereg4_2 << " 		else begin                                        \n";
  r8_pipereg4_2 << " 			A0_out <= A0_in ;                             \n";
  r8_pipereg4_2 << " 			Ac_out <= Ac_in ;                             \n";
  r8_pipereg4_2 << " 			N_D1_out <= N_in ;                            \n";
  r8_pipereg4_2 << " 			D_out <= D_in ;                               \n";
  r8_pipereg4_2 << " 		end                                               \n";
  r8_pipereg4_2 << " 	end                                                   \n";
  r8_pipereg4_2 << "                                                          \n";
  r8_pipereg4_2 << " endmodule                                                \n";
  r8_pipereg4_2 << "                                                          \n";            
 
     r8_pipereg4_2.close();     
}
void Pipe::R8_PipeReg5_1(std::string string_in){
 	 std::ofstream r8_pipereg5_1;
     std::string        string_buf = "/R8_PipeReg5_1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_pipereg5_1.open(ss.str());
  r8_pipereg5_1 << " `timescale 1 ns/1 ps                                \n";
  r8_pipereg5_1 << " module R8_PipeReg5_1(SS_out,                        \n";
  r8_pipereg5_1 << " 					 SC_out,                         \n";
  r8_pipereg5_1 << "                      SS_in,                         \n";
  r8_pipereg5_1 << " 					 SC_in,                          \n";
  r8_pipereg5_1 << "                      rst_n,                         \n";
  r8_pipereg5_1 << "                      clk                            \n";
  r8_pipereg5_1 << "                      ) ;                            \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << " parameter DH_WIDTH     = 96 ;                       \n";
  r8_pipereg5_1 << " parameter DH_ZERO      = 96'h0 ;                    \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << " output [DH_WIDTH-1:0] SS_out ;                      \n";
  r8_pipereg5_1 << " output [DH_WIDTH-1:0] SC_out ;                      \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << " input [DH_WIDTH-1:0]  SS_in ;                       \n";
  r8_pipereg5_1 << " input [DH_WIDTH-1:0]  SC_in ;                       \n";
  r8_pipereg5_1 << " input                 rst_n ;                       \n";
  r8_pipereg5_1 << " input                 clk ;                         \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << " reg [DH_WIDTH-1:0]  SS_out ;                        \n";
  r8_pipereg5_1 << " reg [DH_WIDTH-1:0]  SC_out ;                        \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << " 	//                                               \n";
  r8_pipereg5_1 << " 	always @(posedge clk or negedge rst_n) begin     \n";
  r8_pipereg5_1 << " 		if(~rst_n) begin                             \n";
  r8_pipereg5_1 << " 			SS_out <= DH_ZERO ;                      \n";
  r8_pipereg5_1 << " 			SC_out <= DH_ZERO ;                      \n";
  r8_pipereg5_1 << " 		end                                          \n";
  r8_pipereg5_1 << " 		else begin                                   \n";
  r8_pipereg5_1 << " 			SS_out <= SS_in ;                        \n";
  r8_pipereg5_1 << " 			SC_out <= SC_in ;                        \n";
  r8_pipereg5_1 << " 		end                                          \n";
  r8_pipereg5_1 << " 	end                                              \n";
  r8_pipereg5_1 << "                                                     \n";
  r8_pipereg5_1 << " endmodule                                           \n";
  r8_pipereg5_1 << "                                                     \n";            
 
     r8_pipereg5_1.close();     
}
void Pipe::R8_PipeReg5_2(std::string string_in){
 	 std::ofstream r8_pipereg5_2;
     std::string        string_buf = "/R8_PipeReg5_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r8_pipereg5_2.open(ss.str());
  r8_pipereg5_2 << " `timescale 1 ns/1 ps                                  \n";
  r8_pipereg5_2 << " module R8_PipeReg5_2(SS_out,                          \n";
  r8_pipereg5_2 << " 					 SC_out,                           \n";
  r8_pipereg5_2 << "                      SS_in,                           \n";
  r8_pipereg5_2 << " 					 SC_in,                            \n";
  r8_pipereg5_2 << "                      rst_n,                           \n";
  r8_pipereg5_2 << "                      clk                              \n";
  r8_pipereg5_2 << "                      ) ;                              \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << " parameter D_WIDTH     = 192 ;                         \n";
  r8_pipereg5_2 << " parameter D_ZERO      = 192'h0 ;                      \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << " output [D_WIDTH-1:0] SS_out ;                         \n";
  r8_pipereg5_2 << " output [D_WIDTH-1:0] SC_out ;                         \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << " input [D_WIDTH-1:0]  SS_in ;                          \n";
  r8_pipereg5_2 << " input [D_WIDTH-1:0]  SC_in ;                          \n";
  r8_pipereg5_2 << " input                rst_n ;                          \n";
  r8_pipereg5_2 << " input                clk ;                            \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << " reg [D_WIDTH-1:0]  SS_out ;                           \n";
  r8_pipereg5_2 << " reg [D_WIDTH-1:0]  SC_out ;                           \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << " 	//                                                 \n";
  r8_pipereg5_2 << " 	always @(posedge clk or negedge rst_n) begin       \n";
  r8_pipereg5_2 << " 		if(~rst_n) begin                               \n";
  r8_pipereg5_2 << " 			SS_out <= D_ZERO ;                         \n";
  r8_pipereg5_2 << " 			SC_out <= D_ZERO ;                         \n";
  r8_pipereg5_2 << " 		end                                            \n";
  r8_pipereg5_2 << " 		else begin                                     \n";
  r8_pipereg5_2 << " 			SS_out <= SS_in ;                          \n";
  r8_pipereg5_2 << " 			SC_out <= SC_in ;                          \n";
  r8_pipereg5_2 << " 		end                                            \n";
  r8_pipereg5_2 << " 	end                                                \n";
  r8_pipereg5_2 << "                                                       \n";
  r8_pipereg5_2 << " endmodule                                             \n";
  r8_pipereg5_2 << "                                                       \n";            
  
     r8_pipereg5_2.close();     
}
void Pipe::Radix8_Pipe(std::string string_in){
     std::ofstream radix8_pipe;
     std::string        string_buf = "/Radix8_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     radix8_pipe.open(ss.str());		
radix8_pipe   << " `timescale 1 ns/1 ps                                             \n";
radix8_pipe   << " module Radix8_Pipe(RA0_out,                                      \n";
radix8_pipe   << " 			       RA1_out,                                         \n";
radix8_pipe   << " 			       RA2_out,                                         \n";
radix8_pipe   << " 			       RA3_out,                                         \n";
radix8_pipe   << " 			       RA4_out,                                         \n";
radix8_pipe   << " 			       RA5_out,                                         \n";
radix8_pipe   << " 			       RA6_out,                                         \n";
radix8_pipe   << " 			       RA7_out,                                         \n";
radix8_pipe   << "                 RA0_in,                                          \n";
radix8_pipe   << " 			       RA1_in,                                          \n";
radix8_pipe   << " 			       RA2_in,                                          \n";
radix8_pipe   << " 			       RA3_in,                                          \n";
radix8_pipe   << " 			       RA4_in,                                          \n";
radix8_pipe   << " 			       RA5_in,                                          \n";
radix8_pipe   << " 			       RA6_in,                                          \n";
radix8_pipe   << " 			       RA7_in,                                          \n";
radix8_pipe   << " 		           N_in,                                            \n";
radix8_pipe   << "                 rst_n,                                           \n";
radix8_pipe   << "                 clk                                              \n";
radix8_pipe   << "                 ) ;                                              \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " parameter P_WIDTH     = 64 ;                                     \n";
radix8_pipe   << " parameter DH_WIDTH    = 96 ;                                     \n";
radix8_pipe   << " parameter D_WIDTH     = 192 ;                                    \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA0_out ;                                    \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA1_out ;                                    \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA2_out ;                                    \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA3_out ;                                    \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA4_out ;                                    \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA5_out ;                                    \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA6_out ;                                    \n";
radix8_pipe   << " output[P_WIDTH-1:0] RA7_out ;                                    \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA0_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA1_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA2_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA3_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA4_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA5_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA6_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] RA7_in ;                                     \n";
radix8_pipe   << " input [P_WIDTH-1:0] N_in ;                                       \n";
radix8_pipe   << " input               rst_n ;                                      \n";
radix8_pipe   << " input               clk ;                                        \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " wire  [DH_WIDTH-1:0] Sum0_wire ;                                 \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum1_wire ;                                 \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum2_wire ;                                 \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum3_wire ;                                 \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum4_wire ;                                 \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum5_wire ;                                 \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum6_wire ;                                 \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum7_wire ;                                 \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " wire  [DH_WIDTH-1:0] Sum0_reg_wire ;                             \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum1_reg_wire ;                             \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum2_reg_wire ;                             \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum3_reg_wire ;                             \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum4_reg_wire ;                             \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum5_reg_wire ;                             \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum6_reg_wire ;                             \n";
radix8_pipe   << " wire  [D_WIDTH-1:0]  Sum7_reg_wire ;                             \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " wire  [P_WIDTH-1:0]  N_D2_wire ;                                 \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " //Pipeline Register                                              \n";
radix8_pipe   << " R8_NPipeReg1 u_R8_NPipeReg1(.N_D2_out(N_D2_wire),                \n";
radix8_pipe   << "                             .N_in(N_in),                         \n";
radix8_pipe   << "                             .rst_n(rst_n),                       \n";
radix8_pipe   << "                             .clk(clk)                            \n";
radix8_pipe   << "                             ) ;                                  \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " //output0                                                        \n";
radix8_pipe   << " Sum8_out0 u0_Sum8_out0(.S_out(Sum0_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;                                       \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " Mod96 u0_Mod96(.S_out(RA0_out),                                  \n";
radix8_pipe   << "                .A_in(Sum0_reg_wire),                             \n";
radix8_pipe   << " 		       .N_in(N_D2_wire),                                    \n";
radix8_pipe   << "                .rst_n(rst_n),                                    \n";
radix8_pipe   << "                .clk(clk)                                         \n";
radix8_pipe   << "                ) ;                                               \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " //output1                                                        \n";
radix8_pipe   << " Sum8_out1 u1_Sum8_out1(.S_out(Sum1_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;                                       \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " Mod192 u1_Mod192(.S_out(RA1_out),                                \n";
radix8_pipe   << "                  .A_in(Sum1_reg_wire),                           \n";
radix8_pipe   << " 		         .N_in(N_D2_wire),                                  \n";
radix8_pipe   << "                  .rst_n(rst_n),                                  \n";
radix8_pipe   << "                  .clk(clk)                                       \n";
radix8_pipe   << "                 ) ;                                              \n";
radix8_pipe   << " 					                                                \n";
radix8_pipe   << " //output2                                                        \n";
radix8_pipe   << " Sum8_out2 u2_Sum8_out2(.S_out(Sum2_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;                                       \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " Mod192 u2_Mod192(.S_out(RA2_out),                                \n";
radix8_pipe   << "                  .A_in(Sum2_reg_wire),                           \n";
radix8_pipe   << " 		         .N_in(N_D2_wire),                                  \n";
radix8_pipe   << "                  .rst_n(rst_n),                                  \n";
radix8_pipe   << "                  .clk(clk)                                       \n";
radix8_pipe   << "                 ) ;					                            \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " //output3                                                        \n";
radix8_pipe   << " Sum8_out3 u3_Sum8_out3(.S_out(Sum3_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;                                       \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " Mod192 u3_Mod192(.S_out(RA3_out),                                \n";
radix8_pipe   << "                  .A_in(Sum3_reg_wire),                           \n";
radix8_pipe   << " 		         .N_in(N_D2_wire),                                  \n";
radix8_pipe   << "                  .rst_n(rst_n),                                  \n";
radix8_pipe   << "                  .clk(clk)                                       \n";
radix8_pipe   << "                 ) ;				                                \n";
radix8_pipe   << " 				                                                    \n";
radix8_pipe   << " //output4                                                        \n";
radix8_pipe   << " Sum8_out4 u4_Sum8_out4(.S_out(Sum4_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;                                       \n";
radix8_pipe   << " 					                                                \n";
radix8_pipe   << " Mod192 u4_Mod192(.S_out(RA4_out),                                \n";
radix8_pipe   << "                  .A_in(Sum4_reg_wire),                           \n";
radix8_pipe   << " 		         .N_in(N_D2_wire),                                  \n";
radix8_pipe   << "                  .rst_n(rst_n),                                  \n";
radix8_pipe   << "                  .clk(clk)                                       \n";
radix8_pipe   << "                 ) ;		                                        \n";
radix8_pipe   << " 				                                                    \n";
radix8_pipe   << " //output5                                                        \n";
radix8_pipe   << " Sum8_out5 u5_Sum8_out5(.S_out(Sum5_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;                                       \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " Mod192 u5_Mod192(.S_out(RA5_out),                                \n";
radix8_pipe   << "                  .A_in(Sum5_reg_wire),                           \n";
radix8_pipe   << " 		         .N_in(N_D2_wire),                                  \n";
radix8_pipe   << "                  .rst_n(rst_n),                                  \n";
radix8_pipe   << "                  .clk(clk)                                       \n";
radix8_pipe   << "                 ) ;		                                        \n";
radix8_pipe   << " 				                                                    \n";
radix8_pipe   << " //output6                                                        \n";
radix8_pipe   << " Sum8_out6 u6_Sum8_out6(.S_out(Sum6_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;	                                    \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " Mod192 u6_Mod192(.S_out(RA6_out),                                \n";
radix8_pipe   << "                  .A_in(Sum6_reg_wire),                           \n";
radix8_pipe   << " 		         .N_in(N_D2_wire),                                  \n";
radix8_pipe   << "                  .rst_n(rst_n),                                  \n";
radix8_pipe   << "                  .clk(clk)                                       \n";
radix8_pipe   << "                 ) ;		                                        \n";
radix8_pipe   << " 				                                                    \n";
radix8_pipe   << " //output7                                                        \n";
radix8_pipe   << " Sum8_out7 u7_Sum8_out7(.S_out(Sum7_wire),                        \n";
radix8_pipe   << "                        .A0_in(RA0_in),                           \n";
radix8_pipe   << " 			           .A1_in(RA1_in),                              \n";
radix8_pipe   << " 			           .A2_in(RA2_in),                              \n";
radix8_pipe   << " 			           .A3_in(RA3_in),                              \n";
radix8_pipe   << " 			           .A4_in(RA4_in),                              \n";
radix8_pipe   << " 			           .A5_in(RA5_in),                              \n";
radix8_pipe   << " 			           .A6_in(RA6_in),                              \n";
radix8_pipe   << " 			           .A7_in(RA7_in),                              \n";
radix8_pipe   << "                        .rst_n(rst_n),                            \n";
radix8_pipe   << "                        .clk(clk)                                 \n";
radix8_pipe   << "                        ) ;                                       \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " Mod192 u7_Mod192(.S_out(RA7_out),                                \n";
radix8_pipe   << "                  .A_in(Sum7_reg_wire),                           \n";
radix8_pipe   << " 		         .N_in(N_D2_wire),                                  \n";
radix8_pipe   << "                  .rst_n(rst_n),                                  \n";
radix8_pipe   << "                  .clk(clk)                                       \n";
radix8_pipe   << "                 ) ;		                                        \n";
radix8_pipe   << "                                                                  \n";
radix8_pipe   << " //Pipeline Register                                              \n";
radix8_pipe   << " R8_PipeReg1 u_R8_PipeReg1(.A0_out(Sum0_reg_wire),                \n";
radix8_pipe   << " 				          .A1_out(Sum1_reg_wire),                   \n";
radix8_pipe   << " 				          .A2_out(Sum2_reg_wire),                   \n";
radix8_pipe   << " 				          .A3_out(Sum3_reg_wire),                   \n";
radix8_pipe   << " 				          .A4_out(Sum4_reg_wire),                   \n";
radix8_pipe   << " 				          .A5_out(Sum5_reg_wire),                   \n";
radix8_pipe   << " 				          .A6_out(Sum6_reg_wire),                   \n";
radix8_pipe   << " 				          .A7_out(Sum7_reg_wire),                   \n";
radix8_pipe   << "                           .A0_in(Sum0_wire),                     \n";
radix8_pipe   << " 			              .A1_in(Sum1_wire),                        \n";
radix8_pipe   << " 			              .A2_in(Sum2_wire),                        \n";
radix8_pipe   << " 			              .A3_in(Sum3_wire),                        \n";
radix8_pipe   << " 			              .A4_in(Sum4_wire),                        \n";
radix8_pipe   << " 			              .A5_in(Sum5_wire),                        \n";
radix8_pipe   << " 			              .A6_in(Sum6_wire),                        \n";
radix8_pipe   << " 			              .A7_in(Sum7_wire),                        \n";
radix8_pipe   << "                           .rst_n(rst_n),                         \n";
radix8_pipe   << "                           .clk(clk)                              \n";
radix8_pipe   << "                           ) ;				  		            \n";
radix8_pipe   << " 				                                                    \n";
radix8_pipe   << " endmodule                                                        \n";
           	 
	 radix8_pipe.close();
}
//
void Pipe::BU_R8_S0_R2P(std::string string_in){
	 std::ofstream BU_S0;
     std::string         string_buf = "/BU_S0.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU_S0.open(ss.str());
     BU_S0 << "`timescale 1ns/1ps                           \n";
     BU_S0 << "module BU_S0(R0_out, //add                   \n";
     BU_S0 << "             R1_out, //sub                   \n";
     BU_S0 << "             R0_in,                          \n";
     BU_S0 << "             R1_in                           \n";
     BU_S0 << "             );                              \n";
     BU_S0 << "parameter D_WIDTH = 192;                     \n";
     BU_S0 << "parameter P_WIDTH = 64;                      \n";
     BU_S0 << "                                             \n";
     BU_S0 << "output [D_WIDTH-1:0] R0_out;                 \n";
     BU_S0 << "output [D_WIDTH-1:0] R1_out;                 \n";
     BU_S0 << "                                             \n";
     BU_S0 << "input  [P_WIDTH-1:0] R0_in;                  \n";
     BU_S0 << "input  [P_WIDTH-1:0] R1_in;                  \n";
     BU_S0 << "                                             \n";
     BU_S0 << "assign R0_out = R0_in + R1_in;               \n";
     BU_S0 << "assign R1_out = {32'd0,R1_in,32'd0,R0_in};   \n";
     BU_S0 << "                                             \n";
     BU_S0 << "endmodule                                    \n";
	 BU_S0.close();	
}	
void Pipe::BU_R8_R2P(std::string string_in){
	 std::ofstream BU;
     std::string         string_buf = "/BU.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU.open(ss.str());
     BU << " `timescale 1ns/1ps                                                 \n";
     BU << " module BU(R0_out, //add                                            \n";
     BU << "           R1_out, //sub                                            \n";
     BU << "           R0_in,                                                   \n";
     BU << "           R1_in                                                    \n";
     BU << "           );                                                       \n";
     BU << " parameter D_WIDTH = 192;                                           \n";
     BU << "                                                                    \n";
     BU << " output [D_WIDTH-1:0] R0_out;                                       \n";
     BU << " output [D_WIDTH-1:0] R1_out;                                       \n";
     BU << " input  [D_WIDTH-1:0] R0_in;                                        \n";
     BU << " input  [D_WIDTH-1:0] R1_in;                                        \n";
     BU << "                                                                    \n";
     BU << " wire   [D_WIDTH:0]   Result_add;                                   \n";
     BU << " wire   [D_WIDTH:0]   Result_sub;                                   \n";
     BU << " wire   [D_WIDTH-1:0] R1_in_Complement;                             \n";
     BU << "                                                                    \n";
     BU << " assign R1_in_Complement = {R1_in[95:0],R1_in[191:96]};             \n";
     BU << " assign Result_add = R0_in + R1_in;                                 \n";
     BU << " assign Result_sub = R0_in + R1_in_Complement;                      \n";
     BU << " //output                                                           \n";
     BU << " assign R0_out = Result_add[D_WIDTH-1:0] + Result_add[D_WIDTH];     \n";
     BU << " assign R1_out = Result_sub[D_WIDTH-1:0] + Result_sub[D_WIDTH];     \n";
     BU << "                                                                    \n";
     BU << " endmodule                                                          \n";
	 BU.close();	
}
void Pipe::Pipe_R8_R2P(std::string string_in){
	 std::ofstream Pipe;
     std::string        string_buf = "/Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 Pipe.open(ss.str());		
Pipe << "`timescale 1ns/1ps         \n";
Pipe << "module Pipe(R0_out,        \n";
Pipe << "             R1_out,       \n";
Pipe << "             R2_out,       \n";
Pipe << "             R3_out,       \n";
Pipe << "             R4_out,       \n";
Pipe << "             R5_out,       \n";
Pipe << "             R6_out,       \n";
Pipe << "             R7_out,       \n";
Pipe << "             R0_in,        \n";
Pipe << "             R1_in,        \n";
Pipe << "             R2_in,        \n";
Pipe << "             R3_in,        \n";
Pipe << "             R4_in,        \n";
Pipe << "             R5_in,        \n";
Pipe << "             R6_in,        \n";
Pipe << "             R7_in,        \n";
Pipe << "             clk,          \n";
Pipe << "             rst_n         \n";
Pipe << "            );             \n";
Pipe << " parameter D_WIDTH = 192;        \n"; 
Pipe << " parameter D_ZERO  = 192'd0;     \n";
Pipe << " output [D_WIDTH-1:0] R0_out;    \n";
Pipe << " output [D_WIDTH-1:0] R1_out;    \n";
Pipe << " output [D_WIDTH-1:0] R2_out;    \n";
Pipe << " output [D_WIDTH-1:0] R3_out;    \n";
Pipe << " output [D_WIDTH-1:0] R4_out;    \n";
Pipe << " output [D_WIDTH-1:0] R5_out;    \n";
Pipe << " output [D_WIDTH-1:0] R6_out;    \n";
Pipe << " output [D_WIDTH-1:0] R7_out;    \n";
Pipe << " input  [D_WIDTH-1:0] R0_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R1_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R2_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R3_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R4_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R5_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R6_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R7_in;     \n";
Pipe << " input                clk;       \n";
Pipe << " input                rst_n;     \n";
Pipe << "                                 \n";
Pipe << " reg [D_WIDTH-1:0] R0_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R1_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R2_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R3_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R4_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R5_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R6_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R7_out;       \n";
Pipe << "                                 \n";
Pipe << " always@(posedge clk)begin       \n";
Pipe << "   if(~rst_n)begin               \n";
Pipe << "     R0_out  <= D_ZERO;          \n";
Pipe << "     R1_out  <= D_ZERO;          \n";
Pipe << "     R2_out  <= D_ZERO;          \n";
Pipe << "     R3_out  <= D_ZERO;          \n";
Pipe << "     R4_out  <= D_ZERO;          \n";
Pipe << "     R5_out  <= D_ZERO;          \n";
Pipe << "     R6_out  <= D_ZERO;          \n";
Pipe << "     R7_out  <= D_ZERO;          \n";
Pipe << "   end                           \n";
Pipe << "   else begin                    \n";
Pipe << "     R0_out  <= R0_in;           \n";
Pipe << "     R1_out  <= R1_in;           \n";
Pipe << "     R2_out  <= R2_in;           \n";
Pipe << "     R3_out  <= R3_in;           \n";
Pipe << "     R4_out  <= R4_in;           \n";
Pipe << "     R5_out  <= R5_in;           \n";
Pipe << "     R6_out  <= R6_in;           \n";
Pipe << "     R7_out  <= R7_in;           \n";
Pipe << "   end                           \n";
Pipe << " end                             \n";
Pipe << "                                 \n";
Pipe << "endmodule 	                      \n";
	 Pipe.close();
}
void Pipe::Radix8_Pipe_R2P(std::string string_in){
 	 std::ofstream radix8_pipe;
     std::string        string_buf = "/Radix8_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 radix8_pipe.open(ss.str());
 radix8_pipe << " `timescale 1 ns/1 ps                                   \n";
 radix8_pipe << " module Radix8_Pipe(RA0_out,                            \n";
 radix8_pipe << " 			       RA1_out,                              \n";
 radix8_pipe << " 			       RA2_out,                              \n";
 radix8_pipe << " 			       RA3_out,                              \n";
 radix8_pipe << " 			       RA4_out,                              \n";
 radix8_pipe << " 			       RA5_out,                              \n";
 radix8_pipe << " 			       RA6_out,                              \n";
 radix8_pipe << " 			       RA7_out,                              \n";
 radix8_pipe << "                  RA0_in,                               \n";
 radix8_pipe << " 			       RA1_in,                               \n";
 radix8_pipe << " 			       RA2_in,                               \n";
 radix8_pipe << " 			       RA3_in,                               \n";
 radix8_pipe << " 			       RA4_in,                               \n";
 radix8_pipe << " 			       RA5_in,                               \n";
 radix8_pipe << " 			       RA6_in,                               \n";
 radix8_pipe << " 			       RA7_in,                               \n";
 radix8_pipe << " 		           N_in,                                 \n";
 radix8_pipe << "                    rst_n,                              \n";
 radix8_pipe << "                    clk                                 \n";
 radix8_pipe << "                    ) ;                                 \n";
 radix8_pipe << "                                                        \n";
 radix8_pipe << " parameter P_WIDTH     = 64 ;                           \n";
 radix8_pipe << " parameter D_WIDTH     = 192 ;                          \n";
 radix8_pipe << "                                                        \n";
 radix8_pipe << "                                                        \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA0_out ;                          \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA1_out ;                          \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA2_out ;                          \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA3_out ;                          \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA4_out ;                          \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA5_out ;                          \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA6_out ;                          \n";
 radix8_pipe << " output[P_WIDTH-1:0] RA7_out ;                          \n";
 radix8_pipe << "                                                        \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA0_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA1_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA2_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA3_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA4_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA5_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA6_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] RA7_in ;                           \n";
 radix8_pipe << " input [P_WIDTH-1:0] N_in ;                             \n";
 radix8_pipe << " input               rst_n ;                            \n";
 radix8_pipe << " input               clk ;                              \n";
 radix8_pipe << "                                                        \n";
 //stage 0
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_0_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_0_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_1_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_1_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_2_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_2_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_3_R0_out_wire;               \n"; 
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S0_3_R1_out_wire;               \n"; 
 //stage 1
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_0_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_0_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_1_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_1_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_2_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_2_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_3_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S1_3_R1_out_wire;               \n";
 //stage 2
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_0_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_0_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_1_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_1_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_2_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_2_R1_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_3_R0_out_wire;               \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] BU_S2_3_R1_out_wire;               \n";
 radix8_pipe << " //----------------                                     \n";
 radix8_pipe << " //stage 0                                              \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R0_0_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R1_0_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R2_0_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R3_0_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R4_0_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R5_0_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R6_0_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R7_0_D;                            \n"; 
 radix8_pipe << " //stage 1                                              \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R0_1_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R1_1_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R2_1_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R3_1_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R4_1_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R5_1_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R6_1_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R7_1_D;                            \n"; 
 radix8_pipe << " //stage 2                                              \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R0_2_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R1_2_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R2_2_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R3_2_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R4_2_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R5_2_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R6_2_D;                            \n";
 radix8_pipe << " wire  [D_WIDTH-1:0] R7_2_D;                            \n";  
 radix8_pipe << "                                                        \n";
 radix8_pipe << "                                                        \n";
 radix8_pipe << " BU_S0  BU_S0_0(.R0_out(BU_S0_0_R0_out_wire),           \n";
 radix8_pipe << "                .R1_out(BU_S0_0_R1_out_wire),           \n";
 radix8_pipe << "                .R0_in(RA0_in),                         \n";
 radix8_pipe << "                .R1_in(RA4_in)                          \n";
 radix8_pipe << "               );                                       \n";
 radix8_pipe << " BU_S0  BU_S0_1(.R0_out(BU_S0_1_R0_out_wire),           \n";
 radix8_pipe << "                .R1_out(BU_S0_1_R1_out_wire),           \n";
 radix8_pipe << "                .R0_in(RA1_in),                         \n";
 radix8_pipe << "                .R1_in(RA5_in)                          \n";
 radix8_pipe << "               );                                       \n";
 radix8_pipe << " BU_S0  BU_S0_2(.R0_out(BU_S0_2_R0_out_wire),           \n";
 radix8_pipe << "                .R1_out(BU_S0_2_R1_out_wire),           \n";
 radix8_pipe << "                .R0_in(RA2_in),                         \n";
 radix8_pipe << "                .R1_in(RA6_in)                          \n";
 radix8_pipe << "               );                                       \n";
 radix8_pipe << " BU_S0  BU_S0_3(.R0_out(BU_S0_3_R0_out_wire),           \n";
 radix8_pipe << "                .R1_out(BU_S0_3_R1_out_wire),           \n";
 radix8_pipe << "                .R0_in(RA3_in),                         \n";
 radix8_pipe << "                .R1_in(RA7_in)                          \n";
 radix8_pipe << "               );                                       \n";
 radix8_pipe << " Pipe  Pipe_S0(.R0_out(R0_0_D),                         \n";
 radix8_pipe << "               .R1_out(R1_0_D),                         \n";
 radix8_pipe << "               .R2_out(R2_0_D),                         \n";
 radix8_pipe << "               .R3_out(R3_0_D),                         \n";
 radix8_pipe << "               .R4_out(R4_0_D),                         \n";
 radix8_pipe << "               .R5_out(R5_0_D),                         \n";
 radix8_pipe << "               .R6_out(R6_0_D),                         \n";
 radix8_pipe << "               .R7_out(R7_0_D),                         \n";
 radix8_pipe << "               .R0_in(BU_S0_0_R0_out_wire),             \n";
 radix8_pipe << "               .R1_in(BU_S0_1_R0_out_wire),             \n";
 radix8_pipe << "               .R2_in(BU_S0_2_R0_out_wire),             \n";
 radix8_pipe << "               .R3_in(BU_S0_3_R0_out_wire),             \n";
 radix8_pipe << "               .R4_in(BU_S0_0_R1_out_wire),             \n";
 radix8_pipe << "               .R5_in({BU_S0_1_R1_out_wire[167:0],BU_S0_1_R1_out_wire[191:168]}),\n";
 radix8_pipe << "               .R6_in({BU_S0_2_R1_out_wire[143:0],BU_S0_2_R1_out_wire[191:144]}),\n";
 radix8_pipe << "               .R7_in({BU_S0_3_R1_out_wire[119:0],BU_S0_3_R1_out_wire[191:120]}),\n";
 radix8_pipe << "               .clk(clk),                               \n";
 radix8_pipe << "               .rst_n(rst_n)                            \n";
 radix8_pipe << "               );                                       \n";
 radix8_pipe << "  BU   BU_S1_0(.R0_out(BU_S1_0_R0_out_wire),            \n";
 radix8_pipe << "               .R1_out(BU_S1_0_R1_out_wire),            \n";
 radix8_pipe << "               .R0_in(R0_0_D),                          \n";
 radix8_pipe << "               .R1_in(R2_0_D)                           \n";
 radix8_pipe << "              );                                        \n";
 radix8_pipe << "  BU   BU_S1_1(.R0_out(BU_S1_1_R0_out_wire),            \n"; 
 radix8_pipe << "               .R1_out(BU_S1_1_R1_out_wire),            \n"; 
 radix8_pipe << "               .R0_in(R1_0_D),                          \n"; 
 radix8_pipe << "               .R1_in(R3_0_D)                           \n"; 
 radix8_pipe << "              );                                        \n";
 radix8_pipe << "  BU   BU_S1_2(.R0_out(BU_S1_2_R0_out_wire),            \n";
 radix8_pipe << "               .R1_out(BU_S1_2_R1_out_wire),            \n";
 radix8_pipe << "               .R0_in(R4_0_D),                          \n";
 radix8_pipe << "               .R1_in(R6_0_D)                           \n";
 radix8_pipe << "              );                                        \n";
 radix8_pipe << "  BU   BU_S1_3(.R0_out(BU_S1_3_R0_out_wire),            \n"; 
 radix8_pipe << "               .R1_out(BU_S1_3_R1_out_wire),            \n"; 
 radix8_pipe << "               .R0_in(R5_0_D),                          \n"; 
 radix8_pipe << "               .R1_in(R7_0_D)                           \n"; 
 radix8_pipe << "              );                                        \n";
 radix8_pipe << " Pipe  Pipe_S1(.R0_out(R0_1_D),                         \n";
 radix8_pipe << "               .R1_out(R1_1_D),                         \n";
 radix8_pipe << "               .R2_out(R2_1_D),                         \n";
 radix8_pipe << "               .R3_out(R3_1_D),                         \n";
 radix8_pipe << "               .R4_out(R4_1_D),                         \n";
 radix8_pipe << "               .R5_out(R5_1_D),                         \n";
 radix8_pipe << "               .R6_out(R6_1_D),                         \n";
 radix8_pipe << "               .R7_out(R7_1_D),                         \n";
 radix8_pipe << "               .R0_in(BU_S1_0_R0_out_wire),             \n";
 radix8_pipe << "               .R1_in(BU_S1_1_R0_out_wire),             \n";
 radix8_pipe << "               .R2_in(BU_S1_0_R1_out_wire),             \n";
 radix8_pipe << "               .R3_in({BU_S1_1_R1_out_wire[143:0],BU_S1_1_R1_out_wire[191:144]}),\n";
 radix8_pipe << "               .R4_in(BU_S1_2_R0_out_wire),             \n";
 radix8_pipe << "               .R5_in(BU_S1_3_R0_out_wire),\n";
 radix8_pipe << "               .R6_in(BU_S1_2_R1_out_wire),\n";
 radix8_pipe << "               .R7_in({BU_S1_3_R1_out_wire[143:0],BU_S1_3_R1_out_wire[191:144]}),\n";
 radix8_pipe << "               .clk(clk),                               \n";
 radix8_pipe << "               .rst_n(rst_n)                            \n";
 radix8_pipe << "               );                                       \n";
 radix8_pipe << "  BU   BU_S2_0(.R0_out(BU_S2_0_R0_out_wire),            \n";
 radix8_pipe << "               .R1_out(BU_S2_0_R1_out_wire),            \n";
 radix8_pipe << "               .R0_in(R0_1_D),                          \n";
 radix8_pipe << "               .R1_in(R1_1_D)                           \n";
 radix8_pipe << "              );                                        \n";
 radix8_pipe << "  BU   BU_S2_1(.R0_out(BU_S2_1_R0_out_wire),            \n"; 
 radix8_pipe << "               .R1_out(BU_S2_1_R1_out_wire),            \n"; 
 radix8_pipe << "               .R0_in(R2_1_D),                          \n"; 
 radix8_pipe << "               .R1_in(R3_1_D)                           \n"; 
 radix8_pipe << "              );                                        \n";
 radix8_pipe << "  BU   BU_S2_2(.R0_out(BU_S2_2_R0_out_wire),            \n";
 radix8_pipe << "               .R1_out(BU_S2_2_R1_out_wire),            \n";
 radix8_pipe << "               .R0_in(R4_1_D),                          \n";
 radix8_pipe << "               .R1_in(R5_1_D)                           \n";
 radix8_pipe << "              );                                        \n";
 radix8_pipe << "  BU   BU_S2_3(.R0_out(BU_S2_3_R0_out_wire),            \n"; 
 radix8_pipe << "               .R1_out(BU_S2_3_R1_out_wire),            \n"; 
 radix8_pipe << "               .R0_in(R6_1_D),                          \n"; 
 radix8_pipe << "               .R1_in(R7_1_D)                           \n"; 
 radix8_pipe << "              );                                        \n"; 
 radix8_pipe << " Pipe  Pipe_S2(.R0_out(R0_2_D),                         \n";
 radix8_pipe << "               .R1_out(R1_2_D),                         \n";
 radix8_pipe << "               .R2_out(R2_2_D),                         \n";
 radix8_pipe << "               .R3_out(R3_2_D),                         \n";
 radix8_pipe << "               .R4_out(R4_2_D),                         \n";
 radix8_pipe << "               .R5_out(R5_2_D),                         \n";
 radix8_pipe << "               .R6_out(R6_2_D),                         \n";
 radix8_pipe << "               .R7_out(R7_2_D),                         \n";
 radix8_pipe << "               .R0_in(BU_S2_0_R0_out_wire),             \n";
 radix8_pipe << "               .R1_in(BU_S2_0_R1_out_wire),             \n";
 radix8_pipe << "               .R2_in(BU_S2_1_R0_out_wire),             \n";
 radix8_pipe << "               .R3_in(BU_S2_1_R1_out_wire),             \n";
 radix8_pipe << "               .R4_in(BU_S2_2_R0_out_wire),             \n";
 radix8_pipe << "               .R5_in(BU_S2_2_R1_out_wire),             \n";
 radix8_pipe << "               .R6_in(BU_S2_3_R0_out_wire),             \n";
 radix8_pipe << "               .R7_in(BU_S2_3_R1_out_wire),             \n";
 radix8_pipe << "               .clk(clk),                               \n";
 radix8_pipe << "               .rst_n(rst_n)                            \n";
 radix8_pipe << "               );                                       \n";
 radix8_pipe << "                                                        \n"; 
 radix8_pipe << " Mod192 R0_Mod192(.S_out(RA0_out),                      \n";
 radix8_pipe << "                  .A_in(R0_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n";
 radix8_pipe << " Mod192 R1_Mod192(.S_out(RA4_out),                      \n";
 radix8_pipe << "                  .A_in(R1_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n";
 radix8_pipe << " Mod192 R2_Mod192(.S_out(RA2_out),                      \n";
 radix8_pipe << "                  .A_in(R2_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n";
 radix8_pipe << " Mod192 R3_Mod192(.S_out(RA6_out),                      \n";
 radix8_pipe << "                  .A_in(R3_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n";
 radix8_pipe << " Mod192 R4_Mod192(.S_out(RA1_out),                      \n";
 radix8_pipe << "                  .A_in(R4_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n";
 radix8_pipe << " Mod192 R5_Mod192(.S_out(RA5_out),                      \n";
 radix8_pipe << "                  .A_in(R5_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n";
 radix8_pipe << " Mod192 R6_Mod192(.S_out(RA3_out),                      \n";
 radix8_pipe << "                  .A_in(R6_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n";
 radix8_pipe << " Mod192 R7_Mod192(.S_out(RA7_out),                      \n";
 radix8_pipe << "                  .A_in(R7_2_D),                        \n";
 radix8_pipe << "                  .N_in(N_in),                          \n";
 radix8_pipe << "                  .clk(clk),                            \n";
 radix8_pipe << "                  .rst_n(rst_n)                         \n";
 radix8_pipe << "                 );                                     \n"; 
 radix8_pipe << " endmodule                                              \n";
 radix8_pipe << "                                                        \n";
     radix8_pipe.close(); 	

}

void Pipe::TWIpipe_r8_R2P(std::string string_in){
	 std::ofstream TWIpipe_r8_R2P;
     std::string        string_buf = "/TWIpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 TWIpipe_r8_R2P.open(ss.str());	
TWIpipe_r8_R2P << " //=========================================                         \n";
TWIpipe_r8_R2P << " //Date:2021/04/05                                                   \n";
TWIpipe_r8_R2P << " //writer:shiyong                                                    \n";
TWIpipe_r8_R2P << " //note: bn ank ma pipline                                           \n";
TWIpipe_r8_R2P << " //      FFT type of m-th tiwiddle factor. m-th cyclotomic polynomial\n";
TWIpipe_r8_R2P << " //========================================                          \n";
TWIpipe_r8_R2P << " `timescale 1 ns/1 ps                                                \n";
TWIpipe_r8_R2P << " module TWIpipe(                                                     \n";
TWIpipe_r8_R2P << "     BN_out,                                                         \n";
TWIpipe_r8_R2P << "     MA_out,                                                         \n";
TWIpipe_r8_R2P << " 	TWIradix0_o,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix1_o,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix2_o,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix3_o,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix4_o,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix5_o,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix6_o,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix7_o,                                                     \n";
TWIpipe_r8_R2P << "     BN_in,                                                           \n";
TWIpipe_r8_R2P << "     MA_in,                                                           \n";
TWIpipe_r8_R2P << " 	TWIradix0_i,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix1_i,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix2_i,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix3_i,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix4_i,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix5_i,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix6_i,                                                     \n";
TWIpipe_r8_R2P << " 	TWIradix7_i,                                                     \n";
TWIpipe_r8_R2P << " 	rst_n,                                                           \n";
TWIpipe_r8_R2P << "     clk                                                             \n";
TWIpipe_r8_R2P << " );                                                                  \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << " parameter A_WIDTH = " << addr_width << ";                                         \n";
TWIpipe_r8_R2P << " parameter A_ZERO  = " << addr_width << "'b0;                                      \n";
TWIpipe_r8_R2P << " parameter P_WIDTH = 64;                                             \n";
TWIpipe_r8_R2P << " parameter P_ZERO  = 64'd0;                                          \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << " output [A_WIDTH-1:0] MA_out;                                        \n";
TWIpipe_r8_R2P << " output               BN_out;                                        \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix0_o;                                    \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix1_o;                                    \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix2_o;                                    \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix3_o;                                    \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix4_o;                                    \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix5_o;                                    \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix6_o;                                    \n";
TWIpipe_r8_R2P << " output [P_WIDTH-1:0]TWIradix7_o;                                    \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << " input  [A_WIDTH-1:0] MA_in;                                         \n";
TWIpipe_r8_R2P << " input                BN_in;                                         \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix0_i;                                    \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix1_i;                                    \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix2_i;                                    \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix3_i;                                    \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix4_i;                                    \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix5_i;                                    \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix6_i;                                    \n";
TWIpipe_r8_R2P << " input  [P_WIDTH-1:0]TWIradix7_i;                                    \n";
TWIpipe_r8_R2P << " input                rst_n;                                         \n";
TWIpipe_r8_R2P << " input                clk;                                           \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << " reg  [A_WIDTH-1:0] MA_out;                                          \n";
TWIpipe_r8_R2P << " reg  [A_WIDTH-1:0] MA_reg0;                                         \n";
TWIpipe_r8_R2P << " reg  [A_WIDTH-1:0] MA_reg1;                                         \n";
TWIpipe_r8_R2P << " reg  [A_WIDTH-1:0] MA_reg2;                                         \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << " reg                BN_out;                                          \n";
TWIpipe_r8_R2P << " reg                BN_reg0;                                         \n";
TWIpipe_r8_R2P << " reg                BN_reg1;                                         \n";
TWIpipe_r8_R2P << " reg                BN_reg2;                                         \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix0_o;                                       \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix1_o;                                       \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix2_o;                                       \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix3_o;                                       \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix4_o;                                       \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix5_o;                                       \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix6_o;                                       \n";
TWIpipe_r8_R2P << " reg [P_WIDTH-1:0]TWIradix7_o;                                       \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << "     always @(posedge clk,negedge rst_n)begin                        \n";
TWIpipe_r8_R2P << "         if(~rst_n)begin                                             \n";
TWIpipe_r8_R2P << "             MA_reg0       <=  A_ZERO;                               \n";
TWIpipe_r8_R2P << "             MA_reg1       <=  A_ZERO;                               \n";
TWIpipe_r8_R2P << "             MA_reg2       <=  A_ZERO;                               \n";
TWIpipe_r8_R2P << "             MA_out        <=  A_ZERO;                               \n";
TWIpipe_r8_R2P << "             BN_reg0       <=  1'b0;                                 \n";
TWIpipe_r8_R2P << "             BN_reg1       <=  1'b0;                                 \n";
TWIpipe_r8_R2P << "             BN_reg2       <=  1'b0;                                 \n";
TWIpipe_r8_R2P << " 			BN_out        <=  1'b0;                                  \n";
TWIpipe_r8_R2P << " 			TWIradix0_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << " 			TWIradix1_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << " 			TWIradix2_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << " 			TWIradix3_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << " 			TWIradix4_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << " 			TWIradix5_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << " 			TWIradix6_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << " 			TWIradix7_o   <=  P_ZERO;                                \n";
TWIpipe_r8_R2P << "         end                                                         \n";
TWIpipe_r8_R2P << "         else begin                                                  \n";
TWIpipe_r8_R2P << "             MA_reg0  <= MA_in;                                      \n";
TWIpipe_r8_R2P << "             MA_reg1  <= MA_reg0;                                    \n";
TWIpipe_r8_R2P << "             MA_reg2  <= MA_reg1;                                    \n";
TWIpipe_r8_R2P << "             MA_out   <= MA_reg2;                                    \n";
TWIpipe_r8_R2P << " 			//                                                       \n";
TWIpipe_r8_R2P << "             BN_reg0  <= BN_in;                                      \n";
TWIpipe_r8_R2P << "             BN_reg1  <= BN_reg0;                                    \n";
TWIpipe_r8_R2P << "             BN_reg2  <= BN_reg1;                                    \n";
TWIpipe_r8_R2P << "             BN_out   <= BN_reg2;                                    \n";
TWIpipe_r8_R2P << " 			//                                                       \n";
TWIpipe_r8_R2P << " 		    TWIradix0_o   <=  TWIradix0_i;                           \n";
TWIpipe_r8_R2P << " 			TWIradix1_o   <=  TWIradix1_i;                           \n";
TWIpipe_r8_R2P << " 			TWIradix2_o   <=  TWIradix2_i;                           \n";
TWIpipe_r8_R2P << " 			TWIradix3_o   <=  TWIradix3_i;                           \n";
TWIpipe_r8_R2P << " 			TWIradix4_o   <=  TWIradix4_i;                           \n";
TWIpipe_r8_R2P << " 			TWIradix5_o   <=  TWIradix5_i;                           \n";
TWIpipe_r8_R2P << " 			TWIradix6_o   <=  TWIradix6_i;                           \n";
TWIpipe_r8_R2P << " 			TWIradix7_o   <=  TWIradix7_i;                           \n";
TWIpipe_r8_R2P << "         end                                                         \n";
TWIpipe_r8_R2P << "     end                                                             \n";
TWIpipe_r8_R2P << "                                                                     \n";
TWIpipe_r8_R2P << " endmodule                                                           \n";
	 
	 TWIpipe_r8_R2P.close();
}
//---------------------------------------------------------
//radix-16
void Pipe::TWIpipe_r16(std::string string_in){
     std::ofstream twipipe;
     std::string        string_buf = "/TWIpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twipipe.open(ss.str());		
twipipe << "//=========================================                         \n";
twipipe << "//Date:2020/04/08                                                   \n";
twipipe << "//writer:shiyong                                                    \n";
twipipe << "//note: bn ank ma pipline                                           \n";
twipipe << "//      FFT type of m-th tiwiddle factor. m-th cyclotomic polynomial\n";
twipipe << "//========================================                     \n";
twipipe << "`timescale 1 ns/1 ps                                                \n";
twipipe << "module TWIpipe(                                                \n";
twipipe << "    BN_out,                                                    \n";
twipipe << "    MA_out,                                                    \n";
twipipe << "	TWIradix0_o,                                               \n";
twipipe << "	TWIradix1_o,                                               \n";
twipipe << "	TWIradix2_o,                                               \n";
twipipe << "	TWIradix3_o,                                               \n";
twipipe << "	TWIradix4_o,                                               \n";
twipipe << "	TWIradix5_o,                                               \n";
twipipe << "	TWIradix6_o,                                               \n";
twipipe << "	TWIradix7_o,                                               \n";
twipipe << "	TWIradix8_o,                                               \n";
twipipe << "	TWIradix9_o,                                               \n";
twipipe << "	TWIradix10_o,                                               \n";
twipipe << "	TWIradix11_o,                                               \n";
twipipe << "	TWIradix12_o,                                               \n";
twipipe << "	TWIradix13_o,                                               \n";
twipipe << "	TWIradix14_o,                                               \n";
twipipe << "	TWIradix15_o,                                               \n";
twipipe << "    BN_in,                                                     \n";
twipipe << "    MA_in,                                                     \n";
twipipe << "	TWIradix0_i,                                               \n";
twipipe << "	TWIradix1_i,                                               \n";
twipipe << "	TWIradix2_i,                                               \n";
twipipe << "	TWIradix3_i,                                               \n";
twipipe << "	TWIradix4_i,                                               \n";
twipipe << "	TWIradix5_i,                                               \n";
twipipe << "	TWIradix6_i,                                               \n";
twipipe << "	TWIradix7_i,                                               \n";
twipipe << "	TWIradix8_i,                                               \n";
twipipe << "	TWIradix9_i,                                               \n";
twipipe << "	TWIradix10_i,                                               \n";
twipipe << "	TWIradix11_i,                                               \n";
twipipe << "	TWIradix12_i,                                               \n";
twipipe << "	TWIradix13_i,                                               \n";
twipipe << "	TWIradix14_i,                                               \n";
twipipe << "	TWIradix15_i,                                               \n";
twipipe << "	rst_n,                                                     \n";
twipipe << "    clk                                                        \n";
twipipe << ");                                                             \n";
twipipe << "                                                               \n";
twipipe << "parameter A_WIDTH = " << addr_width << ";                                         \n";
twipipe << "parameter A_ZERO  = " << addr_width << "'b0;                                      \n";
twipipe << "parameter P_WIDTH = 64;                                        \n";
twipipe << "parameter P_ZERO  = 64'd0;                                     \n";
twipipe << "                                                               \n";
twipipe << "output [A_WIDTH-1:0] MA_out;                                   \n";
twipipe << "output               BN_out;                                   \n";
twipipe << "output [P_WIDTH-1:0]TWIradix0_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix1_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix2_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix3_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix4_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix5_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix6_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix7_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix8_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix9_o;                               \n";
twipipe << "output [P_WIDTH-1:0]TWIradix10_o;                              \n";
twipipe << "output [P_WIDTH-1:0]TWIradix11_o;                              \n";
twipipe << "output [P_WIDTH-1:0]TWIradix12_o;                              \n";
twipipe << "output [P_WIDTH-1:0]TWIradix13_o;                              \n";
twipipe << "output [P_WIDTH-1:0]TWIradix14_o;                              \n";
twipipe << "output [P_WIDTH-1:0]TWIradix15_o;                              \n";
twipipe << "                                                               \n";
twipipe << "input  [A_WIDTH-1:0] MA_in;                                    \n";
twipipe << "input                BN_in;                                    \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix0_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix1_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix2_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix3_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix4_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix5_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix6_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix7_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix8_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix9_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix10_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix11_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix12_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix13_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix14_i;                               \n";
twipipe << "input  [P_WIDTH-1:0]TWIradix15_i;                               \n";
twipipe << "input                rst_n;                                    \n";
twipipe << "input                clk;                                      \n";
twipipe << "                                                               \n";
twipipe << "reg  [A_WIDTH-1:0] MA_out;                                     \n";
twipipe << "reg  [A_WIDTH-1:0] MA_reg0;                                    \n";
twipipe << "reg  [A_WIDTH-1:0] MA_reg1;                                    \n";
twipipe << "                                                               \n";
twipipe << "reg                BN_out;                                     \n";
twipipe << "reg                BN_reg0;                                    \n";
twipipe << "reg                BN_reg1;                                    \n";
twipipe << "                                                               \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix0_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix1_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix2_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix3_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix4_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix5_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix6_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix7_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix8_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix9_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix10_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix11_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix12_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix13_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix14_o;                                  \n";
twipipe << "reg [P_WIDTH-1:0]TWIradix15_o;                                  \n";
twipipe << "                                                               \n";
twipipe << "                                                               \n";
twipipe << "    always @(posedge clk,negedge rst_n)begin                   \n";
twipipe << "        if(~rst_n)begin                                        \n";
twipipe << "            MA_reg0       <=  A_ZERO;                           \n";
twipipe << "            MA_reg1       <=  A_ZERO;                           \n";
twipipe << "            MA_out        <=  A_ZERO;                           \n";
twipipe << "            BN_reg0       <=  1'b0;                             \n";
twipipe << "            BN_reg1       <=  1'b0;                             \n";
twipipe << "			BN_out        <=  1'b0;                             \n";
twipipe << "			TWIradix0_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix1_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix2_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix3_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix4_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix5_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix6_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix7_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix8_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix9_o   <=  P_ZERO;                           \n";
twipipe << "			TWIradix10_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix11_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix12_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix13_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix14_o  <=  P_ZERO;                           \n";
twipipe << "			TWIradix15_o  <=  P_ZERO;                           \n";
twipipe << "        end                                                    \n";
twipipe << "        else begin                                             \n";
twipipe << "            MA_reg0  <= MA_in;                                 \n";
twipipe << "            MA_reg1  <= MA_reg0;                               \n";
twipipe << "            MA_out   <= MA_reg1;                               \n";
twipipe << "			//                                                 \n";
twipipe << "            BN_reg0  <= BN_in;                                 \n";
twipipe << "            BN_reg1  <= BN_reg0;                               \n";
twipipe << "            BN_out   <= BN_reg1;                               \n";
twipipe << "			//                                                 \n";
twipipe << "		    TWIradix0_o   <=  TWIradix0_i;                      \n";
twipipe << "			TWIradix1_o   <=  TWIradix1_i;                      \n";
twipipe << "			TWIradix2_o   <=  TWIradix2_i;                      \n";
twipipe << "			TWIradix3_o   <=  TWIradix3_i;                      \n";
twipipe << "			TWIradix4_o   <=  TWIradix4_i;                      \n";
twipipe << "			TWIradix5_o   <=  TWIradix5_i;                      \n";
twipipe << "			TWIradix6_o   <=  TWIradix6_i;                      \n";
twipipe << "			TWIradix7_o   <=  TWIradix7_i;                      \n";
twipipe << "			TWIradix8_o   <=  TWIradix8_i;                      \n";
twipipe << "			TWIradix9_o   <=  TWIradix9_i;                      \n";
twipipe << "			TWIradix10_o  <=  TWIradix10_i;                     \n";
twipipe << "			TWIradix11_o  <=  TWIradix11_i;                     \n";
twipipe << "			TWIradix12_o  <=  TWIradix12_i;                     \n";
twipipe << "			TWIradix13_o  <=  TWIradix13_i;                     \n";
twipipe << "			TWIradix14_o  <=  TWIradix14_i;                     \n";
twipipe << "			TWIradix15_o  <=  TWIradix15_i;                     \n";
twipipe << "        end                                                    \n";
twipipe << "    end                                                        \n";
twipipe << "                                                               \n";
twipipe << "endmodule                                                      \n";	
	 
	 twipipe.close();
}
void Pipe::R16_NPipeReg1(std::string string_in){
	 std::ofstream r16_npipereg1;
     std::string        string_buf = "/R16_NPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r16_npipereg1.open(ss.str());
     r16_npipereg1 << "`timescale 1 ns/1 ps                          \n";
     r16_npipereg1 << "module R16_NPipeReg1(N_D2_out,                \n";
     r16_npipereg1 << "                     N_in,                    \n";
     r16_npipereg1 << "                     rst_n,                   \n";
     r16_npipereg1 << "                     clk                      \n";
     r16_npipereg1 << "                     ) ;                      \n";
     r16_npipereg1 << "                                              \n";
     r16_npipereg1 << "parameter P_WIDTH     = 64 ;                  \n";
     r16_npipereg1 << "parameter P_ZERO      = 64'h0 ;               \n";
     r16_npipereg1 << "                                              \n";
     r16_npipereg1 << "                                              \n";
     r16_npipereg1 << "output [P_WIDTH-1:0] N_D2_out ;               \n";
     r16_npipereg1 << "                                              \n";
     r16_npipereg1 << "input [P_WIDTH-1:0]  N_in ;                   \n";
     r16_npipereg1 << "input                rst_n ;                  \n";
     r16_npipereg1 << "input                clk ;                    \n";
     r16_npipereg1 << "                                              \n";
     //r16_npipereg1 << "reg [P_WIDTH-1:0]  N_D0reg ;                  \n";
     r16_npipereg1 << "reg [P_WIDTH-1:0]  N_D2_out ;                 \n";
     r16_npipereg1 << "                                              \n";
     r16_npipereg1 << "                                              \n";
     r16_npipereg1 << "	//                                           \n";
     r16_npipereg1 << "	always @(posedge clk or negedge rst_n) begin \n";
     r16_npipereg1 << "		if(~rst_n) begin                         \n";
     //r16_npipereg1 << "			N_D0reg <= P_ZERO ;              \n";
     r16_npipereg1 << "			N_D2_out <= P_ZERO ;                 \n";
     r16_npipereg1 << "		end                                      \n";
     r16_npipereg1 << "		else begin                               \n";
     //r16_npipereg1 << "			N_D0reg <= N_in ;                \n";
     r16_npipereg1 << "			N_D2_out <= N_in ;                   \n";
     r16_npipereg1 << "		end                                      \n";
     r16_npipereg1 << "	end                                          \n";
     r16_npipereg1 << "                                              \n";
     r16_npipereg1 << "endmodule                                     \n";
	 r16_npipereg1.close();
}
void Pipe::R16_NPipeReg2(std::string string_in){
	 std::ofstream r16_npipereg2;
     std::string        string_buf = "/R16_NPipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_npipereg2.open(ss.str());
     r16_npipereg2 << "`timescale 1 ns/1 ps                                  \n";
     r16_npipereg2 << "module R16_NPipeReg2(Ninv2_D1_out,                    \n";
     r16_npipereg2 << "                     N_D2_out,                        \n";
     r16_npipereg2 << "					 Ninv2_in,                           \n";
     r16_npipereg2 << "                     N_in,                            \n";
     r16_npipereg2 << "                     rst_n,                           \n";
     r16_npipereg2 << "                     clk                              \n";
     r16_npipereg2 << "                     ) ;                              \n";
     r16_npipereg2 << "                                                      \n";
     r16_npipereg2 << "parameter P_WIDTH     = 64 ;                          \n";
     r16_npipereg2 << "parameter P_ZERO      = 64'h0 ;                       \n";
     r16_npipereg2 << "parameter P1_ZERO     = 65'h0 ;                       \n";
     r16_npipereg2 << "                                                      \n";
     r16_npipereg2 << "                                                      \n";
     r16_npipereg2 << "output [P_WIDTH:0]   Ninv2_D1_out ;                   \n";
     r16_npipereg2 << "output [P_WIDTH-1:0] N_D2_out ;                       \n";
     r16_npipereg2 << "                                                      \n";
     r16_npipereg2 << "input [P_WIDTH:0]    Ninv2_in ;                       \n";
     r16_npipereg2 << "input [P_WIDTH-1:0]  N_in ;                           \n";
     r16_npipereg2 << "input                rst_n ;                          \n";
     r16_npipereg2 << "input                clk ;                            \n";
     r16_npipereg2 << "                                                      \n";
     r16_npipereg2 << "reg [P_WIDTH-1:0]  N_D2_out ;                         \n";
     r16_npipereg2 << "reg [P_WIDTH:0]    Ninv2_D1_out ;                     \n";
     r16_npipereg2 << "                                                      \n";
     r16_npipereg2 << "	//                                                   \n";
     r16_npipereg2 << "	always @(posedge clk or negedge rst_n) begin         \n";
     r16_npipereg2 << "		if(~rst_n) begin                                 \n";
     r16_npipereg2 << "			N_D2_out <= P_ZERO ;                         \n";
     r16_npipereg2 << "			Ninv2_D1_out <= P1_ZERO ;                    \n";
     r16_npipereg2 << "		end                                              \n";
     r16_npipereg2 << "		else begin                                       \n";
     r16_npipereg2 << "			N_D2_out <= N_in ;                           \n";
     r16_npipereg2 << "			Ninv2_D1_out <= Ninv2_in ;                   \n";
     r16_npipereg2 << "		end                                              \n";
     r16_npipereg2 << "	end                                                  \n";
     r16_npipereg2 << "                                                      \n";
     r16_npipereg2 << "endmodule                                             \n";
     r16_npipereg2.close();	 
}
void Pipe::R16_NPipeReg3(std::string string_in){
	 std::ofstream r16_npipereg3;
     std::string        string_buf = "/R16_NPipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_npipereg3.open(ss.str());
     r16_npipereg3 << "`timescale 1 ns/1 ps                                \n";                        
     r16_npipereg3 << "module R16_NPipeReg3(N_D4_out,                      \n";
     r16_npipereg3 << "                     N_in,                          \n";
     r16_npipereg3 << "                     rst_n,                         \n";
     r16_npipereg3 << "                     clk                            \n";
     r16_npipereg3 << "                     ) ;                            \n";
     r16_npipereg3 << "                                                    \n";
     r16_npipereg3 << "parameter P_WIDTH     = 64 ;                        \n";
     r16_npipereg3 << "parameter P_ZERO      = 64'h0 ;                     \n";
     r16_npipereg3 << "                                                    \n";
     r16_npipereg3 << "                                                    \n";
     r16_npipereg3 << "output [P_WIDTH-1:0] N_D4_out ;                     \n";
     r16_npipereg3 << "                                                    \n";
     r16_npipereg3 << "input [P_WIDTH-1:0]  N_in ;                         \n";
     r16_npipereg3 << "input                rst_n ;                        \n";
     r16_npipereg3 << "input                clk ;                          \n";
     r16_npipereg3 << "                                                    \n";
     //r16_npipereg3 << "reg [P_WIDTH-1:0]  N_D0reg ;                        \n";
     r16_npipereg3 << "reg [P_WIDTH-1:0]  N_D4_out ;                       \n";
     r16_npipereg3 << "                                                    \n";
     r16_npipereg3 << "                                                    \n";
     r16_npipereg3 << "	//                                                 \n";
     r16_npipereg3 << "	always @(posedge clk or negedge rst_n) begin       \n";
     r16_npipereg3 << "		if(~rst_n) begin                               \n";
     //r16_npipereg3 << "			N_D0reg <= P_ZERO ;                        \n";
     r16_npipereg3 << "			N_D4_out <= P_ZERO ;                       \n";
     r16_npipereg3 << "		end                                            \n";
     r16_npipereg3 << "		else begin                                     \n";
     //r16_npipereg3 << "			N_D0reg <= N_in ;                          \n";
     r16_npipereg3 << "			N_D4_out <= N_in ;                      \n";
     r16_npipereg3 << "		end                                            \n";
     r16_npipereg3 << "	end                                                \n";
     r16_npipereg3 << "                                                    \n";
     r16_npipereg3 << "endmodule                                           \n";    
     r16_npipereg3.close();	 	
}
void Pipe::R16_PipeReg1(std::string string_in){
	 std::ofstream r16_pipereg1;
     std::string        string_buf = "/R16_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_pipereg1.open(ss.str());
     r16_pipereg1 << "`timescale 1 ns/1 ps                                       \n";
     r16_pipereg1 << "module R16_PipeReg1(A0_out,                                \n";
     r16_pipereg1 << "				      A1_out,                                  \n";
     r16_pipereg1 << "				      A2_out,                                  \n";
     r16_pipereg1 << "				      A3_out,                                  \n";
     r16_pipereg1 << "				      A4_out,                                  \n";
     r16_pipereg1 << "				      A5_out,                                  \n";
     r16_pipereg1 << "				      A6_out,                                  \n";
     r16_pipereg1 << "				      A7_out,                                  \n";
     r16_pipereg1 << "				      A8_out,                                  \n";
     r16_pipereg1 << "				      A9_out,                                  \n";
     r16_pipereg1 << "				      A10_out,                                 \n";
     r16_pipereg1 << "				      A11_out,                                 \n";
     r16_pipereg1 << "				      A12_out,                                 \n";
     r16_pipereg1 << "				      A13_out,                                 \n";
     r16_pipereg1 << "				      A14_out,                                 \n";
     r16_pipereg1 << "				      A15_out,                                 \n";
     r16_pipereg1 << "                    A0_in,                                 \n";
     r16_pipereg1 << "			          A1_in,                                   \n";
     r16_pipereg1 << "			          A2_in,                                   \n";
     r16_pipereg1 << "			          A3_in,                                   \n";
     r16_pipereg1 << "			          A4_in,                                   \n";
     r16_pipereg1 << "			          A5_in,                                   \n";
     r16_pipereg1 << "			          A6_in,                                   \n";
     r16_pipereg1 << "			          A7_in,                                   \n";
     r16_pipereg1 << "			          A8_in,                                   \n";
     r16_pipereg1 << "			          A9_in,                                   \n";
     r16_pipereg1 << "			          A10_in,                                  \n";
     r16_pipereg1 << "			          A11_in,                                  \n";
     r16_pipereg1 << "			          A12_in,                                  \n";
     r16_pipereg1 << "			          A13_in,                                  \n";
     r16_pipereg1 << "			          A14_in,                                  \n";
     r16_pipereg1 << "			          A15_in,                                  \n";
     r16_pipereg1 << "                    rst_n,                                 \n";
     r16_pipereg1 << "                    clk                                    \n";
     r16_pipereg1 << "                    ) ;                                    \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "parameter D_WIDTH     = 192 ;                              \n";
     r16_pipereg1 << "parameter DH_WIDTH    = 96 ;                               \n";
     r16_pipereg1 << "parameter D_ZERO      = 192'h0 ;                           \n";
     r16_pipereg1 << "parameter DH_ZERO     = 96'h0 ;                            \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "output [DH_WIDTH-1:0] A0_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A1_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A2_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A3_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A4_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A5_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A6_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A7_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A8_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A9_out ;                             \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A10_out ;                            \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A11_out ;                            \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A12_out ;                            \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A13_out ;                            \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A14_out ;                            \n";
     r16_pipereg1 << "output [D_WIDTH-1:0]  A15_out ;                            \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "input [DH_WIDTH-1:0] A0_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A1_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A2_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A3_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A4_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A5_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A6_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A7_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A8_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A9_in ;                               \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A10_in ;                              \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A11_in ;                              \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A12_in ;                              \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A13_in ;                              \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A14_in ;                              \n";
     r16_pipereg1 << "input [D_WIDTH-1:0]  A15_in ;                              \n";
     r16_pipereg1 << "input                rst_n ;                               \n";
     r16_pipereg1 << "input                clk ;                                 \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "reg [DH_WIDTH-1:0] A0_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A1_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A2_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A3_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A4_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A5_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A6_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A7_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A8_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A9_out ;                                \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A10_out ;                               \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A11_out ;                               \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A12_out ;                               \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A13_out ;                               \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A14_out ;                               \n";
     r16_pipereg1 << "reg [D_WIDTH-1:0]  A15_out ;                               \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "	//                                                       \n";
     r16_pipereg1 << "	always @(posedge clk or negedge rst_n) begin             \n";
     r16_pipereg1 << "		if(~rst_n) begin                                     \n";
     r16_pipereg1 << "			A0_out <= DH_ZERO ;                              \n";
     r16_pipereg1 << "			A1_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A2_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A3_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A4_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A5_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A6_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A7_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A8_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A9_out <= D_ZERO ;                               \n";
     r16_pipereg1 << "			A10_out <= D_ZERO ;                              \n";
     r16_pipereg1 << "			A11_out <= D_ZERO ;                              \n";
     r16_pipereg1 << "			A12_out <= D_ZERO ;                              \n";
     r16_pipereg1 << "			A13_out <= D_ZERO ;                              \n";
     r16_pipereg1 << "			A14_out <= D_ZERO ;                              \n";
     r16_pipereg1 << "			A15_out <= D_ZERO ;                              \n";
     r16_pipereg1 << "		end                                                  \n";
     r16_pipereg1 << "		else begin                                           \n";
     r16_pipereg1 << "			A0_out <= A0_in ;                                \n";
     r16_pipereg1 << "			A1_out <= A1_in ;                                \n";
     r16_pipereg1 << "			A2_out <= A2_in ;                                \n";
     r16_pipereg1 << "			A3_out <= A3_in ;                                \n";
     r16_pipereg1 << "			A4_out <= A4_in ;                                \n";
     r16_pipereg1 << "			A5_out <= A5_in ;                                \n";
     r16_pipereg1 << "			A6_out <= A6_in ;                                \n";
     r16_pipereg1 << "			A7_out <= A7_in ;                                \n";
     r16_pipereg1 << "			A8_out <= A8_in ;                                \n";
     r16_pipereg1 << "			A9_out <= A9_in ;                                \n";
     r16_pipereg1 << "			A10_out <= A10_in ;                              \n";
     r16_pipereg1 << "			A11_out <= A11_in ;                              \n";
     r16_pipereg1 << "			A12_out <= A12_in ;                              \n";
     r16_pipereg1 << "			A13_out <= A13_in ;                              \n";
     r16_pipereg1 << "			A14_out <= A14_in ;                              \n";
     r16_pipereg1 << "			A15_out <= A15_in ;                              \n";
     r16_pipereg1 << "		end                                                  \n";
     r16_pipereg1 << "	end                                                      \n";
     r16_pipereg1 << "                                                           \n";
     r16_pipereg1 << "endmodule                                                  \n";
     r16_pipereg1.close();	 	
}
void Pipe::R16_PipeReg2(std::string string_in){
	 std::ofstream r16_pipereg2;
     std::string        string_buf = "/R16_PipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_pipereg2.open(ss.str());
     r16_pipereg2 << "`timescale 1 ns/1 ps                                     \n";     
     r16_pipereg2 << "module R16_PipeReg2(A0_out,                              \n";
     r16_pipereg2 << "					  Ac_out,                                \n";
     r16_pipereg2 << "                    A0_in,                               \n";
     r16_pipereg2 << "					  Ac_in,                                 \n";
     r16_pipereg2 << "                    rst_n,                               \n";
     r16_pipereg2 << "                    clk                                  \n";
     r16_pipereg2 << "                    ) ;                                  \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "parameter P_WIDTH     = 64 ;                             \n";
     r16_pipereg2 << "parameter P_ZERO      = 64'h0 ;                          \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "output [P_WIDTH-1:0] A0_out ;                            \n";
     r16_pipereg2 << "output               Ac_out ;                            \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "input [P_WIDTH-1:0]  A0_in ;                             \n";
     r16_pipereg2 << "input                Ac_in ;                             \n";
     r16_pipereg2 << "input                rst_n ;                             \n";
     r16_pipereg2 << "input                clk ;                               \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "reg [P_WIDTH-1:0]  A0_out ;                              \n";
     r16_pipereg2 << "reg [P_WIDTH-1:0]  A1_out ;                              \n";
     r16_pipereg2 << "reg                Ac_out ;                              \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "	//                                                     \n";
     r16_pipereg2 << "	always @(posedge clk or negedge rst_n) begin           \n";
     r16_pipereg2 << "		if(~rst_n) begin                                   \n";
     r16_pipereg2 << "			A0_out <= P_ZERO ;                             \n";
     r16_pipereg2 << "			Ac_out <= 1'b0 ;                               \n";
     r16_pipereg2 << "		end                                                \n";
     r16_pipereg2 << "		else begin                                         \n";
     r16_pipereg2 << "			A0_out <= A0_in ;                              \n";
     r16_pipereg2 << "			Ac_out <= Ac_in ;                              \n";
     r16_pipereg2 << "		end                                                \n";
     r16_pipereg2 << "	end                                                    \n";
     r16_pipereg2 << "                                                         \n";
     r16_pipereg2 << "endmodule                                                \n";
     r16_pipereg2.close();	 	
}
void Pipe::R16_PipeReg3(std::string string_in){
	 std::ofstream r16_pipereg3;
     std::string        string_buf = "/R16_PipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg3.open(ss.str());
     r16_pipereg3 << "`timescale 1 ns/1 ps                                      \n";
     r16_pipereg3 << "module R16_PipeReg3(A0_out,                               \n";
     r16_pipereg3 << "					  Ac_out,                               \n";
     r16_pipereg3 << "					  Dinv_out,                             \n";
     r16_pipereg3 << "					  Ninv2_out,                            \n";
     r16_pipereg3 << "                    A0_in,                                \n";
     r16_pipereg3 << "					  Ac_in,                                \n";
     r16_pipereg3 << "					  Dinv_in,                              \n";
     r16_pipereg3 << "					  Ninv2_in,                             \n";
     r16_pipereg3 << "                    rst_n,                                \n";
     r16_pipereg3 << "                    clk                                   \n";
     r16_pipereg3 << "                    ) ;                                   \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "parameter P_WIDTH     = 64 ;                              \n";
     r16_pipereg3 << "parameter P_ZERO      = 64'h0 ;                           \n";
     r16_pipereg3 << "parameter P1_ZERO     = 65'h0 ;                           \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "output [P_WIDTH-1:0] A0_out ;                             \n";
     r16_pipereg3 << "output               Ac_out ;                             \n";
     r16_pipereg3 << "output [P_WIDTH-1:0] Dinv_out ;                           \n";
     r16_pipereg3 << "output [P_WIDTH:0]   Ninv2_out ;                          \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "input [P_WIDTH-1:0]  A0_in ;                              \n";
     r16_pipereg3 << "input                Ac_in ;                              \n";
     r16_pipereg3 << "input [P_WIDTH-1:0]  Dinv_in ;                            \n";
     r16_pipereg3 << "input [P_WIDTH:0]    Ninv2_in ;                           \n";
     r16_pipereg3 << "input                rst_n ;                              \n";
     r16_pipereg3 << "input                clk ;                                \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "reg [P_WIDTH-1:0]  A0_out ;                               \n";
     r16_pipereg3 << "reg                Ac_out ;                               \n";
     r16_pipereg3 << "reg [P_WIDTH-1:0]  Dinv_out ;                             \n";
     r16_pipereg3 << "reg [P_WIDTH:0]    Ninv2_out ;                            \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "	//                                                      \n";
     r16_pipereg3 << "	always @(posedge clk or negedge rst_n) begin            \n";
     r16_pipereg3 << "		if(~rst_n) begin                                    \n";
     r16_pipereg3 << "			A0_out <= P_ZERO ;                              \n";
     r16_pipereg3 << "			Ac_out <= 1'b0 ;                                \n";
     r16_pipereg3 << "			Dinv_out <= P_ZERO ;                            \n";
     r16_pipereg3 << "			Ninv2_out <= P1_ZERO ;                          \n";
     r16_pipereg3 << "		end                                                 \n";
     r16_pipereg3 << "		else begin                                          \n";
     r16_pipereg3 << "			A0_out <= A0_in ;                               \n";
     r16_pipereg3 << "			Ac_out <= Ac_in ;                               \n";
     r16_pipereg3 << "			Dinv_out <= Dinv_in ;                           \n";
     r16_pipereg3 << "			Ninv2_out <= Ninv2_in ;                         \n";
     r16_pipereg3 << "		end                                                 \n";
     r16_pipereg3 << "	end                                                     \n";
     r16_pipereg3 << "                                                          \n";
     r16_pipereg3 << "endmodule                                                 \n";
     r16_pipereg3.close();	 	
}
void Pipe::R16_PipeReg4(std::string string_in){
	 std::ofstream r16_pipereg4;
     std::string        string_buf = "/R16_PipeReg4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg4.open(ss.str());
     r16_pipereg4 << "`timescale 1 ns/1 ps                                     \n";      
     r16_pipereg4 << "module R16_PipeReg4(A0_out,                              \n";
     r16_pipereg4 << "					  Ac_out,                              \n";
     r16_pipereg4 << "					  Ninv2_D2_out,                        \n";
     r16_pipereg4 << "                    A0_in,                               \n";
     r16_pipereg4 << "					  Ac_in,                               \n";
     r16_pipereg4 << "					  Ninv2_in,                            \n";
     r16_pipereg4 << "                    rst_n,                               \n";
     r16_pipereg4 << "                    clk                                  \n";
     r16_pipereg4 << "                    ) ;                                  \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "parameter P_WIDTH     = 64 ;                             \n";
     r16_pipereg4 << "parameter P_ZERO      = 64'h0 ;                          \n";
     r16_pipereg4 << "parameter P1_ZERO     = 65'h0 ;                          \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "output [P_WIDTH-1:0] A0_out ;                            \n";
     r16_pipereg4 << "output               Ac_out ;                            \n";
     r16_pipereg4 << "output [P_WIDTH:0]   Ninv2_D2_out ;                      \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "input [P_WIDTH-1:0]  A0_in ;                             \n";
     r16_pipereg4 << "input                Ac_in ;                             \n";
     r16_pipereg4 << "input [P_WIDTH:0]    Ninv2_in ;                          \n";
     r16_pipereg4 << "input                rst_n ;                             \n";
     r16_pipereg4 << "input                clk ;                               \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "reg [P_WIDTH-1:0]  A0_out ;                              \n";
     r16_pipereg4 << "reg                Ac_out ;                              \n";
     r16_pipereg4 << "reg [P_WIDTH:0]    Ninv2_D0_reg ;                        \n";
     r16_pipereg4 << "reg [P_WIDTH:0]    Ninv2_D2_out ;                        \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "	//Ninv2 delay 2-cycle                                  \n";
     r16_pipereg4 << "	always @(posedge clk or negedge rst_n) begin           \n";
     r16_pipereg4 << "		if(~rst_n) begin                                   \n";
     r16_pipereg4 << "			A0_out <= P_ZERO ;                             \n";
     r16_pipereg4 << "			Ac_out <= 1'b0 ;                               \n";
     r16_pipereg4 << "			Ninv2_D0_reg <= P1_ZERO ;                      \n";
     r16_pipereg4 << "			Ninv2_D2_out <= P1_ZERO ;                      \n";
     r16_pipereg4 << "		end                                                \n";
     r16_pipereg4 << "		else begin                                         \n";
     r16_pipereg4 << "			A0_out <= A0_in ;                              \n";
     r16_pipereg4 << "			Ac_out <= Ac_in ;                              \n";
     r16_pipereg4 << "			Ninv2_D0_reg <= Ninv2_in ;                     \n";
     r16_pipereg4 << "			Ninv2_D2_out <= Ninv2_D0_reg ;                 \n";
     r16_pipereg4 << "		end                                                \n";
     r16_pipereg4 << "	end                                                    \n";
     r16_pipereg4 << "                                                         \n";
     r16_pipereg4 << "endmodule                                                \n";
     r16_pipereg4.close();	 	
}
void Pipe::R16_PipeReg4_2(std::string string_in){
	 std::ofstream r16_pipereg4_2;
     std::string        string_buf = "/R16_PipeReg4_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg4_2.open(ss.str());
     r16_pipereg4_2 << "`timescale 1 ns/1 ps                                    \n";
     r16_pipereg4_2 << "module R16_PipeReg4_2(A0_out,                           \n";
     r16_pipereg4_2 << "					  Ac_out,                           \n";
     r16_pipereg4_2 << "					  N_D1_out,                         \n";
     r16_pipereg4_2 << "					  D_out,                            \n";
     r16_pipereg4_2 << "                      A0_in,                            \n";
     r16_pipereg4_2 << "					  Ac_in,                            \n";
     r16_pipereg4_2 << "					  N_in,                             \n";
     r16_pipereg4_2 << "					  D_in,                             \n";
     r16_pipereg4_2 << "                      rst_n,                            \n";
     r16_pipereg4_2 << "                      clk                               \n";
     r16_pipereg4_2 << "                      ) ;                               \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "parameter P_WIDTH     = 64 ;                            \n";
     r16_pipereg4_2 << "parameter P_ZERO      = 64'h0 ;                         \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "output [P_WIDTH-1:0] A0_out ;                           \n";
     r16_pipereg4_2 << "output               Ac_out ;                           \n";
     r16_pipereg4_2 << "output [P_WIDTH-1:0] N_D1_out ;                         \n";
     r16_pipereg4_2 << "output [P_WIDTH-1:0] D_out ;                            \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "input [P_WIDTH-1:0]  A0_in ;                            \n";
     r16_pipereg4_2 << "input                Ac_in ;                            \n";
     r16_pipereg4_2 << "input [P_WIDTH-1:0]  N_in ;                             \n";
     r16_pipereg4_2 << "input [P_WIDTH-1:0]  D_in ;                             \n";
     r16_pipereg4_2 << "input                rst_n ;                            \n";
     r16_pipereg4_2 << "input                clk ;                              \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "reg [P_WIDTH-1:0]  A0_out ;                             \n";
     r16_pipereg4_2 << "reg                Ac_out ;                             \n";
     r16_pipereg4_2 << "reg [P_WIDTH-1:0]  N_D1_out ;                           \n";
     r16_pipereg4_2 << "reg [P_WIDTH-1:0]  D_out ;                              \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "	//                                                  \n";
     r16_pipereg4_2 << "	always @(posedge clk or negedge rst_n) begin        \n";
     r16_pipereg4_2 << "		if(~rst_n) begin                                \n";
     r16_pipereg4_2 << "			A0_out <= P_ZERO ;                          \n";
     r16_pipereg4_2 << "			Ac_out <= 1'b0 ;                            \n";
     r16_pipereg4_2 << "			N_D1_out <= P_ZERO ;                        \n";
     r16_pipereg4_2 << "			D_out <= P_ZERO ;                           \n";
     r16_pipereg4_2 << "		end                                             \n";
     r16_pipereg4_2 << "		else begin                                      \n";
     r16_pipereg4_2 << "			A0_out <= A0_in ;                           \n";
     r16_pipereg4_2 << "			Ac_out <= Ac_in ;                           \n";
     r16_pipereg4_2 << "			N_D1_out <= N_in ;                          \n";
     r16_pipereg4_2 << "			D_out <= D_in ;                             \n";
     r16_pipereg4_2 << "		end                                             \n";
     r16_pipereg4_2 << "	end                                                 \n";
     r16_pipereg4_2 << "                                                        \n";
     r16_pipereg4_2 << "endmodule                                               \n";
     r16_pipereg4_2.close();	 	
}
void Pipe::R16_PipeReg5_1(std::string string_in){
	 std::ofstream r16_pipereg5_1;
     std::string        string_buf = "/R16_PipeReg5_1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg5_1.open(ss.str());
     r16_pipereg5_1 << "`timescale 1 ns/1 ps                                    \n";   
     r16_pipereg5_1 << "module R16_PipeReg5_1(SS_out,                           \n";
     r16_pipereg5_1 << "					  SC_out,                           \n";
     r16_pipereg5_1 << "                      SS_in,                            \n";
     r16_pipereg5_1 << "					  SC_in,                            \n";
     r16_pipereg5_1 << "                      rst_n,                            \n";
     r16_pipereg5_1 << "                      clk                               \n";
     r16_pipereg5_1 << "                      ) ;                               \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "parameter DH_WIDTH     = 96 ;                           \n";
     r16_pipereg5_1 << "parameter DH_ZERO      = 96'h0 ;                        \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "output [DH_WIDTH-1:0] SS_out ;                          \n";
     r16_pipereg5_1 << "output [DH_WIDTH-1:0] SC_out ;                          \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "input [DH_WIDTH-1:0]  SS_in ;                           \n";
     r16_pipereg5_1 << "input [DH_WIDTH-1:0]  SC_in ;                           \n";
     r16_pipereg5_1 << "input                 rst_n ;                           \n";
     r16_pipereg5_1 << "input                 clk ;                             \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "reg [DH_WIDTH-1:0]  SS_out ;                            \n";
     r16_pipereg5_1 << "reg [DH_WIDTH-1:0]  SC_out ;                            \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "	//                                                  \n";
     r16_pipereg5_1 << "	always @(posedge clk or negedge rst_n) begin        \n";
     r16_pipereg5_1 << "		if(~rst_n) begin                                \n";
     r16_pipereg5_1 << "			SS_out <= DH_ZERO ;                         \n";
     r16_pipereg5_1 << "			SC_out <= DH_ZERO ;                         \n";
     r16_pipereg5_1 << "		end                                             \n";
     r16_pipereg5_1 << "		else begin                                      \n";
     r16_pipereg5_1 << "			SS_out <= SS_in ;                           \n";
     r16_pipereg5_1 << "			SC_out <= SC_in ;                           \n";
     r16_pipereg5_1 << "		end                                             \n";
     r16_pipereg5_1 << "	end                                                 \n";
     r16_pipereg5_1 << "                                                        \n";
     r16_pipereg5_1 << "endmodule                                               \n";
     r16_pipereg5_1.close();	 	
}
void Pipe::R16_PipeReg5_2(std::string string_in){
	 std::ofstream r16_pipereg5_2;
     std::string        string_buf = "/R16_PipeReg5_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg5_2.open(ss.str());
     r16_pipereg5_2 << "`timescale 1 ns/1 ps                                  \n";    
     r16_pipereg5_2 << "module R16_PipeReg5_2(SS_out,                         \n";
     r16_pipereg5_2 << "					  SC_out,                         \n";
     r16_pipereg5_2 << "                      SS_in,                          \n";
     r16_pipereg5_2 << "					  SC_in,                          \n";
     r16_pipereg5_2 << "                      rst_n,                          \n";
     r16_pipereg5_2 << "                      clk                             \n";
     r16_pipereg5_2 << "                      ) ;                             \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "parameter D_WIDTH     = 192 ;                         \n";
     r16_pipereg5_2 << "parameter D_ZERO      = 192'h0 ;                      \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "output [D_WIDTH-1:0] SS_out ;                         \n";
     r16_pipereg5_2 << "output [D_WIDTH-1:0] SC_out ;                         \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "input [D_WIDTH-1:0]  SS_in ;                          \n";
     r16_pipereg5_2 << "input [D_WIDTH-1:0]  SC_in ;                          \n";
     r16_pipereg5_2 << "input                rst_n ;                          \n";
     r16_pipereg5_2 << "input                clk ;                            \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "reg [D_WIDTH-1:0]  SS_out ;                           \n";
     r16_pipereg5_2 << "reg [D_WIDTH-1:0]  SC_out ;                           \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "	//                                                \n";
     r16_pipereg5_2 << "	always @(posedge clk or negedge rst_n) begin      \n";
     r16_pipereg5_2 << "		if(~rst_n) begin                              \n";
     r16_pipereg5_2 << "			SS_out <= D_ZERO ;                        \n";
     r16_pipereg5_2 << "			SC_out <= D_ZERO ;                        \n";
     r16_pipereg5_2 << "		end                                           \n";
     r16_pipereg5_2 << "		else begin                                    \n";
     r16_pipereg5_2 << "			SS_out <= SS_in ;                         \n";
     r16_pipereg5_2 << "			SC_out <= SC_in ;                         \n";
     r16_pipereg5_2 << "		end                                           \n";
     r16_pipereg5_2 << "	end                                               \n";
     r16_pipereg5_2 << "                                                      \n";
     r16_pipereg5_2 << "endmodule                                             \n";
     r16_pipereg5_2.close();	 	
}
void Pipe::Radix16_Pipe(std::string string_in){
	 std::ofstream radix16_pipe;
     std::string        string_buf = "/Radix16_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 radix16_pipe.open(ss.str());
     radix16_pipe << "`timescale 1 ns/1 ps                                               \n";
     radix16_pipe << "module Radix16_Pipe(RA0_out,                                       \n";
     radix16_pipe << "			          RA1_out,                                       \n";
     radix16_pipe << "			          RA2_out,                                       \n";
     radix16_pipe << "			          RA3_out,                                       \n";
     radix16_pipe << "			          RA4_out,                                       \n";
     radix16_pipe << "			          RA5_out,                                       \n";
     radix16_pipe << "			          RA6_out,                                       \n";
     radix16_pipe << "			          RA7_out,                                       \n";
     radix16_pipe << "			          RA8_out,                                       \n";
     radix16_pipe << "			          RA9_out,                                       \n";
     radix16_pipe << "			          RA10_out,                                      \n";
     radix16_pipe << "			          RA11_out,                                      \n";
     radix16_pipe << "			          RA12_out,                                      \n";
     radix16_pipe << "			          RA13_out,                                      \n";
     radix16_pipe << "			          RA14_out,                                      \n";
     radix16_pipe << "			          RA15_out,                                      \n";
     radix16_pipe << "                    RA0_in,                                        \n";
     radix16_pipe << "			          RA1_in,                                        \n";
     radix16_pipe << "			          RA2_in,                                        \n";
     radix16_pipe << "			          RA3_in,                                        \n";
     radix16_pipe << "			          RA4_in,                                        \n";
     radix16_pipe << "			          RA5_in,                                        \n";
     radix16_pipe << "			          RA6_in,                                        \n";
     radix16_pipe << "			          RA7_in,                                        \n";
     radix16_pipe << "			          RA8_in,                                        \n";
     radix16_pipe << "			          RA9_in,                                        \n";
     radix16_pipe << "			          RA10_in,                                       \n";
     radix16_pipe << "			          RA11_in,                                       \n";
     radix16_pipe << "			          RA12_in,                                       \n";
     radix16_pipe << "			          RA13_in,                                       \n";
     radix16_pipe << "			          RA14_in,                                       \n";
     radix16_pipe << "			          RA15_in,                                       \n";
     radix16_pipe << "		              N_in,                                          \n";
     radix16_pipe << "                    rst_n,                                         \n";
     radix16_pipe << "                    clk                                            \n";
     radix16_pipe << "                    ) ;                                            \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "parameter P_WIDTH     = 64 ;                                       \n";
     radix16_pipe << "parameter DH_WIDTH    = 96 ;                                       \n";
     radix16_pipe << "parameter D_WIDTH     = 192 ;                                      \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA0_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA1_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA2_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA3_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA4_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA5_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA6_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA7_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA8_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA9_out ;                                      \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA10_out ;                                     \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA11_out ;                                     \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA12_out ;                                     \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA13_out ;                                     \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA14_out ;                                     \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA15_out ;                                     \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA0_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA1_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA2_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA3_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA4_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA5_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA6_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA7_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA8_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA9_in ;                                       \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA10_in ;                                      \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA11_in ;                                      \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA12_in ;                                      \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA13_in ;                                      \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA14_in ;                                      \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA15_in ;                                      \n";
     radix16_pipe << "input [P_WIDTH-1:0] N_in ;                                         \n";
     radix16_pipe << "input               rst_n ;                                        \n";
     radix16_pipe << "input               clk ;                                          \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "wire  [DH_WIDTH-1:0] Sum0_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum1_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum2_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum3_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum4_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum5_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum6_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum7_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum8_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum9_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum10_wire ;                                  \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum11_wire ;                                  \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum12_wire ;                                  \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum13_wire ;                                  \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum14_wire ;                                  \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum15_wire ;                                  \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "wire  [DH_WIDTH-1:0] Sum0_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum1_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum2_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum3_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum4_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum5_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum6_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum7_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum8_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum9_reg_wire ;                               \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum10_reg_wire ;                              \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum11_reg_wire ;                              \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum12_reg_wire ;                              \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum13_reg_wire ;                              \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum14_reg_wire ;                              \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum15_reg_wire ;                              \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "wire  [P_WIDTH-1:0]  N_D2_wire ;                                   \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "//Pipeline Register                                                \n";
     radix16_pipe << "R16_NPipeReg1 u_R16_NPipeReg1(.N_D2_out(N_D2_wire),                \n";
     radix16_pipe << "                              .N_in(N_in),                         \n";
     radix16_pipe << "                              .rst_n(rst_n),                       \n";
     radix16_pipe << "                              .clk(clk)                            \n";
     radix16_pipe << "                              ) ;                                  \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "//output0                                                          \n";
     radix16_pipe << "Sum16_out0 u_Sum16_out0(.S_out(Sum0_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;                                        \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod96 u0_Mod96(.S_out(RA0_out),                                    \n";
     radix16_pipe << "               .A_in(Sum0_reg_wire),                               \n";
     radix16_pipe << "		         .N_in(N_D2_wire),                                   \n";
     radix16_pipe << "               .rst_n(rst_n),                                      \n";
     radix16_pipe << "               .clk(clk)                                           \n";
     radix16_pipe << "               ) ;                                                 \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "//output1                                                          \n";
     radix16_pipe << "Sum16_out1 u_Sum16_out1(.S_out(Sum1_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			            .A1_in(RA1_in),                              \n";
     radix16_pipe << "			            .A2_in(RA2_in),                              \n";
     radix16_pipe << "			            .A3_in(RA3_in),                              \n";
     radix16_pipe << "			            .A4_in(RA4_in),                              \n";
     radix16_pipe << "			            .A5_in(RA5_in),                              \n";
     radix16_pipe << "			            .A6_in(RA6_in),                              \n";
     radix16_pipe << "			            .A7_in(RA7_in),                              \n";
     radix16_pipe << "			            .A8_in(RA8_in),                              \n";
     radix16_pipe << "			            .A9_in(RA9_in),                              \n";
     radix16_pipe << "			            .A10_in(RA10_in),                            \n";
     radix16_pipe << "			            .A11_in(RA11_in),                            \n";
     radix16_pipe << "			            .A12_in(RA12_in),                            \n";
     radix16_pipe << "			            .A13_in(RA13_in),                            \n";
     radix16_pipe << "			            .A14_in(RA14_in),                            \n";
     radix16_pipe << "			            .A15_in(RA15_in),                            \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;                                        \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u1_Mod192(.S_out(RA1_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum1_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;                                                \n";
     radix16_pipe << "					                                                 \n";
     radix16_pipe << "//output2                                                          \n";
     radix16_pipe << "Sum16_out2 u_Sum16_out2(.S_out(Sum2_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;                                        \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u2_Mod192(.S_out(RA2_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum2_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;					                             \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "//output3                                                          \n";
     radix16_pipe << "Sum16_out3 u_Sum16_out3(.S_out(Sum3_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;                                        \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u3_Mod192(.S_out(RA3_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum3_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;				                                 \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output4                                                          \n";
     radix16_pipe << "Sum16_out4 u_Sum16_out4(.S_out(Sum4_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;                                        \n";
     radix16_pipe << "					                                                 \n";
     radix16_pipe << "Mod192 u4_Mod192(.S_out(RA4_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum4_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;		                                         \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output5                                                          \n";
     radix16_pipe << "Sum16_out5 u_Sum16_out5(.S_out(Sum5_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;                                        \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u5_Mod192(.S_out(RA5_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum5_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;		                                         \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output6                                                          \n";
     radix16_pipe << "Sum16_out6 u_Sum16_out6(.S_out(Sum6_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;	                                     \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u6_Mod192(.S_out(RA6_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum6_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;		                                         \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output7                                                          \n";
     radix16_pipe << "Sum16_out7 u_Sum16_out7(.S_out(Sum7_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;                                        \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u7_Mod192(.S_out(RA7_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum7_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;		                                         \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output8                                                          \n";
     radix16_pipe << "Sum16_out8 u_Sum16_out8(.S_out(Sum8_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;	                                     \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u8_Mod192(.S_out(RA8_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum8_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;		                                         \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output*9                                                         \n";
     radix16_pipe << "Sum16_out9 u_Sum16_out9(.S_out(Sum9_wire),                         \n";
     radix16_pipe << "                        .A0_in(RA0_in),                            \n";
     radix16_pipe << "			              .A1_in(RA1_in),                            \n";
     radix16_pipe << "			              .A2_in(RA2_in),                            \n";
     radix16_pipe << "			              .A3_in(RA3_in),                            \n";
     radix16_pipe << "			              .A4_in(RA4_in),                            \n";
     radix16_pipe << "			              .A5_in(RA5_in),                            \n";
     radix16_pipe << "			              .A6_in(RA6_in),                            \n";
     radix16_pipe << "			              .A7_in(RA7_in),                            \n";
     radix16_pipe << "			              .A8_in(RA8_in),                            \n";
     radix16_pipe << "			              .A9_in(RA9_in),                            \n";
     radix16_pipe << "			              .A10_in(RA10_in),                          \n";
     radix16_pipe << "			              .A11_in(RA11_in),                          \n";
     radix16_pipe << "			              .A12_in(RA12_in),                          \n";
     radix16_pipe << "			              .A13_in(RA13_in),                          \n";
     radix16_pipe << "			              .A14_in(RA14_in),                          \n";
     radix16_pipe << "			              .A15_in(RA15_in),                          \n";
     radix16_pipe << "                        .rst_n(rst_n),                             \n";
     radix16_pipe << "                        .clk(clk)                                  \n";
     radix16_pipe << "                        ) ;	                                     \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u9_Mod192(.S_out(RA9_out),                                  \n";
     radix16_pipe << "                 .A_in(Sum9_reg_wire),                             \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                 \n";
     radix16_pipe << "                 .rst_n(rst_n),                                    \n";
     radix16_pipe << "                 .clk(clk)                                         \n";
     radix16_pipe << "                ) ;		                                         \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output*10                                                        \n";
     radix16_pipe << "Sum16_out10 u_Sum16_out10(.S_out(Sum10_wire),                      \n";
     radix16_pipe << "                          .A0_in(RA0_in),                          \n";
     radix16_pipe << "			                .A1_in(RA1_in),                          \n";
     radix16_pipe << "			                .A2_in(RA2_in),                          \n";
     radix16_pipe << "			                .A3_in(RA3_in),                          \n";
     radix16_pipe << "			                .A4_in(RA4_in),                          \n";
     radix16_pipe << "			                .A5_in(RA5_in),                          \n";
     radix16_pipe << "			                .A6_in(RA6_in),                          \n";
     radix16_pipe << "			                .A7_in(RA7_in),                          \n";
     radix16_pipe << "			                .A8_in(RA8_in),                          \n";
     radix16_pipe << "			                .A9_in(RA9_in),                          \n";
     radix16_pipe << "			                .A10_in(RA10_in),                        \n";
     radix16_pipe << "			                .A11_in(RA11_in),                        \n";
     radix16_pipe << "			                .A12_in(RA12_in),                        \n";
     radix16_pipe << "			                .A13_in(RA13_in),                        \n";
     radix16_pipe << "			                .A14_in(RA14_in),                        \n";
     radix16_pipe << "			                .A15_in(RA15_in),                        \n";
     radix16_pipe << "                          .rst_n(rst_n),                           \n";
     radix16_pipe << "                          .clk(clk)                                \n";
     radix16_pipe << "                          ) ;                                      \n";
     radix16_pipe << "						                                             \n";
     radix16_pipe << "Mod192 u10_Mod192(.S_out(RA10_out),                                \n";
     radix16_pipe << "                  .A_in(Sum10_reg_wire),                           \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                \n";
     radix16_pipe << "                  .rst_n(rst_n),                                   \n";
     radix16_pipe << "                  .clk(clk)                                        \n";
     radix16_pipe << "                  ) ;		                                         \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output*11                                                        \n";
     radix16_pipe << "Sum16_out11 u_Sum16_out11(.S_out(Sum11_wire),                      \n";
     radix16_pipe << "                          .A0_in(RA0_in),                          \n";
     radix16_pipe << "			                .A1_in(RA1_in),                          \n";
     radix16_pipe << "			                .A2_in(RA2_in),                          \n";
     radix16_pipe << "			                .A3_in(RA3_in),                          \n";
     radix16_pipe << "			                .A4_in(RA4_in),                          \n";
     radix16_pipe << "			                .A5_in(RA5_in),                          \n";
     radix16_pipe << "			                .A6_in(RA6_in),                          \n";
     radix16_pipe << "			                .A7_in(RA7_in),                          \n";
     radix16_pipe << "			                .A8_in(RA8_in),                          \n";
     radix16_pipe << "			                .A9_in(RA9_in),                          \n";
     radix16_pipe << "			                .A10_in(RA10_in),                        \n";
     radix16_pipe << "			                .A11_in(RA11_in),                        \n";
     radix16_pipe << "			                .A12_in(RA12_in),                        \n";
     radix16_pipe << "			                .A13_in(RA13_in),                        \n";
     radix16_pipe << "			                .A14_in(RA14_in),                        \n";
     radix16_pipe << "			                .A15_in(RA15_in),                        \n";
     radix16_pipe << "                          .rst_n(rst_n),                           \n";
     radix16_pipe << "                          .clk(clk)                                \n";
     radix16_pipe << "                          ) ;	                                     \n";
     radix16_pipe << "						                                             \n";
     radix16_pipe << "Mod192 u11_Mod192(.S_out(RA11_out),                                \n";
     radix16_pipe << "                  .A_in(Sum11_reg_wire),                           \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                \n";
     radix16_pipe << "                  .rst_n(rst_n),                                   \n";
     radix16_pipe << "                  .clk(clk)                                        \n";
     radix16_pipe << "                  ) ;	                                             \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output*12                                                        \n";
     radix16_pipe << "Sum16_out12 u_Sum16_out12(.S_out(Sum12_wire),                      \n";
     radix16_pipe << "                          .A0_in(RA0_in),                          \n";
     radix16_pipe << "			                .A1_in(RA1_in),                          \n";
     radix16_pipe << "			                .A2_in(RA2_in),                          \n";
     radix16_pipe << "			                .A3_in(RA3_in),                          \n";
     radix16_pipe << "			                .A4_in(RA4_in),                          \n";
     radix16_pipe << "			                .A5_in(RA5_in),                          \n";
     radix16_pipe << "			                .A6_in(RA6_in),                          \n";
     radix16_pipe << "			                .A7_in(RA7_in),                          \n";
     radix16_pipe << "			                .A8_in(RA8_in),                          \n";
     radix16_pipe << "			                .A9_in(RA9_in),                          \n";
     radix16_pipe << "			                .A10_in(RA10_in),                        \n";
     radix16_pipe << "			                .A11_in(RA11_in),                        \n";
     radix16_pipe << "			                .A12_in(RA12_in),                        \n";
     radix16_pipe << "			                .A13_in(RA13_in),                        \n";
     radix16_pipe << "			                .A14_in(RA14_in),                        \n";
     radix16_pipe << "			                .A15_in(RA15_in),                        \n";
     radix16_pipe << "                          .rst_n(rst_n),                           \n";
     radix16_pipe << "                          .clk(clk)                                \n";
     radix16_pipe << "                          ) ;		                                 \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u12_Mod192(.S_out(RA12_out),                                \n";
     radix16_pipe << "                  .A_in(Sum12_reg_wire),                           \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                \n";
     radix16_pipe << "                  .rst_n(rst_n),                                   \n";
     radix16_pipe << "                  .clk(clk)                                        \n";
     radix16_pipe << "                  ) ;	                                             \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output*13                                                        \n";
     radix16_pipe << "Sum16_out13 u_Sum16_out13(.S_out(Sum13_wire),                      \n";
     radix16_pipe << "                          .A0_in(RA0_in),                          \n";
     radix16_pipe << "			                .A1_in(RA1_in),                          \n";
     radix16_pipe << "			                .A2_in(RA2_in),                          \n";
     radix16_pipe << "			                .A3_in(RA3_in),                          \n";
     radix16_pipe << "			                .A4_in(RA4_in),                          \n";
     radix16_pipe << "			                .A5_in(RA5_in),                          \n";
     radix16_pipe << "			                .A6_in(RA6_in),                          \n";
     radix16_pipe << "			                .A7_in(RA7_in),                          \n";
     radix16_pipe << "			                .A8_in(RA8_in),                          \n";
     radix16_pipe << "			                .A9_in(RA9_in),                          \n";
     radix16_pipe << "			                .A10_in(RA10_in),                        \n";
     radix16_pipe << "			                .A11_in(RA11_in),                        \n";
     radix16_pipe << "			                .A12_in(RA12_in),                        \n";
     radix16_pipe << "			                .A13_in(RA13_in),                        \n";
     radix16_pipe << "			                .A14_in(RA14_in),                        \n";
     radix16_pipe << "			                .A15_in(RA15_in),                        \n";
     radix16_pipe << "                          .rst_n(rst_n),                           \n";
     radix16_pipe << "                          .clk(clk)                                \n";
     radix16_pipe << "                          ) ;	                                     \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "Mod192 u13_Mod192(.S_out(RA13_out),                                \n";
     radix16_pipe << "                  .A_in(Sum13_reg_wire),                           \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                \n";
     radix16_pipe << "                  .rst_n(rst_n),                                   \n";
     radix16_pipe << "                  .clk(clk)                                        \n";
     radix16_pipe << "                  ) ;	                                             \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output*14                                                        \n";
     radix16_pipe << "Sum16_out14 u_Sum16_out14(.S_out(Sum14_wire),                      \n";
     radix16_pipe << "                          .A0_in(RA0_in),                          \n";
     radix16_pipe << "			                .A1_in(RA1_in),                          \n";
     radix16_pipe << "			                .A2_in(RA2_in),                          \n";
     radix16_pipe << "			                .A3_in(RA3_in),                          \n";
     radix16_pipe << "			                .A4_in(RA4_in),                          \n";
     radix16_pipe << "			                .A5_in(RA5_in),                          \n";
     radix16_pipe << "			                .A6_in(RA6_in),                          \n";
     radix16_pipe << "			                .A7_in(RA7_in),                          \n";
     radix16_pipe << "			                .A8_in(RA8_in),                          \n";
     radix16_pipe << "			                .A9_in(RA9_in),                          \n";
     radix16_pipe << "			                .A10_in(RA10_in),                        \n";
     radix16_pipe << "			                .A11_in(RA11_in),                        \n";
     radix16_pipe << "			                .A12_in(RA12_in),                        \n";
     radix16_pipe << "			                .A13_in(RA13_in),                        \n";
     radix16_pipe << "			                .A14_in(RA14_in),                        \n";
     radix16_pipe << "			                .A15_in(RA15_in),                        \n";
     radix16_pipe << "                          .rst_n(rst_n),                           \n";
     radix16_pipe << "                          .clk(clk)                                \n";
     radix16_pipe << "                          ) ;	                                     \n";
     radix16_pipe << "						                                             \n";
     radix16_pipe << "Mod192 u14_Mod192(.S_out(RA14_out),                                \n";
     radix16_pipe << "                  .A_in(Sum14_reg_wire),                           \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                \n";
     radix16_pipe << "                  .rst_n(rst_n),                                   \n";
     radix16_pipe << "                  .clk(clk)                                        \n";
     radix16_pipe << "                  ) ;	                                             \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//output*15                                                        \n";
     radix16_pipe << "Sum16_out15 u_Sum16_out15(.S_out(Sum15_wire),                      \n";
     radix16_pipe << "                          .A0_in(RA0_in),                          \n";
     radix16_pipe << "			                .A1_in(RA1_in),                          \n";
     radix16_pipe << "			                .A2_in(RA2_in),                          \n";
     radix16_pipe << "			                .A3_in(RA3_in),                          \n";
     radix16_pipe << "			                .A4_in(RA4_in),                          \n";
     radix16_pipe << "			                .A5_in(RA5_in),                          \n";
     radix16_pipe << "			                .A6_in(RA6_in),                          \n";
     radix16_pipe << "			                .A7_in(RA7_in),                          \n";
     radix16_pipe << "			                .A8_in(RA8_in),                          \n";
     radix16_pipe << "			                .A9_in(RA9_in),                          \n";
     radix16_pipe << "			                .A10_in(RA10_in),                        \n";
     radix16_pipe << "			                .A11_in(RA11_in),                        \n";
     radix16_pipe << "			                .A12_in(RA12_in),                        \n";
     radix16_pipe << "			                .A13_in(RA13_in),                        \n";
     radix16_pipe << "			                .A14_in(RA14_in),                        \n";
     radix16_pipe << "			                .A15_in(RA15_in),                        \n";
     radix16_pipe << "                          .rst_n(rst_n),                           \n";
     radix16_pipe << "                          .clk(clk)					             \n";
     radix16_pipe << "					      ) ;                                        \n";
     radix16_pipe << "					                                                 \n";
     radix16_pipe << "Mod192 u15_Mod192(.S_out(RA15_out),                                \n";
     radix16_pipe << "                  .A_in(Sum15_reg_wire),                           \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                \n";
     radix16_pipe << "                  .rst_n(rst_n),                                   \n";
     radix16_pipe << "                  .clk(clk)                                        \n";
     radix16_pipe << "                  ) ;                                              \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "//Pipeline Register                                                \n";
     radix16_pipe << "R16_PipeReg1 u_R16_PipeReg1(.A0_out(Sum0_reg_wire),                \n";
     radix16_pipe << "				              .A1_out(Sum1_reg_wire),                \n";
     radix16_pipe << "				              .A2_out(Sum2_reg_wire),                \n";
     radix16_pipe << "				              .A3_out(Sum3_reg_wire),                \n";
     radix16_pipe << "				              .A4_out(Sum4_reg_wire),                \n";
     radix16_pipe << "				              .A5_out(Sum5_reg_wire),                \n";
     radix16_pipe << "				              .A6_out(Sum6_reg_wire),                \n";
     radix16_pipe << "				              .A7_out(Sum7_reg_wire),                \n";
     radix16_pipe << "				              .A8_out(Sum8_reg_wire),                \n";
     radix16_pipe << "				              .A9_out(Sum9_reg_wire),                \n";
     radix16_pipe << "				              .A10_out(Sum10_reg_wire),              \n";
     radix16_pipe << "				              .A11_out(Sum11_reg_wire),              \n";
     radix16_pipe << "				              .A12_out(Sum12_reg_wire),              \n";
     radix16_pipe << "				              .A13_out(Sum13_reg_wire),              \n";
     radix16_pipe << "				              .A14_out(Sum14_reg_wire),              \n";
     radix16_pipe << "				              .A15_out(Sum15_reg_wire),              \n";
     radix16_pipe << "                            .A0_in(Sum0_wire),                     \n";
     radix16_pipe << "			                  .A1_in(Sum1_wire),                     \n";
     radix16_pipe << "			                  .A2_in(Sum2_wire),                     \n";
     radix16_pipe << "			                  .A3_in(Sum3_wire),                     \n";
     radix16_pipe << "			                  .A4_in(Sum4_wire),                     \n";
     radix16_pipe << "			                  .A5_in(Sum5_wire),                     \n";
     radix16_pipe << "			                  .A6_in(Sum6_wire),                     \n";
     radix16_pipe << "			                  .A7_in(Sum7_wire),                     \n";
     radix16_pipe << "			                  .A8_in(Sum8_wire),                     \n";
     radix16_pipe << "			                  .A9_in(Sum9_wire),                     \n";
     radix16_pipe << "			                  .A10_in(Sum10_wire),                   \n";
     radix16_pipe << "			                  .A11_in(Sum11_wire),                   \n";
     radix16_pipe << "			                  .A12_in(Sum12_wire),                   \n";
     radix16_pipe << "			                  .A13_in(Sum13_wire),                   \n";
     radix16_pipe << "			                  .A14_in(Sum14_wire),                   \n";
     radix16_pipe << "			                  .A15_in(Sum15_wire),                   \n";
     radix16_pipe << "                            .rst_n(rst_n),                         \n";
     radix16_pipe << "                            .clk(clk)                              \n";
     radix16_pipe << "                            ) ;				  				     \n";
     radix16_pipe << "                                                                   \n";
     radix16_pipe << "				                                                     \n";
     radix16_pipe << "endmodule                                                          \n";
     radix16_pipe.close();	 	
}

void Pipe::Radix16_Mixed_Radix_Pipe(std::string string_in){
	 std::ofstream radix16_pipe;
     std::string        string_buf = "/Radix16_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 radix16_pipe.open(ss.str());
     radix16_pipe << "`timescale 1 ns/1 ps                                                    \n";
     radix16_pipe << "module Radix16_Pipe(RA0_out,                                            \n";
     radix16_pipe << "			          RA1_out,                                            \n";
     radix16_pipe << "			          RA2_out,                                            \n";
     radix16_pipe << "			          RA3_out,                                            \n";
     radix16_pipe << "			          RA4_out,                                            \n";
     radix16_pipe << "			          RA5_out,                                            \n";
     radix16_pipe << "			          RA6_out,                                            \n";
     radix16_pipe << "			          RA7_out,                                            \n";
     radix16_pipe << "			          RA8_out,                                            \n";
     radix16_pipe << "			          RA9_out,                                            \n";
     radix16_pipe << "			          RA10_out,                                           \n";
     radix16_pipe << "			          RA11_out,                                           \n";
     radix16_pipe << "			          RA12_out,                                           \n";
     radix16_pipe << "			          RA13_out,                                           \n";
     radix16_pipe << "			          RA14_out,                                           \n";
     radix16_pipe << "			          RA15_out,                                           \n";
     radix16_pipe << "                    RA0_in,                                             \n";
     radix16_pipe << "			          RA1_in,                                             \n";
     radix16_pipe << "			          RA2_in,                                             \n";
     radix16_pipe << "			          RA3_in,                                             \n";
     radix16_pipe << "			          RA4_in,                                             \n";
     radix16_pipe << "			          RA5_in,                                             \n";
     radix16_pipe << "			          RA6_in,                                             \n";
     radix16_pipe << "			          RA7_in,                                             \n";
     radix16_pipe << "			          RA8_in,                                             \n";
     radix16_pipe << "			          RA9_in,                                             \n";
     radix16_pipe << "			          RA10_in,                                            \n";
     radix16_pipe << "			          RA11_in,                                            \n";
     radix16_pipe << "			          RA12_in,                                            \n";
     radix16_pipe << "			          RA13_in,                                            \n";
     radix16_pipe << "			          RA14_in,                                            \n";
     radix16_pipe << "			          RA15_in,                                            \n";
     radix16_pipe << "		              N_in,                                               \n";
     radix16_pipe << "		              BU_mode_sel,                                        \n";
     radix16_pipe << "		              BU_dc_sel,                                          \n";
     radix16_pipe << "                    rst_n,                                              \n";
     radix16_pipe << "                    clk                                                 \n";
     radix16_pipe << "                    ) ;                                                 \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "parameter P_WIDTH     = 64 ;                                            \n";
     radix16_pipe << "parameter DH_WIDTH    = 96 ;                                            \n";
     radix16_pipe << "parameter D_WIDTH     = 192 ;                                           \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA0_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA1_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA2_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA3_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA4_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA5_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA6_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA7_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA8_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA9_out ;                                           \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA10_out ;                                          \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA11_out ;                                          \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA12_out ;                                          \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA13_out ;                                          \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA14_out ;                                          \n";
     radix16_pipe << "output[P_WIDTH-1:0] RA15_out ;                                          \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA0_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA1_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA2_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA3_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA4_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA5_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA6_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA7_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA8_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA9_in ;                                            \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA10_in ;                                           \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA11_in ;                                           \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA12_in ;                                           \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA13_in ;                                           \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA14_in ;                                           \n";
     radix16_pipe << "input [P_WIDTH-1:0] RA15_in ;                                           \n";
     radix16_pipe << "input [P_WIDTH-1:0] N_in ;                                              \n";
     radix16_pipe << "input               BU_mode_sel;                                        \n";
     radix16_pipe << "input               BU_dc_sel;                                          \n";
     radix16_pipe << "input               rst_n ;                                             \n";
     radix16_pipe << "input               clk ;                                               \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "wire  [DH_WIDTH-1:0] Sum0_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum1_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum2_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum3_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum4_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum5_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum6_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum7_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum8_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum9_wire ;                                        \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum10_wire ;                                       \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum11_wire ;                                       \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum12_wire ;                                       \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum13_wire ;                                       \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum14_wire ;                                       \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum15_wire ;                                       \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "//origial wire                                                          \n";
     radix16_pipe << "wire  [DH_WIDTH-1:0] Sum0_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum1_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum2_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum3_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum4_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum5_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum6_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum7_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum8_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum9_reg_wire ;                                    \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum10_reg_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum11_reg_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum12_reg_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum13_reg_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum14_reg_wire ;                                   \n";
     radix16_pipe << "wire  [D_WIDTH-1:0]  Sum15_reg_wire ;                                   \n";
     radix16_pipe << "                                                                        \n";
     
     radix16_pipe << "wire  [P_WIDTH-1:0] RA1_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA2_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA3_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA4_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA5_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA6_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA7_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA9_out_wire;                                       \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA10_out_wire;                                      \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA11_out_wire;                                      \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA12_out_wire;                                      \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA13_out_wire;                                      \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA14_out_wire;                                      \n";
     radix16_pipe << "wire  [P_WIDTH-1:0] RA15_out_wire;                                      \n";	 
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "wire  [P_WIDTH-1:0]  N_D2_wire ;                                        \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "//Pipeline Register                                                     \n";
     radix16_pipe << "R16_NPipeReg1 u_R16_NPipeReg1(.N_D2_out(N_D2_wire),                     \n";
     radix16_pipe << "                              .N_in(N_in),                              \n";
     radix16_pipe << "                              .rst_n(rst_n),                            \n";
     radix16_pipe << "                              .clk(clk)                                 \n";
     radix16_pipe << "                              ) ;                                       \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "//output0                                                               \n";
     radix16_pipe << "Sum16_out0 u_Sum16_out0(.S_out(Sum0_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
     radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;                                             \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod96 u0_Mod96(.S_out(RA0_out),                                    \n";
     radix16_pipe << "               .A_in(Sum0_reg_wire),                                    \n";
     radix16_pipe << "		         .N_in(N_D2_wire),                                        \n";
     radix16_pipe << "               .rst_n(rst_n),                                           \n";
     radix16_pipe << "               .clk(clk)                                                \n";
     radix16_pipe << "               ) ;                                                      \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "//output1                                                               \n";
     radix16_pipe << "Sum16_out1 u_Sum16_out1(.S_out(Sum1_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;                                             \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u1_Mod192(.S_out(RA1_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum1_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;                                                     \n";
     radix16_pipe << "					                                                      \n";
     radix16_pipe << "//output2                                                               \n";
     radix16_pipe << "Sum16_out2 u_Sum16_out2(.S_out(Sum2_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;                                             \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u2_Mod192(.S_out(RA2_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum2_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;					                                  \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "//output3                                                               \n";
     radix16_pipe << "Sum16_out3 u_Sum16_out3(.S_out(Sum3_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;                                             \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u3_Mod192(.S_out(RA3_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum3_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;				                                      \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output4                                                               \n";
     radix16_pipe << "Sum16_out4 u_Sum16_out4(.S_out(Sum4_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;                                             \n";
     radix16_pipe << "					                                                      \n";
     radix16_pipe << "Mod192 u4_Mod192(.S_out(RA4_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum4_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;		                                              \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output5                                                               \n";
     radix16_pipe << "Sum16_out5 u_Sum16_out5(.S_out(Sum5_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;                                             \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u5_Mod192(.S_out(RA5_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum5_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;		                                              \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output6                                                               \n";
     radix16_pipe << "Sum16_out6 u_Sum16_out6(.S_out(Sum6_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;	                                          \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u6_Mod192(.S_out(RA6_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum6_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;		                                              \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output7                                                               \n";
     radix16_pipe << "Sum16_out7 u_Sum16_out7(.S_out(Sum7_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;                                             \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u7_Mod192(.S_out(RA7_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum7_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;		                                              \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output8                                                               \n";
     radix16_pipe << "Sum16_out8 u_Sum16_out8(.S_out(Sum8_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;	                                          \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u8_Mod192(.S_out(RA8_out),                                       \n";
     radix16_pipe << "                 .A_in(Sum8_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;		                                              \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output*9                                                              \n";
     radix16_pipe << "Sum16_out9 u_Sum16_out9(.S_out(Sum9_wire),                              \n";
     radix16_pipe << "                        .A0_in(RA0_in),                                 \n";
     radix16_pipe << "			              .A1_in(RA1_in),                                 \n";
     radix16_pipe << "			              .A2_in(RA2_in),                                 \n";
     radix16_pipe << "			              .A3_in(RA3_in),                                 \n";
     radix16_pipe << "			              .A4_in(RA4_in),                                 \n";
     radix16_pipe << "			              .A5_in(RA5_in),                                 \n";
     radix16_pipe << "			              .A6_in(RA6_in),                                 \n";
     radix16_pipe << "			              .A7_in(RA7_in),                                 \n";
     radix16_pipe << "			              .A8_in(RA8_in),                                 \n";
     radix16_pipe << "			              .A9_in(RA9_in),                                 \n";
     radix16_pipe << "			              .A10_in(RA10_in),                               \n";
     radix16_pipe << "			              .A11_in(RA11_in),                               \n";
     radix16_pipe << "			              .A12_in(RA12_in),                               \n";
     radix16_pipe << "			              .A13_in(RA13_in),                               \n";
     radix16_pipe << "			              .A14_in(RA14_in),                               \n";
     radix16_pipe << "			              .A15_in(RA15_in),                               \n";
	 radix16_pipe << "                        .BU_mode_sel_in(BU_mode_sel),                   \n";
     radix16_pipe << "                        .rst_n(rst_n),                                  \n";
     radix16_pipe << "                        .clk(clk)                                       \n";
     radix16_pipe << "                        ) ;	                                          \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u9_Mod192(.S_out(RA9_out_wire),                                  \n";
     radix16_pipe << "                 .A_in(Sum9_reg_wire),                                  \n";
     radix16_pipe << "		           .N_in(N_D2_wire),                                      \n";
     radix16_pipe << "                 .rst_n(rst_n),                                         \n";
     radix16_pipe << "                 .clk(clk)                                              \n";
     radix16_pipe << "                ) ;		                                              \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output*10                                                             \n";
     radix16_pipe << "Sum16_out10 u_Sum16_out10(.S_out(Sum10_wire),                           \n";
     radix16_pipe << "                          .A0_in(RA0_in),                               \n";
     radix16_pipe << "			                .A1_in(RA1_in),                               \n";
     radix16_pipe << "			                .A2_in(RA2_in),                               \n";
     radix16_pipe << "			                .A3_in(RA3_in),                               \n";
     radix16_pipe << "			                .A4_in(RA4_in),                               \n";
     radix16_pipe << "			                .A5_in(RA5_in),                               \n";
     radix16_pipe << "			                .A6_in(RA6_in),                               \n";
     radix16_pipe << "			                .A7_in(RA7_in),                               \n";
     radix16_pipe << "			                .A8_in(RA8_in),                               \n";
     radix16_pipe << "			                .A9_in(RA9_in),                               \n";
     radix16_pipe << "			                .A10_in(RA10_in),                             \n";
     radix16_pipe << "			                .A11_in(RA11_in),                             \n";
     radix16_pipe << "			                .A12_in(RA12_in),                             \n";
     radix16_pipe << "			                .A13_in(RA13_in),                             \n";
     radix16_pipe << "			                .A14_in(RA14_in),                             \n";
     radix16_pipe << "			                .A15_in(RA15_in),                             \n";
	 radix16_pipe << "                          .BU_mode_sel_in(BU_mode_sel),                 \n";
     radix16_pipe << "                          .rst_n(rst_n),                                \n";
     radix16_pipe << "                          .clk(clk)                                     \n";
     radix16_pipe << "                          ) ;                                           \n";
     radix16_pipe << "						                                                  \n";
     radix16_pipe << "Mod192 u10_Mod192(.S_out(RA10_out_wire),                                \n";
     radix16_pipe << "                  .A_in(Sum10_reg_wire),                                \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                     \n";
     radix16_pipe << "                  .rst_n(rst_n),                                        \n";
     radix16_pipe << "                  .clk(clk)                                             \n";
     radix16_pipe << "                  ) ;		                                              \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output*11                                                             \n";
     radix16_pipe << "Sum16_out11 u_Sum16_out11(.S_out(Sum11_wire),                           \n";
     radix16_pipe << "                          .A0_in(RA0_in),                               \n";
     radix16_pipe << "			                .A1_in(RA1_in),                               \n";
     radix16_pipe << "			                .A2_in(RA2_in),                               \n";
     radix16_pipe << "			                .A3_in(RA3_in),                               \n";
     radix16_pipe << "			                .A4_in(RA4_in),                               \n";
     radix16_pipe << "			                .A5_in(RA5_in),                               \n";
     radix16_pipe << "			                .A6_in(RA6_in),                               \n";
     radix16_pipe << "			                .A7_in(RA7_in),                               \n";
     radix16_pipe << "			                .A8_in(RA8_in),                               \n";
     radix16_pipe << "			                .A9_in(RA9_in),                               \n";
     radix16_pipe << "			                .A10_in(RA10_in),                             \n";
     radix16_pipe << "			                .A11_in(RA11_in),                             \n";
     radix16_pipe << "			                .A12_in(RA12_in),                             \n";
     radix16_pipe << "			                .A13_in(RA13_in),                             \n";
     radix16_pipe << "			                .A14_in(RA14_in),                             \n";
     radix16_pipe << "			                .A15_in(RA15_in),                             \n";
	 radix16_pipe << "                          .BU_mode_sel_in(BU_mode_sel),                 \n";
     radix16_pipe << "                          .rst_n(rst_n),                                \n";
     radix16_pipe << "                          .clk(clk)                                     \n";
     radix16_pipe << "                          ) ;	                                          \n";
     radix16_pipe << "						                                                  \n";
     radix16_pipe << "Mod192 u11_Mod192(.S_out(RA11_out_wire),                                \n";
     radix16_pipe << "                  .A_in(Sum11_reg_wire),                                \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                     \n";
     radix16_pipe << "                  .rst_n(rst_n),                                        \n";
     radix16_pipe << "                  .clk(clk)                                             \n";
     radix16_pipe << "                  ) ;	                                                  \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output*12                                                             \n";
     radix16_pipe << "Sum16_out12 u_Sum16_out12(.S_out(Sum12_wire),                           \n";
     radix16_pipe << "                          .A0_in(RA0_in),                               \n";
     radix16_pipe << "			                .A1_in(RA1_in),                               \n";
     radix16_pipe << "			                .A2_in(RA2_in),                               \n";
     radix16_pipe << "			                .A3_in(RA3_in),                               \n";
     radix16_pipe << "			                .A4_in(RA4_in),                               \n";
     radix16_pipe << "			                .A5_in(RA5_in),                               \n";
     radix16_pipe << "			                .A6_in(RA6_in),                               \n";
     radix16_pipe << "			                .A7_in(RA7_in),                               \n";
     radix16_pipe << "			                .A8_in(RA8_in),                               \n";
     radix16_pipe << "			                .A9_in(RA9_in),                               \n";
     radix16_pipe << "			                .A10_in(RA10_in),                             \n";
     radix16_pipe << "			                .A11_in(RA11_in),                             \n";
     radix16_pipe << "			                .A12_in(RA12_in),                             \n";
     radix16_pipe << "			                .A13_in(RA13_in),                             \n";
     radix16_pipe << "			                .A14_in(RA14_in),                             \n";
     radix16_pipe << "			                .A15_in(RA15_in),                             \n";
	 radix16_pipe << "                          .BU_mode_sel_in(BU_mode_sel),                 \n";
     radix16_pipe << "                          .rst_n(rst_n),                                \n";
     radix16_pipe << "                          .clk(clk)                                     \n";
     radix16_pipe << "                          ) ;		                                      \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u12_Mod192(.S_out(RA12_out_wire),                                \n";
     radix16_pipe << "                  .A_in(Sum12_reg_wire),                                \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                     \n";
     radix16_pipe << "                  .rst_n(rst_n),                                        \n";
     radix16_pipe << "                  .clk(clk)                                             \n";
     radix16_pipe << "                  ) ;	                                                  \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output*13                                                             \n";
     radix16_pipe << "Sum16_out13 u_Sum16_out13(.S_out(Sum13_wire),                           \n";
     radix16_pipe << "                          .A0_in(RA0_in),                               \n";
     radix16_pipe << "			                .A1_in(RA1_in),                               \n";
     radix16_pipe << "			                .A2_in(RA2_in),                               \n";
     radix16_pipe << "			                .A3_in(RA3_in),                               \n";
     radix16_pipe << "			                .A4_in(RA4_in),                               \n";
     radix16_pipe << "			                .A5_in(RA5_in),                               \n";
     radix16_pipe << "			                .A6_in(RA6_in),                               \n";
     radix16_pipe << "			                .A7_in(RA7_in),                               \n";
     radix16_pipe << "			                .A8_in(RA8_in),                               \n";
     radix16_pipe << "			                .A9_in(RA9_in),                               \n";
     radix16_pipe << "			                .A10_in(RA10_in),                             \n";
     radix16_pipe << "			                .A11_in(RA11_in),                             \n";
     radix16_pipe << "			                .A12_in(RA12_in),                             \n";
     radix16_pipe << "			                .A13_in(RA13_in),                             \n";
     radix16_pipe << "			                .A14_in(RA14_in),                             \n";
     radix16_pipe << "			                .A15_in(RA15_in),                             \n";
	 radix16_pipe << "                          .BU_mode_sel_in(BU_mode_sel),                 \n";
     radix16_pipe << "                          .rst_n(rst_n),                                \n";
     radix16_pipe << "                          .clk(clk)                                     \n";
     radix16_pipe << "                          ) ;	                                          \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "Mod192 u13_Mod192(.S_out(RA13_out_wire),                                \n";
     radix16_pipe << "                  .A_in(Sum13_reg_wire),                                \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                     \n";
     radix16_pipe << "                  .rst_n(rst_n),                                        \n";
     radix16_pipe << "                  .clk(clk)                                             \n";
     radix16_pipe << "                  ) ;	                                                  \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output*14                                                             \n";
     radix16_pipe << "Sum16_out14 u_Sum16_out14(.S_out(Sum14_wire),                           \n";
     radix16_pipe << "                          .A0_in(RA0_in),                               \n";
     radix16_pipe << "			                .A1_in(RA1_in),                               \n";
     radix16_pipe << "			                .A2_in(RA2_in),                               \n";
     radix16_pipe << "			                .A3_in(RA3_in),                               \n";
     radix16_pipe << "			                .A4_in(RA4_in),                               \n";
     radix16_pipe << "			                .A5_in(RA5_in),                               \n";
     radix16_pipe << "			                .A6_in(RA6_in),                               \n";
     radix16_pipe << "			                .A7_in(RA7_in),                               \n";
     radix16_pipe << "			                .A8_in(RA8_in),                               \n";
     radix16_pipe << "			                .A9_in(RA9_in),                               \n";
     radix16_pipe << "			                .A10_in(RA10_in),                             \n";
     radix16_pipe << "			                .A11_in(RA11_in),                             \n";
     radix16_pipe << "			                .A12_in(RA12_in),                             \n";
     radix16_pipe << "			                .A13_in(RA13_in),                             \n";
     radix16_pipe << "			                .A14_in(RA14_in),                             \n";
     radix16_pipe << "			                .A15_in(RA15_in),                             \n";
	 radix16_pipe << "                          .BU_mode_sel_in(BU_mode_sel),                 \n";
     radix16_pipe << "                          .rst_n(rst_n),                                \n";
     radix16_pipe << "                          .clk(clk)                                     \n";
     radix16_pipe << "                          ) ;	                                          \n";
     radix16_pipe << "						                                                  \n";
     radix16_pipe << "Mod192 u14_Mod192(.S_out(RA14_out_wire),                                \n";
     radix16_pipe << "                  .A_in(Sum14_reg_wire),                                \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                     \n";
     radix16_pipe << "                  .rst_n(rst_n),                                        \n";
     radix16_pipe << "                  .clk(clk)                                             \n";
     radix16_pipe << "                  ) ;	                                                  \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//output*15                                                             \n";
     radix16_pipe << "Sum16_out15 u_Sum16_out15(.S_out(Sum15_wire),                           \n";
     radix16_pipe << "                          .A0_in(RA0_in),                               \n";
     radix16_pipe << "			                .A1_in(RA1_in),                               \n";
     radix16_pipe << "			                .A2_in(RA2_in),                               \n";
     radix16_pipe << "			                .A3_in(RA3_in),                               \n";
     radix16_pipe << "			                .A4_in(RA4_in),                               \n";
     radix16_pipe << "			                .A5_in(RA5_in),                               \n";
     radix16_pipe << "			                .A6_in(RA6_in),                               \n";
     radix16_pipe << "			                .A7_in(RA7_in),                               \n";
     radix16_pipe << "			                .A8_in(RA8_in),                               \n";
     radix16_pipe << "			                .A9_in(RA9_in),                               \n";
     radix16_pipe << "			                .A10_in(RA10_in),                             \n";
     radix16_pipe << "			                .A11_in(RA11_in),                             \n";
     radix16_pipe << "			                .A12_in(RA12_in),                             \n";
     radix16_pipe << "			                .A13_in(RA13_in),                             \n";
     radix16_pipe << "			                .A14_in(RA14_in),                             \n";
     radix16_pipe << "			                .A15_in(RA15_in),                             \n";
	 radix16_pipe << "                          .BU_mode_sel_in(BU_mode_sel),                 \n";
     radix16_pipe << "                          .rst_n(rst_n),                                \n";
     radix16_pipe << "                          .clk(clk)					                  \n";
     radix16_pipe << "					      ) ;                                             \n";
     radix16_pipe << "					                                                      \n";
     radix16_pipe << "Mod192 u15_Mod192(.S_out(RA15_out_wire),                                \n";
     radix16_pipe << "                  .A_in(Sum15_reg_wire),                                \n";
     radix16_pipe << "		            .N_in(N_D2_wire),                                     \n";
     radix16_pipe << "                  .rst_n(rst_n),                                        \n";
     radix16_pipe << "                  .clk(clk)                                             \n";
     radix16_pipe << "                  ) ;                                                   \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "                                                                        \n";
	 unsigned long  Mixed_radix;
	 
	 Mixed_radix  = fft_point;
	 while( Mixed_radix % 16 == 0){
	     Mixed_radix = Mixed_radix / 16 ;
	 }	 
	 if(Mixed_radix == 2){
		radix16_pipe << "//Mux ,Edit date                                                        \n";
		
		radix16_pipe << "assign RA1_out  = (BU_dc_sel == 1'b1) ? RA15_out_wire : RA1_out_wire;   \n";
		radix16_pipe << "assign RA2_out  = (BU_dc_sel == 1'b1) ? RA14_out_wire : RA2_out_wire;   \n";
		radix16_pipe << "assign RA3_out  = (BU_dc_sel == 1'b1) ? RA13_out_wire : RA3_out_wire;   \n";
		radix16_pipe << "assign RA4_out  = (BU_dc_sel == 1'b1) ? RA12_out_wire : RA4_out_wire;   \n";
		radix16_pipe << "assign RA5_out  = (BU_dc_sel == 1'b1) ? RA11_out_wire : RA5_out_wire;   \n";
		radix16_pipe << "assign RA6_out  = (BU_dc_sel == 1'b1) ? RA10_out_wire : RA6_out_wire;   \n";
		radix16_pipe << "assign RA7_out  = (BU_dc_sel == 1'b1) ? RA9_out_wire  : RA7_out_wire;   \n";
		
		radix16_pipe << "assign RA9_out  = (BU_dc_sel == 1'b1) ? RA7_out_wire  : RA9_out_wire;   \n";
		radix16_pipe << "assign RA10_out = (BU_dc_sel == 1'b1) ? RA6_out_wire  : RA10_out_wire;  \n";
		radix16_pipe << "assign RA11_out = (BU_dc_sel == 1'b1) ? RA5_out_wire  : RA11_out_wire;  \n";
		radix16_pipe << "assign RA12_out = (BU_dc_sel == 1'b1) ? RA4_out_wire  : RA12_out_wire;  \n";
		radix16_pipe << "assign RA13_out = (BU_dc_sel == 1'b1) ? RA3_out_wire  : RA13_out_wire;  \n";
		radix16_pipe << "assign RA14_out = (BU_dc_sel == 1'b1) ? RA2_out_wire  : RA14_out_wire;  \n";
		radix16_pipe << "assign RA15_out = (BU_dc_sel == 1'b1) ? RA1_out_wire  : RA15_out_wire;  \n";
	 }
	 if(Mixed_radix == 4){
		radix16_pipe << "//Mux ,Edit date                                                        \n";
		radix16_pipe << "assign RA1_out  = (BU_dc_sel == 1'b1) ? RA13_out_wire : RA1_out_wire;   \n";
		radix16_pipe << "assign RA2_out  = (BU_dc_sel == 1'b1) ? RA14_out_wire : RA2_out_wire;   \n";
		radix16_pipe << "assign RA3_out  = (BU_dc_sel == 1'b1) ? RA15_out_wire : RA3_out_wire;   \n";
		radix16_pipe << "assign RA4_out  = (BU_dc_sel == 1'b1) ? RA12_out_wire : RA4_out_wire;   \n";
		radix16_pipe << "assign RA5_out  = (BU_dc_sel == 1'b1) ? RA9_out_wire  : RA5_out_wire;   \n";
		radix16_pipe << "assign RA6_out  = (BU_dc_sel == 1'b1) ? RA10_out_wire : RA6_out_wire;   \n";
		radix16_pipe << "assign RA7_out  = (BU_dc_sel == 1'b1) ? RA11_out_wire : RA7_out_wire;   \n";
		radix16_pipe << "assign RA9_out  = (BU_dc_sel == 1'b1) ? RA5_out_wire  : RA9_out_wire;   \n";
		radix16_pipe << "assign RA10_out = (BU_dc_sel == 1'b1) ? RA6_out_wire  : RA10_out_wire;  \n";
		radix16_pipe << "assign RA11_out = (BU_dc_sel == 1'b1) ? RA7_out_wire  : RA11_out_wire;  \n";
		radix16_pipe << "assign RA12_out = (BU_dc_sel == 1'b1) ? RA4_out_wire  : RA12_out_wire;  \n";
		radix16_pipe << "assign RA13_out = (BU_dc_sel == 1'b1) ? RA1_out_wire  : RA13_out_wire;  \n";
		radix16_pipe << "assign RA14_out = (BU_dc_sel == 1'b1) ? RA2_out_wire  : RA14_out_wire;  \n";
		radix16_pipe << "assign RA15_out = (BU_dc_sel == 1'b1) ? RA3_out_wire  : RA15_out_wire;  \n";
	 }	 
	 if(Mixed_radix == 8){
		radix16_pipe << "//Mux ,Edit date                                                        \n";
		radix16_pipe << "assign RA1_out  = (BU_dc_sel == 1'b1) ? RA9_out_wire  : RA1_out_wire;   \n";
		radix16_pipe << "assign RA2_out  = (BU_dc_sel == 1'b1) ? RA10_out_wire : RA2_out_wire;   \n";
		radix16_pipe << "assign RA3_out  = (BU_dc_sel == 1'b1) ? RA11_out_wire : RA3_out_wire;   \n";
		radix16_pipe << "assign RA4_out  = (BU_dc_sel == 1'b1) ? RA12_out_wire : RA4_out_wire;   \n";
		radix16_pipe << "assign RA5_out  = (BU_dc_sel == 1'b1) ? RA13_out_wire : RA5_out_wire;   \n";
		radix16_pipe << "assign RA6_out  = (BU_dc_sel == 1'b1) ? RA14_out_wire : RA6_out_wire;   \n";
		radix16_pipe << "assign RA7_out  = (BU_dc_sel == 1'b1) ? RA15_out_wire : RA7_out_wire;   \n";
		radix16_pipe << "assign RA9_out  = (BU_dc_sel == 1'b1) ? RA1_out_wire  : RA9_out_wire;   \n";
		radix16_pipe << "assign RA10_out = (BU_dc_sel == 1'b1) ? RA2_out_wire  : RA10_out_wire;  \n";
		radix16_pipe << "assign RA11_out = (BU_dc_sel == 1'b1) ? RA3_out_wire  : RA11_out_wire;  \n";
		radix16_pipe << "assign RA12_out = (BU_dc_sel == 1'b1) ? RA4_out_wire  : RA12_out_wire;  \n";
		radix16_pipe << "assign RA13_out = (BU_dc_sel == 1'b1) ? RA5_out_wire  : RA13_out_wire;  \n";
		radix16_pipe << "assign RA14_out = (BU_dc_sel == 1'b1) ? RA6_out_wire  : RA14_out_wire;  \n";
		radix16_pipe << "assign RA15_out = (BU_dc_sel == 1'b1) ? RA7_out_wire  : RA15_out_wire;  \n";
	 }	 	 
	 //------------------------------------------
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "//Pipeline Register                                                     \n";
     radix16_pipe << "R16_PipeReg1 u_R16_PipeReg1(.A0_out(Sum0_reg_wire),                     \n";
     radix16_pipe << "				              .A1_out(Sum1_reg_wire),                     \n";
     radix16_pipe << "				              .A2_out(Sum2_reg_wire),                     \n";
     radix16_pipe << "				              .A3_out(Sum3_reg_wire),                     \n";
     radix16_pipe << "				              .A4_out(Sum4_reg_wire),                     \n";
     radix16_pipe << "				              .A5_out(Sum5_reg_wire),                     \n";
     radix16_pipe << "				              .A6_out(Sum6_reg_wire),                     \n";
     radix16_pipe << "				              .A7_out(Sum7_reg_wire),                     \n";
     radix16_pipe << "				              .A8_out(Sum8_reg_wire),                     \n";
     radix16_pipe << "				              .A9_out(Sum9_reg_wire),                     \n";
     radix16_pipe << "				              .A10_out(Sum10_reg_wire),                   \n";
     radix16_pipe << "				              .A11_out(Sum11_reg_wire),                   \n";
     radix16_pipe << "				              .A12_out(Sum12_reg_wire),                   \n";
     radix16_pipe << "				              .A13_out(Sum13_reg_wire),                   \n";
     radix16_pipe << "				              .A14_out(Sum14_reg_wire),                   \n";
     radix16_pipe << "				              .A15_out(Sum15_reg_wire),                   \n";
     radix16_pipe << "                            .A0_in(Sum0_wire),                          \n";
     radix16_pipe << "			                  .A1_in(Sum1_wire),                          \n";
     radix16_pipe << "			                  .A2_in(Sum2_wire),                          \n";
     radix16_pipe << "			                  .A3_in(Sum3_wire),                          \n";
     radix16_pipe << "			                  .A4_in(Sum4_wire),                          \n";
     radix16_pipe << "			                  .A5_in(Sum5_wire),                          \n";
     radix16_pipe << "			                  .A6_in(Sum6_wire),                          \n";
     radix16_pipe << "			                  .A7_in(Sum7_wire),                          \n";
     radix16_pipe << "			                  .A8_in(Sum8_wire),                          \n";
     radix16_pipe << "			                  .A9_in(Sum9_wire),                          \n";
     radix16_pipe << "			                  .A10_in(Sum10_wire),                        \n";
     radix16_pipe << "			                  .A11_in(Sum11_wire),                        \n";
     radix16_pipe << "			                  .A12_in(Sum12_wire),                        \n";
     radix16_pipe << "			                  .A13_in(Sum13_wire),                        \n";
     radix16_pipe << "			                  .A14_in(Sum14_wire),                        \n";
     radix16_pipe << "			                  .A15_in(Sum15_wire),                        \n";
     radix16_pipe << "                            .rst_n(rst_n),                              \n";
     radix16_pipe << "                            .clk(clk)                                   \n";
     radix16_pipe << "                            ) ;				  				          \n";
     radix16_pipe << "                                                                        \n";
     radix16_pipe << "				                                                          \n";
     radix16_pipe << "endmodule                                                               \n";
     radix16_pipe.close();	 	
}

// Radix-2^(4) 
// Radix-2^(4) butterfly unit
void Pipe::BU_R16_S0_R2P(std::string string_in){
	 std::ofstream BU_S0;
     std::string         string_buf = "/BU_S0.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU_S0.open(ss.str());
     BU_S0 << "`timescale 1ns/1ps                           \n";
     BU_S0 << "module BU_S0(R0_out, //add                   \n";
     BU_S0 << "             R1_out, //sub                   \n";
     BU_S0 << "             R0_in,                          \n";
     BU_S0 << "             R1_in                           \n";
     BU_S0 << "             );                              \n";
     BU_S0 << "parameter D_WIDTH = 192;                     \n";
     BU_S0 << "parameter P_WIDTH = 64;                      \n";
     BU_S0 << "                                             \n";
     BU_S0 << "output [D_WIDTH-1:0] R0_out;                 \n";
     BU_S0 << "output [D_WIDTH-1:0] R1_out;                 \n";
     BU_S0 << "                                             \n";
     BU_S0 << "input  [P_WIDTH-1:0] R0_in;                  \n";
     BU_S0 << "input  [P_WIDTH-1:0] R1_in;                  \n";
     BU_S0 << "                                             \n";
     BU_S0 << "assign R0_out = R0_in + R1_in;               \n";
     BU_S0 << "assign R1_out = {32'd0,R1_in,32'd0,R0_in};   \n";
     BU_S0 << "                                             \n";
     BU_S0 << "endmodule                                    \n";
	 BU_S0.close();	
}
void Pipe::BU_R16_R2P(std::string string_in){
	 std::ofstream BU;
     std::string         string_buf = "/BU.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU.open(ss.str());
     BU << " `timescale 1ns/1ps                                                 \n";
     BU << " module BU(R0_out, //add                                            \n";
     BU << "           R1_out, //sub                                            \n";
     BU << "           R0_in,                                                   \n";
     BU << "           R1_in                                                    \n";
     BU << "           );                                                       \n";
     BU << " parameter D_WIDTH = 192;                                           \n";
     BU << "                                                                    \n";
     BU << " output [D_WIDTH-1:0] R0_out;                                       \n";
     BU << " output [D_WIDTH-1:0] R1_out;                                       \n";
     BU << " input  [D_WIDTH-1:0] R0_in;                                        \n";
     BU << " input  [D_WIDTH-1:0] R1_in;                                        \n";
     BU << "                                                                    \n";
     BU << " wire   [D_WIDTH:0]   Result_add;                                   \n";
     BU << " wire   [D_WIDTH:0]   Result_sub;                                   \n";
     BU << " wire   [D_WIDTH-1:0] R1_in_Complement;                             \n";
     BU << "                                                                    \n";
     BU << " assign R1_in_Complement = {R1_in[95:0],R1_in[191:96]};             \n";
     BU << " assign Result_add = R0_in + R1_in;                                 \n";
     BU << " assign Result_sub = R0_in + R1_in_Complement;                      \n";
     BU << " //output                                                           \n";
     BU << " assign R0_out = Result_add[D_WIDTH-1:0] + Result_add[D_WIDTH];     \n";
     BU << " assign R1_out = Result_sub[D_WIDTH-1:0] + Result_sub[D_WIDTH];     \n";
     BU << "                                                                    \n";
     BU << " endmodule                                                          \n";
	 BU.close();	
}
void Pipe::Pipe_R2P(std::string string_in){
	 std::ofstream Pipe;
     std::string        string_buf = "/Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 Pipe.open(ss.str());		
Pipe << "`timescale 1ns/1ps         \n";
Pipe << "module Pipe(R0_out,        \n";
Pipe << "             R1_out,       \n";
Pipe << "             R2_out,       \n";
Pipe << "             R3_out,       \n";
Pipe << "             R4_out,       \n";
Pipe << "             R5_out,       \n";
Pipe << "             R6_out,       \n";
Pipe << "             R7_out,       \n";
Pipe << "             R8_out,       \n";
Pipe << "             R9_out,       \n";
Pipe << "             R10_out,      \n";
Pipe << "             R11_out,      \n";
Pipe << "             R12_out,      \n";
Pipe << "             R13_out,      \n";
Pipe << "             R14_out,      \n";
Pipe << "             R15_out,      \n";
Pipe << "             R0_in,        \n";
Pipe << "             R1_in,        \n";
Pipe << "             R2_in,        \n";
Pipe << "             R3_in,        \n";
Pipe << "             R4_in,        \n";
Pipe << "             R5_in,        \n";
Pipe << "             R6_in,        \n";
Pipe << "             R7_in,        \n";
Pipe << "             R8_in,        \n";
Pipe << "             R9_in,        \n";
Pipe << "             R10_in,       \n";
Pipe << "             R11_in,       \n";
Pipe << "             R12_in,       \n";
Pipe << "             R13_in,       \n";
Pipe << "             R14_in,       \n";
Pipe << "             R15_in,       \n";
Pipe << "             clk,          \n";
Pipe << "             rst_n         \n";
Pipe << "            );             \n";
Pipe << " parameter D_WIDTH = 192;        \n"; 
Pipe << " parameter D_ZERO  = 192'd0;     \n";
Pipe << " output [D_WIDTH-1:0] R0_out;    \n";
Pipe << " output [D_WIDTH-1:0] R1_out;    \n";
Pipe << " output [D_WIDTH-1:0] R2_out;    \n";
Pipe << " output [D_WIDTH-1:0] R3_out;    \n";
Pipe << " output [D_WIDTH-1:0] R4_out;    \n";
Pipe << " output [D_WIDTH-1:0] R5_out;    \n";
Pipe << " output [D_WIDTH-1:0] R6_out;    \n";
Pipe << " output [D_WIDTH-1:0] R7_out;    \n";
Pipe << " output [D_WIDTH-1:0] R8_out;    \n";
Pipe << " output [D_WIDTH-1:0] R9_out;    \n";
Pipe << " output [D_WIDTH-1:0] R10_out;   \n";
Pipe << " output [D_WIDTH-1:0] R11_out;   \n";
Pipe << " output [D_WIDTH-1:0] R12_out;   \n";
Pipe << " output [D_WIDTH-1:0] R13_out;   \n";
Pipe << " output [D_WIDTH-1:0] R14_out;   \n";
Pipe << " output [D_WIDTH-1:0] R15_out;   \n";
Pipe << " input  [D_WIDTH-1:0] R0_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R1_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R2_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R3_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R4_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R5_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R6_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R7_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R8_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R9_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R10_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R11_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R12_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R13_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R14_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R15_in;    \n";
Pipe << " input                clk;       \n";
Pipe << " input                rst_n;     \n";
Pipe << "                                 \n";
Pipe << " reg [D_WIDTH-1:0] R0_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R1_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R2_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R3_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R4_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R5_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R6_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R7_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R8_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R9_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R10_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R11_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R12_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R13_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R14_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R15_out;	  \n";
Pipe << "                                 \n";
Pipe << " always@(posedge clk)begin       \n";
Pipe << "   if(~rst_n)begin               \n";
Pipe << "     R0_out  <= D_ZERO;          \n";
Pipe << "     R1_out  <= D_ZERO;          \n";
Pipe << "     R2_out  <= D_ZERO;          \n";
Pipe << "     R3_out  <= D_ZERO;          \n";
Pipe << "     R4_out  <= D_ZERO;          \n";
Pipe << "     R5_out  <= D_ZERO;          \n";
Pipe << "     R6_out  <= D_ZERO;          \n";
Pipe << "     R7_out  <= D_ZERO;          \n";
Pipe << "     R8_out  <= D_ZERO;          \n";
Pipe << "     R9_out  <= D_ZERO;          \n";
Pipe << "     R10_out <= D_ZERO;          \n";
Pipe << "     R11_out <= D_ZERO;          \n";
Pipe << "     R12_out <= D_ZERO;          \n";
Pipe << "     R13_out <= D_ZERO;          \n";
Pipe << "     R14_out <= D_ZERO;          \n";
Pipe << "     R15_out <= D_ZERO;          \n";
Pipe << "   end                           \n";
Pipe << "   else begin                    \n";
Pipe << "     R0_out  <= R0_in;           \n";
Pipe << "     R1_out  <= R1_in;           \n";
Pipe << "     R2_out  <= R2_in;           \n";
Pipe << "     R3_out  <= R3_in;           \n";
Pipe << "     R4_out  <= R4_in;           \n";
Pipe << "     R5_out  <= R5_in;           \n";
Pipe << "     R6_out  <= R6_in;           \n";
Pipe << "     R7_out  <= R7_in;           \n";
Pipe << "     R8_out  <= R8_in;           \n";
Pipe << "     R9_out  <= R9_in;           \n";
Pipe << "     R10_out <= R10_in;          \n";
Pipe << "     R11_out <= R11_in;          \n";
Pipe << "     R12_out <= R12_in;          \n";
Pipe << "     R13_out <= R13_in;          \n";
Pipe << "     R14_out <= R14_in;          \n";
Pipe << "     R15_out <= R15_in;          \n";
Pipe << "   end                           \n";
Pipe << " end                             \n";
Pipe << "                                 \n";
Pipe << "endmodule 	                      \n";
	 Pipe.close();
}
void Pipe::Radix16_Pipe_R2P_Mixed_Radix(std::string string_in){
	 std::ofstream Radix16_Pipe_R2P;
     std::string        string_buf = "/Radix16_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 Radix16_Pipe_R2P.open(ss.str());	
     
     int Mixed_radix_int;
	 double fft_point_doub;
     double fft_point_bit_doub;
	 double fft_point_r16_pow;
	 double fft_point_r16_pow_mult_by2;
	 double fft_point_r16_pow_mult_by4;
	 double fft_point_r16_pow_mult_by8;
     double radix_bit_doub;
	 double exp_num_doub;
	 
	 fft_point_doub     = (double)fft_point;
	 fft_point_bit_doub = log2(fft_point);
	 radix_bit_doub     = log2(r);
     exp_num_doub       = floor(fft_point_bit_doub/radix_bit_doub);
	 fft_point_r16_pow  = pow(16.0,exp_num_doub);
	 
	 fft_point_r16_pow_mult_by2 = fft_point_r16_pow * 2.0;
	 fft_point_r16_pow_mult_by4 = fft_point_r16_pow * 4.0;
	 fft_point_r16_pow_mult_by8 = fft_point_r16_pow * 8.0;
	 
	 if(fft_point_doub == fft_point_r16_pow_mult_by2) Mixed_radix_int = 2;
	 if(fft_point_doub == fft_point_r16_pow_mult_by4) Mixed_radix_int = 4;
	 if(fft_point_doub == fft_point_r16_pow_mult_by8) Mixed_radix_int = 8;
	 
	 //std::cout << "/-----------------------------------------/\n";
	 //std::cout << "fft_point_r16_pow ="<< fft_point_r16_pow <<"\n";
	 //std::cout << "fft_point_r16_pow_mult_by2 ="<< fft_point_r16_pow_mult_by2 <<"\n";
	 //std::cout << "fft_point_r16_pow_mult_by4 ="<< fft_point_r16_pow_mult_by4 <<"\n";
	 //std::cout << "fft_point_r16_pow_mult_by8 ="<< fft_point_r16_pow_mult_by8 <<"\n";
	 //std::cout << "radix-16 pipe R2P : mixed radix int ="<< Mixed_radix_int <<" \n";
	 //std::cout << "/-----------------------------------------/\n";
	 
Radix16_Pipe_R2P << "`timescale 1 ns/1 ps                                                     \n";
Radix16_Pipe_R2P << "//5-th pipeline                                                          \n";
Radix16_Pipe_R2P << "module Radix16_Pipe(RA0_out,                                             \n";
Radix16_Pipe_R2P << "			         RA1_out,                                             \n";
Radix16_Pipe_R2P << "			         RA2_out,                                             \n";
Radix16_Pipe_R2P << "			         RA3_out,                                             \n";
Radix16_Pipe_R2P << "			         RA4_out,                                             \n";
Radix16_Pipe_R2P << "			         RA5_out,                                             \n";
Radix16_Pipe_R2P << "			         RA6_out,                                             \n";
Radix16_Pipe_R2P << "			         RA7_out,                                             \n";
Radix16_Pipe_R2P << "			         RA8_out,                                             \n";
Radix16_Pipe_R2P << "			         RA9_out,                                             \n";
Radix16_Pipe_R2P << "			         RA10_out,                                            \n";
Radix16_Pipe_R2P << "			         RA11_out,                                            \n";
Radix16_Pipe_R2P << "			         RA12_out,                                            \n";
Radix16_Pipe_R2P << "			         RA13_out,                                            \n";
Radix16_Pipe_R2P << "			         RA14_out,                                            \n";
Radix16_Pipe_R2P << "			         RA15_out,                                            \n";
Radix16_Pipe_R2P << "                    RA0_in,                                              \n";
Radix16_Pipe_R2P << "			         RA1_in,                                              \n";
Radix16_Pipe_R2P << "			         RA2_in,                                              \n";
Radix16_Pipe_R2P << "			         RA3_in,                                              \n";
Radix16_Pipe_R2P << "			         RA4_in,                                              \n";
Radix16_Pipe_R2P << "			         RA5_in,                                              \n";
Radix16_Pipe_R2P << "			         RA6_in,                                              \n";
Radix16_Pipe_R2P << "			         RA7_in,                                              \n";
Radix16_Pipe_R2P << "			         RA8_in,                                              \n";
Radix16_Pipe_R2P << "			         RA9_in,                                              \n";
Radix16_Pipe_R2P << "			         RA10_in,                                             \n";
Radix16_Pipe_R2P << "			         RA11_in,                                             \n";
Radix16_Pipe_R2P << "			         RA12_in,                                             \n";
Radix16_Pipe_R2P << "			         RA13_in,                                             \n";
Radix16_Pipe_R2P << "			         RA14_in,                                             \n";
Radix16_Pipe_R2P << "			         RA15_in,                                             \n";
Radix16_Pipe_R2P << "		             N_in,                                                \n";
Radix16_Pipe_R2P << "		             BU_mode_sel,                                         \n";
Radix16_Pipe_R2P << "		             BU_dc_sel,                                           \n";
Radix16_Pipe_R2P << "                    rst_n,                                               \n";
Radix16_Pipe_R2P << "                    clk                                                  \n";
Radix16_Pipe_R2P << "                    ) ;                                                  \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "parameter P_WIDTH     = 64 ;                                             \n";
Radix16_Pipe_R2P << "parameter D_WIDTH     = 192 ;                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA0_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA1_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA2_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA3_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA4_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA5_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA6_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA7_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA8_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA9_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA10_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA11_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA12_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA13_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA14_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA15_out ;                                           \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA0_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA1_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA2_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA3_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA4_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA5_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA6_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA7_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA8_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA9_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA10_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA11_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA12_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA13_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA14_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA15_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] N_in ;                                               \n";
Radix16_Pipe_R2P << "input               BU_mode_sel ;                                        \n";
Radix16_Pipe_R2P << "input               BU_dc_sel ;                                          \n";
Radix16_Pipe_R2P << "input               rst_n ;                                              \n";
Radix16_Pipe_R2P << "input               clk ;                                                \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "//stage0                                                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_0;                                               \n";
Radix16_Pipe_R2P << " //---------------------                                                 \n";
Radix16_Pipe_R2P << " //STAGE 1                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_1;                                               \n";
Radix16_Pipe_R2P << " //STAGE 2                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_2;                                               \n";
Radix16_Pipe_R2P << " //STAGE 3                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_3;                                            	  \n";
Radix16_Pipe_R2P << " //stage4                                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_3_D;                                             \n";
Radix16_Pipe_R2P << " //Mod192_output                                                         \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R0_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R1_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R2_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R3_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R4_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R5_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R6_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R7_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R8_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R9_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R10_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R11_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R12_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R13_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R14_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R15_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "//stage 0                                                                \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_0(.R0_out(BU_S0_0_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_0_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA0_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA8_in)                                             \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_1(.R0_out(BU_S0_1_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_1_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA1_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA9_in)                                             \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_2(.R0_out(BU_S0_2_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_2_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA2_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA10_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_3(.R0_out(BU_S0_3_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_3_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA3_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA11_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_4(.R0_out(BU_S0_4_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_4_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA4_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA12_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_5(.R0_out(BU_S0_5_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_5_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA5_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA13_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_6(.R0_out(BU_S0_6_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_6_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA6_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA14_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_7(.R0_out(BU_S0_7_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_7_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA7_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA15_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "assign R0_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA0_in } : BU_S0_0_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R1_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA1_in } : BU_S0_1_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R2_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA2_in } : BU_S0_2_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R3_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA3_in } : BU_S0_3_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R4_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA4_in } : BU_S0_4_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R5_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA5_in } : BU_S0_5_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R6_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA6_in } : BU_S0_6_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R7_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA7_in } : BU_S0_7_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R8_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA8_in } : BU_S0_0_R1_out_wire; \n";
Radix16_Pipe_R2P << "assign R9_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA9_in } : {BU_S0_1_R1_out_wire[179:0],BU_S0_1_R1_out_wire[191:180]};\n";
Radix16_Pipe_R2P << "assign R10_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA10_in} : {BU_S0_2_R1_out_wire[167:0],BU_S0_2_R1_out_wire[191:168]};\n";
Radix16_Pipe_R2P << "assign R11_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA11_in} : {BU_S0_3_R1_out_wire[155:0],BU_S0_3_R1_out_wire[191:156]};\n";
Radix16_Pipe_R2P << "assign R12_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA12_in} : {BU_S0_4_R1_out_wire[143:0],BU_S0_4_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R13_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA13_in} : {BU_S0_5_R1_out_wire[131:0],BU_S0_5_R1_out_wire[191:132]};\n";
Radix16_Pipe_R2P << "assign R14_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA14_in} : {BU_S0_6_R1_out_wire[119:0],BU_S0_6_R1_out_wire[191:120]};\n";
Radix16_Pipe_R2P << "assign R15_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA15_in} : {BU_S0_7_R1_out_wire[107:0],BU_S0_7_R1_out_wire[191:108]};\n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_0(.R0_out(R0_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_0),                                         \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_0),                                         \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_0),                                         \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_0),                                         \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_0),                                         \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_0),                                         \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_0),                                         \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_0),                                         \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_0),                                         \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_0),                                         \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_0),                                       \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_0),                                       \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_0),                                       \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_0),                                       \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_0),                                       \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_0),                                       \n";
Radix16_Pipe_R2P << "                   .clk(clk),                                            \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)                                         \n";
Radix16_Pipe_R2P << "                   );                                                    \n";
Radix16_Pipe_R2P << " BU BU_S1_0(.R0_out(BU_S1_0_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_0_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R0_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R4_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_1(.R0_out(BU_S1_1_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_1_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R1_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R5_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_2(.R0_out(BU_S1_2_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_2_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R2_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R6_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_3(.R0_out(BU_S1_3_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_3_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R3_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R7_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_4(.R0_out(BU_S1_4_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_4_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R8_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R12_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_5(.R0_out(BU_S1_5_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_5_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R9_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R13_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_6(.R0_out(BU_S1_6_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_6_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R10_0_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R14_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_7(.R0_out(BU_S1_7_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_7_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R11_0_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R15_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";

if((Mixed_radix_int == 2)||(Mixed_radix_int == 4)) {
   Radix16_Pipe_R2P << "assign R0_1  = (BU_mode_sel == 1'b1) ? R0_0_D : BU_S1_0_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R1_1  = (BU_mode_sel == 1'b1) ? R1_0_D : BU_S1_1_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R2_1  = (BU_mode_sel == 1'b1) ? R2_0_D : BU_S1_2_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R3_1  = (BU_mode_sel == 1'b1) ? R3_0_D : BU_S1_3_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R4_1  = (BU_mode_sel == 1'b1) ? R4_0_D : BU_S1_0_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R5_1  = (BU_mode_sel == 1'b1) ? R5_0_D : {BU_S1_1_R1_out_wire[167:0],BU_S1_1_R1_out_wire[191:168]};\n";
   Radix16_Pipe_R2P << "assign R6_1  = (BU_mode_sel == 1'b1) ? R6_0_D : {BU_S1_2_R1_out_wire[143:0],BU_S1_2_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R7_1  = (BU_mode_sel == 1'b1) ? R7_0_D : {BU_S1_3_R1_out_wire[119:0],BU_S1_3_R1_out_wire[191:120]};\n";
   Radix16_Pipe_R2P << "assign R8_1  = (BU_mode_sel == 1'b1) ? R8_0_D : BU_S1_4_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R9_1  = (BU_mode_sel == 1'b1) ? R9_0_D : BU_S1_5_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R10_1 = (BU_mode_sel == 1'b1) ? R10_0_D : BU_S1_6_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R11_1 = (BU_mode_sel == 1'b1) ? R11_0_D : BU_S1_7_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R12_1 = (BU_mode_sel == 1'b1) ? R12_0_D : BU_S1_4_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R13_1 = (BU_mode_sel == 1'b1) ? R13_0_D : {BU_S1_5_R1_out_wire[167:0],BU_S1_5_R1_out_wire[191:168]};\n";
   Radix16_Pipe_R2P << "assign R14_1 = (BU_mode_sel == 1'b1) ? R14_0_D : {BU_S1_6_R1_out_wire[143:0],BU_S1_6_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R15_1 = (BU_mode_sel == 1'b1) ? R15_0_D : {BU_S1_7_R1_out_wire[119:0],BU_S1_7_R1_out_wire[191:120]};\n";
}else {	
   Radix16_Pipe_R2P << "assign R0_1  = BU_S1_0_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R1_1  = BU_S1_1_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R2_1  = BU_S1_2_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R3_1  = BU_S1_3_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R4_1  = BU_S1_0_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R5_1  = {BU_S1_1_R1_out_wire[167:0],BU_S1_1_R1_out_wire[191:168]};\n";
   Radix16_Pipe_R2P << "assign R6_1  = {BU_S1_2_R1_out_wire[143:0],BU_S1_2_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R7_1  = {BU_S1_3_R1_out_wire[119:0],BU_S1_3_R1_out_wire[191:120]};\n";
   Radix16_Pipe_R2P << "assign R8_1  = BU_S1_4_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R9_1  = BU_S1_5_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R10_1 = BU_S1_6_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R11_1 = BU_S1_7_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R12_1 = BU_S1_4_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R13_1 = {BU_S1_5_R1_out_wire[167:0],BU_S1_5_R1_out_wire[191:168]};\n";
   Radix16_Pipe_R2P << "assign R14_1 = {BU_S1_6_R1_out_wire[143:0],BU_S1_6_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R15_1 = {BU_S1_7_R1_out_wire[119:0],BU_S1_7_R1_out_wire[191:120]};\n"; 
}
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_1(.R0_out(R0_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_1),                                         \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_1),                                         \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_1),                                         \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_1),                                         \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_1),                                         \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_1),                                         \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_1),                                         \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_1),                                         \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_1),                                         \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_1),                                         \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_1),                                       \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_1),                                       \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_1),                                       \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_1),                                       \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_1),                                       \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_1),                                       \n";
Radix16_Pipe_R2P << "                   .clk(clk),                                            \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)                                         \n";
Radix16_Pipe_R2P << "                   );                                                    \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_0(.R0_out(BU_S2_0_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_0_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R0_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R2_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_1(.R0_out(BU_S2_1_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_1_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R1_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R3_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_2(.R0_out(BU_S2_2_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_2_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R4_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R6_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_3(.R0_out(BU_S2_3_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_3_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R5_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R7_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_4(.R0_out(BU_S2_4_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_4_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R8_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R10_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_5(.R0_out(BU_S2_5_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_5_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R9_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R11_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_6(.R0_out(BU_S2_6_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_6_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R12_1_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R14_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_7(.R0_out(BU_S2_7_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_7_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R13_1_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R15_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";

if(Mixed_radix_int == 2) {
   Radix16_Pipe_R2P << "assign R0_2  = (BU_mode_sel == 1'b1) ? R0_1_D  : BU_S2_0_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R1_2  = (BU_mode_sel == 1'b1) ? R1_1_D  : BU_S2_1_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R2_2  = (BU_mode_sel == 1'b1) ? R2_1_D  : BU_S2_0_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R3_2  = (BU_mode_sel == 1'b1) ? R3_1_D  : {BU_S2_1_R1_out_wire[143:0],BU_S2_1_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R4_2  = (BU_mode_sel == 1'b1) ? R4_1_D  : BU_S2_2_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R5_2  = (BU_mode_sel == 1'b1) ? R5_1_D  : BU_S2_3_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R6_2  = (BU_mode_sel == 1'b1) ? R6_1_D  : BU_S2_2_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R7_2  = (BU_mode_sel == 1'b1) ? R7_1_D  : {BU_S2_3_R1_out_wire[143:0],BU_S2_3_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R8_2  = (BU_mode_sel == 1'b1) ? R8_1_D  : BU_S2_4_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R9_2  = (BU_mode_sel == 1'b1) ? R9_1_D  : BU_S2_5_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R10_2 = (BU_mode_sel == 1'b1) ? R10_1_D : BU_S2_4_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R11_2 = (BU_mode_sel == 1'b1) ? R11_1_D : {BU_S2_5_R1_out_wire[143:0],BU_S2_5_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R12_2 = (BU_mode_sel == 1'b1) ? R12_1_D : BU_S2_6_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R13_2 = (BU_mode_sel == 1'b1) ? R13_1_D : BU_S2_7_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R14_2 = (BU_mode_sel == 1'b1) ? R14_1_D : BU_S2_6_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R15_2 = (BU_mode_sel == 1'b1) ? R15_1_D : {BU_S2_7_R1_out_wire[143:0],BU_S2_7_R1_out_wire[191:144]};\n";
}else {
   Radix16_Pipe_R2P << "assign R0_2  = BU_S2_0_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R1_2  = BU_S2_1_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R2_2  = BU_S2_0_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R3_2  = {BU_S2_1_R1_out_wire[143:0],BU_S2_1_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R4_2  = BU_S2_2_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R5_2  = BU_S2_3_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R6_2  = BU_S2_2_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R7_2  = {BU_S2_3_R1_out_wire[143:0],BU_S2_3_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R8_2  = BU_S2_4_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R9_2  = BU_S2_5_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R10_2 = BU_S2_4_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R11_2 = {BU_S2_5_R1_out_wire[143:0],BU_S2_5_R1_out_wire[191:144]};\n";
   Radix16_Pipe_R2P << "assign R12_2 = BU_S2_6_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R13_2 = BU_S2_7_R0_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R14_2 = BU_S2_6_R1_out_wire;                                      \n";
   Radix16_Pipe_R2P << "assign R15_2 = {BU_S2_7_R1_out_wire[143:0],BU_S2_7_R1_out_wire[191:144]};\n";
}
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_2(.R0_out(R0_2_D),          \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_2_D),          \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_2_D),          \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_2_D),          \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_2_D),          \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_2_D),          \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_2_D),          \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_2_D),          \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_2_D),          \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_2_D),          \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_2_D),        \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_2_D),        \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_2_D),        \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_2_D),        \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_2_D),        \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_2_D),        \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_2),             \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_2),             \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_2),             \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_2),             \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_2),             \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_2),             \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_2),             \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_2),             \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_2),             \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_2),             \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_2),           \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_2),           \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_2),           \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_2),           \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_2),           \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_2),           \n";
Radix16_Pipe_R2P << "                   .clk(clk),                \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)	          \n";
Radix16_Pipe_R2P << "                   );                        \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_0(.R0_out(R0_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R1_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R0_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R1_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_1(.R0_out(R2_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R3_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R2_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R3_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_2(.R0_out(R4_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R5_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R4_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R5_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_3(.R0_out(R6_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R7_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R6_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R7_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_4(.R0_out(R8_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R9_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R8_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R9_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_5(.R0_out(R10_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R11_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R10_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R11_2_D)                  \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_6(.R0_out(R12_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R13_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R12_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R13_2_D)                  \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_7(.R0_out(R14_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R15_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R14_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R15_2_D)                  \n";
Radix16_Pipe_R2P << "           );	                              \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_3(.R0_out(R0_3_D),          \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_3_D),          \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_3_D),          \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_3_D),          \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_3_D),          \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_3_D),          \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_3_D),          \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_3_D),          \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_3_D),          \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_3_D),          \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_3_D),        \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_3_D),        \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_3_D),        \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_3_D),        \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_3_D),        \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_3_D),        \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_3),             \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_3),             \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_3),             \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_3),             \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_3),             \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_3),             \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_3),             \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_3),             \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_3),             \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_3),             \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_3),           \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_3),           \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_3),           \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_3),           \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_3),           \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_3),           \n";
Radix16_Pipe_R2P << "                   .clk(clk),                \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)	          \n";
Radix16_Pipe_R2P << "                   );  	 	              \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R0_Mod192(.S_out(R0_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R0_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R1_Mod192(.S_out(R1_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R1_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R2_Mod192(.S_out(R2_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R2_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R3_Mod192(.S_out(R3_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R3_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R4_Mod192(.S_out(R4_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R4_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R5_Mod192(.S_out(R5_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R5_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R6_Mod192(.S_out(R6_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R6_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R7_Mod192(.S_out(R7_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R7_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R8_Mod192(.S_out(R8_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R8_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R9_Mod192(.S_out(R9_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R9_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R10_Mod192(.S_out(R10_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R10_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R11_Mod192(.S_out(R11_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R11_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R12_Mod192(.S_out(R12_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R12_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R13_Mod192(.S_out(R13_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R13_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );		                  \n";
Radix16_Pipe_R2P << " Mod192 R14_Mod192(.S_out(R14_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R14_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R15_Mod192(.S_out(R15_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R15_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );		                  \n";
//---------------------------------------------------------------------------
    if(Mixed_radix_int == 2){
       Radix16_Pipe_R2P << " assign RA0_out   = R0_Mod192_S_out;\n";
       Radix16_Pipe_R2P << " assign RA1_out   = (BU_dc_sel == 1'b1) ? R15_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R1_Mod192_S_out  : R8_Mod192_S_out;  \n";
       Radix16_Pipe_R2P << " assign RA2_out   = (BU_dc_sel == 1'b1) ? R14_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R2_Mod192_S_out  : R4_Mod192_S_out;  \n";
       Radix16_Pipe_R2P << " assign RA3_out   = (BU_dc_sel == 1'b1) ? R13_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R3_Mod192_S_out  : R12_Mod192_S_out; \n";
       Radix16_Pipe_R2P << " assign RA4_out   = (BU_dc_sel == 1'b1) ? R12_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R4_Mod192_S_out  : R2_Mod192_S_out;  \n";
       Radix16_Pipe_R2P << " assign RA5_out   = (BU_dc_sel == 1'b1) ? R11_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R5_Mod192_S_out  : R10_Mod192_S_out; \n";
       Radix16_Pipe_R2P << " assign RA6_out   = (BU_dc_sel == 1'b1) ? R10_Mod192_S_out : R6_Mod192_S_out;\n";
       Radix16_Pipe_R2P << " assign RA7_out   = (BU_dc_sel == 1'b1) ? R9_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R7_Mod192_S_out  : R14_Mod192_S_out; \n";
       Radix16_Pipe_R2P << " assign RA8_out   = ((BU_dc_sel == 1'b1) || (BU_mode_sel == 1'b1)) ? R8_Mod192_S_out  : R1_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA9_out   = (BU_dc_sel == 1'b1) ? R7_Mod192_S_out  : R9_Mod192_S_out;\n";
       Radix16_Pipe_R2P << " assign RA10_out  = (BU_dc_sel == 1'b1) ? R6_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R10_Mod192_S_out : R5_Mod192_S_out;  \n";
       Radix16_Pipe_R2P << " assign RA11_out  = (BU_dc_sel == 1'b1) ? R5_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R11_Mod192_S_out : R13_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA12_out  = (BU_dc_sel == 1'b1) ? R4_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R12_Mod192_S_out : R3_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA13_out  = (BU_dc_sel == 1'b1) ? R3_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R13_Mod192_S_out : R11_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA14_out  = (BU_dc_sel == 1'b1) ? R2_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R14_Mod192_S_out : R7_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA15_out  = (BU_dc_sel == 1'b1) ? R1_Mod192_S_out  : R15_Mod192_S_out;      \n";	
    }
    if(Mixed_radix_int == 4){
       Radix16_Pipe_R2P << " assign RA0_out   = R0_Mod192_S_out;\n";
       Radix16_Pipe_R2P << " assign RA1_out   = (BU_dc_sel == 1'b1) ? R13_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R2_Mod192_S_out : R8_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA2_out   = (BU_dc_sel == 1'b1) ? R14_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R1_Mod192_S_out : R4_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA3_out   = (BU_dc_sel == 1'b1) ? R15_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R3_Mod192_S_out : R12_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA4_out   = (BU_dc_sel == 1'b1) ? R12_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R4_Mod192_S_out : R2_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA5_out   = (BU_dc_sel == 1'b1) ? R9_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R6_Mod192_S_out : R10_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA6_out   = (BU_dc_sel == 1'b1) ? R10_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R5_Mod192_S_out : R6_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA7_out   = (BU_dc_sel == 1'b1) ? R11_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R7_Mod192_S_out : R14_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA8_out   = ((BU_dc_sel == 1'b1) || ( BU_mode_sel == 1'b1)) ? R8_Mod192_S_out : R1_Mod192_S_out;\n";
       Radix16_Pipe_R2P << " assign RA9_out   = (BU_dc_sel == 1'b1) ? R5_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R10_Mod192_S_out: R9_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA10_out  = (BU_dc_sel == 1'b1) ? R6_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R9_Mod192_S_out : R5_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA11_out  = (BU_dc_sel == 1'b1) ? R7_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R11_Mod192_S_out: R13_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA12_out  = (BU_dc_sel == 1'b1) ? R4_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R12_Mod192_S_out: R3_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA13_out  = (BU_dc_sel == 1'b1) ? R1_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R14_Mod192_S_out: R11_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA14_out  = (BU_dc_sel == 1'b1) ? R2_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R13_Mod192_S_out: R7_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA15_out  = (BU_dc_sel == 1'b1) ? R3_Mod192_S_out  : R15_Mod192_S_out;      \n";	
    }
    if(Mixed_radix_int == 8){
       Radix16_Pipe_R2P << " assign RA0_out   = R0_Mod192_S_out;\n";
       Radix16_Pipe_R2P << " assign RA1_out   = (BU_dc_sel == 1'b1) ? R12_Mod192_S_out : (BU_mode_sel == 1'b1) ? R4_Mod192_S_out  : R8_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA2_out   = (BU_dc_sel == 1'b1) ? R10_Mod192_S_out : (BU_mode_sel == 1'b1) ? R2_Mod192_S_out  : R4_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA3_out   = (BU_dc_sel == 1'b1) ? R14_Mod192_S_out : (BU_mode_sel == 1'b1) ? R6_Mod192_S_out  : R12_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA4_out   = (BU_dc_sel == 1'b1) ? R9_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R1_Mod192_S_out  : R2_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA5_out   = (BU_dc_sel == 1'b1) ? R13_Mod192_S_out : (BU_mode_sel == 1'b1) ? R5_Mod192_S_out  : R10_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA6_out   = (BU_dc_sel == 1'b1) ? R11_Mod192_S_out : (BU_mode_sel == 1'b1) ? R3_Mod192_S_out  : R6_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA7_out   = (BU_dc_sel == 1'b1) ? R15_Mod192_S_out : (BU_mode_sel == 1'b1) ? R7_Mod192_S_out  : R14_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA8_out   = ((BU_dc_sel == 1'b1) || (BU_mode_sel == 1'b1)) ? R8_Mod192_S_out  : R1_Mod192_S_out;\n";
       Radix16_Pipe_R2P << " assign RA9_out   = (BU_dc_sel == 1'b1) ? R4_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R12_Mod192_S_out : R9_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA10_out  = (BU_dc_sel == 1'b1) ? R2_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R10_Mod192_S_out : R5_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA11_out  = (BU_dc_sel == 1'b1) ? R6_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R14_Mod192_S_out : R13_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA12_out  = (BU_dc_sel == 1'b1) ? R1_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R9_Mod192_S_out  : R3_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA13_out  = (BU_dc_sel == 1'b1) ? R5_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R13_Mod192_S_out : R11_Mod192_S_out;      \n";
       Radix16_Pipe_R2P << " assign RA14_out  = (BU_dc_sel == 1'b1) ? R3_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R11_Mod192_S_out : R7_Mod192_S_out;       \n";
       Radix16_Pipe_R2P << " assign RA15_out  = (BU_dc_sel == 1'b1) ? R7_Mod192_S_out  : R15_Mod192_S_out;      \n";	
    }
Radix16_Pipe_R2P << " \n";
Radix16_Pipe_R2P << "endmodule                                  \n";
	
	 Radix16_Pipe_R2P.close();
}
void Pipe::Radix16_Pipe_R2P(std::string string_in){
	 std::ofstream Radix16_Pipe_R2P;
     std::string        string_buf = "/Radix16_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 Radix16_Pipe_R2P.open(ss.str());		
Radix16_Pipe_R2P << "`timescale 1 ns/1 ps                                                     \n";
Radix16_Pipe_R2P << "//5-th pipeline                                                          \n";
Radix16_Pipe_R2P << "module Radix16_Pipe(RA0_out,                                             \n";
Radix16_Pipe_R2P << "			        RA1_out,                                              \n";
Radix16_Pipe_R2P << "			        RA2_out,                                              \n";
Radix16_Pipe_R2P << "			        RA3_out,                                              \n";
Radix16_Pipe_R2P << "			        RA4_out,                                              \n";
Radix16_Pipe_R2P << "			        RA5_out,                                              \n";
Radix16_Pipe_R2P << "			        RA6_out,                                              \n";
Radix16_Pipe_R2P << "			        RA7_out,                                              \n";
Radix16_Pipe_R2P << "			        RA8_out,                                              \n";
Radix16_Pipe_R2P << "			        RA9_out,                                              \n";
Radix16_Pipe_R2P << "			        RA10_out,                                             \n";
Radix16_Pipe_R2P << "			        RA11_out,                                             \n";
Radix16_Pipe_R2P << "			        RA12_out,                                             \n";
Radix16_Pipe_R2P << "			        RA13_out,                                             \n";
Radix16_Pipe_R2P << "			        RA14_out,                                             \n";
Radix16_Pipe_R2P << "			        RA15_out,                                             \n";
Radix16_Pipe_R2P << "                    RA0_in,                                              \n";
Radix16_Pipe_R2P << "			        RA1_in,                                               \n";
Radix16_Pipe_R2P << "			        RA2_in,                                               \n";
Radix16_Pipe_R2P << "			        RA3_in,                                               \n";
Radix16_Pipe_R2P << "			        RA4_in,                                               \n";
Radix16_Pipe_R2P << "			        RA5_in,                                               \n";
Radix16_Pipe_R2P << "			        RA6_in,                                               \n";
Radix16_Pipe_R2P << "			        RA7_in,                                               \n";
Radix16_Pipe_R2P << "			        RA8_in,                                               \n";
Radix16_Pipe_R2P << "			        RA9_in,                                               \n";
Radix16_Pipe_R2P << "			        RA10_in,                                              \n";
Radix16_Pipe_R2P << "			        RA11_in,                                              \n";
Radix16_Pipe_R2P << "			        RA12_in,                                              \n";
Radix16_Pipe_R2P << "			        RA13_in,                                              \n";
Radix16_Pipe_R2P << "			        RA14_in,                                              \n";
Radix16_Pipe_R2P << "			        RA15_in,                                              \n";
Radix16_Pipe_R2P << "		            N_in,                                                 \n";
Radix16_Pipe_R2P << "                    rst_n,                                               \n";
Radix16_Pipe_R2P << "                    clk                                                  \n";
Radix16_Pipe_R2P << "                    ) ;                                                  \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "parameter P_WIDTH     = 64 ;                                             \n";
Radix16_Pipe_R2P << "parameter D_WIDTH     = 192 ;                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA0_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA1_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA2_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA3_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA4_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA5_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA6_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA7_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA8_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA9_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA10_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA11_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA12_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA13_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA14_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA15_out ;                                           \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA0_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA1_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA2_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA3_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA4_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA5_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA6_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA7_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA8_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA9_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA10_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA11_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA12_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA13_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA14_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA15_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] N_in ;                                               \n";
Radix16_Pipe_R2P << "input               rst_n ;                                              \n";
Radix16_Pipe_R2P << "input               clk ;                                                \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "//stage0                                                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_0;                                               \n";
Radix16_Pipe_R2P << " //---------------------                                                 \n";
Radix16_Pipe_R2P << " //STAGE 1                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_1;                                               \n";
Radix16_Pipe_R2P << " //STAGE 2                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_2;                                               \n";
Radix16_Pipe_R2P << " //STAGE 3                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_3;                                            	  \n";
Radix16_Pipe_R2P << " //stage4                                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_3_D;                                             \n";
Radix16_Pipe_R2P << "//stage 0                                                                \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_0(.R0_out(BU_S0_0_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_0_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA0_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA8_in)                                             \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_1(.R0_out(BU_S0_1_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_1_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA1_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA9_in)                                             \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_2(.R0_out(BU_S0_2_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_2_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA2_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA10_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_3(.R0_out(BU_S0_3_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_3_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA3_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA11_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_4(.R0_out(BU_S0_4_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_4_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA4_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA12_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_5(.R0_out(BU_S0_5_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_5_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA5_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA13_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_6(.R0_out(BU_S0_6_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_6_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA6_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA14_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_7(.R0_out(BU_S0_7_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_7_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA7_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA15_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "assign R0_0  = BU_S0_0_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R1_0  = BU_S0_1_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R2_0  = BU_S0_2_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R3_0  = BU_S0_3_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R4_0  = BU_S0_4_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R5_0  = BU_S0_5_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R6_0  = BU_S0_6_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R7_0  = BU_S0_7_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R8_0  = BU_S0_0_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R9_0  = {BU_S0_1_R1_out_wire[179:0],BU_S0_1_R1_out_wire[191:180]};\n";
Radix16_Pipe_R2P << "assign R10_0 = {BU_S0_2_R1_out_wire[167:0],BU_S0_2_R1_out_wire[191:168]};\n";
Radix16_Pipe_R2P << "assign R11_0 = {BU_S0_3_R1_out_wire[155:0],BU_S0_3_R1_out_wire[191:156]};\n";
Radix16_Pipe_R2P << "assign R12_0 = {BU_S0_4_R1_out_wire[143:0],BU_S0_4_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R13_0 = {BU_S0_5_R1_out_wire[131:0],BU_S0_5_R1_out_wire[191:132]};\n";
Radix16_Pipe_R2P << "assign R14_0 = {BU_S0_6_R1_out_wire[119:0],BU_S0_6_R1_out_wire[191:120]};\n";
Radix16_Pipe_R2P << "assign R15_0 = {BU_S0_7_R1_out_wire[107:0],BU_S0_7_R1_out_wire[191:108]};\n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_0(.R0_out(R0_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_0),                                         \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_0),                                         \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_0),                                         \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_0),                                         \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_0),                                         \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_0),                                         \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_0),                                         \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_0),                                         \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_0),                                         \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_0),                                         \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_0),                                       \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_0),                                       \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_0),                                       \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_0),                                       \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_0),                                       \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_0),                                       \n";
Radix16_Pipe_R2P << "                   .clk(clk),                                            \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)                                         \n";
Radix16_Pipe_R2P << "                   );                                                    \n";
Radix16_Pipe_R2P << " BU BU_S1_0(.R0_out(BU_S1_0_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_0_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R0_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R4_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_1(.R0_out(BU_S1_1_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_1_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R1_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R5_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_2(.R0_out(BU_S1_2_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_2_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R2_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R6_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_3(.R0_out(BU_S1_3_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_3_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R3_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R7_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_4(.R0_out(BU_S1_4_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_4_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R8_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R12_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_5(.R0_out(BU_S1_5_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_5_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R9_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R13_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_6(.R0_out(BU_S1_6_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_6_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R10_0_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R14_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_7(.R0_out(BU_S1_7_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_7_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R11_0_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R15_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "assign R0_1  = BU_S1_0_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R1_1  = BU_S1_1_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R2_1  = BU_S1_2_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R3_1  = BU_S1_3_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R4_1  = BU_S1_0_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R5_1  = {BU_S1_1_R1_out_wire[167:0],BU_S1_1_R1_out_wire[191:168]};\n";
Radix16_Pipe_R2P << "assign R6_1  = {BU_S1_2_R1_out_wire[143:0],BU_S1_2_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R7_1  = {BU_S1_3_R1_out_wire[119:0],BU_S1_3_R1_out_wire[191:120]};\n";
Radix16_Pipe_R2P << "assign R8_1  = BU_S1_4_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R9_1  = BU_S1_5_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R10_1 = BU_S1_6_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R11_1 = BU_S1_7_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R12_1 = BU_S1_4_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R13_1 = {BU_S1_5_R1_out_wire[167:0],BU_S1_5_R1_out_wire[191:168]};\n";
Radix16_Pipe_R2P << "assign R14_1 = {BU_S1_6_R1_out_wire[143:0],BU_S1_6_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R15_1 = {BU_S1_7_R1_out_wire[119:0],BU_S1_7_R1_out_wire[191:120]};\n"; 
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_1(.R0_out(R0_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_1),                                         \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_1),                                         \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_1),                                         \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_1),                                         \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_1),                                         \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_1),                                         \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_1),                                         \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_1),                                         \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_1),                                         \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_1),                                         \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_1),                                       \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_1),                                       \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_1),                                       \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_1),                                       \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_1),                                       \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_1),                                       \n";
Radix16_Pipe_R2P << "                   .clk(clk),                                            \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)                                         \n";
Radix16_Pipe_R2P << "                   );                                                    \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_0(.R0_out(BU_S2_0_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_0_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R0_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R2_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_1(.R0_out(BU_S2_1_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_1_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R1_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R3_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_2(.R0_out(BU_S2_2_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_2_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R4_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R6_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_3(.R0_out(BU_S2_3_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_3_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R5_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R7_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_4(.R0_out(BU_S2_4_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_4_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R8_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R10_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_5(.R0_out(BU_S2_5_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_5_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R9_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R11_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_6(.R0_out(BU_S2_6_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_6_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R12_1_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R14_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_7(.R0_out(BU_S2_7_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_7_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R13_1_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R15_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "assign R0_2  = BU_S2_0_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R1_2  = BU_S2_1_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R2_2  = BU_S2_0_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R3_2  = {BU_S2_1_R1_out_wire[143:0],BU_S2_1_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R4_2  = BU_S2_2_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R5_2  = BU_S2_3_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R6_2  = BU_S2_2_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R7_2  = {BU_S2_3_R1_out_wire[143:0],BU_S2_3_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R8_2  = BU_S2_4_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R9_2  = BU_S2_5_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R10_2 = BU_S2_4_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R11_2 = {BU_S2_5_R1_out_wire[143:0],BU_S2_5_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R12_2 = BU_S2_6_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R13_2 = BU_S2_7_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R14_2 = BU_S2_6_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R15_2 = {BU_S2_7_R1_out_wire[143:0],BU_S2_7_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_2(.R0_out(R0_2_D),          \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_2_D),          \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_2_D),          \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_2_D),          \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_2_D),          \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_2_D),          \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_2_D),          \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_2_D),          \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_2_D),          \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_2_D),          \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_2_D),        \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_2_D),        \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_2_D),        \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_2_D),        \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_2_D),        \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_2_D),        \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_2),             \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_2),             \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_2),             \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_2),             \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_2),             \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_2),             \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_2),             \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_2),             \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_2),             \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_2),             \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_2),           \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_2),           \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_2),           \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_2),           \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_2),           \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_2),           \n";
Radix16_Pipe_R2P << "                   .clk(clk),                \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)	          \n";
Radix16_Pipe_R2P << "                   );                        \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_0(.R0_out(R0_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R1_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R0_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R1_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_1(.R0_out(R2_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R3_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R2_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R3_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_2(.R0_out(R4_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R5_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R4_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R5_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_3(.R0_out(R6_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R7_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R6_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R7_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_4(.R0_out(R8_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R9_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R8_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R9_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_5(.R0_out(R10_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R11_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R10_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R11_2_D)                  \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_6(.R0_out(R12_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R13_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R12_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R13_2_D)                  \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_7(.R0_out(R14_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R15_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R14_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R15_2_D)                  \n";
Radix16_Pipe_R2P << "           );	                              \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_3(.R0_out(R0_3_D),          \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_3_D),          \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_3_D),          \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_3_D),          \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_3_D),          \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_3_D),          \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_3_D),          \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_3_D),          \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_3_D),          \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_3_D),          \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_3_D),        \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_3_D),        \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_3_D),        \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_3_D),        \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_3_D),        \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_3_D),        \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_3),             \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_3),             \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_3),             \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_3),             \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_3),             \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_3),             \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_3),             \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_3),             \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_3),             \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_3),             \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_3),           \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_3),           \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_3),           \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_3),           \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_3),           \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_3),           \n";
Radix16_Pipe_R2P << "                   .clk(clk),                \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)	          \n";
Radix16_Pipe_R2P << "                   );  	 	              \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R0_Mod192(.S_out(RA0_out),           \n";
Radix16_Pipe_R2P << "                  .A_in(R0_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R1_Mod192(.S_out(RA8_out),           \n";
Radix16_Pipe_R2P << "                  .A_in(R1_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R2_Mod192(.S_out(RA4_out),           \n";
Radix16_Pipe_R2P << "                  .A_in(R2_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R3_Mod192(.S_out(RA12_out),          \n";
Radix16_Pipe_R2P << "                  .A_in(R3_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R4_Mod192(.S_out(RA2_out),           \n";
Radix16_Pipe_R2P << "                  .A_in(R4_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R5_Mod192(.S_out(RA10_out),          \n";
Radix16_Pipe_R2P << "                  .A_in(R5_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R6_Mod192(.S_out(RA6_out),           \n";
Radix16_Pipe_R2P << "                  .A_in(R6_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R7_Mod192(.S_out(RA14_out),          \n";
Radix16_Pipe_R2P << "                  .A_in(R7_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R8_Mod192(.S_out(RA1_out),           \n";
Radix16_Pipe_R2P << "                  .A_in(R8_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R9_Mod192(.S_out(RA9_out),           \n";
Radix16_Pipe_R2P << "                  .A_in(R9_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R10_Mod192(.S_out(RA5_out),          \n";
Radix16_Pipe_R2P << "                  .A_in(R10_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R11_Mod192(.S_out(RA13_out),         \n";
Radix16_Pipe_R2P << "                  .A_in(R11_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R12_Mod192(.S_out(RA3_out),          \n";
Radix16_Pipe_R2P << "                  .A_in(R12_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R13_Mod192(.S_out(RA11_out),         \n";
Radix16_Pipe_R2P << "                  .A_in(R13_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );		                  \n";
Radix16_Pipe_R2P << " Mod192 R14_Mod192(.S_out(RA7_out),          \n";
Radix16_Pipe_R2P << "                  .A_in(R14_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R15_Mod192(.S_out(RA15_out),         \n";
Radix16_Pipe_R2P << "                  .A_in(R15_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );		                  \n";
Radix16_Pipe_R2P << "endmodule                                    \n";              
	
	 Radix16_Pipe_R2P.close();
}
void Pipe::TWIpipe_r16_R2P(std::string string_in){
	 std::ofstream TWIpipe_r16_R2P;
     std::string        string_buf = "/TWIpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 TWIpipe_r16_R2P.open(ss.str());	
TWIpipe_r16_R2P << " //=========================================                         \n";
TWIpipe_r16_R2P << " //Date:2021/04/05                                                   \n";
TWIpipe_r16_R2P << " //writer:shiyong                                                    \n";
TWIpipe_r16_R2P << " //note: bn ank ma pipline                                           \n";
TWIpipe_r16_R2P << " //      FFT type of m-th tiwiddle factor. m-th cyclotomic polynomial\n";
TWIpipe_r16_R2P << " //========================================                          \n";
TWIpipe_r16_R2P << " `timescale 1 ns/1 ps                                                \n";
TWIpipe_r16_R2P << " module TWIpipe(                                                     \n";
TWIpipe_r16_R2P << "     BN_out,                                                         \n";
TWIpipe_r16_R2P << "     MA_out,                                                         \n";
TWIpipe_r16_R2P << " 	TWIradix0_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix1_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix2_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix3_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix4_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix5_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix6_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix7_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix8_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix9_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix10_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix11_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix12_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix13_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix14_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix15_o,                                                    \n";
TWIpipe_r16_R2P << "     BN_in,                                                          \n";
TWIpipe_r16_R2P << "     MA_in,                                                          \n";
TWIpipe_r16_R2P << " 	TWIradix0_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix1_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix2_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix3_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix4_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix5_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix6_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix7_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix8_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix9_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix10_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix11_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix12_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix13_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix14_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix15_i,                                                    \n";
TWIpipe_r16_R2P << " 	rst_n,                                                           \n";
TWIpipe_r16_R2P << "     clk                                                             \n";
TWIpipe_r16_R2P << " );                                                                  \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " parameter A_WIDTH = " << addr_width << ";                                         \n";
TWIpipe_r16_R2P << " parameter A_ZERO  = " << addr_width << "'b0;                                      \n";
TWIpipe_r16_R2P << " parameter P_WIDTH = 64;                                             \n";
TWIpipe_r16_R2P << " parameter P_ZERO  = 64'd0;                                          \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " output [A_WIDTH-1:0] MA_out;                                        \n";
TWIpipe_r16_R2P << " output               BN_out;                                        \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix0_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix1_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix2_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix3_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix4_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix5_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix6_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix7_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix8_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix9_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix10_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix11_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix12_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix13_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix14_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix15_o;                                   \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " input  [A_WIDTH-1:0] MA_in;                                         \n";
TWIpipe_r16_R2P << " input                BN_in;                                         \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix0_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix1_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix2_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix3_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix4_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix5_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix6_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix7_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix8_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix9_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix10_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix11_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix12_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix13_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix14_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix15_i;                                   \n";
TWIpipe_r16_R2P << " input                rst_n;                                         \n";
TWIpipe_r16_R2P << " input                clk;                                           \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_out;                                          \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg0;                                         \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg1;                                         \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg2;                                         \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg3;                                         \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " reg                BN_out;                                          \n";
TWIpipe_r16_R2P << " reg                BN_reg0;                                         \n";
TWIpipe_r16_R2P << " reg                BN_reg1;                                         \n";
TWIpipe_r16_R2P << " //---------------------------------                                 \n";   
TWIpipe_r16_R2P << " reg                BN_reg2;                                         \n";
TWIpipe_r16_R2P << " reg                BN_reg3;                                         \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix0_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix1_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix2_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix3_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix4_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix5_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix6_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix7_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix8_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix9_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix10_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix11_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix12_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix13_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix14_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix15_o;                                      \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << "     always @(posedge clk,negedge rst_n)begin                        \n";
TWIpipe_r16_R2P << "         if(~rst_n)begin                                             \n";
TWIpipe_r16_R2P << "             MA_reg0       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_reg1       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_reg2       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_reg3       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_out        <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             BN_reg0       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << "             BN_reg1       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << "             BN_reg2       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << "             BN_reg3       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << " 			BN_out        <=  1'b0;                                  \n";
TWIpipe_r16_R2P << " 			TWIradix0_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix1_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix2_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix3_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix4_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix5_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix6_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix7_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix8_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix9_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix10_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix11_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix12_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix13_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix14_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix15_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << "         end                                                         \n";
TWIpipe_r16_R2P << "         else begin                                                  \n";
TWIpipe_r16_R2P << "             MA_reg0  <= MA_in;                                      \n";
TWIpipe_r16_R2P << "             MA_reg1  <= MA_reg0;                                    \n";
TWIpipe_r16_R2P << "             MA_reg2  <= MA_reg1;                                    \n";
TWIpipe_r16_R2P << "             MA_reg3  <= MA_reg2;                                    \n";
TWIpipe_r16_R2P << "             MA_out   <= MA_reg3;                                    \n";
TWIpipe_r16_R2P << " 			//                                                       \n";
TWIpipe_r16_R2P << "             BN_reg0  <= BN_in;                                      \n";
TWIpipe_r16_R2P << "             BN_reg1  <= BN_reg0;                                    \n";
TWIpipe_r16_R2P << "             BN_reg2  <= BN_reg1;                                    \n";
TWIpipe_r16_R2P << "             BN_reg3  <= BN_reg2;                                    \n";
TWIpipe_r16_R2P << "             BN_out   <= BN_reg3;                                    \n";
TWIpipe_r16_R2P << " 			//                                                       \n";
TWIpipe_r16_R2P << " 		    TWIradix0_o   <=  TWIradix0_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix1_o   <=  TWIradix1_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix2_o   <=  TWIradix2_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix3_o   <=  TWIradix3_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix4_o   <=  TWIradix4_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix5_o   <=  TWIradix5_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix6_o   <=  TWIradix6_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix7_o   <=  TWIradix7_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix8_o   <=  TWIradix8_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix9_o   <=  TWIradix9_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix10_o  <=  TWIradix10_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix11_o  <=  TWIradix11_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix12_o  <=  TWIradix12_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix13_o  <=  TWIradix13_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix14_o  <=  TWIradix14_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix15_o  <=  TWIradix15_i;                          \n";
TWIpipe_r16_R2P << "         end                                                         \n";
TWIpipe_r16_R2P << "     end                                                             \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " endmodule                                                           \n";
	 
	 TWIpipe_r16_R2P.close();
}
