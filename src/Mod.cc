#include <vector>
#include <iostream>
#include <fstream>
#include <math.h>
#include <sstream>
#include <NTL/ZZ.h>

#include "Mod.h"

using namespace NTL;

void Mod::gen(unsigned long radix,std::string string_in,unsigned long CP_w,unsigned long cp_i,long m_2_i){
     m_2                 = m_2_i;
     cyclotomic_prime    = cp_i;
     CP_width            = CP_w; 
     r         = radix;
	 
	 BM_parameter();
     if(r== 4){
         Mul(string_in);
         MulMod(string_in);
		 CP_CLA(string_in);
         BR(string_in);
         //===================
         Mod96_r4(string_in);  //data is different with radix-16
         Mod96PD(string_in);
         Mod192_r4(string_in); //data is different with radix-16
         Mod192PD(string_in);
         ModMux(string_in);
         Mul64(string_in);
         MulMod128_r4(string_in); 
         MulMod128PD(string_in);
         R4_TMulMod(string_in);  // radix-4 using 
     }
	 if(r==8){
         Mul(string_in);
         MulMod(string_in);
		 CP_CLA(string_in);
         BR(string_in);
		//===============================
         Mod96_r8(string_in);  //data is different with radix-16
         Mod96PD(string_in);
         Mod192_r8(string_in); //data is different with radix-16
         Mod192PD(string_in);
         ModMux(string_in);
         Mul64(string_in);
         MulMod128_r8(string_in); 
         MulMod128PD(string_in);		 
	 }
	 if(r==16){
		 //radix-16
		 Mul(string_in);
         MulMod(string_in);
		 CP_CLA(string_in);
         BR(string_in);
		 //radix-16
         Mod96(string_in);
         Mod96PD(string_in);
         Mod192(string_in);
         Mod192PD(string_in);
         ModMux(string_in);
         Mul64(string_in);
         MulMod128(string_in);
         MulMod128PD(string_in);
     }     
}

void Mod::gen_configurable(unsigned long radix,std::string string_in,unsigned long CP_w,unsigned long cp_i,long m_2_i){
     m_2                 = m_2_i;
     cyclotomic_prime    = cp_i;
     CP_width            = CP_w; 
     r         = radix;
	 
	 BM_parameter();
     //radix-16
     Mul(string_in);
     MulMod_configurable(string_in);
     CP_CLA(string_in);
     BR_configurable(string_in);
     //radix-16
     Mod96(string_in);
     Mod96PD(string_in);
     Mod192(string_in);
     Mod192PD(string_in);
     ModMux(string_in);
     Mul64(string_in);
     MulMod128(string_in);
     MulMod128PD(string_in);

}

void Mod::Mul(std::string string_in){
	 std::ofstream mul;
     std::string        string_buf = "/Mul.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mul.open(ss.str());
 mul << " //==============================================  \n";
 mul << " //Writer:Shi-Yong Wu                              \n";
 mul << " //                                                \n";
 mul << " //Note:multiplier                                 \n";
 mul << " //==============================================  \n";
 mul << " `timescale 1ns/1ps                                \n";
 mul << " module Mul(                                       \n";
 mul << "    A_in,                                          \n";
 mul << "    B_in,                                          \n";
 mul << "    clk,                                           \n";
 mul << "    rst_n,                                         \n";
 mul << "    S_out                                          \n";
 mul << " );                                                \n";
 mul << "                                                   \n";
 mul << "   parameter DATA_WIDTH = "<< CP_width <<";        \n";
 mul << "   parameter DOUBLE_DATA_WIDTH = 2*DATA_WIDTH ;    \n";
 mul << "   parameter PAD_ZERO = " << (2*CP_width) <<"'b0;  \n";
 mul << "                                                   \n";
 mul << "   input [DATA_WIDTH-1:0] A_in;                    \n";
 mul << "   input [DATA_WIDTH-1:0] B_in;                    \n";
 mul << "   input clk;                                      \n";
 mul << "   input rst_n;                                    \n";
 mul << "                                                   \n";
 mul << "   output [DOUBLE_DATA_WIDTH-1:0] S_out;           \n";
 mul << "                                                   \n";
 mul << "   reg [DOUBLE_DATA_WIDTH-1:0] S_out;              \n";
 mul << "                                                   \n";
 mul << "   wire [DOUBLE_DATA_WIDTH-1:0]S_wire;             \n";
 mul << "                                                   \n";
 mul << "   assign  S_wire = A_in * B_in;                   \n";
 mul << "                                                   \n";
 mul << "   always@(posedge clk or negedge rst_n)begin      \n";
 mul << "     if(~rst_n)begin                               \n";
 mul << " 	  S_out <= PAD_ZERO ;                           \n";
 mul << " 	end                                             \n";
 mul << " 	else begin                                      \n";
 mul << " 	  S_out <= S_wire;                              \n";
 mul << " 	end                                             \n";
 mul << "   end                                             \n";
 mul << "                                                   \n";
 mul << " endmodule                                         \n";
     mul.close();
}
//barrett reduction parameter calculate
void Mod::BM_parameter(){
     std::ofstream   BM; //Barrett modular reduction

     BM.open("BM.txt");

     BM << "prime tmp: " << cyclotomic_prime << "\n";
     BM << "prime tmp bit:"   << CP_width << "\n";
     /*barrett modular reduction  paramter calculate */
     long alpha;
     long beta;
     long prime_longtype;
     
     double pre_com_par;
     
     prime_longtype      = to_long(cyclotomic_prime);
     
     alpha               = CP_width + 1;    // alpha  = n + 1;
     beta                = -2;               // beta   = -2 ;
     rf_fri              = CP_width + beta; // rf_fri = n + beta;
     rf_sec              = alpha - beta;
     pre_com_par         = exp2(CP_width+alpha);
     pre_com_par         = floor(pre_com_par / prime_longtype);
     pre_computing       = (long) pre_com_par;
     data_fri_rs_width   = 2*CP_width - rf_fri;
     data_mult_pre_par   = log2(pre_computing);
     data_mult_pre_par   = ceil(data_mult_pre_par);
     BM << "pre_computing_bits:" << data_mult_pre_par << "\n";
     data_mult_pre_width = (long)data_mult_pre_par +  data_fri_rs_width;
     
     BM << "rf_FRI: "            << rf_fri << "\n";
     BM << "rf_sec: "            << rf_sec << "\n";
     BM << "pre_computing:"      << pre_computing << "\n";
     BM <<"DATA_FRI_RS_WIDTH:"   << data_fri_rs_width << "\n";
     BM <<"DATA_MULT_PER_WIDTH:" << data_mult_pre_width << "\n";    
    
    
}
void Mod::MulMod(std::string string_in){
	 std::ofstream mulmod;
     std::string        string_buf = "/MulMod.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mulmod.open(ss.str());
 mulmod << " //==============================================                                                \n";
 mulmod << " //Writer:Shi-Yong Wu                                                                            \n";
 mulmod << " //                                                                                              \n";
 mulmod << " //Note:Modular multiplier                                                                       \n";
 mulmod << " //using barrett reduction                                                                       \n";
 mulmod << " //==============================================                                                \n";
 mulmod << " `timescale 1ns/1ps                                                                              \n";
 mulmod << "                                                                                                 \n";
 mulmod << " module MulMod(                                                                                  \n";
 mulmod << "   A_in,                                                                                         \n";
 mulmod << "   B_in,                                                                                         \n";
 mulmod << "   bypass,                                                                                          \n";
 mulmod << "   clk,                                                                                          \n";
 mulmod << "   rst_n,                                                                                        \n";
 mulmod << "   result                                                                                        \n";
 mulmod << " );                                                                                              \n";
 mulmod << "   parameter DATA_WIDTH          = "<< CP_width  <<";\n";
 mulmod << "   parameter DOUBLE_DATA_WIDTH   = "<< (2 * CP_width ) <<";\n";
 mulmod << "                                                                                                 \n";
 mulmod << "   input [DATA_WIDTH-1:0] A_in;                                                                  \n";
 mulmod << "   input [DATA_WIDTH-1:0] B_in;                                                                  \n";
 mulmod << "   input bypass;                                                                                    \n";
 mulmod << "   input clk;                                                                                    \n";
 mulmod << "   input rst_n;                                                                                  \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   output [DATA_WIDTH-1:0] result;                                                                  \n";
 mulmod << "                                                                                                 \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   wire [DOUBLE_DATA_WIDTH-1:0]S_wire;                                                           \n";
 mulmod << "   wire [DOUBLE_DATA_WIDTH-1:0]BR_in_wire;                                                        \n";
 mulmod << "                                                                                                 \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   Mul M1(                                                                                       \n";
 mulmod << "     .A_in(A_in),                                                                                \n";
 mulmod << "     .B_in(B_in),                                                                                \n";
 mulmod << " 	.clk(clk),                                                                                   \n";
 mulmod << " 	.rst_n(rst_n),                                                                               \n";
 mulmod << " 	.S_out(S_wire)                                                                                \n";
 mulmod << "   );                                                                                            \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   assign BR_in_wire = (bypass == 1'b1 ) ? {A_in,B_in} : S_wire;  \n";
 mulmod << "                                                                  \n";
 mulmod << "   BR BR1(                                                        \n";
 mulmod << "          .S_in(BR_in_wire),                                      \n";                                                   
 mulmod << "          .result(result),                                        \n";                                          
 mulmod << "          .rst_n(rst_n),                                          \n";                                              
 mulmod << "          .clk(clk)                                               \n";
 mulmod << "   );                                                             \n";
 mulmod << "                                                                  \n";    
 mulmod << " endmodule                                                                                       \n";     

     mulmod.close();
}
void Mod::MulMod_configurable(std::string string_in){
	 std::ofstream mulmod;
     std::string        string_buf = "/MulMod.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mulmod.open(ss.str());
 mulmod << " //==============================================                                                \n";
 mulmod << " //Writer:Shi-Yong Wu                                                                            \n";
 mulmod << " //                                                                                              \n";
 mulmod << " //Note:Modular multiplier                                                                       \n";
 mulmod << " //using barrett reduction                                                                       \n";
 mulmod << " //==============================================                                                \n";
 mulmod << " `timescale 1ns/1ps                                                                              \n";
 mulmod << "                                                                                                 \n";
 mulmod << " module MulMod(                                                                                  \n";
 mulmod << "   A_in,                                                                                         \n";
 mulmod << "   B_in,                                                                                         \n";
 mulmod << "   bypass,                                                                                       \n";
 mulmod << "   Prime,                                                                                        \n";
 mulmod << "   Pre_computing,                                                                                \n";
 mulmod << "   clk,                                                                                          \n";
 mulmod << "   rst_n,                                                                                        \n";
 mulmod << "   result                                                                                        \n";
 mulmod << " );                                                                                              \n";
 mulmod << "   parameter DATA_WIDTH          = "<< CP_width  <<";\n";
 mulmod << "   parameter PRE_WIDTH           = "<< (long) data_mult_pre_par  <<";\n";
 mulmod << "   parameter DOUBLE_DATA_WIDTH   = "<< (2 * CP_width ) <<";\n";
 mulmod << "                                                                                                 \n";
 mulmod << "   input [DATA_WIDTH-1:0] A_in;                                                                  \n";
 mulmod << "   input [DATA_WIDTH-1:0] B_in;                                                                  \n";
 mulmod << "   input [DATA_WIDTH-1:0] Prime;                                                                 \n";
 mulmod << "   input [PRE_WIDTH-1 :0] Pre_computing;                                                         \n";
 mulmod << "   input bypass;                                                                                 \n";
 mulmod << "   input clk;                                                                                    \n";
 mulmod << "   input rst_n;                                                                                  \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   output [DATA_WIDTH-1:0] result;                                                               \n";
 mulmod << "                                                                                                 \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   wire [DOUBLE_DATA_WIDTH-1:0]S_wire;                                                           \n";
 mulmod << "   wire [DOUBLE_DATA_WIDTH-1:0]BR_in_wire;                                                        \n";
 mulmod << "                                                                                                 \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   Mul M1(                                                                                       \n";
 mulmod << "     .A_in(A_in),                                                                                \n";
 mulmod << "     .B_in(B_in),                                                                                \n";
 mulmod << " 	.clk(clk),                                                                                   \n";
 mulmod << " 	.rst_n(rst_n),                                                                               \n";
 mulmod << " 	.S_out(S_wire)                                                                                \n";
 mulmod << "   );                                                                                            \n";
 mulmod << "                                                                                                 \n";
 mulmod << "   assign BR_in_wire = (bypass == 1'b1 ) ? {A_in,B_in} : S_wire;  \n";
 mulmod << "                                                                  \n";
 mulmod << "   BR BR1(                                                        \n";
 mulmod << "          .S_in(BR_in_wire),                                      \n";                                                   
 mulmod << "          .result(result),                                        \n";                                          
 mulmod << "          .Prime(Prime),                                          \n";                                          
 mulmod << "          .Pre_computing(Pre_computing),                          \n";                                          
 mulmod << "          .rst_n(rst_n),                                          \n";                                              
 mulmod << "          .clk(clk)                                               \n";
 mulmod << "   );                                                             \n";
 mulmod << "                                                                  \n";    
 mulmod << " endmodule                                                                                       \n";     

     mulmod.close();
}
void Mod::BR(std::string string_in){
	 std::ofstream br;
     std::string        string_buf = "/BR.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 br.open(ss.str());	
br << " //==============================================                                                \n";
br << " //Writer:Shi-Yong Wu                                                                            \n";
br << " //                                                                                              \n";
br << " //Note:Modular multiplier                                                                       \n";
br << " //using barrett reduction                                                                       \n";
br << " //==============================================                                                \n";
br << " `timescale 1ns/1ps                                                                              \n";
br << "                                                                                                 \n";
br << " module BR(                                                                                  \n";
br << "   S_in,                                                                                         \n";
br << "   result,                                                                                        \n";
br << "   rst_n,                                                                                        \n";
br << "   clk                                                                                          \n";
br << " );                                                                                              \n";
br << "   parameter CP_ZERO             = "<< CP_width <<"'d0;                                                           \n";
br << "   parameter DATA_WIDTH          = "<< CP_width  <<";\n";
br << "   parameter DOUBLE_DATA_WIDTH   = "<< (2 * CP_width ) <<";\n";
br << "   parameter DATA_FRI_RS_WIDTH   = "<< data_fri_rs_width <<";  // DOUBLE_DATA_WIDTH - rf_FRI                            \n";
br << "   parameter DATA_MULT_PRE_WIDTH = "<< data_mult_pre_width <<";                                                           \n";
br << "   parameter PAD_ZERO            = " << (2 * CP_width) <<"'b0;\n";
br << "   parameter Prime               = " << CP_width << "'d" << cyclotomic_prime <<";\n";
br << "   parameter rf_FRI              = "<< rf_fri <<";                                                           \n";
br << "   parameter rf_SEC              = "<< rf_sec <<";                                                           \n";
br << "   parameter pre_computing       = "<<(long) data_mult_pre_par<<"'d"<< pre_computing<<";                                                 \n";
br << "                                                                                                 \n";
br << "   input [DOUBLE_DATA_WIDTH-1:0] S_in;                                                                  \n";
br << "   input clk;                                                                                    \n";
br << "   input rst_n;                                                                                  \n";
br << "                                                                                                 \n";
br << "   output [DATA_WIDTH-1:0] result;                                                                  \n";
br << "                                                                                                 \n";
br << "   reg  [DATA_WIDTH-1:0] result;                                                                    \n";
br << "                                                                                                 \n";
br << "   reg  [DATA_FRI_RS_WIDTH-1:0]S_out_RS; //32-14 = 18                                            \n";
br << "   reg  [DATA_MULT_PRE_WIDTH-1:0]af_pre; //18+16 = 34    mult by pre_computing                   \n";
br << "   reg  [DATA_WIDTH:0]Q;               //quotient                                              \n";
br << "   reg  [DOUBLE_DATA_WIDTH-1:0]QM;       //32 bits                                               \n";
br << "   reg  [DATA_WIDTH:0]C_Minus_QM;                                                                \n";
br << "   reg  [DATA_WIDTH:0]C_Minus_QM_1;                                                              \n";
br << "   reg  [DATA_WIDTH-1:0]C_Minus_QM_MUX;                                                          \n";
br << "                                                                                                 \n";
br << "      always@(*) begin    \n";
br << "         S_out_RS = S_in >> rf_FRI;                                                             \n";
br << "         af_pre   = S_out_RS * pre_computing;                                                    \n";
br << "         Q        = af_pre >> rf_SEC;                                                            \n";
br << "         QM       = Q * Prime;                                                                   \n";
br << " 	    //adder part                                                                             \n";
br << "         C_Minus_QM   = S_in - QM;                                                      \n";
br << "         C_Minus_QM_1 = C_Minus_QM -Prime;                                                       \n";
br << "                                                                                                 \n";
br << "         C_Minus_QM_MUX   = ((C_Minus_QM_1[DATA_WIDTH] == 1'b1))? C_Minus_QM:C_Minus_QM_1;       \n";
br << "      end                                                                                        \n";
br << "                                                                                                 \n";
br << "   always@(posedge clk,negedge rst_n)begin                                                       \n";
br << "     if(~rst_n)begin                                                                             \n";
br << "       result    <= CP_ZERO;                                                                      \n";
br << " 	end                                                                                          \n";
br << " 	else begin                                                                                   \n";
br << "       result    <= C_Minus_QM_MUX;\n";
br << " 	end                                                                                          \n";
br << "   end                                                                                           \n";
br << "                                                                                                 \n";
br << "                                                                                                 \n";
br << " endmodule                                                                                       \n";     
 
	 br.close();
}
void Mod::BR_configurable(std::string string_in){
	 std::ofstream br;
     std::string        string_buf = "/BR.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 br.open(ss.str());	
br << " //==============================================\n";
br << " //Writer:Shi-Yong Wu                            \n";
br << " //                                              \n";
br << " //Note:Modular multiplier                       \n";
br << " //using barrett reduction                       \n";
br << " //==============================================\n";
br << " `timescale 1ns/1ps                              \n";
br << "                                                 \n";
br << " module BR(                                      \n";
br << "   S_in,                                         \n";
br << "   result,                                       \n";
br << "   Prime,                                        \n";
br << "   Pre_computing,                                \n";
br << "   rst_n,                                        \n";
br << "   clk                                           \n";
br << " );                                              \n";
br << "   parameter CP_ZERO             = "<< CP_width <<"'d0;\n";
br << "   parameter DATA_WIDTH          = "<< CP_width  <<";\n";
br << "   parameter PRE_WIDTH           = "<< (long) data_mult_pre_par  <<";\n";
br << "   parameter PRE_ZERO            = "<< (long) data_mult_pre_par  <<"'d0;\n";
br << "   parameter DOUBLE_DATA_WIDTH   = "<< (2 * CP_width ) <<";\n";
br << "   parameter DATA_FRI_RS_WIDTH   = "<< data_fri_rs_width <<";  // DOUBLE_DATA_WIDTH - rf_FRI \n";
br << "   parameter DATA_MULT_PRE_WIDTH = "<< data_mult_pre_width <<";\n";
br << "   parameter PAD_ZERO            = " << (2 * CP_width) <<"'b0;\n";
//br << "   parameter Prime               = " << CP_width << "'d" << cyclotomic_prime <<";\n";
br << "   parameter rf_FRI              = "<< rf_fri <<";\n";
br << "   parameter rf_SEC              = "<< rf_sec <<";\n";
//br << "   parameter pre_computing       = "<<(long) data_mult_pre_par<<"'d"<< pre_computing<<";                                                 \n";
br << "                                                                                                 \n";
br << "   input [DOUBLE_DATA_WIDTH-1:0] S_in;                                                           \n";
br << "   input [DATA_WIDTH-1:0] Prime;                                                                 \n";
br << "   input [PRE_WIDTH-1 :0] Pre_computing;                                                         \n";
br << "   input clk;                                                                                    \n";
br << "   input rst_n;                                                                                  \n";
br << "                                                                                                 \n";
br << "   output [DATA_WIDTH-1:0] result;                                                               \n";
br << "                                                                                                 \n";
br << "   reg  [DATA_WIDTH-1:0] result;                                                                 \n";
br << "   //                                                                                            \n";
br << "   reg [DATA_WIDTH-1:0] Prime_reg;                                                               \n";
br << "   reg [PRE_WIDTH-1 :0] Pre_computing_reg;                                                       \n";
br << "   //                                                                                            \n";
br << "   reg  [DATA_FRI_RS_WIDTH-1:0]S_out_RS; //32-14 = 18                                            \n";
br << "   reg  [DATA_MULT_PRE_WIDTH-1:0]af_pre; //18+16 = 34    mult by pre_computing                   \n";
br << "   reg  [DATA_WIDTH:0]Q;               //quotient                                                \n";
br << "   reg  [DOUBLE_DATA_WIDTH-1:0]QM;       //32 bits                                               \n";
br << "   reg  [DATA_WIDTH:0]C_Minus_QM;                                                                \n";
br << "   reg  [DATA_WIDTH:0]C_Minus_QM_1;                                                              \n";
br << "   reg  [DATA_WIDTH-1:0]C_Minus_QM_MUX;                                                          \n";
br << "                                                                                                 \n";
br << "      always@(*) begin                                                                          \n";
br << "         S_out_RS = S_in >> rf_FRI;                                                             \n";
br << "         af_pre   = S_out_RS * Pre_computing_reg;                                               \n";
br << "         Q        = af_pre >> rf_SEC;                                                           \n";
br << "         QM       = Q * Prime_reg;                                                              \n";
br << " 	    //adder part                                                                           \n";
br << "         C_Minus_QM   = S_in - QM;                                                              \n";
br << "         C_Minus_QM_1 = C_Minus_QM -Prime_reg;                                                   \n";
br << "                                                                                                 \n";
br << "         C_Minus_QM_MUX   = ((C_Minus_QM_1[DATA_WIDTH] == 1'b1))? C_Minus_QM:C_Minus_QM_1;       \n";
br << "      end                                                                                        \n";
br << "                                                                                                 \n";
br << "   always@(posedge clk,negedge rst_n)begin                                                       \n";
br << "     if(~rst_n)begin                                                                             \n";
br << "       result    <= CP_ZERO;                                                                      \n";
br << "       Prime_reg <= CP_ZERO;                                                                      \n";
br << "       Pre_computing_reg <= PRE_ZERO;                                                             \n";
br << " 	end                                                                                          \n";
br << " 	else begin                                                                                   \n";
br << "       result    <= C_Minus_QM_MUX;\n";
br << "       Prime_reg <= Prime;\n";
br << "       Pre_computing_reg <= Pre_computing;\n";
br << " 	end                                                                                          \n";
br << "   end                                                                                           \n";
br << "                                                                                                 \n";
br << "                                                                                                 \n";
br << " endmodule                                                                                       \n";     
 
	 br.close();
}
void Mod::CP_CLA(std::string string_in){
	 unsigned long Num_digits;
	 unsigned long Num_CLA4; // Number of 4 bits CLA module 
	 unsigned long Remainder_bits;
	 double Num_digits_tmp;
	 double Num_CLA4_tmp;
	 Num_CLA4_tmp = (double)CP_width / 4;
	 Num_CLA4_tmp = floor(Num_CLA4_tmp);
	 Num_CLA4 = (unsigned long) Num_CLA4_tmp;
	 Num_digits_tmp = (double)CP_width / 4;
	 Num_digits_tmp = ceil(Num_digits_tmp);
	 Num_digits = (unsigned long) Num_digits_tmp;
	 Remainder_bits = CP_width % 4;
	 
	 //generate cla_clg
	 CP_CLA_clg(string_in,Num_digits);
	 // ofstream 
	 std::ofstream cp_cla;
     std::string        string_buf = "/CP_CLA.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 cp_cla.open(ss.str());		
cp_cla << " //==============================================\n";
cp_cla << " //Writer:Shi-Yong Wu                            \n";
cp_cla << " //                                              \n";
cp_cla << " //Note:CP_CLA                                    \n";
cp_cla << " //cyclotomic prime bit size carry lookahead adder\n";
cp_cla << " //==============================================\n";
cp_cla << " `timescale 1ns/1ps                              \n";
cp_cla << "                                                 \n";
cp_cla << " module CP_CLA(                                 \n";
cp_cla << "   sum,                                         \n";
cp_cla << "   c_out,                                         \n";
cp_cla << "   a_in,                                        \n";
cp_cla << "   b_in,                                        \n";
cp_cla << "   c_in,                                        \n";
cp_cla << " );                                             \n";
cp_cla << "                                                \n";
cp_cla << " parameter CLA_WIDTH = " <<  CP_width <<";\n";
cp_cla << " parameter CA_WIDTH = " <<  Num_digits-1 <<";\n";
cp_cla << " parameter PG_WIDTH = " <<  Num_digits <<";\n";
for(unsigned long i = 0; i < Num_digits ; i++){
	cp_cla << " parameter C_"<< (i+1) << " = " << i <<";\n";	
}
for(unsigned long i = 0; i < Num_digits ; i++){
	if(i != (Num_digits-1))cp_cla << " parameter SEG_"<< (i+1) << " = " << 4 * (i+1) <<";\n";	
	else cp_cla << " parameter SEG_"<< (i+1) << " = " << CP_width <<";\n";	
}
cp_cla << " output[CLA_WIDTH-1:0] sum;\n";
cp_cla << " output                c_out;\n";
cp_cla << "\n";
cp_cla << "\n";
cp_cla << " input [CLA_WIDTH-1:0] a_in;\n";
cp_cla << " input [CLA_WIDTH-1:0] b_in;\n";
cp_cla << " input                 c_in;\n";
cp_cla << "\n";
cp_cla << "\n";
cp_cla << " wire [PG_WIDTH-1:0] g_wire;\n";
cp_cla << " wire [PG_WIDTH-1:0] p_wire;\n";
cp_cla << " wire [CA_WIDTH-1:0] carry;\n";
for(unsigned long i = 0; i < Num_CLA4 ; i++){                   
if(i==0)cp_cla << " 	CLA4 u_CLA4_"<< i <<"(.sum(sum[SEG_"<< (i+1) <<"-1:0]),\n";
else    cp_cla << " 	CLA4 u_CLA4_"<< i <<"(.sum(sum[SEG_"<< (i+1) <<"-1:SEG_"<< i <<"]),\n";
		cp_cla << " 	                 .g_out(g_wire[C_"<< (i+1) <<"]),\n";
		cp_cla << " 	                 .p_out(p_wire[C_"<< (i+1) <<"]),\n";
if(i==0)cp_cla << " 	                 .a_in(a_in[SEG_" << (i+1) <<"-1:0]),\n";
else    cp_cla << " 	                 .a_in(a_in[SEG_" << (i+1) <<"-1:SEG_"<< i <<"]),\n";
if(i==0)cp_cla << " 	                 .b_in(b_in[SEG_" << (i+1) <<"-1:0]),\n";
else    cp_cla << " 	                 .b_in(b_in[SEG_" << (i+1) <<"-1:SEG_"<< i <<"]),\n";
if(i==0)cp_cla << " 	                 .c_in(c_in)\n";
else    cp_cla << " 	                 .c_in(carry[C_"<< i <<"])\n";
cp_cla << " 	                 ) ;                            \n";
}
if(Remainder_bits != 0){
cp_cla << " 	CLA"<< Remainder_bits << "  u_CLA" << Remainder_bits <<" (.sum(sum[SEG_"<< Num_digits <<"-1:SEG_"<< (Num_digits-1) <<"]),\n";
cp_cla << " 	                 .g_out(g_wire[C_"<< Num_digits <<"]),\n";
cp_cla << " 	                 .p_out(p_wire[C_"<< Num_digits <<"]),\n";
cp_cla << " 	                 .a_in(a_in[SEG_" << Num_digits <<"-1:SEG_"<< (Num_digits-1) <<"]),\n";
cp_cla << " 	                 .b_in(b_in[SEG_" << Num_digits <<"-1:SEG_"<< (Num_digits-1) <<"]),\n";
cp_cla << " 	                 .c_in(carry[C_"  << Num_digits-1 <<"])\n";
cp_cla << " 	                 ) ;                            \n";
}
cp_cla << " 	CLA_clg u_CLA_clg(.g_out(c_out),\n";
cp_cla << " 	                 .carry(carry),\n";
for(unsigned long i = 0; i < Num_digits; i++){
cp_cla << " 	                 .p_in"<< i <<"(p_wire[C_"<< (i+1) <<"]),\n";
cp_cla << " 	                 .g_in"<< i <<"(g_wire[C_"<< (i+1) <<"]),\n";
}
cp_cla << " 	                 .c_in(c_in)\n";
cp_cla << " 	                 );\n";
cp_cla << " endmodule                                      \n";
	 cp_cla.close();
}
void Mod::CP_CLA_clg(std::string string_in,unsigned long Num_digits){
	 // ofstream 
	 std::ofstream cp_cla_clg;
     std::string        string_buf = "/CLA_clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
     cp_cla_clg.open(ss.str());
     cp_cla_clg << " //==============================================\n";
     cp_cla_clg << " //Writer:Shi-Yong Wu                            \n";
     cp_cla_clg << " //                                              \n";
     cp_cla_clg << " //Note:CP_CLA_clg                               \n";
     cp_cla_clg << " //cyclotomic prime bit size carry lookahead generator\n";
     cp_cla_clg << " //==============================================\n";
     cp_cla_clg << " module CLA_clg(g_out,\n";
     cp_cla_clg << "                carry,\n";	 	 
     for(unsigned long i = 0; i < Num_digits ; i++){
         cp_cla_clg << "                p_in"<< i <<",\n";	 	 
         cp_cla_clg << "                g_in"<< i <<",\n";	 	 
     }
     cp_cla_clg << "                c_in\n";
     cp_cla_clg << ");\n";
     cp_cla_clg << " parameter CA_WIDTH ="<< (Num_digits-1) <<";\n";
     for(unsigned long i = 0; i < Num_digits-1 ; i++){
         cp_cla_clg << " parameter C_"<< (i+1) <<" = "<< i <<";\n";	
     }
	 cp_cla_clg << " output                 g_out;\n";
	 
	 cp_cla_clg << " output[CA_WIDTH-1:0]   carry;\n";
	 cp_cla_clg << "\n";
	 cp_cla_clg << "\n";
	 for(unsigned long i = 0; i < Num_digits ; i++){
	     cp_cla_clg << " input                 p_in"<< i <<";\n";
	     cp_cla_clg << " input                 g_in"<< i <<";\n";
     }
	 cp_cla_clg << " input                 c_in;\n";
	 cp_cla_clg << "\n";
	 cp_cla_clg << "\n";
	 int Num_terms;
	 for(long i = 0; i < Num_digits-1 ; i++){
	     cp_cla_clg << "     assign carry[C_"<< (i+1) <<"] = g_in"<< i <<"|";
		 for(long j = i ; j >= 0 ; j--){
			 Num_terms = (i-j) + 2;
			 cp_cla_clg << "(";
			 for(long k = 0; k < Num_terms; k++){
				 if(j==0){
                    if(k==0)cp_cla_clg << "c_in&";     
					else if(k == Num_terms-1) cp_cla_clg << "p_in" << (k-1) <<");";
					else cp_cla_clg << "p_in"<< (k-1) <<"&";
                 }else {
                     if(k==0)cp_cla_clg << "g_in"<< (j + k-1) <<"&";
					 else if(k == Num_terms-1) cp_cla_clg << "p_in"<< (j + k-1) <<")|";
				     else    cp_cla_clg << "p_in"<< (j + k-1) <<"&";
				 }					 
			 }
		 }
         cp_cla_clg << "\n";
	 }
	 cp_cla_clg << "\n";
	 cp_cla_clg << "\n";
	 cp_cla_clg << "     assign g_out = "; 
	 for(long i = Num_digits-1 ; i >= 0; i--){
		 Num_terms = Num_digits - i;
		 cp_cla_clg << "(";
		 for(long k = 0; k < Num_terms; k++){
			 if(k == 0){
				 if(i == Num_digits-1)cp_cla_clg << " g_in"<< i;
				 else cp_cla_clg << " g_in"<< i <<"&";
			 }
			 else if(k==Num_terms-1) cp_cla_clg << " p_in"<< i+k;
		     else cp_cla_clg << " p_in"<< i+k <<"&";
		 }
		 cp_cla_clg << ")";
		 if(i==0)cp_cla_clg << ";\n";
		 else cp_cla_clg << "|";
	 }
	 cp_cla_clg << " endmodule\n";
	 cp_cla_clg.close();
}
void Mod::Mod96_r4(std::string string_in){
	 std::ofstream mod96;
     std::string        string_buf = "/Mod96.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mod96.open(ss.str());
 mod96 << " `timescale 1 ns/1 ps                                                     \n";
 mod96 << " module Mod96(S_out,                                                      \n";
 mod96 << "              A_in,                                                       \n";
 mod96 << " 		     N_in,                                                       \n";
 mod96 << "              rst_n,                                                      \n";
 mod96 << "              clk                                                         \n";
 mod96 << "              ) ;                                                         \n";
 mod96 << " parameter D_WIDTH     = 96 ;                                             \n";
 mod96 << " parameter P_WIDTH     = 64 ;                                             \n";
 mod96 << " parameter SEG_ZERO    = 32'h0 ;                                          \n";
 mod96 << " parameter P_ZERO      = 64'h0 ;                                          \n";
 mod96 << "                                                                          \n";
 mod96 << "                                                                          \n";
 mod96 << " output[P_WIDTH-1:0] S_out ;                                              \n";
 mod96 << "                                                                          \n";
 mod96 << " input [D_WIDTH-1:0] A_in ;                                               \n";
 mod96 << " input [P_WIDTH-1:0] N_in ;                                               \n";
 mod96 << " input               rst_n ;                                              \n";
 mod96 << " input               clk ;                                                \n";
 mod96 << "                                                                          \n";
 mod96 << "                                                                          \n";
 mod96 << " wire  [P_WIDTH-1:0]  Ninv1_wire ;                                        \n";
 mod96 << " wire  [P_WIDTH:0]    Ninv2_wire ;                                        \n";
 mod96 << " wire  [P_WIDTH-1:0]  efD_wire ;                                          \n";
 mod96 << " wire  [P_WIDTH-1:0]  dHD_wire ;                                          \n";
 mod96 << " wire  [P_WIDTH-1:0]  dLDinv_wire ;                                       \n";
 mod96 << " wire  [P_WIDTH:0]    t1D_wire ;                                          \n";
 mod96 << "                                                                          \n";
 mod96 << " wire  [P_WIDTH-1:0]  S_tefp_wire ;                                       \n";
 mod96 << " wire                 C_tefp_wire ;                                       \n";
 mod96 << " wire  [P_WIDTH-1:0]  efp_wire ;                                          \n";
 mod96 << " wire  [P_WIDTH-1:0]  S_t1_wire ;                                         \n";
 mod96 << " wire                 C_t1_wire ;                                         \n";
 mod96 << " wire  [P_WIDTH:0]    S_t2_wire ;                                         \n";
 mod96 << " wire                 C_t2_wire ;                                         \n";
 mod96 << " wire  [P_WIDTH-1:0]  t3_wire ;                                           \n";
 mod96 << " wire  [P_WIDTH-1:0]  S_t4_wire ;                                         \n";
 mod96 << " wire                 C_t4_wire ;	                                     \n";
 mod96 << " wire  [P_WIDTH-1:0]  S_t5_wire ;                                         \n";
 mod96 << " wire                 C_t5_wire ;                                         \n";
 mod96 << "                                                                          \n";
 mod96 << " wire  [P_WIDTH-1:0]  S_t1_reg_wire ;                                     \n";
 mod96 << " wire                 C_t1_reg_wire ;                                     \n";
 mod96 << " wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                     \n";
 mod96 << " wire                 C_t4_reg_wire ;                                     \n";
 mod96 << " wire  [P_WIDTH-1:0]  dLDinv_reg_wire ;                                   \n";
 mod96 << " wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                    \n";
 mod96 << " wire  [P_WIDTH-1:0]  N_D2_wire ;                                         \n";
 mod96 << "                                                                          \n";
 mod96 << " 	                                                                     \n";
 mod96 << " 	//Pipeline Register                                                  \n";
 mod96 << " 	R4_NPipeReg1 u_R4_NPipeReg1(.N_D2_out(N_D2_wire),                    \n";
 mod96 << "                                 .N_in(N_in),                             \n";
 mod96 << "                                 .rst_n(rst_n),                           \n";
 mod96 << "                                 .clk(clk)                                \n";
 mod96 << "                                 ) ;                                      \n";
 mod96 << " 	                                                                     \n";
 mod96 << " 	//Pre-process Data                                                   \n";
 mod96 << " 	Mod96PD u_Mod96PD(.Ninv1_out(Ninv1_wire), //64-bit inverter N        \n";
 mod96 << "                       .Ninv2_out(Ninv2_wire), //65-bit inverter N        \n";
 mod96 << " 			          .efD_out(efD_wire), //(2^32e)+f                    \n";
 mod96 << " 			          .dHD_out(dHD_wire), //(2^32d)                      \n";
 mod96 << " 			          .dLDinv_out(dLDinv_wire), //inverter d             \n";
 mod96 << " 					  .t1D_out(t1D_wire), //65-bit t1                    \n";
 mod96 << " 			          .t1_s_in(S_t1_reg_wire),                           \n";
 mod96 << " 			          .t1_c_in(C_t1_reg_wire),                           \n";
 mod96 << "                       .A_in(A_in),                                       \n";
 mod96 << " 		              .N_in(N_in)                                        \n";
 mod96 << "                        ) ;                                               \n";
 mod96 << " 	                                                                     \n";
 mod96 << " 	//(2^32e+f) mod prime                                                \n";
 mod96 << " 	CLA64_co u0_CLA64_co(.sum(S_tefp_wire),                              \n";
 mod96 << " 				         .c_out(C_tefp_wire),                            \n";
 mod96 << "                          .a_in(efD_wire),                                \n";
 mod96 << "                          .b_in(Ninv1_wire),                              \n";
 mod96 << "                          .c_in(1'b1)                                     \n";
 mod96 << " 			             // rst_n,                                       \n";
 mod96 << "                          // clk                                          \n";
 mod96 << "                          ) ;                                             \n";
 mod96 << " 	//                                                                   \n";
 mod96 << " 	ModMux u0_ModMux(.S_out(efp_wire),                                   \n";
 mod96 << "                      .A_in(S_tefp_wire), //Sel_in=1, positive number     \n";
 mod96 << " 		             .B_in(efD_wire), //Sel_in=0, negative number        \n";
 mod96 << " 			         .Sel_in(C_tefp_wire)                                \n";
 mod96 << "                      ) ;                                                 \n";
 mod96 << " 	                                                                     \n";
 mod96 << " 	//(2^32e+f)+(2^32d) mod prime                                        \n";
 mod96 << " 	CLA64_co u1_CLA64_co(.sum(S_t1_wire),                                \n";
 mod96 << " 				         .c_out(C_t1_wire),                              \n";
 mod96 << "                          .a_in(efp_wire),                                \n";
 mod96 << "                          .b_in(dHD_wire),                                \n";
 mod96 << "                          .c_in(1'b0)                                     \n";
 mod96 << " 			             // rst_n,                                       \n";
 mod96 << "                          // clk                                          \n";
 mod96 << "                          ) ;                                             \n";
 mod96 << " 	//Pipeline Register                                                  \n";
 mod96 << " 	R4_PipeReg3 u_R4_PipeReg3(.A0_out(S_t1_reg_wire),                    \n";
 mod96 << " 							  .Ac_out(C_t1_reg_wire),                    \n";
 mod96 << " 							  .Dinv_out(dLDinv_reg_wire),                \n";
 mod96 << " 							  .Ninv2_out(Ninv2_reg_wire),                \n";
 mod96 << "                               .A0_in(S_t1_wire),                         \n";
 mod96 << " 							  .Ac_in(C_t1_wire),                         \n";
 mod96 << " 							  .Dinv_in(dLDinv_wire),                     \n";
 mod96 << " 							  .Ninv2_in(Ninv2_wire),                     \n";
 mod96 << "                               .rst_n(rst_n),                             \n";
 mod96 << "                               .clk(clk)                                  \n";
 mod96 << "                               ) ;                                        \n";
 mod96 << " 	                                                                     \n";
 mod96 << " 	//                                                                   \n";
 mod96 << " 	CLA65 u0_CLA65(.sum(S_t2_wire),                                      \n";
 mod96 << " 				   .c_out(C_t2_wire),                                    \n";
 mod96 << "                    .a_in(t1D_wire),                                      \n";
 mod96 << "                    .b_in(Ninv2_reg_wire),                                \n";
 mod96 << "                    .c_in(1'b1)                                           \n";
 mod96 << " 			       // rst_n,                                             \n";
 mod96 << "                    // clk                                                \n";
 mod96 << "                    ) ;                                                   \n";
 mod96 << " 	//                                                                   \n";
 mod96 << " 	ModMux u1_ModMux(.S_out(t3_wire),                                    \n";
 mod96 << "                      .A_in(S_t2_wire[P_WIDTH-1:0]), //Sel_in=1           \n";
 mod96 << " 		             .B_in(S_t1_reg_wire), //Sel_in=0                    \n";
 mod96 << " 			         .Sel_in(C_t2_wire)                                  \n";
 mod96 << "                      ) ;                                                 \n";
 mod96 << " 	                                                                     \n";
 mod96 << " 	//(2^32e+f)+(2^32d)-(d) mod prime                                    \n";
 mod96 << " 	CLA64_co u2_CLA64_co(.sum(S_t4_wire),                                \n";
 mod96 << " 				         .c_out(C_t4_wire),                              \n";
 mod96 << "                          .a_in(t3_wire),                                 \n";
 mod96 << "                          .b_in(dLDinv_reg_wire),                         \n";
 mod96 << "                          .c_in(1'b1)                                     \n";
 mod96 << " 			             // rst_n,                                       \n";
 mod96 << "                          // clk                                          \n";
 mod96 << "                          ) ;                                             \n";
 mod96 << " 	//Pipeline Register                                                  \n";
 mod96 << " 	R4_PipeReg2 u0_R4_PipeReg2(.A0_out(S_t4_reg_wire),                   \n";
 mod96 << " 							   .Ac_out(C_t4_reg_wire),                   \n";
 mod96 << "                                .A0_in(S_t4_wire),                        \n";
 mod96 << " 							   .Ac_in(C_t4_wire),                        \n";
 mod96 << "                                .rst_n(rst_n),                            \n";
 mod96 << "                                .clk(clk)                                 \n";
 mod96 << "                                ) ;                                       \n";
 mod96 << " 	                                                                     \n";
 mod96 << " 	//                                                                   \n";
 mod96 << " 	CLA64_co u3_CLA64_co(.sum(S_t5_wire),                                \n";
 mod96 << " 				         .c_out(C_t5_wire),                              \n";
 mod96 << "                          .a_in(S_t4_reg_wire),                           \n";
 mod96 << "                          .b_in(N_D2_wire),                               \n";
 mod96 << "                          .c_in(1'b0)                                     \n";
 mod96 << " 			             // rst_n,                                       \n";
 mod96 << "                          // clk                                          \n";
 mod96 << "                          ) ;                                             \n";
 mod96 << " 	//                                                                   \n";
 mod96 << " 	ModMux u2_ModMux(.S_out(S_out),                                      \n";
 mod96 << "                      .A_in(S_t4_reg_wire), //Sel_in=1                    \n";
 mod96 << " 		             .B_in(S_t5_wire), //Sel_in=0                        \n";
 mod96 << " 			         .Sel_in(C_t4_reg_wire)                              \n";
 mod96 << "                      ) ;                                                 \n";
 mod96 << " 	                                                                     \n";
 mod96 << "                                                                          \n";
 mod96 << " 	//                                                                   \n";
 mod96 << " 	// always @(posedge clk or negedge rst_n) begin                      \n";
 mod96 << " 		// if(~rst_n) begin                                              \n";
 mod96 << " 			// S_out <= P_ZERO ;                                         \n";
 mod96 << " 		// end                                                           \n";
 mod96 << " 		// else begin                                                    \n";
 mod96 << " 			// S_out <= S_wire ;                                         \n";
 mod96 << " 		// end                                                           \n";
 mod96 << " 	// end                                                               \n";
 mod96 << "                                                                          \n";
 mod96 << " endmodule                                                                \n";
 mod96 << "                                                                          \n";     
     mod96.close();     
}

void Mod::Mod192_r4(std::string string_in){
	 std::ofstream mod192;
     std::string        string_buf = "/Mod192.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mod192.open(ss.str());
 mod192 << " `timescale 1 ns/1 ps                                                            \n";
 mod192 << " module Mod192(S_out,                                                            \n";
 mod192 << "            A_in,                                                                \n";
 mod192 << " 		   N_in,                                                                 \n";
 mod192 << "            rst_n,                                                               \n";
 mod192 << "            clk                                                                  \n";
 mod192 << "            ) ;                                                                  \n";
 mod192 << " parameter D_WIDTH     = 192 ;                                                   \n";
 mod192 << " parameter P_WIDTH     = 64 ;                                                    \n";
 mod192 << "                                                                                 \n";
 mod192 << " parameter P_ZERO      = 64'h0 ;                                                 \n";
 mod192 << "                                                                                 \n";
 mod192 << "                                                                                 \n";
 mod192 << " output[P_WIDTH-1:0] S_out ;                                                     \n";
 mod192 << "                                                                                 \n";
 mod192 << " input [D_WIDTH-1:0] A_in ;                                                      \n";
 mod192 << " input [P_WIDTH-1:0] N_in ;                                                      \n";
 mod192 << " input               rst_n ;                                                     \n";
 mod192 << " input               clk ;                                                       \n";
 mod192 << "                                                                                 \n";
 mod192 << "                                                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  Ninv1_wire ;                                               \n";
 mod192 << " wire  [P_WIDTH:0]    Ninv2_wire ;                                               \n";
 mod192 << " wire  [P_WIDTH-1:0]  efD_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  daD_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  bcD_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  adD_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH:0]    t1D_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH:0]    t4D_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  t6invD_wire ;                                              \n";
 mod192 << "                                                                                 \n";
 mod192 << "                                                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_tefp_wire ;                                              \n";
 mod192 << " wire                 C_tefp_wire ;                                              \n";
 mod192 << " wire  [P_WIDTH-1:0]  efp_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_tdap_wire ;                                              \n";
 mod192 << " wire                 C_tdap_wire ;                                              \n";
 mod192 << " wire  [P_WIDTH-1:0]  dap_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_tbcp_wire ;                                              \n";
 mod192 << " wire                 C_tbcp_wire ;                                              \n";
 mod192 << " wire  [P_WIDTH-1:0]  bcp_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_tadp_wire ;                                              \n";
 mod192 << " wire                 C_tadp_wire ;                                              \n";
 mod192 << " wire  [P_WIDTH-1:0]  adp_wire ;                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_t1_wire ;                                                \n";
 mod192 << " wire                 C_t1_wire ;                                                \n";
 mod192 << " wire  [P_WIDTH:0]    S_t2_wire ;                                                \n";
 mod192 << " wire                 C_t2_wire ;                                                \n";
 mod192 << " wire  [P_WIDTH-1:0]  t3_wire ;                                                  \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_t4_wire ;                                                \n";
 mod192 << " wire                 C_t4_wire ;                                                \n";
 mod192 << " wire  [P_WIDTH:0]    S_t5_wire ;                                                \n";
 mod192 << " wire                 C_t5_wire ;                                                \n";
 mod192 << " wire  [P_WIDTH-1:0]  t6_wire ;                                                  \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_t7_wire ;                                                \n";
 mod192 << " wire                 C_t7_wire ;                                                \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_t8_wire ;                                                \n";
 mod192 << " wire                 C_t8_wire ;                                                \n";
 mod192 << "                                                                                 \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_t1_reg_wire ;                                            \n";
 mod192 << " wire                 C_t1_reg_wire ;                                            \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                            \n";
 mod192 << " wire                 C_t4_reg_wire ;                                            \n";
 mod192 << " wire  [P_WIDTH-1:0]  S_t7_reg_wire ;                                            \n";
 mod192 << " wire                 C_t7_reg_wire ;                                            \n";
 mod192 << " wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                           \n";
 mod192 << " wire  [P_WIDTH-1:0]  N_D2_wire ;                                                \n";
 mod192 << "                                                                                 \n";
 mod192 << "                                                                                 \n";
 mod192 << " 	//Pipeline Register                                                          \n";
 mod192 << "     R4_NPipeReg2 u_R4_NPipeReg2(.Ninv2_D1_out(Ninv2_reg_wire),                  \n";
 mod192 << "                                 .N_D2_out(N_D2_wire),                           \n";
 mod192 << " 					            .Ninv2_in(Ninv2_wire),                           \n";
 mod192 << "                                 .N_in(N_in),                                    \n";
 mod192 << "                                 .rst_n(rst_n),                                  \n";
 mod192 << "                                 .clk(clk)                                       \n";
 mod192 << "                                 ) ;                                             \n";
 mod192 << "                                                                                 \n";
 mod192 << " 	//Pre-process Data                                                           \n";
 mod192 << " 	Mod192PD u_Mod192PD(.Ninv1_out(Ninv1_wire), //64-bit inverter N              \n";
 mod192 << "                         .Ninv2_out(Ninv2_wire), //65-bit inverter N             \n";
 mod192 << " 			            .efD_out(efD_wire), //(2^32e)+f                          \n";
 mod192 << " 				        .daD_out(daD_wire), //(2^32d)+a                          \n";
 mod192 << " 			            .bcD_out(bcD_wire), //(2^32b)+c                          \n";
 mod192 << " 				        .adD_out(adD_wire), //(2^32a)+d                          \n";
 mod192 << " 			            .t1D_out(t1D_wire), //65-bit t1                          \n";
 mod192 << " 				        .t4D_out(t4D_wire), //65-bit t4                          \n";
 mod192 << " 						.t6invD_out(t6invD_wire), // inverter t6                 \n";
 mod192 << " 			            .t1_s_in(S_t1_reg_wire),                                 \n";
 mod192 << " 			            .t1_c_in(C_t1_reg_wire),                                 \n";
 mod192 << " 				        .t4_s_in(S_t4_reg_wire),                                 \n";
 mod192 << " 			            .t4_c_in(C_t4_reg_wire),                                 \n";
 mod192 << " 						.t6_in(t6_wire),                                         \n";
 mod192 << "                         .A_in(A_in),                                            \n";
 mod192 << " 		                .N_in(N_in)                                              \n";
 mod192 << "                         ) ;                                                     \n";
 mod192 << "                                                                                 \n";
 mod192 << " 	//(2^32e+f) mod prime                                                        \n";
 mod192 << " 	CLA64_co u0_CLA64_co(.sum(S_tefp_wire),                                      \n";
 mod192 << " 				         .c_out(C_tefp_wire),                                    \n";
 mod192 << "                          .a_in(efD_wire),                                       \n";
 mod192 << "                          .b_in(Ninv1_wire),                                     \n";
 mod192 << "                          .c_in(1'b1)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	ModMux u0_ModMux(.S_out(efp_wire),                                           \n";
 mod192 << "                      .A_in(S_tefp_wire), //Sel_in=1, positive number            \n";
 mod192 << " 		             .B_in(efD_wire), //Sel_in=0, negative number                \n";
 mod192 << " 			         .Sel_in(C_tefp_wire)                                        \n";
 mod192 << "                      ) ;                                                        \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//(2^32d+a) mod prime	                                                     \n";
 mod192 << " 	CLA64_co u1_CLA64_co(.sum(S_tdap_wire),                                      \n";
 mod192 << " 				         .c_out(C_tdap_wire),                                    \n";
 mod192 << "                          .a_in(daD_wire),                                       \n";
 mod192 << "                          .b_in(Ninv1_wire),                                     \n";
 mod192 << "                          .c_in(1'b1)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	ModMux u1_ModMux(.S_out(dap_wire),                                           \n";
 mod192 << "                      .A_in(S_tdap_wire), //Sel_in=1, positive number            \n";
 mod192 << " 		             .B_in(daD_wire), //Sel_in=0, negative number                \n";
 mod192 << " 			         .Sel_in(C_tdap_wire)                                        \n";
 mod192 << "                      ) ;                                                        \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//(2^32b+c) mod prime                                                        \n";
 mod192 << " 	CLA64_co u2_CLA64_co(.sum(S_tbcp_wire),                                      \n";
 mod192 << " 				         .c_out(C_tbcp_wire),                                    \n";
 mod192 << "                          .a_in(bcD_wire),                                       \n";
 mod192 << "                          .b_in(Ninv1_wire),                                     \n";
 mod192 << "                          .c_in(1'b1)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	ModMux u2_ModMux(.S_out(bcp_wire),                                           \n";
 mod192 << "                      .A_in(S_tbcp_wire), //Sel_in=1, positive number            \n";
 mod192 << " 		             .B_in(bcD_wire), //Sel_in=0, negative number                \n";
 mod192 << " 			         .Sel_in(C_tbcp_wire)                                        \n";
 mod192 << "                      ) ;                                                        \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//(2^32a+d) mod prime                                                        \n";
 mod192 << " 	CLA64_co u3_CLA64_co(.sum(S_tadp_wire),                                      \n";
 mod192 << " 				         .c_out(C_tadp_wire),                                    \n";
 mod192 << "                          .a_in(adD_wire),                                       \n";
 mod192 << "                          .b_in(Ninv1_wire),                                     \n";
 mod192 << "                          .c_in(1'b1)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	ModMux u3_ModMux(.S_out(adp_wire),                                           \n";
 mod192 << "                      .A_in(S_tadp_wire), //Sel_in=1, positive number            \n";
 mod192 << " 		             .B_in(adD_wire), //Sel_in=0, negative number                \n";
 mod192 << " 			         .Sel_in(C_tadp_wire)                                        \n";
 mod192 << "                      ) ;                                                        \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//(2^32e+f)+(2^32d+a) mod prime                                              \n";
 mod192 << " 	CLA64_co u4_CLA64_co(.sum(S_t1_wire),                                        \n";
 mod192 << " 				         .c_out(C_t1_wire),                                      \n";
 mod192 << "                          .a_in(efp_wire),                                       \n";
 mod192 << "                          .b_in(dap_wire),                                       \n";
 mod192 << "                          .c_in(1'b0)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//Pipeline Register                                                          \n";
 mod192 << " 	R4_PipeReg2 u0_R4_PipeReg2(.A0_out(S_t1_reg_wire),                           \n";
 mod192 << " 							   .Ac_out(C_t1_reg_wire),                           \n";
 mod192 << "                                .A0_in(S_t1_wire),                               \n";
 mod192 << " 							   .Ac_in(C_t1_wire),                                \n";
 mod192 << "                                .rst_n(rst_n),                                   \n";
 mod192 << "                                .clk(clk)                                        \n";
 mod192 << "                                ) ;                                              \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	CLA65 u0_CLA65(.sum(S_t2_wire),                                              \n";
 mod192 << " 				   .c_out(C_t2_wire),                                            \n";
 mod192 << "                    .a_in(t1D_wire),                                             \n";
 mod192 << "                    .b_in(Ninv2_reg_wire),                                       \n";
 mod192 << "                    .c_in(1'b1)                                                  \n";
 mod192 << " 			       // rst_n,                                                     \n";
 mod192 << "                    // clk                                                       \n";
 mod192 << "                    ) ;                                                          \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	ModMux u4_ModMux(.S_out(t3_wire),                                            \n";
 mod192 << "                      .A_in(S_t2_wire[P_WIDTH-1:0]), //Sel_in=1                  \n";
 mod192 << " 		             .B_in(S_t1_reg_wire), //Sel_in=0                            \n";
 mod192 << " 			         .Sel_in(C_t2_wire)                                          \n";
 mod192 << "                      ) ;                                                        \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//(2^32b+c)+(2^32a+d) mod prime                                              \n";
 mod192 << " 	CLA64_co u5_CLA64_co(.sum(S_t4_wire),                                        \n";
 mod192 << " 				         .c_out(C_t4_wire),                                      \n";
 mod192 << "                          .a_in(bcp_wire),                                       \n";
 mod192 << "                          .b_in(adp_wire),                                       \n";
 mod192 << "                          .c_in(1'b0)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//Pipeline Register                                                          \n";
 mod192 << " 	R4_PipeReg2 u1_R4_PipeReg2(.A0_out(S_t4_reg_wire),                           \n";
 mod192 << " 							   .Ac_out(C_t4_reg_wire),                           \n";
 mod192 << "                                .A0_in(S_t4_wire),                               \n";
 mod192 << " 							   .Ac_in(C_t4_wire),                                \n";
 mod192 << "                                .rst_n(rst_n),                                   \n";
 mod192 << "                                .clk(clk)                                        \n";
 mod192 << "                                ) ;                                              \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	CLA65 u1_CLA65(.sum(S_t5_wire),                                              \n";
 mod192 << " 				   .c_out(C_t5_wire),                                            \n";
 mod192 << "                    .a_in(t4D_wire),                                             \n";
 mod192 << "                    .b_in(Ninv2_reg_wire),                                       \n";
 mod192 << "                    .c_in(1'b1)                                                  \n";
 mod192 << " 			       // rst_n,                                                     \n";
 mod192 << "                    // clk                                                       \n";
 mod192 << "                    ) ;                                                          \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	ModMux u5_ModMux(.S_out(t6_wire),                                            \n";
 mod192 << "                      .A_in(S_t5_wire[P_WIDTH-1:0]), //Sel_in=1                  \n";
 mod192 << " 		             .B_in(S_t4_reg_wire), //Sel_in=0                            \n";
 mod192 << " 			         .Sel_in(C_t5_wire)                                          \n";
 mod192 << "                      ) ;			                                             \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//(2^32e+f)+(2^32d+a)-(2^32b+c)+(2^32a+d) mod prime                          \n";
 mod192 << " 	CLA64_co u6_CLA64_co(.sum(S_t7_wire),                                        \n";
 mod192 << " 				         .c_out(C_t7_wire),                                      \n";
 mod192 << "                          .a_in(t3_wire),                                        \n";
 mod192 << "                          .b_in(t6invD_wire),                                    \n";
 mod192 << "                          .c_in(1'b1)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//Pipeline Register                                                          \n";
 mod192 << " 	R4_PipeReg2 u2_R4_PipeReg2(.A0_out(S_t7_reg_wire),                           \n";
 mod192 << " 							   .Ac_out(C_t7_reg_wire),                           \n";
 mod192 << "                                .A0_in(S_t7_wire),                               \n";
 mod192 << " 							   .Ac_in(C_t7_wire),                                \n";
 mod192 << "                                .rst_n(rst_n),                                   \n";
 mod192 << "                                .clk(clk)                                        \n";
 mod192 << "                                ) ;                                              \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	CLA64_co u7_CLA64_co(.sum(S_t8_wire),                                        \n";
 mod192 << " 				         .c_out(C_t8_wire),                                      \n";
 mod192 << "                          .a_in(S_t7_reg_wire),                                  \n";
 mod192 << "                          .b_in(N_D2_wire),                                      \n";
 mod192 << "                          .c_in(1'b0)                                            \n";
 mod192 << " 			             // rst_n,                                               \n";
 mod192 << "                          // clk                                                 \n";
 mod192 << "                          ) ;                                                    \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	ModMux u6_ModMux(.S_out(S_out),                                              \n";
 mod192 << "                      .A_in(S_t7_reg_wire), //Sel_in=1                           \n";
 mod192 << " 		             .B_in(S_t8_wire), //Sel_in=0                                \n";
 mod192 << " 			         .Sel_in(C_t7_reg_wire)                                      \n";
 mod192 << "                      ) ;                                                        \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	                                                                             \n";
 mod192 << " 	//                                                                           \n";
 mod192 << " 	// always @(posedge clk or negedge rst_n) begin                              \n";
 mod192 << " 		// if(~rst_n) begin                                                      \n";
 mod192 << " 			// S_out <= P_ZERO ;                                                 \n";
 mod192 << " 		// end                                                                   \n";
 mod192 << " 		// else begin                                                            \n";
 mod192 << " 			// S_out <= S_wire ;                                                 \n";
 mod192 << " 		// end                                                                   \n";
 mod192 << " 	// end                                                                       \n";
 mod192 << "                                                                                 \n";
 mod192 << " endmodule                                                                       \n";
     
     mod192.close();     
}
void Mod::MulMod128_r4(std::string string_in){
     std::ofstream mulmod128_r4;   
     std::string        string_buf = "/MulMod128.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
     mulmod128_r4.open(ss.str());
 mulmod128_r4 << " //==================================================                                     \n";
 mulmod128_r4 << " //Writer     : Jheng-Hao Ye                                                              \n";
 mulmod128_r4 << " //Date       : 2018/8/1                                                                  \n";
 mulmod128_r4 << " //Note       : Multiplication 128-bit mod prime                                          \n";
 mulmod128_r4 << " //==================================================                                     \n";
 mulmod128_r4 << " `timescale 1 ns/1 ps                                                                     \n";
 mulmod128_r4 << " module MulMod128(S_out,                                                                  \n";
 mulmod128_r4 << "            A_in,                                                                         \n";
 mulmod128_r4 << " 		   B_in,                                                                            \n";
 mulmod128_r4 << " 		   N_in,                                                                            \n";
 mulmod128_r4 << "            rst_n,                                                                        \n";
 mulmod128_r4 << "            clk                                                                           \n";
 mulmod128_r4 << "            ) ;                                                                           \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " parameter P_WIDTH     = 64 ;                                                             \n";
 mulmod128_r4 << " parameter PD_WIDTH    = 128 ;                                                            \n";
 mulmod128_r4 << " parameter W_WIDTH     = 32 ;                                                             \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " output[P_WIDTH-1:0] S_out ;                                                              \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " input [P_WIDTH-1:0] A_in ;                                                               \n";
 mulmod128_r4 << " input [P_WIDTH-1:0] B_in ;                                                               \n";
 mulmod128_r4 << " input [P_WIDTH-1:0] N_in ;                                                               \n";
 mulmod128_r4 << " input               rst_n ;                                                              \n";
 mulmod128_r4 << " input               clk ;                                                                \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " wire  [PD_WIDTH-1:0] Mul_wire ;                                                          \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " wire  [P_WIDTH:0]    Ninv2_wire ;                                                        \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  t1FD_wire ;                                                         \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  t1D_wire ;                                                          \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  t3inv1D_wire ;                                                      \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  dD_wire ;                                                           \n";
 mulmod128_r4 << " wire  [P_WIDTH:0]    t7D_wire ;                                                          \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " wire  [W_WIDTH-1:0]  S_t1_wire ;                                                         \n";
 mulmod128_r4 << " wire                 C_t1_wire ;                                                         \n";
 mulmod128_r4 << " wire  [W_WIDTH-1:0]  S_t3_wire ;                                                         \n";
 mulmod128_r4 << " wire                 C_t3_wire ;                                                         \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  t2_wire ;                                                           \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  S_t4_wire ;                                                         \n";
 mulmod128_r4 << " wire                 C_t4_wire ;                                                         \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  S_t5_wire ;                                                         \n";
 mulmod128_r4 << " wire                 C_t5_wire ;                                                         \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  t6_wire ;                                                           \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  S_t7_wire ;                                                         \n";
 mulmod128_r4 << " wire                 C_t7_wire ;                                                         \n";
 mulmod128_r4 << " wire  [P_WIDTH:0]    S_t8_wire ;                                                         \n";
 mulmod128_r4 << " wire                 C_t8_wire ;                                                         \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  S_out_wire ;                                                        \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                                     \n";
 mulmod128_r4 << " wire                 C_t4_reg_wire ;                                                     \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  N_D1_wire ;                                                         \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  dD_reg_wire ;                                                       \n";
 mulmod128_r4 << " wire  [P_WIDTH-1:0]  S_t7_reg_wire ;                                                     \n";
 mulmod128_r4 << " wire                 C_t7_reg_wire ;                                                     \n";
 mulmod128_r4 << " wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                                    \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//Mul                                                                                   \n";
 mulmod128_r4 << " 	Mul64 u_Mul64(.S_out(Mul_wire),                                                         \n";
 mulmod128_r4 << " 		          .A_in(A_in),                                                              \n";
 mulmod128_r4 << " 		          .B_in(B_in),                                                              \n";
 mulmod128_r4 << "                   .rst_n(rst_n),                                                         \n";
 mulmod128_r4 << "                   .clk(clk)                                                              \n";
 mulmod128_r4 << "                   ) ;                                                                    \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " 	//Pre-process Data                                                                      \n";
 mulmod128_r4 << "     MulMod128PD u_MulMod128PD(.Ninv2_out(Ninv2_wire),                                    \n";
 mulmod128_r4 << " 			                  .t1FD_wire(t1FD_wire),                                        \n";
 mulmod128_r4 << " 				              .t1D_wire(t1D_wire),                                          \n";
 mulmod128_r4 << " 			                  .t3inv1D_wire(t3inv1D_wire),                                  \n";
 mulmod128_r4 << " 				              .dD_wire(dD_wire),                                            \n";
 mulmod128_r4 << " 			                  .t7D_wire(t7D_wire),                                          \n";
 mulmod128_r4 << " 			                  .t1_s_in(S_t1_wire),                                          \n";
 mulmod128_r4 << " 			                  .t3_s_in(S_t3_wire),                                          \n";
 mulmod128_r4 << " 				              .t3_c_in(C_t3_wire),                                          \n";
 mulmod128_r4 << " 			                  .t7_s_in(S_t7_reg_wire),                                      \n";
 mulmod128_r4 << " 				              .t7_c_in(C_t7_reg_wire),                                      \n";
 mulmod128_r4 << "                               .Mul_in(Mul_wire),                                         \n";
 mulmod128_r4 << " 		                      .N_in(N_in)                                                   \n";
 mulmod128_r4 << "                                ) ;                                                       \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//b+c                                                                                   \n";
 mulmod128_r4 << " 	CLA32 u0_CLA32(.sum(S_t1_wire),                                                         \n";
 mulmod128_r4 << " 				   .c_out(C_t1_wire),                                                       \n";
 mulmod128_r4 << "                    .a_in(Mul_wire[95:64]),                                               \n";
 mulmod128_r4 << "                    .b_in(Mul_wire[63:32]),                                               \n";
 mulmod128_r4 << "                    .c_in(1'b0)                                                           \n";
 mulmod128_r4 << " 			       // rst_n,                                                                \n";
 mulmod128_r4 << "                    // clk                                                                \n";
 mulmod128_r4 << "                    ) ;                                                                   \n";
 mulmod128_r4 << " 	//a+b                                                                                   \n";
 mulmod128_r4 << " 	CLA32 u1_CLA32(.sum(S_t3_wire),                                                         \n";
 mulmod128_r4 << " 				   .c_out(C_t3_wire),                                                       \n";
 mulmod128_r4 << "                    .a_in(Mul_wire[127:96]),                                              \n";
 mulmod128_r4 << "                    .b_in(Mul_wire[95:64]),                                               \n";
 mulmod128_r4 << "                    .c_in(1'b0)                                                           \n";
 mulmod128_r4 << " 			       // rst_n,                                                                \n";
 mulmod128_r4 << "                    // clk                                                                \n";
 mulmod128_r4 << "                    ) ;		                                                            \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//(2^32)(b+c)                                                                           \n";
 mulmod128_r4 << " 	ModMux u0_ModMux(.S_out(t2_wire),                                                       \n";
 mulmod128_r4 << "                      .A_in(t1FD_wire), //Sel_in=1                                        \n";
 mulmod128_r4 << " 		             .B_in(t1D_wire), //Sel_in=0                                            \n";
 mulmod128_r4 << " 			         .Sel_in(C_t1_wire)                                                     \n";
 mulmod128_r4 << "                      ) ;                                                                 \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//(2^32)(b+c)-(a+b)                                                                     \n";
 mulmod128_r4 << " 	CLA64_co u0_CLA64_co(.sum(S_t4_wire),                                                   \n";
 mulmod128_r4 << " 				         .c_out(C_t4_wire),                                                 \n";
 mulmod128_r4 << "                          .a_in(t2_wire),                                                 \n";
 mulmod128_r4 << "                          .b_in(t3inv1D_wire),                                            \n";
 mulmod128_r4 << "                          .c_in(1'b1)                                                     \n";
 mulmod128_r4 << " 			             // rst_n,                                                          \n";
 mulmod128_r4 << "                          // clk                                                          \n";
 mulmod128_r4 << "                          ) ;                                                             \n";
 mulmod128_r4 << " 	//Pipeline Register                                                                     \n";
 mulmod128_r4 << " 	R4_PipeReg4_2 u0_R4_PipeReg4_2(.A0_out(S_t4_reg_wire),                                  \n";
 mulmod128_r4 << " 								   .Ac_out(C_t4_reg_wire),                                  \n";
 mulmod128_r4 << " 								   .N_D1_out(N_D1_wire),                                    \n";
 mulmod128_r4 << " 								   .D_out(dD_reg_wire),                                     \n";
 mulmod128_r4 << "                                    .A0_in(S_t4_wire),                                    \n";
 mulmod128_r4 << " 								   .Ac_in(C_t4_wire),                                       \n";
 mulmod128_r4 << " 								   .N_in(N_in),                                             \n";
 mulmod128_r4 << " 								   .D_in(dD_wire),                                          \n";
 mulmod128_r4 << "                                    .rst_n(rst_n),                                        \n";
 mulmod128_r4 << "                                    .clk(clk)                                             \n";
 mulmod128_r4 << "                                    ) ;                                                   \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//                                                                                      \n";
 mulmod128_r4 << " 	CLA64_co u1_CLA64_co(.sum(S_t5_wire),                                                   \n";
 mulmod128_r4 << " 				         .c_out(C_t5_wire),                                                 \n";
 mulmod128_r4 << "                          .a_in(S_t4_reg_wire),                                           \n";
 mulmod128_r4 << "                          .b_in(N_D1_wire),                                               \n";
 mulmod128_r4 << "                          .c_in(1'b0)                                                     \n";
 mulmod128_r4 << " 			             // rst_n,                                                          \n";
 mulmod128_r4 << "                          // clk                                                          \n";
 mulmod128_r4 << "                          ) ;  			                                                \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//                                                                                      \n";
 mulmod128_r4 << " 	ModMux u1_ModMux(.S_out(t6_wire),                                                       \n";
 mulmod128_r4 << "                      .A_in(S_t4_reg_wire), //Sel_in=1                                    \n";
 mulmod128_r4 << " 		             .B_in(S_t5_wire), //Sel_in=0                                           \n";
 mulmod128_r4 << " 			         .Sel_in(C_t4_reg_wire)                                                 \n";
 mulmod128_r4 << "                      ) ;                                                                 \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//2^32)(b+c)-(a+b)+d                                                                    \n";
 mulmod128_r4 << " 	CLA64_co u2_CLA64_co(.sum(S_t7_wire),                                                   \n";
 mulmod128_r4 << " 				         .c_out(C_t7_wire),                                                 \n";
 mulmod128_r4 << "                          .a_in(t6_wire),                                                 \n";
 mulmod128_r4 << "                          .b_in(dD_reg_wire),                                             \n";
 mulmod128_r4 << "                          .c_in(1'b0)                                                     \n";
 mulmod128_r4 << " 			             // rst_n,                                                          \n";
 mulmod128_r4 << "                          // clk                                                          \n";
 mulmod128_r4 << "                          ) ;  					                                        \n";
 mulmod128_r4 << " 	//Pipeline Register                                                                     \n";
 mulmod128_r4 << " 	R4_PipeReg4 u_R4_PipeReg4(.A0_out(S_t7_reg_wire),                                       \n";
 mulmod128_r4 << " 					          .Ac_out(C_t7_reg_wire),                                       \n";
 mulmod128_r4 << " 					          .Ninv2_D2_out(Ninv2_reg_wire),                                \n";
 mulmod128_r4 << "                               .A0_in(S_t7_wire),                                         \n";
 mulmod128_r4 << " 					          .Ac_in(C_t7_wire),                                            \n";
 mulmod128_r4 << " 					          .Ninv2_in(Ninv2_wire),                                        \n";
 mulmod128_r4 << "                               .rst_n(rst_n),                                             \n";
 mulmod128_r4 << "                               .clk(clk)                                                  \n";
 mulmod128_r4 << "                               ) ;                                                        \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " 	//                                                                                      \n";
 mulmod128_r4 << " 	CLA65 u0_CLA65(.sum(S_t8_wire),                                                         \n";
 mulmod128_r4 << " 				   .c_out(C_t8_wire),                                                       \n";
 mulmod128_r4 << "                    .a_in(t7D_wire),                                                      \n";
 mulmod128_r4 << "                    .b_in(Ninv2_reg_wire),                                                \n";
 mulmod128_r4 << "                    .c_in(1'b1)                                                           \n";
 mulmod128_r4 << " 			       // rst_n,                                                                \n";
 mulmod128_r4 << "                    // clk                                                                \n";
 mulmod128_r4 << "                    ) ;                                                                   \n";
 mulmod128_r4 << " 	//                                                                                      \n";
 mulmod128_r4 << " 	ModMux u2_ModMux(.S_out(S_out),                                                         \n";
 mulmod128_r4 << "                      .A_in(S_t8_wire[P_WIDTH-1:0]), //Sel_in=1                           \n";
 mulmod128_r4 << " 		             .B_in(S_t7_reg_wire), //Sel_in=0                                       \n";
 mulmod128_r4 << " 			         .Sel_in(C_t8_wire)                                                     \n";
 mulmod128_r4 << "                      ) ;                                                                 \n";
 mulmod128_r4 << "                                                                                          \n";
 mulmod128_r4 << " 	                                                                                        \n";
 mulmod128_r4 << " endmodule                                                                                \n";            
     mulmod128_r4.close();  
}
//radix-8
void Mod::Mod96_r8(std::string string_in){
	 std::ofstream mod96;
     std::string        string_buf = "/Mod96.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mod96.open(ss.str());
mod96  << " module Mod96(S_out,                                                           \n";
mod96  << "              A_in,                                                            \n";
mod96  << " 		     N_in,                                                            \n";
mod96  << "              rst_n,                                                           \n";
mod96  << "              clk                                                              \n";
mod96  << "              ) ;                                                              \n";
mod96  << " parameter D_WIDTH     = 96 ;                                                  \n";
mod96  << " parameter P_WIDTH     = 64 ;                                                  \n";
mod96  << " parameter SEG_ZERO    = 32'h0 ;                                               \n";
mod96  << " parameter P_ZERO      = 64'h0 ;                                               \n";
mod96  << "                                                                               \n";
mod96  << "                                                                               \n";
mod96  << " output[P_WIDTH-1:0] S_out ;                                                   \n";
mod96  << "                                                                               \n";
mod96  << " input [D_WIDTH-1:0] A_in ;                                                    \n";
mod96  << " input [P_WIDTH-1:0] N_in ;                                                    \n";
mod96  << " input               rst_n ;                                                   \n";
mod96  << " input               clk ;                                                     \n";
mod96  << "                                                                               \n";
mod96  << "                                                                               \n";
mod96  << " wire  [P_WIDTH-1:0]  Ninv1_wire ;                                             \n";
mod96  << " wire  [P_WIDTH:0]    Ninv2_wire ;                                             \n";
mod96  << " wire  [P_WIDTH-1:0]  efD_wire ;                                               \n";
mod96  << " wire  [P_WIDTH-1:0]  dHD_wire ;                                               \n";
mod96  << " wire  [P_WIDTH-1:0]  dLDinv_wire ;                                            \n";
mod96  << " wire  [P_WIDTH:0]    t1D_wire ;                                               \n";
mod96  << "                                                                               \n";
mod96  << " wire  [P_WIDTH-1:0]  S_tefp_wire ;                                            \n";
mod96  << " wire                 C_tefp_wire ;                                            \n";
mod96  << " wire  [P_WIDTH-1:0]  efp_wire ;                                               \n";
mod96  << " wire  [P_WIDTH-1:0]  S_t1_wire ;                                              \n";
mod96  << " wire                 C_t1_wire ;                                              \n";
mod96  << " wire  [P_WIDTH:0]    S_t2_wire ;                                              \n";
mod96  << " wire                 C_t2_wire ;                                              \n";
mod96  << " wire  [P_WIDTH-1:0]  t3_wire ;                                                \n";
mod96  << " wire  [P_WIDTH-1:0]  S_t4_wire ;                                              \n";
mod96  << " wire                 C_t4_wire ;	                                          \n";
mod96  << " wire  [P_WIDTH-1:0]  S_t5_wire ;                                              \n";
mod96  << " wire                 C_t5_wire ;                                              \n";
mod96  << "                                                                               \n";
mod96  << " wire  [P_WIDTH-1:0]  S_t1_reg_wire ;                                          \n";
mod96  << " wire                 C_t1_reg_wire ;                                          \n";
mod96  << " wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                          \n";
mod96  << " wire                 C_t4_reg_wire ;                                          \n";
mod96  << " wire  [P_WIDTH-1:0]  dLDinv_reg_wire ;                                        \n";
mod96  << " wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                         \n";
mod96  << " wire  [P_WIDTH-1:0]  N_D2_wire ;                                              \n";
mod96  << "                                                                               \n";
mod96  << " 	                                                                          \n";
mod96  << " 	//Pipeline Register                                                       \n";
mod96  << " 	R8_NPipeReg1 u_R8_NPipeReg1(.N_D2_out(N_D2_wire),                         \n";
mod96  << "                                 .N_in(N_in),                                  \n";
mod96  << "                                 .rst_n(rst_n),                                \n";
mod96  << "                                 .clk(clk)                                     \n";
mod96  << "                                 ) ;                                           \n";
mod96  << " 	                                                                          \n";
mod96  << " 	//Pre-process Data                                                        \n";
mod96  << " 	Mod96PD u_Mod96PD(.Ninv1_out(Ninv1_wire), //64-bit inverter N             \n";
mod96  << "                       .Ninv2_out(Ninv2_wire), //65-bit inverter N             \n";
mod96  << " 			          .efD_out(efD_wire), //(2^32e)+f                         \n";
mod96  << " 			          .dHD_out(dHD_wire), //(2^32d)                           \n";
mod96  << " 			          .dLDinv_out(dLDinv_wire), //inverter d                  \n";
mod96  << " 					  .t1D_out(t1D_wire), //65-bit t1                         \n";
mod96  << " 			          .t1_s_in(S_t1_reg_wire),                                \n";
mod96  << " 			          .t1_c_in(C_t1_reg_wire),                                \n";
mod96  << "                       .A_in(A_in),                                            \n";
mod96  << " 		              .N_in(N_in)                                             \n";
mod96  << "                        ) ;                                                    \n";
mod96  << " 	                                                                          \n";
mod96  << " 	//(2^32e+f) mod prime                                                     \n";
mod96  << " 	CLA64_co u0_CLA64_co(.sum(S_tefp_wire),                                   \n";
mod96  << " 				         .c_out(C_tefp_wire),                                 \n";
mod96  << "                          .a_in(efD_wire),                                     \n";
mod96  << "                          .b_in(Ninv1_wire),                                   \n";
mod96  << "                          .c_in(1'b1)                                          \n";
mod96  << " 			             // rst_n,                                            \n";
mod96  << "                          // clk                                               \n";
mod96  << "                          ) ;                                                  \n";
mod96  << " 	//                                                                        \n";
mod96  << " 	ModMux u0_ModMux(.S_out(efp_wire),                                        \n";
mod96  << "                      .A_in(S_tefp_wire), //Sel_in=1, positive number          \n";
mod96  << " 		             .B_in(efD_wire), //Sel_in=0, negative number             \n";
mod96  << " 			         .Sel_in(C_tefp_wire)                                     \n";
mod96  << "                      ) ;                                                      \n";
mod96  << " 	                                                                          \n";
mod96  << " 	//(2^32e+f)+(2^32d) mod prime                                             \n";
mod96  << " 	CLA64_co u1_CLA64_co(.sum(S_t1_wire),                                     \n";
mod96  << " 				         .c_out(C_t1_wire),                                   \n";
mod96  << "                          .a_in(efp_wire),                                     \n";
mod96  << "                          .b_in(dHD_wire),                                     \n";
mod96  << "                          .c_in(1'b0)                                          \n";
mod96  << " 			             // rst_n,                                            \n";
mod96  << "                          // clk                                               \n";
mod96  << "                          ) ;                                                  \n";
mod96  << " 	//Pipeline Register                                                       \n";
mod96  << " 	R8_PipeReg3 u_R8_PipeReg3(.A0_out(S_t1_reg_wire),                         \n";
mod96  << " 							  .Ac_out(C_t1_reg_wire),                         \n";
mod96  << " 							  .Dinv_out(dLDinv_reg_wire),                     \n";
mod96  << " 							  .Ninv2_out(Ninv2_reg_wire),                     \n";
mod96  << "                               .A0_in(S_t1_wire),                              \n";
mod96  << " 							  .Ac_in(C_t1_wire),                              \n";
mod96  << " 							  .Dinv_in(dLDinv_wire),                          \n";
mod96  << " 							  .Ninv2_in(Ninv2_wire),                          \n";
mod96  << "                               .rst_n(rst_n),                                  \n";
mod96  << "                               .clk(clk)                                       \n";
mod96  << "                               ) ;                                             \n";
mod96  << " 	                                                                          \n";
mod96  << " 	//                                                                        \n";
mod96  << " 	CLA65 u0_CLA65(.sum(S_t2_wire),                                           \n";
mod96  << " 				   .c_out(C_t2_wire),                                         \n";
mod96  << "                    .a_in(t1D_wire),                                           \n";
mod96  << "                    .b_in(Ninv2_reg_wire),                                     \n";
mod96  << "                    .c_in(1'b1)                                                \n";
mod96  << " 			       // rst_n,                                                  \n";
mod96  << "                    // clk                                                     \n";
mod96  << "                    ) ;                                                        \n";
mod96  << " 	//                                                                        \n";
mod96  << " 	ModMux u1_ModMux(.S_out(t3_wire),                                         \n";
mod96  << "                      .A_in(S_t2_wire[P_WIDTH-1:0]), //Sel_in=1                \n";
mod96  << " 		             .B_in(S_t1_reg_wire), //Sel_in=0                         \n";
mod96  << " 			         .Sel_in(C_t2_wire)                                       \n";
mod96  << "                      ) ;                                                      \n";
mod96  << " 	                                                                          \n";
mod96  << " 	//(2^32e+f)+(2^32d)-(d) mod prime                                         \n";
mod96  << " 	CLA64_co u2_CLA64_co(.sum(S_t4_wire),                                     \n";
mod96  << " 				         .c_out(C_t4_wire),                                   \n";
mod96  << "                          .a_in(t3_wire),                                      \n";
mod96  << "                          .b_in(dLDinv_reg_wire),                              \n";
mod96  << "                          .c_in(1'b1)                                          \n";
mod96  << " 			             // rst_n,                                            \n";
mod96  << "                          // clk                                               \n";
mod96  << "                          ) ;                                                  \n";
mod96  << " 	//Pipeline Register                                                       \n";
mod96  << " 	R8_PipeReg2 u0_R8_PipeReg2(.A0_out(S_t4_reg_wire),                        \n";
mod96  << " 							   .Ac_out(C_t4_reg_wire),                        \n";
mod96  << "                                .A0_in(S_t4_wire),                             \n";
mod96  << " 							   .Ac_in(C_t4_wire),                             \n";
mod96  << "                                .rst_n(rst_n),                                 \n";
mod96  << "                                .clk(clk)                                      \n";
mod96  << "                                ) ;                                            \n";
mod96  << " 	                                                                          \n";
mod96  << " 	//                                                                        \n";
mod96  << " 	CLA64_co u3_CLA64_co(.sum(S_t5_wire),                                     \n";
mod96  << " 				         .c_out(C_t5_wire),                                   \n";
mod96  << "                          .a_in(S_t4_reg_wire),                                \n";
mod96  << "                          .b_in(N_D2_wire),                                    \n";
mod96  << "                          .c_in(1'b0)                                          \n";
mod96  << " 			             // rst_n,                                            \n";
mod96  << "                          // clk                                               \n";
mod96  << "                          ) ;                                                  \n";
mod96  << " 	//                                                                        \n";
mod96  << " 	ModMux u2_ModMux(.S_out(S_out),                                           \n";
mod96  << "                      .A_in(S_t4_reg_wire), //Sel_in=1                         \n";
mod96  << " 		             .B_in(S_t5_wire), //Sel_in=0                             \n";
mod96  << " 			         .Sel_in(C_t4_reg_wire)                                   \n";
mod96  << "                      ) ;                                                      \n";
mod96  << " 	                                                                          \n";
mod96  << "                                                                               \n";
mod96  << " 	//                                                                        \n";
mod96  << " 	// always @(posedge clk or negedge rst_n) begin                           \n";
mod96  << " 		// if(~rst_n) begin                                                   \n";
mod96  << " 			// S_out <= P_ZERO ;                                              \n";
mod96  << " 		// end                                                                \n";
mod96  << " 		// else begin                                                         \n";
mod96  << " 			// S_out <= S_wire ;                                              \n";
mod96  << " 		// end                                                                \n";
mod96  << " 	// end                                                                    \n";
mod96  << "                                                                               \n";
mod96  << " endmodule                                                                     \n";           
           
     mod96.close();     
}
void Mod::Mod192_r8(std::string string_in){
	 std::ofstream mod192;
     std::string        string_buf = "/Mod192.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mod192.open(ss.str());
mod192  << " `timescale 1 ns/1 ps                                                               \n";
mod192  << " module Mod192(S_out,                                                               \n";
mod192  << "            A_in,                                                                   \n";
mod192  << " 		   N_in,                                                                    \n";
mod192  << "            rst_n,                                                                  \n";
mod192  << "            clk                                                                     \n";
mod192  << "            ) ;                                                                     \n";
mod192  << " parameter D_WIDTH     = 192 ;                                                      \n";
mod192  << " parameter P_WIDTH     = 64 ;                                                       \n";
mod192  << "                                                                                    \n";
mod192  << " parameter P_ZERO      = 64'h0 ;                                                    \n";
mod192  << "                                                                                    \n";
mod192  << "                                                                                    \n";
mod192  << " output[P_WIDTH-1:0] S_out ;                                                        \n";
mod192  << "                                                                                    \n";
mod192  << " input [D_WIDTH-1:0] A_in ;                                                         \n";
mod192  << " input [P_WIDTH-1:0] N_in ;                                                         \n";
mod192  << " input               rst_n ;                                                        \n";
mod192  << " input               clk ;                                                          \n";
mod192  << "                                                                                    \n";
mod192  << "                                                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  Ninv1_wire ;                                                  \n";
mod192  << " wire  [P_WIDTH:0]    Ninv2_wire ;                                                  \n";
mod192  << " wire  [P_WIDTH-1:0]  efD_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  daD_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  bcD_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  adD_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH:0]    t1D_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH:0]    t4D_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  t6invD_wire ;                                                 \n";
mod192  << "                                                                                    \n";
mod192  << "                                                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  S_tefp_wire ;                                                 \n";
mod192  << " wire                 C_tefp_wire ;                                                 \n";
mod192  << " wire  [P_WIDTH-1:0]  efp_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  S_tdap_wire ;                                                 \n";
mod192  << " wire                 C_tdap_wire ;                                                 \n";
mod192  << " wire  [P_WIDTH-1:0]  dap_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  S_tbcp_wire ;                                                 \n";
mod192  << " wire                 C_tbcp_wire ;                                                 \n";
mod192  << " wire  [P_WIDTH-1:0]  bcp_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  S_tadp_wire ;                                                 \n";
mod192  << " wire                 C_tadp_wire ;                                                 \n";
mod192  << " wire  [P_WIDTH-1:0]  adp_wire ;                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  S_t1_wire ;                                                   \n";
mod192  << " wire                 C_t1_wire ;                                                   \n";
mod192  << " wire  [P_WIDTH:0]    S_t2_wire ;                                                   \n";
mod192  << " wire                 C_t2_wire ;                                                   \n";
mod192  << " wire  [P_WIDTH-1:0]  t3_wire ;                                                     \n";
mod192  << " wire  [P_WIDTH-1:0]  S_t4_wire ;                                                   \n";
mod192  << " wire                 C_t4_wire ;                                                   \n";
mod192  << " wire  [P_WIDTH:0]    S_t5_wire ;                                                   \n";
mod192  << " wire                 C_t5_wire ;                                                   \n";
mod192  << " wire  [P_WIDTH-1:0]  t6_wire ;                                                     \n";
mod192  << " wire  [P_WIDTH-1:0]  S_t7_wire ;                                                   \n";
mod192  << " wire                 C_t7_wire ;                                                   \n";
mod192  << " wire  [P_WIDTH-1:0]  S_t8_wire ;                                                   \n";
mod192  << " wire                 C_t8_wire ;                                                   \n";
mod192  << "                                                                                    \n";
mod192  << " wire  [P_WIDTH-1:0]  S_t1_reg_wire ;                                               \n";
mod192  << " wire                 C_t1_reg_wire ;                                               \n";
mod192  << " wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                               \n";
mod192  << " wire                 C_t4_reg_wire ;                                               \n";
mod192  << " wire  [P_WIDTH-1:0]  S_t7_reg_wire ;                                               \n";
mod192  << " wire                 C_t7_reg_wire ;                                               \n";
mod192  << " wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                              \n";
mod192  << " wire  [P_WIDTH-1:0]  N_D2_wire ;                                                   \n";
mod192  << "                                                                                    \n";
mod192  << "                                                                                    \n";
mod192  << " 	//Pipeline Register                                                             \n";
mod192  << "     R8_NPipeReg2 u_R8_NPipeReg2(.Ninv2_D1_out(Ninv2_reg_wire),                     \n";
mod192  << "                                 .N_D2_out(N_D2_wire),                              \n";
mod192  << " 					            .Ninv2_in(Ninv2_wire),                              \n";
mod192  << "                                 .N_in(N_in),                                       \n";
mod192  << "                                 .rst_n(rst_n),                                     \n";
mod192  << "                                 .clk(clk)                                          \n";
mod192  << "                                 ) ;                                                \n";
mod192  << "                                                                                    \n";
mod192  << " 	//Pre-process Data                                                              \n";
mod192  << " 	Mod192PD u_Mod192PD(.Ninv1_out(Ninv1_wire), //64-bit inverter N                 \n";
mod192  << "                         .Ninv2_out(Ninv2_wire), //65-bit inverter N                \n";
mod192  << " 			            .efD_out(efD_wire), //(2^32e)+f                             \n";
mod192  << " 				        .daD_out(daD_wire), //(2^32d)+a                             \n";
mod192  << " 			            .bcD_out(bcD_wire), //(2^32b)+c                             \n";
mod192  << " 				        .adD_out(adD_wire), //(2^32a)+d                             \n";
mod192  << " 			            .t1D_out(t1D_wire), //65-bit t1                             \n";
mod192  << " 				        .t4D_out(t4D_wire), //65-bit t4                             \n";
mod192  << " 						.t6invD_out(t6invD_wire), // inverter t6                    \n";
mod192  << " 			            .t1_s_in(S_t1_reg_wire),                                    \n";
mod192  << " 			            .t1_c_in(C_t1_reg_wire),                                    \n";
mod192  << " 				        .t4_s_in(S_t4_reg_wire),                                    \n";
mod192  << " 			            .t4_c_in(C_t4_reg_wire),                                    \n";
mod192  << " 						.t6_in(t6_wire),                                            \n";
mod192  << "                         .A_in(A_in),                                               \n";
mod192  << " 		                .N_in(N_in)                                                 \n";
mod192  << "                         ) ;                                                        \n";
mod192  << "                                                                                    \n";
mod192  << " 	//(2^32e+f) mod prime                                                           \n";
mod192  << " 	CLA64_co u0_CLA64_co(.sum(S_tefp_wire),                                         \n";
mod192  << " 				         .c_out(C_tefp_wire),                                       \n";
mod192  << "                          .a_in(efD_wire),                                          \n";
mod192  << "                          .b_in(Ninv1_wire),                                        \n";
mod192  << "                          .c_in(1'b1)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	ModMux u0_ModMux(.S_out(efp_wire),                                              \n";
mod192  << "                      .A_in(S_tefp_wire), //Sel_in=1, positive number               \n";
mod192  << " 		             .B_in(efD_wire), //Sel_in=0, negative number                   \n";
mod192  << " 			         .Sel_in(C_tefp_wire)                                           \n";
mod192  << "                      ) ;                                                           \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//(2^32d+a) mod prime	                                                        \n";
mod192  << " 	CLA64_co u1_CLA64_co(.sum(S_tdap_wire),                                         \n";
mod192  << " 				         .c_out(C_tdap_wire),                                       \n";
mod192  << "                          .a_in(daD_wire),                                          \n";
mod192  << "                          .b_in(Ninv1_wire),                                        \n";
mod192  << "                          .c_in(1'b1)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	ModMux u1_ModMux(.S_out(dap_wire),                                              \n";
mod192  << "                      .A_in(S_tdap_wire), //Sel_in=1, positive number               \n";
mod192  << " 		             .B_in(daD_wire), //Sel_in=0, negative number                   \n";
mod192  << " 			         .Sel_in(C_tdap_wire)                                           \n";
mod192  << "                      ) ;                                                           \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//(2^32b+c) mod prime                                                           \n";
mod192  << " 	CLA64_co u2_CLA64_co(.sum(S_tbcp_wire),                                         \n";
mod192  << " 				         .c_out(C_tbcp_wire),                                       \n";
mod192  << "                          .a_in(bcD_wire),                                          \n";
mod192  << "                          .b_in(Ninv1_wire),                                        \n";
mod192  << "                          .c_in(1'b1)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	ModMux u2_ModMux(.S_out(bcp_wire),                                              \n";
mod192  << "                      .A_in(S_tbcp_wire), //Sel_in=1, positive number               \n";
mod192  << " 		             .B_in(bcD_wire), //Sel_in=0, negative number                   \n";
mod192  << " 			         .Sel_in(C_tbcp_wire)                                           \n";
mod192  << "                      ) ;                                                           \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//(2^32a+d) mod prime                                                           \n";
mod192  << " 	CLA64_co u3_CLA64_co(.sum(S_tadp_wire),                                         \n";
mod192  << " 				         .c_out(C_tadp_wire),                                       \n";
mod192  << "                          .a_in(adD_wire),                                          \n";
mod192  << "                          .b_in(Ninv1_wire),                                        \n";
mod192  << "                          .c_in(1'b1)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	ModMux u3_ModMux(.S_out(adp_wire),                                              \n";
mod192  << "                      .A_in(S_tadp_wire), //Sel_in=1, positive number               \n";
mod192  << " 		             .B_in(adD_wire), //Sel_in=0, negative number                   \n";
mod192  << " 			         .Sel_in(C_tadp_wire)                                           \n";
mod192  << "                      ) ;                                                           \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//(2^32e+f)+(2^32d+a) mod prime                                                 \n";
mod192  << " 	CLA64_co u4_CLA64_co(.sum(S_t1_wire),                                           \n";
mod192  << " 				         .c_out(C_t1_wire),                                         \n";
mod192  << "                          .a_in(efp_wire),                                          \n";
mod192  << "                          .b_in(dap_wire),                                          \n";
mod192  << "                          .c_in(1'b0)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//Pipeline Register                                                             \n";
mod192  << " 	R8_PipeReg2 u0_R8_PipeReg2(.A0_out(S_t1_reg_wire),                              \n";
mod192  << " 							   .Ac_out(C_t1_reg_wire),                              \n";
mod192  << "                                .A0_in(S_t1_wire),                                  \n";
mod192  << " 							   .Ac_in(C_t1_wire),                                   \n";
mod192  << "                                .rst_n(rst_n),                                      \n";
mod192  << "                                .clk(clk)                                           \n";
mod192  << "                                ) ;                                                 \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	CLA65 u0_CLA65(.sum(S_t2_wire),                                                 \n";
mod192  << " 				   .c_out(C_t2_wire),                                               \n";
mod192  << "                    .a_in(t1D_wire),                                                \n";
mod192  << "                    .b_in(Ninv2_reg_wire),                                          \n";
mod192  << "                    .c_in(1'b1)                                                     \n";
mod192  << " 			       // rst_n,                                                        \n";
mod192  << "                    // clk                                                          \n";
mod192  << "                    ) ;                                                             \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	ModMux u4_ModMux(.S_out(t3_wire),                                               \n";
mod192  << "                      .A_in(S_t2_wire[P_WIDTH-1:0]), //Sel_in=1                     \n";
mod192  << " 		             .B_in(S_t1_reg_wire), //Sel_in=0                               \n";
mod192  << " 			         .Sel_in(C_t2_wire)                                             \n";
mod192  << "                      ) ;                                                           \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//(2^32b+c)+(2^32a+d) mod prime                                                 \n";
mod192  << " 	CLA64_co u5_CLA64_co(.sum(S_t4_wire),                                           \n";
mod192  << " 				         .c_out(C_t4_wire),                                         \n";
mod192  << "                          .a_in(bcp_wire),                                          \n";
mod192  << "                          .b_in(adp_wire),                                          \n";
mod192  << "                          .c_in(1'b0)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//Pipeline Register                                                             \n";
mod192  << " 	R8_PipeReg2 u1_R8_PipeReg2(.A0_out(S_t4_reg_wire),                              \n";
mod192  << " 							   .Ac_out(C_t4_reg_wire),                              \n";
mod192  << "                                .A0_in(S_t4_wire),                                  \n";
mod192  << " 							   .Ac_in(C_t4_wire),                                   \n";
mod192  << "                                .rst_n(rst_n),                                      \n";
mod192  << "                                .clk(clk)                                           \n";
mod192  << "                                ) ;                                                 \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	CLA65 u1_CLA65(.sum(S_t5_wire),                                                 \n";
mod192  << " 				   .c_out(C_t5_wire),                                               \n";
mod192  << "                    .a_in(t4D_wire),                                                \n";
mod192  << "                    .b_in(Ninv2_reg_wire),                                          \n";
mod192  << "                    .c_in(1'b1)                                                     \n";
mod192  << " 			       // rst_n,                                                        \n";
mod192  << "                    // clk                                                          \n";
mod192  << "                    ) ;                                                             \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	ModMux u5_ModMux(.S_out(t6_wire),                                               \n";
mod192  << "                      .A_in(S_t5_wire[P_WIDTH-1:0]), //Sel_in=1                     \n";
mod192  << " 		             .B_in(S_t4_reg_wire), //Sel_in=0                               \n";
mod192  << " 			         .Sel_in(C_t5_wire)                                             \n";
mod192  << "                      ) ;			                                                \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//(2^32e+f)+(2^32d+a)-(2^32b+c)+(2^32a+d) mod prime                             \n";
mod192  << " 	CLA64_co u6_CLA64_co(.sum(S_t7_wire),                                           \n";
mod192  << " 				         .c_out(C_t7_wire),                                         \n";
mod192  << "                          .a_in(t3_wire),                                           \n";
mod192  << "                          .b_in(t6invD_wire),                                       \n";
mod192  << "                          .c_in(1'b1)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//Pipeline Register                                                             \n";
mod192  << " 	R8_PipeReg2 u2_R8_PipeReg2(.A0_out(S_t7_reg_wire),                              \n";
mod192  << " 							   .Ac_out(C_t7_reg_wire),                              \n";
mod192  << "                                .A0_in(S_t7_wire),                                  \n";
mod192  << " 							   .Ac_in(C_t7_wire),                                   \n";
mod192  << "                                .rst_n(rst_n),                                      \n";
mod192  << "                                .clk(clk)                                           \n";
mod192  << "                                ) ;                                                 \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	CLA64_co u7_CLA64_co(.sum(S_t8_wire),                                           \n";
mod192  << " 				         .c_out(C_t8_wire),                                         \n";
mod192  << "                          .a_in(S_t7_reg_wire),                                     \n";
mod192  << "                          .b_in(N_D2_wire),                                         \n";
mod192  << "                          .c_in(1'b0)                                               \n";
mod192  << " 			             // rst_n,                                                  \n";
mod192  << "                          // clk                                                    \n";
mod192  << "                          ) ;                                                       \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	ModMux u6_ModMux(.S_out(S_out),                                                 \n";
mod192  << "                      .A_in(S_t7_reg_wire), //Sel_in=1                              \n";
mod192  << " 		             .B_in(S_t8_wire), //Sel_in=0                                   \n";
mod192  << " 			         .Sel_in(C_t7_reg_wire)                                         \n";
mod192  << "                      ) ;                                                           \n";
mod192  << " 	                                                                                \n";
mod192  << " 	                                                                                \n";
mod192  << " 	//                                                                              \n";
mod192  << " 	// always @(posedge clk or negedge rst_n) begin                                 \n";
mod192  << " 		// if(~rst_n) begin                                                         \n";
mod192  << " 			// S_out <= P_ZERO ;                                                    \n";
mod192  << " 		// end                                                                      \n";
mod192  << " 		// else begin                                                               \n";
mod192  << " 			// S_out <= S_wire ;                                                    \n";
mod192  << " 		// end                                                                      \n";
mod192  << " 	// end                                                                          \n";
mod192  << "                                                                                    \n";
mod192  << " endmodule                                                                          \n";           
     
     mod192.close();     
}
void Mod::MulMod128_r8(std::string string_in){
     std::ofstream mulmod128;   
     std::string        string_buf = "/MulMod128.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
     mulmod128.open(ss.str());
mulmod128 << " `timescale 1 ns/1 ps                                                                 \n";
mulmod128 << " module MulMod128(S_out,                                                              \n";
mulmod128 << "            A_in,                                                                     \n";
mulmod128 << " 		   B_in,                                                                        \n";
mulmod128 << " 		   N_in,                                                                        \n";
mulmod128 << "            rst_n,                                                                    \n";
mulmod128 << "            clk                                                                       \n";
mulmod128 << "            ) ;                                                                       \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " parameter P_WIDTH     = 64 ;                                                         \n";
mulmod128 << " parameter PD_WIDTH    = 128 ;                                                        \n";
mulmod128 << " parameter W_WIDTH     = 32 ;                                                         \n";
mulmod128 << "                                                                                      \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " output[P_WIDTH-1:0] S_out ;                                                          \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " input [P_WIDTH-1:0] A_in ;                                                           \n";
mulmod128 << " input [P_WIDTH-1:0] B_in ;                                                           \n";
mulmod128 << " input [P_WIDTH-1:0] N_in ;                                                           \n";
mulmod128 << " input               rst_n ;                                                          \n";
mulmod128 << " input               clk ;                                                            \n";
mulmod128 << "                                                                                      \n";
mulmod128 << "                                                                                      \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " wire  [PD_WIDTH-1:0] Mul_wire ;                                                      \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " wire  [P_WIDTH:0]    Ninv2_wire ;                                                    \n";
mulmod128 << " wire  [P_WIDTH-1:0]  t1FD_wire ;                                                     \n";
mulmod128 << " wire  [P_WIDTH-1:0]  t1D_wire ;                                                      \n";
mulmod128 << " wire  [P_WIDTH-1:0]  t3inv1D_wire ;                                                  \n";
mulmod128 << " wire  [P_WIDTH-1:0]  dD_wire ;                                                       \n";
mulmod128 << " wire  [P_WIDTH:0]    t7D_wire ;                                                      \n";
mulmod128 << "                                                                                      \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " wire  [W_WIDTH-1:0]  S_t1_wire ;                                                     \n";
mulmod128 << " wire                 C_t1_wire ;                                                     \n";
mulmod128 << " wire  [W_WIDTH-1:0]  S_t3_wire ;                                                     \n";
mulmod128 << " wire                 C_t3_wire ;                                                     \n";
mulmod128 << " wire  [P_WIDTH-1:0]  t2_wire ;                                                       \n";
mulmod128 << " wire  [P_WIDTH-1:0]  S_t4_wire ;                                                     \n";
mulmod128 << " wire                 C_t4_wire ;                                                     \n";
mulmod128 << " wire  [P_WIDTH-1:0]  S_t5_wire ;                                                     \n";
mulmod128 << " wire                 C_t5_wire ;                                                     \n";
mulmod128 << " wire  [P_WIDTH-1:0]  t6_wire ;                                                       \n";
mulmod128 << " wire  [P_WIDTH-1:0]  S_t7_wire ;                                                     \n";
mulmod128 << " wire                 C_t7_wire ;                                                     \n";
mulmod128 << " wire  [P_WIDTH:0]    S_t8_wire ;                                                     \n";
mulmod128 << " wire                 C_t8_wire ;                                                     \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " wire  [P_WIDTH-1:0]  S_out_wire ;                                                    \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                                 \n";
mulmod128 << " wire                 C_t4_reg_wire ;                                                 \n";
mulmod128 << " wire  [P_WIDTH-1:0]  N_D1_wire ;                                                     \n";
mulmod128 << " wire  [P_WIDTH-1:0]  dD_reg_wire ;                                                   \n";
mulmod128 << " wire  [P_WIDTH-1:0]  S_t7_reg_wire ;                                                 \n";
mulmod128 << " wire                 C_t7_reg_wire ;                                                 \n";
mulmod128 << " wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                                \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//Mul                                                                               \n";
mulmod128 << " 	Mul64 u_Mul64(.S_out(Mul_wire),                                                     \n";
mulmod128 << " 		          .A_in(A_in),                                                          \n";
mulmod128 << " 		          .B_in(B_in),                                                          \n";
mulmod128 << "                   .rst_n(rst_n),                                                     \n";
mulmod128 << "                   .clk(clk)                                                          \n";
mulmod128 << "                   ) ;                                                                \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " 	//Pre-process Data                                                                  \n";
mulmod128 << "     MulMod128PD u_MulMod128PD(.Ninv2_out(Ninv2_wire),                                \n";
mulmod128 << " 			                  .t1FD_wire(t1FD_wire),                                    \n";
mulmod128 << " 				              .t1D_wire(t1D_wire),                                      \n";
mulmod128 << " 			                  .t3inv1D_wire(t3inv1D_wire),                              \n";
mulmod128 << " 				              .dD_wire(dD_wire),                                        \n";
mulmod128 << " 			                  .t7D_wire(t7D_wire),                                      \n";
mulmod128 << " 			                  .t1_s_in(S_t1_wire),                                      \n";
mulmod128 << " 			                  .t3_s_in(S_t3_wire),                                      \n";
mulmod128 << " 				              .t3_c_in(C_t3_wire),                                      \n";
mulmod128 << " 			                  .t7_s_in(S_t7_reg_wire),                                  \n";
mulmod128 << " 				              .t7_c_in(C_t7_reg_wire),                                  \n";
mulmod128 << "                               .Mul_in(Mul_wire),                                     \n";
mulmod128 << " 		                      .N_in(N_in)                                               \n";
mulmod128 << "                                ) ;                                                   \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//b+c                                                                               \n";
mulmod128 << " 	CLA32 u0_CLA32(.sum(S_t1_wire),                                                     \n";
mulmod128 << " 				   .c_out(C_t1_wire),                                                   \n";
mulmod128 << "                    .a_in(Mul_wire[95:64]),                                           \n";
mulmod128 << "                    .b_in(Mul_wire[63:32]),                                           \n";
mulmod128 << "                    .c_in(1'b0)                                                       \n";
mulmod128 << " 			       // rst_n,                                                            \n";
mulmod128 << "                    // clk                                                            \n";
mulmod128 << "                    ) ;                                                               \n";
mulmod128 << " 	//a+b                                                                               \n";
mulmod128 << " 	CLA32 u1_CLA32(.sum(S_t3_wire),                                                     \n";
mulmod128 << " 				   .c_out(C_t3_wire),                                                   \n";
mulmod128 << "                    .a_in(Mul_wire[127:96]),                                          \n";
mulmod128 << "                    .b_in(Mul_wire[95:64]),                                           \n";
mulmod128 << "                    .c_in(1'b0)                                                       \n";
mulmod128 << " 			       // rst_n,                                                            \n";
mulmod128 << "                    // clk                                                            \n";
mulmod128 << "                    ) ;		                                                        \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//(2^32)(b+c)                                                                       \n";
mulmod128 << " 	ModMux u0_ModMux(.S_out(t2_wire),                                                   \n";
mulmod128 << "                      .A_in(t1FD_wire), //Sel_in=1                                    \n";
mulmod128 << " 		             .B_in(t1D_wire), //Sel_in=0                                        \n";
mulmod128 << " 			         .Sel_in(C_t1_wire)                                                 \n";
mulmod128 << "                      ) ;                                                             \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//(2^32)(b+c)-(a+b)                                                                 \n";
mulmod128 << " 	CLA64_co u0_CLA64_co(.sum(S_t4_wire),                                               \n";
mulmod128 << " 				         .c_out(C_t4_wire),                                             \n";
mulmod128 << "                          .a_in(t2_wire),                                             \n";
mulmod128 << "                          .b_in(t3inv1D_wire),                                        \n";
mulmod128 << "                          .c_in(1'b1)                                                 \n";
mulmod128 << " 			             // rst_n,                                                      \n";
mulmod128 << "                          // clk                                                      \n";
mulmod128 << "                          ) ;                                                         \n";
mulmod128 << " 	//Pipeline Register                                                                 \n";
mulmod128 << " 	R8_PipeReg4_2 u0_R8_PipeReg4_2(.A0_out(S_t4_reg_wire),                              \n";
mulmod128 << " 								   .Ac_out(C_t4_reg_wire),                              \n";
mulmod128 << " 								   .N_D1_out(N_D1_wire),                                \n";
mulmod128 << " 								   .D_out(dD_reg_wire),                                 \n";
mulmod128 << "                                    .A0_in(S_t4_wire),                                \n";
mulmod128 << " 								   .Ac_in(C_t4_wire),                                   \n";
mulmod128 << " 								   .N_in(N_in),                                         \n";
mulmod128 << " 								   .D_in(dD_wire),                                      \n";
mulmod128 << "                                    .rst_n(rst_n),                                    \n";
mulmod128 << "                                    .clk(clk)                                         \n";
mulmod128 << "                                    ) ;                                               \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//                                                                                  \n";
mulmod128 << " 	CLA64_co u1_CLA64_co(.sum(S_t5_wire),                                               \n";
mulmod128 << " 				         .c_out(C_t5_wire),                                             \n";
mulmod128 << "                          .a_in(S_t4_reg_wire),                                       \n";
mulmod128 << "                          .b_in(N_D1_wire),                                           \n";
mulmod128 << "                          .c_in(1'b0)                                                 \n";
mulmod128 << " 			             // rst_n,                                                      \n";
mulmod128 << "                          // clk                                                      \n";
mulmod128 << "                          ) ;  			                                            \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//                                                                                  \n";
mulmod128 << " 	ModMux u1_ModMux(.S_out(t6_wire),                                                   \n";
mulmod128 << "                      .A_in(S_t4_reg_wire), //Sel_in=1                                \n";
mulmod128 << " 		             .B_in(S_t5_wire), //Sel_in=0                                       \n";
mulmod128 << " 			         .Sel_in(C_t4_reg_wire)                                             \n";
mulmod128 << "                      ) ;                                                             \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//2^32)(b+c)-(a+b)+d                                                                \n";
mulmod128 << " 	CLA64_co u2_CLA64_co(.sum(S_t7_wire),                                               \n";
mulmod128 << " 				         .c_out(C_t7_wire),                                             \n";
mulmod128 << "                          .a_in(t6_wire),                                             \n";
mulmod128 << "                          .b_in(dD_reg_wire),                                         \n";
mulmod128 << "                          .c_in(1'b0)                                                 \n";
mulmod128 << " 			             // rst_n,                                                      \n";
mulmod128 << "                          // clk                                                      \n";
mulmod128 << "                          ) ;  					                                    \n";
mulmod128 << " 	//Pipeline Register                                                                 \n";
mulmod128 << " 	R8_PipeReg4 u_R8_PipeReg4(.A0_out(S_t7_reg_wire),                                   \n";
mulmod128 << " 					          .Ac_out(C_t7_reg_wire),                                   \n";
mulmod128 << " 					          .Ninv2_D2_out(Ninv2_reg_wire),                            \n";
mulmod128 << "                               .A0_in(S_t7_wire),                                     \n";
mulmod128 << " 					          .Ac_in(C_t7_wire),                                        \n";
mulmod128 << " 					          .Ninv2_in(Ninv2_wire),                                    \n";
mulmod128 << "                               .rst_n(rst_n),                                         \n";
mulmod128 << "                               .clk(clk)                                              \n";
mulmod128 << "                               ) ;                                                    \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " 	//                                                                                  \n";
mulmod128 << " 	CLA65 u0_CLA65(.sum(S_t8_wire),                                                     \n";
mulmod128 << " 				   .c_out(C_t8_wire),                                                   \n";
mulmod128 << "                    .a_in(t7D_wire),                                                  \n";
mulmod128 << "                    .b_in(Ninv2_reg_wire),                                            \n";
mulmod128 << "                    .c_in(1'b1)                                                       \n";
mulmod128 << " 			       // rst_n,                                                            \n";
mulmod128 << "                    // clk                                                            \n";
mulmod128 << "                    ) ;                                                               \n";
mulmod128 << " 	//                                                                                  \n";
mulmod128 << " 	ModMux u2_ModMux(.S_out(S_out),                                                     \n";
mulmod128 << "                      .A_in(S_t8_wire[P_WIDTH-1:0]), //Sel_in=1                       \n";
mulmod128 << " 		             .B_in(S_t7_reg_wire), //Sel_in=0                                   \n";
mulmod128 << " 			         .Sel_in(C_t8_wire)                                                 \n";
mulmod128 << "                      ) ;                                                             \n";
mulmod128 << "                                                                                      \n";
mulmod128 << " 	                                                                                    \n";
mulmod128 << " endmodule                                                                            \n";  
     mulmod128.close();  
}

void Mod::R4_TMulMod(std::string string_in){
	 std::ofstream r4_tmulmod;
     std::string        string_buf = "/R4_TMulMod.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r4_tmulmod.open(ss.str());
 r4_tmulmod << " `timescale 1 ns/1 ps                                      \n";
 r4_tmulmod << " module R4_TMulMod(MulMod0_out,                            \n";
 r4_tmulmod << " 			      MulMod1_out,                             \n";
 r4_tmulmod << " 			      MulMod2_out,                             \n";
 r4_tmulmod << " 				  MulMod3_out,                             \n";
 r4_tmulmod << " 				  RA0D_in,                                 \n";
 r4_tmulmod << " 				  MulA1_in,                                \n";
 r4_tmulmod << " 				  RA2D_in,                                 \n";
 r4_tmulmod << " 				  MulA3_in,                                \n";
 r4_tmulmod << " 				  MulB0_in,                                \n";
 r4_tmulmod << " 				  MulB1_in,                                \n";
 r4_tmulmod << " 				  MulB2_in,                                \n";
 r4_tmulmod << " 				  MulB3_in,                                \n";
 r4_tmulmod << " 				  N_in,                                    \n";
 r4_tmulmod << "                   rst_n,                                  \n";
 r4_tmulmod << "                   clk                                     \n";
 r4_tmulmod << "                   ) ;                                     \n";
 r4_tmulmod << " 				                                           \n";
 r4_tmulmod << " parameter P_WIDTH   = 64 ;                                \n";
 r4_tmulmod << "                                                           \n";
 r4_tmulmod << " output [P_WIDTH-1:0] MulMod0_out ;                        \n";
 r4_tmulmod << " output [P_WIDTH-1:0] MulMod1_out ;                        \n";
 r4_tmulmod << " output [P_WIDTH-1:0] MulMod2_out ;                        \n";
 r4_tmulmod << " output [P_WIDTH-1:0] MulMod3_out ;                        \n";
 r4_tmulmod << "                                                           \n";
 r4_tmulmod << " input [P_WIDTH-1:0] RA0D_in ;                             \n";
 r4_tmulmod << " input [P_WIDTH-1:0] MulA1_in ;                            \n";
 r4_tmulmod << " input [P_WIDTH-1:0] RA2D_in ;                             \n";
 r4_tmulmod << " input [P_WIDTH-1:0] MulA3_in ;                            \n";
 r4_tmulmod << " input [P_WIDTH-1:0] MulB0_in ;                            \n";
 r4_tmulmod << " input [P_WIDTH-1:0] MulB1_in ;                            \n";
 r4_tmulmod << " input [P_WIDTH-1:0] MulB2_in ;                            \n";
 r4_tmulmod << " input [P_WIDTH-1:0] MulB3_in ;                            \n";
 r4_tmulmod << " input [P_WIDTH-1:0] N_in ;                                \n";
 r4_tmulmod << " input               rst_n ;                               \n";
 r4_tmulmod << " input               clk ;                                 \n";
 r4_tmulmod << "                                                           \n";
 r4_tmulmod << "                                                           \n";
 r4_tmulmod << " 	//                                                     \n";
 r4_tmulmod << " 	MulMod128 u0_MulMod128(.S_out(MulMod0_out),            \n";
 r4_tmulmod << "                            .A_in(RA0D_in),                \n";
 r4_tmulmod << " 		                   .B_in(MulB0_in),                \n";
 r4_tmulmod << " 		                   .N_in(N_in),                    \n";
 r4_tmulmod << " 						   .rst_n(rst_n),                  \n";
 r4_tmulmod << "                            .clk(clk)                      \n";
 r4_tmulmod << "                            ) ;                            \n";
 r4_tmulmod << " 	//                                                     \n";
 r4_tmulmod << " 	MulMod128 u1_MulMod128(.S_out(MulMod1_out),            \n";
 r4_tmulmod << "                            .A_in(MulA1_in),               \n";
 r4_tmulmod << " 		                   .B_in(MulB1_in),                \n";
 r4_tmulmod << " 		                   .N_in(N_in),                    \n";
 r4_tmulmod << " 						   .rst_n(rst_n),                  \n";
 r4_tmulmod << "                            .clk(clk)                      \n";
 r4_tmulmod << "                            ) ;                            \n";
 r4_tmulmod << " 	//                                                     \n";
 r4_tmulmod << " 	MulMod128 u2_MulMod128(.S_out(MulMod2_out),            \n";
 r4_tmulmod << "                            .A_in(RA2D_in),                \n";
 r4_tmulmod << " 		                   .B_in(MulB2_in),                \n";
 r4_tmulmod << " 		                   .N_in(N_in),                    \n";
 r4_tmulmod << " 						   .rst_n(rst_n),                  \n";
 r4_tmulmod << "                            .clk(clk)                      \n";
 r4_tmulmod << "                            ) ;                            \n";
 r4_tmulmod << " 	//                                                     \n";
 r4_tmulmod << " 	MulMod128 u3_MulMod128(.S_out(MulMod3_out),            \n";
 r4_tmulmod << "                            .A_in(MulA3_in),               \n";
 r4_tmulmod << " 		                   .B_in(MulB3_in),                \n";
 r4_tmulmod << " 		                   .N_in(N_in),                    \n";
 r4_tmulmod << " 						   .rst_n(rst_n),                  \n";
 r4_tmulmod << "                            .clk(clk)                      \n";
 r4_tmulmod << "                            ) ;                            \n";
 r4_tmulmod << " 				                                           \n";
 r4_tmulmod << " endmodule				                                   \n";     
     r4_tmulmod.close();         
}
void Mod::Mod96(std::string string_in){
	 std::ofstream mod96;
     std::string        string_buf = "/Mod96.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 mod96.open(ss.str());	
 mod96 << "`timescale 1 ns/1 ps                                                             \n";
 mod96 << "module Mod96(S_out,                                                              \n";
 mod96 << "             A_in,                                                               \n";
 mod96 << "		     N_in,                                                                  \n";
 mod96 << "             rst_n,                                                              \n";
 mod96 << "             clk                                                                 \n";
 mod96 << "             ) ;                                                                 \n";
 mod96 << "parameter D_WIDTH     = 96 ;                                                     \n";
 mod96 << "parameter P_WIDTH     = 64 ;                                                     \n";
 mod96 << "parameter SEG_ZERO    = 32'h0 ;                                                  \n";
 mod96 << "parameter P_ZERO      = 64'h0 ;                                                  \n";
 mod96 << "                                                                                 \n";
 mod96 << "                                                                                 \n";
 mod96 << "output[P_WIDTH-1:0] S_out ;                                                      \n";
 mod96 << "                                                                                 \n";
 mod96 << "input [D_WIDTH-1:0] A_in ;                                                       \n";
 mod96 << "input [P_WIDTH-1:0] N_in ;                                                       \n";
 mod96 << "input               rst_n ;                                                      \n";
 mod96 << "input               clk ;                                                        \n";
 mod96 << "                                                                                 \n";
 mod96 << "                                                                                 \n";
 mod96 << "wire  [P_WIDTH-1:0]  Ninv1_wire ;                                                \n";
 mod96 << "wire  [P_WIDTH:0]    Ninv2_wire ;                                                \n";
 mod96 << "wire  [P_WIDTH-1:0]  efD_wire ;                                                  \n";
 mod96 << "wire  [P_WIDTH-1:0]  dHD_wire ;                                                  \n";
 mod96 << "wire  [P_WIDTH-1:0]  dLDinv_wire ;                                               \n";
 mod96 << "wire  [P_WIDTH:0]    t1D_wire ;                                                  \n";
 mod96 << "                                                                                 \n";
 mod96 << "wire  [P_WIDTH-1:0]  S_tefp_wire ;                                               \n";
 mod96 << "wire                 C_tefp_wire ;                                               \n";
 mod96 << "wire  [P_WIDTH-1:0]  efp_wire ;                                                  \n";
 mod96 << "wire  [P_WIDTH-1:0]  S_t1_wire ;                                                 \n";
 mod96 << "wire                 C_t1_wire ;                                                 \n";
 mod96 << "wire  [P_WIDTH:0]    S_t2_wire ;                                                 \n";
 mod96 << "wire                 C_t2_wire ;                                                 \n";
 mod96 << "wire  [P_WIDTH-1:0]  t3_wire ;                                                   \n";
 mod96 << "wire  [P_WIDTH-1:0]  S_t4_wire ;                                                 \n";
 mod96 << "wire                 C_t4_wire ;	                                                \n";
 mod96 << "wire  [P_WIDTH-1:0]  S_t5_wire ;                                                 \n";
 mod96 << "wire                 C_t5_wire ;                                                 \n";
 mod96 << "                                                                                 \n";
 mod96 << "wire  [P_WIDTH-1:0]  S_t1_reg_wire ;                                             \n";
 mod96 << "wire                 C_t1_reg_wire ;                                             \n";
 mod96 << "wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                             \n";
 mod96 << "wire                 C_t4_reg_wire ;                                             \n";
 mod96 << "wire  [P_WIDTH-1:0]  dLDinv_reg_wire ;                                           \n";
 mod96 << "wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                            \n";
 mod96 << "wire  [P_WIDTH-1:0]  N_D2_wire ;                                                 \n";
 mod96 << "                                                                                 \n";
 mod96 << "	                                                                                \n";
 mod96 << "	//Pipeline Register                                                             \n";
 mod96 << "	R16_NPipeReg1 u_R16_NPipeReg1(.N_D2_out(N_D2_wire),                             \n";
 mod96 << "                                  .N_in(N_in),                                   \n";
 mod96 << "                                  .rst_n(rst_n),                                 \n";
 mod96 << "                                  .clk(clk)                                      \n";
 mod96 << "                                  ) ;                                            \n";
 mod96 << "	                                                                                \n";
 mod96 << "	//Pre-process Data                                                              \n";
 mod96 << "	Mod96PD u_Mod96PD(.Ninv1_out(Ninv1_wire), //64-bit inverter N                   \n";
 mod96 << "                      .Ninv2_out(Ninv2_wire), //65-bit inverter N                \n";
 mod96 << "			          .efD_out(efD_wire), //(2^32e)+f                               \n";
 mod96 << "			          .dHD_out(dHD_wire), //(2^32d)                                 \n";
 mod96 << "			          .dLDinv_out(dLDinv_wire), //inverter d                        \n";
 mod96 << "					  .t1D_out(t1D_wire), //65-bit t1                               \n";
 mod96 << "			          .t1_s_in(S_t1_reg_wire),                                      \n";
 mod96 << "			          .t1_c_in(C_t1_reg_wire),                                      \n";
 mod96 << "                      .A_in(A_in),                                               \n";
 mod96 << "		              .N_in(N_in)                                                   \n";
 mod96 << "                       ) ;                                                       \n";
 mod96 << "	                                                                                \n";
 mod96 << "	//(2^32e+f) mod prime                                                           \n";
 mod96 << "	CLA64_co u0_CLA64_co(.sum(S_tefp_wire),                                         \n";
 mod96 << "				         .c_out(C_tefp_wire),                                       \n";
 mod96 << "                         .a_in(efD_wire),                                        \n";
 mod96 << "                         .b_in(Ninv1_wire),                                      \n";
 mod96 << "                         .c_in(1'b1)                                             \n";
 mod96 << "			             // rst_n,                                                  \n";
 mod96 << "                         // clk                                                  \n";
 mod96 << "                         ) ;                                                     \n";
 mod96 << "	//                                                                              \n";
 mod96 << "	ModMux u0_ModMux(.S_out(efp_wire),                                              \n";
 mod96 << "                     .A_in(S_tefp_wire), //Sel_in=1, positive number             \n";
 mod96 << "		             .B_in(efD_wire), //Sel_in=0, negative number                   \n";
 mod96 << "			         .Sel_in(C_tefp_wire)                                           \n";
 mod96 << "                     ) ;                                                         \n";
 mod96 << "	                                                                                \n";
 mod96 << "	//(2^32e+f)+(2^32d) mod prime                                                   \n";
 mod96 << "	CLA64_co u1_CLA64_co(.sum(S_t1_wire),                                           \n";
 mod96 << "				         .c_out(C_t1_wire),                                         \n";
 mod96 << "                         .a_in(efp_wire),                                        \n";
 mod96 << "                         .b_in(dHD_wire),                                        \n";
 mod96 << "                         .c_in(1'b0)                                             \n";
 mod96 << "			             // rst_n,                                                  \n";
 mod96 << "                         // clk                                                  \n";
 mod96 << "                         ) ;                                                     \n";
 mod96 << "	//Pipeline Register                                                             \n";
 mod96 << "	R16_PipeReg3 u_R16_PipeReg3(.A0_out(S_t1_reg_wire),                             \n";
 mod96 << "								.Ac_out(C_t1_reg_wire),                             \n";
 mod96 << "								.Dinv_out(dLDinv_reg_wire),                         \n";
 mod96 << "								.Ninv2_out(Ninv2_reg_wire),                         \n";
 mod96 << "                                .A0_in(S_t1_wire),                               \n";
 mod96 << "								.Ac_in(C_t1_wire),                                  \n";
 mod96 << "								.Dinv_in(dLDinv_wire),                              \n";
 mod96 << "								.Ninv2_in(Ninv2_wire),                              \n";
 mod96 << "                                .rst_n(rst_n),                                   \n";
 mod96 << "                                .clk(clk)                                        \n";
 mod96 << "                                ) ;                                              \n";
 mod96 << "	                                                                                \n";
 mod96 << "	//                                                                              \n";
 mod96 << "	CLA65 u0_CLA65(.sum(S_t2_wire),                                                 \n";
 mod96 << "				   .c_out(C_t2_wire),                                               \n";
 mod96 << "                   .a_in(t1D_wire),                                              \n";
 mod96 << "                   .b_in(Ninv2_reg_wire),                                        \n";
 mod96 << "                   .c_in(1'b1)                                                   \n";
 mod96 << "			       // rst_n,                                                        \n";
 mod96 << "                   // clk                                                        \n";
 mod96 << "                   ) ;                                                           \n";
 mod96 << "	//                                                                              \n";
 mod96 << "	ModMux u1_ModMux(.S_out(t3_wire),                                               \n";
 mod96 << "                     .A_in(S_t2_wire[P_WIDTH-1:0]), //Sel_in=1                   \n";
 mod96 << "		             .B_in(S_t1_reg_wire), //Sel_in=0                               \n";
 mod96 << "			         .Sel_in(C_t2_wire)                                             \n";
 mod96 << "                     ) ;                                                         \n";
 mod96 << "	                                                                                \n";
 mod96 << "	//(2^32e+f)+(2^32d)-(d) mod prime                                               \n";
 mod96 << "	CLA64_co u2_CLA64_co(.sum(S_t4_wire),                                           \n";
 mod96 << "				         .c_out(C_t4_wire),                                         \n";
 mod96 << "                         .a_in(t3_wire),                                         \n";
 mod96 << "                         .b_in(dLDinv_reg_wire),                                 \n";
 mod96 << "                         .c_in(1'b1)                                             \n";
 mod96 << "			             // rst_n,                                                  \n";
 mod96 << "                         // clk                                                  \n";
 mod96 << "                         ) ;                                                     \n";
 mod96 << "	//Pipeline Register                                                             \n";
 mod96 << "	R16_PipeReg2 u0_R16_PipeReg2(.A0_out(S_t4_reg_wire),                            \n";
 mod96 << "								 .Ac_out(C_t4_reg_wire),                            \n";
 mod96 << "                                 .A0_in(S_t4_wire),                              \n";
 mod96 << "								 .Ac_in(C_t4_wire),                                 \n";
 mod96 << "                                 .rst_n(rst_n),                                  \n";
 mod96 << "                                 .clk(clk)                                       \n";
 mod96 << "                                 ) ;                                             \n";
 mod96 << "	                                                                                \n";
 mod96 << "	//                                                                              \n";
 mod96 << "	CLA64_co u3_CLA64_co(.sum(S_t5_wire),                                           \n";
 mod96 << "				         .c_out(C_t5_wire),                                         \n";
 mod96 << "                         .a_in(S_t4_reg_wire),                                   \n";
 mod96 << "                         .b_in(N_D2_wire),                                       \n";
 mod96 << "                         .c_in(1'b0)                                             \n";
 mod96 << "			             // rst_n,                                                  \n";
 mod96 << "                         // clk                                                  \n";
 mod96 << "                         ) ;                                                     \n";
 mod96 << "	//                                                                              \n";
 mod96 << "	ModMux u2_ModMux(.S_out(S_out),                                                 \n";
 mod96 << "                     .A_in(S_t4_reg_wire), //Sel_in=1                            \n";
 mod96 << "		             .B_in(S_t5_wire), //Sel_in=0                                   \n";
 mod96 << "			         .Sel_in(C_t4_reg_wire)                                         \n";
 mod96 << "                     ) ;                                                         \n";
 mod96 << "	                                                                                \n";
 mod96 << "                                                                                 \n";
 mod96 << "	//                                                                              \n";
 mod96 << "	// always @(posedge clk or negedge rst_n) begin                                 \n";
 mod96 << "		// if(~rst_n) begin                                                         \n";
 mod96 << "			// S_out <= P_ZERO ;                                                    \n";
 mod96 << "		// end                                                                      \n";
 mod96 << "		// else begin                                                               \n";
 mod96 << "			// S_out <= S_wire ;                                                    \n";
 mod96 << "		// end                                                                      \n";
 mod96 << "	// end                                                                          \n";
 mod96 << "                                                                                 \n";
 mod96 << "endmodule                                                                        \n";	 
	 mod96.close();
}
void Mod::Mod96PD(std::string string_in){
	 std::ofstream mod96pd;
     std::string        string_buf = "/Mod96PD.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 mod96pd.open(ss.str());
     mod96pd  <<" `timescale 1 ns/1 ps                                \n";
     mod96pd  <<" module Mod96PD(Ninv1_out,                           \n";
     mod96pd  <<"                Ninv2_out,                           \n";
     mod96pd  <<" 			   efD_out,                               \n";
     mod96pd  <<" 			   dHD_out,                               \n";
     mod96pd  <<" 			   dLDinv_out,                            \n";
     mod96pd  <<" 			   t1D_out,                               \n";
     mod96pd  <<" 			   t1_s_in,                               \n";
     mod96pd  <<" 			   t1_c_in,                               \n";
     mod96pd  <<"                A_in,                                \n";
     mod96pd  <<" 		       N_in                                   \n";
     mod96pd  <<"                ) ;                                  \n";
     mod96pd  <<" parameter D_WIDTH     = 96 ;                        \n";
     mod96pd  <<" parameter P_WIDTH     = 64 ;                        \n";
     mod96pd  <<" parameter SEG_ZERO    = 32'h0 ;                     \n";
     mod96pd  <<"                                                     \n";
     mod96pd  <<" output [P_WIDTH-1:0] Ninv1_out ;                    \n";
     mod96pd  <<" output [P_WIDTH:0]   Ninv2_out ;                    \n";
     mod96pd  <<" output [P_WIDTH-1:0] efD_out ;                      \n";
     mod96pd  <<" output [P_WIDTH-1:0] dHD_out ;                      \n";
     mod96pd  <<" output [P_WIDTH-1:0] dLDinv_out ;                   \n";
     mod96pd  <<" output [P_WIDTH:0]   t1D_out ;                      \n";
     mod96pd  <<"                                                     \n";
     mod96pd  <<" input [P_WIDTH-1:0] t1_s_in ;                       \n";
     mod96pd  <<" input               t1_c_in ;                       \n";
     mod96pd  <<" input [D_WIDTH-1:0] A_in ;                          \n";
     mod96pd  <<" input [P_WIDTH-1:0] N_in ;                          \n";
     mod96pd  <<"                                                     \n";
     mod96pd  <<" 	                                                   \n";
     mod96pd  <<" 	//64-bit inverter N                                \n";
     mod96pd  <<" 	assign Ninv1_out = (~N_in) ;                       \n";
     mod96pd  <<" 	//65-bit inverter N                                \n";
     mod96pd  <<" 	assign Ninv2_out = ~{1'b0, N_in} ;                 \n";
     mod96pd  <<" 	//(2^32e)+f                                        \n";
     mod96pd  <<" 	assign efD_out = {A_in[63:32], A_in[31:0]} ;       \n";
     mod96pd  <<" 	//(2^32d)                                          \n";
     mod96pd  <<" 	assign dHD_out = {A_in[95:64],SEG_ZERO} ;          \n";
     mod96pd  <<" 	//inverter d                                       \n";
     mod96pd  <<" 	assign dLDinv_out = (~{SEG_ZERO,A_in[95:64]}) ;    \n";
     mod96pd  <<" 	//65-bit t1                                        \n";
     mod96pd  <<" 	assign t1D_out = {t1_c_in,t1_s_in} ;               \n";
     mod96pd  <<" 	                                                   \n";
     mod96pd  <<" 	                                                   \n";
     mod96pd  <<" endmodule                                            \n";
	 mod96pd.close();	
}
void Mod::Mod192(std::string string_in){
	 std::ofstream mod192;
     std::string        string_buf = "/Mod192.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mod192.open(ss.str());
     mod192  << "`timescale 1 ns/1 ps                                                        \n";
     mod192  << "module Mod192(S_out,                                                        \n";
     mod192  << "           A_in,                                                            \n";
     mod192  << "		   N_in,                                                             \n";
     mod192  << "           rst_n,                                                           \n";
     mod192  << "           clk                                                              \n";
     mod192  << "           ) ;                                                              \n";
     mod192  << "parameter D_WIDTH     = 192 ;                                               \n";
     mod192  << "parameter P_WIDTH     = 64 ;                                                \n";
     mod192  << "                                                                            \n";
     mod192  << "parameter P_ZERO      = 64'h0 ;                                             \n";
     mod192  << "                                                                            \n";
     mod192  << "                                                                            \n";
     mod192  << "output[P_WIDTH-1:0] S_out ;                                                 \n";
     mod192  << "                                                                            \n";
     mod192  << "input [D_WIDTH-1:0] A_in ;                                                  \n";
     mod192  << "input [P_WIDTH-1:0] N_in ;                                                  \n";
     mod192  << "input               rst_n ;                                                 \n";
     mod192  << "input               clk ;                                                   \n";
     mod192  << "                                                                            \n";
     mod192  << "                                                                            \n";
     mod192  << "wire  [P_WIDTH-1:0]  Ninv1_wire ;                                           \n";
     mod192  << "wire  [P_WIDTH:0]    Ninv2_wire ;                                           \n";
     mod192  << "wire  [P_WIDTH-1:0]  efD_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  daD_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  bcD_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  adD_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH:0]    t1D_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH:0]    t4D_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  t6invD_wire ;                                          \n";
     mod192  << "                                                                            \n";
     mod192  << "                                                                            \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_tefp_wire ;                                          \n";
     mod192  << "wire                 C_tefp_wire ;                                          \n";
     mod192  << "wire  [P_WIDTH-1:0]  efp_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_tdap_wire ;                                          \n";
     mod192  << "wire                 C_tdap_wire ;                                          \n";
     mod192  << "wire  [P_WIDTH-1:0]  dap_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_tbcp_wire ;                                          \n";
     mod192  << "wire                 C_tbcp_wire ;                                          \n";
     mod192  << "wire  [P_WIDTH-1:0]  bcp_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_tadp_wire ;                                          \n";
     mod192  << "wire                 C_tadp_wire ;                                          \n";
     mod192  << "wire  [P_WIDTH-1:0]  adp_wire ;                                             \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_t1_wire ;                                            \n";
     mod192  << "wire                 C_t1_wire ;                                            \n";
     mod192  << "wire  [P_WIDTH:0]    S_t2_wire ;                                            \n";
     mod192  << "wire                 C_t2_wire ;                                            \n";
     mod192  << "wire  [P_WIDTH-1:0]  t3_wire ;                                              \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_t4_wire ;                                            \n";
     mod192  << "wire                 C_t4_wire ;                                            \n";
     mod192  << "wire  [P_WIDTH:0]    S_t5_wire ;                                            \n";
     mod192  << "wire                 C_t5_wire ;                                            \n";
     mod192  << "wire  [P_WIDTH-1:0]  t6_wire ;                                              \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_t7_wire ;                                            \n";
     mod192  << "wire                 C_t7_wire ;                                            \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_t8_wire ;                                            \n";
     mod192  << "wire                 C_t8_wire ;                                            \n";
     mod192  << "                                                                            \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_t1_reg_wire ;                                        \n";
     mod192  << "wire                 C_t1_reg_wire ;                                        \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                                        \n";
     mod192  << "wire                 C_t4_reg_wire ;                                        \n";
     mod192  << "wire  [P_WIDTH-1:0]  S_t7_reg_wire ;                                        \n";
     mod192  << "wire                 C_t7_reg_wire ;                                        \n";
     mod192  << "wire  [P_WIDTH:0]    Ninv2_reg_wire ;                                       \n";
     mod192  << "wire  [P_WIDTH-1:0]  N_D2_wire ;                                            \n";
     mod192  << "                                                                            \n";
     mod192  << "                                                                            \n";
     mod192  << "	//Pipeline Register                                                      \n";
     mod192  << "    R16_NPipeReg2 u_R16_NPipeReg2(.Ninv2_D1_out(Ninv2_reg_wire),            \n";
     mod192  << "                                  .N_D2_out(N_D2_wire),                     \n";
     mod192  << "					              .Ninv2_in(Ninv2_wire),                     \n";
     mod192  << "                                  .N_in(N_in),                              \n";
     mod192  << "                                  .rst_n(rst_n),                            \n";
     mod192  << "                                  .clk(clk)                                 \n";
     mod192  << "                                  ) ;                                       \n";
     mod192  << "                                                                            \n";
     mod192  << "	//Pre-process Data                                                       \n";
     mod192  << "	Mod192PD u_Mod192PD(.Ninv1_out(Ninv1_wire), //64-bit inverter N          \n";
     mod192  << "                        .Ninv2_out(Ninv2_wire), //65-bit inverter N         \n";
     mod192  << "			            .efD_out(efD_wire), //(2^32e)+f                      \n";
     mod192  << "				        .daD_out(daD_wire), //(2^32d)+a                      \n";
     mod192  << "			            .bcD_out(bcD_wire), //(2^32b)+c                      \n";
     mod192  << "				        .adD_out(adD_wire), //(2^32a)+d                      \n";
     mod192  << "			            .t1D_out(t1D_wire), //65-bit t1                      \n";
     mod192  << "				        .t4D_out(t4D_wire), //65-bit t4                      \n";
     mod192  << "						.t6invD_out(t6invD_wire), // inverter t6             \n";
     mod192  << "			            .t1_s_in(S_t1_reg_wire),                             \n";
     mod192  << "			            .t1_c_in(C_t1_reg_wire),                             \n";
     mod192  << "				        .t4_s_in(S_t4_reg_wire),                             \n";
     mod192  << "			            .t4_c_in(C_t4_reg_wire),                             \n";
     mod192  << "						.t6_in(t6_wire),                                     \n";
     mod192  << "                        .A_in(A_in),                                        \n";
     mod192  << "		                .N_in(N_in)                                          \n";
     mod192  << "                        ) ;                                                 \n";
     mod192  << "                                                                            \n";
     mod192  << "	//(2^32e+f) mod prime                                                    \n";
     mod192  << "	CLA64_co u0_CLA64_co(.sum(S_tefp_wire),                                  \n";
     mod192  << "				         .c_out(C_tefp_wire),                                \n";
     mod192  << "                         .a_in(efD_wire),                                   \n";
     mod192  << "                         .b_in(Ninv1_wire),                                 \n";
     mod192  << "                         .c_in(1'b1)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	ModMux u0_ModMux(.S_out(efp_wire),                                       \n";
     mod192  << "                     .A_in(S_tefp_wire), //Sel_in=1, positive number        \n";
     mod192  << "		             .B_in(efD_wire), //Sel_in=0, negative number            \n";
     mod192  << "			         .Sel_in(C_tefp_wire)                                    \n";
     mod192  << "                     ) ;                                                    \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//(2^32d+a) mod prime	                                                 \n";
     mod192  << "	CLA64_co u1_CLA64_co(.sum(S_tdap_wire),                                  \n";
     mod192  << "				         .c_out(C_tdap_wire),                                \n";
     mod192  << "                         .a_in(daD_wire),                                   \n";
     mod192  << "                         .b_in(Ninv1_wire),                                 \n";
     mod192  << "                         .c_in(1'b1)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	ModMux u1_ModMux(.S_out(dap_wire),                                       \n";
     mod192  << "                     .A_in(S_tdap_wire), //Sel_in=1, positive number        \n";
     mod192  << "		             .B_in(daD_wire), //Sel_in=0, negative number            \n";
     mod192  << "			         .Sel_in(C_tdap_wire)                                    \n";
     mod192  << "                     ) ;                                                    \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//(2^32b+c) mod prime                                                    \n";
     mod192  << "	CLA64_co u2_CLA64_co(.sum(S_tbcp_wire),                                  \n";
     mod192  << "				         .c_out(C_tbcp_wire),                                \n";
     mod192  << "                         .a_in(bcD_wire),                                   \n";
     mod192  << "                         .b_in(Ninv1_wire),                                 \n";
     mod192  << "                         .c_in(1'b1)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	ModMux u2_ModMux(.S_out(bcp_wire),                                       \n";
     mod192  << "                     .A_in(S_tbcp_wire), //Sel_in=1, positive number        \n";
     mod192  << "		             .B_in(bcD_wire), //Sel_in=0, negative number            \n";
     mod192  << "			         .Sel_in(C_tbcp_wire)                                    \n";
     mod192  << "                     ) ;                                                    \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//(2^32a+d) mod prime                                                    \n";
     mod192  << "	CLA64_co u3_CLA64_co(.sum(S_tadp_wire),                                  \n";
     mod192  << "				         .c_out(C_tadp_wire),                                \n";
     mod192  << "                         .a_in(adD_wire),                                   \n";
     mod192  << "                         .b_in(Ninv1_wire),                                 \n";
     mod192  << "                         .c_in(1'b1)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	ModMux u3_ModMux(.S_out(adp_wire),                                       \n";
     mod192  << "                     .A_in(S_tadp_wire), //Sel_in=1, positive number        \n";
     mod192  << "		             .B_in(adD_wire), //Sel_in=0, negative number            \n";
     mod192  << "			         .Sel_in(C_tadp_wire)                                    \n";
     mod192  << "                     ) ;                                                    \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//(2^32e+f)+(2^32d+a) mod prime                                          \n";
     mod192  << "	CLA64_co u4_CLA64_co(.sum(S_t1_wire),                                    \n";
     mod192  << "				         .c_out(C_t1_wire),                                  \n";
     mod192  << "                         .a_in(efp_wire),                                   \n";
     mod192  << "                         .b_in(dap_wire),                                   \n";
     mod192  << "                         .c_in(1'b0)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//Pipeline Register                                                      \n";
     mod192  << "	R16_PipeReg2 u0_R16_PipeReg2(.A0_out(S_t1_reg_wire),                     \n";
     mod192  << "								 .Ac_out(C_t1_reg_wire),                     \n";
     mod192  << "                                 .A0_in(S_t1_wire),                         \n";
     mod192  << "								 .Ac_in(C_t1_wire),                          \n";
     mod192  << "                                 .rst_n(rst_n),                             \n";
     mod192  << "                                 .clk(clk)                                  \n";
     mod192  << "                                 ) ;                                        \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	CLA65 u0_CLA65(.sum(S_t2_wire),                                          \n";
     mod192  << "				   .c_out(C_t2_wire),                                        \n";
     mod192  << "                   .a_in(t1D_wire),                                         \n";
     mod192  << "                   .b_in(Ninv2_reg_wire),                                   \n";
     mod192  << "                   .c_in(1'b1)                                              \n";
     mod192  << "			       // rst_n,                                                 \n";
     mod192  << "                   // clk                                                   \n";
     mod192  << "                   ) ;                                                      \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	ModMux u4_ModMux(.S_out(t3_wire),                                        \n";
     mod192  << "                     .A_in(S_t2_wire[P_WIDTH-1:0]), //Sel_in=1              \n";
     mod192  << "		             .B_in(S_t1_reg_wire), //Sel_in=0                        \n";
     mod192  << "			         .Sel_in(C_t2_wire)                                      \n";
     mod192  << "                     ) ;                                                    \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//(2^32b+c)+(2^32a+d) mod prime                                          \n";
     mod192  << "	CLA64_co u5_CLA64_co(.sum(S_t4_wire),                                    \n";
     mod192  << "				         .c_out(C_t4_wire),                                  \n";
     mod192  << "                         .a_in(bcp_wire),                                   \n";
     mod192  << "                         .b_in(adp_wire),                                   \n";
     mod192  << "                         .c_in(1'b0)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//Pipeline Register                                                      \n";
     mod192  << "	R16_PipeReg2 u1_R16_PipeReg2(.A0_out(S_t4_reg_wire),                     \n";
     mod192  << "								 .Ac_out(C_t4_reg_wire),                     \n";
     mod192  << "                                 .A0_in(S_t4_wire),                         \n";
     mod192  << "								 .Ac_in(C_t4_wire),                          \n";
     mod192  << "                                 .rst_n(rst_n),                             \n";
     mod192  << "                                 .clk(clk)                                  \n";
     mod192  << "                                 ) ;                                        \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	CLA65 u1_CLA65(.sum(S_t5_wire),                                          \n";
     mod192  << "				   .c_out(C_t5_wire),                                        \n";
     mod192  << "                   .a_in(t4D_wire),                                         \n";
     mod192  << "                   .b_in(Ninv2_reg_wire),                                   \n";
     mod192  << "                   .c_in(1'b1)                                              \n";
     mod192  << "			       // rst_n,                                                 \n";
     mod192  << "                   // clk                                                   \n";
     mod192  << "                   ) ;                                                      \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	ModMux u5_ModMux(.S_out(t6_wire),                                        \n";
     mod192  << "                     .A_in(S_t5_wire[P_WIDTH-1:0]), //Sel_in=1              \n";
     mod192  << "		             .B_in(S_t4_reg_wire), //Sel_in=0                        \n";
     mod192  << "			         .Sel_in(C_t5_wire)                                      \n";
     mod192  << "                     ) ;			                                         \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//(2^32e+f)+(2^32d+a)-(2^32b+c)+(2^32a+d) mod prime                      \n";
     mod192  << "	CLA64_co u6_CLA64_co(.sum(S_t7_wire),                                    \n";
     mod192  << "				         .c_out(C_t7_wire),                                  \n";
     mod192  << "                         .a_in(t3_wire),                                    \n";
     mod192  << "                         .b_in(t6invD_wire),                                \n";
     mod192  << "                         .c_in(1'b1)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//Pipeline Register                                                      \n";
     mod192  << "	R16_PipeReg2 u2_R16_PipeReg2(.A0_out(S_t7_reg_wire),                     \n";
     mod192  << "								 .Ac_out(C_t7_reg_wire),                     \n";
     mod192  << "                                 .A0_in(S_t7_wire),                         \n";
     mod192  << "								 .Ac_in(C_t7_wire),                          \n";
     mod192  << "                                 .rst_n(rst_n),                             \n";
     mod192  << "                                 .clk(clk)                                  \n";
     mod192  << "                                 ) ;                                        \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	CLA64_co u7_CLA64_co(.sum(S_t8_wire),                                    \n";
     mod192  << "				         .c_out(C_t8_wire),                                  \n";
     mod192  << "                         .a_in(S_t7_reg_wire),                              \n";
     mod192  << "                         .b_in(N_D2_wire),                                  \n";
     mod192  << "                         .c_in(1'b0)                                        \n";
     mod192  << "			             // rst_n,                                           \n";
     mod192  << "                         // clk                                             \n";
     mod192  << "                         ) ;                                                \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	ModMux u6_ModMux(.S_out(S_out),                                          \n";
     mod192  << "                     .A_in(S_t7_reg_wire), //Sel_in=1                       \n";
     mod192  << "		             .B_in(S_t8_wire), //Sel_in=0                            \n";
     mod192  << "			         .Sel_in(C_t7_reg_wire)                                  \n";
     mod192  << "                     ) ;                                                    \n";
     mod192  << "	                                                                         \n";
     mod192  << "	                                                                         \n";
     mod192  << "	//                                                                       \n";
     mod192  << "	// always @(posedge clk or negedge rst_n) begin                          \n";
     mod192  << "		// if(~rst_n) begin                                                  \n";
     mod192  << "			// S_out <= P_ZERO ;                                             \n";
     mod192  << "		// end                                                               \n";
     mod192  << "		// else begin                                                        \n";
     mod192  << "			// S_out <= S_wire ;                                             \n";
     mod192  << "		// end                                                               \n";
     mod192  << "	// end                                                                   \n";
     mod192  << "                                                                            \n";
     mod192  << "endmodule                                                                   \n";	 
	 mod192.close();
}
void Mod::Mod192PD(std::string string_in){
	 std::ofstream mod192pd;
     std::string        string_buf = "/Mod192PD.v";
     std::stringstream  ss;
     ss << string_in << string_buf;      
	 mod192pd.open(ss.str());
     mod192pd << "`timescale 1 ns/1 ps                                   \n";       
     mod192pd << "module Mod192PD(Ninv1_out,                             \n";
     mod192pd << "                Ninv2_out,                             \n";
     mod192pd << "			    efD_out,                                 \n";
     mod192pd << "				daD_out,                                 \n";
     mod192pd << "			    bcD_out,                                 \n";
     mod192pd << "				adD_out,                                 \n";
     mod192pd << "			    t1D_out,                                 \n";
     mod192pd << "				t4D_out,                                 \n";
     mod192pd << "				t6invD_out,                              \n";
     mod192pd << "			    t1_s_in,                                 \n";
     mod192pd << "			    t1_c_in,                                 \n";
     mod192pd << "				t4_s_in,                                 \n";
     mod192pd << "			    t4_c_in,                                 \n";
     mod192pd << "				t6_in,                                   \n";
     mod192pd << "                A_in,                                  \n";
     mod192pd << "		        N_in                                     \n";
     mod192pd << "                ) ;                                    \n";
     mod192pd << "parameter D_WIDTH     = 192 ;                          \n";
     mod192pd << "parameter P_WIDTH     = 64 ;                           \n";
     mod192pd << "parameter SEG_ZERO    = 32'h0 ;                        \n";
     mod192pd << "                                                       \n";
     mod192pd << "output [P_WIDTH-1:0] Ninv1_out ;                       \n";
     mod192pd << "output [P_WIDTH:0]   Ninv2_out ;                       \n";
     mod192pd << "output [P_WIDTH-1:0] efD_out ;                         \n";
     mod192pd << "output [P_WIDTH-1:0] daD_out ;                         \n";
     mod192pd << "output [P_WIDTH-1:0] bcD_out ;                         \n";
     mod192pd << "output [P_WIDTH-1:0] adD_out ;                         \n";
     mod192pd << "output [P_WIDTH:0]   t1D_out ;                         \n";
     mod192pd << "output [P_WIDTH:0]   t4D_out ;                         \n";
     mod192pd << "output [P_WIDTH-1:0] t6invD_out ;                      \n";
     mod192pd << "                                                       \n";
     mod192pd << "input [P_WIDTH-1:0] t1_s_in ;                          \n";
     mod192pd << "input               t1_c_in ;                          \n";
     mod192pd << "input [P_WIDTH-1:0] t4_s_in ;                          \n";
     mod192pd << "input               t4_c_in ;                          \n";
     mod192pd << "input [P_WIDTH-1:0] t6_in ;                            \n";
     mod192pd << "input [D_WIDTH-1:0] A_in ;                             \n";
     mod192pd << "input [P_WIDTH-1:0] N_in ;                             \n";
     mod192pd << "                                                       \n";
     mod192pd << "	                                                     \n";
     mod192pd << "	//64-bit inverter N                                  \n";
     mod192pd << "	assign Ninv1_out = (~N_in) ;                         \n";
     mod192pd << "	//65-bit inverter N                                  \n";
     mod192pd << "	assign Ninv2_out = ~{1'b0, N_in} ;                   \n";
     mod192pd << "	//(2^32e)+f                                          \n";
     mod192pd << "	assign efD_out = {A_in[63:32], A_in[31:0]} ;         \n";
     mod192pd << "	//(2^32d+a) mod prime	                             \n";
     mod192pd << "	assign daD_out = {A_in[95:64], A_in[191:160]} ;      \n";
     mod192pd << "	//(2^32b+c) mod prime	                             \n";
     mod192pd << "	assign bcD_out = {A_in[159:128], A_in[127:96]} ;     \n";
     mod192pd << "	//(2^32a+d) mod prime	                             \n";
     mod192pd << "	assign adD_out = {A_in[191:160], A_in[95:64]} ;      \n";
     mod192pd << "	//65-bit t1                                          \n";
     mod192pd << "	assign t1D_out = {t1_c_in,t1_s_in} ;                 \n";
     mod192pd << "	//65-bit t4                                          \n";
     mod192pd << "	assign t4D_out = {t4_c_in,t4_s_in} ;                 \n";
     mod192pd << "	// inverter t6                                       \n";
     mod192pd << "	assign t6invD_out = (~t6_in) ;                       \n";
     mod192pd << "	                                                     \n";
     mod192pd << "endmodule                                              \n";	 
	 mod192pd.close();	
}
void Mod::ModMux(std::string string_in){
	 std::ofstream modmux;
     std::string        string_buf = "/ModMux.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 modmux.open(ss.str());	
     modmux <<" `timescale 1 ns/1 ps                             \n";
     modmux <<" module ModMux(S_out,                             \n";
     modmux <<"               A_in,                              \n";
     modmux <<" 		      B_in,                                 \n";
     modmux <<" 			  Sel_in                                \n";
     modmux <<"               ) ;                                \n";
     modmux <<" parameter P_WIDTH     = 64 ;                     \n";
     modmux <<"                                                  \n";
     modmux <<" output[P_WIDTH-1:0] S_out ;                      \n";
     modmux <<"                                                  \n";
     modmux <<" input [P_WIDTH-1:0] A_in ;                       \n";
     modmux <<" input [P_WIDTH-1:0] B_in ;                       \n";
     modmux <<" input               Sel_in ;                     \n";
     modmux <<"                                                  \n";
     modmux <<" 	//                                              \n";
     modmux <<" 	assign S_out = (Sel_in==1'b1) ? A_in : B_in ;   \n";
     modmux <<" 	                                                \n";
     modmux <<" 	                                                \n";
     modmux <<" endmodule                                        \n";
	 modmux.close();		
}
void Mod::Mul64(std::string string_in){
	 std::ofstream mul64;
     std::string        string_buf = "/Mul64.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 mul64.open(ss.str());
     mul64 <<" `timescale 1 ns/1 ps                          \n";
     mul64 <<" module Mul64(S_out,                           \n";
     mul64 <<" 		     A_in,                               \n";
     mul64 <<" 		     B_in,                               \n";
     mul64 <<"              rst_n,                           \n";
     mul64 <<"              clk                              \n";
     mul64 <<"              ) ;                              \n";
     mul64 <<"                                               \n";
     mul64 <<" parameter P_WIDTH    = 64 ;                   \n";
     mul64 <<" parameter PD_WIDTH   = 128 ;                  \n";
     mul64 <<" parameter PD_ZERO    = 128'h0 ;               \n";
     mul64 <<"                                               \n";
     mul64 <<"                                               \n";
     mul64 <<" output[PD_WIDTH-1:0] S_out ;                  \n";
     mul64 <<"                                               \n";
     mul64 <<"                                               \n";
     mul64 <<" input [P_WIDTH-1:0] A_in ;                    \n";
     mul64 <<" input [P_WIDTH-1:0] B_in ;                    \n";
     mul64 <<" input               rst_n ;                   \n";
     mul64 <<" input               clk ;                     \n";
     mul64 <<"                                               \n";
     mul64 <<" wire [PD_WIDTH-1:0] S_wire ;                  \n";
     mul64 <<"                                               \n";
     mul64 <<" reg [PD_WIDTH-1:0] S_out ;                    \n";
     mul64 <<" 	                                             \n";
     mul64 <<" 	//Mul                                        \n";
     mul64 <<" 	assign S_wire = A_in*B_in ;                  \n";
     mul64 <<"                                               \n";
     mul64 <<" 	//                                           \n";
     mul64 <<" 	always @(posedge clk or negedge rst_n) begin \n";
     mul64 <<" 		if(~rst_n) begin                         \n";
     mul64 <<" 			S_out <= PD_ZERO ;                   \n";
     mul64 <<" 		end                                      \n";
     mul64 <<" 		else begin                               \n";
     mul64 <<" 			S_out <= S_wire ;                    \n";
     mul64 <<" 		end                                      \n";
     mul64 <<" 	end                                          \n";
     mul64 <<"                                               \n";
     mul64 <<"                                               \n";
     mul64 <<" 				                                 \n";
     mul64 <<" endmodule                                     \n";
	 mul64.close();		
}
void Mod::MulMod128(std::string string_in){
	 std::ofstream mulmod128;
     std::string        string_buf = "/MulMod128.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 mulmod128.open(ss.str());
     mulmod128 << "`timescale 1 ns/1 ps                                              \n";     
     mulmod128 << "module MulMod128(S_out,                                           \n";
     mulmod128 << "           A_in,                                                  \n";
     mulmod128 << "		   B_in,                                                     \n";
     mulmod128 << "		   N_in,                                                     \n";
     mulmod128 << "           rst_n,                                                 \n";
     mulmod128 << "           clk                                                    \n";
     mulmod128 << "           ) ;                                                    \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "parameter P_WIDTH     = 64 ;                                      \n";
     mulmod128 << "parameter PD_WIDTH    = 128 ;                                     \n";
     mulmod128 << "parameter W_WIDTH     = 32 ;                                      \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "output[P_WIDTH-1:0] S_out ;                                       \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "input [P_WIDTH-1:0] A_in ;                                        \n";
     mulmod128 << "input [P_WIDTH-1:0] B_in ;                                        \n";
     mulmod128 << "input [P_WIDTH-1:0] N_in ;                                        \n";
     mulmod128 << "input               rst_n ;                                       \n";
     mulmod128 << "input               clk ;                                         \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "wire  [PD_WIDTH-1:0] Mul_wire ;                                   \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "wire  [P_WIDTH:0]    Ninv2_wire ;                                 \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  t1FD_wire ;                                  \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  t1D_wire ;                                   \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  t3inv1D_wire ;                               \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  dD_wire ;                                    \n";
     mulmod128 << "wire  [P_WIDTH:0]    t7D_wire ;                                   \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "wire  [W_WIDTH-1:0]  S_t1_wire ;                                  \n";
     mulmod128 << "wire                 C_t1_wire ;                                  \n";
     mulmod128 << "wire  [W_WIDTH-1:0]  S_t3_wire ;                                  \n";
     mulmod128 << "wire                 C_t3_wire ;                                  \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  t2_wire ;                                    \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  S_t4_wire ;                                  \n";
     mulmod128 << "wire                 C_t4_wire ;                                  \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  S_t5_wire ;                                  \n";
     mulmod128 << "wire                 C_t5_wire ;                                  \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  t6_wire ;                                    \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  S_t7_wire ;                                  \n";
     mulmod128 << "wire                 C_t7_wire ;                                  \n";
     mulmod128 << "wire  [P_WIDTH:0]    S_t8_wire ;                                  \n";
     mulmod128 << "wire                 C_t8_wire ;                                  \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  S_out_wire ;                                 \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  S_t4_reg_wire ;                              \n";
     mulmod128 << "wire                 C_t4_reg_wire ;                              \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  N_D1_wire ;                                  \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  dD_reg_wire ;                                \n";
     mulmod128 << "wire  [P_WIDTH-1:0]  S_t7_reg_wire ;                              \n";
     mulmod128 << "wire                 C_t7_reg_wire ;                              \n";
     mulmod128 << "wire  [P_WIDTH:0]    Ninv2_reg_wire ;                             \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//Mul                                                            \n";
     mulmod128 << "	Mul64 u_Mul64(.S_out(Mul_wire),                                  \n";
     mulmod128 << "		          .A_in(A_in),                                       \n";
     mulmod128 << "		          .B_in(B_in),                                       \n";
     mulmod128 << "                  .rst_n(rst_n),                                  \n";
     mulmod128 << "                  .clk(clk)                                       \n";
     mulmod128 << "                  ) ;                                             \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "	//Pre-process Data                                               \n";
     mulmod128 << "    MulMod128PD u_MulMod128PD(.Ninv2_out(Ninv2_wire),             \n";
     mulmod128 << "			                  .t1FD_wire(t1FD_wire),                 \n";
     mulmod128 << "				              .t1D_wire(t1D_wire),                   \n";
     mulmod128 << "			                  .t3inv1D_wire(t3inv1D_wire),           \n";
     mulmod128 << "				              .dD_wire(dD_wire),                     \n";
     mulmod128 << "			                  .t7D_wire(t7D_wire),                   \n";
     mulmod128 << "			                  .t1_s_in(S_t1_wire),                   \n";
     mulmod128 << "			                  .t3_s_in(S_t3_wire),                   \n";
     mulmod128 << "				              .t3_c_in(C_t3_wire),                   \n";
     mulmod128 << "			                  .t7_s_in(S_t7_reg_wire),               \n";
     mulmod128 << "				              .t7_c_in(C_t7_reg_wire),               \n";
     mulmod128 << "                              .Mul_in(Mul_wire),                  \n";
     mulmod128 << "		                      .N_in(N_in)                            \n";
     mulmod128 << "                               ) ;                                \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//b+c                                                            \n";
     mulmod128 << "	CLA32 u0_CLA32(.sum(S_t1_wire),                                  \n";
     mulmod128 << "				   .c_out(C_t1_wire),                                \n";
     mulmod128 << "                   .a_in(Mul_wire[95:64]),                        \n";
     mulmod128 << "                   .b_in(Mul_wire[63:32]),                        \n";
     mulmod128 << "                   .c_in(1'b0)                                    \n";
     mulmod128 << "			       // rst_n,                                         \n";
     mulmod128 << "                   // clk                                         \n";
     mulmod128 << "                   ) ;                                            \n";
     mulmod128 << "	//a+b                                                            \n";
     mulmod128 << "	CLA32 u1_CLA32(.sum(S_t3_wire),                                  \n";
     mulmod128 << "				   .c_out(C_t3_wire),                                \n";
     mulmod128 << "                   .a_in(Mul_wire[127:96]),                       \n";
     mulmod128 << "                   .b_in(Mul_wire[95:64]),                        \n";
     mulmod128 << "                   .c_in(1'b0)                                    \n";
     mulmod128 << "			       // rst_n,                                         \n";
     mulmod128 << "                   // clk                                         \n";
     mulmod128 << "                   ) ;		                                     \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//(2^32)(b+c)                                                    \n";
     mulmod128 << "	ModMux u0_ModMux(.S_out(t2_wire),                                \n";
     mulmod128 << "                     .A_in(t1FD_wire), //Sel_in=1                 \n";
     mulmod128 << "		             .B_in(t1D_wire), //Sel_in=0                     \n";
     mulmod128 << "			         .Sel_in(C_t1_wire)                              \n";
     mulmod128 << "                     ) ;                                          \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//(2^32)(b+c)-(a+b)                                              \n";
     mulmod128 << "	CLA64_co u0_CLA64_co(.sum(S_t4_wire),                            \n";
     mulmod128 << "				         .c_out(C_t4_wire),                          \n";
     mulmod128 << "                         .a_in(t2_wire),                          \n";
     mulmod128 << "                         .b_in(t3inv1D_wire),                     \n";
     mulmod128 << "                         .c_in(1'b1)                              \n";
     mulmod128 << "			             // rst_n,                                   \n";
     mulmod128 << "                         // clk                                   \n";
     mulmod128 << "                         ) ;                                      \n";
     mulmod128 << "	//Pipeline Register                                              \n";
     mulmod128 << "	R16_PipeReg4_2 u0_R16_PipeReg4_2(.A0_out(S_t4_reg_wire),         \n";
     mulmod128 << "								     .Ac_out(C_t4_reg_wire),         \n";
     mulmod128 << "									 .N_D1_out(N_D1_wire),           \n";
     mulmod128 << "									 .D_out(dD_reg_wire),            \n";
     mulmod128 << "                                     .A0_in(S_t4_wire),           \n";
     mulmod128 << "								     .Ac_in(C_t4_wire),              \n";
     mulmod128 << "									 .N_in(N_in),                    \n";
     mulmod128 << "									 .D_in(dD_wire),                 \n";
     mulmod128 << "                                     .rst_n(rst_n),               \n";
     mulmod128 << "                                     .clk(clk)                    \n";
     mulmod128 << "                                     ) ;                          \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//                                                               \n";
     mulmod128 << "	CLA64_co u1_CLA64_co(.sum(S_t5_wire),                            \n";
     mulmod128 << "				         .c_out(C_t5_wire),                          \n";
     mulmod128 << "                         .a_in(S_t4_reg_wire),                    \n";
     mulmod128 << "                         .b_in(N_D1_wire),                        \n";
     mulmod128 << "                         .c_in(1'b0)                              \n";
     mulmod128 << "			             // rst_n,                                   \n";
     mulmod128 << "                         // clk                                   \n";
     mulmod128 << "                         ) ;  			                         \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//                                                               \n";
     mulmod128 << "	ModMux u1_ModMux(.S_out(t6_wire),                                \n";
     mulmod128 << "                     .A_in(S_t4_reg_wire), //Sel_in=1             \n";
     mulmod128 << "		             .B_in(S_t5_wire), //Sel_in=0                    \n";
     mulmod128 << "			         .Sel_in(C_t4_reg_wire)                          \n";
     mulmod128 << "                     ) ;                                          \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//2^32)(b+c)-(a+b)+d                                             \n";
     mulmod128 << "	CLA64_co u2_CLA64_co(.sum(S_t7_wire),                            \n";
     mulmod128 << "				         .c_out(C_t7_wire),                          \n";
     mulmod128 << "                         .a_in(t6_wire),                          \n";
     mulmod128 << "                         .b_in(dD_reg_wire),                      \n";
     mulmod128 << "                         .c_in(1'b0)                              \n";
     mulmod128 << "			             // rst_n,                                   \n";
     mulmod128 << "                         // clk                                   \n";
     mulmod128 << "                         ) ;  					                 \n";
     mulmod128 << "	//Pipeline Register                                              \n";
     mulmod128 << "	R16_PipeReg4 u_R16_PipeReg4(.A0_out(S_t7_reg_wire),              \n";
     mulmod128 << "					            .Ac_out(C_t7_reg_wire),              \n";
     mulmod128 << "					            .Ninv2_D2_out(Ninv2_reg_wire),       \n";
     mulmod128 << "                                .A0_in(S_t7_wire),                \n";
     mulmod128 << "					            .Ac_in(C_t7_wire),                   \n";
     mulmod128 << "					            .Ninv2_in(Ninv2_wire),               \n";
     mulmod128 << "                                .rst_n(rst_n),                    \n";
     mulmod128 << "                                .clk(clk)                         \n";
     mulmod128 << "                                ) ;                               \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "	//                                                               \n";
     mulmod128 << "	CLA65 u0_CLA65(.sum(S_t8_wire),                                  \n";
     mulmod128 << "				   .c_out(C_t8_wire),                                \n";
     mulmod128 << "                   .a_in(t7D_wire),                               \n";
     mulmod128 << "                   .b_in(Ninv2_reg_wire),                         \n";
     mulmod128 << "                   .c_in(1'b1)                                    \n";
     mulmod128 << "			       // rst_n,                                         \n";
     mulmod128 << "                   // clk                                         \n";
     mulmod128 << "                   ) ;                                            \n";
     mulmod128 << "	//                                                               \n";
     mulmod128 << "	ModMux u2_ModMux(.S_out(S_out),                                  \n";
     mulmod128 << "                     .A_in(S_t8_wire[P_WIDTH-1:0]), //Sel_in=1    \n";
     mulmod128 << "		             .B_in(S_t7_reg_wire), //Sel_in=0                \n";
     mulmod128 << "			         .Sel_in(C_t8_wire)                              \n";
     mulmod128 << "                     ) ;                                          \n";
     mulmod128 << "                                                                  \n";
     mulmod128 << "	                                                                 \n";
     mulmod128 << "endmodule                                                         \n";	 
     mulmod128.close();		
}
void Mod::MulMod128PD(std::string string_in){
	 std::ofstream mulmod128pd;
     std::string        string_buf = "/MulMod128PD.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 mulmod128pd.open(ss.str());
     mulmod128pd << "`timescale 1 ns/1 ps                                           \n";
     mulmod128pd << "module MulMod128PD(Ninv2_out,                                  \n";
     mulmod128pd << "			       t1FD_wire,                                   \n";
     mulmod128pd << "				   t1D_wire,                                    \n";
     mulmod128pd << "			       t3inv1D_wire,                                \n";
     mulmod128pd << "				   dD_wire,                                     \n";
     mulmod128pd << "			       t7D_wire,                                    \n";
     mulmod128pd << "			       t1_s_in,                                     \n";
     mulmod128pd << "			       t3_s_in,                                     \n";
     mulmod128pd << "				   t3_c_in,                                     \n";
     mulmod128pd << "			       t7_s_in,                                     \n";
     mulmod128pd << "				   t7_c_in,                                     \n";
     mulmod128pd << "                   Mul_in,                                     \n";
     mulmod128pd << "		           N_in                                         \n";
     mulmod128pd << "                   ) ;                                         \n";
     mulmod128pd << "                                                               \n";
     mulmod128pd << "parameter P_WIDTH     = 64 ;                                   \n";
     mulmod128pd << "parameter W_WIDTH     = 32 ;                                   \n";
     mulmod128pd << "parameter PD_WIDTH    = 128 ;                                  \n";
     mulmod128pd << "parameter W_ZERO      = 32'h0 ;                                \n";
     mulmod128pd << "parameter W_ZERO1     = 31'h0 ;                                \n";
     mulmod128pd << "                                                               \n";
     mulmod128pd << "                                                               \n";
     mulmod128pd << "output [P_WIDTH:0]   Ninv2_out ;                               \n";
     mulmod128pd << "output [P_WIDTH-1:0] t1FD_wire ;                               \n";
     mulmod128pd << "output [P_WIDTH-1:0] t1D_wire ;                                \n";
     mulmod128pd << "output [P_WIDTH-1:0] t3inv1D_wire ;                            \n";
     mulmod128pd << "output [P_WIDTH-1:0] dD_wire ;                                 \n";
     mulmod128pd << "output [P_WIDTH:0]   t7D_wire ;                                \n";
     mulmod128pd << "                                                               \n";
     mulmod128pd << "                                                               \n";
     mulmod128pd << "input [W_WIDTH-1:0]  t1_s_in ;                                 \n";
     mulmod128pd << "input [W_WIDTH-1:0]  t3_s_in ;                                 \n";
     mulmod128pd << "input                t3_c_in ;                                 \n";
     mulmod128pd << "input [P_WIDTH-1:0]  t7_s_in ;                                 \n";
     mulmod128pd << "input                t7_c_in ;                                 \n";
     mulmod128pd << "input [PD_WIDTH-1:0] Mul_in ;                                  \n";
     mulmod128pd << "input [P_WIDTH-1:0]  N_in ;                                    \n";
     mulmod128pd << "                                                               \n";
     mulmod128pd << "	                                                            \n";
     mulmod128pd << "	//65-bit inverter N                                         \n";
     mulmod128pd << "	assign Ninv2_out = ~{1'b0, N_in} ;                          \n";
     mulmod128pd << "	//                                                          \n";
     mulmod128pd << "	assign t1FD_wire = {t1_s_in[W_WIDTH-1:0],32'hFFFF_FFFF} ;   \n";
     mulmod128pd << "	//                                                          \n";
     mulmod128pd << "	assign t1D_wire = {t1_s_in[W_WIDTH-1:0],W_ZERO} ;           \n";
     mulmod128pd << "	// inverter t6                                              \n";
     mulmod128pd << "	assign t3inv1D_wire = (~{W_ZERO1,t3_c_in,t3_s_in}) ;        \n";
     mulmod128pd << "	//	                                                        \n";
     mulmod128pd << "	assign dD_wire = {W_ZERO,Mul_in[31:0]} ;                    \n";
     mulmod128pd << "	//65-bit t7                                                 \n";
     mulmod128pd << "	assign t7D_wire = {t7_c_in,t7_s_in} ;                       \n";
     mulmod128pd << "	                                                            \n";
     mulmod128pd << "	                                                            \n";
     mulmod128pd << "endmodule                                                      \n";	 
	 mulmod128pd.close();		
}