#include <vector>
#include <iostream>
#include <fstream>
#include <math.h>
#include <sstream>

#include "configurable_BFFT.h"
//Generate file
void configurable_BFFT::gen(std::string string_in,unsigned long fft_p,unsigned long cp_width,unsigned long pre_width){
	fft_point = fft_p;
	CP_width  = cp_width;
	PRE_width = pre_width;
	
	//top module 
	FFTP(string_in);
	//
	Config_Reg(string_in); // configurable new module 
	Rectrl(string_in);
	IReorderMA_pip(string_in);
	R16_InpipeReg(string_in);
	R16_BU_outpipe(string_in);
	CenCtrl_16(string_in);
	//CSM_4096(string_in);
	//CSM_8192(string_in);
	//CSM_16384(string_in);
	//CSM_32768(string_in);
	//CSM_65536(string_in);
	//Ctrl_PipeReg1(string_in);
	Ctrl_PipeReg1_R2P(string_in);
	//R16_ROMPipeReg1(string_in);
	R16_ROMPipeReg1_R2P(string_in);
	order_ROMReg_r16(string_in);
	R16_AGU(string_in);
	//R16_AGU_4096(string_in);
	//R16_AGU_8192(string_in);
	//R16_AGU_16384(string_in);
	//R16_AGU_32768(string_in);
	//R16_AGU_65536(string_in);
	//R16_WD_buf(string_in);
	R16_WD_buf_R2P(string_in);
	R16_WAddr(string_in);
	R16_DC(string_in);
	MAMux_HSRAM(string_in);
	MAMux_RESRAM(string_in);
	TWIMux(string_in);
	Mux1(string_in);
	Mux2(string_in);
	Mux3(string_in);
	Mux4(string_in);
	Mux5(string_in);
	Mux6(string_in);	 
	//TWIpipe_r16(string_in);
	TWIpipe_r16_R2P(string_in);
	//R16_NPipeReg1(string_in);
	R16_NPipeReg2(string_in);
	R16_NPipeReg3(string_in);
	//R16_PipeReg1(string_in);
	R16_PipeReg2(string_in);
	//R16_PipeReg3(string_in);
	R16_PipeReg4(string_in);
	R16_PipeReg4_2(string_in);
	//R16_PipeReg5_1(string_in);
	//R16_PipeReg5_2(string_in);
	//Radix16_Pipe(string_in);

	BU_R16_S0_R2P(string_in);
	BU_R16_R2P(string_in);
	Pipe_R2P(string_in);
	Radix16_Pipe_R2P(string_in);
	//Sum16_out0(string_in);
	//Sum16_out1(string_in);
	//Sum16_out2(string_in);
	//Sum16_out3(string_in);
	//Sum16_out4(string_in);
	//Sum16_out5(string_in);
	//Sum16_out6(string_in);
	//Sum16_out7(string_in);
	//Sum16_out8(string_in);
	//Sum16_out9(string_in);
	//Sum16_out10(string_in);
	//Sum16_out11(string_in);
	//Sum16_out12(string_in);
	//Sum16_out13(string_in);
	//Sum16_out14(string_in);
	//Sum16_out15(string_in);
	//Sum16_CSAout0(string_in);
	//Sum16_CSAout1(string_in);
	//Sum16_CSAout2(string_in);
	//Sum16_CSAout3(string_in);
	//Sum16_CSAout4(string_in);
	//Sum16_CSAout5(string_in);
	//Sum16_CSAout6(string_in);
	//Sum16_CSAout7(string_in);
	//Sum16_CSAout8(string_in);
	//Sum16_CSAout9(string_in);
	//Sum16_CSAout10(string_in);
	//Sum16_CSAout11(string_in);
	//Sum16_CSAout12(string_in);
	//Sum16_CSAout13(string_in);
	//Sum16_CSAout14(string_in);
	//Sum16_CSAout15(string_in);
	CLA4(string_in);
	//CLA6(string_in);
	CLA16(string_in);
	CLA16clg(string_in);
	//CLA24(string_in);
	//CLA24clg(string_in);
	CLA32(string_in);
	CLA32clg(string_in);
	//CLA64(string_in);
	CLA64_co(string_in);
	//CLA64clg(string_in);
	CLA64clg_co(string_in);
	CLA65(string_in);
	CLA65clg(string_in);
	//CLA96(string_in);
	//CLA96clg(string_in);
	//CLA192(string_in);
	//CLA192clg(string_in);   
}
//Top module
void configurable_BFFT::FFTP(std::string string_in){
     std::ofstream fftp;
     std::string        string_buf = "/FFTP.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     fftp.open(ss.str());	
fftp << " `timescale 1 ns/1 ps\n";
fftp << " module FFTP(MulValid_out,\n";
fftp << "             MulD0_out,\n";
fftp << "             MulD1_out,\n";
fftp << "             MulD2_out,\n";
fftp << "             MulD3_out,\n";
fftp << "             MulD4_out,\n";
fftp << "             MulD5_out,\n";
fftp << "             MulD6_out,\n";
fftp << "             MulD7_out,\n";
fftp << "             MulD8_out,\n";
fftp << "             MulD9_out,\n";
fftp << "             MulD10_out,\n";
fftp << "             MulD11_out,\n";
fftp << "             MulD12_out,\n";
fftp << "             MulD13_out,\n";
fftp << "             MulD14_out,\n";
fftp << "             MulD15_out,\n";
fftp << "             ExtB0_D0_in,                                                                    \n";
fftp << "             ExtB0_D1_in,                                                                    \n";
fftp << "             ExtB0_D2_in,                                                                    \n";
fftp << "             ExtB0_D3_in,                                                                    \n";
fftp << "             ExtB0_D4_in,                                                                    \n";
fftp << "             ExtB0_D5_in,                                                                    \n";
fftp << "             ExtB0_D6_in,                                                                    \n";
fftp << "             ExtB0_D7_in,                                                                    \n";
fftp << "             ExtB1_D0_in,                                                                    \n";
fftp << "             ExtB1_D1_in,                                                                    \n";
fftp << "             ExtB1_D2_in,                                                                    \n";
fftp << "             ExtB1_D3_in,                                                                    \n";
fftp << "             ExtB1_D4_in,                                                                    \n";
fftp << "             ExtB1_D5_in,                                                                    \n";
fftp << "             ExtB1_D6_in,                                                                    \n";
fftp << "             ExtB1_D7_in,                                                                    \n";
fftp << "             N_in,                                                                           \n";
fftp << "             ExtValid_in,                                                                    \n";
fftp << "              //Configure port                                                               \n";
fftp << "             //Barrett modular multiplication                                                \n";
fftp << "             Prime,                                                                          \n";
fftp << "             Pre_computing,                                                                  \n";
fftp << "             //                                                                              \n";
fftp << "             MixRadix_sel,                                                                   \n";
fftp << "             Point_sel,                                                                      \n";
fftp << "             MA_Configure,                                                                   \n";
fftp << "              H_MA_sel,                                                                      \n";
fftp << "             H_SRAM_CEN,                                                                     \n";
fftp << "              H_SRAM_WEN,                                                                    \n";
fftp << "             //SRAM_DATA_IN_Port                                                             \n";
fftp << "             //bank0                                                                         \n";
fftp << "             H_DATA_B0S0,                                                                    \n";
fftp << "             H_DATA_B0S1,                                                                    \n";
fftp << "             H_DATA_B0S2,                                                                    \n";
fftp << "             H_DATA_B0S3,                                                                    \n";
fftp << "             H_DATA_B0S4,                                                                    \n";
fftp << "             H_DATA_B0S5,                                                                    \n";
fftp << "             H_DATA_B0S6,                                                                    \n";
fftp << "             H_DATA_B0S7,                                                                    \n";
fftp << "             //bank1                                                                         \n";
fftp << "             H_DATA_B1S0,                                                                    \n";
fftp << "             H_DATA_B1S1,                                                                    \n";
fftp << "             H_DATA_B1S2,                                                                    \n";
fftp << "             H_DATA_B1S3,                                                                    \n";
fftp << "             H_DATA_B1S4,                                                                    \n";
fftp << "             H_DATA_B1S5,                                                                    \n";
fftp << "             H_DATA_B1S6,                                                                    \n";
fftp << "             H_DATA_B1S7,                                                                    \n";
fftp << "               //Reorder & IReorder                                                           \n";
fftp << "			   order_SRAM_CEN,                                                                 \n";
fftp << "               order_SRAM_WEN,                                                                \n";
fftp << "               order_MA,			                                                           \n";
fftp << "               order_sel,			                                                           \n";
fftp << "               //                                                                             \n";
fftp << "               Reorder_DATA_SRAM0,                                                            \n";
fftp << "               Reorder_DATA_SRAM1,                                                            \n";
fftp << "               Reorder_DATA_SRAM2,                                                            \n";
fftp << "               Reorder_DATA_SRAM3,                                                            \n";
fftp << "			   //                                                                              \n";
fftp << "               IReorder_DATA_SRAM0,                                                           \n";
fftp << "               IReorder_DATA_SRAM1,                                                           \n";
fftp << "               IReorder_DATA_SRAM2,			                                               \n";
fftp << "               IReorder_DATA_SRAM3,			                                               \n";
fftp << "			   //                                                                              \n";
fftp << "               rst_n,                                                                         \n";
fftp << "               clk                                                                            \n";
fftp << "               ) ;                                                                            \n";
fftp << " 			                                                                                   \n";
fftp << " parameter CP_WIDTH    = "<< CP_width  <<";                                                   \n";
fftp << " parameter PRE_WIDTH   = "<< PRE_width <<";                                                   \n";
fftp << " parameter DOP_WIDTH   = "<< (2 * CP_width) <<";                                              \n";
fftp << " parameter HP_WIDTH    = 32 ; 			                                                       \n";
fftp << " parameter P_WIDTH     = 64 ; 			                                                       \n";
fftp << " parameter A_WIDTH     = 11;                                                                  \n";
fftp << " parameter SD_WIDTH    = 128;                                                                 \n";
fftp << " parameter ROMA_WIDTH  = 12;                                                                  \n";
fftp << " parameter IREMA_WIDTH = 11;                                                                  \n";
fftp << " parameter DC_WIDTH    = 15;                                                                  \n";
fftp << " parameter OUT_PIPE_WIDTH  = "<< 64 - (2 * CP_width) <<";                                     \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << " output                MulValid_out ;                                                         \n";
fftp << "                                                                                              \n";
fftp << " output[CP_WIDTH-1:0]   MulD0_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD1_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD2_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD3_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD4_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD5_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD6_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD7_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD8_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD9_out ;                                                           \n";
fftp << " output[CP_WIDTH-1:0]   MulD10_out ;                                                          \n";
fftp << " output[CP_WIDTH-1:0]   MulD11_out ;                                                          \n";
fftp << " output[CP_WIDTH-1:0]   MulD12_out ;                                                          \n";
fftp << " output[CP_WIDTH-1:0]   MulD13_out ;                                                          \n";
fftp << " output[CP_WIDTH-1:0]   MulD14_out ;                                                          \n";
fftp << " output[CP_WIDTH-1:0]   MulD15_out ;                                                          \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D0_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D1_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D2_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D3_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D4_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D5_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D6_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB0_D7_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D0_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D1_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D2_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D3_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D4_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D5_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D6_in ;                                                          \n";
fftp << " input  [CP_WIDTH-1:0] ExtB1_D7_in ;                                                          \n";
fftp << " input  [P_WIDTH-1:0]  N_in ;                                                                 \n";
fftp << " input                 ExtValid_in ;                                                          \n";
fftp << " // Barrett modular multiplication                                                            \n";
fftp << " input  [CP_WIDTH-1:0 ] Prime;                                                                \n";
fftp << " input  [PRE_WIDTH-1:0] Pre_computing;                                                        \n";
fftp << " //                                                                                           \n";
fftp << " input  [1:0]           MixRadix_sel ;                                                        \n";
fftp << " input  [2:0]           Point_sel ;                                                           \n";
fftp << " input  [A_WIDTH-1:0]   MA_Configure ;                                                        \n";
fftp << " input                  H_MA_sel ;                                                            \n";
fftp << " input                  H_SRAM_CEN ;                                                          \n";
fftp << " input                  H_SRAM_WEN ;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S0;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S1;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S2;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S3;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S4;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S5;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S6;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B0S7;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S0;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S1;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S2;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S3;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S4;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S5;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S6;                                                          \n";
fftp << " input  [SD_WIDTH-1:0]  H_DATA_B1S7;                                                          \n";
fftp << " //                                                                                           \n";
fftp << " input                 order_SRAM_CEN;                                                        \n";
fftp << " input                 order_SRAM_WEN;                                                        \n";
fftp << " input  [A_WIDTH-1:0]  order_MA;                                                              \n";
fftp << " input                 order_sel;                                                             \n";
fftp << " input  [SD_WIDTH-1:0] Reorder_DATA_SRAM0;                                                    \n";
fftp << " input  [SD_WIDTH-1:0] Reorder_DATA_SRAM1;                                                    \n";
fftp << " input  [SD_WIDTH-1:0] Reorder_DATA_SRAM2;                                                    \n";
fftp << " input  [SD_WIDTH-1:0] Reorder_DATA_SRAM3;                                                    \n";
fftp << " input  [SD_WIDTH-1:0] IReorder_DATA_SRAM0;                                                   \n";
fftp << " input  [SD_WIDTH-1:0] IReorder_DATA_SRAM1;                                                   \n";
fftp << " input  [SD_WIDTH-1:0] IReorder_DATA_SRAM2;                                                   \n";
fftp << " input  [P_WIDTH-1:0]  IReorder_DATA_SRAM3;                                                   \n";
fftp << " input                 rst_n ;                                                                \n";
fftp << " input                 clk ;                                                                  \n";
fftp << " //=============================================                                              \n";
fftp << " wire  [CP_WIDTH-1:0 ] Prime_pip_wire;                                                        \n";
fftp << " wire  [PRE_WIDTH-1:0] Pre_computing_pip_wire;                                                \n";
fftp << " //                                                                                           \n";
fftp << " wire  [1:0]           MixRadix_sel_pip_wire ;                                                \n";
fftp << " wire  [2:0]           Point_sel_pip_wire ;                                                   \n";
fftp << " wire  [A_WIDTH-1:0]   MA_Configure_pip_wire;                                                 \n";
fftp << " wire                  H_MA_sel_pip_wire ;                                                    \n";
fftp << " wire                  H_SRAM_CEN_pip_wire ;                                                  \n";
fftp << " wire                  H_SRAM_WEN_pip_wire ;                                                  \n";
fftp << " //                                                                                           \n";
fftp << " wire                 order_SRAM_CEN_pip_wire;                                                \n";
fftp << " wire                 order_SRAM_WEN_pip_wire;                                                \n";
fftp << " wire  [A_WIDTH-1:0]  order_MA_pip_wire;                                                      \n";
fftp << " wire                 order_sel_pip_wire;                                                     \n";
fftp << " //=============================================                                              \n";
fftp << " //twiddle factor fft type data                                                               \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM0_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM1_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM2_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM3_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM4_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM5_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM6_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b0ROM7_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM0_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM1_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM2_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM3_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM4_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM5_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM6_wire;                                                          \n";
fftp << " wire [SD_WIDTH-1:0]  H_b1ROM7_wire;                                                          \n";
fftp << "                                                                                              \n";
fftp << " wire 			     BN_TWI_wire;                                                              \n";
fftp << " wire [A_WIDTH-1:0]  MA_TWI_wire;                                                             \n";
fftp << "                                                                                              \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix0_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix1_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix2_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix3_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix4_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix5_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix6_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix7_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix8_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix9_wire;                                                          \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix10_wire;                                                         \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix11_wire;                                                         \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix12_wire;                                                         \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix13_wire;                                                         \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix14_wire;                                                         \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix15_wire;                                                         \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix0_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix1_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix2_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix3_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix4_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix5_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix6_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix7_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix8_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix9_pip_wire;                                                      \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix10_pip_wire;                                                     \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix11_pip_wire;                                                     \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix12_pip_wire;                                                     \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix13_pip_wire;                                                     \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix14_pip_wire;                                                     \n";
fftp << " wire [P_WIDTH-1:0]  TWIradix15_pip_wire;                                                     \n";
fftp << " //************************************************                                           \n";
fftp << " //Reconfigure wire                                                                           \n";
fftp << " wire [A_WIDTH-1:0]  MA_HSRAM_wire;                                                           \n";
fftp << " wire [A_WIDTH-1:0]  REMA_SRAM_wire;                                                          \n";
fftp << " wire [A_WIDTH-1:0]  IREMA_SRAM_wire;                                                         \n";
fftp << "  //r4_inpipeReg wire============================                                             \n";
fftp << "                                                                                              \n";
fftp << "  wire                ExtValid_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D0_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D1_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D2_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D3_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D4_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D5_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D6_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D7_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D8_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D9_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D10_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D11_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D12_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D13_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D14_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D15_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D0_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D1_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D2_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D3_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D4_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D5_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D6_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D7_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D8_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D9_wire  ;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D10_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D11_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D12_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D13_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D14_wire  ;                                                       \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D15_wire  ;                                                       \n";
fftp << "                                                                                              \n";
fftp << "  //-----------------------------------                                                       \n";
fftp << "  wire  [A_WIDTH-1:0] REMA_wire;                                                              \n";
fftp << "  wire  [IREMA_WIDTH-1:0] IREMA;                                                              \n";
fftp << "                                                                                              \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D0_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D1_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D2_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D3_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D4_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D5_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D6_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB0_D7_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D0_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D1_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D2_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D3_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D4_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D5_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D6_pip_wire ;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0] ExtB1_D7_pip_wire ;                                                    \n";
fftp << "                                                                                              \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M0_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M1_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M2_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M3_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M4_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M5_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M6_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M7_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M8_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M9_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M10_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M11_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M12_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M13_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M14_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M15_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M0_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M1_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M2_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M3_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M4_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M5_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M6_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M7_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M8_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M9_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M10_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M11_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M12_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M13_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M14_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B0M15_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M0_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M1_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M2_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M3_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M4_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M5_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M6_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M7_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M8_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M9_a_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M10_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M11_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M12_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M13_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M14_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M15_a_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M0_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M1_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M2_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M3_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M4_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M5_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M6_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M7_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M8_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M9_b_o_wire;                                                         \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M10_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M11_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M12_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M13_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M14_b_o_wire;                                                        \n";
fftp << "  wire  [CP_WIDTH-1:0] B1M15_b_o_wire;                                                        \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M0_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M1_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M2_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M3_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M4_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M5_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M6_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M7_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M8_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M9_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M10_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M11_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M12_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M13_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M14_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B0M15_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M0_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M1_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M2_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M3_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M4_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M5_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M6_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M7_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M8_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M9_result_wire;                                                     \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M10_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M11_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M12_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M13_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M14_result_wire;                                                    \n";
fftp << "  wire  [CP_WIDTH-1:0]  B1M15_result_wire;                                                    \n";
fftp << "                                                                                              \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S0_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S1_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S2_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S3_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S4_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S5_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S6_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S7_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S8_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S9_wire;                                                            \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S10_wire;                                                           \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S11_wire;                                                           \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S12_wire;                                                           \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S13_wire;                                                           \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S14_wire;                                                           \n";
fftp << "  wire [CP_WIDTH-1:0]  BR_S15_wire;                                                           \n";
fftp << "                                                                                              \n";
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM0_wire;                                                      \n";
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM1_wire;                                                      \n";
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM2_wire;                                                      \n";
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM3_wire;                                                      \n";
fftp << "                                                                                              \n";
fftp << "  wire  [SD_WIDTH-1:0]   ireorderROM0_wire;                                                    \n";
fftp << "  wire  [SD_WIDTH-1:0]   ireorderROM1_wire;                                                    \n";
fftp << "  wire  [SD_WIDTH-1:0]   ireorderROM2_wire;                                                    \n";
fftp << "  wire  [P_WIDTH-1:0]    ireorderROM3_wire;                                                    \n";
//------------------------------------------------------
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM0_wire_reg_in;                                              \n";
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM1_wire_reg_in;                                              \n";
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM2_wire_reg_in;                                              \n";
fftp << "  wire  [SD_WIDTH-1:0]  reorderROM3_wire_reg_in;                                              \n";
fftp << "                                                                                              \n";
fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM0_wire_reg_in;                                             \n";
fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM1_wire_reg_in;                                             \n";
fftp << "  wire  [SD_WIDTH-1:0]  ireorderROM2_wire_reg_in;                                             \n";
fftp << "  wire  [P_WIDTH-1:0]   ireorderROM3_wire_reg_in;                                             \n";
fftp << "                                                                                              \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r0;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r1;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r2;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r3;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r4;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r5;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r6;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r7;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r8;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r9;                                                            \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r10;                                                           \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r11;                                                           \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r12;                                                           \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r13;                                                           \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r14;                                                           \n";
fftp << "  wire  [CP_WIDTH-1:0] SP_Data_r15;                                                           \n";
fftp << "                                                                                              \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD0_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD1_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD2_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD3_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD4_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD5_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD6_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD7_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD8_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD9_pip_wire;                                                         \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD10_pip_wire;                                                        \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD11_pip_wire;                                                        \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD12_pip_wire;                                                        \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD13_pip_wire;                                                        \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD14_pip_wire;                                                        \n";
fftp << "  wire  [P_WIDTH-1:0] CRUD15_pip_wire;                                                        \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR0_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR1_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR2_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR3_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR4_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR5_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR6_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR7_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR8_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR9_pip_wire;                                                    \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR10_pip_wire;                                                   \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR11_pip_wire;                                                   \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR12_pip_wire;                                                   \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR13_pip_wire;                                                   \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR14_pip_wire;                                                   \n";
fftp << "  wire  [OUT_PIPE_WIDTH-1:0] BR15_pip_wire;                                                   \n";
fftp << "                                                                                              \n";
fftp << "  //==============================================                                            \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out0 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out1 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out2 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out3 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out4 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out5 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out6 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out7 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out8 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out9 ;                                                             \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out10 ;                                                            \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out11 ;                                                            \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out12 ;                                                            \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out13 ;                                                            \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out14 ;                                                            \n";
fftp << " wire [SD_WIDTH-1:0]  Data_out15 ;                                                            \n";
fftp << " wire                 cen_wire ;                                                              \n";
fftp << " wire                 wen0_wire ;                                                             \n";
fftp << " wire                 wen1_wire ;                                                             \n";
fftp << " wire                 SD_sel_wire ;                                                           \n";
fftp << " wire [A_WIDTH-1:0]   ExtMA_wire ;                                                            \n";
fftp << " wire [A_WIDTH-1:0]   AGUMA_wire ;                                                            \n";
fftp << " wire [A_WIDTH-1:0]   MA0_wire ;                                                              \n";
fftp << " wire [A_WIDTH-1:0]   MA1_wire ;                                                              \n";
fftp << " wire                 AGU_en_wire ;                                                           \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM0_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM1_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM2_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM3_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM4_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM5_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM6_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN0_MEM7_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM0_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM1_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM2_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM3_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM4_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM5_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM6_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]  BN1_MEM7_wire ;                                                         \n";
fftp << " wire                 BN_wire ;                                                               \n";
fftp << " wire [P_WIDTH-1:0]   RA0D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA1D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA2D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA3D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA4D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA5D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA6D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA7D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA8D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA9D_in_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   RA10D_in_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA11D_in_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA12D_in_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA13D_in_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA14D_in_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA15D_in_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA0D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA1D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA2D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA3D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA4D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA5D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA6D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA7D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA8D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA9D_out_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RA10D_out_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RA11D_out_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RA12D_out_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RA13D_out_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RA14D_out_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RA15D_out_wire ;                                                        \n";
fftp << "                                                                                              \n";
fftp << " wire                 RomCen_wire ;                                                           \n";
fftp << " wire [ROMA_WIDTH-1:0] ROMA_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   ROMD0_out_wire ;                                                        \n";
fftp << " wire [SD_WIDTH-1:0]  ROMD1_out_wire ;                                                        \n";
fftp << " wire [SD_WIDTH-1:0]  ROMD2_out_wire ;                                                        \n";
fftp << " wire [SD_WIDTH-1:0]  ROMD3_out_wire ;                                                        \n";
fftp << " wire [SD_WIDTH-1:0]  ROMD4_out_wire ;                                                        \n";
fftp << " wire [SD_WIDTH-1:0]  ROMD5_out_wire ;                                                        \n";
fftp << " wire [SD_WIDTH-1:0]  ROMD6_out_wire ;                                                        \n";
fftp << " wire [SD_WIDTH-1:0]  ROMD7_out_wire ;                                                        \n";
fftp << " wire [1:0]           Mul_sel_wire ;                                                          \n";
fftp << " wire [P_WIDTH-1:0]   MulB0_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB1_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB2_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB3_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB4_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB5_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB6_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB7_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB8_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB9_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulB10_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulB11_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulB12_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulB13_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulB14_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulB15_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulMod0_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod1_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod2_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod3_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod4_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod5_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod6_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod7_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod8_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod9_out_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]   MulMod10_out_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]   MulMod11_out_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]   MulMod12_out_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]   MulMod13_out_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]   MulMod14_out_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]   MulMod15_out_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out0_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out1_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out2_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out3_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out4_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out5_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out6_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out7_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out8_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out9_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out10_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out11_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out12_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out13_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out14_wire ;                                                        \n";
fftp << " wire [P_WIDTH-1:0]   RDC_out15_wire ;                                                        \n";
fftp << " wire [3:0]           RDC_sel_wire ;                                                          \n";
fftp << " wire                 BND_wire ;                                                              \n";
fftp << " wire [A_WIDTH-1:0]   WMA_wire ;                                                              \n";
fftp << "                                                                                              \n";
fftp << " wire [DC_WIDTH-1:0]  data_cnt_wire ;                                                         \n";
fftp << " wire [2:0]           DC_mode_sel_wire ;                                                      \n";
fftp << " wire                 BU_mode_sel_wire ;                                                      \n";
fftp << " wire                 BU_dc_sel_wire ;                                                        \n";
fftp << "                                                                                              \n";
fftp << " wire                 mode_sel_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]   MulA1_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA2_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA3_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA4_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA5_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA6_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA7_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA9_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   MulA10_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulA11_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulA12_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulA13_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulA14_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   MulA15_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   IFFTROMD0_out_wire ;                                                    \n";
fftp << " wire [SD_WIDTH-1:0]  IFFTROMD1_out_wire ;                                                    \n";
fftp << " wire [SD_WIDTH-1:0]  IFFTROMD2_out_wire ;                                                    \n";
fftp << " wire [SD_WIDTH-1:0]  IFFTROMD3_out_wire ;                                                    \n";
fftp << " wire [SD_WIDTH-1:0]  IFFTROMD4_out_wire ;                                                    \n";
fftp << " wire [SD_WIDTH-1:0]  IFFTROMD5_out_wire ;                                                    \n";
fftp << " wire [SD_WIDTH-1:0]  IFFTROMD6_out_wire ;                                                    \n";
fftp << " wire [SD_WIDTH-1:0]  IFFTROMD7_out_wire ;                                                    \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << " wire                 rc_sel_wire ; //modify 2020/02/24                                       \n";
fftp << " wire                 m2_sel_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   CRUD0_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD1_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD2_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD3_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD4_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD5_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD6_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD7_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD8_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD9_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]   CRUD10_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   CRUD11_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   CRUD12_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   CRUD13_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   CRUD14_wire ;                                                           \n";
fftp << " wire [P_WIDTH-1:0]   CRUD15_wire ;                                                           \n";
fftp << "                                                                                              \n";
fftp << " wire                  mode_sel_D_wire ;                                                      \n";
fftp << " wire [1:0]            Mul_sel_D_wire ;                                                       \n";
fftp << " wire [3:0]            RDC_sel_D_wire ;                                                       \n";
fftp << " wire [2:0]            DC_mode_sel_D_wire ;                                                   \n";
fftp << " wire                  BU_mode_sel_D_wire ;                                                   \n";
fftp << " wire                  BU_dc_sel_D_wire ;                                                     \n";
fftp << " wire                  wrfd_en_wire ;                                                         \n";
fftp << "                                                                                              \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out0_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out1_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out2_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out3_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out4_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out5_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out6_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out7_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out8_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out9_D_wire ;                                                      \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out10_D_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out11_D_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out12_D_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out13_D_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out14_D_wire ;                                                     \n";
fftp << " wire [P_WIDTH-1:0]    RDC_out15_D_wire ;                                                     \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << " wire [P_WIDTH-1:0]    N_D4_wire ;                                                            \n";
fftp << " wire [P_WIDTH-1:0]    ROMD0_D_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]   ROMD1_D_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]   ROMD2_D_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]   ROMD3_D_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]   ROMD4_D_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]   ROMD5_D_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]   ROMD6_D_wire ;                                                         \n";
fftp << " wire [SD_WIDTH-1:0]   ROMD7_D_wire ;                                                         \n";
fftp << " wire [P_WIDTH-1:0]    IFFTROMD0_D_wire ;                                                     \n";
fftp << " wire [SD_WIDTH-1:0]   IFFTROMD1_D_wire ;                                                     \n";
fftp << " wire [SD_WIDTH-1:0]   IFFTROMD2_D_wire ;                                                     \n";
fftp << " wire [SD_WIDTH-1:0]   IFFTROMD3_D_wire ;                                                     \n";
fftp << " wire [SD_WIDTH-1:0]   IFFTROMD4_D_wire ;                                                     \n";
fftp << " wire [SD_WIDTH-1:0]   IFFTROMD5_D_wire ;                                                     \n";
fftp << " wire [SD_WIDTH-1:0]   IFFTROMD6_D_wire ;                                                     \n";
fftp << " wire [SD_WIDTH-1:0]   IFFTROMD7_D_wire ;                                                     \n";
fftp << "                                                                                              \n";
fftp << "     Config_Reg u_Config_Reg(                                                                 \n";
fftp << "                             .Prime_o(Prime_pip_wire),                                        \n";
fftp << "	                         .Pre_computing_o(Pre_computing_pip_wire),                         \n";
fftp << "	                         .MixRadix_sel_o(MixRadix_sel_pip_wire),                           \n";
fftp << "	                         .Point_sel_o(Point_sel_pip_wire),                                 \n";
fftp << "	                         .MA_Configure_o(MA_Configure_pip_wire),                           \n";
fftp << "	                         .H_MA_sel_o(H_MA_sel_pip_wire),                                   \n";
fftp << "	                         .H_SRAM_CEN_o(H_SRAM_CEN_pip_wire),                               \n";
fftp << "	                         .H_SRAM_WEN_o(H_SRAM_WEN_pip_wire),                               \n";
fftp << "	                         .order_SRAM_CEN_o(order_SRAM_CEN_pip_wire),                       \n";
fftp << "	                         .order_SRAM_WEN_o(order_SRAM_WEN_pip_wire),                       \n";
fftp << "	                         .order_MA_o(order_MA_pip_wire),                                   \n";
fftp << "	                         .order_sel_o(order_sel_pip_wire),                                 \n";
fftp << "                             .Prime_i(Prime),                                                 \n";
fftp << "	                         .Pre_computing_i(Pre_computing),                                  \n";
fftp << "	                         .MixRadix_sel_i(MixRadix_sel),                                    \n";
fftp << "	                         .Point_sel_i(Point_sel),                                          \n";
fftp << "	                         .MA_Configure_i(MA_Configure),                                    \n";
fftp << "	                         .H_MA_sel_i(H_MA_sel),                                            \n";
fftp << "	                         .H_SRAM_CEN_i(H_SRAM_CEN),                                        \n";
fftp << "	                         .H_SRAM_WEN_i(H_SRAM_WEN),                                        \n";
fftp << "	                         .order_SRAM_CEN_i(order_SRAM_CEN),                                \n";
fftp << "	                         .order_SRAM_WEN_i(order_SRAM_WEN),                                \n";
fftp << "	                         .order_MA_i(order_MA),                                            \n";
fftp << "	                         .order_sel_i(order_sel),	                                       \n";
fftp << "	                         .rst_n(rst_n),                                                    \n"; 
fftp << "                             .clk(clk)                                                        \n";
fftp << "	 );                                                                                        \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << "     Rectrl u_Rectrl(                                                                         \n";
fftp << "             .REMA(REMA_wire),                                                                \n";
fftp << "             .ExtValid_in(ExtValid_in),                                                       \n";
fftp << "             .Point_sel_in(Point_sel_pip_wire),			                                   \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)                                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << " 	//                                                                                         \n";
fftp << "     R16_InpipeReg u_r16_inpipreg(                                                            \n";
fftp << "             .ExtValid_in(ExtValid_in),                                                       \n";
fftp << "             .ExtB0_D0_in(ExtB0_D0_in),                                                       \n";
fftp << "             .ExtB0_D1_in(ExtB0_D1_in),                                                       \n";
fftp << "             .ExtB0_D2_in(ExtB0_D2_in),                                                       \n";
fftp << "             .ExtB0_D3_in(ExtB0_D3_in),                                                       \n";
fftp << "             .ExtB0_D4_in(ExtB0_D4_in),                                                       \n";
fftp << "             .ExtB0_D5_in(ExtB0_D5_in),                                                       \n";
fftp << "             .ExtB0_D6_in(ExtB0_D6_in),                                                       \n";
fftp << "             .ExtB0_D7_in(ExtB0_D7_in),                                                       \n";
fftp << "             .ExtB1_D0_in(ExtB1_D0_in),                                                       \n";
fftp << "             .ExtB1_D1_in(ExtB1_D1_in),                                                       \n";
fftp << "             .ExtB1_D2_in(ExtB1_D2_in),                                                       \n";
fftp << "             .ExtB1_D3_in(ExtB1_D3_in),                                                       \n";
fftp << "             .ExtB1_D4_in(ExtB1_D4_in),                                                       \n";
fftp << "             .ExtB1_D5_in(ExtB1_D5_in),                                                       \n";
fftp << "             .ExtB1_D6_in(ExtB1_D6_in),                                                       \n";
fftp << "             .ExtB1_D7_in(ExtB1_D7_in),                                                       \n";
fftp << "             .ExtValid_out(ExtValid_wire),                                                    \n";
fftp << "             .ExtB0_D0_out(ExtB0_D0_pip_wire),                                                \n";
fftp << "             .ExtB0_D1_out(ExtB0_D1_pip_wire),                                                \n";
fftp << "             .ExtB0_D2_out(ExtB0_D2_pip_wire),                                                \n";
fftp << "             .ExtB0_D3_out(ExtB0_D3_pip_wire),                                                \n";
fftp << "             .ExtB0_D4_out(ExtB0_D4_pip_wire),                                                \n";
fftp << "             .ExtB0_D5_out(ExtB0_D5_pip_wire),                                                \n";
fftp << "             .ExtB0_D6_out(ExtB0_D6_pip_wire),                                                \n";
fftp << "             .ExtB0_D7_out(ExtB0_D7_pip_wire),                                                \n";
fftp << "             .ExtB1_D0_out(ExtB1_D0_pip_wire),                                                \n";
fftp << "             .ExtB1_D1_out(ExtB1_D1_pip_wire),                                                \n";
fftp << "             .ExtB1_D2_out(ExtB1_D2_pip_wire),                                                \n";
fftp << "             .ExtB1_D3_out(ExtB1_D3_pip_wire),                                                \n";
fftp << "             .ExtB1_D4_out(ExtB1_D4_pip_wire),                                                \n";
fftp << "             .ExtB1_D5_out(ExtB1_D5_pip_wire),                                                \n";
fftp << "             .ExtB1_D6_out(ExtB1_D6_pip_wire),                                                \n";
fftp << "             .ExtB1_D7_out(ExtB1_D7_pip_wire),                                                \n";
fftp << "             .rst_n        (rst_n),                                                           \n";
fftp << "             .clk          (clk)                                                              \n";
fftp << "     );                                                                                       \n";
fftp << "     //----------------------------------------------------                                   \n";
fftp << "     // Barrett reduction multiplier                                                          \n";
fftp << "     //input A and input B Mux                                                                \n";
fftp << "     Mux5 u_Mux5(                                                                             \n";
fftp << "                 .B0M0_ain_o(B0M0_a_o_wire),                                                  \n";
fftp << "                 .B0M1_ain_o(B0M1_a_o_wire),                                                  \n";
fftp << "                 .B0M2_ain_o(B0M2_a_o_wire),                                                  \n";
fftp << "                 .B0M3_ain_o(B0M3_a_o_wire),                                                  \n";
fftp << "                 .B0M4_ain_o(B0M4_a_o_wire),                                                  \n";
fftp << "                 .B0M5_ain_o(B0M5_a_o_wire),                                                  \n";
fftp << "                 .B0M6_ain_o(B0M6_a_o_wire),                                                  \n";
fftp << "                 .B0M7_ain_o(B0M7_a_o_wire),                                                  \n";
fftp << "                 .B0M8_ain_o(B0M8_a_o_wire),                                                  \n";
fftp << "                 .B0M9_ain_o(B0M9_a_o_wire),                                                  \n";
fftp << "                 .B0M10_ain_o(B0M10_a_o_wire),                                                \n";
fftp << "                 .B0M11_ain_o(B0M11_a_o_wire),                                                \n";
fftp << "                 .B0M12_ain_o(B0M12_a_o_wire),                                                \n";
fftp << "                 .B0M13_ain_o(B0M13_a_o_wire),                                                \n";
fftp << "                 .B0M14_ain_o(B0M14_a_o_wire),                                                \n";
fftp << "                 .B0M15_ain_o(B0M15_a_o_wire),                                                \n";
fftp << "                 .B0M0_bin_o(B0M0_b_o_wire),                                                  \n";
fftp << "                 .B0M1_bin_o(B0M1_b_o_wire),                                                  \n";
fftp << "                 .B0M2_bin_o(B0M2_b_o_wire),                                                  \n";
fftp << "                 .B0M3_bin_o(B0M3_b_o_wire),                                                  \n";
fftp << "                 .B0M4_bin_o(B0M4_b_o_wire),                                                  \n";
fftp << "                 .B0M5_bin_o(B0M5_b_o_wire),                                                  \n";
fftp << "                 .B0M6_bin_o(B0M6_b_o_wire),                                                  \n";
fftp << "                 .B0M7_bin_o(B0M7_b_o_wire),                                                  \n";
fftp << "                 .B0M8_bin_o(B0M8_b_o_wire),                                                  \n";
fftp << "                 .B0M9_bin_o(B0M9_b_o_wire),                                                  \n";
fftp << "                 .B0M10_bin_o(B0M10_b_o_wire),                                                \n";
fftp << "                 .B0M11_bin_o(B0M11_b_o_wire),                                                \n";
fftp << "                 .B0M12_bin_o(B0M12_b_o_wire),                                                \n";
fftp << "                 .B0M13_bin_o(B0M13_b_o_wire),                                                \n";
fftp << "                 .B0M14_bin_o(B0M14_b_o_wire),                                                \n";
fftp << "                 .B0M15_bin_o(B0M15_b_o_wire),                                                \n";
fftp << "                 .ExtB0_D0(ExtB0_D0_pip_wire),                                                \n";
fftp << "                 .ExtB0_D1(ExtB0_D1_pip_wire),                                                \n";
fftp << "                 .ExtB0_D2(ExtB0_D2_pip_wire),                                                \n";
fftp << "                 .ExtB0_D3(ExtB0_D3_pip_wire),                                                \n";
fftp << "                 .ExtB0_D4(ExtB0_D4_pip_wire),                                                \n";
fftp << "                 .ExtB0_D5(ExtB0_D5_pip_wire),                                                \n";
fftp << "                 .ExtB0_D6(ExtB0_D6_pip_wire),                                                \n";
fftp << "                 .ExtB0_D7(ExtB0_D7_pip_wire),                                                \n";
fftp << "                 .SP_r0(SP_Data_r0),                                                          \n";
fftp << "                 .SP_r1(SP_Data_r1),                                                          \n";
fftp << "                 .SP_r2(SP_Data_r2),                                                          \n";
fftp << "                 .SP_r3(SP_Data_r3),                                                          \n";
fftp << "                 .SP_r4(SP_Data_r4),                                                          \n";
fftp << "                 .SP_r5(SP_Data_r5),                                                          \n";
fftp << "                 .SP_r6(SP_Data_r6),                                                          \n";
fftp << "                 .SP_r7(SP_Data_r7),                                                          \n";
fftp << "                 .SP_r8(SP_Data_r8),                                                          \n";
fftp << "                 .SP_r9(SP_Data_r9),                                                          \n";
fftp << "                 .SP_r10(SP_Data_r10),                                                        \n";
fftp << "                 .SP_r11(SP_Data_r11),                                                        \n";
fftp << "                 .SP_r12(SP_Data_r12),                                                        \n";
fftp << "                 .SP_r13(SP_Data_r13),                                                        \n";
fftp << "                 .SP_r14(SP_Data_r14),                                                        \n";
fftp << "                 .SP_r15(SP_Data_r15),                                                        \n";
//***********************************************************************************************************
int reorder_b0r0_ROM0_lsb;
int reorder_b0r1_ROM0_msb;
int reorder_b0r1_ROM0_lsb;
int reorder_b0r2_ROM0_msb;
int reorder_b0r2_ROM0_lsb;
int reorder_b0r3_ROM0_msb;
int reorder_b0r3_ROM0_lsb;
int reorder_b0r4_ROM0_msb;
int reorder_b0r4_ROM0_lsb;
// CP_width = 22 , 22*5 = 110 , CP_width = 25 , 25 * 5 = 125
// another part of Radix5 is stored in ROM1
int reorder_b0r5_ROM0_msb;
int reorder_b0r5_ROM1_lsb;
int reorder_b0r6_ROM1_msb;
int reorder_b0r6_ROM1_lsb;
int reorder_b0r7_ROM1_msb;
int reorder_b0r7_ROM1_lsb;

reorder_b0r0_ROM0_lsb = 128 - CP_width;
reorder_b0r1_ROM0_msb = reorder_b0r0_ROM0_lsb - 1;
reorder_b0r1_ROM0_lsb = reorder_b0r0_ROM0_lsb - CP_width;
reorder_b0r2_ROM0_msb = reorder_b0r1_ROM0_lsb - 1;
reorder_b0r2_ROM0_lsb = reorder_b0r1_ROM0_lsb - CP_width;
reorder_b0r3_ROM0_msb = reorder_b0r2_ROM0_lsb - 1;
reorder_b0r3_ROM0_lsb = reorder_b0r2_ROM0_lsb - CP_width;
reorder_b0r4_ROM0_msb = reorder_b0r3_ROM0_lsb - 1;
reorder_b0r4_ROM0_lsb = reorder_b0r3_ROM0_lsb - CP_width;
reorder_b0r5_ROM0_msb = reorder_b0r4_ROM0_lsb - 1;
reorder_b0r5_ROM1_lsb = 128 - ( CP_width - reorder_b0r4_ROM0_lsb);
reorder_b0r6_ROM1_msb = reorder_b0r5_ROM1_lsb - 1;
reorder_b0r6_ROM1_lsb = reorder_b0r5_ROM1_lsb - CP_width;
reorder_b0r7_ROM1_msb = reorder_b0r6_ROM1_lsb - 1;
reorder_b0r7_ROM1_lsb = reorder_b0r6_ROM1_lsb - CP_width;
//**********************************************************************************************************
fftp << "                 .reorderb0r0(reorderROM0_wire[127:"<< reorder_b0r0_ROM0_lsb<<"]),\n";
fftp << "                 .reorderb0r1(reorderROM0_wire[" << reorder_b0r1_ROM0_msb <<":"<<  reorder_b0r1_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r2(reorderROM0_wire[" << reorder_b0r2_ROM0_msb <<":"<<  reorder_b0r2_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r3(reorderROM0_wire[" << reorder_b0r3_ROM0_msb <<":"<<  reorder_b0r3_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r4(reorderROM0_wire[" << reorder_b0r4_ROM0_msb <<":"<<  reorder_b0r4_ROM0_lsb <<"]),\n";
fftp << "                 .reorderb0r5({reorderROM0_wire["<< reorder_b0r5_ROM0_msb <<":0],reorderROM1_wire[127:"<< reorder_b0r5_ROM1_lsb <<"]}),\n";
fftp << "                 .reorderb0r6(reorderROM1_wire[" << reorder_b0r6_ROM1_msb <<":"<<  reorder_b0r6_ROM1_lsb <<"]),\n";
fftp << "                 .reorderb0r7(reorderROM1_wire[" << reorder_b0r7_ROM1_msb <<":"<<  reorder_b0r7_ROM1_lsb <<"]),\n";
//****************************************
int ireorder_r0_ROM0_lsb;
int ireorder_r1_ROM0_msb;
int ireorder_r1_ROM0_lsb;
int ireorder_r2_ROM0_msb;
int ireorder_r2_ROM0_lsb;
int ireorder_r3_ROM0_msb;
int ireorder_r3_ROM0_lsb;
int ireorder_r4_ROM0_msb;
int ireorder_r4_ROM0_lsb;
//--------------
int ireorder_r5_ROM1_lsb;
int ireorder_r6_ROM1_msb;
int ireorder_r6_ROM1_lsb;
int ireorder_r7_ROM1_msb;
int ireorder_r7_ROM1_lsb;
int ireorder_r8_ROM1_msb;
int ireorder_r8_ROM1_lsb;
int ireorder_r9_ROM1_msb;
int ireorder_r9_ROM1_lsb;
//---------------
int ireorder_r10_ROM2_lsb;
int ireorder_r11_ROM2_msb;
int ireorder_r11_ROM2_lsb;
int ireorder_r12_ROM2_msb;
int ireorder_r12_ROM2_lsb;
int ireorder_r13_ROM2_msb;
int ireorder_r13_ROM2_lsb;
int ireorder_r14_ROM2_msb;
int ireorder_r14_ROM2_lsb;
//----------------
// 64 bits
int ireorder_r15_ROM3_lsb;

// r0 ~ r4
ireorder_r0_ROM0_lsb = 128 - CP_width;
ireorder_r1_ROM0_msb = ireorder_r0_ROM0_lsb - 1;
ireorder_r1_ROM0_lsb = ireorder_r0_ROM0_lsb - CP_width;
ireorder_r2_ROM0_msb = ireorder_r1_ROM0_lsb - 1;
ireorder_r2_ROM0_lsb = ireorder_r1_ROM0_lsb - CP_width;
ireorder_r3_ROM0_msb = ireorder_r2_ROM0_lsb - 1;
ireorder_r3_ROM0_lsb = ireorder_r2_ROM0_lsb - CP_width;
ireorder_r4_ROM0_msb = ireorder_r3_ROM0_lsb - 1;
ireorder_r4_ROM0_lsb = ireorder_r3_ROM0_lsb - CP_width;
// r5 ~ r9
ireorder_r5_ROM1_lsb = 128 - CP_width;
ireorder_r6_ROM1_msb = ireorder_r5_ROM1_lsb - 1;
ireorder_r6_ROM1_lsb = ireorder_r5_ROM1_lsb - CP_width;
ireorder_r7_ROM1_msb = ireorder_r6_ROM1_lsb - 1;
ireorder_r7_ROM1_lsb = ireorder_r6_ROM1_lsb - CP_width;
ireorder_r8_ROM1_msb = ireorder_r7_ROM1_lsb - 1;
ireorder_r8_ROM1_lsb = ireorder_r7_ROM1_lsb - CP_width;
ireorder_r9_ROM1_msb = ireorder_r8_ROM1_lsb - 1;
ireorder_r9_ROM1_lsb = ireorder_r8_ROM1_lsb - CP_width;
// r10 ~ r14
ireorder_r10_ROM2_lsb = 128 - CP_width;
ireorder_r11_ROM2_msb = ireorder_r10_ROM2_lsb - 1;
ireorder_r11_ROM2_lsb = ireorder_r10_ROM2_lsb - CP_width;
ireorder_r12_ROM2_msb = ireorder_r11_ROM2_lsb - 1;
ireorder_r12_ROM2_lsb = ireorder_r11_ROM2_lsb - CP_width;
ireorder_r13_ROM2_msb = ireorder_r12_ROM2_lsb - 1;
ireorder_r13_ROM2_lsb = ireorder_r12_ROM2_lsb - CP_width;
ireorder_r14_ROM2_msb = ireorder_r13_ROM2_lsb - 1;
ireorder_r14_ROM2_lsb = ireorder_r13_ROM2_lsb - CP_width;
// r15
ireorder_r15_ROM3_lsb = 64 - CP_width;

fftp << "                 .ireorderr0(ireorderROM0_wire[127:"<< ireorder_r0_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr1(ireorderROM0_wire["<< ireorder_r1_ROM0_msb <<":"<< ireorder_r1_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr2(ireorderROM0_wire["<< ireorder_r2_ROM0_msb <<":"<< ireorder_r2_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr3(ireorderROM0_wire["<< ireorder_r3_ROM0_msb <<":"<< ireorder_r3_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr4(ireorderROM0_wire["<< ireorder_r4_ROM0_msb <<":"<< ireorder_r4_ROM0_lsb <<"]),\n";
fftp << "                 .ireorderr5(ireorderROM1_wire[127:"<< ireorder_r5_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr6(ireorderROM1_wire["<< ireorder_r6_ROM1_msb <<":"<< ireorder_r6_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr7(ireorderROM1_wire["<< ireorder_r7_ROM1_msb <<":"<< ireorder_r7_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr8(ireorderROM1_wire["<< ireorder_r8_ROM1_msb <<":"<< ireorder_r8_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr9(ireorderROM1_wire["<< ireorder_r9_ROM1_msb <<":"<< ireorder_r9_ROM1_lsb <<"]),\n";
fftp << "                 .ireorderr10(ireorderROM2_wire[127:"<< ireorder_r10_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr11(ireorderROM2_wire["<< ireorder_r11_ROM2_msb <<":"<< ireorder_r11_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr12(ireorderROM2_wire["<< ireorder_r12_ROM2_msb <<":"<< ireorder_r12_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr13(ireorderROM2_wire["<< ireorder_r13_ROM2_msb <<":"<< ireorder_r13_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr14(ireorderROM2_wire["<< ireorder_r14_ROM2_msb <<":"<< ireorder_r14_ROM2_lsb <<"]),\n";
fftp << "                 .ireorderr15(ireorderROM3_wire[63:"<< ireorder_r15_ROM3_lsb <<"]),\n";
//---------------------------------------------------------------------------
fftp << "     		.B1M0_ain_o(B1M0_a_o_wire),                                                        \n";
fftp << "     		.B1M1_ain_o(B1M1_a_o_wire),                                                        \n";
fftp << "     		.B1M2_ain_o(B1M2_a_o_wire),                                                        \n";
fftp << "     		.B1M3_ain_o(B1M3_a_o_wire),                                                        \n";
fftp << "     		.B1M4_ain_o(B1M4_a_o_wire),                                                        \n";
fftp << "     		.B1M5_ain_o(B1M5_a_o_wire),                                                        \n";
fftp << "     		.B1M6_ain_o(B1M6_a_o_wire),                                                        \n";
fftp << "     		.B1M7_ain_o(B1M7_a_o_wire),                                                        \n";
fftp << "     		.B1M8_ain_o(B1M8_a_o_wire),                                                        \n";
fftp << "     		.B1M9_ain_o(B1M9_a_o_wire),                                                        \n";
fftp << "     		.B1M10_ain_o(B1M10_a_o_wire),                                                      \n";
fftp << "     		.B1M11_ain_o(B1M11_a_o_wire),                                                      \n";
fftp << "     		.B1M12_ain_o(B1M12_a_o_wire),                                                      \n";
fftp << "     		.B1M13_ain_o(B1M13_a_o_wire),                                                      \n";
fftp << "     		.B1M14_ain_o(B1M14_a_o_wire),                                                      \n";
fftp << "     		.B1M15_ain_o(B1M15_a_o_wire),                                                      \n";
fftp << "     		.B1M0_bin_o(B1M0_b_o_wire),                                                        \n";
fftp << "     		.B1M1_bin_o(B1M1_b_o_wire),                                                        \n";
fftp << "     		.B1M2_bin_o(B1M2_b_o_wire),                                                        \n";
fftp << "     		.B1M3_bin_o(B1M3_b_o_wire),                                                        \n";
fftp << "     		.B1M4_bin_o(B1M4_b_o_wire),                                                        \n";
fftp << "     		.B1M5_bin_o(B1M5_b_o_wire),                                                        \n";
fftp << "     		.B1M6_bin_o(B1M6_b_o_wire),                                                        \n";
fftp << "     		.B1M7_bin_o(B1M7_b_o_wire),                                                        \n";
fftp << "     		.B1M8_bin_o(B1M8_b_o_wire),                                                        \n";
fftp << "     		.B1M9_bin_o(B1M9_b_o_wire),                                                        \n";
fftp << "     		.B1M10_bin_o(B1M10_b_o_wire),                                                      \n";
fftp << "     		.B1M11_bin_o(B1M11_b_o_wire),                                                      \n";
fftp << "     		.B1M12_bin_o(B1M12_b_o_wire),                                                      \n";
fftp << "     		.B1M13_bin_o(B1M13_b_o_wire),                                                      \n";
fftp << "     		.B1M14_bin_o(B1M14_b_o_wire),                                                      \n";
fftp << "     		.B1M15_bin_o(B1M15_b_o_wire),                                                      \n";
fftp << "     		.ExtB1_D0_pip(ExtB1_D0_pip_wire),                                                  \n";
fftp << "     		.ExtB1_D1_pip(ExtB1_D1_pip_wire),                                                  \n";
fftp << "     		.ExtB1_D2_pip(ExtB1_D2_pip_wire),                                                  \n";
fftp << "     		.ExtB1_D3_pip(ExtB1_D3_pip_wire),                                                  \n";
fftp << "     		.ExtB1_D4_pip(ExtB1_D4_pip_wire),                                                  \n";
fftp << "     		.ExtB1_D5_pip(ExtB1_D5_pip_wire),                                                  \n";
fftp << "     		.ExtB1_D6_pip(ExtB1_D6_pip_wire),                                                  \n";
fftp << "     		.ExtB1_D7_pip(ExtB1_D7_pip_wire),                                                  \n";
fftp << "     		.CRUD0(CRUD0_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD1(CRUD1_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD2(CRUD2_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD3(CRUD3_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD4(CRUD4_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD5(CRUD5_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD6(CRUD6_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD7(CRUD7_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD8(CRUD8_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD9(CRUD9_pip_wire[P_WIDTH-1:20]),                                              \n";
fftp << "     		.CRUD10(CRUD10_pip_wire[P_WIDTH-1:20]),                                            \n";
fftp << "     		.CRUD11(CRUD11_pip_wire[P_WIDTH-1:20]),                                            \n";
fftp << "     		.CRUD12(CRUD12_pip_wire[P_WIDTH-1:20]),                                            \n";
fftp << "     		.CRUD13(CRUD13_pip_wire[P_WIDTH-1:20]),                                            \n";
fftp << "     		.CRUD14(CRUD14_pip_wire[P_WIDTH-1:20]),                                            \n";
fftp << "     		.CRUD15(CRUD15_pip_wire[P_WIDTH-1:20]),                                            \n";
//*******************************************
int reorder_b1r0_ROM2_lsb;
int reorder_b1r1_ROM2_msb;
int reorder_b1r1_ROM2_lsb;
int reorder_b1r2_ROM2_msb;
int reorder_b1r2_ROM2_lsb;
int reorder_b1r3_ROM2_msb;
int reorder_b1r3_ROM2_lsb;
int reorder_b1r4_ROM2_msb;
int reorder_b1r4_ROM2_lsb;
// CP_width = 22 , 22*5 = 110 , CP_width = 25 , 25 * 5 = 125
// another part of Radix5 is stored in ROM1
int reorder_b1r5_ROM2_msb;
int reorder_b1r5_ROM3_lsb;
int reorder_b1r6_ROM3_msb;
int reorder_b1r6_ROM3_lsb;
int reorder_b1r7_ROM3_msb;
int reorder_b1r7_ROM3_lsb;

reorder_b1r0_ROM2_lsb = 128 - CP_width;
reorder_b1r1_ROM2_msb = reorder_b1r0_ROM2_lsb - 1;
reorder_b1r1_ROM2_lsb = reorder_b1r0_ROM2_lsb - CP_width;
reorder_b1r2_ROM2_msb = reorder_b1r1_ROM2_lsb - 1;
reorder_b1r2_ROM2_lsb = reorder_b1r1_ROM2_lsb - CP_width;
reorder_b1r3_ROM2_msb = reorder_b1r2_ROM2_lsb - 1;
reorder_b1r3_ROM2_lsb = reorder_b1r2_ROM2_lsb - CP_width;
reorder_b1r4_ROM2_msb = reorder_b1r3_ROM2_lsb - 1;
reorder_b1r4_ROM2_lsb = reorder_b1r3_ROM2_lsb - CP_width;
reorder_b1r5_ROM2_msb = reorder_b1r4_ROM2_lsb - 1;
reorder_b1r5_ROM3_lsb = 128 - ( CP_width - reorder_b1r4_ROM2_lsb);
reorder_b1r6_ROM3_msb = reorder_b1r5_ROM3_lsb - 1;
reorder_b1r6_ROM3_lsb = reorder_b1r5_ROM3_lsb - CP_width;
reorder_b1r7_ROM3_msb = reorder_b1r6_ROM3_lsb - 1;
reorder_b1r7_ROM3_lsb = reorder_b1r6_ROM3_lsb - CP_width;
//*******************************************
fftp << "                 .reorderb1r0(reorderROM2_wire[127:"<< reorder_b1r0_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r1(reorderROM2_wire[" << reorder_b1r1_ROM2_msb <<":"<<  reorder_b1r1_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r2(reorderROM2_wire[" << reorder_b1r2_ROM2_msb <<":"<<  reorder_b1r2_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r3(reorderROM2_wire[" << reorder_b1r3_ROM2_msb <<":"<<  reorder_b1r3_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r4(reorderROM2_wire[" << reorder_b1r4_ROM2_msb <<":"<<  reorder_b1r4_ROM2_lsb <<"]),\n";
fftp << "                 .reorderb1r5({reorderROM2_wire[" << reorder_b1r5_ROM2_msb <<":0],reorderROM3_wire[127:"<<  reorder_b1r5_ROM3_lsb <<"]}),\n";  
fftp << "                 .reorderb1r6(reorderROM3_wire[" << reorder_b1r6_ROM3_msb <<":"<<  reorder_b1r6_ROM3_lsb <<"]),\n";
fftp << "                 .reorderb1r7(reorderROM3_wire[" << reorder_b1r7_ROM3_msb <<":"<<  reorder_b1r7_ROM3_lsb <<"]),\n";
fftp << "                 .re_sel(SD_sel_wire)                                                         \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     Mux6 u_Mux6(                                                                             \n";
fftp << "             .ExtB0_D0(ExtB0_D0_wire),                                                        \n";
fftp << "             .ExtB0_D1(ExtB0_D1_wire),                                                        \n";
fftp << "             .ExtB0_D2(ExtB0_D2_wire),                                                        \n";
fftp << "             .ExtB0_D3(ExtB0_D3_wire),                                                        \n";
fftp << "             .ExtB0_D4(ExtB0_D4_wire),                                                        \n";
fftp << "             .ExtB0_D5(ExtB0_D5_wire),                                                        \n";
fftp << "             .ExtB0_D6(ExtB0_D6_wire),                                                        \n";
fftp << "             .ExtB0_D7(ExtB0_D7_wire),                                                        \n";
fftp << "             .ExtB0_D8(ExtB0_D8_wire),                                                        \n";
fftp << "             .ExtB0_D9(ExtB0_D9_wire),                                                        \n";
fftp << "             .ExtB0_D10(ExtB0_D10_wire),                                                      \n";
fftp << "             .ExtB0_D11(ExtB0_D11_wire),                                                      \n";
fftp << "             .ExtB0_D12(ExtB0_D12_wire),                                                      \n";
fftp << "             .ExtB0_D13(ExtB0_D13_wire),                                                      \n";
fftp << "             .ExtB0_D14(ExtB0_D14_wire),                                                      \n";
fftp << "             .ExtB0_D15(ExtB0_D15_wire),                                                      \n";
fftp << "             .MulD0_out(MulD0_out),                                                           \n";
fftp << "             .MulD1_out(MulD1_out),                                                           \n";
fftp << "             .MulD2_out(MulD2_out),                                                           \n";
fftp << "             .MulD3_out(MulD3_out),                                                           \n";
fftp << "             .MulD4_out(MulD4_out),                                                           \n";
fftp << "             .MulD5_out(MulD5_out),                                                           \n";
fftp << "             .MulD6_out(MulD6_out),                                                           \n";
fftp << "             .MulD7_out(MulD7_out),                                                           \n";
fftp << "             .MulD8_out(MulD8_out),                                                           \n";
fftp << "             .MulD9_out(MulD9_out),                                                           \n";
fftp << "             .MulD10_out(MulD10_out),                                                         \n";
fftp << "             .MulD11_out(MulD11_out),                                                         \n";
fftp << "             .MulD12_out(MulD12_out),                                                         \n";
fftp << "             .MulD13_out(MulD13_out),                                                         \n";
fftp << "             .MulD14_out(MulD14_out),                                                         \n";
fftp << "             .MulD15_out(MulD15_out),                                                         \n";
fftp << "             .B0M0_result(B0M0_result_wire),                                          \n";
fftp << "             .B0M1_result(B0M1_result_wire),                                          \n";
fftp << "             .B0M2_result(B0M2_result_wire),                                          \n";
fftp << "             .B0M3_result(B0M3_result_wire),                                          \n";
fftp << "             .B0M4_result(B0M4_result_wire),                                          \n";
fftp << "             .B0M5_result(B0M5_result_wire),                                          \n";
fftp << "             .B0M6_result(B0M6_result_wire),                                          \n";
fftp << "             .B0M7_result(B0M7_result_wire),                                          \n";
fftp << "             .B0M8_result(B0M8_result_wire),                                          \n";
fftp << "             .B0M9_result(B0M9_result_wire),                                          \n";
fftp << "             .B0M10_result(B0M10_result_wire),                                        \n";
fftp << "             .B0M11_result(B0M11_result_wire),                                        \n";
fftp << "             .B0M12_result(B0M12_result_wire),                                        \n";
fftp << "             .B0M13_result(B0M13_result_wire),                                        \n";
fftp << "             .B0M14_result(B0M14_result_wire),                                        \n";
fftp << "             .B0M15_result(B0M15_result_wire),                                        \n";
fftp << "             .ExtB1_D0(ExtB1_D0_wire),                                                        \n";
fftp << "             .ExtB1_D1(ExtB1_D1_wire),                                                        \n";
fftp << "             .ExtB1_D2(ExtB1_D2_wire),                                                        \n";
fftp << "             .ExtB1_D3(ExtB1_D3_wire),                                                        \n";
fftp << "             .ExtB1_D4(ExtB1_D4_wire),                                                        \n";
fftp << "             .ExtB1_D5(ExtB1_D5_wire),                                                        \n";
fftp << "             .ExtB1_D6(ExtB1_D6_wire),                                                        \n";
fftp << "             .ExtB1_D7(ExtB1_D7_wire),                                                        \n";
fftp << "             .ExtB1_D8(ExtB1_D8_wire),                                                        \n";
fftp << "             .ExtB1_D9(ExtB1_D9_wire),                                                        \n";
fftp << "             .ExtB1_D10(ExtB1_D10_wire),                                                      \n";
fftp << "             .ExtB1_D11(ExtB1_D11_wire),                                                      \n";
fftp << "             .ExtB1_D12(ExtB1_D12_wire),                                                      \n";
fftp << "             .ExtB1_D13(ExtB1_D13_wire),                                                      \n";
fftp << "             .ExtB1_D14(ExtB1_D14_wire),                                                      \n";
fftp << "             .ExtB1_D15(ExtB1_D15_wire),                                                      \n";
fftp << "             .BR_S0(BR_S0_wire),                                                              \n";
fftp << "             .BR_S1(BR_S1_wire),                                                              \n";
fftp << "             .BR_S2(BR_S2_wire),                                                              \n";
fftp << "             .BR_S3(BR_S3_wire),                                                              \n";
fftp << "             .BR_S4(BR_S4_wire),                                                              \n";
fftp << "             .BR_S5(BR_S5_wire),                                                              \n";
fftp << "             .BR_S6(BR_S6_wire),                                                              \n";
fftp << "             .BR_S7(BR_S7_wire),                                                              \n";
fftp << "             .BR_S8(BR_S8_wire),                                                              \n";
fftp << "             .BR_S9(BR_S9_wire),                                                              \n";
fftp << "             .BR_S10(BR_S10_wire),                                                            \n";
fftp << "             .BR_S11(BR_S11_wire),                                                            \n";
fftp << "             .BR_S12(BR_S12_wire),                                                            \n";
fftp << "             .BR_S13(BR_S13_wire),                                                            \n";
fftp << "             .BR_S14(BR_S14_wire),                                                            \n";
fftp << "             .BR_S15(BR_S15_wire),                                                            \n";
fftp << "             .B1M0_result(B1M0_result_wire),\n";
fftp << "             .B1M1_result(B1M1_result_wire),\n";
fftp << "             .B1M2_result(B1M2_result_wire),\n";
fftp << "             .B1M3_result(B1M3_result_wire),\n";
fftp << "             .B1M4_result(B1M4_result_wire),\n";
fftp << "             .B1M5_result(B1M5_result_wire),\n";
fftp << "             .B1M6_result(B1M6_result_wire),\n";
fftp << "             .B1M7_result(B1M7_result_wire),\n";
fftp << "             .B1M8_result(B1M8_result_wire),\n";
fftp << "             .B1M9_result(B1M9_result_wire),\n";
fftp << "             .B1M10_result(B1M10_result_wire),\n";
fftp << "             .B1M11_result(B1M11_result_wire),\n";
fftp << "             .B1M12_result(B1M12_result_wire),\n";
fftp << "             .B1M13_result(B1M13_result_wire),\n";
fftp << "             .B1M14_result(B1M14_result_wire),\n";
fftp << "             .B1M15_result(B1M15_result_wire),\n";
fftp << "             .m2_sel(m2_sel_wire)                                                             \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     R16_BU_outpipe u_R16_BU_outpipe(                                                         \n";
fftp << "     		.CRUD0_o(CRUD0_pip_wire),                                                          \n";
fftp << "     		.CRUD1_o(CRUD1_pip_wire),                                                          \n";
fftp << "     		.CRUD2_o(CRUD2_pip_wire),                                                          \n";
fftp << "     		.CRUD3_o(CRUD3_pip_wire),                                                          \n";
fftp << "     		.CRUD4_o(CRUD4_pip_wire),                                                          \n";
fftp << "     		.CRUD5_o(CRUD5_pip_wire),                                                          \n";
fftp << "     		.CRUD6_o(CRUD6_pip_wire),                                                          \n";
fftp << "     		.CRUD7_o(CRUD7_pip_wire),                                                          \n";
fftp << "     		.CRUD8_o(CRUD8_pip_wire),                                                          \n";
fftp << "     		.CRUD9_o(CRUD9_pip_wire),                                                          \n";
fftp << "     		.CRUD10_o(CRUD10_pip_wire),                                                        \n";
fftp << "     		.CRUD11_o(CRUD11_pip_wire),                                                        \n";
fftp << "     		.CRUD12_o(CRUD12_pip_wire),                                                        \n";
fftp << "     		.CRUD13_o(CRUD13_pip_wire),                                                        \n";
fftp << "     		.CRUD14_o(CRUD14_pip_wire),                                                        \n";
fftp << "     		.CRUD15_o(CRUD15_pip_wire),                                                        \n";
fftp << "     		.BR0_o(BR0_pip_wire),                                                              \n";
fftp << "     		.BR1_o(BR1_pip_wire),                                                              \n";
fftp << "     		.BR2_o(BR2_pip_wire),                                                              \n";
fftp << "     		.BR3_o(BR3_pip_wire),                                                              \n";
fftp << "     		.BR4_o(BR4_pip_wire),                                                              \n";
fftp << "     		.BR5_o(BR5_pip_wire),                                                              \n";
fftp << "     		.BR6_o(BR6_pip_wire),                                                              \n";
fftp << "     		.BR7_o(BR7_pip_wire),                                                              \n";
fftp << "     		.BR8_o(BR8_pip_wire),                                                              \n";
fftp << "     		.BR9_o(BR9_pip_wire),                                                              \n";
fftp << "     		.BR10_o(BR10_pip_wire),                                                            \n";
fftp << "     		.BR11_o(BR11_pip_wire),                                                            \n";
fftp << "     		.BR12_o(BR12_pip_wire),                                                            \n";
fftp << "     		.BR13_o(BR13_pip_wire),                                                            \n";
fftp << "     		.BR14_o(BR14_pip_wire),                                                            \n";
fftp << "     		.BR15_o(BR15_pip_wire),                                                            \n";
fftp << "     		.CRUD0_i(CRUD0_wire),                                                              \n";
fftp << "     		.CRUD1_i(CRUD1_wire),                                                              \n";
fftp << "     		.CRUD2_i(CRUD2_wire),                                                              \n";
fftp << "     		.CRUD3_i(CRUD3_wire),                                                              \n";
fftp << "     		.CRUD4_i(CRUD4_wire),                                                              \n";
fftp << "     		.CRUD5_i(CRUD5_wire),                                                              \n";
fftp << "     		.CRUD6_i(CRUD6_wire),                                                              \n";
fftp << "     		.CRUD7_i(CRUD7_wire),                                                              \n";
fftp << "     		.CRUD8_i(CRUD8_wire),                                                              \n";
fftp << "     		.CRUD9_i(CRUD9_wire),                                                              \n";
fftp << "     		.CRUD10_i(CRUD10_wire),                                                            \n";
fftp << "     		.CRUD11_i(CRUD11_wire),                                                            \n";
fftp << "     		.CRUD12_i(CRUD12_wire),                                                            \n";
fftp << "     		.CRUD13_i(CRUD13_wire),                                                            \n";
fftp << "     		.CRUD14_i(CRUD14_wire),                                                            \n";
fftp << "     		.CRUD15_i(CRUD15_wire),                                                            \n";
fftp << "           .rst_n(rst_n),                                                                     \n";
fftp << "     		.clk(clk)                                                                          \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << "     MulMod B0M0(                                                                             \n";
fftp << "             .A_in(B0M0_a_o_wire), //need to modify                                           \n";
fftp << "             .B_in(B0M0_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),			                               \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M0_result_wire)  //need to modify 4/19                                 \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M1(                                                                            \n";
fftp << "             .A_in(B0M1_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M1_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M1_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M2(                                                                            \n";
fftp << "             .A_in(B0M2_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M2_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M2_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M3(                                                                            \n";
fftp << "             .A_in(B0M3_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M3_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M3_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B0M4(                                                                            \n";
fftp << "             .A_in(B0M4_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M4_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M4_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M5(                                                                            \n";
fftp << "             .A_in(B0M5_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M5_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M5_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M6(                                                                            \n";
fftp << "             .A_in(B0M6_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M6_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M6_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M7(                                                                            \n";
fftp << "             .A_in(B0M7_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M7_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M7_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M8(                                                                            \n";
fftp << "             .A_in(B0M8_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M8_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M8_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M9(                                                                            \n";
fftp << "             .A_in(B0M9_a_o_wire),//need to modify 4/19                                       \n";
fftp << "             .B_in(B0M9_b_o_wire),                                                            \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M9_result_wire)//need to modify 4/19                                   \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M10(                                                                           \n";
fftp << "             .A_in(B0M10_a_o_wire),//need to modify 4/19                                      \n";
fftp << "             .B_in(B0M10_b_o_wire),                                                           \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M10_result_wire)//need to modify 4/19                                  \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M11(                                                                           \n";
fftp << "             .A_in(B0M11_a_o_wire),//need to modify 4/19                                      \n";
fftp << "             .B_in(B0M11_b_o_wire),                                                           \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M11_result_wire)//need to modify 4/19                                  \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M12(                                                                           \n";
fftp << "             .A_in(B0M12_a_o_wire),//need to modify 4/19                                      \n";
fftp << "             .B_in(B0M12_b_o_wire),                                                           \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M12_result_wire)//need to modify 4/19                                  \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M13(                                                                           \n";
fftp << "             .A_in(B0M13_a_o_wire),//need to modify 4/19                                      \n";
fftp << "             .B_in(B0M13_b_o_wire),                                                           \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M13_result_wire)//need to modify 4/19                                  \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M14(                                                                           \n";
fftp << "             .A_in(B0M14_a_o_wire),//need to modify 4/19                                      \n";
fftp << "             .B_in(B0M14_b_o_wire),                                                           \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M14_result_wire)//need to modify 4/19                                  \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B0M15(                                                                           \n";
fftp << "             .A_in(B0M15_a_o_wire),//need to modify 4/19                                      \n";
fftp << "             .B_in(B0M15_b_o_wire),                                                           \n";
fftp << "             .bypass(1'b0),                                                                   \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B0M15_result_wire)//need to modify 4/19                                  \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     MulMod B1M0(                                                                             \n";
fftp << "             .A_in(B1M0_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M0_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M0_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B1M1(                                                                            \n";
fftp << "             .A_in(B1M1_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M1_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M1_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B1M2(                                                                            \n";
fftp << "             .A_in(B1M2_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M2_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M2_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "      MulMod B1M3(                                                                            \n";
fftp << "             .A_in(B1M3_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M3_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M3_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M4(                                                                            \n";
fftp << "             .A_in(B1M4_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M4_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M4_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M5(                                                                            \n";
fftp << "             .A_in(B1M5_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M5_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M5_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M6(                                                                            \n";
fftp << "             .A_in(B1M6_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M6_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M6_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M7(                                                                            \n";
fftp << "             .A_in(B1M7_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M7_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M7_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M8(                                                                            \n";
fftp << "             .A_in(B1M8_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M8_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M8_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M9(                                                                            \n";
fftp << "             .A_in(B1M9_a_o_wire),                                                            \n";
fftp << "             .B_in(B1M9_b_o_wire),                                                            \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M9_result_wire)                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M10(                                                                           \n";
fftp << "             .A_in(B1M10_a_o_wire),                                                           \n";
fftp << "             .B_in(B1M10_b_o_wire),                                                           \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M10_result_wire)                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M11(                                                                           \n";
fftp << "             .A_in(B1M11_a_o_wire),                                                           \n";
fftp << "             .B_in(B1M11_b_o_wire),                                                           \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M11_result_wire)                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M12(                                                                           \n";
fftp << "             .A_in(B1M12_a_o_wire),                                                           \n";
fftp << "             .B_in(B1M12_b_o_wire),                                                           \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M12_result_wire)                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M13(                                                                           \n";
fftp << "             .A_in(B1M13_a_o_wire),                                                           \n";
fftp << "             .B_in(B1M13_b_o_wire),                                                           \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M13_result_wire)                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M14(                                                                           \n";
fftp << "             .A_in(B1M14_a_o_wire),                                                           \n";
fftp << "             .B_in(B1M14_b_o_wire),                                                           \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M14_result_wire)                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "      MulMod B1M15(                                                                           \n";
fftp << "             .A_in(B1M15_a_o_wire),                                                           \n";
fftp << "             .B_in(B1M15_b_o_wire),                                                           \n";
fftp << "             .bypass(m2_sel_wire),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .clk(clk),                                                                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .result(B1M15_result_wire)                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "     BR u_BR0(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S0_wire,BR0_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r0),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR1(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S1_wire,BR1_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r1),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR2(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S2_wire,BR2_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r2),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR3(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S3_wire,BR3_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r3),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "     BR u_BR4(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S4_wire,BR4_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r4),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR5(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S5_wire,BR5_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r5),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR6(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S6_wire,BR6_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r6),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR7(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S7_wire,BR7_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r7),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR8(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S8_wire,BR8_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r8),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR9(                                                                                \n";
fftp << "     		.S_in({2'b0,BR_S9_wire,BR9_pip_wire}),                                             \n";
fftp << "             .result(SP_Data_r9),                                                             \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR10(                                                                               \n";
fftp << "     		.S_in({2'b0,BR_S10_wire,BR10_pip_wire}),                                           \n";
fftp << "             .result(SP_Data_r10),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR11(                                                                               \n";
fftp << "     		.S_in({2'b0,BR_S11_wire,BR11_pip_wire}),                                           \n";
fftp << "             .result(SP_Data_r11),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR12(                                                                               \n";
fftp << "     		.S_in({2'b0,BR_S12_wire,BR12_pip_wire}),                                           \n";
fftp << "             .result(SP_Data_r12),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR13(                                                                               \n";
fftp << "     		.S_in({2'b0,BR_S13_wire,BR13_pip_wire}),                                           \n";
fftp << "             .result(SP_Data_r13),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR14(                                                                               \n";
fftp << "     		.S_in({2'b0,BR_S14_wire,BR14_pip_wire}),                                           \n";
fftp << "             .result(SP_Data_r14),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     BR u_BR15(                                                                               \n";
fftp << "     		 .S_in({2'b0,BR_S15_wire,BR15_pip_wire}),                                          \n";
fftp << "             .result(SP_Data_r15),                                                            \n";
fftp << "             .Prime(Prime_pip_wire),                                                          \n";
fftp << "             .Pre_computing(Pre_computing_pip_wire),					                       \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)	                                                                       \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "     //----------------------------------------------------                                   \n";
fftp << " 	CenCtrl u_CenCtrl(.MulValid_out(MulValid_out),                                             \n";
fftp << " 			          .cen_out(cen_wire),                                                      \n";
fftp << " 			          .wen0_out(wen0_wire),                                                    \n";
fftp << " 			          .wen1_out(wen1_wire),                                                    \n";
fftp << " 			          .SD_sel_out(SD_sel_wire),                                                \n";
fftp << " 			          .ExtMA_out(ExtMA_wire),                                                  \n";
fftp << " 					  .AGU_en_out(AGU_en_wire),                                                \n";
fftp << " 					  .RomCen_out(RomCen_wire),                                                \n";
fftp << " 					  .mode_sel_out(mode_sel_wire),                                            \n";
fftp << " 					  .rc_sel_out(rc_sel_wire),                                                \n";
fftp << " 					  .m2_sel_out(m2_sel_wire),  //modify 2020/02/24                           \n";
fftp << " 					  .wrfd_en_out(wrfd_en_wire),                                              \n";
fftp << " 					  .data_cnt_in(data_cnt_wire),                                             \n";
fftp << " 					  .BND_in(BND_wire),                                                       \n";
fftp << " 			          .Point_sel_in(Point_sel_pip_wire),                                       \n";
fftp << " 			          .ExtValid_in(ExtValid_wire),                                             \n";
fftp << "                    .rst_n(rst_n),                                                            \n";
fftp << "                    .clk(clk)                                                                 \n";
fftp << "                    ) ;                                                                       \n";
fftp << " 	                                                                                           \n";
fftp << " 	//                                                                                         \n";
fftp << " 	R16_AGU u_R16_AGU(.BN_out(BN_wire),                                                        \n";
fftp << " 			          .MA(AGUMA_wire),                                                         \n";
fftp << " 					  .ROMA(ROMA_wire),                                                        \n";
fftp << " 					  .Mul_sel_out(Mul_sel_wire),                                              \n";
fftp << " 					  .RDC_sel_out(RDC_sel_wire),                                              \n";
fftp << " 					  .data_cnt_reg(data_cnt_wire),                                            \n";
fftp << " 					  .BU_mode_sel_out(BU_mode_sel_wire),                                      \n";
fftp << " 					  .BU_dc_sel_out(BU_dc_sel_wire),                                          \n";
fftp << " 					  .DC_mode_sel_out(DC_mode_sel_wire),                                      \n";
fftp << " 					  .mode_sel_in(mode_sel_wire),                                             \n";
fftp << " 					  .rc_sel_in(rc_sel_wire),                                                 \n";
fftp << " 			          .AGU_en(AGU_en_wire),					                                   \n";
fftp << " 					  .wrfd_en_in(wrfd_en_wire),                                               \n";
fftp << "					  .Point_sel_in(Point_sel_pip_wire),                                       \n";
fftp << "                    .rst_n(rst_n),                                                            \n";
fftp << "                    .clk(clk)                                                                 \n";
fftp << "                    ) ;                                                                       \n";
fftp << " 	                                                                                           \n";
fftp << " 	//Control Signal Pipeline Register                                                         \n";
fftp << " 	Ctrl_PipeReg1 u_Ctrl_PipeReg1(.mode_sel_Dout(mode_sel_D_wire),                             \n";
fftp << " 				                  .Mul_sel_Dout(Mul_sel_D_wire),                               \n";
fftp << " 				                  .RDC_sel_Dout(RDC_sel_D_wire),                               \n";
fftp << " 				                  .BU_mode_sel_Dout(BU_mode_sel_D_wire),                       \n";
fftp << " 				                  .BU_dc_sel_Dout(BU_dc_sel_D_wire),                           \n";
fftp << " 				                  .DC_mode_sel_Dout(DC_mode_sel_D_wire),                       \n";
fftp << "                                .mode_sel_in(mode_sel_wire),                                  \n";
fftp << " 			                      .Mul_sel_in(Mul_sel_wire),                                   \n";
fftp << " 			                      .RDC_sel_in(RDC_sel_wire),                                   \n";
fftp << " 			                      .BU_mode_sel_in(BU_mode_sel_wire),                           \n";
fftp << " 			                      .BU_dc_sel_in(BU_dc_sel_wire),                               \n";
fftp << " 			                      .DC_mode_sel_in(DC_mode_sel_wire),                           \n";
fftp << "                                .rst_n(rst_n),                                                \n";
fftp << "                                .clk(clk)                                                     \n";
fftp << "                                ) ;                                                           \n";
fftp << " 	R16_WAddr u_R16_WAddr(.BND_out(BND_wire),                                                  \n";
fftp << " 			              .WMA_out(WMA_wire),                                                  \n";
fftp << "                        .BN_in(BN_wire),                                                      \n";
fftp << " 		                  .MA_in(AGUMA_wire),                                                  \n";
fftp << "                        .rst_n(rst_n),                                                        \n";
fftp << "                        .clk(clk)                                                             \n";
fftp << "                        ) ;                                                                   \n";
fftp << " 	                                                                                           \n";
fftp << "    //-----------------------------------------------------                                   \n";
fftp << "	                                                                                           \n";
fftp << "    TWIMux u_TWIMux(                                                                          \n";
fftp << "				    .TWIradix0(TWIradix0_wire),                                                \n";
fftp << "					.TWIradix1(TWIradix1_wire),                                                \n";
fftp << "					.TWIradix2(TWIradix2_wire),                                                \n";
fftp << "					.TWIradix3(TWIradix3_wire),                                                \n";
fftp << "					.TWIradix4(TWIradix4_wire),                                                \n";
fftp << "					.TWIradix5(TWIradix5_wire),                                                \n";
fftp << "					.TWIradix6(TWIradix6_wire),                                                \n";
fftp << "					.TWIradix7(TWIradix7_wire),                                                \n";
fftp << "					.TWIradix8(TWIradix8_wire),                                                \n";
fftp << "					.TWIradix9(TWIradix9_wire),                                                \n";
fftp << "					.TWIradix10(TWIradix10_wire),                                              \n";
fftp << "					.TWIradix11(TWIradix11_wire),                                              \n";
fftp << "					.TWIradix12(TWIradix12_wire),                                              \n";
fftp << "					.TWIradix13(TWIradix13_wire),                                              \n";
fftp << "					.TWIradix14(TWIradix14_wire),                                              \n";
fftp << "					.TWIradix15(TWIradix15_wire),                                              \n";
fftp << "					.b0radix0(H_b0ROM0_wire[127:64]),                                          \n";
fftp << "					.b0radix1(H_b0ROM0_wire[63:0]),                                            \n";
fftp << "					.b0radix2(H_b0ROM1_wire[127:64]),                                          \n";
fftp << "					.b0radix3(H_b0ROM1_wire[63:0]),                                            \n";
fftp << "					.b0radix4(H_b0ROM2_wire[127:64]),                                          \n";
fftp << "					.b0radix5(H_b0ROM2_wire[63:0]),                                            \n";
fftp << "					.b0radix6(H_b0ROM3_wire[127:64]),                                          \n";
fftp << "					.b0radix7(H_b0ROM3_wire[63:0]),                                            \n";
fftp << "					.b0radix8(H_b0ROM4_wire[127:64]),                                          \n";
fftp << "					.b0radix9(H_b0ROM4_wire[63:0]),                                            \n";
fftp << "					.b0radix10(H_b0ROM5_wire[127:64]),                                         \n";
fftp << "					.b0radix11(H_b0ROM5_wire[63:0]),                                           \n";
fftp << "					.b0radix12(H_b0ROM6_wire[127:64]),                                         \n";
fftp << "					.b0radix13(H_b0ROM6_wire[63:0]),                                           \n";
fftp << "					.b0radix14(H_b0ROM7_wire[127:64]),                                         \n";
fftp << "					.b0radix15(H_b0ROM7_wire[63:0]),                                           \n";
fftp << "					.b1radix0(H_b1ROM0_wire[127:64]),                                          \n";
fftp << "					.b1radix1(H_b1ROM0_wire[63:0]),                                            \n";
fftp << "					.b1radix2(H_b1ROM1_wire[127:64]),                                          \n";
fftp << "					.b1radix3(H_b1ROM1_wire[63:0]),                                            \n";
fftp << "					.b1radix4(H_b1ROM2_wire[127:64]),                                          \n";
fftp << "					.b1radix5(H_b1ROM2_wire[63:0]),                                            \n";
fftp << "					.b1radix6(H_b1ROM3_wire[127:64]),                                          \n";
fftp << "					.b1radix7(H_b1ROM3_wire[63:0]),                                            \n";
fftp << "					.b1radix8(H_b1ROM4_wire[127:64]),                                          \n";
fftp << "					.b1radix9(H_b1ROM4_wire[63:0]),                                            \n";
fftp << "					.b1radix10(H_b1ROM5_wire[127:64]),                                         \n";
fftp << "					.b1radix11(H_b1ROM5_wire[63:0]),                                           \n";
fftp << "					.b1radix12(H_b1ROM6_wire[127:64]),                                         \n";
fftp << "					.b1radix13(H_b1ROM6_wire[63:0]),                                           \n";
fftp << "					.b1radix14(H_b1ROM7_wire[127:64]),                                         \n";
fftp << "					.b1radix15(H_b1ROM7_wire[63:0]),                                           \n";
fftp << "					.BN_wire(BN_TWI_wire)                                                      \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "	TWIpipe u_TWIpipe(                                                                         \n";
fftp << "					  .BN_out(BN_TWI_wire),                                                    \n";
fftp << "					  .MA_out(MA_TWI_wire),                                                    \n";
fftp << "	                  .TWIradix0_o(TWIradix0_pip_wire),                                        \n";
fftp << "	                  .TWIradix1_o(TWIradix1_pip_wire),                                        \n";
fftp << "	                  .TWIradix2_o(TWIradix2_pip_wire),                                        \n";
fftp << "	                  .TWIradix3_o(TWIradix3_pip_wire),                                        \n";
fftp << "	                  .TWIradix4_o(TWIradix4_pip_wire),                                        \n";
fftp << "	                  .TWIradix5_o(TWIradix5_pip_wire),                                        \n";
fftp << "	                  .TWIradix6_o(TWIradix6_pip_wire),                                        \n";
fftp << "	                  .TWIradix7_o(TWIradix7_pip_wire),                                        \n";
fftp << "	                  .TWIradix8_o(TWIradix8_pip_wire),                                        \n";
fftp << "	                  .TWIradix9_o(TWIradix9_pip_wire),                                        \n";
fftp << "	                  .TWIradix10_o(TWIradix10_pip_wire),                                      \n";
fftp << "	                  .TWIradix11_o(TWIradix11_pip_wire),                                      \n";
fftp << "	                  .TWIradix12_o(TWIradix12_pip_wire),                                      \n";
fftp << "	                  .TWIradix13_o(TWIradix13_pip_wire),                                      \n";
fftp << "	                  .TWIradix14_o(TWIradix14_pip_wire),                                      \n";
fftp << "	                  .TWIradix15_o(TWIradix15_pip_wire),                                      \n";
fftp << "	                  .BN_in(BN_wire),                                                         \n";
fftp << "	                  .MA_in(AGUMA_wire),                                                      \n";
fftp << "	                  .TWIradix0_i(TWIradix0_wire),                                            \n";
fftp << "	                  .TWIradix1_i(TWIradix1_wire),                                            \n";
fftp << "	                  .TWIradix2_i(TWIradix2_wire),                                            \n";
fftp << "	                  .TWIradix3_i(TWIradix3_wire),                                            \n";
fftp << "	                  .TWIradix4_i(TWIradix4_wire),                                            \n";
fftp << "	                  .TWIradix5_i(TWIradix5_wire),                                            \n";
fftp << "	                  .TWIradix6_i(TWIradix6_wire),                                            \n";
fftp << "	                  .TWIradix7_i(TWIradix7_wire),                                            \n";
fftp << "	                  .TWIradix8_i(TWIradix8_wire),                                            \n";
fftp << "	                  .TWIradix9_i(TWIradix9_wire),                                            \n";
fftp << "	                  .TWIradix10_i(TWIradix10_wire),                                          \n";
fftp << "	                  .TWIradix11_i(TWIradix11_wire),                                          \n";
fftp << "	                  .TWIradix12_i(TWIradix12_wire),                                          \n";
fftp << "	                  .TWIradix13_i(TWIradix13_wire),                                          \n";
fftp << "	                  .TWIradix14_i(TWIradix14_wire),                                          \n";
fftp << "	                  .TWIradix15_i(TWIradix15_wire),                                          \n";
fftp << "	                  .rst_n(rst_n),                                                           \n";
fftp << "	                  .clk(clk)                                                                \n";
fftp << "	);                                                                                         \n";
fftp << "	                                                                                           \n";
fftp << "	//H_MA_sel ,MA_Configure input prot                                                        \n";
fftp << "	MAMux_HSRAM u_MAMux_HSRAM(.MA_HSRAM(MA_HSRAM_wire),                                        \n";
fftp << "	                          .MA_TWI(MA_TWI_wire),                                            \n";
fftp << "							  .MA_Configure(MA_Configure_pip_wire),                            \n";
fftp << "							  .H_MA_sel(H_MA_sel_pip_wire)                                     \n";
fftp << "	);                                                                                         \n";
fftp << "	                                                                                           \n";
fftp << "    //H_b0SRAM0                                                                               \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S0(.Q(H_b0ROM0_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S0),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "    //H_b0SRAM1                                                                               \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S1(.Q(H_b0ROM1_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S1),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S2(.Q(H_b0ROM2_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S2),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S3(.Q(H_b0ROM3_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S3),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";             
fftp << "	                                                                                           \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S4(.Q(H_b0ROM4_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S4),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";       
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S5(.Q(H_b0ROM5_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S5),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S6(.Q(H_b0ROM6_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S6),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B0S7(.Q(H_b0ROM7_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B0S7),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "	                                                                                           \n";
fftp << "    //Bank1                                                                                   \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S0(.Q(H_b1ROM0_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S0),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);	                                                                                       \n";
fftp << "	                                                                                           \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S1(.Q(H_b1ROM1_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S1),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S2(.Q(H_b1ROM2_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S2),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S3(.Q(H_b1ROM3_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S3),                                                \n";
fftp << "                              .EMA(3'd0)                                                      \n";
fftp << "	);                                                                                         \n";             
fftp << "	                                                                                           \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S4(.Q(H_b1ROM4_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S4),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";       
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S5(.Q(H_b1ROM5_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S5),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S6(.Q(H_b1ROM6_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S6),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << "                                                                                              \n";
fftp << "    SRAM_SP_2048_128 u_H_B1S7(.Q(H_b1ROM7_wire),                                              \n";
fftp << "                              .CLK(clk),                                                      \n";
fftp << "                              .CEN(H_SRAM_CEN_pip_wire),                                      \n";
fftp << "                              .WEN(H_SRAM_WEN_pip_wire),                                      \n";
fftp << "                              .A(MA_HSRAM_wire),                                              \n";
fftp << "                              .D(H_DATA_B1S7),                                                \n";
fftp << "                              .EMA(3'd0)                                       \n";
fftp << "	);                                                                                         \n";
fftp << " 	//for SRAM                                                                                 \n";
fftp << " 	Mux1 u_Mux1(.BN0_MEM0_Dout(BN0_MEM0_wire),                                                 \n";
fftp << " 			    .BN0_MEM1_Dout(BN0_MEM1_wire),                                                 \n";
fftp << " 				.BN0_MEM2_Dout(BN0_MEM2_wire),                                                 \n";
fftp << " 				.BN0_MEM3_Dout(BN0_MEM3_wire),                                                 \n";
fftp << " 			    .BN0_MEM4_Dout(BN0_MEM4_wire),                                                 \n";
fftp << " 			    .BN0_MEM5_Dout(BN0_MEM5_wire),                                                 \n";
fftp << " 			    .BN0_MEM6_Dout(BN0_MEM6_wire),                                                 \n";
fftp << " 			    .BN0_MEM7_Dout(BN0_MEM7_wire),                                                 \n";
fftp << " 			    .BN1_MEM0_Dout(BN1_MEM0_wire),                                                 \n";
fftp << " 			    .BN1_MEM1_Dout(BN1_MEM1_wire),                                                 \n";
fftp << " 				.BN1_MEM2_Dout(BN1_MEM2_wire),                                                 \n";
fftp << " 			    .BN1_MEM3_Dout(BN1_MEM3_wire),                                                 \n";
fftp << " 			    .BN1_MEM4_Dout(BN1_MEM4_wire),                                                 \n";
fftp << " 			    .BN1_MEM5_Dout(BN1_MEM5_wire),                                                 \n";
fftp << " 			    .BN1_MEM6_Dout(BN1_MEM6_wire),                                                 \n";
fftp << " 			    .BN1_MEM7_Dout(BN1_MEM7_wire),                                                 \n";
fftp << " 				.MA0_out(MA0_wire),                                                            \n";
fftp << " 				.MA1_out(MA1_wire),                                                            \n";
fftp << " 		        .ExtB0_D0_in(ExtB0_D0_wire),                                                   \n";
fftp << " 			    .ExtB0_D1_in(ExtB0_D1_wire),                                                   \n";
fftp << " 			    .ExtB0_D2_in(ExtB0_D2_wire),                                                   \n";
fftp << " 			    .ExtB0_D3_in(ExtB0_D3_wire),                                                   \n";
fftp << " 				.ExtB0_D4_in(ExtB0_D4_wire),                                                   \n";
fftp << " 				.ExtB0_D5_in(ExtB0_D5_wire),                                                   \n";
fftp << " 			    .ExtB0_D6_in(ExtB0_D6_wire),                                                   \n";
fftp << " 			    .ExtB0_D7_in(ExtB0_D7_wire),                                                   \n";
fftp << " 			    .ExtB0_D8_in(ExtB0_D8_wire),                                                   \n";
fftp << " 			    .ExtB0_D9_in(ExtB0_D9_wire),                                                   \n";
fftp << " 			    .ExtB0_D10_in(ExtB0_D10_wire),                                                 \n";
fftp << " 			    .ExtB0_D11_in(ExtB0_D11_wire),                                                 \n";
fftp << " 			    .ExtB0_D12_in(ExtB0_D12_wire),                                                 \n";
fftp << " 			    .ExtB0_D13_in(ExtB0_D13_wire),                                                 \n";
fftp << " 			    .ExtB0_D14_in(ExtB0_D14_wire),                                                 \n";
fftp << " 			    .ExtB0_D15_in(ExtB0_D15_wire),                                                 \n";
fftp << " 			    .ExtB1_D0_in(ExtB1_D0_wire),                                                   \n";
fftp << " 			    .ExtB1_D1_in(ExtB1_D1_wire),                                                   \n";
fftp << "              .ExtB1_D2_in(ExtB1_D2_wire),                                                    \n";
fftp << " 			    .ExtB1_D3_in(ExtB1_D3_wire),                                                   \n";
fftp << " 				.ExtB1_D4_in(ExtB1_D4_wire),                                                   \n";
fftp << " 			    .ExtB1_D5_in(ExtB1_D5_wire),                                                   \n";
fftp << " 			    .ExtB1_D6_in(ExtB1_D6_wire),                                                   \n";
fftp << " 			    .ExtB1_D7_in(ExtB1_D7_wire),                                                   \n";
fftp << " 			    .ExtB1_D8_in(ExtB1_D8_wire),                                                   \n";
fftp << " 			    .ExtB1_D9_in(ExtB1_D9_wire),                                                   \n";
fftp << " 			    .ExtB1_D10_in(ExtB1_D10_wire),                                                 \n";
fftp << " 			    .ExtB1_D11_in(ExtB1_D11_wire),                                                 \n";
fftp << " 			    .ExtB1_D12_in(ExtB1_D12_wire),                                                 \n";
fftp << " 			    .ExtB1_D13_in(ExtB1_D13_wire),                                                 \n";
fftp << " 			    .ExtB1_D14_in(ExtB1_D14_wire),                                                 \n";
fftp << " 			    .ExtB1_D15_in(ExtB1_D15_wire),                                                 \n";
fftp << " 				.RDC_in0(RDC_out0_D_wire),                                                     \n";
fftp << " 				.RDC_in1(RDC_out1_D_wire),                                                     \n";
fftp << " 				.RDC_in2(RDC_out2_D_wire),                                                     \n";
fftp << " 				.RDC_in3(RDC_out3_D_wire),                                                     \n";
fftp << " 				.RDC_in4(RDC_out4_D_wire),                                                     \n";
fftp << " 			    .RDC_in5(RDC_out5_D_wire),                                                     \n";
fftp << " 			    .RDC_in6(RDC_out6_D_wire),                                                     \n";
fftp << " 			    .RDC_in7(RDC_out7_D_wire),                                                     \n";
fftp << " 			    .RDC_in8(RDC_out8_D_wire),                                                     \n";
fftp << " 			    .RDC_in9(RDC_out9_D_wire),                                                     \n";
fftp << " 			    .RDC_in10(RDC_out10_D_wire),                                                   \n";
fftp << " 			    .RDC_in11(RDC_out11_D_wire),                                                   \n";
fftp << " 			    .RDC_in12(RDC_out12_D_wire),                                                   \n";
fftp << " 			    .RDC_in13(RDC_out13_D_wire),                                                   \n";
fftp << " 			    .RDC_in14(RDC_out14_D_wire),                                                   \n";
fftp << " 			    .RDC_in15(RDC_out15_D_wire),                                                   \n";
fftp << " 				.ExtMA_in(ExtMA_wire),                                                         \n";
fftp << " 				.AGUMA_in(AGUMA_wire),                                                         \n";
fftp << " 				.WMA_in(WMA_wire),                                                             \n";
fftp << " 				.wen0_in(wen0_wire),                                                           \n";
fftp << " 				.wen1_in(wen1_wire),                                                           \n";
fftp << " 			    .SD_sel(SD_sel_wire)                                                           \n";
fftp << " 			    ) ;                                                                            \n";
fftp << " 	                                                                                           \n";
fftp << " 	//for Radix-16                                                                             \n";
fftp << " 	Mux2 u_Mux2(.RA0_out(RA0D_in_wire),                                                        \n";
fftp << " 			    .RA1_out(RA1D_in_wire),                                                        \n";
fftp << " 			    .RA2_out(RA2D_in_wire),                                                        \n";
fftp << " 			    .RA3_out(RA3D_in_wire),                                                        \n";
fftp << " 				.RA4_out(RA4D_in_wire),                                                        \n";
fftp << " 			    .RA5_out(RA5D_in_wire),                                                        \n";
fftp << " 			    .RA6_out(RA6D_in_wire),                                                        \n";
fftp << " 			    .RA7_out(RA7D_in_wire),                                                        \n";
fftp << " 			    .RA8_out(RA8D_in_wire),                                                        \n";
fftp << " 			    .RA9_out(RA9D_in_wire),                                                        \n";
fftp << " 			    .RA10_out(RA10D_in_wire),                                                      \n";
fftp << " 			    .RA11_out(RA11D_in_wire),                                                      \n";
fftp << " 			    .RA12_out(RA12D_in_wire),                                                      \n";
fftp << " 			    .RA13_out(RA13D_in_wire),                                                      \n";
fftp << " 			    .RA14_out(RA14D_in_wire),                                                      \n";
fftp << " 			    .RA15_out(RA15D_in_wire),                                                      \n";
fftp << " 		        .BN0_MEM0_in(Data_out0),                                                       \n";
fftp << " 			    .BN0_MEM1_in(Data_out1),                                                       \n";
fftp << " 				.BN0_MEM2_in(Data_out2),                                                       \n";
fftp << " 				.BN0_MEM3_in(Data_out3),                                                       \n";
fftp << " 			    .BN0_MEM4_in(Data_out4),                                                       \n";
fftp << " 			    .BN0_MEM5_in(Data_out5),                                                       \n";
fftp << " 			    .BN0_MEM6_in(Data_out6),                                                       \n";
fftp << " 			    .BN0_MEM7_in(Data_out7),                                                       \n";
fftp << " 			    .BN1_MEM0_in(Data_out8),                                                       \n";
fftp << " 			    .BN1_MEM1_in(Data_out9),                                                       \n";
fftp << " 				.BN1_MEM2_in(Data_out10),                                                      \n";
fftp << " 			    .BN1_MEM3_in(Data_out11),                                                      \n";
fftp << " 			    .BN1_MEM4_in(Data_out12),                                                      \n";
fftp << " 			    .BN1_MEM5_in(Data_out13),                                                      \n";
fftp << " 			    .BN1_MEM6_in(Data_out14),                                                      \n";
fftp << " 			    .BN1_MEM7_in(Data_out15),                                                      \n";
fftp << " 			    .BN_sel(BN_wire)                                                               \n";
fftp << " 			    ) ;                                                                            \n";
fftp << " 	                                                                                           \n";
fftp << " 	//                                                                                         \n";
fftp << " 	Radix16_Pipe u_Radix16_Pipe(.RA0_out(RA0D_out_wire),                                       \n";
fftp << " 			                    .RA1_out(RA1D_out_wire),                                       \n";
fftp << " 			                    .RA2_out(RA2D_out_wire),                                       \n";
fftp << " 			                    .RA3_out(RA3D_out_wire),                                       \n";
fftp << " 					            .RA4_out(RA4D_out_wire),                                       \n";
fftp << " 			                    .RA5_out(RA5D_out_wire),                                       \n";
fftp << " 			                    .RA6_out(RA6D_out_wire),                                       \n";
fftp << " 			                    .RA7_out(RA7D_out_wire),                                       \n";
fftp << " 			                    .RA8_out(RA8D_out_wire),                                       \n";
fftp << " 			                    .RA9_out(RA9D_out_wire),                                       \n";
fftp << " 			                    .RA10_out(RA10D_out_wire),                                     \n";
fftp << " 			                    .RA11_out(RA11D_out_wire),                                     \n";
fftp << " 			                    .RA12_out(RA12D_out_wire),                                     \n";
fftp << " 			                    .RA13_out(RA13D_out_wire),                                     \n";
fftp << " 			                    .RA14_out(RA14D_out_wire),                                     \n";
fftp << " 			                    .RA15_out(RA15D_out_wire),                                     \n";
fftp << "                                .RA0_in(RA0D_in_wire),                                        \n";
fftp << " 			                    .RA1_in(RA1D_in_wire),                                         \n";
fftp << " 			                    .RA2_in(RA2D_in_wire),                                         \n";
fftp << " 			                    .RA3_in(RA3D_in_wire),                                         \n";
fftp << " 					            .RA4_in(RA4D_in_wire),                                         \n";
fftp << " 			                    .RA5_in(RA5D_in_wire),                                         \n";
fftp << " 			                    .RA6_in(RA6D_in_wire),                                         \n";
fftp << " 			                    .RA7_in(RA7D_in_wire),                                         \n";
fftp << " 			                    .RA8_in(RA8D_in_wire),                                         \n";
fftp << " 			                    .RA9_in(RA9D_in_wire),                                         \n";
fftp << " 			                    .RA10_in(RA10D_in_wire),                                       \n";
fftp << " 			                    .RA11_in(RA11D_in_wire),                                       \n";
fftp << " 			                    .RA12_in(RA12D_in_wire),                                       \n";
fftp << " 			                    .RA13_in(RA13D_in_wire),                                       \n";
fftp << " 			                    .RA14_in(RA14D_in_wire),                                       \n";
fftp << " 			                    .RA15_in(RA15D_in_wire),                                       \n";
fftp << " 			                    .MixRadix_sel_in(MixRadix_sel_pip_wire),                       \n";
fftp << " 			                    .BU_mode_sel(BU_mode_sel_D_wire),                              \n";
fftp << " 			                    .BU_dc_sel(BU_dc_sel_D_wire),                                  \n";
fftp << " 		                        .N_in(N_in),                                                   \n";
fftp << "                              .rst_n(rst_n),                                                  \n";
fftp << "                              .clk(clk)                                                       \n";
fftp << "                              ) ;                                                             \n";
fftp << " 	//                                                                                         \n";
fftp << " 	//for Mul                                                                                  \n";
fftp << " 	Mux3 u_Mux3(.MulB0_out(MulB0_wire),                                                        \n";
fftp << " 			    .MulB1_out(MulB1_wire),                                                        \n";
fftp << " 			    .MulB2_out(MulB2_wire),                                                        \n";
fftp << " 			    .MulB3_out(MulB3_wire),                                                        \n";
fftp << " 				.MulB4_out(MulB4_wire),                                                        \n";
fftp << " 			    .MulB5_out(MulB5_wire),                                                        \n";
fftp << " 			    .MulB6_out(MulB6_wire),                                                        \n";
fftp << " 			    .MulB7_out(MulB7_wire),                                                        \n";
fftp << " 			    .MulB8_out(MulB8_wire),                                                        \n";
fftp << " 			    .MulB9_out(MulB9_wire),                                                        \n";
fftp << " 			    .MulB10_out(MulB10_wire),                                                      \n";
fftp << " 			    .MulB11_out(MulB11_wire),                                                      \n";
fftp << " 			    .MulB12_out(MulB12_wire),                                                      \n";
fftp << " 			    .MulB13_out(MulB13_wire),                                                      \n";
fftp << " 			    .MulB14_out(MulB14_wire),                                                      \n";
fftp << " 			    .MulB15_out(MulB15_wire),                                                      \n";
fftp << " 				.MulA1_out(MulA1_wire),                                                        \n";
fftp << " 				.MulA2_out(MulA2_wire),                                                        \n";
fftp << " 				.MulA3_out(MulA3_wire),                                                        \n";
fftp << " 				.MulA4_out(MulA4_wire),                                                        \n";
fftp << " 			    .MulA5_out(MulA5_wire),                                                        \n";
fftp << " 			    .MulA6_out(MulA6_wire),                                                        \n";
fftp << " 			    .MulA7_out(MulA7_wire),                                                        \n";
fftp << " 			    .MulA9_out(MulA9_wire),                                                        \n";
fftp << " 			    .MulA10_out(MulA10_wire),                                                      \n";
fftp << " 			    .MulA11_out(MulA11_wire),                                                      \n";
fftp << " 			    .MulA12_out(MulA12_wire),                                                      \n";
fftp << " 			    .MulA13_out(MulA13_wire),                                                      \n";
fftp << " 			    .MulA14_out(MulA14_wire),                                                      \n";
fftp << " 			    .MulA15_out(MulA15_wire),                                                      \n";
fftp << " 				.IFFTROMD0_in(IFFTROMD0_D_wire),                                               \n";
fftp << " 				.IFFTROMD1_in(IFFTROMD1_D_wire),                                               \n";
fftp << " 				.IFFTROMD2_in(IFFTROMD2_D_wire),                                               \n";
fftp << " 			    .IFFTROMD3_in(IFFTROMD3_D_wire),                                               \n";
fftp << " 			    .IFFTROMD4_in(IFFTROMD4_D_wire),                                               \n";
fftp << " 			    .IFFTROMD5_in(IFFTROMD5_D_wire),                                               \n";
fftp << " 			    .IFFTROMD6_in(IFFTROMD6_D_wire),                                               \n";
fftp << " 			    .IFFTROMD7_in(IFFTROMD7_D_wire),                                               \n";
fftp << "                .ROMD0_in(ROMD0_D_wire),                                                      \n";
fftp << " 			    .ROMD1_in(ROMD1_D_wire),                                                       \n";
fftp << " 				.ROMD2_in(ROMD2_D_wire),                                                       \n";
fftp << " 				.ROMD3_in(ROMD3_D_wire),                                                       \n";
fftp << " 			    .ROMD4_in(ROMD4_D_wire),                                                       \n";
fftp << " 			    .ROMD5_in(ROMD5_D_wire),                                                       \n";
fftp << " 			    .ROMD6_in(ROMD6_D_wire),                                                       \n";
fftp << " 			    .ROMD7_in(ROMD7_D_wire),                                                       \n";
fftp << " 		        .FFTBD0_in(TWIradix0_pip_wire),                                                \n";
fftp << " 			    .FFTBD1_in(TWIradix1_pip_wire),                                                \n";
fftp << " 			    .FFTBD2_in(TWIradix2_pip_wire),                                                \n";
fftp << " 			    .FFTBD3_in(TWIradix3_pip_wire),                                                \n";
fftp << " 				.FFTBD4_in(TWIradix4_pip_wire),                                                \n";
fftp << " 			    .FFTBD5_in(TWIradix5_pip_wire),                                                \n";
fftp << " 			    .FFTBD6_in(TWIradix6_pip_wire),                                                \n";
fftp << " 			    .FFTBD7_in(TWIradix7_pip_wire),                                                \n";
fftp << " 			    .FFTBD8_in(TWIradix8_pip_wire),                                                \n";
fftp << " 			    .FFTBD9_in(TWIradix9_pip_wire),                                                \n";
fftp << " 			    .FFTBD10_in(TWIradix10_pip_wire),                                              \n";
fftp << " 			    .FFTBD11_in(TWIradix11_pip_wire),                                              \n";
fftp << " 			    .FFTBD12_in(TWIradix12_pip_wire),                                              \n";
fftp << " 			    .FFTBD13_in(TWIradix13_pip_wire),                                              \n";
fftp << " 			    .FFTBD14_in(TWIradix14_pip_wire),                                              \n";
fftp << " 			    .FFTBD15_in(TWIradix15_pip_wire),                                              \n";
fftp << " 				.RA1D_in(RA1D_out_wire),                                                       \n";
fftp << " 				.RA2D_in(RA2D_out_wire),                                                       \n";
fftp << " 				.RA3D_in(RA3D_out_wire),                                                       \n";
fftp << " 				.RA4D_in(RA4D_out_wire),                                                       \n";
fftp << " 			    .RA5D_in(RA5D_out_wire),                                                       \n";
fftp << " 			    .RA6D_in(RA6D_out_wire),                                                       \n";
fftp << " 			    .RA7D_in(RA7D_out_wire),                                                       \n";
fftp << " 			    .RA9D_in(RA9D_out_wire),                                                       \n";
fftp << " 			    .RA10D_in(RA10D_out_wire),                                                     \n";
fftp << " 			    .RA11D_in(RA11D_out_wire),                                                     \n";
fftp << " 			    .RA12D_in(RA12D_out_wire),                                                     \n";
fftp << " 			    .RA13D_in(RA13D_out_wire),                                                     \n";
fftp << " 			    .RA14D_in(RA14D_out_wire),                                                     \n";
fftp << " 			    .RA15D_in(RA15D_out_wire),                                                     \n";
fftp << " 			    .Mul_sel(Mul_sel_D_wire),                                                      \n";
fftp << "                .Point_sel(Point_sel_pip_wire),				                               \n";
fftp << " 				.mode_sel(mode_sel_D_wire)                                                     \n";
fftp << " 			    ) ;                                                                            \n";
fftp << " 	                                                                                           \n";
fftp << " 	//Pipeline Register                                                                        \n";
fftp << " 	R16_NPipeReg3 u_R16_NPipeReg3(.N_D4_out(N_D4_wire),                                        \n";
fftp << "                                   .N_in(N_in),                                               \n";
fftp << "                                   .rst_n(rst_n),                                             \n";
fftp << "                                   .clk(clk)                                                  \n";
fftp << "                                   ) ;                                                        \n";
fftp << " 	                                                                                           \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u0_MulMod128(.S_out(MulMod0_out_wire),                                           \n";
fftp << "                         .A_in(RA0D_out_wire),                                                \n";
fftp << " 		                   .B_in(MulB0_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                         .clk(clk)                                                            \n";
fftp << "                         ) ;                                                                  \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u1_MulMod128(.S_out(MulMod1_out_wire),                                           \n";
fftp << "                         .A_in(MulA1_wire),                                                   \n";
fftp << " 		                   .B_in(MulB1_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                         .clk(clk)                                                            \n";
fftp << "                         ) ;                                                                  \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u2_MulMod128(.S_out(MulMod2_out_wire),                                           \n";
fftp << "                         .A_in(MulA2_wire),                                                   \n";
fftp << " 		                   .B_in(MulB2_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                         .clk(clk)                                                            \n";
fftp << "                         ) ;                                                                  \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u3_MulMod128(.S_out(MulMod3_out_wire),                                           \n";
fftp << "                         .A_in(MulA3_wire),                                                   \n";
fftp << " 		                   .B_in(MulB3_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                         .clk(clk)                                                            \n";
fftp << "                         ) ;                                                                  \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u4_MulMod128(.S_out(MulMod4_out_wire),                                           \n";
fftp << "                         .A_in(MulA4_wire),                                                   \n";
fftp << " 		                   .B_in(MulB4_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                         .clk(clk)                                                            \n";
fftp << "                         ) ;                                                                  \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u5_MulMod128(.S_out(MulMod5_out_wire),                                           \n";
fftp << "                         .A_in(MulA5_wire),                                                   \n";
fftp << " 		                   .B_in(MulB5_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                         .clk(clk)                                                            \n";
fftp << "                         ) ;                                                                  \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u6_MulMod128(.S_out(MulMod6_out_wire),                                           \n";
fftp << "                            .A_in(MulA6_wire),                                                \n";
fftp << " 		                   .B_in(MulB6_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                            .clk(clk)                                                         \n";
fftp << "                            ) ;                                                               \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u7_MulMod128(.S_out(MulMod7_out_wire),                                           \n";
fftp << "                            .A_in(MulA7_wire),                                                \n";
fftp << " 		                   .B_in(MulB7_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                            .clk(clk)                                                         \n";
fftp << "                            ) ;                                                               \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u8_MulMod128(.S_out(MulMod8_out_wire),                                           \n";
fftp << "                            .A_in(RA8D_out_wire),                                             \n";
fftp << " 		                   .B_in(MulB8_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                            .clk(clk)                                                         \n";
fftp << "                            ) ;                                                               \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u9_MulMod128(.S_out(MulMod9_out_wire),                                           \n";
fftp << "                            .A_in(MulA9_wire),                                                \n";
fftp << " 		                   .B_in(MulB9_wire),                                                  \n";
fftp << " 		                   .N_in(N_D4_wire),                                                   \n";
fftp << " 						   .rst_n(rst_n),                                                      \n";
fftp << "                            .clk(clk)                                                         \n";
fftp << "                            ) ;                                                               \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u10_MulMod128(.S_out(MulMod10_out_wire),                                         \n";
fftp << "                             .A_in(MulA10_wire),                                              \n";
fftp << " 		                    .B_in(MulB10_wire),                                                \n";
fftp << " 		                    .N_in(N_D4_wire),                                                  \n";
fftp << " 							.rst_n(rst_n),                                                     \n";
fftp << "                             .clk(clk)                                                        \n";
fftp << "                             ) ;                                                              \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u11_MulMod128(.S_out(MulMod11_out_wire),                                         \n";
fftp << "                             .A_in(MulA11_wire),                                              \n";
fftp << " 		                    .B_in(MulB11_wire),                                                \n";
fftp << " 		                    .N_in(N_D4_wire),                                                  \n";
fftp << " 							.rst_n(rst_n),                                                     \n";
fftp << "                             .clk(clk)                                                        \n";
fftp << "                             ) ;                                                              \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u12_MulMod128(.S_out(MulMod12_out_wire),                                         \n";
fftp << "                             .A_in(MulA12_wire),                                              \n";
fftp << " 		                    .B_in(MulB12_wire),                                                \n";
fftp << " 		                    .N_in(N_D4_wire),                                                  \n";
fftp << " 							.rst_n(rst_n),                                                     \n";
fftp << "                             .clk(clk)                                                        \n";
fftp << "                             ) ;                                                              \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u13_MulMod128(.S_out(MulMod13_out_wire),                                         \n";
fftp << "                             .A_in(MulA13_wire),                                              \n";
fftp << " 		                    .B_in(MulB13_wire),                                                \n";
fftp << " 		                    .N_in(N_D4_wire),                                                  \n";
fftp << " 							.rst_n(rst_n),                                                     \n";
fftp << "                             .clk(clk)                                                        \n";
fftp << "                             ) ;                                                              \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u14_MulMod128(.S_out(MulMod14_out_wire),                                         \n";
fftp << "                             .A_in(MulA14_wire),                                              \n";
fftp << " 		                    .B_in(MulB14_wire),                                                \n";
fftp << " 		                    .N_in(N_D4_wire),                                                  \n";
fftp << " 							.rst_n(rst_n),                                                     \n";
fftp << "                             .clk(clk)                                                        \n";
fftp << "                             ) ;                                                              \n";
fftp << " 	//                                                                                         \n";
fftp << " 	MulMod128 u15_MulMod128(.S_out(MulMod15_out_wire),                                         \n";
fftp << "                             .A_in(MulA15_wire),                                              \n";
fftp << " 		                    .B_in(MulB15_wire),                                                \n";
fftp << " 		                    .N_in(N_D4_wire),                                                  \n";
fftp << " 							.rst_n(rst_n),                                                     \n";
fftp << "                             .clk(clk)                                                        \n";
fftp << "                             ) ;                                                              \n";
fftp << " 	                                                                                           \n";
fftp << " 	                                                                                           \n";
fftp << " 	                                                                                           \n";
fftp << " 	//                                                                                         \n";
fftp << " 	R16_DC u_R16_DC(.RDC_out0(RDC_out0_wire),                                                  \n";
fftp << " 			        .RDC_out1(RDC_out1_wire),                                                  \n";
fftp << " 			        .RDC_out2(RDC_out2_wire),                                                  \n";
fftp << " 			        .RDC_out3(RDC_out3_wire),                                                  \n";
fftp << " 					.RDC_out4(RDC_out4_wire),                                                  \n";
fftp << " 			        .RDC_out5(RDC_out5_wire),                                                  \n";
fftp << " 			        .RDC_out6(RDC_out6_wire),                                                  \n";
fftp << " 			        .RDC_out7(RDC_out7_wire),                                                  \n";
fftp << " 			        .RDC_out8(RDC_out8_wire),                                                  \n";
fftp << " 			        .RDC_out9(RDC_out9_wire),                                                  \n";
fftp << " 			        .RDC_out10(RDC_out10_wire),                                                \n";
fftp << " 			        .RDC_out11(RDC_out11_wire),                                                \n";
fftp << " 			        .RDC_out12(RDC_out12_wire),                                                \n";
fftp << " 			        .RDC_out13(RDC_out13_wire),                                                \n";
fftp << " 			        .RDC_out14(RDC_out14_wire),                                                \n";
fftp << " 			        .RDC_out15(RDC_out15_wire),                                                \n";
fftp << "                  .RDC_in0(MulMod0_out_wire),                                                 \n";
fftp << " 		            .RDC_in1(MulMod1_out_wire),                                                \n";
fftp << " 			        .RDC_in2(MulMod2_out_wire),                                                \n";
fftp << " 			        .RDC_in3(MulMod3_out_wire),                                                \n";
fftp << " 					.RDC_in4(MulMod4_out_wire),                                                \n";
fftp << " 			        .RDC_in5(MulMod5_out_wire),                                                \n";
fftp << " 			        .RDC_in6(MulMod6_out_wire),                                                \n";
fftp << " 			        .RDC_in7(MulMod7_out_wire),                                                \n";
fftp << " 			        .RDC_in8(MulMod8_out_wire),                                                \n";
fftp << " 			        .RDC_in9(MulMod9_out_wire),                                                \n";
fftp << " 			        .RDC_in10(MulMod10_out_wire),                                              \n";
fftp << " 			        .RDC_in11(MulMod11_out_wire),                                              \n";
fftp << " 			        .RDC_in12(MulMod12_out_wire),                                              \n";
fftp << " 			        .RDC_in13(MulMod13_out_wire),                                              \n";
fftp << " 			        .RDC_in14(MulMod14_out_wire),                                              \n";
fftp << " 			        .RDC_in15(MulMod15_out_wire),                                              \n";
fftp << " 			        .RDC_sel(RDC_sel_D_wire),                                                  \n";
fftp << " 				    .DC_mode_sel_in(DC_mode_sel_D_wire),                                       \n";
fftp << "                     .rst_n(rst_n),                                                           \n";
fftp << "                     .clk(clk)                                                                \n";
fftp << "                     ) ;                                                                      \n";
fftp << " 	                                                                                           \n";
fftp << " 	//                                                                                         \n";
fftp << " 	R16_WD_buf u_R16_WD_buf(.RDC0_D_out(RDC_out0_D_wire),                                      \n";
fftp << " 			                .RDC1_D_out(RDC_out1_D_wire),                                      \n";
fftp << " 				            .RDC2_D_out(RDC_out2_D_wire),                                      \n";
fftp << " 				            .RDC3_D_out(RDC_out3_D_wire),                                      \n";
fftp << " 				            .RDC4_D_out(RDC_out4_D_wire),                                      \n";
fftp << " 				            .RDC5_D_out(RDC_out5_D_wire),                                      \n";
fftp << " 				            .RDC6_D_out(RDC_out6_D_wire),                                      \n";
fftp << " 				            .RDC7_D_out(RDC_out7_D_wire),                                      \n";
fftp << " 				            .RDC8_D_out(RDC_out8_D_wire),                                      \n";
fftp << " 				            .RDC9_D_out(RDC_out9_D_wire),                                      \n";
fftp << " 				            .RDC10_D_out(RDC_out10_D_wire),                                    \n";
fftp << " 				            .RDC11_D_out(RDC_out11_D_wire),                                    \n";
fftp << " 				            .RDC12_D_out(RDC_out12_D_wire),                                    \n";
fftp << " 				            .RDC13_D_out(RDC_out13_D_wire),                                    \n";
fftp << " 				            .RDC14_D_out(RDC_out14_D_wire),                                    \n";
fftp << " 				            .RDC15_D_out(RDC_out15_D_wire),                                    \n";
fftp << " 		                    .RDC0_in(RDC_out0_wire),                                           \n";
fftp << " 				            .RDC1_in(RDC_out1_wire),                                           \n";
fftp << " 				            .RDC2_in(RDC_out2_wire),                                           \n";
fftp << " 				            .RDC3_in(RDC_out3_wire),                                           \n";
fftp << " 				            .RDC4_in(RDC_out4_wire),                                           \n";
fftp << " 				            .RDC5_in(RDC_out5_wire),                                           \n";
fftp << " 				            .RDC6_in(RDC_out6_wire),                                           \n";
fftp << " 				            .RDC7_in(RDC_out7_wire),                                           \n";
fftp << " 				            .RDC8_in(RDC_out8_wire),                                           \n";
fftp << " 				            .RDC9_in(RDC_out9_wire),                                           \n";
fftp << " 				            .RDC10_in(RDC_out10_wire),                                         \n";
fftp << " 				            .RDC11_in(RDC_out11_wire),                                         \n";
fftp << " 				            .RDC12_in(RDC_out12_wire),                                         \n";
fftp << " 				            .RDC13_in(RDC_out13_wire),                                         \n";
fftp << " 				            .RDC14_in(RDC_out14_wire),                                         \n";
fftp << " 				            .RDC15_in(RDC_out15_wire),                                         \n";
fftp << "                          .rst_n(rst_n),                                                      \n";
fftp << "                          .clk(clk)                                                           \n";
fftp << "                          ) ;                                                                 \n";
fftp << " 	                                                                                           \n";
fftp << " 	//-----------------------------------------------------                                    \n";
fftp << " 	// for CRUR16                                                                              \n";
fftp << " 	Mux4 u_Mux4(.CRUD0_out(CRUD0_wire),                                                        \n";
fftp << " 			    .CRUD1_out(CRUD1_wire),                                                        \n";
fftp << " 			    .CRUD2_out(CRUD2_wire),                                                        \n";
fftp << " 			    .CRUD3_out(CRUD3_wire),                                                        \n";
fftp << " 				.CRUD4_out(CRUD4_wire),                                                        \n";
fftp << " 			    .CRUD5_out(CRUD5_wire),                                                        \n";
fftp << " 			    .CRUD6_out(CRUD6_wire),                                                        \n";
fftp << " 			    .CRUD7_out(CRUD7_wire),                                                        \n";
fftp << " 			    .CRUD8_out(CRUD8_wire),                                                        \n";
fftp << " 			    .CRUD9_out(CRUD9_wire),                                                        \n";
fftp << " 			    .CRUD10_out(CRUD10_wire),                                                      \n";
fftp << " 			    .CRUD11_out(CRUD11_wire),                                                      \n";
fftp << " 			    .CRUD12_out(CRUD12_wire),                                                      \n";
fftp << " 			    .CRUD13_out(CRUD13_wire),                                                      \n";
fftp << " 			    .CRUD14_out(CRUD14_wire),                                                      \n";
fftp << " 			    .CRUD15_out(CRUD15_wire),                                                      \n";
fftp << " 			    .IFFTD0_in(RA0D_in_wire),                                                      \n";
fftp << "                .IFFTD1_in(RA1D_in_wire),                                                     \n";
fftp << "                .IFFTD2_in(RA2D_in_wire),                                                     \n";
fftp << "                .IFFTD3_in(RA3D_in_wire),                                                     \n";
fftp << " 				.IFFTD4_in(RA4D_in_wire),                                                      \n";
fftp << " 			    .IFFTD5_in(RA5D_in_wire),                                                      \n";
fftp << " 			    .IFFTD6_in(RA6D_in_wire),                                                      \n";
fftp << " 			    .IFFTD7_in(RA7D_in_wire),                                                      \n";
fftp << " 			    .IFFTD8_in(RA8D_in_wire),                                                      \n";
fftp << " 			    .IFFTD9_in(RA9D_in_wire),                                                      \n";
fftp << " 			    .IFFTD10_in(RA10D_in_wire),                                                    \n";
fftp << " 			    .IFFTD11_in(RA11D_in_wire),                                                    \n";
fftp << " 			    .IFFTD12_in(RA12D_in_wire),                                                    \n";
fftp << " 			    .IFFTD13_in(RA13D_in_wire),                                                    \n";
fftp << " 			    .IFFTD14_in(RA14D_in_wire),                                                    \n";
fftp << " 			    .IFFTD15_in(RA15D_in_wire),                                                    \n";
fftp << " 			    .m2_sel(m2_sel_wire)                                                           \n";
fftp << " 			    ) ;                                                                            \n";
fftp << " 	                                                                                           \n";
fftp << " 	                                                                                           \n";
fftp << " 	                                                                                           \n";
fftp << " 	                                                                                           \n";
fftp << " 	//Pipeline Register				                                                           \n";
fftp << " 	R16_ROMPipeReg1 u_R16_ROMPipeReg1(.ROMD0_Dout(ROMD0_D_wire),                               \n";
fftp << " 				                      .ROMD1_Dout(ROMD1_D_wire),                               \n";
fftp << " 				                      .ROMD2_Dout(ROMD2_D_wire),                               \n";
fftp << " 				                      .ROMD3_Dout(ROMD3_D_wire),                               \n";
fftp << " 					                  .ROMD4_Dout(ROMD4_D_wire),                               \n";
fftp << " 					                  .ROMD5_Dout(ROMD5_D_wire),                               \n";
fftp << " 					                  .ROMD6_Dout(ROMD6_D_wire),                               \n";
fftp << " 					                  .ROMD7_Dout(ROMD7_D_wire),                               \n";
fftp << " 									  .IFFTROMD0_Dout(IFFTROMD0_D_wire),                       \n";
fftp << " 				                      .IFFTROMD1_Dout(IFFTROMD1_D_wire),                       \n";
fftp << " 				                      .IFFTROMD2_Dout(IFFTROMD2_D_wire),                       \n";
fftp << " 				                      .IFFTROMD3_Dout(IFFTROMD3_D_wire),                       \n";
fftp << " 					                  .IFFTROMD4_Dout(IFFTROMD4_D_wire),                       \n";
fftp << " 					                  .IFFTROMD5_Dout(IFFTROMD5_D_wire),                       \n";
fftp << " 					                  .IFFTROMD6_Dout(IFFTROMD6_D_wire),                       \n";
fftp << " 					                  .IFFTROMD7_Dout(IFFTROMD7_D_wire),                       \n";
fftp << " 			                          .ROMD0_in(ROMD0_out_wire),                               \n";
fftp << " 					                  .ROMD1_in(ROMD1_out_wire),                               \n";
fftp << " 					                  .ROMD2_in(ROMD2_out_wire),                               \n";
fftp << " 					                  .ROMD3_in(ROMD3_out_wire),                               \n";
fftp << " 					                  .ROMD4_in(ROMD4_out_wire),                               \n";
fftp << " 					                  .ROMD5_in(ROMD5_out_wire),                               \n";
fftp << " 					                  .ROMD6_in(ROMD6_out_wire),                               \n";
fftp << " 					                  .ROMD7_in(ROMD7_out_wire),                               \n";
fftp << " 									  .IFFTROMD0_in(IFFTROMD0_out_wire),                       \n";
fftp << " 					                  .IFFTROMD1_in(IFFTROMD1_out_wire),                       \n";
fftp << " 					                  .IFFTROMD2_in(IFFTROMD2_out_wire),                       \n";
fftp << " 					                  .IFFTROMD3_in(IFFTROMD3_out_wire),                       \n";
fftp << " 					                  .IFFTROMD4_in(IFFTROMD4_out_wire),                       \n";
fftp << " 					                  .IFFTROMD5_in(IFFTROMD5_out_wire),                       \n";
fftp << " 					                  .IFFTROMD6_in(IFFTROMD6_out_wire),                       \n";
fftp << " 					                  .IFFTROMD7_in(IFFTROMD7_out_wire),                       \n";
fftp << "                                       .rst_n(rst_n),                                         \n";
fftp << "                                       .clk(clk)                                              \n";
fftp << "                                       ) ;		                                               \n";
fftp << " 	//---FFT1----------------------------------------------                                    \n";
fftp << " 	//Bank0 Mem0                                                                               \n";
fftp << "  SRAM_SP_2048_128 u0_SRAM_SP_2048_128 (.Q(Data_out0),                                        \n";
fftp << "                                        .CLK(clk),                                            \n";
fftp << "                                        .CEN(cen_wire),                                       \n";
fftp << "                                        .WEN(wen0_wire),                                      \n";
fftp << "                                        .A(MA0_wire),                                         \n";
fftp << "                                        .D(BN0_MEM0_wire),                                    \n";
fftp << "                                        .EMA(3'd0)                                        \n";
fftp << "                                        );                                                    \n";
fftp << " 	//Bank0 Mem1                                                                               \n";
fftp << "  SRAM_SP_2048_128 u1_SRAM_SP_2048_128 (.Q(Data_out1),                                        \n";
fftp << "                                        .CLK(clk),                                            \n";
fftp << "                                        .CEN(cen_wire),                                       \n";
fftp << "                                        .WEN(wen0_wire),                                      \n";
fftp << "                                        .A(MA0_wire),                                         \n";
fftp << "                                        .D(BN0_MEM1_wire),                                    \n";
fftp << "                                        .EMA(3'd0)                                        \n";
fftp << "                                        );							                           \n";
fftp << " 	//Bank0 Mem2                                                                               \n";
fftp << "  SRAM_SP_2048_128 u2_SRAM_SP_2048_128 (.Q(Data_out2),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen0_wire),                                   \n";
fftp << "                                           .A(MA0_wire),                                      \n";
fftp << "                                           .D(BN0_MEM2_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );                                                 \n";
fftp << " 	//Bank0 Mem3                                                                               \n";
fftp << "  SRAM_SP_2048_128 u3_SRAM_SP_2048_128 (.Q(Data_out3),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen0_wire),                                   \n";
fftp << "                                           .A(MA0_wire),                                      \n";
fftp << "                                           .D(BN0_MEM3_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );                                                 \n";
fftp << " 	//Bank0 Mem4                                                                               \n";
fftp << "  SRAM_SP_2048_128 u4_SRAM_SP_2048_128 (.Q(Data_out4),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen0_wire),                                   \n";
fftp << "                                           .A(MA0_wire),                                      \n";
fftp << "                                           .D(BN0_MEM4_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );							                       \n";
fftp << " 	//Bank0 Mem5                                                                               \n";
fftp << "  SRAM_SP_2048_128 u5_SRAM_SP_2048_128 (.Q(Data_out5),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen0_wire),                                   \n";
fftp << "                                           .A(MA0_wire),                                      \n";
fftp << "                                           .D(BN0_MEM5_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );                                                 \n";
fftp << " 	//Bank0 Mem6                                                                               \n";
fftp << "  SRAM_SP_2048_128 u6_SRAM_SP_2048_128 (.Q(Data_out6),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen0_wire),                                   \n";
fftp << "                                           .A(MA0_wire),                                      \n";
fftp << "                                           .D(BN0_MEM6_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );                                                 \n";
fftp << " 	//Bank0 Mem7                                                                               \n";
fftp << "  SRAM_SP_2048_128 u7_SRAM_SP_2048_128 (.Q(Data_out7),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen0_wire),                                   \n";
fftp << "                                           .A(MA0_wire),                                      \n";
fftp << "                                           .D(BN0_MEM7_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );                                                 \n";
fftp << " 			                                                                                   \n";
fftp << " 			                                                                                   \n";
fftp << " 	//Bank1 Mem0                                                                               \n";
fftp << "  SRAM_SP_2048_128 u8_SRAM_SP_2048_128 (.Q(Data_out8),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen1_wire),                                   \n";
fftp << "                                           .A(MA1_wire),                                      \n";
fftp << "                                           .D(BN1_MEM0_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );							                       \n";
fftp << " 	//Bank0 Mem1                                                                               \n";
fftp << "  SRAM_SP_2048_128 u9_SRAM_SP_2048_128 (.Q(Data_out9),                                        \n";
fftp << "                                           .CLK(clk),                                         \n";
fftp << "                                           .CEN(cen_wire),                                    \n";
fftp << "                                           .WEN(wen1_wire),                                   \n";
fftp << "                                           .A(MA1_wire),                                      \n";
fftp << "                                           .D(BN1_MEM1_wire),                                 \n";
fftp << "                                           .EMA(3'd0)                                     \n";
fftp << "                                           );	                                               \n";
fftp << " 	//Bank1 Mem2                                                                               \n";
fftp << "  SRAM_SP_2048_128 u10_SRAM_SP_2048_128 (.Q(Data_out10),                                      \n";
fftp << "                                            .CLK(clk),                                        \n";
fftp << "                                            .CEN(cen_wire),                                   \n";
fftp << "                                            .WEN(wen1_wire),                                  \n";
fftp << "                                            .A(MA1_wire),                                     \n";
fftp << "                                            .D(BN1_MEM2_wire),                                \n";
fftp << "                                            .EMA(3'd0)                                    \n";
fftp << "                                            );		                                           \n";
fftp << " 	//Bank1 Mem3                                                                               \n";
fftp << "  SRAM_SP_2048_128 u11_SRAM_SP_2048_128 (.Q(Data_out11),                                      \n";
fftp << "                                            .CLK(clk),                                        \n";
fftp << "                                            .CEN(cen_wire),                                   \n";
fftp << "                                            .WEN(wen1_wire),                                  \n";
fftp << "                                            .A(MA1_wire),                                     \n";
fftp << "                                            .D(BN1_MEM3_wire),                                \n";
fftp << "                                            .EMA(3'd0)                                    \n";
fftp << "                                            );		                                           \n";
fftp << " 	//Bank1 Mem4                                                                               \n";
fftp << "  SRAM_SP_2048_128 u12_SRAM_SP_2048_128 (.Q(Data_out12),                                      \n";
fftp << "                                            .CLK(clk),                                        \n";
fftp << "                                            .CEN(cen_wire),                                   \n";
fftp << "                                            .WEN(wen1_wire),                                  \n";
fftp << "                                            .A(MA1_wire),                                     \n";
fftp << "                                            .D(BN1_MEM4_wire),                                \n";
fftp << "                                            .EMA(3'd0)                                    \n";
fftp << "                                            );	                                               \n";
fftp << " 	//Bank1 Mem5                                                                               \n";
fftp << "  SRAM_SP_2048_128 u13_SRAM_SP_2048_128 (.Q(Data_out13),                                      \n";
fftp << "                                            .CLK(clk),                                        \n";
fftp << "                                            .CEN(cen_wire),                                   \n";
fftp << "                                            .WEN(wen1_wire),                                  \n";
fftp << "                                            .A(MA1_wire),                                     \n";
fftp << "                                            .D(BN1_MEM5_wire),                                \n";
fftp << "                                            .EMA(3'd0)                                    \n";
fftp << "                                            );	                                               \n";
fftp << " 	//Bank1 Mem6                                                                               \n";
fftp << "  SRAM_SP_2048_128 u14_SRAM_SP_2048_128 (.Q(Data_out14),                                      \n";
fftp << "                                            .CLK(clk),                                        \n";
fftp << "                                            .CEN(cen_wire),                                   \n";
fftp << "                                            .WEN(wen1_wire),                                  \n";
fftp << "                                            .A(MA1_wire),                                     \n";
fftp << "                                            .D(BN1_MEM6_wire),                                \n";
fftp << "                                            .EMA(3'd0)                                    \n";
fftp << "                                            );		                                           \n";
fftp << " 	//Bank1 Mem7                                                                               \n";
fftp << "  SRAM_SP_2048_128 u15_SRAM_SP_2048_128 (.Q(Data_out15),                                      \n";
fftp << "                                            .CLK(clk),                                        \n";
fftp << "                                            .CEN(cen_wire),                                   \n";
fftp << "                                            .WEN(wen1_wire),                                  \n";
fftp << "                                            .A(MA1_wire),                                     \n";
fftp << "                                            .D(BN1_MEM7_wire),                                \n";
fftp << "                                            .EMA(3'd0)                                    \n";
fftp << "                                            );						                           \n";
fftp << "     //-----------------------------------------------------                                  \n";
fftp << "     //2020/04/19 modify                                                                      \n";
fftp << "     //re-order factor  ROM                                                                   \n";
fftp << "     //BANK0                                                                                  \n";
fftp << "     IReorderMA_pip u_IReorderMA_pip(                                                         \n";
fftp << "             .IREMA_o(IREMA),                                                                 \n";
fftp << "             .MA_i(data_cnt_wire[10:0]),                                                      \n";
fftp << "             .rst_n(rst_n),                                                                   \n";
fftp << "             .clk(clk)                                                                        \n";
fftp << "     );                                                                                       \n";
fftp << "                                                                                              \n";
fftp << "	 MAMux_RESRAM u_MAMux_RESRAM(.REMA_o(REMA_SRAM_wire),                                      \n";
fftp << "	              .IREMA_o(IREMA_SRAM_wire),                                                   \n";
fftp << "	              .order_MA_i(order_MA_pip_wire),                                              \n";
fftp << "	              .REMA_i(REMA_wire),                                                          \n";
fftp << "	              .IREMA_i(IREMA),                                                             \n";
fftp << "	              .order_sel(order_sel_pip_wire)                                               \n";
fftp << "	 );                                                                                        \n";
fftp << "                                                                                              \n";
fftp << "	                                                                                           \n";
fftp << "     //reorderROM0~3                                                                          \n";
fftp << "     SRAM_SP_2048_128 u_reorder_SRAM0(.Q(reorderROM0_wire_reg_in),                            \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(REMA_SRAM_wire),                                     \n";
fftp << "                                      .D(Reorder_DATA_SRAM0),                                 \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );                                                                                        \n";
fftp << "                                                                                              \n";
fftp << "     SRAM_SP_2048_128 u_reorder_SRAM1(.Q(reorderROM1_wire_reg_in),                             \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(REMA_SRAM_wire),                                     \n";
fftp << "                                      .D(Reorder_DATA_SRAM1),                                 \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );                                                                                        \n";
fftp << "                                                                                              \n";
fftp << "     SRAM_SP_2048_128 u_reorder_SRAM2(.Q(reorderROM2_wire_reg_in),                            \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(REMA_SRAM_wire),                                     \n";
fftp << "                                      .D(Reorder_DATA_SRAM2),                                 \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );	                                                                                       \n";
fftp << "	                                                                                           \n";
fftp << "     SRAM_SP_2048_128 u_reorder_SRAM3(.Q(reorderROM3_wire_reg_in),                             \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(REMA_SRAM_wire),                                     \n";
fftp << "                                      .D(Reorder_DATA_SRAM3),                                 \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );		                                                                                   \n";
fftp << "     //ireorder ROM 0~3                                                                       \n";
fftp << "     SRAM_SP_2048_128 u_ireorder_SRAM0(.Q(ireorderROM0_wire_reg_in),                          \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(IREMA_SRAM_wire),                                    \n";
fftp << "                                      .D(IReorder_DATA_SRAM0),                                \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );                                                                                        \n";
fftp << "                                                                                              \n";
fftp << "     SRAM_SP_2048_128 u_ireorder_SRAM1(.Q(ireorderROM1_wire_reg_in),                          \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(IREMA_SRAM_wire),                                    \n";
fftp << "                                      .D(IReorder_DATA_SRAM1),                                \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );                                                                                        \n";
fftp << "                                                                                              \n";
fftp << "     SRAM_SP_2048_128 u_ireorder_SRAM2(.Q(ireorderROM2_wire_reg_in),                          \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(IREMA_SRAM_wire),                                    \n";
fftp << "                                      .D(IReorder_DATA_SRAM2),                                \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );	                                                                                       \n";
fftp << "    SRAM_SP_2048_64 u_ireorder_SRAM3(.Q(ireorderROM3_wire_reg_in),                          \n";
fftp << "                                      .CLK(clk),                                              \n";
fftp << "                                      .CEN(order_SRAM_CEN_pip_wire),                          \n";
fftp << "                                      .WEN(order_SRAM_WEN_pip_wire),                          \n";
fftp << "                                      .A(IREMA_SRAM_wire),                                    \n";
fftp << "                                      .D(IReorder_DATA_SRAM3),                                \n";
fftp << "                                      .EMA(3'd0)                           \n";
fftp << "	 );	                                                                                       \n";
fftp << " 	//-----------------------------------------------------                                    \n";
fftp << " 	R16_orderROM_Pipe u_R16_orderROM_Pipe(                                                     \n";
fftp << " 				.reorderROM0_o(reorderROM0_wire), 				                               \n";
fftp << " 				.reorderROM1_o(reorderROM1_wire), 				                               \n";
fftp << " 				.reorderROM2_o(reorderROM2_wire), 				                               \n";
fftp << " 				.reorderROM3_o(reorderROM3_wire), 				                               \n";
fftp << " 				.ireorderROM0_o(ireorderROM0_wire),				                               \n";
fftp << " 				.ireorderROM1_o(ireorderROM1_wire),				                               \n";
fftp << " 				.ireorderROM2_o(ireorderROM2_wire),				                               \n";
fftp << " 				.ireorderROM3_o(ireorderROM3_wire),				                               \n";
fftp << " 				.reorderROM0_i(reorderROM0_wire_reg_in), 		                               \n";
fftp << " 				.reorderROM1_i(reorderROM1_wire_reg_in), 		                               \n";
fftp << " 				.reorderROM2_i(reorderROM2_wire_reg_in), 			                           \n";
fftp << " 				.reorderROM3_i(reorderROM3_wire_reg_in), 			                           \n";
fftp << " 				.ireorderROM0_i(ireorderROM0_wire_reg_in),		                               \n";
fftp << " 				.ireorderROM1_i(ireorderROM1_wire_reg_in),		                               \n";
fftp << " 				.ireorderROM2_i(ireorderROM2_wire_reg_in),				                       \n";
fftp << " 				.ireorderROM3_i(ireorderROM3_wire_reg_in),				                       \n";
fftp << " 				.rst_n(rst_n),         				                                           \n";
fftp << " 				.clk(clk)            				                                           \n";
fftp << " 	);													                                       \n";
fftp << " 	//-----------------------------------------------------                                    \n";
fftp << " 	                                                                                           \n";
fftp << "     //FFT ROM0                                                                               \n";
fftp << " 	ROM0_4096_64 u_ROM0_4096_64 (.Q(ROMD0_out_wire),                                           \n";
fftp << "                                 .CLK(clk),                                                   \n";
fftp << "                                 .CEN(RomCen_wire),                                           \n";
fftp << "                                 .A(ROMA_wire)                                                \n";
fftp << "                                 );                                                           \n";
fftp << " 	//FFT ROM1                                                                                 \n";
fftp << " 	ROM1_4096_128 u_ROM1_4096_128 (.Q(ROMD1_out_wire),                                         \n";
fftp << "                                   .CLK(clk),                                                 \n";
fftp << "                                   .CEN(RomCen_wire),                                         \n";
fftp << "                                   .A(ROMA_wire)                                              \n";
fftp << "                                   );                                                         \n";
fftp << " 	//FFT ROM2                                                                                 \n";
fftp << " 	ROM2_4096_128 u_ROM2_4096_128 (.Q(ROMD2_out_wire),                                         \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                     );                                                       \n";
fftp << " 	//FFT ROM3                                                                                 \n";
fftp << " 	ROM3_4096_128 u_ROM3_4096_128 (.Q(ROMD3_out_wire),                                         \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//FFT ROM4                                                                                 \n";
fftp << " 	ROM4_4096_128 u_ROM4_4096_128 (.Q(ROMD4_out_wire),                                         \n";
fftp << "                                .CLK(clk),                                                    \n";
fftp << "                                .CEN(RomCen_wire),                                            \n";
fftp << "                                .A(ROMA_wire)                                                 \n";
fftp << "                                );						                                       \n";
fftp << " 	//FFT ROM5                                                                                 \n";
fftp << " 	ROM5_4096_128 u_ROM5_4096_128 (.Q(ROMD5_out_wire),                                         \n";
fftp << "                                .CLK(clk),                                                    \n";
fftp << "                                .CEN(RomCen_wire),                                            \n";
fftp << "                                .A(ROMA_wire)                                                 \n";
fftp << "                                );                                                            \n";
fftp << " 	//FFT ROM6                                                                                 \n";
fftp << " 	ROM6_4096_128 u_ROM6_4096_128 (.Q(ROMD6_out_wire),                                         \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//FFT ROM7                                                                                 \n";
fftp << " 	ROM7_4096_128 u_ROM7_4096_128 (.Q(ROMD7_out_wire),                                         \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 							                                                                   \n";
fftp << " 	                                                                                           \n";
fftp << " 	//IFFT ROM0                                                                                \n";
fftp << " 	IFFTR0_4096_64 u_IFFTR0_4096_64 (.Q(IFFTROMD0_out_wire),                                   \n";
fftp << "                                  .CLK(clk),                                                  \n";
fftp << "                                  .CEN(RomCen_wire),                                          \n";
fftp << "                                  .A(ROMA_wire)                                               \n";
fftp << "                                   );                                                         \n";
fftp << " 	//IFFT ROM1                                                                                \n";
fftp << " 	IFFTR1_4096_128 u_IFFTR1_4096_128 (.Q(IFFTROMD1_out_wire),                                 \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//IFFT ROM2                                                                                \n";
fftp << " 	IFFTR2_4096_128 u_IFFTR2_4096_128 (.Q(IFFTROMD2_out_wire),                                 \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//IFFT ROM3                                                                                \n";
fftp << " 	IFFTR3_4096_128 u_IFFTR3_4096_128 (.Q(IFFTROMD3_out_wire),                                 \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//IFFT ROM4                                                                                \n";
fftp << " 	IFFTR4_4096_128 u_IFFTR4_4096_128 (.Q(IFFTROMD4_out_wire),                                 \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//IFFT ROM5                                                                                \n";
fftp << " 	IFFTR5_4096_128 u_IFFTR5_4096_128 (.Q(IFFTROMD5_out_wire),                                 \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//IFFT ROM6                                                                                \n";
fftp << " 	IFFTR6_4096_128 u_IFFTR6_4096_128 (.Q(IFFTROMD6_out_wire),                                 \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 	//IFFT ROM7                                                                                \n";
fftp << " 	IFFTR7_4096_128 u_IFFTR7_4096_128 (.Q(IFFTROMD7_out_wire),                                 \n";
fftp << "                                    .CLK(clk),                                                \n";
fftp << "                                    .CEN(RomCen_wire),                                        \n";
fftp << "                                    .A(ROMA_wire)                                             \n";
fftp << "                                    );                                                        \n";
fftp << " 									                                                           \n";
fftp << " endmodule                                                                                    \n";
	 
     fftp.close();	
}

//Cenctrl
void configurable_BFFT::Config_Reg(std::string string_in){
     std::ofstream config_reg;
     std::string        string_buf = "/Config_Reg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     config_reg.open(ss.str());
config_reg << "//=========================================   \n";                      
config_reg << "//Date:2020/04/08                             \n";                      
config_reg << "//writer:shiyong                              \n";                      
config_reg << "//note: Configure signal register             \n";
config_reg << "//========================================    \n";
config_reg << " `timescale 1 ns/1 ps                         \n";
config_reg << "module Config_Reg(                            \n";                    
config_reg << "    Prime_o,                                  \n";
config_reg << "	Pre_computing_o,                             \n";
config_reg << "	MixRadix_sel_o,                              \n";
config_reg << "	Point_sel_o,                                 \n";
config_reg << "	MA_Configure_o,                              \n";
config_reg << "	H_MA_sel_o,                                  \n";
config_reg << "	H_SRAM_CEN_o,                                \n";
config_reg << "	H_SRAM_WEN_o,                                \n";
config_reg << "	order_SRAM_CEN_o,                            \n";
config_reg << "	order_SRAM_WEN_o,                            \n";
config_reg << "	order_MA_o,                                  \n";
config_reg << "	order_sel_o,                                 \n";
config_reg << "    Prime_i,                                  \n";
config_reg << "	Pre_computing_i,                             \n";
config_reg << "	MixRadix_sel_i,                              \n";
config_reg << "	Point_sel_i,                                 \n";
config_reg << "	MA_Configure_i,                              \n";
config_reg << "	H_MA_sel_i,                                  \n";
config_reg << "	H_SRAM_CEN_i,                                \n";
config_reg << "	H_SRAM_WEN_i,                                \n";
config_reg << "	order_SRAM_CEN_i,                            \n";
config_reg << "	order_SRAM_WEN_i,                            \n";
config_reg << "	order_MA_i,                                  \n";
config_reg << "	order_sel_i,	                             \n";
config_reg << "	rst_n,                                       \n";              
config_reg << "    clk                                       \n";                 
config_reg << ");                                            \n";                 
config_reg << "                                              \n";
config_reg << "parameter CP_WIDTH    = "<< CP_width  <<";    \n";
config_reg << "parameter CP_ZERO     = "<< CP_width  <<"'d0; \n";
config_reg << "parameter PRE_WIDTH   = "<< PRE_width <<";    \n";
config_reg << "parameter PRE_ZERO    = "<< PRE_width <<"'d0; \n";
config_reg << "parameter A_WIDTH     = 11;                   \n";
config_reg << "parameter A_ZERO      = 11'd0;                \n";
config_reg << "                                              \n";
config_reg << "//                                            \n";
config_reg << "output [CP_WIDTH-1 :0]   Prime_o;             \n";
config_reg << "output [PRE_WIDTH-1:0]   Pre_computing_o;     \n";
config_reg << "output [1:0]             MixRadix_sel_o;      \n";
config_reg << "output [2:0]             Point_sel_o;         \n";
config_reg << "output [A_WIDTH-1:0]     MA_Configure_o;      \n";
config_reg << "output                   H_MA_sel_o;          \n";
config_reg << "output                   H_SRAM_CEN_o;        \n";
config_reg << "output                   H_SRAM_WEN_o;        \n";
config_reg << "output                   order_SRAM_CEN_o;    \n";
config_reg << "output                   order_SRAM_WEN_o;    \n";
config_reg << "output [A_WIDTH-1:0]     order_MA_o;          \n";
config_reg << "output                   order_sel_o;         \n";
config_reg << "                                              \n";
config_reg << "input [CP_WIDTH-1 :0]   Prime_i;              \n";
config_reg << "input [PRE_WIDTH-1:0]   Pre_computing_i;      \n";
config_reg << "input [1:0]             MixRadix_sel_i;       \n";
config_reg << "input [2:0]             Point_sel_i;          \n";
config_reg << "input [A_WIDTH-1:0]     MA_Configure_i;       \n";
config_reg << "input                   H_MA_sel_i;           \n";
config_reg << "input                   H_SRAM_CEN_i;         \n";
config_reg << "input                   H_SRAM_WEN_i;         \n";
config_reg << "input                   order_SRAM_CEN_i;     \n";
config_reg << "input                   order_SRAM_WEN_i;     \n";
config_reg << "input [A_WIDTH-1:0]     order_MA_i;           \n";
config_reg << "input                   order_sel_i;          \n";
config_reg << "input                   rst_n;                \n";                    
config_reg << "input                   clk;                  \n";                    
config_reg << "                                              \n";
config_reg << "reg [CP_WIDTH-1 :0]   Prime_o;                \n";
config_reg << "reg [PRE_WIDTH-1:0]   Pre_computing_o;        \n";
config_reg << "reg [1:0]             MixRadix_sel_o;         \n";
config_reg << "reg [2:0]             Point_sel_o;            \n";
config_reg << "reg [A_WIDTH-1:0]     MA_Configure_o;         \n";
config_reg << "reg                   H_MA_sel_o;             \n";
config_reg << "reg                   H_SRAM_CEN_o;           \n";
config_reg << "reg                   H_SRAM_WEN_o;           \n";
config_reg << "reg                   order_SRAM_CEN_o;       \n";
config_reg << "reg                   order_SRAM_WEN_o;       \n";
config_reg << "reg [A_WIDTH-1:0]     order_MA_o;             \n";
config_reg << "reg                   order_sel_o;            \n";
config_reg << "                                              \n";
config_reg << "                                              \n";
config_reg << "                                              \n";
config_reg << "    always @(posedge clk,negedge rst_n)begin  \n";                 
config_reg << "        if(~rst_n)begin                       \n";                 
config_reg << "           Prime_o          <= CP_ZERO;       \n";
config_reg << "           Pre_computing_o  <= PRE_ZERO;         \n";
config_reg << "           MixRadix_sel_o   <= 2'b0;             \n";
config_reg << "           Point_sel_o      <= 3'b0;             \n";
config_reg << "           MA_Configure_o   <= A_ZERO;           \n";
config_reg << "           H_MA_sel_o       <= 1'b0;             \n";
config_reg << "           H_SRAM_CEN_o     <= 1'b1;             \n";
config_reg << "           H_SRAM_WEN_o     <= 1'b1;             \n";
config_reg << "           order_SRAM_CEN_o <= 1'b1;             \n";
config_reg << "           order_SRAM_WEN_o <= 1'b1;             \n";
config_reg << "           order_MA_o       <= A_ZERO;           \n";
config_reg << "           order_sel_o      <= 1'b0;             \n";
config_reg << "        end                                      \n";                 
config_reg << "        else begin                               \n";                 
config_reg << "           Prime_o          <= Prime_i;          \n";   
config_reg << "           Pre_computing_o  <= Pre_computing_i;  \n";
config_reg << "           MixRadix_sel_o   <= MixRadix_sel_i;   \n";
config_reg << "           Point_sel_o      <= Point_sel_i;      \n";
config_reg << "           MA_Configure_o   <= MA_Configure_i;   \n";
config_reg << "           H_MA_sel_o       <= H_MA_sel_i;       \n";
config_reg << "           H_SRAM_CEN_o     <= H_SRAM_CEN_i;     \n";
config_reg << "           H_SRAM_WEN_o     <= H_SRAM_WEN_i;     \n";
config_reg << "           order_SRAM_CEN_o <= order_SRAM_CEN_i; \n";
config_reg << "           order_SRAM_WEN_o <= order_SRAM_WEN_i; \n";
config_reg << "           order_MA_o       <= order_MA_i;       \n";
config_reg << "           order_sel_o      <= order_sel_i;      \n";
config_reg << "        end                                      \n";              
config_reg << "    end                                          \n";              
config_reg << "                                                 \n";
config_reg << "endmodule                                        \n";              
	 
	 config_reg.close();
}
void configurable_BFFT::Rectrl(std::string string_in){
     std::ofstream rectrl;
     std::string        string_buf = "/Rectrl.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     rectrl.open(ss.str());
rectrl <<" //============================================\n";
rectrl <<" //Note: Re-order controller                   \n";
rectrl <<" //data:2020/4/17                              \n";
rectrl <<" //writter:shi yong                            \n";
rectrl <<" //============================================\n";
rectrl <<" `timescale 1ns/10ps                           \n";
rectrl <<" module Rectrl(                                \n";
rectrl <<"          REMA,                                \n";
rectrl <<"          ExtValid_in,                         \n";
rectrl <<"          Point_sel_in,		                 \n";
rectrl <<"          rst_n,                               \n";
rectrl <<"          clk                                  \n";
rectrl <<" );                                            \n";
rectrl <<"                                               \n";
rectrl <<" parameter REMA_WIDTH = 11;                    \n"; 
rectrl <<" parameter REMA_deadline_4096  = 11'd127;      \n";
rectrl <<" parameter REMA_deadline_8192  = 11'd255;      \n";
rectrl <<" parameter REMA_deadline_16384 = 11'd511;      \n";
rectrl <<" parameter REMA_deadline_32768 = 11'd1023;     \n";
rectrl <<" parameter REMA_deadline_65536 = 11'd2047;     \n";
rectrl <<" parameter REMA_ZERO = 10'd0;                  \n";
rectrl <<"                                               \n";                                             
rectrl <<" parameter IDLE       = 3'd0;                  \n";                                             
rectrl <<" parameter WORK_4096  = 3'd1;                  \n";                                             
rectrl <<" parameter WORK_8192  = 3'd2;                  \n";                                             
rectrl <<" parameter WORK_16384 = 3'd3;                  \n";                                             
rectrl <<" parameter WORK_32768 = 3'd4;                  \n";                                             
rectrl <<" parameter WORK_65536 = 3'd5;                  \n";                                             
rectrl <<" parameter WORK_F     = 3'd6;                  \n";                                             
rectrl <<" parameter OVER       = 3'd7;                  \n";                                             
rectrl <<"                                               \n";                                             
rectrl <<" output [REMA_WIDTH-1:0] REMA;                 \n";                                             
rectrl <<"                                               \n";                                             
rectrl <<" input ExtValid_in;                            \n";
rectrl <<" input [2:0] Point_sel_in;                     \n";
rectrl <<" input clk;                                    \n";                                             
rectrl <<" input rst_n;                                  \n";
rectrl <<"                                               \n";
rectrl <<"                                               \n";
rectrl <<" reg   [REMA_WIDTH-1:0] REMA;                  \n";                                             
rectrl <<" reg   [2:0] state;                            \n";                                             
rectrl <<" reg   [2:0] next_state;                       \n";                                             
rectrl <<"                                               \n";
rectrl <<" wire  [REMA_WIDTH-1:0]REMA_wire;              \n";                                             
rectrl <<"                                               \n";                                             
rectrl <<"     assign REMA_wire = ((state == WORK_4096)||\n";
rectrl <<"                         (state == WORK_8192)||\n";
rectrl <<"                         (state == WORK_16384)||\n";
rectrl <<"                         (state == WORK_32768)||\n";
rectrl <<"                         (state == WORK_65536)||\n";
rectrl <<"                         (state == WORK_F)) ? (REMA + 10'b1):REMA; \n";
rectrl <<"	 \n";
rectrl <<"     always@(*)begin                                                  \n";                      
rectrl <<"         case(state)                                                  \n";                      
rectrl <<"             IDLE:begin                                               \n";                      
rectrl <<"                     if((ExtValid_in== 1'b1)&&(Point_sel_in == 3'd4))next_state = WORK_4096;\n";                      
rectrl <<"                     else if((ExtValid_in== 1'b1)&&(Point_sel_in == 3'd3))next_state = WORK_8192;\n";                      
rectrl <<"                     else if((ExtValid_in== 1'b1)&&(Point_sel_in == 3'd2))next_state = WORK_16384;\n";                      
rectrl <<"                     else if((ExtValid_in== 1'b1)&&(Point_sel_in == 3'd1))next_state = WORK_32768;\n";                      
rectrl <<"                     else if((ExtValid_in== 1'b1)&&(Point_sel_in == 3'd0))next_state = WORK_65536;\n";                      
rectrl <<"                     else next_state = IDLE;                          \n";                      
rectrl <<"             end                                                      \n";                      
rectrl <<"             WORK_4096:begin                                          \n";
rectrl <<"		             if(REMA < REMA_deadline_4096) next_state = WORK_4096;\n";                        
rectrl <<"                   else next_state = WORK_F;                          \n";                      
rectrl <<"             end                                                      \n";
rectrl <<"             WORK_8192:begin                                          \n";
rectrl <<"		             if(REMA < REMA_deadline_8192) next_state = WORK_8192;\n";
rectrl <<"                   else next_state = WORK_F;                          \n";
rectrl <<"             end                                                      \n";
rectrl <<"             WORK_16384:begin                                         \n";
rectrl <<"		             if(REMA < REMA_deadline_16384) next_state = WORK_16384;\n";
rectrl <<"                   else next_state = WORK_F;                          \n";
rectrl <<"             end                                                      \n";
rectrl <<"             WORK_32768:begin                                         \n";
rectrl <<"		             if(REMA < REMA_deadline_32768) next_state = WORK_32768;\n";
rectrl <<"                   else next_state = WORK_F;                          \n";
rectrl <<"             end                                                      \n";
rectrl <<"             WORK_65536:begin                                         \n";
rectrl <<"		             if(REMA < REMA_deadline_65536) next_state = WORK_65536;\n";
rectrl <<"                   else next_state = WORK_F;                          \n";
rectrl <<"             end                                                      \n";
rectrl <<"             WORK_F:begin                                             \n";                      
rectrl <<"                     next_state = OVER;                               \n";                      
rectrl <<"             end                                                      \n";                      
rectrl <<"             OVER:begin                                               \n";                      
rectrl <<"                     next_state = OVER;                               \n";                      
rectrl <<"             end                                                      \n";                      
rectrl <<"             default: next_state = IDLE;                              \n";                      
rectrl <<"         endcase                                                      \n";                      
rectrl <<"     end                                                              \n";                      
rectrl <<"                                                                      \n";                      
rectrl <<"     always@(posedge clk,negedge rst_n)begin                          \n";                      
rectrl <<"         if(~rst_n)begin                                              \n";                      
rectrl <<"             REMA  <=  REMA_ZERO;                                     \n";                      
rectrl <<"             state <=  4'b0;                                          \n";
rectrl <<"         end                                                          \n";                      
rectrl <<"         else begin                                                   \n";                      
rectrl <<"             REMA  <= REMA_wire;                                      \n";                      
rectrl <<"             state <= next_state;                                     \n";
rectrl <<"         end                                                          \n";                      
rectrl <<"     end                                                              \n";                      
rectrl <<"                                                                      \n";                      
rectrl <<" endmodule                                                            \n";                      

     rectrl.close();
}
void configurable_BFFT::IReorderMA_pip(std::string string_in){
     std::ofstream ireorderma_pip;
     std::string        string_buf = "/IReorderMA_pip.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     ireorderma_pip.open(ss.str());
ireorderma_pip <<"  //==================================================     \n";
ireorderma_pip <<"  //Writer     : shi yong                                  \n";
ireorderma_pip <<"  //Date       : 2020/4/20                                 \n";
ireorderma_pip <<"  //Note       : MA of inverse re-order pipeline           \n";
ireorderma_pip <<"  //==================================================     \n";
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"  module IReorderMA_pip(                                   \n";
ireorderma_pip <<"                         IREMA_o,                          \n";
ireorderma_pip <<"                         MA_i,                             \n";
ireorderma_pip <<"                         rst_n,                            \n";
ireorderma_pip <<"                         clk                               \n";
ireorderma_pip <<"  );                                                       \n";
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"  parameter IREMA_WIDTH = 11;                              \n";
ireorderma_pip <<"  parameter IREMA_ZERO  = 11'd0;                           \n";
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"  output [IREMA_WIDTH-1:0] IREMA_o;                        \n";
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"  input  [IREMA_WIDTH-1:0] MA_i;                           \n";
ireorderma_pip <<"  input                    rst_n;                          \n";
ireorderma_pip <<"  input                    clk;                            \n";
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"  reg    [IREMA_WIDTH-1:0] IREMA_o;                        \n";
ireorderma_pip <<"  reg    [IREMA_WIDTH-1:0] IREMA_d0;                       \n"; 
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"  always @(posedge clk,negedge rst_n)begin                 \n";
ireorderma_pip <<"     if(~rst_n)begin                                       \n";
ireorderma_pip <<"         IREMA_o  <= IREMA_ZERO;                           \n";
ireorderma_pip <<"         IREMA_d0 <= IREMA_ZERO;                           \n";
ireorderma_pip <<"     end                                                   \n";
ireorderma_pip <<"     else begin                                            \n";
ireorderma_pip <<"         IREMA_d0 <= MA_i;                                 \n";
ireorderma_pip <<"         IREMA_o  <= IREMA_d0;                             \n";
ireorderma_pip <<"     end                                                   \n";
ireorderma_pip <<"  end                                                      \n";
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"                                                           \n";
ireorderma_pip <<"  endmodule                                                \n";
	 
     ireorderma_pip.close();
}
void configurable_BFFT::R16_InpipeReg(std::string string_in){
     std::ofstream r16_inpipereg;
     std::string        string_buf = "/R16_InpipeReg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r16_inpipereg.open(ss.str());   
r16_inpipereg << "//===================================       \n";                        
r16_inpipereg << "//Note:input data pipline buffer            \n";                        
r16_inpipereg << "//===================================       \n";                        
r16_inpipereg << "`timescale 1ns/1ps                          \n";                        
r16_inpipereg << "module R16_InpipeReg(                       \n";                        
r16_inpipereg << "        ExtValid_in,                        \n";                        
r16_inpipereg << "        ExtB0_D0_in,                        \n";                        
r16_inpipereg << "        ExtB0_D1_in,                        \n";                        
r16_inpipereg << "        ExtB0_D2_in,                        \n";                        
r16_inpipereg << "        ExtB0_D3_in,                        \n";                        
r16_inpipereg << "        ExtB0_D4_in,                        \n";                        
r16_inpipereg << "        ExtB0_D5_in,                        \n";                        
r16_inpipereg << "        ExtB0_D6_in,                        \n";                        
r16_inpipereg << "        ExtB0_D7_in,                        \n";                        
r16_inpipereg << "        ExtB1_D0_in,                        \n";                        
r16_inpipereg << "        ExtB1_D1_in,                        \n";                        
r16_inpipereg << "        ExtB1_D2_in,                        \n";                        
r16_inpipereg << "        ExtB1_D3_in,                        \n";                        
r16_inpipereg << "        ExtB1_D4_in,                        \n";                        
r16_inpipereg << "        ExtB1_D5_in,                        \n";                        
r16_inpipereg << "        ExtB1_D6_in,                        \n";                        
r16_inpipereg << "        ExtB1_D7_in,                        \n";                        
r16_inpipereg << "        ExtValid_out,                       \n";                        
r16_inpipereg << "        ExtB0_D0_out,                       \n";                        
r16_inpipereg << "        ExtB0_D1_out,                       \n";                        
r16_inpipereg << "        ExtB0_D2_out,                       \n";                        
r16_inpipereg << "        ExtB0_D3_out,                       \n";                        
r16_inpipereg << "        ExtB0_D4_out,                       \n";                        
r16_inpipereg << "        ExtB0_D5_out,                       \n";                        
r16_inpipereg << "        ExtB0_D6_out,                       \n";                        
r16_inpipereg << "        ExtB0_D7_out,                       \n";                        
r16_inpipereg << "        ExtB1_D0_out,                       \n";                        
r16_inpipereg << "        ExtB1_D1_out,                       \n";                        
r16_inpipereg << "        ExtB1_D2_out,                       \n";                        
r16_inpipereg << "        ExtB1_D3_out,                       \n";                        
r16_inpipereg << "        ExtB1_D4_out,                       \n";                        
r16_inpipereg << "        ExtB1_D5_out,                       \n";                        
r16_inpipereg << "        ExtB1_D6_out,                       \n";                        
r16_inpipereg << "        ExtB1_D7_out,                       \n";                        
r16_inpipereg << "        rst_n,                              \n";                        
r16_inpipereg << "        clk                                 \n";                        
r16_inpipereg << ");                                          \n";                        
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "    parameter CP_WIDTH = "<< CP_width <<";\n";
r16_inpipereg << "    parameter CP_ZERO  = "<< CP_width <<"'d0;\n";
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "    output                ExtValid_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D0_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D1_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D2_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D3_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D4_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D5_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D6_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D7_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D0_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D1_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D2_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D3_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D4_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D5_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D6_out;     \n";                        
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D7_out;     \n";                        
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "    input                 ExtValid_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D0_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D1_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D2_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D3_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D4_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D5_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D6_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D7_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D0_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D1_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D2_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D3_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D4_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D5_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D6_in;      \n";                        
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D7_in;      \n";                        
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "    input                rst_n;             \n";                        
r16_inpipereg << "    input                clk;               \n";                        
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "    reg                ExtValid_reg0;       \n";                        
r16_inpipereg << "    reg                ExtValid_reg1;       \n";                        
r16_inpipereg << "    reg                ExtValid_reg2;       \n";                        
r16_inpipereg << "    reg                ExtValid_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D0_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D0_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D1_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D1_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D2_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D2_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D3_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D3_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D4_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D4_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D5_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D5_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D6_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D6_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D7_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D7_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D0_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D0_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D1_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D1_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D2_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D2_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D3_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D3_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D4_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D4_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D5_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D5_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D6_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D6_out;        \n";                        
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D7_d;          \n";                      
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D7_out;        \n";                        
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "                                            \n";                        
r16_inpipereg << "    always@(posedge clk or negedge rst_n)begin  \n";                    
r16_inpipereg << "        if(~rst_n)begin                         \n";                    
r16_inpipereg << "            ExtValid_reg0     <= 1'b0    ;      \n";                    
r16_inpipereg << "            ExtValid_reg1     <= 1'b0    ;      \n";                    
r16_inpipereg << "            ExtValid_reg2     <= 1'b0    ;      \n";                    
r16_inpipereg << "            ExtValid_out      <= 1'b0    ;      \n";                    
r16_inpipereg << "            //                                  \n";                    
r16_inpipereg << "            ExtB0_D0_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D1_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D2_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D3_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D4_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D5_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D6_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D7_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D0_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D1_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D2_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D3_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D4_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D5_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D6_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB1_D7_out      <= CP_ZERO  ;     \n";                     
r16_inpipereg << "            ExtB0_D0_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB0_D1_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB0_D2_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB0_D3_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB0_D4_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB0_D5_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB0_D6_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB0_D7_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D0_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D1_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D2_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D3_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D4_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D5_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D6_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            ExtB1_D7_d      <= CP_ZERO  ;       \n";                   
r16_inpipereg << "            //                                  \n";                    
r16_inpipereg << "        end                                     \n";                    
r16_inpipereg << "        else begin                                  \n";                
r16_inpipereg << "            ExtValid_reg0     <= ExtValid_in     ;  \n";                
r16_inpipereg << "            ExtValid_reg1     <= ExtValid_reg0   ;  \n";                
r16_inpipereg << "            ExtValid_reg2     <= ExtValid_reg1   ;  \n";                
r16_inpipereg << "            ExtValid_out      <= ExtValid_reg2   ;  \n";                
r16_inpipereg << "            //                                      \n";                
r16_inpipereg << "            ExtB0_D0_d        <= ExtB0_D0_in     ;  \n";                
r16_inpipereg << "            ExtB0_D0_out      <= ExtB0_D0_d      ;  \n";                
r16_inpipereg << "            ExtB0_D1_d        <= ExtB0_D1_in     ;  \n";                
r16_inpipereg << "            ExtB0_D1_out      <= ExtB0_D1_d      ;  \n";                
r16_inpipereg << "            ExtB0_D2_d        <= ExtB0_D2_in     ;  \n";                
r16_inpipereg << "            ExtB0_D2_out      <= ExtB0_D2_d      ;  \n";                
r16_inpipereg << "            ExtB0_D3_d        <= ExtB0_D3_in     ;  \n";                
r16_inpipereg << "            ExtB0_D3_out      <= ExtB0_D3_d      ;  \n";                
r16_inpipereg << "            ExtB0_D4_d        <= ExtB0_D4_in     ;  \n";                
r16_inpipereg << "            ExtB0_D4_out      <= ExtB0_D4_d      ;  \n";                
r16_inpipereg << "            ExtB0_D5_d        <= ExtB0_D5_in     ;  \n";                
r16_inpipereg << "            ExtB0_D5_out      <= ExtB0_D5_d      ;  \n";                
r16_inpipereg << "            ExtB0_D6_d        <= ExtB0_D6_in     ;  \n";                
r16_inpipereg << "            ExtB0_D6_out      <= ExtB0_D6_d      ;  \n";                
r16_inpipereg << "            ExtB0_D7_d        <= ExtB0_D7_in     ;  \n";                
r16_inpipereg << "            ExtB0_D7_out      <= ExtB0_D7_d      ;  \n";                
r16_inpipereg << "            ExtB1_D0_d        <= ExtB1_D0_in     ;  \n";                
r16_inpipereg << "            ExtB1_D0_out      <= ExtB1_D0_d      ;  \n";                
r16_inpipereg << "            ExtB1_D1_d        <= ExtB1_D1_in     ;  \n";                
r16_inpipereg << "            ExtB1_D1_out      <= ExtB1_D1_d      ;  \n";                
r16_inpipereg << "            ExtB1_D2_d        <= ExtB1_D2_in     ;  \n";                
r16_inpipereg << "            ExtB1_D2_out      <= ExtB1_D2_d      ;  \n";                
r16_inpipereg << "            ExtB1_D3_d        <= ExtB1_D3_in     ;  \n";                
r16_inpipereg << "            ExtB1_D3_out      <= ExtB1_D3_d      ;  \n";                
r16_inpipereg << "            ExtB1_D4_d        <= ExtB1_D4_in     ;  \n";                
r16_inpipereg << "            ExtB1_D4_out      <= ExtB1_D4_d      ;  \n";                
r16_inpipereg << "            ExtB1_D5_d        <= ExtB1_D5_in     ;  \n";                
r16_inpipereg << "            ExtB1_D5_out      <= ExtB1_D5_d      ;  \n";                
r16_inpipereg << "            ExtB1_D6_d        <= ExtB1_D6_in     ;  \n";                
r16_inpipereg << "            ExtB1_D6_out      <= ExtB1_D6_d      ;  \n";                
r16_inpipereg << "            ExtB1_D7_d        <= ExtB1_D7_in     ;  \n";                
r16_inpipereg << "            ExtB1_D7_out      <= ExtB1_D7_d      ;  \n";                
r16_inpipereg << "        end                                         \n";                
r16_inpipereg << "    end                                             \n";                
r16_inpipereg << "endmodule	                                         \n";                 
	 
	 r16_inpipereg.close();
}
void configurable_BFFT::R16_BU_outpipe(std::string string_in){
	 std::ofstream r16_bu_outpipe;
     std::string        string_buf = "/R16_BU_outpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_bu_outpipe.open(ss.str());
r16_bu_outpipe << "//=============================================\n";
r16_bu_outpipe << "//Writer:Shi-Yong Wu                           \n";
r16_bu_outpipe << "//                                             \n";
r16_bu_outpipe << "//Note:R16 data output pipe                     \n";
r16_bu_outpipe << "//=============================================\n";
r16_bu_outpipe << "module R16_BU_outpipe(                             \n";
r16_bu_outpipe << "  CRUD0_o,                                     \n";
r16_bu_outpipe << "  CRUD1_o,                                     \n";
r16_bu_outpipe << "  CRUD2_o,                                     \n";
r16_bu_outpipe << "  CRUD3_o,                                     \n";
r16_bu_outpipe << "  CRUD4_o,                                     \n";
r16_bu_outpipe << "  CRUD5_o,                                     \n";
r16_bu_outpipe << "  CRUD6_o,                                     \n";
r16_bu_outpipe << "  CRUD7_o,                                     \n";
r16_bu_outpipe << "  CRUD8_o,                                     \n";
r16_bu_outpipe << "  CRUD9_o,                                     \n";
r16_bu_outpipe << "  CRUD10_o,                                     \n";
r16_bu_outpipe << "  CRUD11_o,                                     \n";
r16_bu_outpipe << "  CRUD12_o,                                     \n";
r16_bu_outpipe << "  CRUD13_o,                                     \n";
r16_bu_outpipe << "  CRUD14_o,                                     \n";
r16_bu_outpipe << "  CRUD15_o,                                     \n";
r16_bu_outpipe << "  BR0_o,                                     \n";
r16_bu_outpipe << "  BR1_o,                                     \n";
r16_bu_outpipe << "  BR2_o,                                     \n";
r16_bu_outpipe << "  BR3_o,                                     \n";
r16_bu_outpipe << "  BR4_o,                                     \n";
r16_bu_outpipe << "  BR5_o,                                     \n";
r16_bu_outpipe << "  BR6_o,                                     \n";
r16_bu_outpipe << "  BR7_o,                                     \n";
r16_bu_outpipe << "  BR8_o,                                     \n";
r16_bu_outpipe << "  BR9_o,                                     \n";
r16_bu_outpipe << "  BR10_o,                                     \n";
r16_bu_outpipe << "  BR11_o,                                     \n";
r16_bu_outpipe << "  BR12_o,                                     \n";
r16_bu_outpipe << "  BR13_o,                                     \n";
r16_bu_outpipe << "  BR14_o,                                     \n";
r16_bu_outpipe << "  BR15_o,                                     \n";
r16_bu_outpipe << "  CRUD0_i,                                      \n";
r16_bu_outpipe << "  CRUD1_i,                                      \n";
r16_bu_outpipe << "  CRUD2_i,                                      \n";
r16_bu_outpipe << "  CRUD3_i,                                      \n";
r16_bu_outpipe << "  CRUD4_i,                                      \n";
r16_bu_outpipe << "  CRUD5_i,                                      \n";
r16_bu_outpipe << "  CRUD6_i,                                      \n";
r16_bu_outpipe << "  CRUD7_i,                                      \n";
r16_bu_outpipe << "  CRUD8_i,                                      \n";
r16_bu_outpipe << "  CRUD9_i,                                      \n";
r16_bu_outpipe << "  CRUD10_i,                                     \n";
r16_bu_outpipe << "  CRUD11_i,                                     \n";
r16_bu_outpipe << "  CRUD12_i,                                     \n";
r16_bu_outpipe << "  CRUD13_i,                                     \n";
r16_bu_outpipe << "  CRUD14_i,                                     \n";
r16_bu_outpipe << "  CRUD15_i,                                     \n";
r16_bu_outpipe << "  rst_n,                                        \n";
r16_bu_outpipe << "  clk                                           \n";
r16_bu_outpipe << ");                                              \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  parameter P_WIDTH    = " << "64;\n";
r16_bu_outpipe << "  parameter P_ZERO     = " << "64'd0;\n";
r16_bu_outpipe << "  parameter BRD_WIDTH  = " << (64-(2*CP_width)) <<";                      \n";
r16_bu_outpipe << "  parameter BRD_ZERO   = " << (64-(2*CP_width)) <<"'d0;                   \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD0_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD1_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD2_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD3_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD4_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD5_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD6_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD7_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD8_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD9_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD10_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD11_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD12_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD13_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD14_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD15_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR0_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR1_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR2_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR3_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR4_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR5_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR6_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR7_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR8_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR9_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR10_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR11_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR12_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR13_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR14_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR15_o;             \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD0_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD1_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD2_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD3_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD4_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD5_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD6_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD7_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD8_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD9_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD10_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD11_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD12_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD13_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD14_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD15_i;             \n";
r16_bu_outpipe << "  input  				  rst_n;                \n";
r16_bu_outpipe << "  input 				  clk;                  \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD0_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD1_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD2_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD3_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD4_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD5_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD6_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD7_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD8_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD9_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD10_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD11_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD12_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD13_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD14_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD15_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR0_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR1_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR2_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR3_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR4_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR5_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR6_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR7_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR8_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR9_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR10_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR11_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR12_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR13_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR14_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR15_o;                 \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  always@(posedge clk,negedge rst_n)begin       \n";
r16_bu_outpipe << "		if(~rst_n)begin                             \n";
r16_bu_outpipe << "		    	CRUD0_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD1_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD2_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD3_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD4_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD5_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD6_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD7_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD8_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD9_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD10_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD11_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD12_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD13_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD14_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD15_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	BR0_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR1_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR2_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR3_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR4_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR5_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR6_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR7_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR8_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR9_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR10_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR11_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR12_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR13_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR14_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR15_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		end                                         \n";
r16_bu_outpipe << "		else begin                                  \n";
r16_bu_outpipe << " 	       CRUD0_o    <=  CRUD0_i;                 \n";
r16_bu_outpipe << " 	       CRUD1_o    <=  CRUD1_i;                 \n";
r16_bu_outpipe << " 	       CRUD2_o    <=  CRUD2_i;                 \n";
r16_bu_outpipe << " 	       CRUD3_o    <=  CRUD3_i;                 \n";
r16_bu_outpipe << " 	       CRUD4_o    <=  CRUD4_i;                 \n";
r16_bu_outpipe << " 	       CRUD5_o    <=  CRUD5_i;                 \n";
r16_bu_outpipe << " 	       CRUD6_o    <=  CRUD6_i;                 \n";
r16_bu_outpipe << " 	       CRUD7_o    <=  CRUD7_i;                 \n";
r16_bu_outpipe << " 	       CRUD8_o    <=  CRUD8_i;                 \n";
r16_bu_outpipe << " 	       CRUD9_o    <=  CRUD9_i;                 \n";
r16_bu_outpipe << " 	       CRUD10_o   <=  CRUD10_i;                \n";
r16_bu_outpipe << " 	       CRUD11_o   <=  CRUD11_i;                \n";
r16_bu_outpipe << " 	       CRUD12_o   <=  CRUD12_i;                \n";
r16_bu_outpipe << " 	       CRUD13_o   <=  CRUD13_i;                \n";
r16_bu_outpipe << " 	       CRUD14_o   <=  CRUD14_i;                \n";
r16_bu_outpipe << " 	       CRUD15_o   <=  CRUD15_i;                \n";
r16_bu_outpipe << " 	       BR0_o      <=  CRUD0_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR1_o      <=  CRUD1_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR2_o      <=  CRUD2_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR3_o      <=  CRUD3_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR4_o      <=  CRUD4_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR5_o      <=  CRUD5_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR6_o      <=  CRUD6_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR7_o      <=  CRUD7_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR8_o      <=  CRUD8_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR9_o      <=  CRUD9_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR10_o     <=  CRUD10_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR11_o     <=  CRUD11_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR12_o     <=  CRUD12_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR13_o     <=  CRUD13_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR14_o     <=  CRUD14_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR15_o     <=  CRUD15_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << "		end                                         \n";
r16_bu_outpipe << "  end                                           \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "endmodule                                       \n";	 
	 r16_bu_outpipe.close();
}
void configurable_BFFT::CenCtrl_16(std::string string_in){
	 std::ofstream cenctrl;
     std::string        string_buf = "/CenCtrl.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 cenctrl.open(ss.str()); 
cenctrl << " `timescale 1 ns/1 ps                                \n";
cenctrl << " module CenCtrl(MulValid_out,                        \n";
cenctrl << "                cen_out,                             \n";  
cenctrl << "                wen0_out,                            \n";  
cenctrl << "                wen1_out,                            \n";  
cenctrl << "                SD_sel_out,                          \n";  
cenctrl << "                ExtMA_out,                           \n";  
cenctrl << "                AGU_en_out,                          \n";  
cenctrl << "                RomCen_out,                          \n";  
cenctrl << "                mode_sel_out,                        \n";  
cenctrl << "                rc_sel_out,                          \n";  
cenctrl << "                m2_sel_out,                          \n";  
cenctrl << "                wrfd_en_out,                         \n";  
cenctrl << "                data_cnt_in,                         \n";  
cenctrl << "                BND_in,                              \n";
cenctrl << "                Point_sel_in,				         \n";
cenctrl << "                ExtValid_in,                         \n";  
cenctrl << "                rst_n,                               \n";
cenctrl << "                clk                                  \n";
cenctrl << "                ) ;                                  \n";
cenctrl << " 			   			                             \n"; 
cenctrl << " parameter A_WIDTH  = 11 ;                           \n";
cenctrl << " parameter DC_WIDTH = 15 ;                           \n";
cenctrl << " parameter A_ZERO   = 11'h0;                         \n";
cenctrl << "                                                     \n";
cenctrl << " parameter S_WIDTH   = 5 ;                           \n";
cenctrl << "                                                     \n";
cenctrl << " parameter DCNT_V3  = 15'd5;                         \n";
cenctrl << " //INITIAL                                           \n";
cenctrl << " parameter INI                 = 5'd0;               \n";
cenctrl << " parameter LD_EXTD_4096        = 5'd1;               \n";
cenctrl << " parameter LD_EXTD_8192        = 5'd2;               \n";
cenctrl << " parameter LD_EXTD_16384       = 5'd3;               \n";
cenctrl << " parameter LD_EXTD_32768       = 5'd4;               \n";
cenctrl << " parameter LD_EXTD_65536       = 5'd5;               \n";
cenctrl << " parameter LD_EXTDF            = 5'd6;               \n";
cenctrl << " parameter LD_STAGE1_ST        = 5'd7;               \n";
cenctrl << " parameter ST_STAGE1_4096      = 5'd8;               \n";
cenctrl << " parameter ST_STAGE1_8192      = 5'd9;               \n";
cenctrl << " parameter ST_STAGE1_16384     = 5'd10;              \n";
cenctrl << " parameter ST_STAGE1_32768     = 5'd11;              \n";
cenctrl << " parameter ST_STAGE1_65536     = 5'd12;              \n";
cenctrl << " parameter WR_FIND             = 5'd13;              \n";
cenctrl << " parameter LD_STAGE2_ST        = 5'd14;              \n";
cenctrl << " parameter SET_IFFT            = 5'd15;              \n";
cenctrl << " parameter LD_IFFTSTAGE1_ST    = 5'd16;              \n";
cenctrl << " parameter ST_IFFTSTAGE1_4096  = 5'd17;              \n";
cenctrl << " parameter ST_IFFTSTAGE1_8192  = 5'd18;              \n";
cenctrl << " parameter ST_IFFTSTAGE1_16384 = 5'd19;              \n";
cenctrl << " parameter ST_IFFTSTAGE1_32768 = 5'd20;              \n";
cenctrl << " parameter ST_IFFTSTAGE1_65536 = 5'd21;              \n";
cenctrl << " parameter WR_IFFTFIND         = 5'd22;              \n";
cenctrl << " parameter LD_IFFTSTAGE2_ST    = 5'd23;              \n";
cenctrl << " parameter SET_OP_4096         = 5'd24;              \n";
cenctrl << " parameter SET_OP_8192         = 5'd25;              \n";
cenctrl << " parameter SET_OP_16384        = 5'd26;              \n";
cenctrl << " parameter SET_OP_32768        = 5'd27;              \n";
cenctrl << " parameter SET_OP_65536        = 5'd28;              \n";
cenctrl << " parameter SET_OPF             = 5'd29;              \n";
cenctrl << "                                                     \n";
//4096
cenctrl <<" parameter EXTMA_V1_4096 = 11'd127;       \n";
cenctrl <<" parameter DCNT_V1_4096  = 15'd815;       \n";
cenctrl <<" parameter DCNT_V2_4096  = 15'd132;       \n";
cenctrl <<" parameter DCNT_V4_4096  = 15'd255;       \n";
cenctrl <<" parameter DCNT_V5_4096  = 15'd511;       \n";
//8192
cenctrl << " parameter EXTMA_V1_8192 = 11'd255;      \n";
cenctrl << " parameter DCNT_V1_8192  = 15'd2095;     \n";
cenctrl << " parameter DCNT_V2_8192  = 15'd260;      \n";
cenctrl << " parameter DCNT_V4_8192  = 15'd511;      \n";
cenctrl << " parameter DCNT_V5_8192  = 15'd1023;     \n";
cenctrl << " parameter DCNT_V6_8192  = 15'd1535;     \n";
//16384
cenctrl << " parameter EXTMA_V1_16384 = 11'd511;     \n";
cenctrl << " parameter DCNT_V1_16384  = 15'd4143;    \n";
cenctrl << " parameter DCNT_V2_16384  = 15'd516;     \n";
cenctrl << " parameter DCNT_V4_16384  = 15'd1023;    \n";
cenctrl << " parameter DCNT_V5_16384  = 15'd2047;    \n";
cenctrl << " parameter DCNT_V6_16384  = 15'd3071;    \n";
//32768
cenctrl << " parameter EXTMA_V1_32768 = 11'd1023;          \n";
cenctrl << " parameter DCNT_V1_32768  = 15'd8239;          \n";
cenctrl << " parameter DCNT_V2_32768  = 15'd1028;          \n";
cenctrl << " parameter DCNT_V4_32768  = 15'd2047;          \n";
cenctrl << " parameter DCNT_V5_32768  = 15'd4095;          \n";
cenctrl << " parameter DCNT_V6_32768  = 15'd6143;          \n";
//65536
cenctrl << " parameter EXTMA_V1_65536 = 11'd2047;          \n";
cenctrl << " parameter DCNT_V1_65536  = 15'd16431;         \n";
cenctrl << " parameter DCNT_V2_65536  = 15'd2052;          \n";
cenctrl << " parameter DCNT_V4_65536  = 15'd4095;          \n";
cenctrl << " parameter DCNT_V5_65536  = 15'd8191;          \n";
cenctrl << " parameter DCNT_V6_65536  = 15'd12287;         \n";

cenctrl << " output               MulValid_out ;                 \n";
cenctrl << " output               cen_out ;                      \n";
cenctrl << " output               wen0_out ;                     \n";
cenctrl << " output               wen1_out ;                     \n";
cenctrl << " output               SD_sel_out ;                   \n";
cenctrl << " output [A_WIDTH-1:0] ExtMA_out ;                    \n";
cenctrl << " output               AGU_en_out ;                   \n";
cenctrl << " output               RomCen_out ;                   \n";
cenctrl << " output               mode_sel_out ;                 \n";
cenctrl << " output               rc_sel_out ;                   \n";
cenctrl << " output               m2_sel_out ;                   \n";
cenctrl << " output               wrfd_en_out ;                  \n";
cenctrl << "                                                     \n";
cenctrl << " input [DC_WIDTH-1:0] data_cnt_in ;                  \n";
cenctrl << " input                BND_in ;                       \n";
cenctrl << " input [2:0]          Point_sel_in;                  \n";
cenctrl << " input                ExtValid_in ;                  \n";
cenctrl << " input                rst_n ;                        \n";
cenctrl << " input                clk ;                          \n";
cenctrl << "                                                     \n";
cenctrl << "                                                     \n";
cenctrl << " reg   [S_WIDTH-1:0]  state ;                        \n";
cenctrl << " reg   [S_WIDTH-1:0]   next_state ;                   \n";
cenctrl << "                                                     \n";
cenctrl << "                                                     \n";
cenctrl << " reg   [A_WIDTH-1:0]  ExtMA_out ;                    \n";
cenctrl << " reg   [5:0]          WenCnt_reg ;                   \n";
cenctrl << " reg                  m2_sel_out ;                   \n";
cenctrl << " reg   [5:0]          Cnt1_reg ;                     \n";
cenctrl << "                                                     \n";
cenctrl << "                                                     \n";
cenctrl << " wire  [A_WIDTH-1:0]  ExtMA_wire ;                   \n";
cenctrl << " wire  [5:0]          WenCnt_wire ;                  \n";
cenctrl << " wire                 m2_sel_wire ;                  \n";
cenctrl << " wire  [5:0]          Cnt1_wire ;                    \n";
cenctrl << "                                                     \n";
cenctrl << "                                                     \n";
cenctrl << " 	//                                               \n";
cenctrl << " 	assign cen_out = (state == INI) ;                \n";
cenctrl << " 	                                                 \n";
cenctrl << " 	//                                               \n";
cenctrl << " 	assign wen0_out = ((state == INI)||(state == LD_EXTDF)||(state == LD_STAGE1_ST)||\n";                                                                              
cenctrl << "                       (state == LD_STAGE2_ST)||(state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||(state == LD_IFFTSTAGE2_ST)||\n"; 
cenctrl << "                       (state == SET_OP_4096)||(state == SET_OP_8192)||(state == SET_OP_16384)||\n";
cenctrl << "                       (state == SET_OP_32768)||(state == SET_OP_65536)||(state == SET_OPF))? 1'b1 :\n";                                   
cenctrl << "                      ((state == ST_STAGE1_4096)||(state == ST_STAGE1_8192)||(state == ST_STAGE1_16384)||(state == ST_STAGE1_32768)||(state == ST_STAGE1_65536)||\n";
cenctrl << "                       (state == ST_IFFTSTAGE1_4096)||(state == ST_IFFTSTAGE1_8192)||(state == ST_IFFTSTAGE1_16384)||(state == ST_IFFTSTAGE1_32768)||(state == ST_IFFTSTAGE1_65536)||\n";
cenctrl << "                       (state == WR_FIND)||(state == WR_IFFTFIND))? BND_in : 1'b0 ;\n";
cenctrl << "\n";
cenctrl << " 	assign wen1_out = ((state == INI)||(state == LD_EXTDF)||(state == LD_STAGE1_ST)||\n";                                                                                
cenctrl << "                       (state == LD_STAGE2_ST)||(state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||(state == LD_IFFTSTAGE2_ST)||\n";                                                                 
cenctrl << "                       (state == SET_OP_4096)||(state == SET_OP_8192)||(state == SET_OP_16384)||\n";
cenctrl << "                       (state == SET_OP_32768)||(state == SET_OP_65536)||(state == SET_OPF))? 1'b1 :\n";
cenctrl << "                       ((state == ST_STAGE1_4096)||(state == ST_STAGE1_8192)||(state == ST_STAGE1_16384)||(state == ST_STAGE1_32768)||(state == ST_STAGE1_65536)||\n";
cenctrl << "                       (state == ST_IFFTSTAGE1_4096)||(state == ST_IFFTSTAGE1_8192)||(state == ST_IFFTSTAGE1_16384)||(state == ST_IFFTSTAGE1_32768)||(state == ST_IFFTSTAGE1_65536)||\n";
cenctrl << " 	                   (state == WR_FIND)||(state == WR_IFFTFIND))? (~BND_in) : 1'b0 ;\n";
cenctrl << "\n";
cenctrl << " 	assign SD_sel_out = (state == INI)||(state == LD_EXTD_4096)||\n";
cenctrl << "                        (state == LD_EXTD_8192)||(state == LD_EXTD_16384)||\n";
cenctrl << "                        (state == LD_EXTD_32768)||(state == LD_EXTD_65536) ;\n";
cenctrl << "\n";
cenctrl << "// Ext Memory Address out \n";                                                                                                                                     
cenctrl << " 	assign ExtMA_wire = ((state == LD_EXTD_4096)||\n";                                                                                     
cenctrl << " 	                     (state == LD_EXTD_8192)||\n";
cenctrl << "                         (state == LD_EXTD_16384)||\n";
cenctrl << "                         (state == LD_EXTD_32768)||\n";
cenctrl << "                         (state == LD_EXTD_65536))? (ExtMA_out + 1'b1) : ExtMA_out ;\n";                                                                                     
cenctrl << "\n";                                                                                                                                                               
cenctrl << " 	assign AGU_en_out = (state == LD_EXTDF)||(state == LD_STAGE1_ST)||(state == LD_STAGE2_ST)||\n";
cenctrl << "                        (state == ST_STAGE1_4096)||(state == ST_STAGE1_8192)||(state == ST_STAGE1_16384)||(state == ST_STAGE1_32768)||(state == ST_STAGE1_65536)||\n";
cenctrl << " 	                    (state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||(state == LD_IFFTSTAGE2_ST)||\n";
cenctrl << "                        (state == ST_IFFTSTAGE1_4096)||(state == ST_IFFTSTAGE1_8192)||(state == ST_IFFTSTAGE1_16384)||(state == ST_IFFTSTAGE1_32768)||(state == ST_IFFTSTAGE1_65536)||\n";
cenctrl << " 						(state == SET_OP_4096)||(state == SET_OP_8192)||(state == SET_OP_16384)||(state == SET_OP_32768)||(state == SET_OP_65536);\n";  
cenctrl << "\n";                                                                                                                                                               
cenctrl << " 	assign RomCen_out = (state == INI)||(state == LD_EXTD_4096)||(state == LD_EXTD_8192)||(state == LD_EXTD_16384)||(state == LD_EXTD_32768)||(state == LD_EXTD_65536)||\n";
cenctrl << " 	                    (state == SET_OP_4096)||(state == SET_OP_8192)||(state == SET_OP_16384)||(state == SET_OP_32768)||(state == SET_OP_65536)||(state == SET_OPF);\n";
cenctrl << "\n";
cenctrl << " 	// Counter for computing 47 butterfly units in stage1 \n";
cenctrl << " 	assign WenCnt_wire = ((state == LD_STAGE1_ST)||(state == LD_STAGE2_ST)||(state == LD_IFFTSTAGE1_ST)||(state == LD_IFFTSTAGE2_ST))? (WenCnt_reg + 1'b1) : 4'd0 ;\n";
cenctrl << "\n";                                                                                                                                                              
cenctrl << " 	// mode_sel = 0 FFT, mode_sel = 1 IFFT, mode_sel = 0 SET_RC\n";
cenctrl << " 	assign mode_sel_out = (state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||\n";
cenctrl << "                          (state == ST_IFFTSTAGE1_4096)||(state == ST_IFFTSTAGE1_8192)||(state == ST_IFFTSTAGE1_16384)||(state == ST_IFFTSTAGE1_32768)||(state == ST_IFFTSTAGE1_65536)||\n";
cenctrl << "                          (state == WR_IFFTFIND)||(state == LD_IFFTSTAGE2_ST) ;\n";        
cenctrl << "\n";
cenctrl << " 	assign rc_sel_out = (state == SET_OP_4096)||(state == SET_OP_8192)||(state == SET_OP_16384)||(state == SET_OP_32768)||(state == SET_OP_65536);\n";
cenctrl << "\n";
cenctrl << " 	assign m2_sel_wire = (state == SET_OP_4096)||(state == SET_OP_8192)||(state == SET_OP_16384)||(state == SET_OP_32768)||(state == SET_OP_65536); \n";                                                                                                                       
cenctrl << "\n";
cenctrl << " 	assign MulValid_out = ((((state == SET_OP_4096)||\n";
cenctrl << "                             (state == SET_OP_8192)||\n";
cenctrl << "                             (state == SET_OP_16384)||\n";
cenctrl << "                             (state == SET_OP_32768)||\n";
cenctrl << "                             (state == SET_OP_65536))&&(data_cnt_in>=DCNT_V3))||(state == SET_OPF)) ? 1'b1 : 1'b0 ;\n";
cenctrl << "\n";
cenctrl << " 	assign Cnt1_wire = ((state == WR_FIND)||(state == WR_IFFTFIND)) ? (Cnt1_reg + 1'b1) : 6'd0 ;\n";
cenctrl << "\n";
cenctrl << " 	assign wrfd_en_out = (state == WR_FIND)||(state == WR_IFFTFIND) ? 1'b1 : 1'b0 ; \n";
cenctrl << "\n";
cenctrl <<"   always @(*) begin\n";
cenctrl <<"       case(state)\n";
cenctrl <<"           INI: begin\n";
cenctrl <<"                   if((ExtValid_in == 1'd1) && (Point_sel_in == 3'd4)) next_state = LD_EXTD_4096 ; \n"; 
cenctrl <<"                   else if((ExtValid_in == 1'd1) && (Point_sel_in == 3'd3)) next_state = LD_EXTD_8192 ; \n"; 
cenctrl <<"                   else if((ExtValid_in == 1'd1) && (Point_sel_in == 3'd2)) next_state = LD_EXTD_16384 ; \n"; 
cenctrl <<"                   else if((ExtValid_in == 1'd1) && (Point_sel_in == 3'd1)) next_state = LD_EXTD_32768 ; \n"; 
cenctrl <<"                   else if(ExtValid_in == 1'd1) next_state = LD_EXTD_65536 ; \n"; 
cenctrl <<"                   else next_state = INI ;   \n";
cenctrl <<"               end                           \n";                                                                                                                     
cenctrl <<"           // LOAD  Extdata to SRAM	      \n";                                                                                                                      
cenctrl <<"           LD_EXTD_4096: begin\n";
cenctrl <<"                       if(ExtMA_out < EXTMA_V1_4096) next_state = LD_EXTD_4096 ;\n";
cenctrl <<"                       else next_state = LD_EXTDF ;                  \n";
cenctrl <<"                    end                                              \n";
cenctrl <<"           LD_EXTD_8192: begin\n";
cenctrl <<"                       if(ExtMA_out < EXTMA_V1_8192) next_state = LD_EXTD_8192 ;\n";
cenctrl <<"                       else next_state = LD_EXTDF ;                  \n";
cenctrl <<"                    end                                              \n";
cenctrl <<"           LD_EXTD_16384: begin\n";
cenctrl <<"                       if(ExtMA_out < EXTMA_V1_16384) next_state = LD_EXTD_16384 ;\n";
cenctrl <<"                       else next_state = LD_EXTDF ;                  \n";
cenctrl <<"                    end                                              \n";
cenctrl <<"           LD_EXTD_32768: begin\n";
cenctrl <<"                       if(ExtMA_out < EXTMA_V1_32768) next_state = LD_EXTD_32768 ;\n";
cenctrl <<"                       else next_state = LD_EXTDF ;                  \n";
cenctrl <<"                    end                                              \n";
cenctrl <<"           LD_EXTD_65536: begin\n";
cenctrl <<"                       if(ExtMA_out < EXTMA_V1_65536) next_state = LD_EXTD_65536 ;\n";
cenctrl <<"                       else next_state = LD_EXTDF ;                  \n";
cenctrl <<"                    end                                              \n";
cenctrl <<"           // LOAD  Final Extdata to SRAM	and  Compute dataCount    \n";                                                                                              
cenctrl <<"           LD_EXTDF: begin                                           \n";                                                                                              
cenctrl <<"                        next_state = LD_STAGE1_ST ;                  \n";                                                                                               
cenctrl <<"                     end                                             \n";                                                                                              
cenctrl <<"           // Compute FFT                                            \n";                                                                                              
cenctrl <<"           LD_STAGE1_ST: begin                                       \n";                                                                                              
cenctrl <<"                           if(WenCnt_reg < 6'd46) next_state = LD_STAGE1_ST ;\n";         
cenctrl <<"                           else if(Point_sel_in == 3'd4)next_state = ST_STAGE1_4096;\n";
cenctrl <<"                           else if(Point_sel_in == 3'd3)next_state = ST_STAGE1_8192;\n";
cenctrl <<"                           else if(Point_sel_in == 3'd2)next_state = ST_STAGE1_16384;\n";
cenctrl <<"                           else if(Point_sel_in == 3'd1)next_state = ST_STAGE1_32768;\n";
cenctrl <<"                           else next_state = ST_STAGE1_65536;\n";
cenctrl <<"                        end                                                 \n";                                                                                      
cenctrl <<"           ST_STAGE1_4096: begin\n";
cenctrl <<"                         if((data_cnt_in==DCNT_V4_4096)||(data_cnt_in==DCNT_V5_4096)) next_state = WR_FIND ;\n";
cenctrl <<"                         else if(data_cnt_in < DCNT_V1_4096) next_state = ST_STAGE1_4096 ; \n";
cenctrl <<"                         else next_state = SET_IFFT ; \n";
cenctrl <<"                      end                             \n";
cenctrl <<"           ST_STAGE1_8192: begin\n";
cenctrl <<"                         if((data_cnt_in==DCNT_V4_8192)||(data_cnt_in==DCNT_V5_8192)||(data_cnt_in==DCNT_V6_8192)) next_state = WR_FIND ;\n";
cenctrl <<"                         else if(data_cnt_in < DCNT_V1_8192) next_state = ST_STAGE1_8192 ; \n";
cenctrl <<"                         else next_state = SET_IFFT ; \n";
cenctrl <<"                      end                             \n";
cenctrl <<"           ST_STAGE1_16384: begin\n";
cenctrl <<"                         if((data_cnt_in==DCNT_V4_16384)||(data_cnt_in==DCNT_V5_16384)||(data_cnt_in==DCNT_V6_16384)) next_state = WR_FIND ;\n";
cenctrl <<"                         else if(data_cnt_in < DCNT_V1_16384) next_state = ST_STAGE1_16384 ; \n";
cenctrl <<"                         else next_state = SET_IFFT ; \n";
cenctrl <<"                      end                             \n";
cenctrl <<"           ST_STAGE1_32768: begin\n";
cenctrl <<"                         if((data_cnt_in==DCNT_V4_32768)||(data_cnt_in==DCNT_V5_32768)||(data_cnt_in==DCNT_V6_32768)) next_state = WR_FIND ;\n";
cenctrl <<"                         else if(data_cnt_in < DCNT_V1_32768) next_state = ST_STAGE1_32768 ; \n";
cenctrl <<"                         else next_state = SET_IFFT ; \n";
cenctrl <<"                      end                             \n";
cenctrl <<"           ST_STAGE1_65536: begin\n";
cenctrl <<"                         if((data_cnt_in==DCNT_V4_65536)||(data_cnt_in==DCNT_V5_65536)||(data_cnt_in==DCNT_V6_65536)) next_state = WR_FIND ;\n";
cenctrl <<"                         else if(data_cnt_in < DCNT_V1_65536) next_state = ST_STAGE1_65536; \n";
cenctrl <<"                         else next_state = SET_IFFT ; \n";
cenctrl <<"                      end                             \n";
cenctrl <<"             // Write 48 FFT data to SRAM in stage1   \n";
cenctrl <<"           WR_FIND: begin                             \n";
cenctrl <<"                       if(Cnt1_reg < 6'd47) next_state = WR_FIND ; //modify       \n";                    
cenctrl <<"                       else next_state = LD_STAGE2_ST ;      \n";                                         
cenctrl <<"                    end                                      \n";                                         
cenctrl <<" 			// Stage2 and other Stages, just Read FFT data, Counter for computing 48 butterfly units\n"; 
cenctrl <<"           LD_STAGE2_ST: begin                                                                       \n"; 
cenctrl <<"                            if(WenCnt_reg < 6'd47) next_state = LD_STAGE2_ST ;                        \n"; 
cenctrl <<"                            else if(Point_sel_in == 3'd4)next_state = ST_STAGE1_4096;                \n"; 
cenctrl <<"                            else if(Point_sel_in == 3'd3)next_state = ST_STAGE1_8192;                \n"; 
cenctrl <<"                            else if(Point_sel_in == 3'd2)next_state = ST_STAGE1_16384;               \n"; 
cenctrl <<"                            else if(Point_sel_in == 3'd1)next_state = ST_STAGE1_32768;               \n"; 
cenctrl <<"                            else next_state = ST_STAGE1_65536;                                       \n"; 
cenctrl <<"                         end                                                                         \n"; 
cenctrl <<"           // Compute dataCount		                                                                \n"; 
cenctrl <<"           SET_IFFT: begin                                                                           \n"; 
cenctrl <<"                        next_state = LD_IFFTSTAGE1_ST ;                                              \n"; 
cenctrl <<"                     end                                                                             \n"; 
cenctrl <<"           // Compute IFFT		                                                                    \n"; 
cenctrl <<"           LD_IFFTSTAGE1_ST: begin                                                                   \n"; 
cenctrl <<"                                if(WenCnt_reg < 6'd46) next_state = LD_IFFTSTAGE1_ST ;                \n"; 
cenctrl <<"                                else if(Point_sel_in == 3'd4) next_state = ST_IFFTSTAGE1_4096;       \n"; 
cenctrl <<"                                else if(Point_sel_in == 3'd3) next_state = ST_IFFTSTAGE1_8192;       \n"; 
cenctrl <<"                                else if(Point_sel_in == 3'd2) next_state = ST_IFFTSTAGE1_16384;      \n"; 
cenctrl <<"                                else if(Point_sel_in == 3'd1) next_state = ST_IFFTSTAGE1_32768;      \n"; 
cenctrl <<"                                else next_state = ST_IFFTSTAGE1_65536;                               \n"; 
cenctrl <<"                             end                                                                     \n"; 
cenctrl <<"           ST_IFFTSTAGE1_4096: begin                                                                 \n"; 
cenctrl <<"                             if((data_cnt_in==DCNT_V4_4096)||(data_cnt_in==DCNT_V5_4096)) next_state = WR_IFFTFIND ;\n"; 
cenctrl <<"                             else if(data_cnt_in < DCNT_V1_4096) next_state = ST_IFFTSTAGE1_4096 ;   \n";     
cenctrl <<"                             else next_state = SET_OP_4096; //modify 2020/02/24                      \n";    
cenctrl <<"                          end                                                                        \n";
cenctrl <<"           ST_IFFTSTAGE1_8192: begin                                                                 \n"; 
cenctrl <<"                             if((data_cnt_in==DCNT_V4_8192)||(data_cnt_in==DCNT_V5_8192)||(data_cnt_in==DCNT_V6_8192)) next_state = WR_IFFTFIND ;\n"; 
cenctrl <<"                             else if(data_cnt_in < DCNT_V1_8192) next_state = ST_IFFTSTAGE1_8192 ;   \n";     
cenctrl <<"                             else next_state = SET_OP_8192; //modify 2020/02/24                      \n";    
cenctrl <<"                          end                                                                        \n";
cenctrl <<"           ST_IFFTSTAGE1_16384: begin                                                                 \n"; 
cenctrl <<"                             if((data_cnt_in==DCNT_V4_16384)||(data_cnt_in==DCNT_V5_16384)||(data_cnt_in==DCNT_V6_16384)) next_state = WR_IFFTFIND ;\n"; 
cenctrl <<"                             else if(data_cnt_in < DCNT_V1_16384) next_state = ST_IFFTSTAGE1_16384 ;   \n";     
cenctrl <<"                             else next_state = SET_OP_16384; //modify 2020/02/24                      \n";    
cenctrl <<"                          end  \n";
cenctrl <<"           ST_IFFTSTAGE1_32768: begin                                                                 \n"; 
cenctrl <<"                             if((data_cnt_in==DCNT_V4_32768)||(data_cnt_in==DCNT_V5_32768)||(data_cnt_in==DCNT_V6_32768)) next_state = WR_IFFTFIND ;\n"; 
cenctrl <<"                             else if(data_cnt_in < DCNT_V1_32768) next_state = ST_IFFTSTAGE1_32768 ;   \n";     
cenctrl <<"                             else next_state = SET_OP_32768; //modify 2020/02/24                      \n";    
cenctrl <<"                          end  \n";
cenctrl <<"           ST_IFFTSTAGE1_65536: begin                                                                 \n"; 
cenctrl <<"                             if((data_cnt_in==DCNT_V4_65536)||(data_cnt_in==DCNT_V5_65536)||(data_cnt_in==DCNT_V6_65536)) next_state = WR_IFFTFIND ;\n"; 
cenctrl <<"                             else if(data_cnt_in < DCNT_V1_65536) next_state = ST_IFFTSTAGE1_65536 ;   \n";     
cenctrl <<"                             else next_state = SET_OP_65536; //modify 2020/02/24                      \n";    
cenctrl <<"                          end  \n";
cenctrl <<" 			// Write 48 IFFT data to SRAM in stage1                                                 \n";  
cenctrl <<"           WR_IFFTFIND: begin                                                                        \n";  
cenctrl <<"                           if(Cnt1_reg < 6'd47) next_state = WR_IFFTFIND ; //modify                   \n"; 
cenctrl <<"                           else next_state = LD_IFFTSTAGE2_ST ;                                      \n"; 
cenctrl <<"                        end                                                                          \n";  
cenctrl <<"           // Stage2 and other Stages, just Read IFFT data, Counter for computing 48 butterfly units  \n"; 
cenctrl <<"           LD_IFFTSTAGE2_ST: begin                                                                    \n"; 
cenctrl <<"                                if(WenCnt_reg < 6'd47) next_state = LD_IFFTSTAGE2_ST ;                 \n"; 
cenctrl <<"                                else if(Point_sel_in == 3'd4) next_state = ST_IFFTSTAGE1_4096 ;       \n";
cenctrl <<"                                else if(Point_sel_in == 3'd3) next_state = ST_IFFTSTAGE1_8192;       \n"; 
cenctrl <<"                                else if(Point_sel_in == 3'd2) next_state = ST_IFFTSTAGE1_16384;      \n"; 
cenctrl <<"                                else if(Point_sel_in == 3'd1) next_state = ST_IFFTSTAGE1_32768;      \n"; 
cenctrl <<"                                else next_state = ST_IFFTSTAGE1_65536;                               \n"; 
cenctrl <<"                             end                                                                      \n"; 
cenctrl <<"           SET_OP_4096:begin                                                                          \n"; 
cenctrl <<"                    if(data_cnt_in < DCNT_V2_4096) next_state = SET_OP_4096 ;                         \n"; 
cenctrl <<"                    else next_state = SET_OPF ;                                                       \n"; 
cenctrl <<"                 end                                                                                  \n";
cenctrl <<"           SET_OP_8192:begin                                                                          \n"; 
cenctrl <<"                    if(data_cnt_in < DCNT_V2_8192) next_state = SET_OP_8192 ;                         \n"; 
cenctrl <<"                    else next_state = SET_OPF ;                                                       \n"; 
cenctrl <<"                 end                                                                                  \n";
cenctrl <<"           SET_OP_16384:begin                                                                          \n"; 
cenctrl <<"                    if(data_cnt_in < DCNT_V2_16384) next_state = SET_OP_16384 ;                       \n"; 
cenctrl <<"                    else next_state = SET_OPF ;                                                       \n"; 
cenctrl <<"                 end                                                                                  \n";
cenctrl <<"           SET_OP_32768:begin                                                                          \n"; 
cenctrl <<"                    if(data_cnt_in < DCNT_V2_32768) next_state = SET_OP_32768 ;                       \n"; 
cenctrl <<"                    else next_state = SET_OPF ;                                                       \n"; 
cenctrl <<"                 end                                                                                  \n";
cenctrl <<"           SET_OP_65536:begin                                                                          \n"; 
cenctrl <<"                    if(data_cnt_in < DCNT_V2_65536) next_state = SET_OP_65536 ;                       \n"; 
cenctrl <<"                    else next_state = SET_OPF ;                                                       \n"; 
cenctrl <<"                 end                                                                                  \n";
cenctrl <<"           SET_OPF:begin                                                                              \n"; 
cenctrl <<"                        next_state = INI;  //modify 2020/02/24                                        \n"; 
cenctrl <<"                     end			                                                                     \n"; 
cenctrl <<" 		//                                                                                           \n"; 
cenctrl <<"       default: next_state = INI ;  		                                                             \n"; 
cenctrl <<"       endcase                                                                                        \n"; 
cenctrl <<"   end                  \n"; 
cenctrl <<"\n"; 
cenctrl << "   always @(posedge clk or negedge rst_n) begin                              \n";
cenctrl << "       if(~rst_n) begin                                                      \n";
cenctrl << "           state <= INI ;                                                    \n";
cenctrl << "           ExtMA_out <= A_ZERO ;                                             \n";
cenctrl << "           WenCnt_reg <= 6'd0 ;                                              \n";
cenctrl << "           m2_sel_out <= 1'b0 ; //modify 2020/02/24                          \n";
cenctrl << "           Cnt1_reg <= 6'd0 ;                                                \n";
cenctrl << "       end                                                                   \n";
cenctrl << "       else begin                                                            \n";
cenctrl << "           state <= next_state ;                                             \n";
cenctrl << "           ExtMA_out <= ExtMA_wire ;                                         \n";
cenctrl << "           WenCnt_reg <= WenCnt_wire ;                                       \n";
cenctrl << "           m2_sel_out <= m2_sel_wire ; //modify 2020/02/24                   \n";
cenctrl << "           Cnt1_reg <= Cnt1_wire ;                                           \n";
cenctrl << "       end                                                                   \n";
cenctrl << "   end                                                                       \n";
cenctrl << "                                                                             \n";
cenctrl << "                                                                             \n";
cenctrl << " endmodule                                                                   \n";
	 
     cenctrl.close();
}	 

void configurable_BFFT::CSM_4096(std::string string_in){
	 std::ofstream csm_4096;
     std::string        string_buf = "/CSM_4096.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 csm_4096.open(ss.str());
csm_4096 <<"`timescale 1ns/1ps                   \n";
csm_4096 <<"//CenCtrl_State_Machine              \n";
csm_4096 <<"module CSM_4096(ExtValid_in,         \n";
csm_4096 <<"                ExtMA_in,            \n";
csm_4096 <<"                WenCnt_in,           \n";
csm_4096 <<"                Cnt1_in,             \n";
csm_4096 <<"                data_cnt_in,         \n";
csm_4096 <<"                state,               \n";
csm_4096 <<"                next_state           \n";
csm_4096 <<");                                   \n";
csm_4096 <<"                                     \n";
csm_4096 <<" parameter A_WIDTH  = 11 ;           \n";
csm_4096 <<" parameter DC_WIDTH = 15 ;           \n";
csm_4096 <<" parameter A_ZERO   = 11'h0;         \n";
csm_4096 <<"                                     \n";
csm_4096 <<" parameter S_WIDTH   = 4 ;           \n";
csm_4096 <<" //INITIAL                           \n";
csm_4096 <<" parameter INI              = 4'd0 ; \n";
csm_4096 <<" parameter LD_EXTD          = 4'd1 ; \n";
csm_4096 <<" parameter LD_EXTDF         = 4'd2 ; \n";
csm_4096 <<" parameter LD_STAGE1_ST     = 4'd3 ; \n";
csm_4096 <<" parameter ST_STAGE1        = 4'd4 ; \n";
csm_4096 <<" parameter WR_FIND          = 4'd5 ; \n";
csm_4096 <<" parameter LD_STAGE2_ST     = 4'd6 ; \n";
csm_4096 <<" parameter SET_IFFT         = 4'd7 ; \n";
csm_4096 <<" parameter LD_IFFTSTAGE1_ST = 4'd8 ; \n";
csm_4096 <<" parameter ST_IFFTSTAGE1    = 4'd9 ; \n";
csm_4096 <<" parameter WR_IFFTFIND      = 4'd10; \n";
csm_4096 <<" parameter LD_IFFTSTAGE2_ST = 4'd11; \n";
csm_4096 <<" parameter SET_OP           = 4'd12; \n";
csm_4096 <<" parameter SET_OPF          = 4'd13; \n";
csm_4096 <<"                                     \n";
csm_4096 <<"                                     \n";
csm_4096 <<" parameter EXTMA_V1 = 11'd127;       \n";
csm_4096 <<" parameter DCNT_V1  = 15'd815;       \n";
csm_4096 <<" parameter DCNT_V2  = 15'd132;       \n";
csm_4096 <<" parameter DCNT_V3  = 15'd5;         \n";
csm_4096 <<" parameter DCNT_V4  = 15'd255;       \n";
csm_4096 <<" parameter DCNT_V5  = 15'd511;       \n";
csm_4096 <<"                                     \n";
csm_4096 <<" output [S_WIDTH-1:0]  next_state;   \n";
csm_4096 <<"                                     \n";
csm_4096 <<" reg    [S_WIDTH-1:0]  next_state;   \n";
csm_4096 <<"                                     \n";
csm_4096 <<" input                 ExtValid_in;  \n";
csm_4096 <<" input [A_WIDTH-1:0]   ExtMA_in;     \n";
csm_4096 <<" input [5:0]           WenCnt_in;    \n";
csm_4096 <<" input [5:0]           Cnt1_in;      \n";
csm_4096 <<" input [DC_WIDTH-1:0]  data_cnt_in;  \n";
csm_4096 <<" input [S_WIDTH-1:0]   state;        \n";
csm_4096 <<"                                     \n";
csm_4096 <<"                                     \n";
csm_4096 <<"                                     \n";
csm_4096 <<"   always @(*) begin                 \n";                                                                                                                             
csm_4096 <<"       case(state)                   \n";                                                                                                                             
csm_4096 <<"           INI: begin                \n";                                                                                                                             
csm_4096 <<"                   if(ExtValid_in) next_state = LD_EXTD ; \n"; 
csm_4096 <<"                   else next_state = INI ;   \n";                                                                                                                      
csm_4096 <<"               end                           \n";                                                                                                                     
csm_4096 <<"           // LOAD  Extdata to SRAM	      \n";                                                                                                                      
csm_4096 <<"           LD_EXTD: begin                    \n";                                                                                                                      
csm_4096 <<"                       if(ExtMA_in < EXTMA_V1) next_state = LD_EXTD ;\n"; 
csm_4096 <<"                       else next_state = LD_EXTDF ;                  \n";                                                                                              
csm_4096 <<"                    end                                              \n";                                                                                              
csm_4096 <<"           // LOAD  Final Extdata to SRAM	and  Compute dataCount    \n";                                                                                              
csm_4096 <<"           LD_EXTDF: begin                                           \n";                                                                                              
csm_4096 <<"                        next_state = LD_STAGE1_ST ;                  \n";                                                                                               
csm_4096 <<"                     end                                             \n";                                                                                              
csm_4096 <<"           // Compute FFT                                            \n";                                                                                              
csm_4096 <<"           LD_STAGE1_ST: begin                                       \n";                                                                                              
csm_4096 <<"                           if(WenCnt_in < 6'd46) next_state = LD_STAGE1_ST ;\n";                                                                                      
csm_4096 <<"                           else next_state = ST_STAGE1 ;                    \n";                                                                                       
csm_4096 <<"                        end                                                 \n";                                                                                      
csm_4096 <<"           ST_STAGE1: begin                                                 \n";                                                                                       
csm_4096 <<"                         if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)) next_state = WR_FIND ;\n"; 
csm_4096 <<"                         else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ; \n";                       
csm_4096 <<"                         else next_state = SET_IFFT ; \n";                                                  
csm_4096 <<"                      end                             \n";                                                
csm_4096 <<"             // Write 48 FFT data to SRAM in stage1   \n";                                               
csm_4096 <<"           WR_FIND: begin                             \n";                                                
csm_4096 <<"                       if(Cnt1_in < 6'd47) next_state = WR_FIND ; //modify       \n";                    
csm_4096 <<"                       else next_state = LD_STAGE2_ST ;      \n";                                         
csm_4096 <<"                    end                                      \n";                                         
csm_4096 <<" 			// Stage2 and other Stages, just Read FFT data, Counter for computing 48 butterfly units  \n"; 
csm_4096 <<"           LD_STAGE2_ST: begin                                                                       \n"; 
csm_4096 <<"                            if(WenCnt_in < 6'd47) next_state = LD_STAGE2_ST ;                        \n"; 
csm_4096 <<"                            else next_state = ST_STAGE1 ;                                            \n"; 
csm_4096 <<"                         end                                                                         \n"; 
csm_4096 <<"           // Compute dataCount		                                                              \n"; 
csm_4096 <<"           SET_IFFT: begin                                                                           \n"; 
csm_4096 <<"                        next_state = LD_IFFTSTAGE1_ST ;                                              \n"; 
csm_4096 <<"                     end                                                                             \n"; 
csm_4096 <<"           // Compute IFFT		                                                                      \n"; 
csm_4096 <<"           LD_IFFTSTAGE1_ST: begin                                                                   \n"; 
csm_4096 <<"                                if(WenCnt_in < 6'd46) next_state = LD_IFFTSTAGE1_ST ;                \n"; 
csm_4096 <<"                                else next_state = ST_IFFTSTAGE1 ;                                    \n"; 
csm_4096 <<"                             end                                                                     \n"; 
csm_4096 <<"           ST_IFFTSTAGE1: begin                                                                      \n"; 
csm_4096 <<"                             if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)) next_state = WR_IFFTFIND ;\n"; 
csm_4096 <<"                             else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;             \n";     
csm_4096 <<"                             //else next_state = SET_RC ;                                            \n";    
csm_4096 <<"                             else next_state = SET_OP; //modify 2020/02/24                           \n";    
csm_4096 <<"                          end                                                                        \n";  
csm_4096 <<" 			// Write 48 IFFT data to SRAM in stage1                                                   \n";  
csm_4096 <<"           WR_IFFTFIND: begin                                                                        \n";  
csm_4096 <<"                           if(Cnt1_in < 6'd47) next_state = WR_IFFTFIND ; //modify                   \n"; 
csm_4096 <<"                           else next_state = LD_IFFTSTAGE2_ST ;                                      \n"; 
csm_4096 <<"                        end                                                                          \n";  
csm_4096 <<"           // Stage2 and other Stages, just Read IFFT data, Counter for computing 48 butterfly units  \n"; 
csm_4096 <<"           LD_IFFTSTAGE2_ST: begin                                                                    \n"; 
csm_4096 <<"                                if(WenCnt_in < 6'd47) next_state = LD_IFFTSTAGE2_ST ;                 \n"; 
csm_4096 <<"                                else next_state = ST_IFFTSTAGE1 ;                                     \n";  
csm_4096 <<"                             end                                                                      \n"; 
csm_4096 <<"           SET_OP:begin                                                                               \n"; 
csm_4096 <<"                    if(data_cnt_in < DCNT_V2) next_state = SET_OP ;                                   \n"; 
csm_4096 <<"                    else next_state = SET_OPF ;                                                       \n"; 
csm_4096 <<"                 end                                                                                  \n"; 
csm_4096 <<"           SET_OPF:begin                                                                              \n"; 
csm_4096 <<"                        next_state = INI;  //modify 2020/02/24                                        \n"; 
csm_4096 <<"                     end			                                                                   \n"; 
csm_4096 <<" 		//                                                                                             \n"; 
csm_4096 <<"       default: next_state = INI ;  		                                                           \n"; 
csm_4096 <<"       endcase                                                                                        \n"; 
csm_4096 <<"   end                  \n"; 
csm_4096 <<"\n"; 
csm_4096 <<"endmodule\n"; 	 
     csm_4096.close();
}	 
void configurable_BFFT::CSM_8192(std::string string_in){
	 std::ofstream csm_8192;
     std::string        string_buf = "/CSM_8192.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 csm_8192.open(ss.str());
csm_8192 << "`timescale 1ns/1ps                            \n";
csm_8192 << "//CenCtrl_State_Machine_8192                  \n";
csm_8192 << "module CSM_8192(ExtValid_in,                  \n";
csm_8192 << "                ExtMA_in,                     \n";
csm_8192 << "			    WenCnt_in,                     \n";
csm_8192 << "			    Cnt1_in,                       \n";
csm_8192 << "			    data_cnt_in,                   \n";
csm_8192 << "                state,                        \n";
csm_8192 << "                next_state                    \n";
csm_8192 << ");                                            \n";
csm_8192 << "                                              \n";
csm_8192 << " parameter A_WIDTH  = 11 ;                    \n";
csm_8192 << " parameter DC_WIDTH = 15 ;                    \n";
csm_8192 << " parameter A_ZERO   = 11'h0;                  \n";
csm_8192 << "                                              \n";
csm_8192 << " parameter S_WIDTH   = 4 ;                    \n";
csm_8192 << " //INITIAL                                    \n";
csm_8192 << " parameter INI              = 4'd0 ;          \n";
csm_8192 << " parameter LD_EXTD          = 4'd1 ;          \n";
csm_8192 << " parameter LD_EXTDF         = 4'd2 ;          \n";
csm_8192 << " parameter LD_STAGE1_ST     = 4'd3 ;          \n";
csm_8192 << " parameter ST_STAGE1        = 4'd4 ;          \n";
csm_8192 << " parameter WR_FIND          = 4'd5 ;          \n";
csm_8192 << " parameter LD_STAGE2_ST     = 4'd6 ;          \n";
csm_8192 << " parameter SET_IFFT         = 4'd7 ;          \n";
csm_8192 << " parameter LD_IFFTSTAGE1_ST = 4'd8 ;          \n";
csm_8192 << " parameter ST_IFFTSTAGE1    = 4'd9 ;          \n";
csm_8192 << " parameter WR_IFFTFIND      = 4'd10;          \n";
csm_8192 << " parameter LD_IFFTSTAGE2_ST = 4'd11;          \n";
csm_8192 << " parameter SET_OP           = 4'd12;          \n";
csm_8192 << " parameter SET_OPF          = 4'd13;          \n";
csm_8192 << "                                              \n";
csm_8192 << "                                              \n";
csm_8192 << " parameter EXTMA_V1 = 11'd255;                \n";
csm_8192 << " parameter DCNT_V1  = 15'd2095;               \n";
csm_8192 << " parameter DCNT_V2  = 15'd260;                \n";
csm_8192 << " parameter DCNT_V3  = 15'd5;                  \n";
csm_8192 << " parameter DCNT_V4  = 15'd511;                \n";
csm_8192 << " parameter DCNT_V5  = 15'd1023;               \n";
csm_8192 << " parameter DCNT_V6  = 15'd1535;               \n";
csm_8192 << "                                              \n";
csm_8192 << " output [S_WIDTH-1:0]  next_state;            \n";
csm_8192 << "                                              \n";
csm_8192 << " reg    [S_WIDTH-1:0]  next_state;            \n";
csm_8192 << "                                              \n";
csm_8192 << " input                 ExtValid_in;           \n";
csm_8192 << " input [A_WIDTH-1:0]   ExtMA_in;              \n";
csm_8192 << " input [5:0]           WenCnt_in;             \n";
csm_8192 << " input [5:0]           Cnt1_in;               \n";
csm_8192 << " input [DC_WIDTH-1:0]  data_cnt_in;           \n";
csm_8192 << " input [S_WIDTH-1:0]   state;                 \n";
csm_8192 << "                                              \n";
csm_8192 << "                                              \n";
csm_8192 << "                                              \n";
csm_8192 << "   always @(*) begin                          \n";                                                                                                                    
csm_8192 << "       case(state)                            \n";                                                                                                                    
csm_8192 << "           INI: begin                         \n";                                                                                                                    
csm_8192 << "                   if(ExtValid_in) next_state = LD_EXTD ;                             \n";
csm_8192 << "                   else next_state = INI ;                                            \n";                                                                            
csm_8192 << "               end                                                                    \n";                                                                           
csm_8192 << "           // LOAD  Extdata to SRAM	                                               \n";                                                                            
csm_8192 << "           LD_EXTD: begin                                                             \n";                                                                            
csm_8192 << "                       if(ExtMA_in < EXTMA_V1) next_state = LD_EXTD ;                 \n";                                                                           
csm_8192 << "                       else next_state = LD_EXTDF ;                                   \n";                                                                            
csm_8192 << "                    end                                                               \n";                                                                            
csm_8192 << "           // LOAD  Final Extdata to SRAM	and  Compute dataCount                     \n";                                                                            
csm_8192 << "           LD_EXTDF: begin                                                            \n";                                                                            
csm_8192 << "                        next_state = LD_STAGE1_ST ;                                   \n";                                                                             
csm_8192 << "                     end                                                              \n";                                                                            
csm_8192 << "           // Compute FFT                                                             \n";                                                                            
csm_8192 << "           LD_STAGE1_ST: begin                                                        \n";                                                                            
csm_8192 << "                           if(WenCnt_in < 6'd46) next_state = LD_STAGE1_ST ;          \n";                                                                           
csm_8192 << "                           else next_state = ST_STAGE1 ;                              \n";                                                                            
csm_8192 << "                        end                                                           \n";                                                                           
csm_8192 << "           ST_STAGE1: begin                                                           \n";                                                                            
csm_8192 << "                         if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_FIND ;\n";
csm_8192 << "                         else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ;   \n";                    
csm_8192 << "                         else next_state = SET_IFFT ;                              \n";                    
csm_8192 << "                      end                                                          \n";                  
csm_8192 << "             // Write 48 FFT data to SRAM in stage1                                \n";                 
csm_8192 << "           WR_FIND: begin                                                          \n";                 
csm_8192 << "                       if(Cnt1_in < 6'd47) next_state = WR_FIND ; //modify         \n";                
csm_8192 << "                       else next_state = LD_STAGE2_ST ;                            \n";                 
csm_8192 << "                    end                                                            \n";                
csm_8192 << " 			// Stage2 and other Stages, just Read FFT data, Counter for computing 48 butterfly units \n"; 
csm_8192 << "           LD_STAGE2_ST: begin                                                     \n";                  
csm_8192 << "                            if(WenCnt_in < 6'd47) next_state = LD_STAGE2_ST ;      \n";                  
csm_8192 << "                            else next_state = ST_STAGE1 ;                          \n";                   
csm_8192 << "                         end                                                       \n";                  
csm_8192 << "           // Compute dataCount		                                            \n";                  
csm_8192 << "           SET_IFFT: begin                                                         \n";                  
csm_8192 << "                        next_state = LD_IFFTSTAGE1_ST ;                            \n";               
csm_8192 << "                     end                                                           \n";                  
csm_8192 << "           // Compute IFFT		                                                    \n";                  
csm_8192 << "           LD_IFFTSTAGE1_ST: begin                                                 \n";                  
csm_8192 << "                                if(WenCnt_in < 6'd46) next_state = LD_IFFTSTAGE1_ST ;\n";                
csm_8192 << "                                else next_state = ST_IFFTSTAGE1 ;                    \n";                 
csm_8192 << "                             end                                                     \n";                
csm_8192 << "           ST_IFFTSTAGE1: begin\n";
csm_8192 << "                             if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_IFFTFIND ;\n";
csm_8192 << "                             else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;              \n";  
csm_8192 << "                             //else next_state = SET_RC ;                                             \n";  
csm_8192 << "                             else next_state = SET_OP; //modify 2020/02/24                            \n";  
csm_8192 << "                          end                                                                         \n";
csm_8192 << " 			// Write 48 IFFT data to SRAM in stage1                                                    \n";
csm_8192 << "           WR_IFFTFIND: begin                                                                         \n";
csm_8192 << "                           if(Cnt1_in < 6'd47) next_state = WR_IFFTFIND ; //modify                    \n";
csm_8192 << "                           else next_state = LD_IFFTSTAGE2_ST ;                                       \n";
csm_8192 << "                        end                                                                           \n";
csm_8192 << "           // Stage2 and other Stages, just Read IFFT data, Counter for computing 48 butterfly units  \n";
csm_8192 << "           LD_IFFTSTAGE2_ST: begin                                                                    \n";
csm_8192 << "                                if(WenCnt_in < 6'd47) next_state = LD_IFFTSTAGE2_ST ;                 \n";
csm_8192 << "                                else next_state = ST_IFFTSTAGE1 ;                                     \n"; 
csm_8192 << "                             end                                                                      \n";
csm_8192 << "           SET_OP:begin                                                                               \n";
csm_8192 << "                    if(data_cnt_in < DCNT_V2) next_state = SET_OP ;                                   \n";
csm_8192 << "                    else next_state = SET_OPF ;                                                       \n";
csm_8192 << "                 end                                                                                  \n";
csm_8192 << "           SET_OPF:begin                                                                              \n";
csm_8192 << "                        next_state = INI;  //modify 2020/02/24                                        \n";
csm_8192 << "                     end			                                                                   \n";
csm_8192 << " 		//                                                                                             \n";
csm_8192 << "       default: next_state = INI ;  		                                                           \n";
csm_8192 << "       endcase                                                                                        \n";
csm_8192 << "   end                                                                                                \n";
csm_8192 << "                                                                                                      \n";
csm_8192 << "endmodule                                                                                             \n";
     csm_8192.close();
}	 
void configurable_BFFT::CSM_16384(std::string string_in){
	 std::ofstream csm_16384;
     std::string        string_buf = "/CSM_16384.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 csm_16384.open(ss.str());
csm_16384 << "`timescale 1ns/1ps                                \n";
csm_16384 << "//CenCtrl_State_Machine_16384                     \n";
csm_16384 << "module CSM_16384(ExtValid_in,                     \n";
csm_16384 << "                 ExtMA_in,                        \n";
csm_16384 << "                 WenCnt_in,                       \n";
csm_16384 << "                 Cnt1_in,                         \n";
csm_16384 << "                 data_cnt_in,                     \n";
csm_16384 << "                 state,                           \n";
csm_16384 << "                 next_state                       \n";
csm_16384 << ");                                                \n";
csm_16384 << "                                                  \n";
csm_16384 << " parameter A_WIDTH  = 11 ;                        \n";
csm_16384 << " parameter DC_WIDTH = 15 ;                        \n";
csm_16384 << " parameter A_ZERO   = 11'h0;                      \n";
csm_16384 << "                                                  \n";
csm_16384 << " parameter S_WIDTH   = 4 ;                        \n";
csm_16384 << " //INITIAL                                        \n";
csm_16384 << " parameter INI              = 4'd0 ;              \n";
csm_16384 << " parameter LD_EXTD          = 4'd1 ;              \n";
csm_16384 << " parameter LD_EXTDF         = 4'd2 ;              \n";
csm_16384 << " parameter LD_STAGE1_ST     = 4'd3 ;              \n";
csm_16384 << " parameter ST_STAGE1        = 4'd4 ;              \n";
csm_16384 << " parameter WR_FIND          = 4'd5 ;              \n";
csm_16384 << " parameter LD_STAGE2_ST     = 4'd6 ;              \n";
csm_16384 << " parameter SET_IFFT         = 4'd7 ;              \n";
csm_16384 << " parameter LD_IFFTSTAGE1_ST = 4'd8 ;              \n";
csm_16384 << " parameter ST_IFFTSTAGE1    = 4'd9 ;              \n";
csm_16384 << " parameter WR_IFFTFIND      = 4'd10;              \n";
csm_16384 << " parameter LD_IFFTSTAGE2_ST = 4'd11;              \n";
csm_16384 << " parameter SET_OP           = 4'd12;              \n";
csm_16384 << " parameter SET_OPF          = 4'd13;              \n";
csm_16384 << "                                                  \n";
csm_16384 << "                                                  \n";
csm_16384 << " parameter EXTMA_V1 = 11'd511;                    \n";
csm_16384 << " parameter DCNT_V1  = 15'd4143;                   \n";
csm_16384 << " parameter DCNT_V2  = 15'd516;                    \n";
csm_16384 << " parameter DCNT_V3  = 15'd5;                      \n";
csm_16384 << " parameter DCNT_V4  = 15'd1023;                   \n";
csm_16384 << " parameter DCNT_V5  = 15'd2047;                   \n";
csm_16384 << " parameter DCNT_V6  = 15'd3071;                   \n";
csm_16384 << "                                                  \n";
csm_16384 << " output [S_WIDTH-1:0]  next_state;                \n";
csm_16384 << "                                                  \n";
csm_16384 << " reg    [S_WIDTH-1:0]  next_state;                \n";
csm_16384 << "                                                  \n";
csm_16384 << " input                 ExtValid_in;               \n";
csm_16384 << " input [A_WIDTH-1:0]   ExtMA_in;                  \n";
csm_16384 << " input [5:0]           WenCnt_in;                 \n";
csm_16384 << " input [5:0]           Cnt1_in;                   \n";
csm_16384 << " input [DC_WIDTH-1:0]  data_cnt_in;               \n";
csm_16384 << " input [S_WIDTH-1:0]   state;                     \n";
csm_16384 << "                                                  \n";
csm_16384 << "                                                  \n";
csm_16384 << "                                                  \n";
csm_16384 << "   always @(*) begin                              \n";                                                                                                                
csm_16384 << "       case(state)                                \n";                                                                                                                
csm_16384 << "           INI: begin                             \n";                                                                                                                
csm_16384 << "                   if(ExtValid_in) next_state = LD_EXTD ; \n";
csm_16384 << "                   else next_state = INI ;                \n";                                                                                                        
csm_16384 << "               end                                        \n";                                                                                                       
csm_16384 << "           // LOAD  Extdata to SRAM	                    \n";                                                                                                       
csm_16384 << "           LD_EXTD: begin                                 \n";                                                                                                        
csm_16384 << "                       if(ExtMA_in < EXTMA_V1) next_state = LD_EXTD ;\n";
csm_16384 << "                       else next_state = LD_EXTDF ;                  \n";                                                                                             
csm_16384 << "                    end                                              \n";                                                                                             
csm_16384 << "           // LOAD  Final Extdata to SRAM	and  Compute dataCount     \n";                                                                                            
csm_16384 << "           LD_EXTDF: begin                                           \n";                                                                                             
csm_16384 << "                        next_state = LD_STAGE1_ST ;                  \n";                                                                                              
csm_16384 << "                     end                                             \n";                                                                                             
csm_16384 << "           // Compute FFT                                            \n";                                                                                             
csm_16384 << "           LD_STAGE1_ST: begin                                       \n";                                                                                             
csm_16384 << "                           if(WenCnt_in < 6'd46) next_state = LD_STAGE1_ST ; \n";                                                                                    
csm_16384 << "                           else next_state = ST_STAGE1 ;                     \n";                                                                                     
csm_16384 << "                        end                                                  \n";                                                                                    
csm_16384 << "           ST_STAGE1: begin                                                  \n";                                                                                     
csm_16384 << "                         if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_FIND ;\n"; 
csm_16384 << "                         else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ;                       \n"; 
csm_16384 << "                         else next_state = SET_IFFT ;                                                  \n";
csm_16384 << "                      end                                                                              \n";
csm_16384 << "             // Write 48 FFT data to SRAM in stage1                                                    \n";
csm_16384 << "           WR_FIND: begin                                                                              \n";
csm_16384 << "                       if(Cnt1_in < 6'd47) next_state = WR_FIND ; //modify                             \n";
csm_16384 << "                       else next_state = LD_STAGE2_ST ;                                                \n";
csm_16384 << "                    end                                                                                \n";
csm_16384 << " 			// Stage2 and other Stages, just Read FFT data, Counter for computing 48 butterfly units     \n";
csm_16384 << "           LD_STAGE2_ST: begin                                                                         \n";
csm_16384 << "                            if(WenCnt_in < 6'd47) next_state = LD_STAGE2_ST ;                          \n";
csm_16384 << "                            else next_state = ST_STAGE1 ;                                              \n";
csm_16384 << "                         end                                                                           \n";
csm_16384 << "           // Compute dataCount		                                                                 \n";
csm_16384 << "           SET_IFFT: begin                                                                             \n";
csm_16384 << "                        next_state = LD_IFFTSTAGE1_ST ;                                                \n";
csm_16384 << "                     end                                                                               \n";
csm_16384 << "           // Compute IFFT		                                                                     \n"; 
csm_16384 << "           LD_IFFTSTAGE1_ST: begin                                                                     \n";
csm_16384 << "                                if(WenCnt_in < 6'd46) next_state = LD_IFFTSTAGE1_ST ;                  \n";
csm_16384 << "                                else next_state = ST_IFFTSTAGE1 ;                                      \n";
csm_16384 << "                             end                                                                       \n";
csm_16384 << "           ST_IFFTSTAGE1: begin                                                                        \n";
csm_16384 << "                             if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_IFFTFIND ;\n"; 
csm_16384 << "                             else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;               \n";  
csm_16384 << "                             //else next_state = SET_RC ;                                              \n";  
csm_16384 << "                             else next_state = SET_OP; //modify 2020/02/24                             \n";  
csm_16384 << "                          end                                                                          \n"; 
csm_16384 << " 			// Write 48 IFFT data to SRAM in stage1                                                      \n"; 
csm_16384 << "           WR_IFFTFIND: begin                                                                          \n"; 
csm_16384 << "                           if(Cnt1_in < 6'd47) next_state = WR_IFFTFIND ; //modify                     \n"; 
csm_16384 << "                           else next_state = LD_IFFTSTAGE2_ST ;                                        \n"; 
csm_16384 << "                        end                                                                            \n"; 
csm_16384 << "           // Stage2 and other Stages, just Read IFFT data, Counter for computing 48 butterfly units   \n"; 
csm_16384 << "           LD_IFFTSTAGE2_ST: begin                                                                     \n";
csm_16384 << "                                if(WenCnt_in < 6'd47) next_state = LD_IFFTSTAGE2_ST ;                  \n";
csm_16384 << "                                else next_state = ST_IFFTSTAGE1 ;                                      \n"; 
csm_16384 << "                             end                                                                       \n";
csm_16384 << "           SET_OP:begin                                                                                \n";
csm_16384 << "                    if(data_cnt_in < DCNT_V2) next_state = SET_OP ;                                    \n";
csm_16384 << "                    else next_state = SET_OPF ;                                                        \n";
csm_16384 << "                 end                                                                                   \n";
csm_16384 << "           SET_OPF:begin                                                                               \n";
csm_16384 << "                        next_state = INI;  //modify 2020/02/24                                         \n";
csm_16384 << "                     end			                                                                     \n";
csm_16384 << " 		//                                                                                               \n";
csm_16384 << "       default: next_state = INI ;  		                                                             \n";
csm_16384 << "       endcase                                                                                         \n";
csm_16384 << "   end                                                                                                 \n";
csm_16384 << "                                                                                                       \n";
csm_16384 << "endmodule                                                                                              \n";	 
     csm_16384.close();
}	
void configurable_BFFT::CSM_32768(std::string string_in){
	 std::ofstream csm_32768;
     std::string        string_buf = "/CSM_32768.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 csm_32768.open(ss.str());
csm_32768 << "`timescale 1ns/1ps                                        \n";
csm_32768 << "//CenCtrl_State_Machine_32768                             \n";
csm_32768 << "module CSM_32768(ExtValid_in,                             \n";
csm_32768 << "                 ExtMA_in,                                \n";
csm_32768 << "				 WenCnt_in,                                 \n";
csm_32768 << "				 Cnt1_in,                                   \n";
csm_32768 << "				 data_cnt_in,                               \n";
csm_32768 << "                 state,                                   \n";
csm_32768 << "                 next_state                               \n";
csm_32768 << ");                                                        \n";
csm_32768 << "                                                          \n";
csm_32768 << " parameter A_WIDTH  = 11 ;                                \n";
csm_32768 << " parameter DC_WIDTH = 15 ;                                \n";
csm_32768 << " parameter A_ZERO   = 11'h0;                              \n";
csm_32768 << "                                                          \n";
csm_32768 << " parameter S_WIDTH   = 4 ;                                \n";
csm_32768 << " //INITIAL                                                \n";
csm_32768 << " parameter INI              = 4'd0 ;                      \n";
csm_32768 << " parameter LD_EXTD          = 4'd1 ;                      \n";
csm_32768 << " parameter LD_EXTDF         = 4'd2 ;                      \n";
csm_32768 << " parameter LD_STAGE1_ST     = 4'd3 ;                      \n";
csm_32768 << " parameter ST_STAGE1        = 4'd4 ;                      \n";
csm_32768 << " parameter WR_FIND          = 4'd5 ;                      \n";
csm_32768 << " parameter LD_STAGE2_ST     = 4'd6 ;                      \n";
csm_32768 << " parameter SET_IFFT         = 4'd7 ;                      \n";
csm_32768 << " parameter LD_IFFTSTAGE1_ST = 4'd8 ;                      \n";
csm_32768 << " parameter ST_IFFTSTAGE1    = 4'd9 ;                      \n";
csm_32768 << " parameter WR_IFFTFIND      = 4'd10;                      \n";
csm_32768 << " parameter LD_IFFTSTAGE2_ST = 4'd11;                      \n";
csm_32768 << " parameter SET_OP           = 4'd12;                      \n";
csm_32768 << " parameter SET_OPF          = 4'd13;                      \n";
csm_32768 << "                                                          \n";
csm_32768 << "                                                          \n";
csm_32768 << " parameter EXTMA_V1 = 11'd1023;                           \n";
csm_32768 << " parameter DCNT_V1  = 15'd8239;                           \n";
csm_32768 << " parameter DCNT_V2  = 15'd1028;                           \n";
csm_32768 << " parameter DCNT_V3  = 15'd5;                              \n";
csm_32768 << " parameter DCNT_V4  = 15'd2047;                           \n";
csm_32768 << " parameter DCNT_V5  = 15'd4095;                           \n";
csm_32768 << " parameter DCNT_V6  = 15'd6143;                           \n";
csm_32768 << "                                                          \n";
csm_32768 << " output [S_WIDTH-1:0]  next_state;                        \n";
csm_32768 << "                                                          \n";
csm_32768 << " reg    [S_WIDTH-1:0]  next_state;                        \n";
csm_32768 << "                                                          \n";
csm_32768 << " input                 ExtValid_in;                       \n";
csm_32768 << " input [A_WIDTH-1:0]   ExtMA_in;                          \n";
csm_32768 << " input [5:0]           WenCnt_in;                         \n";
csm_32768 << " input [5:0]           Cnt1_in;                           \n";
csm_32768 << " input [DC_WIDTH-1:0]  data_cnt_in;                       \n";
csm_32768 << " input [S_WIDTH-1:0]   state;                             \n";
csm_32768 << "                                                          \n";
csm_32768 << "                                                          \n";
csm_32768 << "                                                          \n";
csm_32768 << "   always @(*) begin                                      \n";                                                                                                               
csm_32768 << "       case(state)                                        \n";                                                                                                               
csm_32768 << "           INI: begin                                     \n";                                                                                                               
csm_32768 << "                   if(ExtValid_in) next_state = LD_EXTD ; \n";                                                                                                        
csm_32768 << "                   else next_state = INI ;                \n";                                                                                                        
csm_32768 << "               end                                        \n";                                                                                                       
csm_32768 << "           // LOAD  Extdata to SRAM	                    \n";                                                                                                       
csm_32768 << "           LD_EXTD: begin                                 \n";                                                                                                        
csm_32768 << "                       if(ExtMA_in < EXTMA_V1) next_state = LD_EXTD ;             \n";                                                                                        
csm_32768 << "                       else next_state = LD_EXTDF ;                               \n";                                                                                
csm_32768 << "                    end                                                           \n";                                                                                
csm_32768 << "           // LOAD  Final Extdata to SRAM	and  Compute dataCount                  \n";                                                                               
csm_32768 << "           LD_EXTDF: begin                                                        \n";                                                                                
csm_32768 << "                        next_state = LD_STAGE1_ST ;                               \n";                                                                                 
csm_32768 << "                     end                                                          \n";                                                                                
csm_32768 << "           // Compute FFT                                                         \n";                                                                                
csm_32768 << "           LD_STAGE1_ST: begin                                                    \n";                                                                                
csm_32768 << "                           if(WenCnt_in < 6'd46) next_state = LD_STAGE1_ST ;      \n";                                                                               
csm_32768 << "                           else next_state = ST_STAGE1 ;                          \n";                                                                                
csm_32768 << "                        end                                                       \n";                                                                               
csm_32768 << "           ST_STAGE1: begin                                                       \n";                                                                                
csm_32768 << "                         if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_FIND ;\n";
csm_32768 << "                         else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ;  \n";                     
csm_32768 << "                         else next_state = SET_IFFT ;                             \n";                     
csm_32768 << "                      end                                                         \n";                   
csm_32768 << "             // Write 48 FFT data to SRAM in stage1                               \n";                   
csm_32768 << "           WR_FIND: begin                                                         \n";                   
csm_32768 << "                       if(Cnt1_in < 6'd47) next_state = WR_FIND ; //modify        \n";                  
csm_32768 << "                       else next_state = LD_STAGE2_ST ;                           \n";                   
csm_32768 << "                    end                                                           \n";                   
csm_32768 << " 			// Stage2 and other Stages, just Read FFT data, Counter for computing 48 butterfly units  \n";
csm_32768 << "           LD_STAGE2_ST: begin                                                                      \n"; 
csm_32768 << "                            if(WenCnt_in < 6'd47) next_state = LD_STAGE2_ST ;                       \n"; 
csm_32768 << "                            else next_state = ST_STAGE1 ;                                           \n";  
csm_32768 << "                         end                                                                        \n"; 
csm_32768 << "           // Compute dataCount		                                                              \n";
csm_32768 << "           SET_IFFT: begin                                                                          \n"; 
csm_32768 << "                        next_state = LD_IFFTSTAGE1_ST ;                                             \n";
csm_32768 << "                     end                                                                            \n"; 
csm_32768 << "           // Compute IFFT		                                                                  \n";    
csm_32768 << "           LD_IFFTSTAGE1_ST: begin                                                                  \n"; 
csm_32768 << "                                if(WenCnt_in < 6'd46) next_state = LD_IFFTSTAGE1_ST ;               \n"; 
csm_32768 << "                                else next_state = ST_IFFTSTAGE1 ;                                   \n";  
csm_32768 << "                             end                                                                    \n"; 
csm_32768 << "           ST_IFFTSTAGE1: begin                                                                     \n";
csm_32768 << "                             if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_IFFTFIND ;\n";
csm_32768 << "                             else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;             \n";   
csm_32768 << "                             //else next_state = SET_RC ;                                            \n";   
csm_32768 << "                             else next_state = SET_OP; //modify 2020/02/24                           \n";   
csm_32768 << "                          end                                                                        \n"; 
csm_32768 << " 			// Write 48 IFFT data to SRAM in stage1                                                    \n";
csm_32768 << "           WR_IFFTFIND: begin                                                                        \n"; 
csm_32768 << "                           if(Cnt1_in < 6'd47) next_state = WR_IFFTFIND ; //modify                   \n";
csm_32768 << "                           else next_state = LD_IFFTSTAGE2_ST ;                                      \n"; 
csm_32768 << "                        end                                                                          \n"; 
csm_32768 << "           // Stage2 and other Stages, just Read IFFT data, Counter for computing 48 butterfly units \n"; 
csm_32768 << "           LD_IFFTSTAGE2_ST: begin                                                                   \n"; 
csm_32768 << "                                if(WenCnt_in < 6'd47) next_state = LD_IFFTSTAGE2_ST ;                \n"; 
csm_32768 << "                                else next_state = ST_IFFTSTAGE1 ;                                    \n";  
csm_32768 << "                             end                                                                     \n"; 
csm_32768 << "           SET_OP:begin                                                                              \n"; 
csm_32768 << "                    if(data_cnt_in < DCNT_V2) next_state = SET_OP ;                                  \n"; 
csm_32768 << "                    else next_state = SET_OPF ;                                                      \n"; 
csm_32768 << "                 end                                                                                 \n"; 
csm_32768 << "           SET_OPF:begin                                                                             \n"; 
csm_32768 << "                        next_state = INI;  //modify 2020/02/24                                       \n"; 
csm_32768 << "                     end			                                                                   \n";
csm_32768 << " 		//                                                                                             \n";
csm_32768 << "       default: next_state = INI ;  		                                                           \n";
csm_32768 << "       endcase                                                                                       \n"; 
csm_32768 << "   end                                                                                               \n";
csm_32768 << "                                                                                                     \n";
csm_32768 << "endmodule                                                                                            \n";
	 
     csm_32768.close();
}
void configurable_BFFT::CSM_65536(std::string string_in){
	 std::ofstream csm_65536;
     std::string        string_buf = "/CSM_65536.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 csm_65536.open(ss.str());
csm_65536 << "`timescale 1ns/1ps                              \n";
csm_65536 << "//CenCtrl_State_Machine_65536                   \n";
csm_65536 << "module CSM_65536(ExtValid_in,                   \n";
csm_65536 << "                 ExtMA_in,                      \n";
csm_65536 << "				 WenCnt_in,                       \n";
csm_65536 << "				 Cnt1_in,                         \n";
csm_65536 << "				 data_cnt_in,                     \n";
csm_65536 << "                 state,                         \n";
csm_65536 << "                 next_state                     \n";
csm_65536 << ");                                              \n";
csm_65536 << "                                                \n";
csm_65536 << " parameter A_WIDTH  = 11 ;                      \n";
csm_65536 << " parameter DC_WIDTH = 15 ;                      \n";
csm_65536 << " parameter A_ZERO   = 11'h0;                    \n";
csm_65536 << "                                                \n";
csm_65536 << " parameter S_WIDTH   = 4 ;                      \n";
csm_65536 << " //INITIAL                                      \n";
csm_65536 << " parameter INI              = 4'd0 ;            \n";
csm_65536 << " parameter LD_EXTD          = 4'd1 ;            \n";
csm_65536 << " parameter LD_EXTDF         = 4'd2 ;            \n";
csm_65536 << " parameter LD_STAGE1_ST     = 4'd3 ;            \n";
csm_65536 << " parameter ST_STAGE1        = 4'd4 ;            \n";
csm_65536 << " parameter WR_FIND          = 4'd5 ;            \n";
csm_65536 << " parameter LD_STAGE2_ST     = 4'd6 ;            \n";
csm_65536 << " parameter SET_IFFT         = 4'd7 ;            \n";
csm_65536 << " parameter LD_IFFTSTAGE1_ST = 4'd8 ;            \n";
csm_65536 << " parameter ST_IFFTSTAGE1    = 4'd9 ;            \n";
csm_65536 << " parameter WR_IFFTFIND      = 4'd10;            \n";
csm_65536 << " parameter LD_IFFTSTAGE2_ST = 4'd11;            \n";
csm_65536 << " parameter SET_OP           = 4'd12;            \n";
csm_65536 << " parameter SET_OPF          = 4'd13;            \n";
csm_65536 << "                                                \n";
csm_65536 << "                                                \n";
csm_65536 << " parameter EXTMA_V1 = 11'd2047;                 \n";
csm_65536 << " parameter DCNT_V1  = 15'd16431;                \n";
csm_65536 << " parameter DCNT_V2  = 15'd2052;                 \n";
csm_65536 << " parameter DCNT_V3  = 15'd5;                    \n";
csm_65536 << " parameter DCNT_V4  = 15'd4095;                 \n";
csm_65536 << " parameter DCNT_V5  = 15'd8191;                 \n";
csm_65536 << " parameter DCNT_V6  = 15'd12287;                \n";
csm_65536 << "                                                \n";
csm_65536 << " output [S_WIDTH-1:0]  next_state;              \n";
csm_65536 << "                                                \n";
csm_65536 << " reg    [S_WIDTH-1:0]  next_state;              \n";
csm_65536 << "                                                \n";
csm_65536 << " input                 ExtValid_in;             \n";
csm_65536 << " input [A_WIDTH-1:0]   ExtMA_in;                \n";
csm_65536 << " input [5:0]           WenCnt_in;               \n";
csm_65536 << " input [5:0]           Cnt1_in;                 \n";
csm_65536 << " input [DC_WIDTH-1:0]  data_cnt_in;             \n";
csm_65536 << " input [S_WIDTH-1:0]   state;                   \n";
csm_65536 << "                                                \n";
csm_65536 << "                                                \n";
csm_65536 << "                                                \n";
csm_65536 << "   always @(*) begin                            \n";                                                                                                                  
csm_65536 << "       case(state)                              \n";                                                                                                                  
csm_65536 << "           INI: begin                           \n";                                                                                                                  
csm_65536 << "                   if(ExtValid_in) next_state = LD_EXTD ;     \n";                                                                                                     
csm_65536 << "                   else next_state = INI ;                            \n";                                                                                               
csm_65536 << "               end                                                    \n";                                                                                           
csm_65536 << "           // LOAD  Extdata to SRAM	                                \n";                                                                                           
csm_65536 << "           LD_EXTD: begin                                             \n";                                                                                            
csm_65536 << "                       if(ExtMA_in < EXTMA_V1) next_state = LD_EXTD ; \n";                                                                                           
csm_65536 << "                       else next_state = LD_EXTDF ;                   \n";                                                                                            
csm_65536 << "                    end                                               \n";                                                                                            
csm_65536 << "           // LOAD  Final Extdata to SRAM	and  Compute dataCount      \n";                                                                                           
csm_65536 << "           LD_EXTDF: begin                                            \n";                                                                                            
csm_65536 << "                        next_state = LD_STAGE1_ST ;                   \n";                                                                                             
csm_65536 << "                     end                                              \n";                                                                                            
csm_65536 << "           // Compute FFT                                             \n";                                                                                            
csm_65536 << "           LD_STAGE1_ST: begin                                        \n";                                                                                            
csm_65536 << "                           if(WenCnt_in < 6'd46) next_state = LD_STAGE1_ST ;   \n";                                                                                  
csm_65536 << "                           else next_state = ST_STAGE1 ;                       \n";                                                                                   
csm_65536 << "                        end                                                    \n";                                                                                  
csm_65536 << "           ST_STAGE1: begin                                                    \n";                                                                                   
csm_65536 << "                         if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_FIND ;\n";
csm_65536 << "                         else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ;     \n";                  
csm_65536 << "                         else next_state = SET_IFFT ;                                \n";                  
csm_65536 << "                      end                                                            \n";                
csm_65536 << "             // Write 48 FFT data to SRAM in stage1                                  \n";                
csm_65536 << "           WR_FIND: begin                                                            \n";                
csm_65536 << "                       if(Cnt1_in < 6'd47) next_state = WR_FIND ; //modify           \n";               
csm_65536 << "                       else next_state = LD_STAGE2_ST ;                              \n";                
csm_65536 << "                    end                                                              \n";                
csm_65536 << " 			// Stage2 and other Stages, just Read FFT data, Counter for computing 48 butterfly units  \n";
csm_65536 << "           LD_STAGE2_ST: begin                                                                       \n";
csm_65536 << "                            if(WenCnt_in < 6'd47) next_state = LD_STAGE2_ST ;                        \n";
csm_65536 << "                            else next_state = ST_STAGE1 ;                                            \n"; 
csm_65536 << "                         end                                                                         \n";
csm_65536 << "           // Compute dataCount		                                                               \n";
csm_65536 << "           SET_IFFT: begin                                                                           \n";
csm_65536 << "                        next_state = LD_IFFTSTAGE1_ST ;                                              \n";
csm_65536 << "                     end                                                                             \n";
csm_65536 << "           // Compute IFFT		                                                                   \n";   
csm_65536 << "           LD_IFFTSTAGE1_ST: begin                                                                   \n";
csm_65536 << "                                if(WenCnt_in < 6'd46) next_state = LD_IFFTSTAGE1_ST ;                \n";
csm_65536 << "                                else next_state = ST_IFFTSTAGE1 ;                                    \n"; 
csm_65536 << "                             end                                                                     \n";
csm_65536 << "           ST_IFFTSTAGE1: begin                                                                      \n";
csm_65536 << "                             if((data_cnt_in==DCNT_V4)||(data_cnt_in==DCNT_V5)||(data_cnt_in==DCNT_V6) ) next_state = WR_IFFTFIND ;\n";
csm_65536 << "                             else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;             \n";   
csm_65536 << "                             //else next_state = SET_RC ;                                            \n";   
csm_65536 << "                             else next_state = SET_OP; //modify 2020/02/24                           \n";   
csm_65536 << "                          end                                                                        \n"; 
csm_65536 << " 			// Write 48 IFFT data to SRAM in stage1                                                    \n";
csm_65536 << "           WR_IFFTFIND: begin                                                                        \n"; 
csm_65536 << "                           if(Cnt1_in < 6'd47) next_state = WR_IFFTFIND ; //modify                   \n";
csm_65536 << "                           else next_state = LD_IFFTSTAGE2_ST ;                                      \n"; 
csm_65536 << "                        end                                                                          \n"; 
csm_65536 << "           // Stage2 and other Stages, just Read IFFT data, Counter for computing 48 butterfly units \n"; 
csm_65536 << "           LD_IFFTSTAGE2_ST: begin                                                                   \n"; 
csm_65536 << "                                if(WenCnt_in < 6'd47) next_state = LD_IFFTSTAGE2_ST ;                \n"; 
csm_65536 << "                                else next_state = ST_IFFTSTAGE1 ;                                    \n";  
csm_65536 << "                             end                                                                     \n"; 
csm_65536 << "           SET_OP:begin                                                                              \n"; 
csm_65536 << "                    if(data_cnt_in < DCNT_V2) next_state = SET_OP ;                                  \n"; 
csm_65536 << "                    else next_state = SET_OPF ;                                                      \n"; 
csm_65536 << "                 end                                                                                 \n"; 
csm_65536 << "           SET_OPF:begin                                                                             \n"; 
csm_65536 << "                        next_state = INI;  //modify 2020/02/24                                       \n"; 
csm_65536 << "                     end			                                                                   \n";
csm_65536 << " 		//                                                                                             \n";
csm_65536 << "       default: next_state = INI ;  		                                                           \n";
csm_65536 << "       endcase                                                                                       \n"; 
csm_65536 << "   end                                                                                               \n";
csm_65536 << " \n";
csm_65536 << "endmodule\n";	 
     csm_65536.close();
}	
//rom data address_width parameter need to change
void configurable_BFFT::Ctrl_PipeReg1(std::string string_in){
	 std::ofstream ctrl_pipereg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 ctrl_pipereg1.open(ss.str());
ctrl_pipereg1 << " `timescale 1 ns/1 ps                                    \n";           
ctrl_pipereg1 << " module Ctrl_PipeReg1(mode_sel_Dout,                     \n";           
ctrl_pipereg1 << " 				        Mul_sel_Dout,                      \n";           
ctrl_pipereg1 << " 				        RDC_sel_Dout,                      \n";           
ctrl_pipereg1 << " 				        DC_mode_sel_Dout,                  \n";           
ctrl_pipereg1 << " 				        BU_mode_sel_Dout,                  \n";           
ctrl_pipereg1 << " 				        BU_dc_sel_Dout,                    \n";           
ctrl_pipereg1 << "                        mode_sel_in,                     \n";             
ctrl_pipereg1 << " 			            Mul_sel_in,                        \n";           
ctrl_pipereg1 << " 			            RDC_sel_in,                        \n";           
ctrl_pipereg1 << " 			            DC_mode_sel_in,                    \n";           
ctrl_pipereg1 << " 			            BU_mode_sel_in,                    \n";           
ctrl_pipereg1 << " 			            BU_dc_sel_in,                      \n";           
ctrl_pipereg1 << "                      rst_n,                             \n";           
ctrl_pipereg1 << "                      clk                                \n";           
ctrl_pipereg1 << "                      ) ;                                \n";           
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << " parameter ROMA_WIDTH  = 11;                             \n";
ctrl_pipereg1 << " parameter ROMA_ZERO   = 11'h0 ;                         \n";
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << " output                  mode_sel_Dout ;                 \n";           
ctrl_pipereg1 << " output [1:0]            Mul_sel_Dout ;                  \n";           
ctrl_pipereg1 << " output [3:0]            RDC_sel_Dout ;                  \n";           
ctrl_pipereg1 << " output [2:0]            DC_mode_sel_Dout ;              \n";           
ctrl_pipereg1 << " output                  BU_mode_sel_Dout ;              \n";           
ctrl_pipereg1 << " output                  BU_dc_sel_Dout ;                \n";           
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << " input                   mode_sel_in ;                   \n";           
ctrl_pipereg1 << " input  [1:0]            Mul_sel_in ;                    \n";           
ctrl_pipereg1 << " input  [3:0]            RDC_sel_in ;                    \n";           
ctrl_pipereg1 << " input  [2:0]            DC_mode_sel_in ;                \n";           
ctrl_pipereg1 << " input                   BU_mode_sel_in ;                \n";           
ctrl_pipereg1 << " input                   BU_dc_sel_in ;                  \n";           
ctrl_pipereg1 << " input                   rst_n ;                         \n";           
ctrl_pipereg1 << " input                   clk ;                           \n";           
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << " reg                  mode_sel_D0reg ;                   \n";           
ctrl_pipereg1 << " reg                  mode_sel_D1reg ;                   \n";           
ctrl_pipereg1 << " reg                  mode_sel_D2reg ;                   \n";           
ctrl_pipereg1 << " reg                  mode_sel_Dout ;                    \n";           
ctrl_pipereg1 << " reg [1:0]            Mul_sel_D0reg ;                    \n";           
ctrl_pipereg1 << " reg [1:0]            Mul_sel_D1reg ;                    \n";           
ctrl_pipereg1 << " reg [1:0]            Mul_sel_D2reg ;                    \n";           
ctrl_pipereg1 << " reg [1:0]            Mul_sel_Dout ;                     \n";           
ctrl_pipereg1 << " reg [3:0]            RDC_sel_D0reg ;                    \n";           
ctrl_pipereg1 << " reg [3:0]            RDC_sel_D1reg ;                    \n";           
ctrl_pipereg1 << " reg [3:0]            RDC_sel_D2reg ;                    \n";           
ctrl_pipereg1 << " reg [3:0]            RDC_sel_D3reg ;                    \n";           
ctrl_pipereg1 << " reg [3:0]            RDC_sel_D4reg ;                    \n";           
ctrl_pipereg1 << " reg [3:0]            RDC_sel_D5reg ;                    \n";           
ctrl_pipereg1 << " reg [3:0]            RDC_sel_Dout ;                     \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D0reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D1reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D2reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D3reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D4reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D5reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D6reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D7reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D8reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D9reg ;                \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D10reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D11reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D12reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D13reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D14reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D15reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D16reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D17reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D18reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D19reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D20reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D21reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D22reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D23reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D24reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D25reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D26reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D27reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D28reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D29reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D30reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D31reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D32reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D33reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D34reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D35reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D36reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D37reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D38reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D39reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D40reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D41reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D42reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D43reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D44reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_D45reg ;               \n";           
ctrl_pipereg1 << " reg                  BU_mode_sel_Dout  ;                \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D0reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D1reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D2reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D3reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D4reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D5reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D6reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D7reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D8reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D9reg ;                  \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D10reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D11reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D12reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D13reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D14reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D15reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D16reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D17reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D18reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D19reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D20reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D21reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D22reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D23reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D24reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D25reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D26reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D27reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D28reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D29reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D30reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D31reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D32reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D33reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D34reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D35reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D36reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D37reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D38reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D39reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D40reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D41reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D42reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D43reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D44reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_D45reg ;                 \n";           
ctrl_pipereg1 << " reg                  BU_dc_sel_Dout  ;                  \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D0reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D1reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D2reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D3reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D4reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D5reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D6reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D7reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D8reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D9reg ;                \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D10reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D11reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D12reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D13reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D14reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D15reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D16reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D17reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D18reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D19reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D20reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D21reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D22reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D23reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D24reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D25reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D26reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D27reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D28reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D29reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D30reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D31reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D32reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D33reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D34reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D35reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D36reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D37reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D38reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D39reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D40reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D41reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D42reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D43reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D44reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_D45reg ;               \n";           
ctrl_pipereg1 << " reg [2:0]            DC_mode_sel_Dout  ;                \n";           
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << "                                                         \n";           
ctrl_pipereg1 << " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n"; 
ctrl_pipereg1 << " 	always @(posedge clk or negedge rst_n) begin  \n";                     
ctrl_pipereg1 << " 		if(~rst_n) begin                          \n";                    
ctrl_pipereg1 << " 			mode_sel_D0reg      <= 1'b0;          \n";                    
ctrl_pipereg1 << " 			mode_sel_D1reg      <= 1'b0;          \n";                    
ctrl_pipereg1 << " 			mode_sel_D2reg      <= 1'b0;          \n";                    
ctrl_pipereg1 << " 			mode_sel_Dout       <= 1'b0;          \n";                    
ctrl_pipereg1 << " 			Mul_sel_D0reg       <= 2'd0;          \n";                    
ctrl_pipereg1 << " 			Mul_sel_D1reg       <= 2'd0;          \n";                    
ctrl_pipereg1 << " 			Mul_sel_D2reg       <= 2'd0;          \n";                    
ctrl_pipereg1 << " 			Mul_sel_Dout        <= 2'd0;          \n";                    
ctrl_pipereg1 << " 			RDC_sel_D0reg       <= 4'd0;          \n";                    
ctrl_pipereg1 << " 			RDC_sel_D1reg       <= 4'd0;          \n";                    
ctrl_pipereg1 << " 			RDC_sel_D2reg       <= 4'd0;          \n";                    
ctrl_pipereg1 << " 			RDC_sel_D3reg       <= 4'd0;          \n";                    
ctrl_pipereg1 << " 			RDC_sel_D4reg       <= 4'd0;          \n";                    
ctrl_pipereg1 << " 			RDC_sel_D5reg       <= 4'd0;          \n";                    
ctrl_pipereg1 << " 			RDC_sel_Dout        <= 4'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D0reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D1reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D2reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D3reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D4reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D5reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D6reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D7reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D8reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D9reg   <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D10reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D11reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D12reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D13reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D14reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D15reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D16reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D17reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D18reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D19reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D20reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D21reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D22reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D23reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D24reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D25reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D26reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D27reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D28reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D29reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D30reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D31reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D32reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D33reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D34reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D35reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D36reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D37reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D38reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D39reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D40reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D41reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D42reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D43reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D44reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D45reg  <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_Dout    <= 3'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D0reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D1reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D2reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D3reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D4reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D5reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D6reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D7reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D8reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D9reg   <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D10reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D11reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D12reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D13reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D14reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D15reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D16reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D17reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D18reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D19reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D20reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D21reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D22reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D23reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D24reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D25reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D26reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D27reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D28reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D29reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D30reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D31reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D32reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D33reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D34reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D35reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D36reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D37reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D38reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D39reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D40reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D41reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D42reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D43reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D44reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_D45reg  <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_mode_sel_Dout    <= 1'd0;          \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D0reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D1reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D2reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D3reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D4reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D5reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D6reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D7reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D8reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D9reg    <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D10reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D11reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D12reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D13reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D14reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D15reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D16reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D17reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D18reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D19reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D20reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D21reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D22reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D23reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D24reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D25reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D26reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D27reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D28reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D29reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D30reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D31reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D32reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D33reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D34reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D35reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D36reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D37reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D38reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D39reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D40reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D41reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D42reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D43reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D44reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_D45reg   <= 1'd0;           \n";                    
ctrl_pipereg1 << " 			BU_dc_sel_Dout     <= 1'd0;           \n";                    
ctrl_pipereg1 << " 		end                                       \n";                    
ctrl_pipereg1 << " 		else begin                                \n";                    
ctrl_pipereg1 << " 			mode_sel_D0reg <= mode_sel_in ;       \n";                    
ctrl_pipereg1 << " 			mode_sel_D1reg <= mode_sel_D0reg ;    \n";                    
ctrl_pipereg1 << " 			mode_sel_D2reg <= mode_sel_D1reg ;    \n";                    
ctrl_pipereg1 << " 			mode_sel_Dout <= mode_sel_D2reg ;     \n";                    
ctrl_pipereg1 << " 			//                                    \n";                    
ctrl_pipereg1 << " 			Mul_sel_D0reg <= Mul_sel_in ;         \n";                    
ctrl_pipereg1 << " 			Mul_sel_D1reg <= Mul_sel_D0reg ;      \n";                    
ctrl_pipereg1 << " 			Mul_sel_D2reg <= Mul_sel_D1reg ;      \n";                    
ctrl_pipereg1 << " 			Mul_sel_Dout <= Mul_sel_D2reg ;       \n";                    
ctrl_pipereg1 << " 			//                                    \n";                    
ctrl_pipereg1 << " 			RDC_sel_D0reg <= RDC_sel_in ;         \n";                    
ctrl_pipereg1 << " 			RDC_sel_D1reg <= RDC_sel_D0reg ;      \n";                    
ctrl_pipereg1 << " 			RDC_sel_D2reg <= RDC_sel_D1reg ;      \n";                    
ctrl_pipereg1 << " 			RDC_sel_D3reg <= RDC_sel_D2reg ;      \n";                    
ctrl_pipereg1 << " 			RDC_sel_D4reg <= RDC_sel_D3reg ;      \n";                    
ctrl_pipereg1 << " 			RDC_sel_D5reg <= RDC_sel_D4reg ;      \n";                    
ctrl_pipereg1 << " 			RDC_sel_Dout <= RDC_sel_D5reg ;       \n";                    
ctrl_pipereg1 << " 			//                                    \n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;\n";                    
ctrl_pipereg1 << " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;    \n";               
ctrl_pipereg1 << " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;    \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;   \n";             
ctrl_pipereg1 << " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;   \n";             
ctrl_pipereg1 << " 			//                                           \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D0reg <= BU_mode_sel_in;         \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D1reg <= BU_mode_sel_D0reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D2reg <= BU_mode_sel_D1reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D3reg <= BU_mode_sel_D2reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D4reg <= BU_mode_sel_D3reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D5reg <= BU_mode_sel_D4reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D6reg <= BU_mode_sel_D5reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D7reg <= BU_mode_sel_D6reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D8reg <= BU_mode_sel_D7reg;      \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D9reg  <= BU_mode_sel_D8reg;     \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D10reg <= BU_mode_sel_D9reg;     \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D11reg <= BU_mode_sel_D10reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D12reg <= BU_mode_sel_D11reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D13reg <= BU_mode_sel_D12reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D14reg <= BU_mode_sel_D13reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D15reg <= BU_mode_sel_D14reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D16reg <= BU_mode_sel_D15reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D17reg <= BU_mode_sel_D16reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D18reg <= BU_mode_sel_D17reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D19reg <= BU_mode_sel_D18reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D20reg <= BU_mode_sel_D19reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D21reg <= BU_mode_sel_D20reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D22reg <= BU_mode_sel_D21reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D23reg <= BU_mode_sel_D22reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D24reg <= BU_mode_sel_D23reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D25reg <= BU_mode_sel_D24reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D26reg <= BU_mode_sel_D25reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D27reg <= BU_mode_sel_D26reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D28reg <= BU_mode_sel_D27reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D29reg <= BU_mode_sel_D28reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D30reg <= BU_mode_sel_D29reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D31reg <= BU_mode_sel_D30reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D32reg <= BU_mode_sel_D31reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D33reg <= BU_mode_sel_D32reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D34reg <= BU_mode_sel_D33reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D35reg <= BU_mode_sel_D34reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D36reg <= BU_mode_sel_D35reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D37reg <= BU_mode_sel_D36reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D38reg <= BU_mode_sel_D37reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D39reg <= BU_mode_sel_D38reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D40reg <= BU_mode_sel_D39reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D41reg <= BU_mode_sel_D40reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D42reg <= BU_mode_sel_D41reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D43reg <= BU_mode_sel_D42reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D44reg <= BU_mode_sel_D43reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_D45reg <= BU_mode_sel_D44reg;    \n";             
ctrl_pipereg1 << " 			BU_mode_sel_Dout   <= BU_mode_sel_D45reg;    \n";             
ctrl_pipereg1 << " 		    //                                           \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D0reg    <= BU_dc_sel_in;          \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D1reg    <= BU_dc_sel_D0reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D2reg    <= BU_dc_sel_D1reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D3reg    <= BU_dc_sel_D2reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D4reg    <= BU_dc_sel_D3reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D5reg    <= BU_dc_sel_D4reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D6reg    <= BU_dc_sel_D5reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D7reg    <= BU_dc_sel_D6reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D8reg    <= BU_dc_sel_D7reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D9reg    <= BU_dc_sel_D8reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D10reg   <= BU_dc_sel_D9reg;       \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D11reg   <= BU_dc_sel_D10reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D12reg   <= BU_dc_sel_D11reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D13reg   <= BU_dc_sel_D12reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D14reg   <= BU_dc_sel_D13reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D15reg   <= BU_dc_sel_D14reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D16reg   <= BU_dc_sel_D15reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D17reg   <= BU_dc_sel_D16reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D18reg   <= BU_dc_sel_D17reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D19reg   <= BU_dc_sel_D18reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D20reg   <= BU_dc_sel_D19reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D21reg   <= BU_dc_sel_D20reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D22reg   <= BU_dc_sel_D21reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D23reg   <= BU_dc_sel_D22reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D24reg   <= BU_dc_sel_D23reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D25reg   <= BU_dc_sel_D24reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D26reg   <= BU_dc_sel_D25reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D27reg   <= BU_dc_sel_D26reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D28reg   <= BU_dc_sel_D27reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D29reg   <= BU_dc_sel_D28reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D30reg   <= BU_dc_sel_D29reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D31reg   <= BU_dc_sel_D30reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D32reg   <= BU_dc_sel_D31reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D33reg   <= BU_dc_sel_D32reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D34reg   <= BU_dc_sel_D33reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D35reg   <= BU_dc_sel_D34reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D36reg   <= BU_dc_sel_D35reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D37reg   <= BU_dc_sel_D36reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D38reg   <= BU_dc_sel_D37reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D39reg   <= BU_dc_sel_D38reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D40reg   <= BU_dc_sel_D39reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D41reg   <= BU_dc_sel_D40reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D42reg   <= BU_dc_sel_D41reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D43reg   <= BU_dc_sel_D42reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D44reg   <= BU_dc_sel_D43reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_D45reg   <= BU_dc_sel_D44reg;      \n";             
ctrl_pipereg1 << " 			BU_dc_sel_Dout     <= BU_dc_sel_D45reg;      \n";             
ctrl_pipereg1 << " 		end                                              \n";             
ctrl_pipereg1 << " 	end                                                  \n";             
ctrl_pipereg1 << "                                                       \n";             
ctrl_pipereg1 << " endmodule                                             \n";             
	 
	 ctrl_pipereg1.close();
}	 
//***************************
//Need to modify 
//***************************
void configurable_BFFT::order_ROMReg_r16(std::string string_in){
     std::ofstream orderROM_pipe;
     std::string        string_buf = "/R16_orderROM_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     orderROM_pipe.open(ss.str()); 
orderROM_pipe << "//==================================================           \n";                    
orderROM_pipe << "//Writer     : shiyong wu                                      \n";                    
orderROM_pipe << "//Date       : 2020/6/18                                       \n";                    
orderROM_pipe << "//Note       : ROM register file                               \n";                    
orderROM_pipe << "//==================================================           \n";                    
orderROM_pipe << "`timescale 1 ns/1 ps                                           \n";                    
orderROM_pipe << "module R16_orderROM_Pipe(                                      \n";                     
orderROM_pipe << "                      reorderROM0_o,                           \n";                    
orderROM_pipe << "                      reorderROM1_o,                           \n";                    
orderROM_pipe << "                      reorderROM2_o,                           \n";                    
orderROM_pipe << "                      reorderROM3_o,                           \n";                    
orderROM_pipe << "                      ireorderROM0_o,                          \n";                    
orderROM_pipe << "                      ireorderROM1_o,                          \n";                    
orderROM_pipe << "                      ireorderROM2_o,                          \n";                    
orderROM_pipe << "                      ireorderROM3_o,                          \n";                    
orderROM_pipe << "					    reorderROM0_i,                           \n";                  
orderROM_pipe << "					    reorderROM1_i,                           \n";                  
orderROM_pipe << "					    reorderROM2_i,                           \n";                                                                
orderROM_pipe << "					    reorderROM3_i,                           \n";
orderROM_pipe << "					    ireorderROM0_i,                          \n";                  
orderROM_pipe << "					    ireorderROM1_i,                          \n";                  
orderROM_pipe << "					    ireorderROM2_i,                          \n";                  
orderROM_pipe << "					    ireorderROM3_i,                          \n";                  
orderROM_pipe << "						rst_n,                                   \n";                    
orderROM_pipe << "						clk                                      \n";                    
orderROM_pipe << "						) ;                                      \n";
orderROM_pipe << "						                                         \n";
orderROM_pipe << "    parameter SD_WIDTH = 128;                                 \n";                     
orderROM_pipe << "    parameter SD_ZERO  = 128;                                 \n";                     
orderROM_pipe << "    parameter P_WIDTH  = 64;                                  \n";                    
orderROM_pipe << "	  parameter P_ZERO   = 64'd0;                               \n";
orderROM_pipe << "                                                               \n";                    
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM0_o;                       \n";                     
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM1_o;                       \n";                     
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM2_o;                       \n";                     
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM3_o;                       \n";                     
orderROM_pipe << "    output [SD_WIDTH-1:0] ireorderROM0_o;                      \n";                     
orderROM_pipe << "    output [SD_WIDTH-1:0] ireorderROM1_o;                      \n";                     
orderROM_pipe << "    output [SD_WIDTH-1:0] ireorderROM2_o;                      \n";                     
orderROM_pipe << "    output [P_WIDTH-1:0]  ireorderROM3_o;                      \n";                     
orderROM_pipe << "                                                               \n";                    
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM0_i;                         \n";                     
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM1_i;                         \n";                     
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM2_i;                         \n";                                                                 
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM3_i;                         \n";                                                                 
orderROM_pipe << "	input [SD_WIDTH-1:0]  ireorderROM0_i;                        \n";                     
orderROM_pipe << "	input [SD_WIDTH-1:0]  ireorderROM1_i;                        \n";                     
orderROM_pipe << "	input [SD_WIDTH-1:0]  ireorderROM2_i;                        \n";                     
orderROM_pipe << "	input [P_WIDTH-1:0]   ireorderROM3_i;                        \n";                     
orderROM_pipe << "                                                               \n";
orderROM_pipe << "	input rst_n;                                                 \n";                    
orderROM_pipe << "	input clk;                                                   \n";                    
orderROM_pipe << "                                                               \n";                    
orderROM_pipe << "                                                               \n";                    
orderROM_pipe << "	  reg [SD_WIDTH-1:0] reorderROM0_o;                          \n";                   
orderROM_pipe << "    reg [SD_WIDTH-1:0] reorderROM1_o;                          \n";                     
orderROM_pipe << "    reg [SD_WIDTH-1:0] reorderROM2_o;                          \n";                     
orderROM_pipe << "    reg [SD_WIDTH-1:0] reorderROM3_o;                          \n";                     
orderROM_pipe << "    reg [SD_WIDTH-1:0] ireorderROM0_o;                         \n";                     
orderROM_pipe << "    reg [SD_WIDTH-1:0] ireorderROM1_o;                         \n";                     
orderROM_pipe << "    reg [SD_WIDTH-1:0] ireorderROM2_o;                         \n";                     
orderROM_pipe << "    reg [P_WIDTH-1:0]  ireorderROM3_o;                         \n";                     
orderROM_pipe << "                                                                    \n";               
orderROM_pipe << "    always@(posedge clk,negedge rst_n)begin                         \n";               
orderROM_pipe << "		if(~rst_n)begin                                               \n";               
orderROM_pipe << "			reorderROM0_o  <= SD_ZERO;                                \n";                
orderROM_pipe << "			reorderROM1_o  <= SD_ZERO;                                \n";                
orderROM_pipe << "			reorderROM2_o  <= SD_ZERO;                                \n";                
orderROM_pipe << "			reorderROM3_o  <= SD_ZERO;                                \n";                
orderROM_pipe << "			ireorderROM0_o <= SD_ZERO;                                \n";                
orderROM_pipe << "			ireorderROM1_o <= SD_ZERO;                                \n";                
orderROM_pipe << "			ireorderROM2_o <= SD_ZERO;                                \n";                
orderROM_pipe << "			ireorderROM3_o <= P_ZERO;                                 \n";                
orderROM_pipe << "		end                                                           \n";               
orderROM_pipe << "		else begin                                                    \n";               
orderROM_pipe << "			reorderROM0_o  <= reorderROM0_i;   \n";                                      
orderROM_pipe << "		    reorderROM1_o  <= reorderROM1_i;   \n";                               
orderROM_pipe << "		    reorderROM2_o  <= reorderROM2_i;   \n";                               
orderROM_pipe << "		    reorderROM3_o  <= reorderROM3_i;   \n";                                      
orderROM_pipe << "		    ireorderROM0_o <= ireorderROM0_i;  \n";                                     
orderROM_pipe << "		    ireorderROM1_o <= ireorderROM1_i;  \n";                              
orderROM_pipe << "		    ireorderROM2_o <= ireorderROM2_i;  \n";                                     
orderROM_pipe << "		    ireorderROM3_o <= ireorderROM3_i;  \n";                              
orderROM_pipe << "		end                                                           \n";               
orderROM_pipe << "	end                                                               \n";               
orderROM_pipe << "                                                                    \n";               
orderROM_pipe << "endmodule                                                           \n";               
	 
	 orderROM_pipe.close();
}	 
void configurable_BFFT::R16_ROMPipeReg1(std::string string_in){
	 std::ofstream r16_rompipereg1;
     std::string        string_buf = "/R16_ROMPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_rompipereg1.open(ss.str());
      r16_rompipereg1 << " `timescale 1 ns/1 ps                                            \n";             
      r16_rompipereg1 << " module R16_ROMPipeReg1(ROMD0_Dout,                              \n";
      r16_rompipereg1 << " 				         ROMD1_Dout,                              \n";
      r16_rompipereg1 << " 				         ROMD2_Dout,                              \n";
      r16_rompipereg1 << " 				         ROMD3_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD4_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD5_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD6_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD7_Dout,                              \n";
      r16_rompipereg1 << " 					     IFFTROMD0_Dout,                          \n";
      r16_rompipereg1 << " 				         IFFTROMD1_Dout,                          \n";
      r16_rompipereg1 << " 				         IFFTROMD2_Dout,                          \n";
      r16_rompipereg1 << " 				         IFFTROMD3_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD4_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD5_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD6_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD7_Dout,                          \n";
      r16_rompipereg1 << " 			             ROMD0_in,                                \n";
      r16_rompipereg1 << " 					     ROMD1_in,                                \n";
      r16_rompipereg1 << " 					     ROMD2_in,                                \n";
      r16_rompipereg1 << " 					     ROMD3_in,                                \n";
      r16_rompipereg1 << " 					     ROMD4_in,                                \n";
      r16_rompipereg1 << " 					     ROMD5_in,                                \n";
      r16_rompipereg1 << " 					     ROMD6_in,                                \n";
      r16_rompipereg1 << " 					     ROMD7_in,                                \n";
      r16_rompipereg1 << " 					     IFFTROMD0_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD1_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD2_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD3_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD4_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD5_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD6_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD7_in,                            \n";
      r16_rompipereg1 << "                        rst_n,                                   \n";
      r16_rompipereg1 << "                        clk                                      \n";
      r16_rompipereg1 << "                        ) ;                                      \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " parameter P_WIDTH   = 64 ;					                  \n";
      r16_rompipereg1 << " parameter SD_WIDTH  = 128 ;                                     \n";
      r16_rompipereg1 << " parameter P_ZERO    = 64'h0 ;                                   \n";
      r16_rompipereg1 << " parameter SD_ZERO   = 128'h0 ;                                  \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " output [P_WIDTH-1:0]    ROMD0_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD1_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD2_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD3_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD4_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD5_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD6_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD7_Dout ;                            \n";
      r16_rompipereg1 << " output [P_WIDTH-1:0]    IFFTROMD0_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                        \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " input  [P_WIDTH-1:0]    ROMD0_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD1_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD2_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD3_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD4_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD5_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD6_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD7_in ;                              \n";
      r16_rompipereg1 << " input  [P_WIDTH-1:0]    IFFTROMD0_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD1_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD2_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD3_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD4_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD5_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD6_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD7_in ;                          \n";
      r16_rompipereg1 << " input                   rst_n ;                                 \n";
      r16_rompipereg1 << " input                   clk ;                                   \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_Dout ;                               \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                           \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D0reg ;                              \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D1reg ;                              \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_D2reg ;                              \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D0reg ;                          \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D1reg ;                          \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D2reg ;                          \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " 	//delay 4 cycles                                              \n";
      r16_rompipereg1 << " 	always @(posedge clk or negedge rst_n) begin                  \n";
      r16_rompipereg1 << " 		if(~rst_n) begin                                          \n";
      r16_rompipereg1 << " 			ROMD0_D0reg <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			ROMD0_D1reg <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			ROMD0_D2reg <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			ROMD0_Dout  <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD1_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD1_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD1_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD1_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD2_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD2_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD2_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD2_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD3_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD3_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD3_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD3_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD4_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD4_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD4_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD4_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD5_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD5_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD5_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD5_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD6_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD6_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD6_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD6_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD7_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD7_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD7_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD7_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//---                                                 \n";
      r16_rompipereg1 << " 			IFFTROMD0_D0reg <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			IFFTROMD0_D1reg <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			IFFTROMD0_D2reg <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			IFFTROMD0_Dout  <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD1_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD1_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD1_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD1_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD2_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD2_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD2_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD2_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD3_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD3_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD3_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD3_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD4_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD4_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD4_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD4_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD5_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD5_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD5_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD5_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD6_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD6_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD6_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD6_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD7_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD7_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD7_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD7_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 		end                                                       \n";
      r16_rompipereg1 << " 		else begin                                                \n";
      r16_rompipereg1 << " 			ROMD0_D0reg <= ROMD0_in ;                             \n";
      r16_rompipereg1 << " 			ROMD0_D1reg <= ROMD0_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD0_D2reg <= ROMD0_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD0_Dout  <= ROMD0_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD1_D0reg <= ROMD1_in ;                             \n";
      r16_rompipereg1 << " 			ROMD1_D1reg <= ROMD1_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD1_D2reg <= ROMD1_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD1_Dout  <= ROMD1_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD2_D0reg <= ROMD2_in ;                             \n";
      r16_rompipereg1 << " 			ROMD2_D1reg <= ROMD2_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD2_D2reg <= ROMD2_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD2_Dout  <= ROMD2_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD3_D0reg <= ROMD3_in ;                             \n";
      r16_rompipereg1 << " 			ROMD3_D1reg <= ROMD3_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD3_D2reg <= ROMD3_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD3_Dout  <= ROMD3_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD4_D0reg <= ROMD4_in ;                             \n";
      r16_rompipereg1 << " 			ROMD4_D1reg <= ROMD4_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD4_D2reg <= ROMD4_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD4_Dout  <= ROMD4_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD5_D0reg <= ROMD5_in ;                             \n";
      r16_rompipereg1 << " 			ROMD5_D1reg <= ROMD5_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD5_D2reg <= ROMD5_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD5_Dout  <= ROMD5_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD6_D0reg <= ROMD6_in ;                             \n";
      r16_rompipereg1 << " 			ROMD6_D1reg <= ROMD6_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD6_D2reg <= ROMD6_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD6_Dout  <= ROMD6_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD7_D0reg <= ROMD7_in ;                             \n";
      r16_rompipereg1 << " 			ROMD7_D1reg <= ROMD7_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD7_D2reg <= ROMD7_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD7_Dout  <= ROMD7_D2reg ;                          \n";
      r16_rompipereg1 << " 			//---                                                 \n";
      r16_rompipereg1 << " 			IFFTROMD0_D0reg <= IFFTROMD0_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD0_D1reg <= IFFTROMD0_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD0_D2reg <= IFFTROMD0_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD0_Dout  <= IFFTROMD0_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD1_D0reg <= IFFTROMD1_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD1_D1reg <= IFFTROMD1_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD1_D2reg <= IFFTROMD1_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD1_Dout  <= IFFTROMD1_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD2_D0reg <= IFFTROMD2_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD2_D1reg <= IFFTROMD2_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD2_D2reg <= IFFTROMD2_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD2_Dout  <= IFFTROMD2_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD3_D0reg <= IFFTROMD3_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD3_D1reg <= IFFTROMD3_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD3_D2reg <= IFFTROMD3_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD3_Dout  <= IFFTROMD3_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD4_D0reg <= IFFTROMD4_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD4_D1reg <= IFFTROMD4_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD4_D2reg <= IFFTROMD4_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD4_Dout  <= IFFTROMD4_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD5_D0reg <= IFFTROMD5_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD5_D1reg <= IFFTROMD5_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD5_D2reg <= IFFTROMD5_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD5_Dout  <= IFFTROMD5_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD6_D0reg <= IFFTROMD6_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD6_D1reg <= IFFTROMD6_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD6_D2reg <= IFFTROMD6_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD6_Dout  <= IFFTROMD6_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD7_D0reg <= IFFTROMD7_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD7_D1reg <= IFFTROMD7_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD7_D2reg <= IFFTROMD7_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD7_Dout  <= IFFTROMD7_D2reg ;                  \n";
      r16_rompipereg1 << " 		end                                                       \n";
      r16_rompipereg1 << " 	end                                                           \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " endmodule                                                       \n";	 
     r16_rompipereg1.close();
}
void configurable_BFFT::R16_AGU(std::string string_in){
	 std::ofstream r16_agu;
     std::string        string_buf = "/R16_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu.open(ss.str());
r16_agu << " `timescale 1 ns/1 ps                                                 \n";
r16_agu << " module R16_AGU(BN_out,                                               \n";
r16_agu << "                MA,                                                   \n";
r16_agu << "                ROMA,                                                 \n";
r16_agu << "                Mul_sel_out,                                          \n";
r16_agu << "                RDC_sel_out,                                          \n";
r16_agu << "                data_cnt_reg,                                         \n";
r16_agu << "                BU_mode_sel_out,//for BU control signal               \n";
r16_agu << "                BU_dc_sel_out,//for BU control signal                 \n";
r16_agu << "                DC_mode_sel_out,//for raidx-2 delay commutator        \n";
r16_agu << "                mode_sel_in,                                          \n";
r16_agu << "                rc_sel_in,                                            \n";
r16_agu << "                AGU_en,                                               \n";
r16_agu << "                wrfd_en_in,                                           \n";
r16_agu << "                Point_sel_in,				                          \n";
r16_agu << "                rst_n,                                                \n";
r16_agu << "                clk                                                   \n";
r16_agu << "                ) ;                                                   \n";
r16_agu << " parameter A_WIDTH     = 11;                                          \n";
r16_agu << " parameter DC_WIDTH    = 15;                                          \n";
r16_agu << " parameter ROMA_WIDTH  = 12;                                          \n";
r16_agu <<"  parameter BC_WIDTH    = 12;                                          \n";
r16_agu <<"  parameter SC_WIDTH    = 3;                                           \n";
r16_agu << "                                                                      \n";
r16_agu << " parameter DC_ZERO   = 15'h0 ;                                        \n";
r16_agu << " parameter ROMA_ZERO = 12'h0 ;                                        \n";
r16_agu << "                                                                      \n";
r16_agu <<"  parameter S0      = 3'd0;                                            \n";
r16_agu <<"  parameter S1      = 3'd1;                                            \n";
r16_agu <<"  parameter S2      = 3'd2;                                            \n";
r16_agu <<"  parameter S3      = 3'd3;                                            \n";
r16_agu <<"                                                                       \n";
r16_agu <<"  parameter DCNT_V1_4096      = 15'd815; //data counter value1_4096 for data_cnt_wire\n";
r16_agu <<"  parameter DCNT_V2_4096      = 15'd132; //data counter value2_4096 for data_cnt_wire\n";
r16_agu <<"  parameter DCNT_V1_8192      = 15'd2095; //data counter value1_8192 for data_cnt_wire\n";
r16_agu <<"  parameter DCNT_V2_8192      = 15'd260; //data counter value2_8192 for data_cnt_wire \n";
r16_agu <<"  parameter DCNT_V1_16384     = 15'd4143; //data counter value1_16384  for data_cnt_wire\n";
r16_agu <<"  parameter DCNT_V2_16384     = 15'd516; //data counter  value2_16384 for data_cnt_wire\n";
r16_agu <<"  parameter DCNT_V1_32768    = 15'd8239; //data counter value1_32768 for data_cnt_wire_out\n";
r16_agu <<"  parameter DCNT_V2_32768    = 15'd1028; //data counter value2_32768 for data_cnt_wire_out\n";
r16_agu <<"  parameter DCNT_V1_65536    = 15'd16431; //data counter value1_65536 for data_cnt_wire \n";
r16_agu <<"  parameter DCNT_V2_65536    = 15'd2052; //data counter value2_65536 for data_cnt_wire  \n";
r16_agu <<"\n";
r16_agu <<"  parameter DCNT_BP1 = 3 ;                                             \n";
r16_agu <<"  parameter DCNT_BP2 = 4 ;                                             \n";
//4096 Point
r16_agu <<"  //4096 Butterfly counter MSB position                                \n";
r16_agu <<"  parameter DCNT_BP3_4096 = 7 ;                                        \n";
r16_agu <<"  //4096 Stage counter LSB position                                    \n";
r16_agu <<"  parameter DCNT_BP4_4096 = 8 ;                                        \n";
r16_agu <<"  //4096 Stage counter MSB position                                    \n";
r16_agu <<"  parameter DCNT_BP5_4096 = 11 ;                                       \n";
//8192 Point
r16_agu << "  //Butterfly counter MSB position                                    \n";
r16_agu << "  parameter DCNT_BP3_8192 = 8 ;                                       \n";
r16_agu << "  //Stage counter LSB position                                        \n";
r16_agu << "  parameter DCNT_BP4_8192 = 9 ;                                       \n";
r16_agu << "  //Stage counter MSB position                                        \n";
r16_agu << "  parameter DCNT_BP5_8192 = 12 ;                                      \n";
r16_agu << "                                                                      \n";
//16384 Point
r16_agu << "  //16384 Butterfly counter MSB position                              \n";
r16_agu << "  parameter DCNT_BP3_16384 = 9 ;                                      \n";
r16_agu << "  //16384 Stage counter LSB position                                  \n";
r16_agu << "  parameter DCNT_BP4_16384 = 10 ;                                     \n";
r16_agu << "  //16384 Stage counter MSB position                                  \n";
r16_agu << "  parameter DCNT_BP5_16384 = 13 ;                                     \n";
//32768 Point
r16_agu << "  //32768 Butterfly counter MSB position                              \n";
r16_agu << "  parameter DCNT_BP3_32768 = 10;                                      \n";
r16_agu << "  //Stage counter LSB position                                        \n";
r16_agu << "  parameter DCNT_BP4_32768 = 11;                                      \n";
r16_agu << "  //Stage counter MSB position                                        \n";
r16_agu << "  parameter DCNT_BP5_32768 = 14;                                      \n";
// 65536 Point FFT
r16_agu <<"  //65536 Point Butterfly counter MSB position                         \n";
r16_agu <<"  parameter DCNT_BP3_65536 = 11 ;                                      \n";
r16_agu <<"  //65536 Point Stage counter LSB position                             \n";
r16_agu <<"  parameter DCNT_BP4_65536 = 12 ;                                      \n";
r16_agu <<"  //65536 Point Stage counter MSB position                             \n";
r16_agu <<"  parameter DCNT_BP5_65536 = 15 ;                                      \n";
r16_agu << "                                                                      \n";
r16_agu << " output                  BN_out ;                                     \n";
r16_agu << " output [A_WIDTH-1:0]    MA ;                                         \n";
r16_agu << " output [ROMA_WIDTH-1:0] ROMA ;                                       \n";
r16_agu << " output [1:0]            Mul_sel_out ;                                \n";
r16_agu << " output [3:0]            RDC_sel_out ;                                \n";
r16_agu << " output [DC_WIDTH-1:0]   data_cnt_reg;                                \n";
r16_agu << " // 3 bits                                                            \n";
r16_agu << " // 3'd0    : radix-16 switcher mode                                  \n";
r16_agu << " // 3'd1    : radix-2 switcher mode                                   \n";
r16_agu << " // 3'd2    : radix-4 switcher mode                                   \n";
r16_agu << " // 3'd3    : radix-8 switcher mode                                   \n";
r16_agu << " // 3'd4    : No transpose (NTT data output are arragned as INTT input) \n";
r16_agu << " // 3'd5    : radix-2 NTT output (NTT data output are arragned as INTT input)\n";
r16_agu << " // 3'd6    : radix-4 NTT output (NTT data output are arragned as INTT input)\n";
r16_agu << " // 3'd7    : radix-8 NTT output (NTT data output are arragned as INTT input)\n";
r16_agu << " output [2:0]            DC_mode_sel_out ; \n";                          
r16_agu << " output                  BU_mode_sel_out ; \n";                          
r16_agu << " output                  BU_dc_sel_out ;   \n";                          
r16_agu << "                                           \n";                             
r16_agu << " input                   mode_sel_in ;     \n";                          
r16_agu << " input                   rc_sel_in ;       \n";                          
r16_agu << " input                   AGU_en ;          \n";                          
r16_agu << " input                   wrfd_en_in ;      \n";
r16_agu << "  // Point_sel_in                          \n";
r16_agu << "  // 3'd0 : 65536 Point                    \n";
r16_agu << "  // 3'd1 : 32768 Point                    \n";
r16_agu << "  // 3'd2 : 16384 Point                    \n";
r16_agu << "  // 3'd3 :  8192 Point                    \n";
r16_agu << "  // 3'd4 :  4096 Point                    \n";
r16_agu << " input [2:0]             Point_sel_in ;    \n";                            
r16_agu << " input                   rst_n ;           \n";                          
r16_agu << " input                   clk ;             \n";                          
r16_agu << "                                           \n";                          
r16_agu << "                                           \n";                          
r16_agu << " reg   [DC_WIDTH-1:0] data_cnt_reg ; // data counter\n";                 
r16_agu << " reg   [3:0]          RDCsel_cnt_reg ; // RDC select counter \n";        
r16_agu << " reg                  BN_out ;             \n";                                   
r16_agu << " reg   [3:0]          RDC_sel_out ;        \n";                          
r16_agu << " reg   [1:0]          Mul_sel_out ;        \n";                          
r16_agu << " reg   [2:0]          DC_mode_sel_out ;    \n";                          
r16_agu << " reg                  BU_mode_sel_out ;    \n";                          
r16_agu << " reg                  BU_dc_sel_out ;      \n";                          
r16_agu << "                                           \n";                          
r16_agu << " wire [DC_WIDTH-1:0]  data_cnt_wire ;      \n";                          
r16_agu << " wire [3:0]           RDCsel_cnt_wire ;    \n";                          
r16_agu << " wire                 BN_wire ;            \n";      
r16_agu << " wire [3:0]           RDC_sel_wire ;       \n";      
r16_agu << " wire [1:0]           Mul_sel_wire ;       \n";      
r16_agu << " wire [2:0]           DC_mode_sel_wire ;   \n";                           
r16_agu << " wire                 BU_mode_sel_wire ;   \n";                           
r16_agu << " wire                 BU_dc_sel_wire ;     \n";
r16_agu << "                                           \n";
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter\n";
r16_agu <<"  wire                 xor_d0_wire;                  \n";
r16_agu <<"  wire                 xor_d1_wire;                  \n";
r16_agu <<"  wire                 xor_d2_wire;                  \n";
r16_agu <<"  wire                 xor_d3_wire;                  \n";
r16_agu <<"  wire                 xor_d4_wire;                  \n";
r16_agu <<"  wire                 xor_d5_wire;                  \n";
r16_agu <<"  wire                 xor_d6_wire;                  \n";
r16_agu <<"  wire  [SC_WIDTH-1:0] SC_wire ; // stage counter    \n";
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_RR_wire ;                  \n";                                                        
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_RR_wire_4096 ;             \n"; 
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_RR_wire_8192 ;             \n";
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_RR_wire_16384 ;            \n";
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_RR_wire_32768 ;            \n";
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_RR_wire_65536 ;            \n";
r16_agu <<"  wire  [BC_WIDTH-1:0] BR_BC_wire ;                  \n";
r16_agu <<"  wire  [BC_WIDTH-1:0] BC_REORDER_wire ;             \n";
r16_agu << "                                                    \n";
r16_agu << "  // Point_sel_in                                   \n";
r16_agu << "  // 3'd0 : 65536 Point                             \n";
r16_agu << "  // 3'd1 : 32768 Point                             \n";
r16_agu << "  // 3'd2 : 16384 Point                             \n";
r16_agu << "  // 3'd3 :  8192 Point                             \n";
r16_agu << "  // 3'd4 :  4096 Point                             \n";
r16_agu << "                                                    \n";
r16_agu << "  assign  data_cnt_wire = (((AGU_en==1'd1)&&(((data_cnt_reg==DCNT_V1_4096)&&(Point_sel_in==3'd4))||\n";
r16_agu << "                                             ((data_cnt_reg==DCNT_V1_8192)&&(Point_sel_in==3'd3))||\n";
r16_agu << "                                             ((data_cnt_reg==DCNT_V1_16384)&&(Point_sel_in==3'd2))||\n";
r16_agu << "                                             ((data_cnt_reg==DCNT_V1_32768)&&(Point_sel_in==3'd1))||\n";
r16_agu << "                                             ((data_cnt_reg==DCNT_V1_65536)&&(Point_sel_in==3'd0))))||\n";                            
r16_agu << "                          (rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(((data_cnt_reg==DCNT_V2_4096)&&(Point_sel_in==3'd4))||\n";
r16_agu << "                                                              ((data_cnt_reg==DCNT_V2_8192)&&(Point_sel_in==3'd3))||\n";
r16_agu << "                                                              ((data_cnt_reg==DCNT_V2_16384)&&(Point_sel_in==3'd2))||\n";
r16_agu << "                                                              ((data_cnt_reg==DCNT_V2_32768)&&(Point_sel_in==3'd1))||\n";
r16_agu << "                                                              ((data_cnt_reg==DCNT_V2_65536)&&(Point_sel_in==3'd0))))? \n";                     
r16_agu << "                           DC_ZERO : (AGU_en==1'd1)? (data_cnt_reg + 1'd1) :data_cnt_reg;\n";
r16_agu << "  \n";
r16_agu << "  assign  RDCsel_cnt_wire = (((AGU_en==1'd1)&&(((data_cnt_reg==DCNT_V1_4096)&&(Point_sel_in==3'd4))||\n";
r16_agu << "                                               ((data_cnt_reg==DCNT_V1_8192)&&(Point_sel_in==3'd3))||\n";
r16_agu << "                                               ((data_cnt_reg==DCNT_V1_16384)&&(Point_sel_in==3'd2))||\n";
r16_agu << "                                               ((data_cnt_reg==DCNT_V1_32768)&&(Point_sel_in==3'd1))||\n";
r16_agu << "                                               ((data_cnt_reg==DCNT_V1_65536)&&(Point_sel_in == 3'd0))))||\n";
r16_agu << "                            (rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(((data_cnt_reg==DCNT_V2_4096)&&(Point_sel_in==3'd4))||\n";
r16_agu << "                                                                ((data_cnt_reg==DCNT_V2_8192)&&(Point_sel_in==3'd3))||\n";
r16_agu << "                                                                ((data_cnt_reg==DCNT_V2_16384)&&(Point_sel_in==3'd2))||\n";
r16_agu << "                                                                ((data_cnt_reg==DCNT_V2_32768)&&(Point_sel_in==3'd1))||\n";
r16_agu << "                                                                ((data_cnt_reg==DCNT_V2_65536)&&(Point_sel_in==3'd0))))?\n";
r16_agu << "                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))? (RDCsel_cnt_reg + 1'd1) :RDCsel_cnt_reg;\n";
r16_agu << "   \n";
r16_agu << " 	// for Gray code 	 \n";
r16_agu << "   assign xor_d0_wire = data_cnt_reg[11]^data_cnt_reg[10];\n";
r16_agu << "   assign xor_d1_wire = data_cnt_reg[10]^data_cnt_reg[9];\n";
r16_agu << "   assign xor_d2_wire = data_cnt_reg[9]^data_cnt_reg[8];\n";
r16_agu << "   assign xor_d3_wire = data_cnt_reg[8]^data_cnt_reg[7];\n";
r16_agu << "   assign xor_d4_wire = data_cnt_reg[7]^data_cnt_reg[6];\n";
r16_agu << "   assign xor_d5_wire = data_cnt_reg[6]^data_cnt_reg[5];\n";
r16_agu << "   assign xor_d6_wire = data_cnt_reg[5]^data_cnt_reg[4];\n";
//4096
r16_agu <<"  \n";
r16_agu <<"    assign BC_wire =((Point_sel_in == 3'd4)&&(rc_sel_in==1'd1))? ({4'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_4096:DCNT_BP2]}):\n";
r16_agu <<"                   ( Point_sel_in == 3'd4)? ({4'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_4096],xor_d4_wire,xor_d5_wire,xor_d6_wire}):\n";
//8192
r16_agu <<"                    ((Point_sel_in == 3'd3)&&(rc_sel_in==1'd1))? ({3'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_8192:DCNT_BP2]}):\n";
r16_agu <<"                   ( Point_sel_in == 3'd3)? ({3'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_8192],xor_d3_wire,xor_d4_wire,xor_d5_wire,xor_d6_wire}):\n";
//16384
r16_agu <<"                    ((Point_sel_in == 3'd2)&&(rc_sel_in==1'd1))? ({2'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_16384:DCNT_BP2]}):\n";
r16_agu <<"                   ( Point_sel_in == 3'd2)? ({2'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_16384],xor_d2_wire,xor_d3_wire,xor_d4_wire,xor_d5_wire,xor_d6_wire}):\n";
//32768
r16_agu <<"                    ((Point_sel_in == 3'd1)&&(rc_sel_in==1'd1))? ({1'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_32768:DCNT_BP2]}):\n";
r16_agu <<"                   ( Point_sel_in == 3'd1)? ({1'd0,data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_32768],xor_d1_wire,xor_d2_wire,xor_d3_wire,xor_d4_wire,xor_d5_wire,xor_d6_wire}):\n";
//65536
r16_agu <<"                    (rc_sel_in==1'd1)? ({data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_65536:DCNT_BP2]}):\n";
r16_agu <<"                    ({data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3_65536],xor_d0_wire,xor_d1_wire,xor_d2_wire,xor_d3_wire,xor_d4_wire,xor_d5_wire,xor_d6_wire});\n";
r16_agu <<"  \n";
r16_agu <<"   assign SC_wire = (Point_sel_in == 3'd4) ? data_cnt_reg[DCNT_BP5_4096-1:DCNT_BP4_4096] :\n";
r16_agu <<"                    (Point_sel_in == 3'd3) ? data_cnt_reg[DCNT_BP5_8192-1:DCNT_BP4_8192] :\n";
r16_agu <<"                    (Point_sel_in == 3'd2) ? data_cnt_reg[DCNT_BP5_16384-1:DCNT_BP4_16384] :\n";
r16_agu <<"                    (Point_sel_in == 3'd1) ? data_cnt_reg[DCNT_BP5_32768-1:DCNT_BP4_32768] :\n";
r16_agu <<"                    (Point_sel_in == 3'd0) ? data_cnt_reg[DCNT_BP5_65536-1:DCNT_BP4_65536] : 3'd0;\n";
r16_agu <<"  \n";
//---------------------------------------------------------------------------------------------------------------------------------
r16_agu <<"   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                     \n";
r16_agu <<"   assign BC_RR_wire_65536= ((((SC_wire == S0)||(SC_wire == S3))&&(rc_sel_in == 1'b0)))? BC_wire:   \n";
r16_agu <<"                            ((SC_wire == S1)||(rc_sel_in==1'b1)) ? ({BC_wire[3:0],BC_wire[11:4]}) :\n";
r16_agu <<"                            (SC_wire == S2) ? ({BC_wire[7:0],BC_wire[11:8]}): BC_wire;\n";
r16_agu <<"  \n";
r16_agu << "   assign BC_RR_wire_32768 = ((SC_wire == S0)||((SC_wire == S3) && (mode_sel_in == 1'b1)))? BC_wire:\n";
r16_agu << "                             (SC_wire == S1)? \n";
r16_agu << "                             {1'd0,BC_wire[3:0],BC_wire[10:4]} :\n";
r16_agu << "                             (SC_wire == S2)? \n";
r16_agu << "                             {1'd0,BC_wire[6:0],BC_wire[10:7]} :\n";
r16_agu << "                             (((SC_wire == S3) && (mode_sel_in == 1'd0)))? \n";
r16_agu << "                             {1'd0,BC_wire[4:0],BC_wire[10:5]} :\n";
r16_agu << "                             BC_wire;\n";
r16_agu << "   assign BC_RR_wire_16384 = ((SC_wire == S0)||((SC_wire == S3) && (mode_sel_in == 1'd1)))? BC_wire:           \n";
r16_agu << "                             (SC_wire == S1)? ({2'd0,BC_wire[3:0],BC_wire[9:4]} ):                         \n";
r16_agu << "                             ((SC_wire == S2) ||((SC_wire == S3) && (mode_sel_in == 1'd0)))?                   \n";
r16_agu << "                             {2'd0,BC_wire[5:0],BC_wire[9:6]} :                                            \n";
r16_agu << "                             BC_wire;                                                                          \n";
r16_agu << "   assign BC_RR_wire_8192 = ((SC_wire == S0)||((SC_wire == S3) && (mode_sel_in == 1'd1)))? BC_wire:                  \n";
r16_agu << "                            (SC_wire == S1)? ({3'd0,BC_wire[3:0],BC_wire[8:4]} ):                                \n";
r16_agu << "                            ((SC_wire == S2) ||((SC_wire == S3) && (mode_sel_in == 1'd0)))?                          \n";
r16_agu << "                            {3'd0,BC_wire[4:0],BC_wire[8:5]} :                                                   \n";
r16_agu << "                            BC_wire;                                                                                 \n";
r16_agu << "                                                                                                                     \n";
r16_agu << "   assign BC_RR_wire_4096 = (((SC_wire == S0)||(SC_wire == S2))||(rc_sel_in == 1'b1))? BC_wire:    \n";
r16_agu << "                            (SC_wire == S1) ? ({4'd0,BC_wire[3:0],BC_wire[7:4]}) : BC_wire;  \n";
r16_agu <<"  \n";
//----------------------------------------------------------------------------------------------
//r16_agu <<"   assign  BC_RR_wire = ((SC_wire == S0)||(SC_wire == S3)) ? BC_wire:
//r16_agu <<"                        
//r16_agu <<"                        
//r16_agu <<"                        
//r16_agu <<"                        


//----------------------------------------------------------------------------------------------
r16_agu <<"  \n";
r16_agu <<"   assign  BC_RR_wire = (Point_sel_in == 3'd4) ? BC_RR_wire_4096 :\n";
r16_agu <<"                        (Point_sel_in == 3'd3) ? BC_RR_wire_8192 :\n";
r16_agu <<"                        (Point_sel_in == 3'd2) ? BC_RR_wire_16384 :\n";
r16_agu <<"                        (Point_sel_in == 3'd1) ? BC_RR_wire_32768 :\n";
r16_agu <<"                        BC_RR_wire_65536 ;\n";
r16_agu <<"  \n";
//---------------------------------------------------------------------------------------------------------------------------------
r16_agu <<"   // Bit reverse barrel shifter for IFFT\n";
r16_agu <<"   assign BR_BC_wire = (Point_sel_in == 3'd4) ? {4'd0,BC_RR_wire[3:0],BC_RR_wire[7:4]} :\n";
r16_agu <<"                       (Point_sel_in == 3'd3) ? {3'd0,BC_RR_wire[3:0],BC_RR_wire[7:4],BC_RR_wire[8]} :\n";
r16_agu <<"                       (Point_sel_in == 3'd2) ? {2'd0,BC_RR_wire[3:0],BC_RR_wire[7:4],BC_RR_wire[9:8]} :\n";
r16_agu <<"                       (Point_sel_in == 3'd1) ? {1'd0,BC_RR_wire[3:0],BC_RR_wire[7:4],BC_RR_wire[10:8]} :\n";
r16_agu <<"                       (Point_sel_in == 3'd0) ? {BC_RR_wire[3:0],BC_RR_wire[7:4],BC_RR_wire[11:8]} : 12'd0;\n";
r16_agu <<"  \n";
r16_agu <<"   assign BC_REORDER_wire = (Point_sel_in == 3'd3)? {3'b0,BC_RR_wire[7],BC_RR_wire[6:5],BC_RR_wire[0],BC_RR_wire[2:1],BC_RR_wire[4],BC_RR_wire[8],BC_RR_wire[3]} : \n";
r16_agu <<"                            (Point_sel_in == 3'd2)? {2'b0,BC_RR_wire[7],BC_RR_wire[6],BC_RR_wire[1:0],BC_RR_wire[5:4],BC_RR_wire[9:8],BC_RR_wire[3:2]} : \n";
r16_agu <<"                            (Point_sel_in == 3'd1)? {1'b0,BC_RR_wire[7],BC_RR_wire[2:0],BC_RR_wire[4],BC_RR_wire[10:8],BC_RR_wire[3],BC_RR_wire[6:5]} : 12'd0;\n";
r16_agu <<"\n";
r16_agu <<" \n";
r16_agu <<"  assign  BN_wire = ((Point_sel_in != 3'd0)&&(Point_sel_in != 3'd4)&&(rc_sel_in == 1'd1)) ? (^BC_REORDER_wire) : \n";
r16_agu <<"				       (rc_sel_in == 1'd1) ? (^BC_RR_wire) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ;\n";
r16_agu <<"  \n";
r16_agu <<"  assign  RDC_sel_wire  = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg : data_cnt_reg[3:0];\n";
r16_agu <<"  \n";
r16_agu <<"  assign  Mul_sel_wire  = ((Point_sel_in==3'd4)&&(AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S2))? 2'd3 :\n";
r16_agu <<"                          ((Point_sel_in==3'd4)&&(AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S2))? 2'd2 :\n";
r16_agu <<"                          ((Point_sel_in==3'd4)&&(AGU_en==1'b1))? 2'd1 :\n";
r16_agu <<"                          (Point_sel_in==3'd4)? 2'd0 :\n";
r16_agu <<"                          ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S3))? 2'd3 :\n";
r16_agu <<"                          ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S3))? 2'd2 :\n";
r16_agu <<"                          // test for point-wise multiplication\n";
r16_agu <<"                          (AGU_en==1'b1)? 2'd1 : 2'd0 ;\n";
r16_agu <<"  \n";
r16_agu <<"  assign  DC_mode_sel_wire  =  ((Point_sel_in == 3'd4)&&(SC_wire==S2)&&(mode_sel_in==1'b0)) ? 3'd4 :\n";
//8192
r16_agu << "						      ((Point_sel_in == 3'd3)&&(SC_wire==S3)&&(mode_sel_in==1'b0)) ? 3'd5 :\n";
r16_agu << "						      ((Point_sel_in == 3'd3)&&(SC_wire==S2)) ? 3'd1 :\n";
//16384
r16_agu << "						      ((Point_sel_in == 3'd2)&&(SC_wire==S3)&&(mode_sel_in==1'b0)) ? 3'd6 :\n";
r16_agu << "						      ((Point_sel_in == 3'd2)&&(SC_wire==S2)) ? 3'd2 :\n";
//32768
r16_agu << "						      ((Point_sel_in == 3'd1)&&(SC_wire==S3)&&(mode_sel_in==1'b0)) ? 3'd7 :\n";
r16_agu << "						      ((Point_sel_in == 3'd1)&&(SC_wire==S2)) ? 3'd3 :\n";
// 65536 
r16_agu << "                              ((Point_sel_in == 3'd0)&&(SC_wire==S3)&&(mode_sel_in==1'b0)) ? 3'd4 : 3'd0;\n";						  
r16_agu << "  \n";						  
r16_agu << "  assign  BU_mode_sel_wire  = ((Point_sel_in != 3'd4)&&(Point_sel_in != 3'd0)&&(SC_wire == S3)) ? 1'd1 : 1'd0;\n";
r16_agu << "  \n";
r16_agu << "  assign  BU_dc_sel_wire  = ((Point_sel_in != 3'd0)&&(Point_sel_in != 3'd4)&&((SC_wire == S3)&&(mode_sel_in==1'd1)))? 1'd1: 1'd0;\n";
r16_agu << "  \n";
//4096
r16_agu << "  assign  MA   = (((Point_sel_in == 3'd4)||(Point_sel_in == 3'd0))&&(rc_sel_in == 1'd1)) ? (BC_RR_wire[11:1]) : \n";
r16_agu << "                 (((Point_sel_in == 3'd4)||(Point_sel_in == 3'd0))&&(mode_sel_in==1'd1)) ? (BR_BC_wire[11:1]) : \n";
r16_agu << "                  ((Point_sel_in == 3'd4)||(Point_sel_in == 3'd0)) ?  (BC_RR_wire[11:1]) :\n";
r16_agu << "                   (rc_sel_in == 1'd1) ? (BC_REORDER_wire[11:1]) : \n";
r16_agu << "                   (mode_sel_in==1'd1) ? (BR_BC_wire[11:1]) :(BC_RR_wire[11:1]);\n";

//----------------------------------------------------------------------------------------------------
r16_agu << "  \n";
//4096
r16_agu << "  assign  ROMA   = ((Point_sel_in==3'd4)&&(SC_wire==S0))? ({BC_RR_wire[7:0],4'd0}) :\n";
r16_agu << "                   ((Point_sel_in==3'd4)&&(SC_wire==S1))? ({BC_RR_wire[3:0],8'd0}) :\n";
//8192
r16_agu << "                   ((Point_sel_in==3'd3)&&(SC_wire==S0))? ({BC_RR_wire[8:0],3'd0}) :\n";
r16_agu << "                   ((Point_sel_in==3'd3)&&(SC_wire==S1))? ({BC_RR_wire[4:0],7'd0}) :\n";
r16_agu << "                   ((Point_sel_in==3'd3)&&(SC_wire==S2))? ({BC_RR_wire[0],11'd0})  :\n";
// 16384
r16_agu << "                   ((Point_sel_in==3'd2)&&(SC_wire==S0))? ({BC_RR_wire[9:0],2'd0})  :\n";
r16_agu << "                   ((Point_sel_in==3'd2)&&(SC_wire==S1))? ({BC_RR_wire[5:0],6'd0})  :\n";
r16_agu << "                   ((Point_sel_in==3'd2)&&(SC_wire==S2))? ({BC_RR_wire[1:0],10'd0}) :\n";
// 32768
r16_agu << "                   ((Point_sel_in==3'd1)&&(SC_wire==S0))? ({BC_RR_wire[10:0],1'd0}):\n";
r16_agu << "                   ((Point_sel_in==3'd1)&&(SC_wire==S1))? ({BC_RR_wire[6:0],5'd0}) : \n";
r16_agu << "                   ((Point_sel_in==3'd1)&&(SC_wire==S2))? ({BC_RR_wire[2:0],9'd0}) : \n";
//65536
r16_agu << "                   ((Point_sel_in==3'd0)&&(SC_wire==S0))? (BC_RR_wire) :\n";
r16_agu << "                   ((Point_sel_in==3'd0)&&(SC_wire==S1))? ({BC_RR_wire[7:0],4'd0}) : \n";
r16_agu << "                   ((Point_sel_in==3'd0)&&(SC_wire==S2))? ({BC_RR_wire[3:0],8'd0}) : \n";
r16_agu << "                   ROMA_ZERO;\n";
r16_agu << "  \n";
r16_agu << "   always @(posedge clk or negedge rst_n) begin      \n";                                                                     
r16_agu << "   	if(~rst_n) begin                                 \n";                                                                  
r16_agu << "           data_cnt_reg      <= DC_ZERO ;            \n";                                                                     
r16_agu << "           BN_out            <= 1'd0 ;               \n";                                                                     
r16_agu << "           BU_mode_sel_out   <= 1'd0 ;               \n";                                                                     
r16_agu << "           BU_dc_sel_out     <= 1'd0 ;               \n";                                                                     
r16_agu << "           DC_mode_sel_out   <= 3'd0 ;               \n";                                                                     
r16_agu << "           RDC_sel_out       <= 4'd0 ;               \n";                                                                     
r16_agu << "           Mul_sel_out       <= 2'd0 ;               \n";                                                                     
r16_agu << "           RDCsel_cnt_reg    <= 4'd0 ;               \n";                                                                     
r16_agu << "   	end                                              \n";                                                                  
r16_agu << "   	else begin                                       \n";                                                                  
r16_agu << "           data_cnt_reg      <= data_cnt_wire ;      \n";                                                                 
r16_agu << "           BN_out            <= BN_wire ;            \n";                                                                 
r16_agu << "           BU_mode_sel_out   <= BU_mode_sel_wire ;   \n";                                                                 
r16_agu << "           BU_dc_sel_out     <= BU_dc_sel_wire ;     \n";                                                                 
r16_agu << "           DC_mode_sel_out   <= DC_mode_sel_wire ;   \n";                                                                 
r16_agu << "           RDC_sel_out       <= RDC_sel_wire ;       \n";                                                                 
r16_agu << "           Mul_sel_out       <= Mul_sel_wire ;       \n";                                                                 
r16_agu << "           RDCsel_cnt_reg    <= RDCsel_cnt_wire ;    \n";                                                                 
r16_agu << "   	end                                              \n";                                                              
r16_agu << "   end                                               \n";                                                                 
r16_agu << "                                                     \n";                                                                 
r16_agu << " endmodule                                           \n";                                                                 
	 
	 r16_agu.close();	
}	 
void configurable_BFFT::R16_AGU_4096(std::string string_in){
	 std::ofstream r16_agu_4096;
     std::string        string_buf = "/R16_AGU_4096.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu_4096.open(ss.str());
r16_agu_4096 << " `timescale 1 ns/1 ps                                                           \n";
r16_agu_4096 << "  module R16_AGU_4096(BN_wire_out,                                              \n";
r16_agu_4096 << "                       MA,                                                      \n";
r16_agu_4096 << "                       ROMA,                                                    \n";
r16_agu_4096 << "                       Mul_sel_wire_out,                                        \n";
r16_agu_4096 << "                       RDC_sel_wire_out,                                        \n";
r16_agu_4096 << "                       RDCsel_cnt_wire_out,					                 \n";
r16_agu_4096 << "                       data_cnt_wire_out,                                       \n";
r16_agu_4096 << "                       DC_mode_sel_wire_out,//for raidx-2 delay commutator		 \n";		   
r16_agu_4096 << "                       mode_sel_in,                                             \n";
r16_agu_4096 << "                       data_cnt_reg_in,                                         \n";
r16_agu_4096 << "                       RDCsel_cnt_reg_in,					                     \n";
r16_agu_4096 << "                       rc_sel_in,                                               \n";
r16_agu_4096 << "                       AGU_en,                                                  \n";
r16_agu_4096 << "                       wrfd_en_in                                               \n";
r16_agu_4096 << "                       ) ;                                                      \n";
r16_agu_4096 << "  parameter A_WIDTH     = 7;                                                   \n";
r16_agu_4096 << "  //32768 , 10 bits                                                             \n";
r16_agu_4096 << "  //parameter A_WIDTH     = 10;                                                 \n";
r16_agu_4096 << "  //65536 , 15 bits . 32768 just use 14 bits                                    \n";
r16_agu_4096 << "  parameter DC_WIDTH    = 15;                                                   \n";
r16_agu_4096 << "  parameter BC_WIDTH    = 8;                                                    \n";
r16_agu_4096 << "  parameter SC_WIDTH    = 3;                                                    \n";
r16_agu_4096 << "  //65536 12 bits                                                               \n";
r16_agu_4096 << "  parameter ROMA_WIDTH  = 8;                                                   \n";
r16_agu_4096 << "  //32768 11bits                                                                \n";
r16_agu_4096 << "  //parameter ROMA_WIDTH  = 11;                                                 \n";
r16_agu_4096 << "  //                                                                            \n";
r16_agu_4096 << "  parameter DC_ZERO   = 15'h0 ;                                                 \n";
r16_agu_4096 << "  parameter ROMA_ZERO = 12'h0 ;                                                 \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "  parameter S0      = 3'd0;                                                     \n";
r16_agu_4096 << "  parameter S1      = 3'd1;                                                     \n";
r16_agu_4096 << "  parameter S2      = 3'd2;                                                     \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << " parameter DCNT_V1    = 15'd815; //data counter value1 for data_cnt_wire        \n";
r16_agu_4096 << " parameter DCNT_V2    = 15'd132; //data counter value2 for data_cnt_wire        \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "  parameter DCNT_BP1 = 3 ;                                                      \n";
r16_agu_4096 << "  parameter DCNT_BP2 = 4 ;                                                      \n";
r16_agu_4096 << "  //Butterfly counter MSB position                                              \n";
r16_agu_4096 << "  parameter DCNT_BP3 = 7 ;                                                      \n";
r16_agu_4096 << "  //Stage counter LSB position                                                  \n";
r16_agu_4096 << "  parameter DCNT_BP4 = 8 ;                                                      \n";
r16_agu_4096 << "  //Stage counter MSB position                                                  \n";
r16_agu_4096 << "  parameter DCNT_BP5 = 11 ;                                                     \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "  output                  BN_wire_out ;                                         \n";
r16_agu_4096 << "  output [A_WIDTH-1:0]    MA ;                                                  \n";
r16_agu_4096 << "  output [ROMA_WIDTH-1:0] ROMA ;                                                \n";
r16_agu_4096 << "  output [1:0]            Mul_sel_wire_out ;                                    \n";
r16_agu_4096 << "  output [3:0]            RDC_sel_wire_out ;                                    \n";
r16_agu_4096 << "  output [3:0]            RDCsel_cnt_wire_out ;                                 \n";
r16_agu_4096 << "  output [DC_WIDTH-1:0]   data_cnt_wire_out ;                                   \n";
r16_agu_4096 << "  output [2:0]            DC_mode_sel_wire_out ;                                \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "  input [DC_WIDTH-1:0]    data_cnt_reg_in ;                                     \n";
r16_agu_4096 << "  input [3:0]             RDCsel_cnt_reg_in ;                                   \n";
r16_agu_4096 << "  input                   mode_sel_in ;                                         \n";
r16_agu_4096 << "  input                   rc_sel_in ;                                           \n";
r16_agu_4096 << "  input                   AGU_en ;                                              \n";
r16_agu_4096 << "  input                   wrfd_en_in ;                                          \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "  wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                           \n";
r16_agu_4096 << "  //wire  [BC_WIDTH-1:0] BC_REORDER_wire ; // butterfly counter                 \n";
r16_agu_4096 << "  wire                 xor_d0_wire;                                             \n";
r16_agu_4096 << "  wire                 xor_d1_wire;                                             \n";
r16_agu_4096 << "  wire                 xor_d2_wire;                                             \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << "  wire  [SC_WIDTH-1:0] SC_wire ; // stage counter                               \n";
r16_agu_4096 << "  wire  [BC_WIDTH-1:0] BC_RR_wire ;                                             \n";                                                              
r16_agu_4096 << "  wire  [BC_WIDTH-1:0] BR_BC_wire ;                                             \n";                                
r16_agu_4096 << "                                                                                \n";
r16_agu_4096 << " 	//                                                                           \n";                               
r16_agu_4096 << "   assign data_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||   \n";                                      
r16_agu_4096 << "                              ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?                      \n";
r16_agu_4096 << "                              DC_ZERO : (AGU_en==1'd1)?                                 \n";
r16_agu_4096 << "                              (data_cnt_reg_in + 1'd1) : data_cnt_reg_in ;                                           \n";   
r16_agu_4096 << "                                                                                                                     \n";
r16_agu_4096 << " 	//                                                                                                                \n";
r16_agu_4096 << "   assign RDCsel_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||                                      \n"; 
r16_agu_4096 << "                             ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?                       \n";
r16_agu_4096 << "                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))?               \n";
r16_agu_4096 << "                             (RDCsel_cnt_reg_in + 1'd1) : RDCsel_cnt_reg_in ;                                        \n"; 
r16_agu_4096 << " 	                                                                                                                  \n";
r16_agu_4096 << " 	// for Gray code 	                                                                                              \n";
r16_agu_4096 << "   assign xor_d0_wire = data_cnt_reg_in[7]^data_cnt_reg_in[6];                                                       \n";
r16_agu_4096 << "   assign xor_d1_wire = data_cnt_reg_in[6]^data_cnt_reg_in[5];                                                       \n";
r16_agu_4096 << "   assign xor_d2_wire = data_cnt_reg_in[5]^data_cnt_reg_in[4];                                                       \n";
r16_agu_4096 << "                                                                                                                     \n";
r16_agu_4096 << "   assign BC_wire = (rc_sel_in==1'd1)?                                                                               \n";
r16_agu_4096 << "                    ({data_cnt_reg_in[DCNT_BP1:0],data_cnt_reg_in[DCNT_BP3:DCNT_BP2]}):                              \n";
r16_agu_4096 << "                    ({data_cnt_reg_in[DCNT_BP1:0],                                                                   \n";
r16_agu_4096 << "                      data_cnt_reg_in[DCNT_BP3],                                                                     \n";
r16_agu_4096 << "                      xor_d0_wire,                                                                                   \n";
r16_agu_4096 << "                      xor_d1_wire,                                                                                   \n";
r16_agu_4096 << "                      xor_d2_wire                                                                                    \n";
r16_agu_4096 << "                       }) ;                                                                                          \n";
r16_agu_4096 << "                                                                                                                     \n";
r16_agu_4096 << "   //                                                                                                                \n"; 
r16_agu_4096 << "   assign SC_wire = data_cnt_reg_in[DCNT_BP5-1:DCNT_BP4] ;                                                           \n";    
r16_agu_4096 << "                                                                                                                     \n"; 
r16_agu_4096 << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                                \n"; 
r16_agu_4096 << "   assign BC_RR_wire = (((SC_wire == S0)||(SC_wire == S2))||(rc_sel_in == 1'b1))? BC_wire:    \n";
r16_agu_4096 << "                       (SC_wire == S1) ? ({BC_wire[3:0],BC_wire[BC_WIDTH-1:4]}) : BC_wire;  \n";
r16_agu_4096 << "                                                                                                                     \n";
r16_agu_4096 << "   // Bit reverse barrel shifter for IFFT                                                                            \n";
r16_agu_4096 << "   assign BR_BC_wire = {                                                                                             \n";
r16_agu_4096 << "                       BC_RR_wire[3],                                                                                \n";
r16_agu_4096 << "                       BC_RR_wire[2],                                                                                \n";
r16_agu_4096 << "                       BC_RR_wire[1],                                                                                \n";
r16_agu_4096 << "                       BC_RR_wire[0],                                                                                \n";
r16_agu_4096 << "                       BC_RR_wire[7],                                                                                \n";
r16_agu_4096 << "                       BC_RR_wire[6],                                                                                \n";
r16_agu_4096 << "                       BC_RR_wire[5],                                                                                \n";
r16_agu_4096 << "                       BC_RR_wire[4]};                                                                               \n";
r16_agu_4096 << "                                                                                                                     \n"; 
r16_agu_4096 << "   // Bank,  rc_sel_in=1 BN_wire_out=(^BC_RR_wire)                                                                   \n";     
r16_agu_4096 << "   assign BN_wire_out = ( rc_sel_in == 1'd1 ) ? ( ^BC_RR_wire ) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ;  \n";
r16_agu_4096 << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                             \n"; 
r16_agu_4096 << "   assign MA = ( rc_sel_in == 1'd1 ) ? (BC_RR_wire[BC_WIDTH-1:1]) : (mode_sel_in==1'd1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ; \n";
r16_agu_4096 << "                                                                                                                     \n";  
r16_agu_4096 << "   // ROM Address                                                                                                    \n"; 
r16_agu_4096 << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                \n";        
r16_agu_4096 << "                 (SC_wire ==S1)? ({BC_RR_wire[3:0],4'd0}) : \n";
r16_agu_4096 << "                 ROMA_ZERO;   \n";
r16_agu_4096 << "   //                         \n";                                                                                        
r16_agu_4096 << "   assign Mul_sel_wire_out = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S2))? 2'd3 :                \n";
r16_agu_4096 << "                             ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S2))? 2'd2 :                \n";
r16_agu_4096 << "                             // test for point-wise multiplication                                       \n";               
r16_agu_4096 << "                             (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                               \n";                
r16_agu_4096 << "                                                                                                         \n";             
r16_agu_4096 << "   //                                                                                                    \n";             
r16_agu_4096 << "   assign RDC_sel_wire_out = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg_in : data_cnt_reg_in[3:0]  ;            \n";                       
r16_agu_4096 << "                                                                                                         \n";             
r16_agu_4096 << "   // 3 bits\n";
r16_agu_4096 << "   // 3'd0    : radix-16 switcher mode  \n";
r16_agu_4096 << "   // 3'd1    : radix-2 switcher mode  \n";
r16_agu_4096 << "   // 3'd2    : radix-4 switcher mode  \n";
r16_agu_4096 << "   // 3'd3    : radix-8 switcher mode  \n";
r16_agu_4096 << "   // 3'd4    : No transpose (NTT data output are arragned as INTT input)                                \n";
r16_agu_4096 << "   // 3'd5    : radix-2 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_4096 << "   // 3'd6    : radix-4 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_4096 << "   // 3'd7    : radix-8 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_4096 << "   assign DC_mode_sel_wire_out = (( SC_wire == S2) && (mode_sel_in==1'b0)) ? 3'd4 : 3'd0;                \n";
r16_agu_4096 << "                                                                                                         \n";
r16_agu_4096 << "                                                                                                         \n";
r16_agu_4096 << " endmodule                                                                                               \n";             
	 
	 r16_agu_4096.close();	
}	
void configurable_BFFT::R16_AGU_8192(std::string string_in){
	 std::ofstream r16_agu_8192;
     std::string        string_buf = "/R16_AGU_8192.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu_8192.open(ss.str());
r16_agu_8192 << " `timescale 1 ns/1 ps                                                                   \n";
r16_agu_8192 << "  module R16_AGU_8192(BN_wire_out,                                                      \n"; 
r16_agu_8192 << "                       MA,                                                              \n";
r16_agu_8192 << "                       ROMA,                                                            \n";
r16_agu_8192 << "                       Mul_sel_wire_out,                                                \n";
r16_agu_8192 << "                       RDC_sel_wire_out,                                                \n";
r16_agu_8192 << "                       RDCsel_cnt_wire_out,					                         \n";
r16_agu_8192 << "                       data_cnt_wire_out,                                               \n";
r16_agu_8192 << "                       DC_mode_sel_wire_out,//for raidx-2 delay commutator			     \n";   
r16_agu_8192 << "                       BU_mode_sel_wire_out,//for BU control signal                     \n";
r16_agu_8192 << "                       BU_dc_sel_wire_out,//for BU control signal                       \n";
r16_agu_8192 << "                       mode_sel_in,                                                     \n";
r16_agu_8192 << "                       data_cnt_reg_in,                                                 \n";
r16_agu_8192 << "                       RDCsel_cnt_reg_in,					                             \n";
r16_agu_8192 << "                       rc_sel_in,                                                       \n";
r16_agu_8192 << "                       AGU_en,                                                          \n";
r16_agu_8192 << "                       wrfd_en_in                                                       \n";
r16_agu_8192 << "                       ) ;                                                              \n";
r16_agu_8192 << "  parameter A_WIDTH     = 8;                                                           \n";
r16_agu_8192 << "  //32768 , 10 bits                                                                     \n";
r16_agu_8192 << "  //parameter A_WIDTH     = 10;                                                         \n";
r16_agu_8192 << "  //65536 , 15 bits . 32768 just use 14 bits                                            \n";
r16_agu_8192 << "  parameter DC_WIDTH    = 15;                                                           \n";
r16_agu_8192 << "  parameter BC_WIDTH    = 9;                                                            \n";
r16_agu_8192 << "  parameter SC_WIDTH    = 3;                                                            \n";
r16_agu_8192 << "  //65536 12 bits                                                                       \n";
r16_agu_8192 << "  parameter ROMA_WIDTH  = 9;                                                           \n";
r16_agu_8192 << "  //32768 11bits                                                                        \n";
r16_agu_8192 << "  //parameter ROMA_WIDTH  = 11;                                                         \n";
r16_agu_8192 << "  //                                                                                    \n";
r16_agu_8192 << "  parameter DC_ZERO   = 15'h0 ;                                                         \n";
r16_agu_8192 << "  parameter ROMA_ZERO = 12'h0 ;                                                         \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << "  parameter S0      = 3'd0;                                                             \n";
r16_agu_8192 << "  parameter S1      = 3'd1;                                                             \n";
r16_agu_8192 << "  parameter S2      = 3'd2;                                                             \n";
r16_agu_8192 << "  parameter S3      = 3'd3;                                                             \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << " parameter DCNT_V1    = 12'd2095; //data counter value1 for data_cnt_wire               \n";
r16_agu_8192 << " parameter DCNT_V2    = 12'd260; //data counter value2 for data_cnt_wire                \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << "  parameter DCNT_BP1 = 3 ;                                                              \n";
r16_agu_8192 << "  parameter DCNT_BP2 = 4 ;                                                              \n";
r16_agu_8192 << "  //Butterfly counter MSB position                                                      \n";
r16_agu_8192 << "  parameter DCNT_BP3 = 8 ;                                                              \n";
r16_agu_8192 << "  //Stage counter LSB position                                                          \n";
r16_agu_8192 << "  parameter DCNT_BP4 = 9 ;                                                              \n";
r16_agu_8192 << "  //Stage counter MSB position                                                          \n";
r16_agu_8192 << "  parameter DCNT_BP5 = 12 ;                                                             \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << "  output                  BN_wire_out ;                                                 \n";
r16_agu_8192 << "  output [A_WIDTH-1:0]    MA ;                                                          \n";
r16_agu_8192 << "  output [ROMA_WIDTH-1:0] ROMA ;                                                        \n";
r16_agu_8192 << "  output [1:0]            Mul_sel_wire_out ;                                            \n";
r16_agu_8192 << "  output [3:0]            RDC_sel_wire_out ;                                            \n";
r16_agu_8192 << "  output [3:0]            RDCsel_cnt_wire_out ;                                         \n";
r16_agu_8192 << "  output [DC_WIDTH-1:0]   data_cnt_wire_out ;                                           \n";
r16_agu_8192 << "  output [2:0]            DC_mode_sel_wire_out ;                                        \n";
r16_agu_8192 << "  output                  BU_mode_sel_wire_out ;                                        \n";
r16_agu_8192 << "  output                  BU_dc_sel_wire_out ;                                          \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << "  input [DC_WIDTH-1:0]    data_cnt_reg_in ;                                             \n";
r16_agu_8192 << "  input [3:0]             RDCsel_cnt_reg_in ;                                           \n";
r16_agu_8192 << "  input                   mode_sel_in ;                                                 \n";
r16_agu_8192 << "  input                   rc_sel_in ;                                                   \n";
r16_agu_8192 << "  input                   AGU_en ;                                                      \n";
r16_agu_8192 << "  input                   wrfd_en_in ;                                                  \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << "  wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                                   \n";
r16_agu_8192 << "  wire  [BC_WIDTH-1:0] BC_REORDER_wire ; // butterfly counter                           \n";
r16_agu_8192 << "  wire                 xor_d0_wire;                                                     \n";
r16_agu_8192 << "  wire                 xor_d1_wire;                                                     \n";
r16_agu_8192 << "  wire                 xor_d2_wire;                                                     \n";
r16_agu_8192 << "  wire                 xor_d3_wire;                                                     \n";
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << "  wire  [SC_WIDTH-1:0] SC_wire ; // stage counter                                       \n";
r16_agu_8192 << "  wire  [BC_WIDTH-1:0] BC_RR_wire ;                                                     \n";                                                      
r16_agu_8192 << "  wire  [BC_WIDTH-1:0] BR_BC_wire ;                                                     \n";                        
r16_agu_8192 << "                                                                                        \n";
r16_agu_8192 << " 	//                                                                                   \n";                       
r16_agu_8192 << "   assign data_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||           \n";                              
r16_agu_8192 << "                              ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?                      \n";
r16_agu_8192 << "                              DC_ZERO : (AGU_en==1'd1)? \n";
r16_agu_8192 << "                              (data_cnt_reg_in + 1'd1) : data_cnt_reg_in ;                                           \n";   
r16_agu_8192 << "                                                                                                                     \n";
r16_agu_8192 << " 	//                                                                                                                \n";
r16_agu_8192 << "   assign RDCsel_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||                                      \n"; 
r16_agu_8192 << "                             ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?                       \n";
r16_agu_8192 << "                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))?               \n";
r16_agu_8192 << "                             (RDCsel_cnt_reg_in + 1'd1) : RDCsel_cnt_reg_in ;                                        \n"; 
r16_agu_8192 << " 	                                                                                                                  \n";
r16_agu_8192 << " 	// for Gray code 	                                                                                              \n";
r16_agu_8192 << "   assign xor_d0_wire = data_cnt_reg_in[8]^data_cnt_reg_in[7];                                                       \n";
r16_agu_8192 << "   assign xor_d1_wire = data_cnt_reg_in[7]^data_cnt_reg_in[6];                                                       \n";
r16_agu_8192 << "   assign xor_d2_wire = data_cnt_reg_in[6]^data_cnt_reg_in[5];                                                       \n";
r16_agu_8192 << "   assign xor_d3_wire = data_cnt_reg_in[5]^data_cnt_reg_in[4];                                                       \n";
r16_agu_8192 << "                                                                                                                     \n";
r16_agu_8192 << "   assign BC_wire = (rc_sel_in==1'd1)?                                                                               \n";
r16_agu_8192 << "                    ({data_cnt_reg_in[DCNT_BP1:0],data_cnt_reg_in[DCNT_BP3:DCNT_BP2]}):                              \n";
r16_agu_8192 << "                    ({data_cnt_reg_in[DCNT_BP1:0],                                                                   \n";
r16_agu_8192 << "                      data_cnt_reg_in[DCNT_BP3],                                                                     \n";
r16_agu_8192 << "                      xor_d0_wire,                                                                                   \n";
r16_agu_8192 << "                      xor_d1_wire,                                                                                   \n";
r16_agu_8192 << "                      xor_d2_wire,                                                                                   \n";
r16_agu_8192 << "                      xor_d3_wire                                                                                    \n";
r16_agu_8192 << "                       }) ;                                                                                          \n";
r16_agu_8192 << "                                                                                                                     \n";
r16_agu_8192 << "   //                                                                                                                \n"; 
r16_agu_8192 << "   assign SC_wire = data_cnt_reg_in[DCNT_BP5-1:DCNT_BP4] ;                                                           \n";    
r16_agu_8192 << "                                                                                                                     \n"; 
r16_agu_8192 << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                                \n"; 
r16_agu_8192 << "   assign BC_RR_wire = ((SC_wire == S0)||((SC_wire == S3) && (mode_sel_in == 1'd1)))? BC_wire:                       \n";
r16_agu_8192 << "                       (SC_wire == S1)? ({BC_wire[3:0],BC_wire[BC_WIDTH-1:4]} ):                                     \n";
r16_agu_8192 << "                       ((SC_wire == S2) ||((SC_wire == S3) && (mode_sel_in == 1'd0)))?                               \n";
r16_agu_8192 << "                       {BC_wire[4:0],BC_wire[BC_WIDTH-1:5]} :                                                        \n";
r16_agu_8192 << "                       BC_wire;                                                                                      \n";
r16_agu_8192 << "                                                                                                                     \n";
r16_agu_8192 << "   // Bit reverse barrel shifter for IFFT                                                                            \n";
r16_agu_8192 << "   assign BR_BC_wire = {                                                                                             \n";
r16_agu_8192 << "                       BC_RR_wire[3],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[2],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[1],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[0],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[7],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[6],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[5],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[4],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[8]};                                                                               \n";
r16_agu_8192 << "   assign BC_REORDER_wire = {BC_RR_wire[7],                                                                          \n";
r16_agu_8192 << "                       BC_RR_wire[6],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[5],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[0],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[2],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[1],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[4],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[8],                                                                                \n";
r16_agu_8192 << "                       BC_RR_wire[3]};                                                                               \n";
r16_agu_8192 << "                                                                                                                     \n"; 
r16_agu_8192 << "   // Bank,  rc_sel_in=1 BN_wire_out=(^BC_RR_wire)                                                                   \n";     
r16_agu_8192 << "   assign BN_wire_out = ( rc_sel_in == 1'd1 ) ? ( ^BC_REORDER_wire ) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ; \n";
r16_agu_8192 << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                              \n";
r16_agu_8192 << "   assign MA = ( rc_sel_in == 1'd1 ) ? (BC_REORDER_wire[BC_WIDTH-1:1]) : (mode_sel_in==1'd1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ; \n";
r16_agu_8192 << "                                                                                                                     \n"; 
r16_agu_8192 << "   // ROM Address                                                                                                    \n"; 
r16_agu_8192 << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                \n";        
r16_agu_8192 << "                 (SC_wire ==S1)? ({BC_RR_wire[4:0],4'd0}) :                                                          \n";
r16_agu_8192 << "                 (SC_wire ==S2)? ({BC_RR_wire[0],8'd0}) :                                                           \n";
r16_agu_8192 << "                 ROMA_ZERO;                                                                                          \n";
r16_agu_8192 << "   //                                                                                                                \n"; 
r16_agu_8192 << "   assign Mul_sel_wire_out = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S3))? 2'd3 :                            \n";
r16_agu_8192 << "                             ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S3))? 2'd2 :                            \n";
r16_agu_8192 << "                             // test for point-wise multiplication                                                   \n";   
r16_agu_8192 << "                             (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                                           \n";    
r16_agu_8192 << "                                                                                                                     \n"; 
r16_agu_8192 << "   //                                                                                                                \n"; 
r16_agu_8192 << "   assign RDC_sel_wire_out = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg_in : data_cnt_reg_in[3:0]  ;                        \n";           
r16_agu_8192 << "                                                                                                                     \n"; 
r16_agu_8192 << "   //Butterfly unit mode select                                                                                      \n"; 
r16_agu_8192 << "   assign BU_mode_sel_wire_out = ( SC_wire == S3) ? 1'd1 : 1'd0;                                                     \n";
r16_agu_8192 << "   //                                                                                                                \n"; 
r16_agu_8192 << "   assign BU_dc_sel_wire_out   = (( SC_wire == S3) && (mode_sel_in==1'd1) ) ? 1'd1 : 1'd0;                           \n";
r16_agu_8192 << "   // 3 bits                                                                                                         \n";
r16_agu_8192 << "   // 3'd0    : radix-16 switcher mode                                                                               \n";
r16_agu_8192 << "   // 3'd1    : radix-2 switcher mode                                                                                \n";
r16_agu_8192 << "   // 3'd2    : radix-4 switcher mode                                                                                \n";
r16_agu_8192 << "   // 3'd3    : radix-8 switcher mode                                                                                \n";
r16_agu_8192 << "   // 3'd4    : No transpose (NTT data output are arragned as INTT input)                                            \n";
r16_agu_8192 << "   // 3'd5    : radix-2 NTT output (NTT data output are arragned as INTT input)                                      \n";
r16_agu_8192 << "   // 3'd6    : radix-4 NTT output (NTT data output are arragned as INTT input)                                      \n";
r16_agu_8192 << "   // 3'd7    : radix-8 NTT output (NTT data output are arragned as INTT input)                                      \n";
r16_agu_8192 << "   assign DC_mode_sel_wire_out = (( SC_wire == S3) && (mode_sel_in==1'b0)) ? 3'd5:                                   \n";
r16_agu_8192 << "                                  ( SC_wire == S2) ? 3'd1 : 3'd0;                                                    \n";
r16_agu_8192 << "                                                                                                                     \n";
r16_agu_8192 << " endmodule                                                                                                           \n"; 
	 
	 r16_agu_8192.close();	
}	
void configurable_BFFT::R16_AGU_16384(std::string string_in){
	 std::ofstream r16_agu_16384;
     std::string        string_buf = "/R16_AGU_16384.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu_16384.open(ss.str());
r16_agu_16384 << " `timescale 1 ns/1 ps                                                             \n";
r16_agu_16384 << "  module R16_AGU_16384(BN_wire_out,                                               \n";
r16_agu_16384 << "                       MA,                                                        \n";
r16_agu_16384 << "                       ROMA,                                                      \n";
r16_agu_16384 << "                       Mul_sel_wire_out,                                          \n";
r16_agu_16384 << "                       RDC_sel_wire_out,                                          \n";
r16_agu_16384 << "                       RDCsel_cnt_wire_out,					                    \n";
r16_agu_16384 << "                       data_cnt_wire_out,                                         \n";
r16_agu_16384 << "                       DC_mode_sel_wire_out,//for raidx-2 delay commutator		\n";			   
r16_agu_16384 << "                       BU_mode_sel_wire_out,//for BU control signal               \n";
r16_agu_16384 << "                       BU_dc_sel_wire_out,//for BU control signal                 \n";
r16_agu_16384 << "                       mode_sel_in,                                               \n";
r16_agu_16384 << "                       data_cnt_reg_in,                                           \n";
r16_agu_16384 << "                       RDCsel_cnt_reg_in,					                        \n";
r16_agu_16384 << "                       rc_sel_in,                                                 \n";
r16_agu_16384 << "                       AGU_en,                                                    \n";
r16_agu_16384 << "                       wrfd_en_in                                                 \n";
r16_agu_16384 << "                       ) ;                                                        \n";
r16_agu_16384 << "  parameter A_WIDTH     = 9;                                                      \n";
r16_agu_16384 << "  //32768 , 10 bits                                                               \n";
r16_agu_16384 << "  //parameter A_WIDTH     = 10;                                                   \n";
r16_agu_16384 << "  //65536 , 15 bits . 32768 just use 14 bits                                      \n";
r16_agu_16384 << "  parameter DC_WIDTH    = 15;                                                     \n";
r16_agu_16384 << "  parameter BC_WIDTH    = 10;                                                     \n";
r16_agu_16384 << "  parameter SC_WIDTH    = 3;                                                      \n";
r16_agu_16384 << "  //65536 12 bits                                                                 \n";
r16_agu_16384 << "  parameter ROMA_WIDTH  = 10;                                                     \n";
r16_agu_16384 << "  //32768 11bits                                                                  \n";
r16_agu_16384 << "  //parameter ROMA_WIDTH  = 11;                                                   \n";
r16_agu_16384 << "  //                                                                              \n";
r16_agu_16384 << "  parameter DC_ZERO   = 15'h0 ;                                                   \n";
r16_agu_16384 << "  parameter ROMA_ZERO = 12'h0 ;                                                   \n";
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << "  parameter S0      = 3'd0;                                                       \n";
r16_agu_16384 << "  parameter S1      = 3'd1;                                                       \n";
r16_agu_16384 << "  parameter S2      = 3'd2;                                                       \n";
r16_agu_16384 << "  parameter S3      = 3'd3;                                                       \n";
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << " parameter DCNT_V1    = 15'd4143; //data counter value1 for data_cnt_wire         \n";
r16_agu_16384 << " parameter DCNT_V2    = 15'd516; //data counter value2 for data_cnt_wire         \n";
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << "  parameter DCNT_BP1 = 3 ;                                                        \n";
r16_agu_16384 << "  parameter DCNT_BP2 = 4 ;                                                        \n";
r16_agu_16384 << "  //Butterfly counter MSB position                                                \n";
r16_agu_16384 << "  parameter DCNT_BP3 = 9 ;                                                        \n";
r16_agu_16384 << "  //Stage counter LSB position                                                    \n";
r16_agu_16384 << "  parameter DCNT_BP4 = 10 ;                                                       \n";
r16_agu_16384 << "  //Stage counter MSB position                                                    \n";
r16_agu_16384 << "  parameter DCNT_BP5 = 13 ;                                                       \n";
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << "  output                  BN_wire_out ;                                           \n";
r16_agu_16384 << "  output [A_WIDTH-1:0]    MA ;                                                    \n";
r16_agu_16384 << "  output [ROMA_WIDTH-1:0] ROMA ;                                                  \n";
r16_agu_16384 << "  output [1:0]            Mul_sel_wire_out ;                                      \n";
r16_agu_16384 << "  output [3:0]            RDC_sel_wire_out ;                                      \n";
r16_agu_16384 << "  output [3:0]            RDCsel_cnt_wire_out ;                                   \n";
r16_agu_16384 << "  output [DC_WIDTH-1:0]   data_cnt_wire_out ;                                     \n";
r16_agu_16384 << "  output [2:0]            DC_mode_sel_wire_out ;                                  \n";
r16_agu_16384 << "  output                  BU_mode_sel_wire_out ;                                  \n";
r16_agu_16384 << "  output                  BU_dc_sel_wire_out ;                                    \n";
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << "  input [DC_WIDTH-1:0]    data_cnt_reg_in ;                                       \n";
r16_agu_16384 << "  input [3:0]             RDCsel_cnt_reg_in ;                                     \n";
r16_agu_16384 << "  input                   mode_sel_in ;                                           \n";
r16_agu_16384 << "  input                   rc_sel_in ;                                             \n";
r16_agu_16384 << "  input                   AGU_en ;                                                \n";
r16_agu_16384 << "  input                   wrfd_en_in ;                                            \n";
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << "  wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                             \n";
r16_agu_16384 << "  wire  [BC_WIDTH-1:0] BC_REORDER_wire ; // butterfly counter                     \n";
r16_agu_16384 << "  wire                 xor_d0_wire;                                               \n";
r16_agu_16384 << "  wire                 xor_d1_wire;                                               \n";
r16_agu_16384 << "  wire                 xor_d2_wire;                                               \n";
r16_agu_16384 << "  wire                 xor_d3_wire;                                               \n";
r16_agu_16384 << "  wire                 xor_d4_wire;                                               \n";
r16_agu_16384 << "  wire  [SC_WIDTH-1:0] SC_wire ; // stage counter                                 \n";
r16_agu_16384 << "  wire  [BC_WIDTH-1:0] BC_RR_wire ;                                               \n";                                                            
r16_agu_16384 << "  wire  [BC_WIDTH-1:0] BR_BC_wire ;                                               \n";                              
r16_agu_16384 << "                                                                                  \n";
r16_agu_16384 << " 	//                                                                              \n";                            
r16_agu_16384 << "   assign data_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||     \n";                                    
r16_agu_16384 << "                              ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?      \n";                
r16_agu_16384 << "                              DC_ZERO : (AGU_en==1'd1)?                 \n";                
r16_agu_16384 << "                              (data_cnt_reg_in + 1'd1) : data_cnt_reg_in ;                           \n";                   
r16_agu_16384 << "                                                                                                     \n";          
r16_agu_16384 << " 	//                                                                                                 \n";         
r16_agu_16384 << "   assign RDCsel_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||                      \n";                 
r16_agu_16384 << "                             ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?       \n";              
r16_agu_16384 << "                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))?   \n";          
r16_agu_16384 << "                             (RDCsel_cnt_reg_in + 1'd1) : RDCsel_cnt_reg_in ;                            \n";             
r16_agu_16384 << " 	                                                                                                       \n";     
r16_agu_16384 << " 	// for Gray code 	                                                                                   \n";
r16_agu_16384 << "   assign xor_d0_wire = data_cnt_reg_in[9]^data_cnt_reg_in[8];                                           \n";
r16_agu_16384 << "   assign xor_d1_wire = data_cnt_reg_in[8]^data_cnt_reg_in[7];                                           \n";
r16_agu_16384 << "   assign xor_d2_wire = data_cnt_reg_in[7]^data_cnt_reg_in[6];                                           \n";
r16_agu_16384 << "   assign xor_d3_wire = data_cnt_reg_in[6]^data_cnt_reg_in[5];                                           \n";
r16_agu_16384 << "   assign xor_d4_wire = data_cnt_reg_in[5]^data_cnt_reg_in[4];                                           \n";
r16_agu_16384 << "                                                                                                         \n";
r16_agu_16384 << "   assign BC_wire = (rc_sel_in==1'd1)?                                                                   \n";
r16_agu_16384 << "                    ({data_cnt_reg_in[DCNT_BP1:0],data_cnt_reg_in[DCNT_BP3:DCNT_BP2]}):                  \n";
r16_agu_16384 << "                    ({data_cnt_reg_in[DCNT_BP1:0],                                                       \n";
r16_agu_16384 << "                      data_cnt_reg_in[DCNT_BP3],                                                         \n";
r16_agu_16384 << "                      xor_d0_wire,                                                                       \n";
r16_agu_16384 << "                      xor_d1_wire,                                                                       \n";
r16_agu_16384 << "                      xor_d2_wire,                                                                       \n";
r16_agu_16384 << "                      xor_d3_wire,                                                                       \n";
r16_agu_16384 << "                      xor_d4_wire                                                                        \n";
r16_agu_16384 << "                       }) ;                                                                              \n";
r16_agu_16384 << "                                                                                                         \n";
r16_agu_16384 << "   //                                                                                                    \n";             
r16_agu_16384 << "   assign SC_wire = data_cnt_reg_in[DCNT_BP5-1:DCNT_BP4] ;                                               \n";                
r16_agu_16384 << "                                                                                                         \n";             
r16_agu_16384 << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                    \n";             
r16_agu_16384 << "   assign BC_RR_wire = ((SC_wire == S0)||((SC_wire == S3) && (mode_sel_in == 1'd1)))? BC_wire:           \n";
r16_agu_16384 << "                       (SC_wire == S1)? ({BC_wire[3:0],BC_wire[BC_WIDTH-1:4]} ):                         \n";
r16_agu_16384 << "                       ((SC_wire == S2) ||((SC_wire == S3) && (mode_sel_in == 1'd0)))?                   \n";
r16_agu_16384 << "                       {BC_wire[5:0],BC_wire[BC_WIDTH-1:6]} :                                            \n";
r16_agu_16384 << "                       BC_wire;                                                                          \n";
r16_agu_16384 << "                                                                                                         \n";
r16_agu_16384 << "   // Bit reverse barrel shifter for IFFT                                                                \n";
r16_agu_16384 << "   assign BR_BC_wire = {                                                                                 \n";
r16_agu_16384 << "                       BC_RR_wire[3],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[2],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[1],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[0],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[7],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[6],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[5],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[4],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[9],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[8]};                                                                   \n";
r16_agu_16384 << "   assign BC_REORDER_wire = {BC_RR_wire[7],                                                              \n";
r16_agu_16384 << "                       BC_RR_wire[6],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[1],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[0],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[5],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[4],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[9],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[8],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[3],                                                                    \n";
r16_agu_16384 << "                       BC_RR_wire[2]};                                                                   \n";
r16_agu_16384 << "                                                                                                         \n";             
r16_agu_16384 << "   // Bank,  rc_sel_in=1 BN_wire_out=(^BC_RR_wire)                                                       \n";                 
r16_agu_16384 << "   assign BN_wire_out = ( rc_sel_in == 1'd1 ) ? ( ^BC_REORDER_wire ) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ; \n";
r16_agu_16384 << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                              \n";
r16_agu_16384 << "   assign MA = ( rc_sel_in == 1'd1 ) ? (BC_REORDER_wire[BC_WIDTH-1:1]) : (mode_sel_in==1'd1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ; \n";
r16_agu_16384 << "                                                                                                         \n";             
r16_agu_16384 << "   // ROM Address                                                                                        \n";             
r16_agu_16384 << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                    \n";                    
r16_agu_16384 << "                 (SC_wire ==S1)? ({BC_RR_wire[5:0],4'd0}) :                                              \n";
r16_agu_16384 << "                 (SC_wire ==S2)? ({BC_RR_wire[1:0],8'd0}) :                                             \n";
r16_agu_16384 << "                 ROMA_ZERO;                                                                              \n";
r16_agu_16384 << "   //                                                                                                    \n";             
r16_agu_16384 << "   assign Mul_sel_wire_out = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S3))? 2'd3 :                \n";
r16_agu_16384 << "                             ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S3))? 2'd2 :                \n";
r16_agu_16384 << "                             // test for point-wise multiplication                                       \n";               
r16_agu_16384 << "                             (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                               \n";                
r16_agu_16384 << "                                                                                                         \n";             
r16_agu_16384 << "   //                                                                                                    \n";             
r16_agu_16384 << "   assign RDC_sel_wire_out = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg_in : data_cnt_reg_in[3:0]  ;            \n";                       
r16_agu_16384 << "                                                                                                         \n";             
r16_agu_16384 << "   //Butterfly unit mode select                                                                          \n";             
r16_agu_16384 << "   assign BU_mode_sel_wire_out = ( SC_wire == S3) ? 1'd1 : 1'd0;                                         \n";
r16_agu_16384 << "   //                                                                                                    \n";             
r16_agu_16384 << "   assign BU_dc_sel_wire_out   = (( SC_wire == S3) && (mode_sel_in==1'd1) ) ? 1'd1 : 1'd0;               \n";
r16_agu_16384 << "   // 3 bits                                                                                             \n";
r16_agu_16384 << "   // 3'd0    : radix-16 switcher mode                                                                   \n";
r16_agu_16384 << "   // 3'd1    : radix-2 switcher mode                                                                    \n";
r16_agu_16384 << "   // 3'd2    : radix-4 switcher mode                                                                    \n";
r16_agu_16384 << "   // 3'd3    : radix-8 switcher mode                                                                    \n";
r16_agu_16384 << "   // 3'd4    : No transpose (NTT data output are arragned as INTT input)                                \n";
r16_agu_16384 << "   // 3'd5    : radix-2 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_16384 << "   // 3'd6    : radix-4 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_16384 << "   // 3'd7    : radix-8 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_16384 << "   assign DC_mode_sel_wire_out = (( SC_wire == S3) && (mode_sel_in==1'b0)) ? 3'd6:                       \n";
r16_agu_16384 << "                                  ( SC_wire == S2) ? 3'd2 : 3'd0;                                        \n";
r16_agu_16384 << "                                                                                                         \n";
r16_agu_16384 << " endmodule                                                                                               \n";             
	 
	 r16_agu_16384.close();	
}	
void configurable_BFFT::R16_AGU_32768(std::string string_in){
	 std::ofstream r16_agu_32768;
     std::string        string_buf = "/R16_AGU_32768.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu_32768.open(ss.str());
r16_agu_32768 << " `timescale 1 ns/1 ps                                                                     \n";
r16_agu_32768 << "  module R16_AGU_32768(BN_wire_out,                                                       \n";
r16_agu_32768 << "                       MA,                                                                \n";
r16_agu_32768 << "                       ROMA,                                                              \n";
r16_agu_32768 << "                       Mul_sel_wire_out,                                                  \n";
r16_agu_32768 << "                       RDC_sel_wire_out,                                                  \n";
r16_agu_32768 << "                       RDCsel_cnt_wire_out,					                            \n";
r16_agu_32768 << "                       data_cnt_wire_out,                                                 \n";
r16_agu_32768 << "                       DC_mode_sel_wire_out,//for raidx-2 delay commutator				\n";	   
r16_agu_32768 << "                       BU_mode_sel_wire_out,//for BU control signal                       \n";
r16_agu_32768 << "                       BU_dc_sel_wire_out,//for BU control signal                         \n";
r16_agu_32768 << "                       mode_sel_in,                                                       \n";
r16_agu_32768 << "                       data_cnt_reg_in,                                                   \n";
r16_agu_32768 << "                       RDCsel_cnt_reg_in,					                                \n";
r16_agu_32768 << "                       rc_sel_in,                                                         \n";
r16_agu_32768 << "                       AGU_en,                                                            \n";
r16_agu_32768 << "                       wrfd_en_in                                                         \n";
r16_agu_32768 << "                       ) ;                                                                \n";
r16_agu_32768 << "  parameter A_WIDTH     = 10;                                                             \n";
r16_agu_32768 << "  //32768 , 10 bits                                                                       \n";
r16_agu_32768 << "  //parameter A_WIDTH     = 10;                                                           \n";
r16_agu_32768 << "  //65536 , 15 bits . 32768 just use 14 bits                                              \n";
r16_agu_32768 << "  parameter DC_WIDTH    = 15;                                                             \n";
r16_agu_32768 << "  parameter BC_WIDTH    = 11;                                                             \n";
r16_agu_32768 << "  parameter SC_WIDTH    = 3;                                                              \n";
r16_agu_32768 << "  //65536 12 bits                                                                         \n";
r16_agu_32768 << "  parameter ROMA_WIDTH  = 11;                                                             \n";
r16_agu_32768 << "  //32768 11bits                                                                          \n";
r16_agu_32768 << "  //parameter ROMA_WIDTH  = 11;                                                           \n";
r16_agu_32768 << "  //                                                                                      \n";
r16_agu_32768 << "  parameter DC_ZERO   = 15'h0 ;                                                           \n";
r16_agu_32768 << "  parameter ROMA_ZERO = 12'h0 ;                                                           \n";
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "  parameter S0      = 3'd0;                                                               \n";
r16_agu_32768 << "  parameter S1      = 3'd1;                                                               \n";
r16_agu_32768 << "  parameter S2      = 3'd2;                                                               \n";
r16_agu_32768 << "  parameter S3      = 3'd3;                                                               \n";
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "  parameter DCNT_V1    = 15'd8239; //data counter value1 for data_cnt_wire_out            \n";
r16_agu_32768 << "  parameter DCNT_V2    = 15'd1028; //data counter value2 for data_cnt_wire_out            \n";
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "  parameter DCNT_BP1 = 3 ;                                                                \n";
r16_agu_32768 << "  parameter DCNT_BP2 = 4 ;                                                                \n";
r16_agu_32768 << "  //Butterfly counter MSB position                                                        \n";
r16_agu_32768 << "  parameter DCNT_BP3 = 10 ;                                                               \n";
r16_agu_32768 << "  //Stage counter LSB position                                                            \n";
r16_agu_32768 << "  parameter DCNT_BP4 = 11 ;                                                               \n";
r16_agu_32768 << "  //Stage counter MSB position                                                            \n";
r16_agu_32768 << "  parameter DCNT_BP5 = 14 ;                                                               \n";
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "  output                  BN_wire_out ;                                                   \n";
r16_agu_32768 << "  output [A_WIDTH-1:0]    MA ;                                                            \n";
r16_agu_32768 << "  output [ROMA_WIDTH-1:0] ROMA ;                                                          \n";
r16_agu_32768 << "  output [1:0]            Mul_sel_wire_out ;                                              \n";
r16_agu_32768 << "  output [3:0]            RDC_sel_wire_out ;                                              \n";
r16_agu_32768 << "  output [3:0]            RDCsel_cnt_wire_out ;                                           \n";
r16_agu_32768 << "  output [DC_WIDTH-1:0]   data_cnt_wire_out ;                                             \n";
r16_agu_32768 << "  output [2:0]            DC_mode_sel_wire_out ;                                          \n";
r16_agu_32768 << "  output                  BU_mode_sel_wire_out ;                                          \n";
r16_agu_32768 << "  output                  BU_dc_sel_wire_out ;                                            \n";
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "  input [DC_WIDTH-1:0]    data_cnt_reg_in ;                                               \n";
r16_agu_32768 << "  input [3:0]             RDCsel_cnt_reg_in ;                                             \n";
r16_agu_32768 << "  input                   mode_sel_in ;                                                   \n";
r16_agu_32768 << "  input                   rc_sel_in ;                                                     \n";
r16_agu_32768 << "  input                   AGU_en ;                                                        \n";
r16_agu_32768 << "  input                   wrfd_en_in ;                                                    \n";                                                                                       
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "                                                                                          \n";
r16_agu_32768 << "  wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                                     \n";
r16_agu_32768 << "  wire  [BC_WIDTH-1:0] BC_REORDER_wire ; // butterfly counter                             \n";
r16_agu_32768 << "  wire                 xor_d0_wire;                                                       \n";
r16_agu_32768 << "  wire                 xor_d1_wire;                                                       \n";
r16_agu_32768 << "  wire                 xor_d2_wire;                                                       \n";
r16_agu_32768 << "  wire                 xor_d3_wire;                                                       \n";
r16_agu_32768 << "  wire                 xor_d4_wire;                                                       \n";
r16_agu_32768 << "  wire                 xor_d5_wire;                                                       \n";
r16_agu_32768 << "  wire  [SC_WIDTH-1:0] SC_wire ; // stage counter                                         \n";
r16_agu_32768 << "  wire  [BC_WIDTH-1:0] BC_RR_wire ;                                                       \n";                                                    
r16_agu_32768 << "  wire  [BC_WIDTH-1:0] BR_BC_wire ;                                                       \n";                      
r16_agu_32768 << "                                                                                          \n";                     
r16_agu_32768 << "                                                                                          \n";                     
r16_agu_32768 << " 	//                                                                                      \n";                    
r16_agu_32768 << "   assign data_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||             \n";                            
r16_agu_32768 << "                              ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))? \n";                     
r16_agu_32768 << "                              DC_ZERO : (AGU_en==1'd1)?       \n";                          
r16_agu_32768 << "                              (data_cnt_reg_in + 1'd1) : data_cnt_reg_in ;                 \n";                               
r16_agu_32768 << "                                                                                           \n";                    
r16_agu_32768 << " 	//                                                                                       \n";                   
r16_agu_32768 << "   assign RDCsel_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||            \n";                           
r16_agu_32768 << "                             ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))? \n";                    
r16_agu_32768 << "                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))?             \n";
r16_agu_32768 << "                             (RDCsel_cnt_reg_in + 1'd1) : RDCsel_cnt_reg_in ;                                      \n";   
r16_agu_32768 << " 	                                                                                                            \n";
r16_agu_32768 << " 	// for Gray code 	 \n";
r16_agu_32768 << "   assign xor_d0_wire = data_cnt_reg_in[10]^data_cnt_reg_in[9];\n";
r16_agu_32768 << "   assign xor_d1_wire = data_cnt_reg_in[9]^data_cnt_reg_in[8];\n";
r16_agu_32768 << "   assign xor_d2_wire = data_cnt_reg_in[8]^data_cnt_reg_in[7];\n";
r16_agu_32768 << "   assign xor_d3_wire = data_cnt_reg_in[7]^data_cnt_reg_in[6];\n";
r16_agu_32768 << "   assign xor_d4_wire = data_cnt_reg_in[6]^data_cnt_reg_in[5];\n";
r16_agu_32768 << "   assign xor_d5_wire = data_cnt_reg_in[5]^data_cnt_reg_in[4];\n";
r16_agu_32768 << "\n";
r16_agu_32768 << "   assign BC_wire = (rc_sel_in==1'd1)?                                                  \n";
r16_agu_32768 << "                    ({data_cnt_reg_in[DCNT_BP1:0],data_cnt_reg_in[DCNT_BP3:DCNT_BP2]}): \n";      
r16_agu_32768 << "                    ({data_cnt_reg_in[DCNT_BP1:0],                                      \n";   
r16_agu_32768 << "                      data_cnt_reg_in[DCNT_BP3],                                        \n";   
r16_agu_32768 << "                      xor_d0_wire,                                                      \n";
r16_agu_32768 << "                      xor_d1_wire,                                                      \n";
r16_agu_32768 << "                      xor_d2_wire,                                                      \n";
r16_agu_32768 << "                      xor_d3_wire,                                                      \n";
r16_agu_32768 << "                      xor_d4_wire,                                                      \n";
r16_agu_32768 << "                      xor_d5_wire                                                       \n";
r16_agu_32768 << "                       }) ;                                                             \n";
r16_agu_32768 << "                                                                                        \n";
r16_agu_32768 << "   //                                                                                   \n";                              
r16_agu_32768 << "   assign SC_wire = data_cnt_reg_in[DCNT_BP5-1:DCNT_BP4] ;                              \n";                                 
r16_agu_32768 << "                                                                                        \n";                              
r16_agu_32768 << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                   \n";                              
r16_agu_32768 << "   assign BC_RR_wire = ((SC_wire == S0)||((SC_wire == S3) && (mode_sel_in == 1'b1)))? BC_wire:\n";
r16_agu_32768 << "                       (SC_wire == S1)? \n";
r16_agu_32768 << "                       {BC_wire[3:0],BC_wire[BC_WIDTH-1:4]} :\n";
r16_agu_32768 << "                       (SC_wire == S2)? \n";
r16_agu_32768 << "                       {BC_wire[6:0],BC_wire[BC_WIDTH-1:7]} :\n";
r16_agu_32768 << "                       (((SC_wire == S3) && (mode_sel_in == 1'd0)))? \n";
r16_agu_32768 << "                       {BC_wire[4:0],BC_wire[BC_WIDTH-1:5]} :\n";
r16_agu_32768 << "                       BC_wire;\n";
r16_agu_32768 << "\n";
r16_agu_32768 << "   // Bit reverse barrel shifter for IFFT \n";
r16_agu_32768 << "   assign BR_BC_wire = {                                            \n";
r16_agu_32768 << "                       BC_RR_wire[3],                               \n";
r16_agu_32768 << "                       BC_RR_wire[2],                               \n";
r16_agu_32768 << "                       BC_RR_wire[1],                               \n";
r16_agu_32768 << "                       BC_RR_wire[0],                               \n";
r16_agu_32768 << "                       BC_RR_wire[7],                               \n";
r16_agu_32768 << "                       BC_RR_wire[6],                               \n";
r16_agu_32768 << "                       BC_RR_wire[5],                               \n";
r16_agu_32768 << "                       BC_RR_wire[4],                               \n";
r16_agu_32768 << "                       BC_RR_wire[10],                              \n";
r16_agu_32768 << "                       BC_RR_wire[9],                               \n";
r16_agu_32768 << "                       BC_RR_wire[8]};                              \n";
r16_agu_32768 << "   assign BC_REORDER_wire = {BC_RR_wire[7],                         \n";
r16_agu_32768 << "                       BC_RR_wire[2],                               \n";
r16_agu_32768 << "                       BC_RR_wire[1],                               \n";
r16_agu_32768 << "                       BC_RR_wire[0],                               \n";
r16_agu_32768 << "                       BC_RR_wire[4],                               \n";
r16_agu_32768 << "                       BC_RR_wire[10],                              \n";
r16_agu_32768 << "                       BC_RR_wire[9],                               \n";
r16_agu_32768 << "                       BC_RR_wire[8],                               \n";
r16_agu_32768 << "                       BC_RR_wire[3],                               \n";
r16_agu_32768 << "                       BC_RR_wire[6],                               \n";
r16_agu_32768 << "                       BC_RR_wire[5]};                              \n";
r16_agu_32768 << "                                                                    \n";                                                  
r16_agu_32768 << "   // Bank,  rc_sel_in=1 BN_wire_out=(^BC_RR_wire)                  \n";                                                      
r16_agu_32768 << "   assign BN_wire_out = ( rc_sel_in == 1'd1 ) ? ( ^BC_REORDER_wire ) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ; \n";
r16_agu_32768 << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                              \n";
r16_agu_32768 << "   assign MA = ( rc_sel_in == 1'd1 ) ? (BC_REORDER_wire[BC_WIDTH-1:1]) : (mode_sel_in==1'd1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ; \n";
r16_agu_32768 << "                                                                                                                      \n";
r16_agu_32768 << "   // ROM Address                                                                                                     \n";
r16_agu_32768 << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                 \n";   
r16_agu_32768 << "                 (SC_wire ==S1)? ({BC_RR_wire[6:0],4'd0}) :                                                           \n";
r16_agu_32768 << "                 (SC_wire ==S2)? ({BC_RR_wire[2:0],8'd0}) :                                                           \n";
r16_agu_32768 << "                 ROMA_ZERO; \n";
r16_agu_32768 << "   //                       \n";                                                                                          
r16_agu_32768 << "   assign Mul_sel_wire_out = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S3))? 2'd3 :                \n";
r16_agu_32768 << "                             ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S3))? 2'd2 :                \n";
r16_agu_32768 << "                             // test for point-wise multiplication                                       \n";           
r16_agu_32768 << "                             (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                               \n";            
r16_agu_32768 << "                                                                                                         \n";             
r16_agu_32768 << "   //                                                                                                    \n";             
r16_agu_32768 << "   assign RDC_sel_wire_out = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg_in : data_cnt_reg_in[3:0]  ;            \n";                       
r16_agu_32768 << "                                                                                                         \n";             
r16_agu_32768 << "   //Butterfly unit mode select                                                                          \n";             
r16_agu_32768 << "   assign BU_mode_sel_wire_out = ( SC_wire == S3) ? 1'd1 : 1'd0;                                         \n";
r16_agu_32768 << "   //                                                                                                    \n";             
r16_agu_32768 << "   assign BU_dc_sel_wire_out   = (( SC_wire == S3) && (mode_sel_in==1'd1) ) ? 1'd1 : 1'd0;               \n";
r16_agu_32768 << "   // 3 bits                                                                                             \n";
r16_agu_32768 << "   // 3'd0    : radix-16 switcher mode                     \n";
r16_agu_32768 << "   // 3'd1    : radix-2 switcher mode                      \n";
r16_agu_32768 << "   // 3'd2    : radix-4 switcher mode                      \n";
r16_agu_32768 << "   // 3'd3    : radix-8 switcher mode                      \n";
r16_agu_32768 << "   // 3'd4    : No transpose (NTT data output are arragned as INTT input)                  \n";
r16_agu_32768 << "   // 3'd5    : radix-2 NTT output (NTT data output are arragned as INTT input)            \n";
r16_agu_32768 << "   // 3'd6    : radix-4 NTT output (NTT data output are arragned as INTT input)            \n";
r16_agu_32768 << "   // 3'd7    : radix-8 NTT output (NTT data output are arragned as INTT input)            \n";                                 
r16_agu_32768 << "   assign DC_mode_sel_wire_out = (( SC_wire == S3) && (mode_sel_in==1'b0)) ? 3'd7:         \n";
r16_agu_32768 << "                                  ( SC_wire == S2) ? 3'd3 : 3'd0;                          \n";
r16_agu_32768 << "                                                                                           \n";
r16_agu_32768 << " endmodule                                                                                 \n";          
	 
	 r16_agu_32768.close();	
}	
void configurable_BFFT::R16_AGU_65536(std::string string_in){
	 std::ofstream r16_agu_65536;
     std::string        string_buf = "/R16_AGU_65536.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu_65536.open(ss.str());
r16_agu_65536 <<" `timescale 1 ns/1 ps                                                                 \n";
r16_agu_65536 <<"  module R16_AGU_65536(BN_wire_out,                                                   \n";
r16_agu_65536 <<"                       MA,                                                            \n";
r16_agu_65536 <<"                       ROMA,                                                          \n";
r16_agu_65536 <<"                       Mul_sel_wire_out,                                              \n";
r16_agu_65536 <<"                       RDC_sel_wire_out,                                              \n";
r16_agu_65536 <<"                       RDCsel_cnt_wire_out,					                       \n";
r16_agu_65536 <<"                       data_cnt_wire_out,                                             \n";
r16_agu_65536 <<"                       DC_mode_sel_wire_out,//for raidx-2 delay commutator			   \n";	   
r16_agu_65536 <<"                       mode_sel_in,                                                   \n";
r16_agu_65536 <<"                       data_cnt_reg_in,                                               \n";
r16_agu_65536 <<"                       RDCsel_cnt_reg_in,					                           \n";
r16_agu_65536 <<"                       rc_sel_in,                                                     \n";
r16_agu_65536 <<"                       AGU_en,                                                        \n";
r16_agu_65536 <<"                       wrfd_en_in                                                     \n";
r16_agu_65536 <<"                       ) ;                                                            \n";
r16_agu_65536 <<"  parameter A_WIDTH     = 11;                                                         \n";
r16_agu_65536 <<"  parameter DC_WIDTH    = 15;                                                         \n";
r16_agu_65536 <<"  parameter BC_WIDTH    = 12;                                                         \n";
r16_agu_65536 <<"  parameter SC_WIDTH    = 3;                                                          \n";
r16_agu_65536 <<"  //65536 12 bits                                                                     \n";
r16_agu_65536 <<"  parameter ROMA_WIDTH  = 12;                                                         \n";
r16_agu_65536 <<"  parameter DC_ZERO   = 15'h0 ;                                                       \n";
r16_agu_65536 <<"  parameter ROMA_ZERO = 12'h0 ;                                                       \n";
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"  parameter S0      = 3'd0;                                                           \n";
r16_agu_65536 <<"  parameter S1      = 3'd1;                                                           \n";
r16_agu_65536 <<"  parameter S2      = 3'd2;                                                           \n";
r16_agu_65536 <<"  parameter S3      = 3'd3;                                                           \n";
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"  parameter DCNT_V1    = 15'd16431; //data counter value1 for data_cnt_wire           \n";
r16_agu_65536 <<"  parameter DCNT_V2    = 15'd2052; //data counter value2 for data_cnt_wire            \n";
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"  parameter DCNT_BP1 = 3 ;                                                            \n";
r16_agu_65536 <<"  parameter DCNT_BP2 = 4 ;                                                            \n";
r16_agu_65536 <<"  //Butterfly counter MSB position                                                    \n";
r16_agu_65536 <<"  parameter DCNT_BP3 = 11 ;                                                           \n";
r16_agu_65536 <<"  //Stage counter LSB position                                                        \n";
r16_agu_65536 <<"  parameter DCNT_BP4 = 12 ;                                                           \n";
r16_agu_65536 <<"  //Stage counter MSB position                                                        \n";
r16_agu_65536 <<"  parameter DCNT_BP5 = 15 ;                                                           \n";
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"  output                  BN_wire_out ;                                               \n";
r16_agu_65536 <<"  output [A_WIDTH-1:0]    MA ;                                                        \n";
r16_agu_65536 <<"  output [ROMA_WIDTH-1:0] ROMA ;                                                      \n";
r16_agu_65536 <<"  output [1:0]            Mul_sel_wire_out ;                                          \n";
r16_agu_65536 <<"  output [3:0]            RDC_sel_wire_out ;                                          \n";
r16_agu_65536 <<"  output [3:0]            RDCsel_cnt_wire_out ;                                       \n";
r16_agu_65536 <<"  output [DC_WIDTH-1:0]   data_cnt_wire_out ;                                         \n";
r16_agu_65536 <<"  output [2:0]            DC_mode_sel_wire_out ;                                      \n";
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"  input [DC_WIDTH-1:0]    data_cnt_reg_in ;                                           \n";
r16_agu_65536 <<"  input [3:0]             RDCsel_cnt_reg_in ;                                         \n";
r16_agu_65536 <<"  input                   mode_sel_in ;                                               \n";
r16_agu_65536 <<"  input                   rc_sel_in ;                                                 \n";
r16_agu_65536 <<"  input                   AGU_en ;                                                    \n";
r16_agu_65536 <<"  input                   wrfd_en_in ;                                                \n";                                                                                           
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"                                                                                      \n";
r16_agu_65536 <<"  wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                                 \n";
r16_agu_65536 <<"  //wire  [BC_WIDTH-1:0] BC_REORDER_wire ;                                            \n";
r16_agu_65536 <<"  wire                 xor_d0_wire;                                                   \n";
r16_agu_65536 <<"  wire                 xor_d1_wire;                                                   \n";
r16_agu_65536 <<"  wire                 xor_d2_wire;                                                   \n";
r16_agu_65536 <<"  wire                 xor_d3_wire;                                                   \n";
r16_agu_65536 <<"  wire                 xor_d4_wire;                                                   \n";
r16_agu_65536 <<"  wire                 xor_d5_wire;                                                   \n";
r16_agu_65536 <<"  wire                 xor_d6_wire;                                                   \n";
r16_agu_65536 <<"  wire  [SC_WIDTH-1:0] SC_wire ; // stage counter                                     \n";
r16_agu_65536 <<"  wire  [BC_WIDTH-1:0] BC_RR_wire ;                                                   \n";                                                        
r16_agu_65536 <<"  wire  [BC_WIDTH-1:0] BR_BC_wire ;                                                   \n";                          
r16_agu_65536 <<"                                                                                      \n";                         
r16_agu_65536 <<"                                                                                      \n";                         
r16_agu_65536 <<" 	//                                                                                 \n";                         
r16_agu_65536 <<"   assign data_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||         \n";                                
r16_agu_65536 <<"                              ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?\n";
r16_agu_65536 <<"                              DC_ZERO : (AGU_en==1'd1)?                      \n";
r16_agu_65536 <<"                              (data_cnt_reg_in + 1'd1) : data_cnt_reg_in ;\n";
r16_agu_65536 <<"                                                                                                          \n";
r16_agu_65536 <<" 	//                                                                                                     \n";
r16_agu_65536 <<"   assign RDCsel_cnt_wire_out = (((AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V1))||                           \n";
r16_agu_65536 <<"                             ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg_in==DCNT_V2)))?            \n";
r16_agu_65536 <<"                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))?    \n";         
r16_agu_65536 <<"                             (RDCsel_cnt_reg_in + 1'd1) : RDCsel_cnt_reg_in ;                             \n";
r16_agu_65536 <<" 	                                                                                                       \n";
r16_agu_65536 <<" 	// for Gray code 	                                                                                   \n";
r16_agu_65536 <<"   assign xor_d0_wire = data_cnt_reg_in[11]^data_cnt_reg_in[10];                                          \n";
r16_agu_65536 <<"   assign xor_d1_wire = data_cnt_reg_in[10]^data_cnt_reg_in[9];                                           \n";
r16_agu_65536 <<"   assign xor_d2_wire = data_cnt_reg_in[9]^data_cnt_reg_in[8];                                            \n";
r16_agu_65536 <<"   assign xor_d3_wire = data_cnt_reg_in[8]^data_cnt_reg_in[7];                                            \n";
r16_agu_65536 <<"   assign xor_d4_wire = data_cnt_reg_in[7]^data_cnt_reg_in[6];                                            \n";
r16_agu_65536 <<"   assign xor_d5_wire = data_cnt_reg_in[6]^data_cnt_reg_in[5];                                            \n";
r16_agu_65536 <<"   assign xor_d6_wire = data_cnt_reg_in[5]^data_cnt_reg_in[4];                                            \n";
r16_agu_65536 <<"                                                                                                          \n";
r16_agu_65536 <<"   assign BC_wire = (rc_sel_in==1'd1)?                                                                    \n";
r16_agu_65536 <<"                    ({data_cnt_reg_in[DCNT_BP1:0],data_cnt_reg_in[DCNT_BP3:DCNT_BP2]}):                   \n";
r16_agu_65536 <<"                    ({data_cnt_reg_in[DCNT_BP1:0],                                                        \n";
r16_agu_65536 <<"                      data_cnt_reg_in[DCNT_BP3],                                                          \n";
r16_agu_65536 <<"                      xor_d0_wire,                                                                        \n";
r16_agu_65536 <<"                      xor_d1_wire,                                                                        \n";
r16_agu_65536 <<"                      xor_d2_wire,                                                                        \n";
r16_agu_65536 <<"                      xor_d3_wire,                                                                        \n";
r16_agu_65536 <<"                      xor_d4_wire,                                                                        \n";
r16_agu_65536 <<"                      xor_d5_wire,                                                                        \n";
r16_agu_65536 <<"                      xor_d6_wire                                                                         \n";
r16_agu_65536 <<"                       }) ;                                                                               \n";
r16_agu_65536 <<"                                                                                                          \n";
r16_agu_65536 <<"   //                                                                                                     \n";
r16_agu_65536 <<"   assign SC_wire = data_cnt_reg_in[DCNT_BP5-1:DCNT_BP4] ;                                                \n";
r16_agu_65536 <<"                                                                                                          \n";
r16_agu_65536 <<"   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                     \n";
r16_agu_65536 <<"   assign BC_RR_wire = ((SC_wire == S0)||(SC_wire == S3))&&(rc_sel_in == 1'b0)? BC_wire:                  \n";
r16_agu_65536 <<"                       ((SC_wire == S1)||(rc_sel_in==1'b1)) ? ({BC_wire[3:0],BC_wire[BC_WIDTH-1:4]}) :\n";
r16_agu_65536 <<"                       (SC_wire == S2) ? ({BC_wire[7:0],BC_wire[BC_WIDTH-1:8]} ): BC_wire;\n";
r16_agu_65536 <<"\n";
r16_agu_65536 <<"   // Bit reverse barrel shifter for IFFT \n";
r16_agu_65536 <<"   assign BR_BC_wire = { BC_RR_wire[3:0],\n";
r16_agu_65536 <<"                         BC_RR_wire[7:4],\n";
r16_agu_65536 <<"                         BC_RR_wire[11:8]} ;\n";
r16_agu_65536 <<"\n";                                 
r16_agu_65536 <<"   // Bank,  rc_sel_in=1 BN_wire_out=(^BC_RR_wire)  \n"; 
r16_agu_65536 <<"   //Need to modify  \n";
r16_agu_65536 <<"\n";
r16_agu_65536 <<"   assign BN_wire_out = ( rc_sel_in == 1'd1 ) ? ( ^BC_RR_wire ) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ; \n";
r16_agu_65536 <<"   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                              \n";
r16_agu_65536 <<"   assign MA = ( rc_sel_in == 1'd1 ) ? (BC_RR_wire[BC_WIDTH-1:1]) : (mode_sel_in==1'd1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ; \n";
r16_agu_65536 <<"\n";
r16_agu_65536 <<"   // ROM Address                                                                                                     \n";
r16_agu_65536 <<"   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                        \n";
r16_agu_65536 <<"                 (SC_wire ==S1)? ({BC_RR_wire[7:0],4'd0}) : \n";
r16_agu_65536 <<"                 (SC_wire ==S2)? ({BC_RR_wire[3:0],8'd0}) : \n";
r16_agu_65536 <<"                 ROMA_ZERO;\n";
r16_agu_65536 <<"   //                                                                                                                 \n";
r16_agu_65536 <<"   assign Mul_sel_wire_out = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S3))? 2'd3 :                \n";
r16_agu_65536 <<"                             ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S3))? 2'd2 :                \n";
r16_agu_65536 <<"                             // test for point-wise multiplication                                       \n";           
r16_agu_65536 <<"                             (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                               \n";                
r16_agu_65536 <<"                                                                                                         \n";             
r16_agu_65536 <<"   //                                                                                                    \n";             
r16_agu_65536 <<"   assign RDC_sel_wire_out = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg_in : data_cnt_reg_in[3:0]  ;            \n";                       
r16_agu_65536 <<"                                                                                                         \n";             
r16_agu_65536 <<"                                                                                                         \n";
r16_agu_65536 <<"   // 3 bits                                                                                             \n";
r16_agu_65536 <<"   // 3'd0    : radix-16 switcher mode                                                                   \n";
r16_agu_65536 <<"   // 3'd1    : radix-2 switcher mode                                                                    \n";
r16_agu_65536 <<"   // 3'd2    : radix-4 switcher mode                                                                    \n";
r16_agu_65536 <<"   // 3'd3    : radix-8 switcher mode                                                                    \n";
r16_agu_65536 <<"   // 3'd4    : No transpose (NTT data output are arragned as INTT input)                                \n";
r16_agu_65536 <<"   // 3'd5    : radix-2 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_65536 <<"   // 3'd6    : radix-4 NTT output (NTT data output are arragned as INTT input)                          \n";
r16_agu_65536 <<"   // 3'd7    : radix-8 NTT output (NTT data output are arragned as INTT input)                          \n";                                        
r16_agu_65536 <<"   assign DC_mode_sel_wire_out = (( SC_wire == S3) && (mode_sel_in==1'b0)) ? 3'd4: 3'd0;                 \n";
r16_agu_65536 <<"                                                                                                         \n";
r16_agu_65536 <<"                                                                                                         \n";
r16_agu_65536 <<" endmodule                                                                                               \n";             
	 
	 r16_agu_65536.close();	
}	
void configurable_BFFT::R16_WD_buf(std::string string_in){
	 std::ofstream r16_wd_buf;
     std::string        string_buf = "/R16_WD_buf.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_wd_buf.open(ss.str());	
     r16_wd_buf << " `timescale 1 ns/1 ps                                       \n";                                          
     r16_wd_buf << " module R16_WD_buf(RDC0_D_out,                              \n";
     r16_wd_buf << " 			       RDC1_D_out,                              \n";
     r16_wd_buf << " 				   RDC2_D_out,                              \n";
     r16_wd_buf << " 				   RDC3_D_out,                              \n";
     r16_wd_buf << " 				   RDC4_D_out,                              \n";
     r16_wd_buf << " 				   RDC5_D_out,                              \n";
     r16_wd_buf << " 				   RDC6_D_out,                              \n";
     r16_wd_buf << " 				   RDC7_D_out,                              \n";
     r16_wd_buf << " 				   RDC8_D_out,                              \n";
     r16_wd_buf << " 				   RDC9_D_out,                              \n";
     r16_wd_buf << " 				   RDC10_D_out,                             \n";
     r16_wd_buf << " 				   RDC11_D_out,                             \n";
     r16_wd_buf << " 				   RDC12_D_out,                             \n";
     r16_wd_buf << " 				   RDC13_D_out,                             \n";
     r16_wd_buf << " 				   RDC14_D_out,                             \n";
     r16_wd_buf << " 				   RDC15_D_out,                             \n";
     r16_wd_buf << " 		           RDC0_in,                                 \n";
     r16_wd_buf << " 				   RDC1_in,                                 \n";
     r16_wd_buf << " 				   RDC2_in,                                 \n";
     r16_wd_buf << " 				   RDC3_in,                                 \n";
     r16_wd_buf << " 				   RDC4_in,                                 \n";
     r16_wd_buf << " 				   RDC5_in,                                 \n";
     r16_wd_buf << " 				   RDC6_in,                                 \n";
     r16_wd_buf << " 				   RDC7_in,                                 \n";
     r16_wd_buf << " 				   RDC8_in,                                 \n";
     r16_wd_buf << " 				   RDC9_in,                                 \n";
     r16_wd_buf << " 				   RDC10_in,                                \n";
     r16_wd_buf << " 				   RDC11_in,                                \n";
     r16_wd_buf << " 				   RDC12_in,                                \n";
     r16_wd_buf << " 				   RDC13_in,                                \n";
     r16_wd_buf << " 				   RDC14_in,                                \n";
     r16_wd_buf << " 				   RDC15_in,                                \n";
     r16_wd_buf << "                   rst_n,                                   \n";
     r16_wd_buf << "                   clk                                      \n";
     r16_wd_buf << "                   ) ;                                      \n";
     r16_wd_buf << " parameter P_WIDTH     = 64 ;                               \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " parameter P_ZERO    = 64'h0 ;                              \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC0_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC1_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC2_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC3_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC4_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC5_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC6_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC7_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC8_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC9_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC10_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC11_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC12_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC13_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC14_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC15_D_out ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC0_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC1_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC2_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC3_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC4_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC5_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC6_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC7_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC8_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC9_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC10_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC11_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC12_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC13_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC14_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC15_in ;                             \n";
     r16_wd_buf << " input               rst_n ;                                \n";
     r16_wd_buf << " input               clk ;                                  \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D_out ;                           \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " 	//RDC output delay 25 cycles                            \n";
     r16_wd_buf << " 	always @(posedge clk or negedge rst_n) begin            \n";
     r16_wd_buf << " 		if(~rst_n) begin                                    \n";
     r16_wd_buf << " 			RDC0_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC1_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC2_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC3_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC4_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC5_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC6_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC7_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC8_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC9_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC10_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC11_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC12_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC13_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC14_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC15_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 		end                                                 \n";
     r16_wd_buf << " 		else begin                                          \n";
     r16_wd_buf << " 			RDC0_D0_reg  <= RDC0_in ;                       \n";
     r16_wd_buf << " 			RDC0_D1_reg  <= RDC0_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D2_reg  <= RDC0_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D3_reg  <= RDC0_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D4_reg  <= RDC0_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D5_reg  <= RDC0_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D6_reg  <= RDC0_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D7_reg  <= RDC0_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D8_reg  <= RDC0_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D9_reg  <= RDC0_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D10_reg <= RDC0_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D11_reg <= RDC0_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D12_reg <= RDC0_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D13_reg <= RDC0_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D14_reg <= RDC0_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D15_reg <= RDC0_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D16_reg <= RDC0_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D17_reg <= RDC0_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D18_reg <= RDC0_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D19_reg <= RDC0_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D20_reg <= RDC0_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D21_reg <= RDC0_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D22_reg <= RDC0_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D23_reg <= RDC0_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D_out   <= RDC0_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC1_D0_reg  <= RDC1_in ;                       \n";
     r16_wd_buf << " 			RDC1_D1_reg  <= RDC1_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D2_reg  <= RDC1_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D3_reg  <= RDC1_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D4_reg  <= RDC1_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D5_reg  <= RDC1_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D6_reg  <= RDC1_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D7_reg  <= RDC1_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D8_reg  <= RDC1_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D9_reg  <= RDC1_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D10_reg <= RDC1_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D11_reg <= RDC1_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D12_reg <= RDC1_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D13_reg <= RDC1_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D14_reg <= RDC1_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D15_reg <= RDC1_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D16_reg <= RDC1_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D17_reg <= RDC1_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D18_reg <= RDC1_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D19_reg <= RDC1_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D20_reg <= RDC1_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D21_reg <= RDC1_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D22_reg <= RDC1_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D23_reg <= RDC1_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D_out   <= RDC1_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC2_D0_reg  <= RDC2_in ;                       \n";
     r16_wd_buf << " 			RDC2_D1_reg  <= RDC2_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D2_reg  <= RDC2_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D3_reg  <= RDC2_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D4_reg  <= RDC2_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D5_reg  <= RDC2_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D6_reg  <= RDC2_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D7_reg  <= RDC2_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D8_reg  <= RDC2_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D9_reg  <= RDC2_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D10_reg <= RDC2_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D11_reg <= RDC2_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D12_reg <= RDC2_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D13_reg <= RDC2_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D14_reg <= RDC2_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D15_reg <= RDC2_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D16_reg <= RDC2_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D17_reg <= RDC2_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D18_reg <= RDC2_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D19_reg <= RDC2_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D20_reg <= RDC2_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D21_reg <= RDC2_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D22_reg <= RDC2_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D23_reg <= RDC2_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D_out   <= RDC2_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC3_D0_reg  <= RDC3_in ;                       \n";
     r16_wd_buf << " 			RDC3_D1_reg  <= RDC3_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D2_reg  <= RDC3_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D3_reg  <= RDC3_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D4_reg  <= RDC3_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D5_reg  <= RDC3_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D6_reg  <= RDC3_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D7_reg  <= RDC3_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D8_reg  <= RDC3_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D9_reg  <= RDC3_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D10_reg <= RDC3_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D11_reg <= RDC3_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D12_reg <= RDC3_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D13_reg <= RDC3_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D14_reg <= RDC3_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D15_reg <= RDC3_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D16_reg <= RDC3_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D17_reg <= RDC3_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D18_reg <= RDC3_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D19_reg <= RDC3_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D20_reg <= RDC3_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D21_reg <= RDC3_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D22_reg <= RDC3_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D23_reg <= RDC3_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D_out   <= RDC3_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC4_D0_reg  <= RDC4_in ;                       \n";
     r16_wd_buf << " 			RDC4_D1_reg  <= RDC4_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D2_reg  <= RDC4_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D3_reg  <= RDC4_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D4_reg  <= RDC4_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D5_reg  <= RDC4_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D6_reg  <= RDC4_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D7_reg  <= RDC4_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D8_reg  <= RDC4_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D9_reg  <= RDC4_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D10_reg <= RDC4_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D11_reg <= RDC4_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D12_reg <= RDC4_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D13_reg <= RDC4_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D14_reg <= RDC4_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D15_reg <= RDC4_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D16_reg <= RDC4_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D17_reg <= RDC4_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D18_reg <= RDC4_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D19_reg <= RDC4_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D20_reg <= RDC4_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D21_reg <= RDC4_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D22_reg <= RDC4_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D23_reg <= RDC4_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D_out   <= RDC4_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC5_D0_reg  <= RDC5_in ;                       \n";
     r16_wd_buf << " 			RDC5_D1_reg  <= RDC5_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D2_reg  <= RDC5_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D3_reg  <= RDC5_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D4_reg  <= RDC5_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D5_reg  <= RDC5_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D6_reg  <= RDC5_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D7_reg  <= RDC5_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D8_reg  <= RDC5_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D9_reg  <= RDC5_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D10_reg <= RDC5_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D11_reg <= RDC5_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D12_reg <= RDC5_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D13_reg <= RDC5_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D14_reg <= RDC5_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D15_reg <= RDC5_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D16_reg <= RDC5_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D17_reg <= RDC5_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D18_reg <= RDC5_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D19_reg <= RDC5_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D20_reg <= RDC5_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D21_reg <= RDC5_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D22_reg <= RDC5_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D23_reg <= RDC5_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D_out   <= RDC5_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC6_D0_reg  <= RDC6_in ;                       \n";
     r16_wd_buf << " 			RDC6_D1_reg  <= RDC6_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D2_reg  <= RDC6_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D3_reg  <= RDC6_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D4_reg  <= RDC6_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D5_reg  <= RDC6_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D6_reg  <= RDC6_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D7_reg  <= RDC6_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D8_reg  <= RDC6_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D9_reg  <= RDC6_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D10_reg <= RDC6_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D11_reg <= RDC6_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D12_reg <= RDC6_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D13_reg <= RDC6_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D14_reg <= RDC6_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D15_reg <= RDC6_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D16_reg <= RDC6_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D17_reg <= RDC6_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D18_reg <= RDC6_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D19_reg <= RDC6_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D20_reg <= RDC6_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D21_reg <= RDC6_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D22_reg <= RDC6_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D23_reg <= RDC6_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D_out   <= RDC6_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC7_D0_reg  <= RDC7_in ;                       \n";
     r16_wd_buf << " 			RDC7_D1_reg  <= RDC7_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D2_reg  <= RDC7_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D3_reg  <= RDC7_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D4_reg  <= RDC7_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D5_reg  <= RDC7_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D6_reg  <= RDC7_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D7_reg  <= RDC7_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D8_reg  <= RDC7_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D9_reg  <= RDC7_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D10_reg <= RDC7_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D11_reg <= RDC7_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D12_reg <= RDC7_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D13_reg <= RDC7_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D14_reg <= RDC7_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D15_reg <= RDC7_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D16_reg <= RDC7_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D17_reg <= RDC7_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D18_reg <= RDC7_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D19_reg <= RDC7_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D20_reg <= RDC7_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D21_reg <= RDC7_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D22_reg <= RDC7_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D23_reg <= RDC7_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D_out   <= RDC7_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC8_D0_reg  <= RDC8_in ;                       \n";
     r16_wd_buf << " 			RDC8_D1_reg  <= RDC8_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D2_reg  <= RDC8_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D3_reg  <= RDC8_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D4_reg  <= RDC8_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D5_reg  <= RDC8_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D6_reg  <= RDC8_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D7_reg  <= RDC8_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D8_reg  <= RDC8_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D9_reg  <= RDC8_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D10_reg <= RDC8_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D11_reg <= RDC8_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D12_reg <= RDC8_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D13_reg <= RDC8_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D14_reg <= RDC8_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D15_reg <= RDC8_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D16_reg <= RDC8_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D17_reg <= RDC8_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D18_reg <= RDC8_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D19_reg <= RDC8_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D20_reg <= RDC8_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D21_reg <= RDC8_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D22_reg <= RDC8_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D23_reg <= RDC8_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D_out   <= RDC8_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC9_D0_reg  <= RDC9_in ;                       \n";
     r16_wd_buf << " 			RDC9_D1_reg  <= RDC9_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D2_reg  <= RDC9_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D3_reg  <= RDC9_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D4_reg  <= RDC9_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D5_reg  <= RDC9_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D6_reg  <= RDC9_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D7_reg  <= RDC9_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D8_reg  <= RDC9_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D9_reg  <= RDC9_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D10_reg <= RDC9_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D11_reg <= RDC9_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D12_reg <= RDC9_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D13_reg <= RDC9_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D14_reg <= RDC9_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D15_reg <= RDC9_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D16_reg <= RDC9_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D17_reg <= RDC9_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D18_reg <= RDC9_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D19_reg <= RDC9_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D20_reg <= RDC9_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D21_reg <= RDC9_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D22_reg <= RDC9_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D23_reg <= RDC9_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D_out   <= RDC9_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC10_D0_reg  <= RDC10_in ;                     \n";
     r16_wd_buf << " 			RDC10_D1_reg  <= RDC10_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D2_reg  <= RDC10_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D3_reg  <= RDC10_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D4_reg  <= RDC10_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D5_reg  <= RDC10_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D6_reg  <= RDC10_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D7_reg  <= RDC10_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D8_reg  <= RDC10_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D9_reg  <= RDC10_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D10_reg <= RDC10_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D11_reg <= RDC10_D10_reg ;                \n";
     r16_wd_buf << " 			RDC10_D12_reg <= RDC10_D11_reg ;                \n";
     r16_wd_buf << " 			RDC10_D13_reg <= RDC10_D12_reg ;                \n";
     r16_wd_buf << " 			RDC10_D14_reg <= RDC10_D13_reg ;                \n";
     r16_wd_buf << " 			RDC10_D15_reg <= RDC10_D14_reg ;                \n";
     r16_wd_buf << " 			RDC10_D16_reg <= RDC10_D15_reg ;                \n";
     r16_wd_buf << " 			RDC10_D17_reg <= RDC10_D16_reg ;                \n";
     r16_wd_buf << " 			RDC10_D18_reg <= RDC10_D17_reg ;                \n";
     r16_wd_buf << " 			RDC10_D19_reg <= RDC10_D18_reg ;                \n";
     r16_wd_buf << " 			RDC10_D20_reg <= RDC10_D19_reg ;                \n";
     r16_wd_buf << " 			RDC10_D21_reg <= RDC10_D20_reg ;                \n";
     r16_wd_buf << " 			RDC10_D22_reg <= RDC10_D21_reg ;                \n";
     r16_wd_buf << " 			RDC10_D23_reg <= RDC10_D22_reg ;                \n";
     r16_wd_buf << " 			RDC10_D_out   <= RDC10_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC11_D0_reg  <= RDC11_in ;                     \n";
     r16_wd_buf << " 			RDC11_D1_reg  <= RDC11_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D2_reg  <= RDC11_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D3_reg  <= RDC11_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D4_reg  <= RDC11_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D5_reg  <= RDC11_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D6_reg  <= RDC11_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D7_reg  <= RDC11_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D8_reg  <= RDC11_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D9_reg  <= RDC11_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D10_reg <= RDC11_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D11_reg <= RDC11_D10_reg ;                \n";
     r16_wd_buf << " 			RDC11_D12_reg <= RDC11_D11_reg ;                \n";
     r16_wd_buf << " 			RDC11_D13_reg <= RDC11_D12_reg ;                \n";
     r16_wd_buf << " 			RDC11_D14_reg <= RDC11_D13_reg ;                \n";
     r16_wd_buf << " 			RDC11_D15_reg <= RDC11_D14_reg ;                \n";
     r16_wd_buf << " 			RDC11_D16_reg <= RDC11_D15_reg ;                \n";
     r16_wd_buf << " 			RDC11_D17_reg <= RDC11_D16_reg ;                \n";
     r16_wd_buf << " 			RDC11_D18_reg <= RDC11_D17_reg ;                \n";
     r16_wd_buf << " 			RDC11_D19_reg <= RDC11_D18_reg ;                \n";
     r16_wd_buf << " 			RDC11_D20_reg <= RDC11_D19_reg ;                \n";
     r16_wd_buf << " 			RDC11_D21_reg <= RDC11_D20_reg ;                \n";
     r16_wd_buf << " 			RDC11_D22_reg <= RDC11_D21_reg ;                \n";
     r16_wd_buf << " 			RDC11_D23_reg <= RDC11_D22_reg ;                \n";
     r16_wd_buf << " 			RDC11_D_out   <= RDC11_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC12_D0_reg  <= RDC12_in ;                     \n";
     r16_wd_buf << " 			RDC12_D1_reg  <= RDC12_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D2_reg  <= RDC12_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D3_reg  <= RDC12_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D4_reg  <= RDC12_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D5_reg  <= RDC12_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D6_reg  <= RDC12_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D7_reg  <= RDC12_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D8_reg  <= RDC12_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D9_reg  <= RDC12_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D10_reg <= RDC12_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D11_reg <= RDC12_D10_reg ;                \n";
     r16_wd_buf << " 			RDC12_D12_reg <= RDC12_D11_reg ;                \n";
     r16_wd_buf << " 			RDC12_D13_reg <= RDC12_D12_reg ;                \n";
     r16_wd_buf << " 			RDC12_D14_reg <= RDC12_D13_reg ;                \n";
     r16_wd_buf << " 			RDC12_D15_reg <= RDC12_D14_reg ;                \n";
     r16_wd_buf << " 			RDC12_D16_reg <= RDC12_D15_reg ;                \n";
     r16_wd_buf << " 			RDC12_D17_reg <= RDC12_D16_reg ;                \n";
     r16_wd_buf << " 			RDC12_D18_reg <= RDC12_D17_reg ;                \n";
     r16_wd_buf << " 			RDC12_D19_reg <= RDC12_D18_reg ;                \n";
     r16_wd_buf << " 			RDC12_D20_reg <= RDC12_D19_reg ;                \n";
     r16_wd_buf << " 			RDC12_D21_reg <= RDC12_D20_reg ;                \n";
     r16_wd_buf << " 			RDC12_D22_reg <= RDC12_D21_reg ;                \n";
     r16_wd_buf << " 			RDC12_D23_reg <= RDC12_D22_reg ;                \n";
     r16_wd_buf << " 			RDC12_D_out   <= RDC12_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC13_D0_reg  <= RDC13_in ;                     \n";
     r16_wd_buf << " 			RDC13_D1_reg  <= RDC13_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D2_reg  <= RDC13_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D3_reg  <= RDC13_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D4_reg  <= RDC13_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D5_reg  <= RDC13_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D6_reg  <= RDC13_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D7_reg  <= RDC13_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D8_reg  <= RDC13_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D9_reg  <= RDC13_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D10_reg <= RDC13_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D11_reg <= RDC13_D10_reg ;                \n";
     r16_wd_buf << " 			RDC13_D12_reg <= RDC13_D11_reg ;                \n";
     r16_wd_buf << " 			RDC13_D13_reg <= RDC13_D12_reg ;                \n";
     r16_wd_buf << " 			RDC13_D14_reg <= RDC13_D13_reg ;                \n";
     r16_wd_buf << " 			RDC13_D15_reg <= RDC13_D14_reg ;                \n";
     r16_wd_buf << " 			RDC13_D16_reg <= RDC13_D15_reg ;                \n";
     r16_wd_buf << " 			RDC13_D17_reg <= RDC13_D16_reg ;                \n";
     r16_wd_buf << " 			RDC13_D18_reg <= RDC13_D17_reg ;                \n";
     r16_wd_buf << " 			RDC13_D19_reg <= RDC13_D18_reg ;                \n";
     r16_wd_buf << " 			RDC13_D20_reg <= RDC13_D19_reg ;                \n";
     r16_wd_buf << " 			RDC13_D21_reg <= RDC13_D20_reg ;                \n";
     r16_wd_buf << " 			RDC13_D22_reg <= RDC13_D21_reg ;                \n";
     r16_wd_buf << " 			RDC13_D23_reg <= RDC13_D22_reg ;                \n";
     r16_wd_buf << " 			RDC13_D_out   <= RDC13_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC14_D0_reg  <= RDC14_in ;                     \n";
     r16_wd_buf << " 			RDC14_D1_reg  <= RDC14_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D2_reg  <= RDC14_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D3_reg  <= RDC14_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D4_reg  <= RDC14_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D5_reg  <= RDC14_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D6_reg  <= RDC14_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D7_reg  <= RDC14_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D8_reg  <= RDC14_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D9_reg  <= RDC14_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D10_reg <= RDC14_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D11_reg <= RDC14_D10_reg ;                \n";
     r16_wd_buf << " 			RDC14_D12_reg <= RDC14_D11_reg ;                \n";
     r16_wd_buf << " 			RDC14_D13_reg <= RDC14_D12_reg ;                \n";
     r16_wd_buf << " 			RDC14_D14_reg <= RDC14_D13_reg ;                \n";
     r16_wd_buf << " 			RDC14_D15_reg <= RDC14_D14_reg ;                \n";
     r16_wd_buf << " 			RDC14_D16_reg <= RDC14_D15_reg ;                \n";
     r16_wd_buf << " 			RDC14_D17_reg <= RDC14_D16_reg ;                \n";
     r16_wd_buf << " 			RDC14_D18_reg <= RDC14_D17_reg ;                \n";
     r16_wd_buf << " 			RDC14_D19_reg <= RDC14_D18_reg ;                \n";
     r16_wd_buf << " 			RDC14_D20_reg <= RDC14_D19_reg ;                \n";
     r16_wd_buf << " 			RDC14_D21_reg <= RDC14_D20_reg ;                \n";
     r16_wd_buf << " 			RDC14_D22_reg <= RDC14_D21_reg ;                \n";
     r16_wd_buf << " 			RDC14_D23_reg <= RDC14_D22_reg ;                \n";
     r16_wd_buf << " 			RDC14_D_out   <= RDC14_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC15_D0_reg  <= RDC15_in ;                     \n";
     r16_wd_buf << " 			RDC15_D1_reg  <= RDC15_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D2_reg  <= RDC15_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D3_reg  <= RDC15_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D4_reg  <= RDC15_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D5_reg  <= RDC15_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D6_reg  <= RDC15_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D7_reg  <= RDC15_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D8_reg  <= RDC15_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D9_reg  <= RDC15_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D10_reg <= RDC15_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D11_reg <= RDC15_D10_reg ;                \n";
     r16_wd_buf << " 			RDC15_D12_reg <= RDC15_D11_reg ;                \n";
     r16_wd_buf << " 			RDC15_D13_reg <= RDC15_D12_reg ;                \n";
     r16_wd_buf << " 			RDC15_D14_reg <= RDC15_D13_reg ;                \n";
     r16_wd_buf << " 			RDC15_D15_reg <= RDC15_D14_reg ;                \n";
     r16_wd_buf << " 			RDC15_D16_reg <= RDC15_D15_reg ;                \n";
     r16_wd_buf << " 			RDC15_D17_reg <= RDC15_D16_reg ;                \n";
     r16_wd_buf << " 			RDC15_D18_reg <= RDC15_D17_reg ;                \n";
     r16_wd_buf << " 			RDC15_D19_reg <= RDC15_D18_reg ;                \n";
     r16_wd_buf << " 			RDC15_D20_reg <= RDC15_D19_reg ;                \n";
     r16_wd_buf << " 			RDC15_D21_reg <= RDC15_D20_reg ;                \n";
     r16_wd_buf << " 			RDC15_D22_reg <= RDC15_D21_reg ;                \n";
     r16_wd_buf << " 			RDC15_D23_reg <= RDC15_D22_reg ;                \n";
     r16_wd_buf << " 			RDC15_D_out   <= RDC15_D23_reg ;                \n";
     r16_wd_buf << " 			                                                \n";
     r16_wd_buf << " 		end                                                 \n";
     r16_wd_buf << " 	end                                                     \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " endmodule                                                  \n";
	 r16_wd_buf.close();
}
void configurable_BFFT::R16_WAddr(std::string string_in){
	 std::ofstream r16_waddr;
     std::string        string_buf = "/R16_WAddr.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_waddr.open(ss.str());
     r16_waddr << " `timescale 1 ns/1 ps                       \n";
     r16_waddr << " module R16_WAddr(BND_out,                  \n";
     r16_waddr << " 			     WMA_out,                  \n";
     r16_waddr << "                  BN_in,                    \n";
     r16_waddr << " 		         MA_in,                    \n";
     r16_waddr << "                  rst_n,                    \n";
     r16_waddr << "                  clk                       \n";
     r16_waddr << "                  ) ;                       \n";
     r16_waddr << " parameter A_WIDTH   = 11;                  \n";
     r16_waddr << "                                            \n";
     r16_waddr << " parameter A_ZERO    = 11'h0;               \n";
     r16_waddr << " parameter BN_ZERO   = 1'h0 ;                  \n";
     r16_waddr << "                                               \n";
     r16_waddr << "                                               \n";
     r16_waddr << " output              BND_out ;                 \n";
     r16_waddr << " output[A_WIDTH-1:0] WMA_out ;                 \n";
     r16_waddr << "                                               \n";
     r16_waddr << " input               BN_in ;                   \n";
     r16_waddr << " input [A_WIDTH-1:0] MA_in ;                   \n";
     r16_waddr << " input               rst_n ;                   \n";
     r16_waddr << " input               clk ;                     \n";
     r16_waddr << "                                               \n";
     r16_waddr << "                                               \n";
     r16_waddr << " reg                 BN_D0_reg ;               \n";
     r16_waddr << " reg                 BN_D1_reg ;               \n";
     r16_waddr << " reg                 BN_D2_reg ;               \n";
     r16_waddr << " reg                 BN_D3_reg ;               \n";
     r16_waddr << " reg                 BN_D4_reg ;               \n";
     r16_waddr << " reg                 BN_D5_reg ;               \n";
     r16_waddr << " reg                 BN_D6_reg ;               \n";
     r16_waddr << " reg                 BN_D7_reg ;               \n";
     r16_waddr << " reg                 BN_D8_reg ;               \n";
     r16_waddr << " reg                 BN_D9_reg ;               \n";
     r16_waddr << " reg                 BN_D10_reg ;              \n";
     r16_waddr << " reg                 BN_D11_reg ;              \n";
     r16_waddr << " reg                 BN_D12_reg ;              \n";
     r16_waddr << " reg                 BN_D13_reg ;              \n";
     r16_waddr << " reg                 BN_D14_reg ;              \n";
     r16_waddr << " reg                 BN_D15_reg ;              \n";
     r16_waddr << " reg                 BN_D16_reg ;              \n";
     r16_waddr << " reg                 BN_D17_reg ;              \n";
     r16_waddr << " reg                 BN_D18_reg ;              \n";
     r16_waddr << " reg                 BN_D19_reg ;              \n";
     r16_waddr << " reg                 BN_D20_reg ;              \n";
     r16_waddr << " reg                 BN_D21_reg ;              \n";
     r16_waddr << " reg                 BN_D22_reg ;              \n";
     r16_waddr << " reg                 BN_D23_reg ;              \n";
     r16_waddr << " reg                 BN_D24_reg ;              \n";
     r16_waddr << " reg                 BN_D25_reg ;              \n";
     r16_waddr << " reg                 BN_D26_reg ;              \n";
     r16_waddr << " reg                 BN_D27_reg ;              \n";
     r16_waddr << " reg                 BN_D28_reg ;              \n";
     r16_waddr << " reg                 BN_D29_reg ;              \n";
     r16_waddr << " reg                 BN_D30_reg ;              \n";
     r16_waddr << " reg                 BN_D31_reg ;              \n";
     r16_waddr << " reg                 BN_D32_reg ;              \n";
     r16_waddr << " reg                 BN_D33_reg ;              \n";
     r16_waddr << " reg                 BN_D34_reg ;              \n";
     r16_waddr << " reg                 BN_D35_reg ;              \n";
     r16_waddr << " reg                 BN_D36_reg ;              \n";
     r16_waddr << " reg                 BN_D37_reg ;              \n";
     r16_waddr << " reg                 BN_D38_reg ;              \n";
     r16_waddr << " reg                 BN_D39_reg ;              \n";
     r16_waddr << " reg                 BN_D40_reg ;              \n";
     r16_waddr << " reg                 BN_D41_reg ;              \n";
     r16_waddr << " reg                 BN_D42_reg ;              \n";
     r16_waddr << " reg                 BN_D43_reg ;              \n";
     r16_waddr << " reg                 BN_D44_reg ;              \n";
     r16_waddr << " reg                 BN_D45_reg ;              \n";
     r16_waddr << " reg                 BND_out ;                 \n";
     r16_waddr << "                                               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D0_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D1_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D2_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D3_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D4_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D5_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D6_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D7_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D8_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D9_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D10_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D11_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D12_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D13_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D14_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D15_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D16_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D17_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D18_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D19_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D20_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D21_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D22_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D23_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D24_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D25_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D26_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D27_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D28_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D29_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D30_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D31_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D32_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D33_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D34_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D35_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D36_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D37_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D38_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D39_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D40_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D41_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D42_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D43_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D44_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D45_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D46_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] WMA_out ;                 \n";
     r16_waddr << "                                               \n";
     r16_waddr << "                                               \n";
     r16_waddr << " 	//BN delay 47 cycles and MA delay 48 cycles\n";
     r16_waddr << " 	always @(posedge clk or negedge rst_n) begin\n";
     r16_waddr << " 		if(~rst_n) begin                      \n";
     r16_waddr << " 			BN_D0_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D1_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D2_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D3_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D4_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D5_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D6_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D7_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D8_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D9_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D10_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D11_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D12_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D13_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D14_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D15_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D16_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D17_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D18_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D19_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D20_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D21_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D22_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D23_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D24_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D25_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D26_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D27_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D28_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D29_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D30_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D31_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D32_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D33_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D34_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D35_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D36_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D37_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D38_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D39_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D40_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D41_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D42_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D43_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D44_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D45_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BND_out    <= BN_ZERO ;           \n";
     r16_waddr << " 			                                  \n";
     r16_waddr << " 			MA_D0_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D1_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D2_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D3_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D4_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D5_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D6_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D7_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D8_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D9_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D10_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D11_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D12_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D13_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D14_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D15_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D16_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D17_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D18_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D19_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D20_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D21_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D22_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D23_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D24_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D25_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D26_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D27_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D28_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D29_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D30_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D31_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D32_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D33_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D34_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D35_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D36_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D37_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D38_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D39_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D40_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D41_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D42_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D43_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D44_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D45_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D46_reg <= A_ZERO ;            \n";
     r16_waddr << " 			WMA_out    <= A_ZERO ;            \n";
     r16_waddr << " 		end                                   \n";
     r16_waddr << " 		else begin                            \n";
     r16_waddr << " 			BN_D0_reg  <= BN_in ;             \n";
     r16_waddr << " 			BN_D1_reg  <= BN_D0_reg ;         \n";
     r16_waddr << " 			BN_D2_reg  <= BN_D1_reg ;         \n";
     r16_waddr << " 			BN_D3_reg  <= BN_D2_reg ;         \n";
     r16_waddr << " 			BN_D4_reg  <= BN_D3_reg ;         \n";
     r16_waddr << " 			BN_D5_reg  <= BN_D4_reg ;         \n";
     r16_waddr << " 			BN_D6_reg  <= BN_D5_reg ;         \n";
     r16_waddr << " 			BN_D7_reg  <= BN_D6_reg ;         \n";
     r16_waddr << " 			BN_D8_reg  <= BN_D7_reg ;         \n";
     r16_waddr << " 			BN_D9_reg  <= BN_D8_reg ;         \n";
     r16_waddr << " 			BN_D10_reg <= BN_D9_reg ;         \n";
     r16_waddr << " 			BN_D11_reg <= BN_D10_reg ;        \n";
     r16_waddr << " 			BN_D12_reg <= BN_D11_reg ;        \n";
     r16_waddr << " 			BN_D13_reg <= BN_D12_reg ;        \n";
     r16_waddr << " 			BN_D14_reg <= BN_D13_reg ;        \n";
     r16_waddr << " 			BN_D15_reg <= BN_D14_reg ;        \n";
     r16_waddr << " 			BN_D16_reg <= BN_D15_reg ;        \n";
     r16_waddr << " 			BN_D17_reg <= BN_D16_reg ;        \n";
     r16_waddr << " 			BN_D18_reg <= BN_D17_reg ;        \n";
     r16_waddr << " 			BN_D19_reg <= BN_D18_reg ;        \n";
     r16_waddr << " 			BN_D20_reg <= BN_D19_reg ;        \n";
     r16_waddr << " 			BN_D21_reg <= BN_D20_reg ;        \n";
     r16_waddr << " 			BN_D22_reg <= BN_D21_reg ;        \n";
     r16_waddr << " 			BN_D23_reg <= BN_D22_reg ;        \n";
     r16_waddr << " 			BN_D24_reg <= BN_D23_reg ;        \n";
     r16_waddr << " 			BN_D25_reg <= BN_D24_reg ;        \n";
     r16_waddr << " 			BN_D26_reg <= BN_D25_reg ;        \n";
     r16_waddr << " 			BN_D27_reg <= BN_D26_reg ;        \n";
     r16_waddr << " 			BN_D28_reg <= BN_D27_reg ;        \n";
     r16_waddr << " 			BN_D29_reg <= BN_D28_reg ;        \n";
     r16_waddr << " 			BN_D30_reg <= BN_D29_reg ;        \n";
     r16_waddr << " 			BN_D31_reg <= BN_D30_reg ;        \n";
     r16_waddr << " 			BN_D32_reg <= BN_D31_reg ;        \n";
     r16_waddr << " 			BN_D33_reg <= BN_D32_reg ;        \n";
     r16_waddr << " 			BN_D34_reg <= BN_D33_reg ;        \n";
     r16_waddr << " 			BN_D35_reg <= BN_D34_reg ;        \n";
     r16_waddr << " 			BN_D36_reg <= BN_D35_reg ;        \n";
     r16_waddr << " 			BN_D37_reg <= BN_D36_reg ;        \n";
     r16_waddr << " 			BN_D38_reg <= BN_D37_reg ;        \n";
     r16_waddr << " 			BN_D39_reg <= BN_D38_reg ;        \n";
     r16_waddr << " 			BN_D40_reg <= BN_D39_reg ;        \n";
     r16_waddr << " 			BN_D41_reg <= BN_D40_reg ;        \n";
     r16_waddr << " 			BN_D42_reg <= BN_D41_reg ;        \n";
     r16_waddr << " 			BN_D43_reg <= BN_D42_reg ;        \n";
     r16_waddr << " 			BN_D44_reg <= BN_D43_reg ;        \n";
     r16_waddr << " 			BN_D45_reg <= BN_D44_reg ;        \n";
     r16_waddr << " 			BND_out    <= BN_D45_reg ;        \n";
     r16_waddr << " 			                                  \n";
     r16_waddr << " 			MA_D0_reg  <= MA_in ;             \n";
     r16_waddr << " 			MA_D1_reg  <= MA_D0_reg ;         \n";
     r16_waddr << " 			MA_D2_reg  <= MA_D1_reg ;         \n";
     r16_waddr << " 			MA_D3_reg  <= MA_D2_reg ;         \n";
     r16_waddr << " 			MA_D4_reg  <= MA_D3_reg ;         \n";
     r16_waddr << " 			MA_D5_reg  <= MA_D4_reg ;         \n";
     r16_waddr << " 			MA_D6_reg  <= MA_D5_reg ;         \n";
     r16_waddr << " 			MA_D7_reg  <= MA_D6_reg ;         \n";
     r16_waddr << " 			MA_D8_reg  <= MA_D7_reg ;         \n";
     r16_waddr << " 			MA_D9_reg  <= MA_D8_reg ;         \n";
     r16_waddr << " 			MA_D10_reg <= MA_D9_reg ;         \n";
     r16_waddr << " 			MA_D11_reg <= MA_D10_reg ;        \n";
     r16_waddr << " 			MA_D12_reg <= MA_D11_reg ;        \n";
     r16_waddr << " 			MA_D13_reg <= MA_D12_reg ;        \n";
     r16_waddr << " 			MA_D14_reg <= MA_D13_reg ;        \n";
     r16_waddr << " 			MA_D15_reg <= MA_D14_reg ;        \n";
     r16_waddr << " 			MA_D16_reg <= MA_D15_reg ;        \n";
     r16_waddr << " 			MA_D17_reg <= MA_D16_reg ;        \n";
     r16_waddr << " 			MA_D18_reg <= MA_D17_reg ;        \n";
     r16_waddr << " 			MA_D19_reg <= MA_D18_reg ;        \n";
     r16_waddr << " 			MA_D20_reg <= MA_D19_reg ;        \n";
     r16_waddr << " 			MA_D21_reg <= MA_D20_reg ;        \n";
     r16_waddr << " 			MA_D22_reg <= MA_D21_reg ;        \n";
     r16_waddr << " 			MA_D23_reg <= MA_D22_reg ;        \n";
     r16_waddr << " 			MA_D24_reg <= MA_D23_reg ;        \n";
     r16_waddr << " 			MA_D25_reg <= MA_D24_reg ;        \n";
     r16_waddr << " 			MA_D26_reg <= MA_D25_reg ;        \n";
     r16_waddr << " 			MA_D27_reg <= MA_D26_reg ;        \n";
     r16_waddr << " 			MA_D28_reg <= MA_D27_reg ;        \n";
     r16_waddr << " 			MA_D29_reg <= MA_D28_reg ;        \n";
     r16_waddr << " 			MA_D30_reg <= MA_D29_reg ;        \n";
     r16_waddr << " 			MA_D31_reg <= MA_D30_reg ;        \n";
     r16_waddr << " 			MA_D32_reg <= MA_D31_reg ;        \n";
     r16_waddr << " 			MA_D33_reg <= MA_D32_reg ;        \n";
     r16_waddr << " 			MA_D34_reg <= MA_D33_reg ;        \n";
     r16_waddr << " 			MA_D35_reg <= MA_D34_reg ;        \n";
     r16_waddr << " 			MA_D36_reg <= MA_D35_reg ;        \n";
     r16_waddr << " 			MA_D37_reg <= MA_D36_reg ;        \n";
     r16_waddr << " 			MA_D38_reg <= MA_D37_reg ;        \n";
     r16_waddr << " 			MA_D39_reg <= MA_D38_reg ;        \n";
     r16_waddr << " 			MA_D40_reg <= MA_D39_reg ;        \n";
     r16_waddr << " 			MA_D41_reg <= MA_D40_reg ;        \n";
     r16_waddr << " 			MA_D42_reg <= MA_D41_reg ;        \n";
     r16_waddr << " 			MA_D43_reg <= MA_D42_reg ;        \n";
     r16_waddr << " 			MA_D44_reg <= MA_D43_reg ;        \n";
     r16_waddr << " 			MA_D45_reg <= MA_D44_reg ;        \n";
     r16_waddr << " 			MA_D46_reg <= MA_D45_reg ;        \n";
     r16_waddr << " 			WMA_out    <= MA_D46_reg ;        \n";
     r16_waddr << " 		end                                   \n";
     r16_waddr << " 	end                                       \n";
     r16_waddr << "                                               \n";
     r16_waddr << " endmodule                                     \n";	 
     r16_waddr.close();	 
}
void configurable_BFFT::R16_DC(std::string string_in){
	 std::ofstream r16_dc;
     std::string        string_buf = "/R16_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_dc.open(ss.str());
r16_dc << " `timescale 1 ns/1 ps                    \n";                                                     
r16_dc << " module R16_DC(RDC_out0,                 \n";                                                     
r16_dc << " 			  RDC_out1,                 \n";                                                     
r16_dc << " 			  RDC_out2,                 \n";                                                     
r16_dc << " 			  RDC_out3,                 \n";                                                     
r16_dc << " 			  RDC_out4,                 \n";                                                     
r16_dc << " 			  RDC_out5,                 \n";                                                     
r16_dc << " 			  RDC_out6,                 \n";                                                     
r16_dc << " 			  RDC_out7,                 \n";                                                     
r16_dc << " 			  RDC_out8,                 \n";                                                     
r16_dc << " 			  RDC_out9,                 \n";                                                     
r16_dc << " 			  RDC_out10,                \n";                                                     
r16_dc << " 			  RDC_out11,                \n";                                                     
r16_dc << " 			  RDC_out12,                \n";                                                     
r16_dc << " 			  RDC_out13,                \n";                                                     
r16_dc << " 			  RDC_out14,                \n";                                                     
r16_dc << " 			  RDC_out15,                \n";                                                     
r16_dc << "               RDC_in0,                  \n";                                                     
r16_dc << " 		      RDC_in1,                  \n";                                                     
r16_dc << " 			  RDC_in2,                  \n";                                                     
r16_dc << " 			  RDC_in3,                  \n";                                                     
r16_dc << " 			  RDC_in4,                  \n";                                                     
r16_dc << " 			  RDC_in5,                  \n";                                                     
r16_dc << " 			  RDC_in6,                  \n";                                                     
r16_dc << " 			  RDC_in7,                  \n";                                                     
r16_dc << " 			  RDC_in8,                  \n";                                                     
r16_dc << " 			  RDC_in9,                  \n";                                                     
r16_dc << " 			  RDC_in10,                 \n";                                                     
r16_dc << " 			  RDC_in11,                 \n";                                                     
r16_dc << " 			  RDC_in12,                 \n";                                                     
r16_dc << " 			  RDC_in13,                 \n";                                                     
r16_dc << " 			  RDC_in14,                 \n";                                                     
r16_dc << " 			  RDC_in15,                 \n";                                                     
r16_dc << " 			  RDC_sel,                  \n";                                                     
r16_dc << " 			  DC_mode_sel_in,  //for using in radix-8 delay counter      \n";                    
r16_dc << "               rst_n,                                                     \n";                    
r16_dc << "               clk                                                        \n";                    
r16_dc << "               ) ;                                                        \n";                    
r16_dc << " parameter P_WIDTH     = 64 ;                                             \n";                    
r16_dc << "                                                                          \n";                    
r16_dc << " parameter P_ZERO      = 64'h0 ;                                          \n";                    
r16_dc << "                                                                          \n";                    
r16_dc << "                                                                          \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out0 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out1 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out2 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out3 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out4 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out5 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out6 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out7 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out8 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out9 ;                                           \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out10 ;                                          \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out11 ;                                          \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out12 ;                                          \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out13 ;                                          \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out14 ;                                          \n";                    
r16_dc << " output[P_WIDTH-1:0] RDC_out15 ;                                          \n";                    
r16_dc << "                                                                          \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in0 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in1 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in2 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in3 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in4 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in5 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in6 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in7 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in8 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in9 ;                                            \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in10 ;                                           \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in11 ;                                           \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in12 ;                                           \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in13 ;                                           \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in14 ;                                           \n";                    
r16_dc << " input [P_WIDTH-1:0] RDC_in15 ;                                           \n";                    
r16_dc << " input [3:0]         RDC_sel ;                                            \n";
r16_dc << " input [2:0]         DC_mode_sel_in;                                      \n";                   
r16_dc << " input               rst_n ;                                              \n";                    
r16_dc << " input               clk ;                                                \n";                    
r16_dc << "                                                                          \n";
r16_dc << " // 3 bits                                                                \n";
r16_dc << " // DC_mode_sel                                                           \n";
r16_dc << " // 3'd0    : radix-16 switcher mode                                      \n";
r16_dc << " // 3'd1    : radix-2 switcher mode                                       \n";
r16_dc << " // 3'd2    : radix-4 switcher mode                                       \n";
r16_dc << " // 3'd3    : radix-8 switcher mode                                       \n";
r16_dc << " // 3'd4    : No transpose (NTT data output are arragned as INTT input)   \n";
r16_dc << " // 3'd5    : radix-2 NTT output (NTT data output are arragned as INTT input)\n";
r16_dc << " // 3'd6    : radix-4 NTT output (NTT data output are arragned as INTT input)\n";
r16_dc << " // 3'd7    : radix-8 NTT output (NTT data output are arragned as INTT input)\n";  
r16_dc << "                                                                             \n";
r16_dc << "                                                                             \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out3 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out4 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out5 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out6 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out7 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out8 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out9 ;                                              \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out10 ;                                             \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out11 ;                                             \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out12 ;                                             \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out13 ;                                             \n";                 
r16_dc << " reg   [P_WIDTH-1:0] RDC_out14 ;                                             \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_2_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_2_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_3_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_2_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_3_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_4_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_2_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_3_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_4_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_5_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_2_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_3_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_4_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_5_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_6_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_2_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_3_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_4_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_5_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_6_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_7_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_0_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_1_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_2_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_3_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_4_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_5_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_6_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_7_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_8_in_reg ;                                           \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_0_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_1_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_2_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_3_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_4_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_5_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_6_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_7_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_8_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_9_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_0_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_1_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_2_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_3_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_4_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_5_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_6_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_7_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_8_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_9_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_10_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_0_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_1_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_2_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_3_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_4_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_5_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_6_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_7_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_8_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_9_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_10_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_11_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_0_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_1_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_2_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_3_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_4_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_5_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_6_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_7_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_8_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_9_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_10_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_11_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_12_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_0_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_1_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_2_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_3_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_4_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_5_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_6_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_7_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_8_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_9_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_10_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_11_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_12_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D14_13_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_0_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_1_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_2_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_3_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_4_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_5_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_6_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_7_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_8_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_9_in_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_10_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_11_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_12_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_13_in_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D15_14_in_reg ;                                         \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_7_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_8_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_9_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_10_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_11_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_12_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D0_13_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_7_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_8_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_9_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_10_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_11_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D1_12_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_7_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_8_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_9_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_10_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D2_11_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_7_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_8_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_9_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D3_10_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_7_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_8_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D4_9_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_7_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D5_8_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D6_7_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D7_6_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D8_5_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_0_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_1_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_2_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_3_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D9_4_out_reg ;                                          \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_0_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_1_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_2_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D10_3_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_0_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_1_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D11_2_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_0_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D12_1_out_reg ;                                         \n";                 
r16_dc << " reg   [P_WIDTH-1:0] D13_0_out_reg ;                                         \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D4_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D5_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D6_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D7_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D8_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D9_wire ;                                              \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D10_wire ;                                             \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D11_wire ;                                             \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D12_wire ;                                             \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D13_wire ;                                             \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D14_wire ;                                             \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  RDC_out15 ;                                            \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << " //for DC_mode_sel , radix-8 mode                                            \n";  
r16_dc << " wire  [P_WIDTH-1:0]  D8_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D9_1_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D10_2_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D11_3_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D12_4_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D13_5_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D14_6_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D15_7_in_wire ;                                        \n";
r16_dc << " //for DC_mode_sel , radix-4 mode                                            \n";  
r16_dc << " wire  [P_WIDTH-1:0]  D5_1_in_wire ;                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_2_in_wire ;                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_3_in_wire ;                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_1_in_wire ;                                        \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_2_in_wire ;                                        \n";
r16_dc << " wire  [P_WIDTH-1:0]  D15_3_in_wire ;                                        \n";
r16_dc << " //for DC_mode_sel , radix-2 mode                                            \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_1_in_wire  ;                                        \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_1_in_wire  ;                                        \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_1_in_wire ;                                        \n";
r16_dc << " wire  [P_WIDTH-1:0]  D15_1_in_wire ;                                        \n";
r16_dc << " //for DC_mode_sel ,NTT output                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D2_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D3_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D4_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D5_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D6_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D7_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D9_0_in_wire ;                                         \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D10_0_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D11_0_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D12_0_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D13_0_in_wire ;                                        \n";                 
r16_dc << " wire  [P_WIDTH-1:0]  D14_0_in_wire ;                                        \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << "                                                                             \n";                 
r16_dc << " 	//                                                                      \n";                 
r16_dc << " 	assign D0_wire =  (( DC_mode_sel_in == 3'd4 ) ||                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd5 ) ||                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) )  ? RDC_in0 :             \n";
r16_dc << "                      //radix-8                                              \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D7_6_in_reg : \n";
r16_dc << "					  //radix-4  switcher                                                        \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd0 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd1 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd2 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd3 )) ? D3_2_in_reg : \n";
r16_dc << "					  //radix-2 switcher                                                         \n";
r16_dc << "                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'd0)) ? RDC_in0:           \n";
r16_dc << " 	                  ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'd1)) ? D1_0_in_reg: 	 \n";				  
r16_dc << "					  //radix-16 switcher                                                        \n";
r16_dc << "                      (RDC_sel==4'd0)? RDC_in0 :                                              \n";
r16_dc << " 					  (RDC_sel==4'd1)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd11)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D14_13_in_reg :                                      \n";
r16_dc << " 					                    D15_14_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D1_wire =  (( DC_mode_sel_in == 3'd4 ) ||                                         \n";
r16_dc << " 	                   ( DC_mode_sel_in == 3'd5 ) ||                                         \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                                             \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D1_0_in_reg :                           \n";
r16_dc << "					  // radix-8                                                                 \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D6_5_in_reg : \n";
r16_dc << "					  // radix-4                                                                 \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd0 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd1 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd2 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd3 )) ? D2_1_in_reg : \n";
r16_dc << "					  //radix-2                                                                  \n";
r16_dc << "					  ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'd0)) ? D1_0_in_reg:          \n";
r16_dc << " 	                  ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'd1)) ? RDC_in0:          \n";
r16_dc << "					  //radix-16                                                                 \n";
r16_dc << "                      (RDC_sel==4'd0)? D15_14_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd1)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd2)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd12)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D13_12_in_reg : D14_13_in_reg ; // RDC_sel==4'd15    \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D2_wire =  (( DC_mode_sel_in == 3'd1 ) ||                                         \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd4 ) ||                                             \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd5 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                                             \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D2_1_in_reg :                           \n"; 
r16_dc << "					  //radix-8                                                                  \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D5_4_in_reg : \n";
r16_dc << "					  //radix-4                                                                  \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd0 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd1 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd2 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd3 )) ? D1_0_in_reg : \n";					  
r16_dc << "					  //radix-16                                                                 \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd3)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd13)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D12_11_in_reg :                                      \n";
r16_dc << " 					                    D13_12_in_reg ; // RDC_sel==4'd15					 \n";
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D3_wire =  (( DC_mode_sel_in == 3'd1 ) ||                                         \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd4 ) ||                                             \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd5 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                                             \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D3_2_in_reg :                           \n";
r16_dc << "                      //radix-8					                                             \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D4_3_in_reg : \n";
r16_dc << "					  //radix-4                                                                  \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd0 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd1 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd2 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd2 ) && ( RDC_sel[1:0]==2'd3 )) ? RDC_in0 :  	 \n";				  
r16_dc << "					  //radix-16                                                                 \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd4)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd14)? D11_10_in_reg :                                      \n";
r16_dc << " 					                    D12_11_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D4_wire =  (( DC_mode_sel_in == 3'd1 ) ||                                         \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd4 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd5 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                                             \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) )? D4_3_in_reg :                            \n";  
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd5)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D10_9_in_reg :                                       \n";
r16_dc << " 					                    D11_10_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D5_wire =  (( DC_mode_sel_in == 3'd1 ) ||                                         \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd4 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd5 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                                             \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D5_4_in_reg :                           \n";   
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd6)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D9_8_in_reg :                                        \n";
r16_dc << " 					                    D10_9_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D6_wire =  (( DC_mode_sel_in == 3'd1 ) ||                                         \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd4 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd5 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                                             \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D6_5_in_reg :                           \n";   
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd1)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd7)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D8_7_in_reg :                                        \n";
r16_dc << " 					                    D9_8_in_reg ; // RDC_sel==4'd15						 \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D7_wire =  (( DC_mode_sel_in == 3'd1 ) ||                                         \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd4 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd5 ) ||                                             \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd6 ) ||                                             \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D7_6_in_reg :                           \n";   
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd2)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd8)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D7_6_in_reg :                                        \n";
r16_dc << " 					                    D8_7_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D8_wire =  (( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D8_7_in_reg :                           \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd3)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd9)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D6_5_in_reg :                                        \n";
r16_dc << " 					                    D7_6_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D9_wire =  (( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D9_8_in_reg :                           \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd4)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd9)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd10)? D1_0_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D5_4_in_reg :                                        \n";
r16_dc << " 					                    D6_5_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D10_wire = (( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ?D10_9_in_reg :                           \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd5)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd6)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D15_14_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd11)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd12)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D3_2_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D4_3_in_reg :                                       \n";
r16_dc << " 					                     D5_4_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D11_wire = (( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D11_10_in_reg :                         \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd6)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd12)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D3_2_in_reg :                                       \n";
r16_dc << " 					                     D4_3_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D12_wire = (( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D12_11_in_reg :                         \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd7)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd13)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D2_1_in_reg :                                       \n";
r16_dc << " 					                     D3_2_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D13_wire = (( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ?D13_12_in_reg :                          \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd8)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd14)? D1_0_in_reg :                                       \n";
r16_dc << " 					                     D2_1_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D14_wire = (( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ?D14_13_in_reg :                          \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd9)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd10)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd11)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D14_13_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D15_14_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? RDC_in0 :                                            \n";
r16_dc << " 					                    D1_0_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign RDC_out15 =(( DC_mode_sel_in == 3'd1 )  ||                                        \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd2 )  ||                                            \n";
r16_dc << "	                   ( DC_mode_sel_in == 3'd3 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd4 )  ||                                         \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd5 )  ||                                         \n";
r16_dc << "					   ( DC_mode_sel_in == 3'd6 )  ||                                            \n";
r16_dc << "                       ( DC_mode_sel_in == 3'd7 ) ) ? D15_14_in_reg :                         \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D1_0_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D2_1_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd8)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd9)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd10)? D11_10_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D12_11_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd14)? D15_14_in_reg :                                     \n";
r16_dc << " 					                     RDC_in0 ; // RDC_sel==4'd15                         \n";
r16_dc << "                                                                                              \n";
r16_dc << "     //----------------------------                                                           \n";
r16_dc << " 	assign D1_0_in_wire = (DC_mode_sel_in == 3'd5)  ? RDC_in2  :                             \n";
r16_dc << "	                      (DC_mode_sel_in == 3'd6)  ? RDC_in4  :                                 \n";
r16_dc << "	                      (DC_mode_sel_in == 3'd7)  ? RDC_in8  : RDC_in1;                        \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	assign D2_0_in_wire = (DC_mode_sel_in  == 3'd5)  ? RDC_in4  :                            \n";
r16_dc << "	                      (DC_mode_sel_in  == 3'd6)  ? RDC_in8  :                                \n";
r16_dc << "	                      (DC_mode_sel_in  == 3'd7)  ? RDC_in1  :                                \n";
r16_dc << "						  ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in2     :     \n";        
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? D3_0_in_reg :  RDC_in2;\n";                     
r16_dc << "                                                                                              \n"; 
r16_dc << " 	assign D3_0_in_wire = (DC_mode_sel_in == 3'd5)  ? RDC_in6  :                             \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd6)  ? RDC_in12 :                                 \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd7)  ? RDC_in9  : RDC_in3;                        \n"; 
r16_dc << "                                                                                              \n"; 
r16_dc << "    assign D3_1_in_wire = ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? D3_0_in_reg :  \n";        
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in2 :     \n";         
r16_dc << " 	                                                                           D3_0_in_reg ; \n";  
r16_dc << "						                                                                         \n"; 
r16_dc << "                                                                                              \n"; 
r16_dc << " 	assign D4_0_in_wire = (DC_mode_sel_in == 3'd5)  ? RDC_in8  :                             \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd6)  ? RDC_in1  :                                 \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd7)  ? RDC_in2  :                                 \n"; 
r16_dc << "						  //radix-4                                                              \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? RDC_in4 :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D5_0_in_reg : \n";  
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D6_1_in_reg : \n";  
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D7_2_in_reg : \n"; 
r16_dc << "						  //radix-2                                                                 \n"; 
r16_dc << "                          ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in4     :     \n";         
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? D5_0_in_reg :    \n"; 
r16_dc << " 	                                                                           RDC_in4;         \n"; 
r16_dc << "                                                                                                 \n"; 
r16_dc << " 	assign D5_0_in_wire = ( (DC_mode_sel_in == 3'd7) || (DC_mode_sel_in == 3'd5) )  ? RDC_in10 : RDC_in5;\n";  
r16_dc << "\n"; 
r16_dc << "    //radix-4	\n"; 
r16_dc << " 	assign D5_1_in_wire = ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D7_2_in_reg :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? RDC_in4     :  \n";     
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D5_0_in_reg :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D6_1_in_reg :  \n"; 
r16_dc << "                          //radix-2                                                               \n"; 
r16_dc << "						  ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? D5_0_in_reg :         \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in4     :     \n"; 
r16_dc << " 	                                                                           D5_0_in_reg;      \n"; 
r16_dc << "                                                                                                  \n";  
r16_dc << " 	assign D6_0_in_wire = (DC_mode_sel_in  == 3'd5)  ? RDC_in12 :                                \n"; 
r16_dc << "	                      (DC_mode_sel_in  == 3'd6)  ? RDC_in9  :                                    \n"; 
r16_dc << "	                      (DC_mode_sel_in  == 3'd7)  ? RDC_in3  :                                    \n"; 
r16_dc << "						  ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in6     :         \n";     
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? D7_0_in_reg : RDC_in6;\n"; 
r16_dc << "    \n"; 
r16_dc << "	//radix-4\n"; 
r16_dc << " 	assign D6_2_in_wire = ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D6_1_in_reg :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D7_2_in_reg :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? RDC_in4 :      \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D5_0_in_reg :  \n"; 
r16_dc << " 	                                                                              D6_1_in_reg;   \n"; 
r16_dc << "						                                                                             \n"; 
r16_dc << "                                                                                                  \n";  
r16_dc << " 	assign D7_0_in_wire = (DC_mode_sel_in == 3'd5)  ? RDC_in14 :                                 \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd6)  ? RDC_in13 :                                     \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd7)  ? RDC_in11 : RDC_in7;                            \n"; 
r16_dc << "						                                                                             \n"; 
r16_dc << "    assign D7_1_in_wire = ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? D7_0_in_reg :      \n";    
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in6 :         \n";     
r16_dc << " 	                                                                           D7_0_in_reg ;     \n"; 
r16_dc << "						                                                                             \n"; 
r16_dc << "    //radix-4                                                                                     \n"; 
r16_dc << " 	assign D7_3_in_wire = ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D5_0_in_reg :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D6_1_in_reg :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D7_2_in_reg :  \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? RDC_in4 :      \n"; 
r16_dc << " 	                                                                              D7_2_in_reg ;  \n"; 
r16_dc << "                                                                                                  \n";  
r16_dc << " 	assign D8_0_in_wire = (DC_mode_sel_in == 3'd5)  ? RDC_in1 :                                  \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd6)  ? RDC_in2 :                                      \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd7)  ? RDC_in4 :                                      \n"; 
r16_dc << "                          //radix-8						                                         \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? RDC_in8 :     \n";  
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D9_0_in_reg  :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D10_1_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D11_2_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D12_3_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D13_4_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D14_5_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D15_6_in_reg :  \n"; 
r16_dc << "						  //radix-4                                                                    \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? RDC_in8      :   \n";    
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D9_0_in_reg  :   \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D10_1_in_reg :   \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D11_2_in_reg :   \n"; 
r16_dc << "                          //radix-2                                                                 \n"; 
r16_dc << "                          ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0))  ? RDC_in8 :           \n";   
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1))  ? D9_0_in_reg :      \n"; 				  
r16_dc << " 	                                                                            RDC_in8;           \n"; 
r16_dc << "                                                                                                    \n"; 
r16_dc << " 	assign D9_0_in_wire = (DC_mode_sel_in == 3'd5)  ? RDC_in3 :                                    \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd6)  ? RDC_in6  :                                       \n"; 
r16_dc << "	                      (DC_mode_sel_in == 3'd7)  ? RDC_in12 : RDC_in9;                              \n"; 
r16_dc << "                                                                                                    \n"; 
r16_dc << "                           //radix-8						                                           \n"; 
r16_dc << " 	assign D9_1_in_wire = (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D15_6_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? RDC_in8      :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D9_0_in_reg  :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D10_1_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D11_2_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D12_3_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D13_4_in_reg :  \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D14_5_in_reg :  \n"; 
r16_dc << "                          //radix-4                                                                 \n"; 
r16_dc << "                          ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D11_2_in_reg :    \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? RDC_in8      :   \n";    
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D9_0_in_reg  :   \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D10_1_in_reg :   \n"; 
r16_dc << "                          //radix-2                                                                 \n"; 
r16_dc << "                          ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ?  D9_0_in_reg :       \n";   
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ?  RDC_in8 :  		   \n"; 		  
r16_dc << " 	                                                                            D9_0_in_reg;       \n"; 
r16_dc << "                                                                                                    \n"; 
r16_dc << " 	assign D10_0_in_wire = ((DC_mode_sel_in == 3'd5) || (DC_mode_sel_in == 3'd7) ) ? RDC_in5 :     \n"; 
r16_dc << "	                       ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in10 :             \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? D11_0_in_reg : RDC_in10;\n"; 
r16_dc << "                                                                                                         \n"; 
r16_dc << " 	assign D10_2_in_wire =(( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D14_5_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D15_6_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? RDC_in8      :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D9_0_in_reg  :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D10_1_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D11_2_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D12_3_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D13_4_in_reg :       \n"; 
r16_dc << "						  //radix-4                                                                         \n"; 
r16_dc << "                          (( DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D10_1_in_reg :        \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D11_2_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? RDC_in8      :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D9_0_in_reg  : 	    \n"; 			  
r16_dc << " 	                                                                               D10_1_in_reg ;       \n"; 
r16_dc << " 	assign D11_0_in_wire = (DC_mode_sel_in == 3'd5) ? RDC_in7  :                                        \n"; 
r16_dc << "	                       (DC_mode_sel_in == 3'd6) ? RDC_in14 :                                            \n"; 
r16_dc << "	                       (DC_mode_sel_in == 3'd7) ? RDC_in13 : RDC_in11;                                  \n"; 
r16_dc << "						                                                                                    \n"; 
r16_dc << " 	assign D11_1_in_wire = ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? D11_0_in_reg :          \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in10 :              \n"; 
r16_dc << " 	                                                                            D11_0_in_reg ;          \n"; 
r16_dc << "						                                                                                    \n"; 
r16_dc << "                                                                                                         \n"; 
r16_dc << " 	assign D11_3_in_wire =(( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D13_4_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D14_5_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D15_6_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? RDC_in8      :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D9_0_in_reg  :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D10_1_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D11_2_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D12_3_in_reg :       \n"; 
r16_dc << "                          //radix-4	                                                                    \n"; 
r16_dc << "                          ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D9_0_in_reg :          \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D10_1_in_reg :        \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D11_2_in_reg :        \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? RDC_in8 :             \n"; 
r16_dc << " 	                                                                              D11_2_in_reg;         \n"; 
r16_dc << " 	                                                                                                    \n"; 
r16_dc << " 	assign D12_0_in_wire = ( DC_mode_sel_in == 3'd5) ? RDC_in9  :                                       \n"; 
r16_dc << "	                       ( DC_mode_sel_in == 3'd6) ? RDC_in3  :                                           \n"; 
r16_dc << "	                       ( DC_mode_sel_in == 3'd7) ? RDC_in6  :                                           \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0))  ? RDC_in12 :           \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D13_0_in_reg :       \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D14_1_in_reg :       \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D15_2_in_reg :       \n"; 
r16_dc << "						   //radix-2                                                                        \n"; 
r16_dc << "						   ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in12 :                  \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? D13_0_in_reg :          \n"; 
r16_dc << "                                                                                RDC_in12;                \n";         
r16_dc << " 	                                                                                                    \n"; 
r16_dc << " 	assign D12_4_in_wire =(( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D12_3_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D13_4_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D14_5_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D15_6_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? RDC_in8      :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D9_0_in_reg  :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D10_1_in_reg :       \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D11_2_in_reg :       \n"; 
r16_dc << " 	                                                                               D12_3_in_reg;        \n"; 
r16_dc << " 	assign D13_0_in_wire = (DC_mode_sel_in == 3'd5) ? RDC_in11 :                                        \n"; 
r16_dc << "	                       (DC_mode_sel_in == 3'd6) ? RDC_in7  :                                            \n"; 
r16_dc << "	                       (DC_mode_sel_in == 3'd7) ? RDC_in14 : RDC_in13;                                  \n"; 
r16_dc << "    //radix-4                                                                                            \n"; 
r16_dc << " 	assign D13_1_in_wire =((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D15_2_in_reg :        \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? RDC_in12     :        \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D13_0_in_reg :        \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D14_1_in_reg :        \n"; 
r16_dc << "                          //radix-2\n"; 
r16_dc << "                          ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? D13_0_in_reg :        \n"; 
r16_dc << " 	                      ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in12 :  		    \n"; 			  
r16_dc << " 	                                                                           D13_0_in_reg;  		\n"; 				   
r16_dc << "                                                                                                     \n"; 
r16_dc << " 	assign D13_5_in_wire =(( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D11_2_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D12_3_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D13_4_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D14_5_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D15_6_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? RDC_in8      : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D9_0_in_reg  : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D10_1_in_reg : \n"; 
r16_dc << " 	                                                                               D13_4_in_reg;  \n"; 
r16_dc << " 	assign D14_0_in_wire = (DC_mode_sel_in == 3'd5)  ? RDC_in13 :                                 \n"; 
r16_dc << "	                       (DC_mode_sel_in == 3'd6)  ? RDC_in11 :                                     \n"; 
r16_dc << "	                       (DC_mode_sel_in == 3'd7)  ? RDC_in7  :                                     \n"; 
r16_dc << "						   ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in14 :            \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? D15_0_in_reg :    \n"; 
r16_dc << "						                                                        RDC_in14;             \n"; 
r16_dc << "    //radix-4                                                                                      \n"; 
r16_dc << " 	assign D14_2_in_wire = ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0) ) ? D14_1_in_reg : \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D15_2_in_reg : \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? RDC_in12 :     \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? D13_0_in_reg : \n"; 
r16_dc << " 	                                                                               D14_1_in_reg;  \n"; 						   
r16_dc << "                                                                                                   \n"; 
r16_dc << " 	assign D14_6_in_wire =(( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D10_1_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D11_2_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D12_3_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D13_4_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D14_5_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D15_6_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? RDC_in8      : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? D9_0_in_reg  : \n"; 
r16_dc << " 	                                                                               D14_5_in_reg ; \n"; 
r16_dc << "    //radix-2																				      \n"; 
r16_dc << "    assign D15_1_in_wire = ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b0)) ? D15_0_in_reg :     \n";   
r16_dc << " 	                       ((DC_mode_sel_in == 3'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in14 :        \n";    
r16_dc << " 	                                                                            D15_0_in_reg ;    \n"; 
r16_dc << "																				   \n"; 
r16_dc << "	//radix-4																	   \n";    																				   
r16_dc << " 	assign D15_3_in_wire = ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd0))  ? D13_0_in_reg : \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd1) ) ? D14_1_in_reg : \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd2) ) ? D15_2_in_reg : \n"; 
r16_dc << " 	                       ((DC_mode_sel_in == 3'd2) && (RDC_sel[1:0] == 2'd3) ) ? RDC_in12 :     \n"; 
r16_dc << " 	                                                                               D15_2_in_reg;  \n"; 
r16_dc << "     \n"; 
r16_dc << "		\n"; 																		   
r16_dc << " 	assign D15_7_in_wire =(( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd0 )) ? D9_0_in_reg  : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd1 )) ? D10_1_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd2 )) ? D11_2_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd3 )) ? D12_3_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd4 )) ? D13_4_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd5 )) ? D14_5_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd6 )) ? D15_6_in_reg : \n"; 
r16_dc << " 	                      (( DC_mode_sel_in == 3'd3 ) && ( RDC_sel[2:0]==3'd7 )) ? RDC_in8      : \n"; 
r16_dc << " 	                                                                               D15_6_in_reg;  \n"; 
r16_dc << " 	                                                                                         \n"; 
r16_dc << " 	//                                                                                       \n"; 
r16_dc << " 	always @(posedge clk or negedge rst_n) begin                                             \n"; 
r16_dc << " 		if(~rst_n) begin                                                                     \n"; 
r16_dc << " 			D1_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D2_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D2_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D3_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D3_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D3_2_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D4_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D4_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D4_2_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D4_3_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D5_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D5_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D5_2_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D5_3_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D5_4_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D6_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D6_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D6_2_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D6_3_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D6_4_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D6_5_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D7_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D7_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D7_2_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D7_3_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D7_4_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D7_5_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D7_6_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_2_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_3_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_4_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_5_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_6_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D8_7_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_0_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_1_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_2_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_3_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_4_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_5_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_6_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_7_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D9_8_in_reg <= P_ZERO ;                                                          \n"; 
r16_dc << " 			D10_0_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_1_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_2_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_3_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_4_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_5_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_6_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_7_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_8_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D10_9_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_0_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_1_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_2_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_3_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_4_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_5_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_6_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_7_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_8_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_9_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D11_10_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D12_0_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_1_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_2_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_3_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_4_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_5_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_6_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_7_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_8_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_9_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D12_10_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D12_11_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D13_0_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_1_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_2_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_3_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_4_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_5_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_6_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_7_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_8_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_9_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D13_10_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D13_11_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D13_12_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D14_0_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_1_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_2_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_3_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_4_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_5_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_6_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_7_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_8_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_9_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D14_10_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D14_11_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D14_12_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D14_13_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D15_0_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_1_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_2_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_3_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_4_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_5_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_6_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_7_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_8_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_9_in_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D15_10_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D15_11_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D15_12_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D15_13_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D15_14_in_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			//                                                                               \n"; 
r16_dc << " 			D0_0_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D0_1_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_2_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_3_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_4_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_5_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_6_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_7_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_8_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D0_9_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D0_10_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D0_11_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D0_12_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D0_13_out_reg <= P_ZERO ;				                                         \n"; 
r16_dc << " 			RDC_out0 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			D1_0_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_1_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_2_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_3_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_4_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_5_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_6_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_7_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_8_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_9_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_10_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D1_11_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D1_12_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			RDC_out1 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			D2_0_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D2_1_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D2_2_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D2_3_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D2_4_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D2_5_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D2_6_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D2_7_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D2_8_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D2_9_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D2_10_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D2_11_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			RDC_out2 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D3_0_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_1_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_2_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_3_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_4_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_5_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_6_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_7_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_8_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_9_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D3_10_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			RDC_out3 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D4_0_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_1_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_2_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_3_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D4_4_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_5_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_6_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_7_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_8_out_reg <= P_ZERO ;	                                                     \n"; 
r16_dc << " 			D4_9_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			RDC_out4 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D5_0_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_1_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_2_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_3_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_4_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_5_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_6_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_7_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D5_8_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			RDC_out5 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D6_0_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D6_1_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D6_2_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D6_3_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D6_4_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D6_5_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D6_6_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D6_7_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			RDC_out6 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D7_0_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D7_1_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D7_2_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D7_3_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D7_4_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D7_5_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D7_6_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			RDC_out7 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D8_0_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D8_1_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D8_2_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D8_3_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D8_4_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D8_5_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			RDC_out8 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D9_0_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D9_1_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D9_2_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D9_3_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			D9_4_out_reg <= P_ZERO ;                                                         \n"; 
r16_dc << " 			RDC_out9 <= P_ZERO ;                                                             \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D10_0_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D10_1_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D10_2_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D10_3_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			RDC_out10 <= P_ZERO ;                                                            \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D11_0_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D11_1_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D11_2_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			RDC_out11 <= P_ZERO ;                                                            \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D12_0_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			D12_1_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			RDC_out12 <= P_ZERO ;                                                            \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D13_0_out_reg <= P_ZERO ;                                                        \n"; 
r16_dc << " 			RDC_out13 <= P_ZERO ;                                                            \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			RDC_out14 <= P_ZERO ;                                                            \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 		end                                                                                  \n"; 
r16_dc << " 		else begin                                                                           \n"; 
r16_dc << " 			D1_0_in_reg <= D1_0_in_wire;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D2_0_in_reg <= D2_0_in_wire;                                                     \n"; 
r16_dc << " 			D2_1_in_reg <= D2_0_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D3_0_in_reg <= D3_0_in_wire;                                                     \n"; 
r16_dc << " 			D3_1_in_reg <= D3_1_in_wire ;                                                    \n";  
r16_dc << " 			D3_2_in_reg <= D3_1_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D4_0_in_reg <= D4_0_in_wire;                                                     \n"; 
r16_dc << " 			D4_1_in_reg <= D4_0_in_reg ;                                                     \n"; 
r16_dc << " 			D4_2_in_reg <= D4_1_in_reg ;                                                     \n"; 
r16_dc << " 			D4_3_in_reg <= D4_2_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D5_0_in_reg <= D5_0_in_wire;                                                     \n"; 
r16_dc << " 			D5_1_in_reg <= D5_1_in_wire ;                                                    \n";  
r16_dc << " 			D5_2_in_reg <= D5_1_in_reg ;                                                     \n"; 
r16_dc << " 			D5_3_in_reg <= D5_2_in_reg ;                                                     \n"; 
r16_dc << " 			D5_4_in_reg <= D5_3_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D6_0_in_reg <= D6_0_in_wire ;                                                    \n"; 
r16_dc << " 			D6_1_in_reg <= D6_0_in_reg ;                                                     \n"; 
r16_dc << " 			D6_2_in_reg <= D6_2_in_wire ;                                                    \n";  
r16_dc << " 			D6_3_in_reg <= D6_2_in_reg ;                                                     \n"; 
r16_dc << " 			D6_4_in_reg <= D6_3_in_reg ;                                                     \n"; 
r16_dc << " 			D6_5_in_reg <= D6_4_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D7_0_in_reg <= D7_0_in_wire ;                                                    \n"; 
r16_dc << " 			D7_1_in_reg <= D7_1_in_wire ;                                                    \n";  
r16_dc << " 			D7_2_in_reg <= D7_1_in_reg ;                                                     \n"; 
r16_dc << " 			D7_3_in_reg <= D7_3_in_wire ;                                                    \n";  
r16_dc << " 			D7_4_in_reg <= D7_3_in_reg ;                                                     \n"; 
r16_dc << " 			D7_5_in_reg <= D7_4_in_reg ;                                                     \n"; 
r16_dc << " 			D7_6_in_reg <= D7_5_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D8_0_in_reg <= D8_0_in_wire ;                                                    \n"; 
r16_dc << " 			D8_1_in_reg <= D8_0_in_reg ;                                                     \n"; 
r16_dc << " 			D8_2_in_reg <= D8_1_in_reg ;                                                     \n"; 
r16_dc << " 			D8_3_in_reg <= D8_2_in_reg ;                                                     \n"; 
r16_dc << " 			D8_4_in_reg <= D8_3_in_reg ;                                                     \n"; 
r16_dc << " 			D8_5_in_reg <= D8_4_in_reg ;                                                     \n"; 
r16_dc << " 			D8_6_in_reg <= D8_5_in_reg ;                                                     \n"; 
r16_dc << " 			D8_7_in_reg <= D8_6_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D9_0_in_reg <= D9_0_in_wire ;                                                    \n"; 
r16_dc << " 			D9_1_in_reg <= D9_1_in_wire ;                                                    \n"; 
r16_dc << " 			D9_2_in_reg <= D9_1_in_reg ;                                                     \n"; 
r16_dc << " 			D9_3_in_reg <= D9_2_in_reg ;                                                     \n"; 
r16_dc << " 			D9_4_in_reg <= D9_3_in_reg ;                                                     \n"; 
r16_dc << " 			D9_5_in_reg <= D9_4_in_reg ;                                                     \n"; 
r16_dc << " 			D9_6_in_reg <= D9_5_in_reg ;                                                     \n"; 
r16_dc << " 			D9_7_in_reg <= D9_6_in_reg ;                                                     \n"; 
r16_dc << " 			D9_8_in_reg <= D9_7_in_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D10_0_in_reg <= D10_0_in_wire ;                                                  \n"; 
r16_dc << " 			D10_1_in_reg <= D10_0_in_reg  ;                                                  \n"; 
r16_dc << " 			D10_2_in_reg <= D10_2_in_wire ;                                                  \n"; 
r16_dc << " 			D10_3_in_reg <= D10_2_in_reg ;                                                   \n"; 
r16_dc << " 			D10_4_in_reg <= D10_3_in_reg ;                                                   \n"; 
r16_dc << " 			D10_5_in_reg <= D10_4_in_reg ;                                                   \n"; 
r16_dc << " 			D10_6_in_reg <= D10_5_in_reg ;                                                   \n"; 
r16_dc << " 			D10_7_in_reg <= D10_6_in_reg ;                                                   \n"; 
r16_dc << " 			D10_8_in_reg <= D10_7_in_reg ;                                                   \n"; 
r16_dc << " 			D10_9_in_reg <= D10_8_in_reg ;                                                   \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D11_0_in_reg <= D11_0_in_wire ;                                                  \n"; 
r16_dc << " 			D11_1_in_reg <= D11_1_in_wire ;                                                  \n";  
r16_dc << " 			D11_2_in_reg <= D11_1_in_reg ;                                                   \n"; 
r16_dc << " 			D11_3_in_reg <= D11_3_in_wire ;                                                  \n"; 
r16_dc << " 			D11_4_in_reg <= D11_3_in_reg ;                                                   \n"; 
r16_dc << " 			D11_5_in_reg <= D11_4_in_reg ;                                                   \n"; 
r16_dc << " 			D11_6_in_reg <= D11_5_in_reg ;                                                   \n"; 
r16_dc << " 			D11_7_in_reg <= D11_6_in_reg ;                                                   \n"; 
r16_dc << " 			D11_8_in_reg <= D11_7_in_reg ;                                                   \n"; 
r16_dc << " 			D11_9_in_reg <= D11_8_in_reg ;                                                   \n"; 
r16_dc << " 			D11_10_in_reg <= D11_9_in_reg ;                                                  \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D12_0_in_reg <= D12_0_in_wire ;                                                  \n"; 
r16_dc << " 			D12_1_in_reg <= D12_0_in_reg ;                                                   \n"; 
r16_dc << " 			D12_2_in_reg <= D12_1_in_reg ;                                                   \n"; 
r16_dc << " 			D12_3_in_reg <= D12_2_in_reg ;                                                   \n"; 
r16_dc << " 			D12_4_in_reg <= D12_4_in_wire ;                                                  \n"; 
r16_dc << " 			D12_5_in_reg <= D12_4_in_reg ;                                                   \n"; 
r16_dc << " 			D12_6_in_reg <= D12_5_in_reg ;                                                   \n"; 
r16_dc << " 			D12_7_in_reg <= D12_6_in_reg ;                                                   \n"; 
r16_dc << " 			D12_8_in_reg <= D12_7_in_reg ;                                                   \n"; 
r16_dc << " 			D12_9_in_reg <= D12_8_in_reg ;                                                   \n"; 
r16_dc << " 			D12_10_in_reg <= D12_9_in_reg ;                                                  \n"; 
r16_dc << " 			D12_11_in_reg <= D12_10_in_reg ;                                                 \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D13_0_in_reg <= D13_0_in_wire ;                                                  \n"; 
r16_dc << " 			D13_1_in_reg <= D13_1_in_wire ;                                                  \n";  
r16_dc << " 			D13_2_in_reg <= D13_1_in_reg ;                                                   \n"; 
r16_dc << " 			D13_3_in_reg <= D13_2_in_reg ;                                                   \n"; 
r16_dc << " 			D13_4_in_reg <= D13_3_in_reg ;                                                   \n"; 
r16_dc << " 			D13_5_in_reg <= D13_5_in_wire ;                                                  \n"; 
r16_dc << " 			D13_6_in_reg <= D13_5_in_reg ;                                                   \n"; 
r16_dc << " 			D13_7_in_reg <= D13_6_in_reg ;                                                   \n"; 
r16_dc << " 			D13_8_in_reg <= D13_7_in_reg ;                                                   \n"; 
r16_dc << " 			D13_9_in_reg <= D13_8_in_reg ;                                                   \n"; 
r16_dc << " 			D13_10_in_reg <= D13_9_in_reg ;                                                  \n"; 
r16_dc << " 			D13_11_in_reg <= D13_10_in_reg ;                                                 \n"; 
r16_dc << " 			D13_12_in_reg <= D13_11_in_reg ;                                                 \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D14_0_in_reg <= D14_0_in_wire ;                                                  \n"; 
r16_dc << " 			D14_1_in_reg <= D14_0_in_reg ;                                                   \n"; 
r16_dc << " 			D14_2_in_reg <= D14_2_in_wire ;                                                  \n";  
r16_dc << " 			D14_3_in_reg <= D14_2_in_reg ;                                                   \n"; 
r16_dc << " 			D14_4_in_reg <= D14_3_in_reg ;                                                   \n"; 
r16_dc << " 			D14_5_in_reg <= D14_4_in_reg ;                                                   \n"; 
r16_dc << " 			D14_6_in_reg <= D14_6_in_wire ;                                                  \n"; 
r16_dc << " 			D14_7_in_reg <= D14_6_in_reg ;                                                   \n"; 
r16_dc << " 			D14_8_in_reg <= D14_7_in_reg ;                                                   \n"; 
r16_dc << " 			D14_9_in_reg <= D14_8_in_reg ;                                                   \n"; 
r16_dc << " 			D14_10_in_reg <= D14_9_in_reg ;                                                  \n"; 
r16_dc << " 			D14_11_in_reg <= D14_10_in_reg ;                                                 \n"; 
r16_dc << " 			D14_12_in_reg <= D14_11_in_reg ;                                                 \n"; 
r16_dc << " 			D14_13_in_reg <= D14_12_in_reg ;                                                 \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D15_0_in_reg <= RDC_in15 ;                                                       \n"; 
r16_dc << " 			D15_1_in_reg <= D15_1_in_wire ;                                                  \n";  
r16_dc << " 			D15_2_in_reg <= D15_1_in_reg ;                                                   \n"; 
r16_dc << " 			D15_3_in_reg <= D15_3_in_wire ;                                                  \n";  
r16_dc << " 			D15_4_in_reg <= D15_3_in_reg ;                                                   \n"; 
r16_dc << " 			D15_5_in_reg <= D15_4_in_reg ;                                                   \n"; 
r16_dc << " 			D15_6_in_reg <= D15_5_in_reg ;                                                   \n"; 
r16_dc << " 			D15_7_in_reg <= D15_7_in_wire ;                                                  \n"; 
r16_dc << " 			D15_8_in_reg <= D15_7_in_reg ;                                                   \n"; 
r16_dc << " 			D15_9_in_reg <= D15_8_in_reg ;                                                   \n"; 
r16_dc << " 			D15_10_in_reg <= D15_9_in_reg ;                                                  \n"; 
r16_dc << " 			D15_11_in_reg <= D15_10_in_reg ;                                                 \n"; 
r16_dc << " 			D15_12_in_reg <= D15_11_in_reg ;                                                 \n"; 
r16_dc << " 			D15_13_in_reg <= D15_12_in_reg ;                                                 \n"; 
r16_dc << " 			D15_14_in_reg <= D15_13_in_reg ;                                                 \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			//                                                                               \n"; 
r16_dc << " 			D0_0_out_reg <= D0_wire ;                                                        \n"; 
r16_dc << " 			D0_1_out_reg <= D0_0_out_reg ;                                                   \n"; 
r16_dc << " 			D0_2_out_reg <= D0_1_out_reg ;                                                   \n"; 
r16_dc << " 			D0_3_out_reg <= D0_2_out_reg ;                                                   \n"; 
r16_dc << " 			D0_4_out_reg <= D0_3_out_reg ;                                                   \n"; 
r16_dc << " 			D0_5_out_reg <= D0_4_out_reg ;                                                   \n"; 
r16_dc << " 			D0_6_out_reg <= D0_5_out_reg ;                                                   \n"; 
r16_dc << " 			D0_7_out_reg <= D0_6_out_reg ;                                                   \n"; 
r16_dc << " 			D0_8_out_reg <= D0_7_out_reg ;                                                   \n"; 
r16_dc << " 			D0_9_out_reg <= D0_8_out_reg ;                                                   \n"; 
r16_dc << " 			D0_10_out_reg <= D0_9_out_reg ;                                                  \n"; 
r16_dc << " 			D0_11_out_reg <= D0_10_out_reg ;                                                 \n"; 
r16_dc << " 			D0_12_out_reg <= D0_11_out_reg ;                                                 \n"; 
r16_dc << " 			D0_13_out_reg <= D0_12_out_reg ;                                                 \n"; 
r16_dc << " 			RDC_out0 <= D0_13_out_reg ;                                                      \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D1_0_out_reg <= D1_wire ;                                                        \n"; 
r16_dc << " 			D1_1_out_reg <= D1_0_out_reg ;                                                   \n"; 
r16_dc << " 			D1_2_out_reg <= D1_1_out_reg ;                                                   \n"; 
r16_dc << " 			D1_3_out_reg <= D1_2_out_reg ;                                                   \n"; 
r16_dc << " 			D1_4_out_reg <= D1_3_out_reg ;                                                   \n"; 
r16_dc << " 			D1_5_out_reg <= D1_4_out_reg ;                                                   \n"; 
r16_dc << " 			D1_6_out_reg <= D1_5_out_reg ;                                                   \n"; 
r16_dc << " 			D1_7_out_reg <= D1_6_out_reg ;                                                   \n"; 
r16_dc << " 			D1_8_out_reg <= D1_7_out_reg ;                                                   \n"; 
r16_dc << " 			D1_9_out_reg <= D1_8_out_reg ;                                                   \n"; 
r16_dc << " 			D1_10_out_reg <= D1_9_out_reg ;                                                  \n"; 
r16_dc << " 			D1_11_out_reg <= D1_10_out_reg ;                                                 \n"; 
r16_dc << " 			D1_12_out_reg <= D1_11_out_reg ;                                                 \n"; 
r16_dc << " 			RDC_out1 <= D1_12_out_reg ;                                                      \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D2_0_out_reg <= D2_wire ;                                                        \n"; 
r16_dc << " 			D2_1_out_reg <= D2_0_out_reg ;                                                   \n"; 
r16_dc << " 			D2_2_out_reg <= D2_1_out_reg ;                                                   \n"; 
r16_dc << " 			D2_3_out_reg <= D2_2_out_reg ;                                                   \n"; 
r16_dc << " 			D2_4_out_reg <= D2_3_out_reg ;                                                   \n"; 
r16_dc << " 			D2_5_out_reg <= D2_4_out_reg ;                                                   \n"; 
r16_dc << " 			D2_6_out_reg <= D2_5_out_reg ;                                                   \n"; 
r16_dc << " 			D2_7_out_reg <= D2_6_out_reg ;                                                   \n"; 
r16_dc << " 			D2_8_out_reg <= D2_7_out_reg ;                                                   \n"; 
r16_dc << " 			D2_9_out_reg <= D2_8_out_reg ;                                                   \n"; 
r16_dc << " 			D2_10_out_reg <= D2_9_out_reg ;                                                  \n"; 
r16_dc << " 			D2_11_out_reg <= D2_10_out_reg ;                                                 \n"; 
r16_dc << " 			RDC_out2 <= D2_11_out_reg ;                                                      \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D3_0_out_reg <= D3_wire ;                                                        \n"; 
r16_dc << " 			D3_1_out_reg <= D3_0_out_reg ;                                                   \n"; 
r16_dc << " 			D3_2_out_reg <= D3_1_out_reg ;                                                   \n"; 
r16_dc << " 			D3_3_out_reg <= D3_2_out_reg ;                                                   \n"; 
r16_dc << " 			D3_4_out_reg <= D3_3_out_reg ;                                                   \n"; 
r16_dc << " 			D3_5_out_reg <= D3_4_out_reg ;                                                   \n"; 
r16_dc << " 			D3_6_out_reg <= D3_5_out_reg ;                                                   \n"; 
r16_dc << " 			D3_7_out_reg <= D3_6_out_reg ;                                                   \n"; 
r16_dc << " 			D3_8_out_reg <= D3_7_out_reg ;                                                   \n"; 
r16_dc << " 			D3_9_out_reg <= D3_8_out_reg ;                                                   \n"; 
r16_dc << " 			D3_10_out_reg <= D3_9_out_reg ;                                                  \n"; 
r16_dc << " 			RDC_out3 <= D3_10_out_reg ;                                                      \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D4_0_out_reg <= D4_wire ;                                                        \n"; 
r16_dc << " 			D4_1_out_reg <= D4_0_out_reg ;                                                   \n"; 
r16_dc << " 			D4_2_out_reg <= D4_1_out_reg ;                                                   \n"; 
r16_dc << " 			D4_3_out_reg <= D4_2_out_reg ;                                                   \n"; 
r16_dc << " 			D4_4_out_reg <= D4_3_out_reg ;                                                   \n"; 
r16_dc << " 			D4_5_out_reg <= D4_4_out_reg ;                                                   \n"; 
r16_dc << " 			D4_6_out_reg <= D4_5_out_reg ;                                                   \n"; 
r16_dc << " 			D4_7_out_reg <= D4_6_out_reg ;                                                   \n"; 
r16_dc << " 			D4_8_out_reg <= D4_7_out_reg ;                                                   \n"; 
r16_dc << " 			D4_9_out_reg <= D4_8_out_reg ;                                                   \n"; 
r16_dc << " 			RDC_out4 <= D4_9_out_reg ;                                                       \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D5_0_out_reg <= D5_wire ;                                                        \n"; 
r16_dc << " 			D5_1_out_reg <= D5_0_out_reg ;                                                   \n"; 
r16_dc << " 			D5_2_out_reg <= D5_1_out_reg ;                                                   \n"; 
r16_dc << " 			D5_3_out_reg <= D5_2_out_reg ;                                                   \n"; 
r16_dc << " 			D5_4_out_reg <= D5_3_out_reg ;                                                   \n"; 
r16_dc << " 			D5_5_out_reg <= D5_4_out_reg ;                                                   \n"; 
r16_dc << " 			D5_6_out_reg <= D5_5_out_reg ;                                                   \n"; 
r16_dc << " 			D5_7_out_reg <= D5_6_out_reg ;                                                   \n"; 
r16_dc << " 			D5_8_out_reg <= D5_7_out_reg ;                                                   \n"; 
r16_dc << " 			RDC_out5 <= D5_8_out_reg ;                                                       \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D6_0_out_reg <= D6_wire ;                                                        \n"; 
r16_dc << " 			D6_1_out_reg <= D6_0_out_reg ;                                                   \n"; 
r16_dc << " 			D6_2_out_reg <= D6_1_out_reg ;                                                   \n"; 
r16_dc << " 			D6_3_out_reg <= D6_2_out_reg ;                                                   \n"; 
r16_dc << " 			D6_4_out_reg <= D6_3_out_reg ;                                                   \n"; 
r16_dc << " 			D6_5_out_reg <= D6_4_out_reg ;                                                   \n"; 
r16_dc << " 			D6_6_out_reg <= D6_5_out_reg ;                                                   \n"; 
r16_dc << " 			D6_7_out_reg <= D6_6_out_reg ;                                                   \n"; 
r16_dc << " 			RDC_out6 <= D6_7_out_reg ;                                                       \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D7_0_out_reg <= D7_wire ;                                                        \n"; 
r16_dc << " 			D7_1_out_reg <= D7_0_out_reg ;                                                   \n"; 
r16_dc << " 			D7_2_out_reg <= D7_1_out_reg ;                                                   \n"; 
r16_dc << " 			D7_3_out_reg <= D7_2_out_reg ;                                                   \n"; 
r16_dc << " 			D7_4_out_reg <= D7_3_out_reg ;                                                   \n"; 
r16_dc << " 			D7_5_out_reg <= D7_4_out_reg ;                                                   \n"; 
r16_dc << " 			D7_6_out_reg <= D7_5_out_reg ;                                                   \n"; 
r16_dc << " 			RDC_out7 <= D7_6_out_reg ;                                                       \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D8_0_out_reg <= D8_wire ;                                                        \n"; 
r16_dc << " 			D8_1_out_reg <= D8_0_out_reg ;                                                   \n"; 
r16_dc << " 			D8_2_out_reg <= D8_1_out_reg ;                                                   \n"; 
r16_dc << " 			D8_3_out_reg <= D8_2_out_reg ;                                                   \n"; 
r16_dc << " 			D8_4_out_reg <= D8_3_out_reg ;                                                   \n"; 
r16_dc << " 			D8_5_out_reg <= D8_4_out_reg ;                                                   \n"; 
r16_dc << " 			RDC_out8 <= D8_5_out_reg ;                                                       \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D9_0_out_reg <= D9_wire ;                                                        \n"; 
r16_dc << " 			D9_1_out_reg <= D9_0_out_reg ;                                                   \n"; 
r16_dc << " 			D9_2_out_reg <= D9_1_out_reg ;                                                   \n"; 
r16_dc << " 			D9_3_out_reg <= D9_2_out_reg ;                                                   \n"; 
r16_dc << " 			D9_4_out_reg <= D9_3_out_reg ;                                                   \n"; 
r16_dc << " 			RDC_out9 <= D9_4_out_reg ;                                                       \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D10_0_out_reg <= D10_wire ;                                                      \n"; 
r16_dc << " 			D10_1_out_reg <= D10_0_out_reg ;                                                 \n"; 
r16_dc << " 			D10_2_out_reg <= D10_1_out_reg ;                                                 \n"; 
r16_dc << " 			D10_3_out_reg <= D10_2_out_reg ;                                                 \n"; 
r16_dc << " 			RDC_out10 <= D10_3_out_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D11_0_out_reg <= D11_wire ;                                                      \n"; 
r16_dc << " 			D11_1_out_reg <= D11_0_out_reg ;                                                 \n"; 
r16_dc << " 			D11_2_out_reg <= D11_1_out_reg ;                                                 \n"; 
r16_dc << " 			RDC_out11 <= D11_2_out_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D12_0_out_reg <= D12_wire ;                                                      \n"; 
r16_dc << " 			D12_1_out_reg <= D12_0_out_reg ;                                                 \n"; 
r16_dc << " 			RDC_out12 <= D12_1_out_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			D13_0_out_reg <= D13_wire ;                                                      \n"; 
r16_dc << " 			RDC_out13 <= D13_0_out_reg ;                                                     \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 			RDC_out14 <= D14_wire ;                                                          \n"; 
r16_dc << " 			                                                                                 \n"; 
r16_dc << " 		end                                                                                  \n"; 
r16_dc << " 	end                                                                                      \n"; 
r16_dc << "                                                                                              \n"; 
r16_dc << " endmodule                                                                                    \n"; 
	 
	 r16_dc.close();
}
//Mux
void configurable_BFFT::MAMux_HSRAM(std::string string_in){
     std::ofstream mamux_hsram;
     std::string        string_buf = "/MAMux_HSRAM.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     mamux_hsram.open(ss.str());	
mamux_hsram << "`timescale 1 ns/1 ps                                                  \n";                             
mamux_hsram << "module MAMux_HSRAM(MA_HSRAM,                                          \n";
mamux_hsram << "                   MA_TWI,                                            \n";
mamux_hsram << "                   MA_Configure,                                      \n";                                         
mamux_hsram << "			       H_MA_sel                                           \n";                  
mamux_hsram << "			      ) ;                                                 \n";                                     
mamux_hsram << "                                                                      \n";
mamux_hsram << "parameter A_WIDTH   = 11;                                             \n";
mamux_hsram << "                                                                      \n";
mamux_hsram << "output[A_WIDTH-1:0]   MA_HSRAM;                                       \n";
mamux_hsram << "                                                                      \n";
mamux_hsram << "input [A_WIDTH-1:0]   MA_TWI;                                         \n";
mamux_hsram << "input [A_WIDTH-1:0]   MA_Configure;                                   \n";
mamux_hsram << "input                 H_MA_sel ;                                      \n";                               
mamux_hsram << "                                                                      \n";
mamux_hsram << "                                                                      \n";
mamux_hsram << "                                                                      \n";
mamux_hsram << "	assign MA_HSRAM = (H_MA_sel==1'b1)? MA_Configure :   MA_TWI;      \n";                                             
mamux_hsram << "	//                                                                \n";                               
mamux_hsram << "                                                                      \n";
mamux_hsram << "endmodule                                          	                  \n";
     mamux_hsram.close();
}
void configurable_BFFT::MAMux_RESRAM(std::string string_in){
     std::ofstream mamux_resram;
     std::string        string_buf = "/MAMux_RESRAM.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     mamux_resram.open(ss.str());	
mamux_resram << "`timescale 1 ns/1 ps                                                \n";                                              
mamux_resram << "module MAMux_RESRAM(REMA_o,                                         \n";
mamux_resram << "                   IREMA_o,                                         \n";
mamux_resram << "                   order_MA_i,                                      \n";
mamux_resram << "                   REMA_i,                                          \n";
mamux_resram << "                   IREMA_i,                                         \n";                                      
mamux_resram << "			       order_sel                                         \n";                    
mamux_resram << "			      ) ;                                                \n";                                      
mamux_resram << "                                                                    \n";
mamux_resram << "parameter A_WIDTH   = 11;                                           \n";
mamux_resram << "                                                                    \n";
mamux_resram << "output[A_WIDTH-1:0]   REMA_o;                                       \n";
mamux_resram << "output[A_WIDTH-1:0]   IREMA_o;                                      \n";
mamux_resram << "                                                                    \n";
mamux_resram << "input [A_WIDTH-1:0]   order_MA_i;                                   \n";
mamux_resram << "input [A_WIDTH-1:0]   REMA_i;                                       \n";
mamux_resram << "input [A_WIDTH-1:0]   IREMA_i;                                      \n";
mamux_resram << "input                 order_sel ;                                   \n";                                  
mamux_resram << "                                                                    \n";
mamux_resram << "                                                                    \n";
mamux_resram << "    //                                                              \n";
mamux_resram << "	assign REMA_o  = (order_sel==1'b1)? order_MA_i :   REMA_i;       \n";
mamux_resram << "    //                                                              \n";
mamux_resram << "	assign IREMA_o = (order_sel==1'b1)? order_MA_i :   IREMA_i;      \n";                                             
mamux_resram << "	//                                                               \n";                                
mamux_resram << "                                                                    \n";
mamux_resram << "endmodule                                                           \n";
     mamux_resram.close();
}

void configurable_BFFT::TWIMux(std::string string_in){
     std::ofstream twimux;
     std::string        string_buf = "/TWIMux.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twimux.open(ss.str());	
twimux <<"//=============================================                 \n";
twimux <<"//Data:2020/04/08                                               \n";
twimux <<"//note:twiddle factor mux                                       \n";
twimux <<"//writter:shi yong wu                                           \n";
twimux <<"//=============================================                 \n";
twimux <<"`timescale 1ns/10ps                                             \n";
twimux <<"module TWIMux(                                                  \n";
twimux <<"    TWIradix0,                                                  \n";
twimux <<"    TWIradix1,                                                  \n";
twimux <<"    TWIradix2,                                                  \n";
twimux <<"    TWIradix3,                                                  \n";
twimux <<"    TWIradix4,                                                  \n";
twimux <<"    TWIradix5,                                                  \n";
twimux <<"    TWIradix6,                                                  \n";
twimux <<"    TWIradix7,                                                  \n";
twimux <<"    TWIradix8,                                                  \n";
twimux <<"    TWIradix9,                                                  \n";
twimux <<"    TWIradix10,                                                 \n"; 
twimux <<"    TWIradix11,                                                 \n"; 
twimux <<"    TWIradix12,                                                 \n"; 
twimux <<"    TWIradix13,                                                 \n"; 
twimux <<"    TWIradix14,                                                 \n"; 
twimux <<"    TWIradix15,                                                 \n"; 
twimux <<"    b0radix0,                                                   \n";
twimux <<"    b0radix1,                                                   \n";
twimux <<"    b0radix2,                                                   \n";
twimux <<"    b0radix3,                                                   \n";
twimux <<"    b0radix4,                                                   \n";
twimux <<"    b0radix5,                                                   \n";
twimux <<"    b0radix6,                                                   \n";
twimux <<"    b0radix7,                                                   \n";
twimux <<"    b0radix8,                                                   \n";
twimux <<"    b0radix9,                                                   \n";
twimux <<"    b0radix10,                                                  \n"; 
twimux <<"    b0radix11,                                                  \n"; 
twimux <<"    b0radix12,                                                  \n"; 
twimux <<"    b0radix13,                                                  \n"; 
twimux <<"    b0radix14,                                                  \n"; 
twimux <<"    b0radix15,                                                  \n"; 
twimux <<"    b1radix0,                                                   \n";
twimux <<"    b1radix1,                                                   \n";
twimux <<"    b1radix2,                                                   \n";
twimux <<"    b1radix3,                                                   \n";
twimux <<"    b1radix4,                                                   \n";
twimux <<"    b1radix5,                                                   \n";
twimux <<"    b1radix6,                                                   \n";
twimux <<"    b1radix7,                                                   \n";
twimux <<"    b1radix8,                                                   \n";
twimux <<"    b1radix9,                                                   \n";
twimux <<"    b1radix10,                                                  \n"; 
twimux <<"    b1radix11,                                                  \n"; 
twimux <<"    b1radix12,                                                  \n"; 
twimux <<"    b1radix13,                                                  \n"; 
twimux <<"    b1radix14,                                                  \n"; 
twimux <<"    b1radix15,                                                  \n"; 
twimux <<"    BN_wire                                                     \n";
twimux <<");                                                              \n";
twimux <<"                                                                \n";
twimux <<"                                                                \n";
twimux <<"parameter P_WIDTH = 64;                                         \n";
twimux <<"                                                                \n";
twimux <<"output [P_WIDTH-1:0] TWIradix0;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix1;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix2;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix3;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix4;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix5;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix6;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix7;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix8;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix9;                                 \n";
twimux <<"output [P_WIDTH-1:0] TWIradix10;                                \n"; 
twimux <<"output [P_WIDTH-1:0] TWIradix11;                                \n"; 
twimux <<"output [P_WIDTH-1:0] TWIradix12;                                \n"; 
twimux <<"output [P_WIDTH-1:0] TWIradix13;                                \n"; 
twimux <<"output [P_WIDTH-1:0] TWIradix14;                                \n"; 
twimux <<"output [P_WIDTH-1:0] TWIradix15;                                \n"; 
twimux <<"                                                                \n";
twimux <<"input               BN_wire;                                    \n";
twimux <<"input [P_WIDTH-1:0] b0radix0;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix1;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix2;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix3;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix4;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix5;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix6;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix7;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix8;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix9;                                   \n";
twimux <<"input [P_WIDTH-1:0] b0radix10;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b0radix11;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b0radix12;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b0radix13;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b0radix14;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b0radix15;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b1radix0;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix1;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix2;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix3;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix4;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix5;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix6;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix7;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix8;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix9;                                   \n";
twimux <<"input [P_WIDTH-1:0] b1radix10;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b1radix11;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b1radix12;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b1radix13;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b1radix14;                                  \n"; 
twimux <<"input [P_WIDTH-1:0] b1radix15;                                  \n"; 
twimux <<"                                                                \n";
twimux <<"                                                                \n";
twimux <<"  assign TWIradix0  = (BN_wire == 1'b1) ? b1radix0  : b0radix0; \n";   
twimux <<"  assign TWIradix1  = (BN_wire == 1'b1) ? b1radix1  : b0radix1; \n";   
twimux <<"  assign TWIradix2  = (BN_wire == 1'b1) ? b1radix2  : b0radix2; \n";   
twimux <<"  assign TWIradix3  = (BN_wire == 1'b1) ? b1radix3  : b0radix3; \n";   
twimux <<"  assign TWIradix4  = (BN_wire == 1'b1) ? b1radix4  : b0radix4; \n";   
twimux <<"  assign TWIradix5  = (BN_wire == 1'b1) ? b1radix5  : b0radix5; \n";   
twimux <<"  assign TWIradix6  = (BN_wire == 1'b1) ? b1radix6  : b0radix6; \n";   
twimux <<"  assign TWIradix7  = (BN_wire == 1'b1) ? b1radix7  : b0radix7; \n";   
twimux <<"  assign TWIradix8  = (BN_wire == 1'b1) ? b1radix8  : b0radix8; \n";   
twimux <<"  assign TWIradix9  = (BN_wire == 1'b1) ? b1radix9  : b0radix9; \n";   
twimux <<"  assign TWIradix10 = (BN_wire == 1'b1) ? b1radix10 : b0radix10;\n";   
twimux <<"  assign TWIradix11 = (BN_wire == 1'b1) ? b1radix11 : b0radix11;\n";   
twimux <<"  assign TWIradix12 = (BN_wire == 1'b1) ? b1radix12 : b0radix12;\n";   
twimux <<"  assign TWIradix13 = (BN_wire == 1'b1) ? b1radix13 : b0radix13;\n";   
twimux <<"  assign TWIradix14 = (BN_wire == 1'b1) ? b1radix14 : b0radix14;\n";   
twimux <<"  assign TWIradix15 = (BN_wire == 1'b1) ? b1radix15 : b0radix15;\n";   
twimux <<"                                                                \n";
twimux <<"endmodule 	                                                  \n"; 
	 
     twimux.close();
}
void configurable_BFFT::Mux1(std::string string_in){
	 std::ofstream mux1;
     std::string        string_buf = "/Mux1.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux1.open(ss.str()); 
mux1 <<"`timescale 1 ns/1 ps                       \n";                                                        
mux1 <<"module Mux1(BN0_MEM0_Dout,                 \n";                                                        
mux1 <<"			  BN0_MEM1_Dout,               \n";                                                            
mux1 <<"			  BN0_MEM2_Dout,               \n";                                                            
mux1 <<"			  BN0_MEM3_Dout,               \n";                                                            
mux1 <<"			  BN0_MEM4_Dout,               \n";                                                            
mux1 <<"			  BN0_MEM5_Dout,               \n";                                                            
mux1 <<"			  BN0_MEM6_Dout,               \n";                                                            
mux1 <<"			  BN0_MEM7_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM0_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM1_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM2_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM3_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM4_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM5_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM6_Dout,               \n";                                                            
mux1 <<"			  BN1_MEM7_Dout,               \n";                                                            
mux1 <<"			  MA0_out,                     \n";                                                            
mux1 <<"			  MA1_out,                     \n";                                                            
mux1 <<"		      ExtB0_D0_in,                 \n";                                                            
mux1 <<"			  ExtB0_D1_in,                 \n";                                                            
mux1 <<"			  ExtB0_D2_in,                 \n";                                                            
mux1 <<"			  ExtB0_D3_in,                 \n";                                                            
mux1 <<"			  ExtB0_D4_in,                 \n";                                                            
mux1 <<"			  ExtB0_D5_in,                 \n";                                                            
mux1 <<"			  ExtB0_D6_in,                 \n";                                                            
mux1 <<"			  ExtB0_D7_in,                 \n";                                                            
mux1 <<"			  ExtB0_D8_in,                 \n";                                                            
mux1 <<"			  ExtB0_D9_in,                 \n";                                                            
mux1 <<"			  ExtB0_D10_in,                \n";                                                            
mux1 <<"			  ExtB0_D11_in,                \n";                                                            
mux1 <<"			  ExtB0_D12_in,                \n";                                                            
mux1 <<"			  ExtB0_D13_in,                \n";                                                            
mux1 <<"			  ExtB0_D14_in,                \n";                                                            
mux1 <<"			  ExtB0_D15_in,                \n";                                                            
mux1 <<"			  ExtB1_D0_in,                 \n";                                                            
mux1 <<"			  ExtB1_D1_in,                 \n";                                                            
mux1 <<"            ExtB1_D2_in,                   \n";                                                        
mux1 <<"			  ExtB1_D3_in,                 \n";                                                            
mux1 <<"			  ExtB1_D4_in,                 \n";                                                            
mux1 <<"			  ExtB1_D5_in,                 \n";                                                            
mux1 <<"			  ExtB1_D6_in,                 \n";                                                            
mux1 <<"			  ExtB1_D7_in,                 \n";                                                            
mux1 <<"			  ExtB1_D8_in,                 \n";                                                            
mux1 <<"			  ExtB1_D9_in,                 \n";                                                            
mux1 <<"			  ExtB1_D10_in,                \n";                                                            
mux1 <<"			  ExtB1_D11_in,                \n";                                                            
mux1 <<"			  ExtB1_D12_in,                \n";                                                            
mux1 <<"			  ExtB1_D13_in,                \n";                                                            
mux1 <<"			  ExtB1_D14_in,                \n";                                                            
mux1 <<"			  ExtB1_D15_in,                \n";                                                            
mux1 <<"			  RDC_in0,                     \n";                                                            
mux1 <<"			  RDC_in1,                     \n";                                                            
mux1 <<"			  RDC_in2,                     \n";                                                            
mux1 <<"			  RDC_in3,                     \n";                                                            
mux1 <<"			  RDC_in4,                     \n";                                                            
mux1 <<"			  RDC_in5,                     \n";                                                            
mux1 <<"			  RDC_in6,                     \n";                                                            
mux1 <<"			  RDC_in7,                     \n";                                                            
mux1 <<"			  RDC_in8,                     \n";                                                            
mux1 <<"			  RDC_in9,                     \n";                                                            
mux1 <<"			  RDC_in10,                    \n";                                                            
mux1 <<"			  RDC_in11,                    \n";                                                            
mux1 <<"			  RDC_in12,                    \n";                                                            
mux1 <<"			  RDC_in13,                    \n";                                                            
mux1 <<"			  RDC_in14,                    \n";                                                            
mux1 <<"			  RDC_in15,                    \n";                                                            
mux1 <<"			  ExtMA_in,                    \n";                                                            
mux1 <<"			  AGUMA_in,                    \n";                                                            
mux1 <<"			  WMA_in,                      \n";                                                            
mux1 <<"			  wen0_in,                     \n";                                                            
mux1 <<"			  wen1_in,                     \n";                                                            
mux1 <<"			  SD_sel                       \n";                                                            
mux1 <<"			  ) ;                          \n";                                                            
mux1 <<"			                               \n";                                                          
mux1 <<"			                               \n";                                                          
mux1 <<"parameter SD_WIDTH  = 128 ;                \n";                                                        
mux1 <<"parameter P_WIDTH   = 64 ;                 \n";                                                        
mux1 <<"parameter CP_WIDTH  = "<< CP_width <<";    \n";                                                        
mux1 <<"parameter A_WIDTH   = 11;                  \n";
mux1 <<"                                           \n";                                                        
mux1 <<"parameter P_ZERO   = 64'h0 ;               \n";                                                        
mux1 <<"                                           \n";                                                        
mux1 <<"                                           \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM0_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM1_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM2_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM3_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM4_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM5_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM6_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN0_MEM7_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM0_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM1_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM2_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM3_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM4_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM5_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM6_Dout ;      \n";                                                        
mux1 <<"output [SD_WIDTH-1:0] BN1_MEM7_Dout ;      \n";                                                        
mux1 <<"output [A_WIDTH-1:0]  MA0_out ;            \n";                                                        
mux1 <<"output [A_WIDTH-1:0]  MA1_out ;            \n";                                                        
mux1 <<"                                           \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D0_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D1_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D2_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D3_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D4_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D5_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D6_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D7_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D8_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D9_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D10_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D11_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D12_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D13_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D14_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB0_D15_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D0_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D1_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D2_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D3_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D4_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D5_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D6_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D7_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D8_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D9_in ;       \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D10_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D11_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D12_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D13_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D14_in ;      \n";                                                        
mux1 <<"input  [CP_WIDTH-1:0]  ExtB1_D15_in ;      \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in0 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in1 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in2 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in3 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in4 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in5 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in6 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in7 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in8 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in9 ;            \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in10 ;           \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in11 ;           \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in12 ;           \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in13 ;           \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in14 ;           \n";                                                        
mux1 <<"input  [P_WIDTH-1:0]  RDC_in15 ;           \n";                                                        
mux1 <<"input  [A_WIDTH-1:0]  ExtMA_in ;           \n";                                                        
mux1 <<"input  [A_WIDTH-1:0]  AGUMA_in ;           \n";                                                        
mux1 <<"input  [A_WIDTH-1:0]  WMA_in ;             \n";                                                        
mux1 <<"input                 wen0_in ;            \n";                                                        
mux1 <<"input                 wen1_in ;            \n";                                                        
mux1 <<"input                 SD_sel ;             \n";                                                        
mux1 <<"                                           \n";                                                        
mux1 <<"                                           \n";                                                        
mux1 <<"                                           \n";                                                        
mux1 <<"	// Bank0 for op0 and op1               \n";                                                          
mux1 <<"	assign BN0_MEM0_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D0_in,"<< (64 - CP_width) <<"'d0,ExtB0_D1_in}) : ({RDC_in0,RDC_in1}) ;       \n";
mux1 <<"	// Bank0 for op2 and op3                                                                         \n";
mux1 <<"	assign BN0_MEM1_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D2_in,"<<(64 - CP_width) <<"'d0,ExtB0_D3_in}) : ({RDC_in2,RDC_in3}) ;       \n";
mux1 <<"	// Bank0 for op4 and op5                                                                         \n";
mux1 <<"	assign BN0_MEM2_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D4_in,"<<(64 - CP_width) <<"'d0,ExtB0_D5_in}) : ({RDC_in4,RDC_in5}) ;       \n";
mux1 <<"	// Bank0 for op6 and op7                                                                         \n";
mux1 <<"	assign BN0_MEM3_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D6_in,"<<(64 - CP_width) <<"'d0,ExtB0_D7_in}) : ({RDC_in6,RDC_in7}) ;       \n";
mux1 <<"	// Bank0 for op8 and op9                                                                         \n";
mux1 <<"	assign BN0_MEM4_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D8_in,"<<(64 - CP_width) <<"'d0,ExtB0_D9_in}) : ({RDC_in8,RDC_in9}) ;       \n";
mux1 <<"	// Bank0 for op10 and op11                                                                       \n";
mux1 <<"	assign BN0_MEM5_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D10_in,"<<(64 - CP_width) <<"'d0,ExtB0_D11_in}) : ({RDC_in10,RDC_in11}) ;   \n";
mux1 <<"	// Bank0 for op12 and op13                                                                       \n";
mux1 <<"	assign BN0_MEM6_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D12_in,"<<(64 - CP_width) <<"'d0,ExtB0_D13_in}) : ({RDC_in12,RDC_in13}) ;   \n";
mux1 <<"	// Bank0 for op14 and op15                                                                       \n";
mux1 <<"	assign BN0_MEM7_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB0_D14_in,"<<(64 - CP_width) <<"'d0,ExtB0_D15_in}) : ({RDC_in14,RDC_in15}) ;   \n";
mux1 <<"	                                                                                                 \n";
mux1 <<"	// Bank1 for op0 and op1                                                                         \n";
mux1 <<"	assign BN1_MEM0_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D0_in,"<<(64 - CP_width) <<"'d0,ExtB1_D1_in}) : ({RDC_in0,RDC_in1}) ;       \n";
mux1 <<"	// Bank1 for op2 and op3                                                                         \n";
mux1 <<"	assign BN1_MEM1_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D2_in,"<<(64 - CP_width) <<"'d0,ExtB1_D3_in}) : ({RDC_in2,RDC_in3}) ;       \n";
mux1 <<"	// Bank1 for op4 and op5                                                                         \n";
mux1 <<"	assign BN1_MEM2_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D4_in,"<<(64 - CP_width) <<"'d0,ExtB1_D5_in}) : ({RDC_in4,RDC_in5}) ;       \n";
mux1 <<"	// Bank1 for op6 and op7                                                                         \n";
mux1 <<"	assign BN1_MEM3_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D6_in,"<<(64 - CP_width) <<"'d0,ExtB1_D7_in}) : ({RDC_in6,RDC_in7}) ;       \n";
mux1 <<"	// Bank1 for op8 and op9                                                                         \n";
mux1 <<"	assign BN1_MEM4_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D8_in,"<<(64 - CP_width) <<"'d0,ExtB1_D9_in}) : ({RDC_in8,RDC_in9}) ;       \n";
mux1 <<"	// Bank1 for op10 and op11                                                                       \n";
mux1 <<"	assign BN1_MEM5_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D10_in,"<<(64 - CP_width) <<"'d0,ExtB1_D11_in}) : ({RDC_in10,RDC_in11}) ;   \n";
mux1 <<"	// Bank1 for op12 and op13                                                                       \n";
mux1 <<"	assign BN1_MEM6_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D12_in,"<<(64 - CP_width) <<"'d0,ExtB1_D13_in}) : ({RDC_in12,RDC_in13}) ;   \n";
mux1 <<"	// Bank1 for op14 and op15                                                                       \n";
mux1 <<"	assign BN1_MEM7_Dout = (SD_sel==1'b1)? ({"<<(64 - CP_width) <<"'d0,ExtB1_D14_in,"<<(64 - CP_width) <<"'d0,ExtB1_D15_in}) : ({RDC_in14,RDC_in15}) ;   \n";
mux1 <<"	                                                                                                 \n";
mux1 <<"	//                                                                                               \n";
mux1 <<"	assign MA0_out = (SD_sel==1'b1)? ExtMA_in :                                                      \n";
mux1 <<"					 (wen0_in==1'b1)? AGUMA_in : WMA_in ;			                                 \n";
mux1 <<"	//                                                                                               \n";
mux1 <<"	assign MA1_out = (SD_sel==1'b1)? ExtMA_in :                                                      \n";
mux1 <<"					 (wen1_in==1'b1)? AGUMA_in : WMA_in ;                                            \n";
mux1 <<"	                                                                                                 \n";
mux1 <<"endmodule                                                                                            \n";
	 
     mux1.close();
}	
void configurable_BFFT::Mux2(std::string string_in){
     std::ofstream mux2; 
     std::string        string_buf = "/Mux2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;      
     mux2.open(ss.str());
mux2 <<"`timescale 1 ns/1 ps              \n";                                                                     
mux2 <<"module Mux2(RA0_out,              \n";                                                                     
mux2 <<"			  RA1_out,            \n";                                                                       
mux2 <<"			  RA2_out,            \n";                                                                       
mux2 <<"			  RA3_out,            \n";                                                                       
mux2 <<"			  RA4_out,            \n";                                                                       
mux2 <<"			  RA5_out,            \n";                                                                       
mux2 <<"			  RA6_out,            \n";                                                                       
mux2 <<"			  RA7_out,            \n";                                                                       
mux2 <<"			  RA8_out,            \n";                                                                       
mux2 <<"			  RA9_out,            \n";                                                                       
mux2 <<"			  RA10_out,           \n";                                                                       
mux2 <<"			  RA11_out,           \n";                                                                       
mux2 <<"			  RA12_out,           \n";                                                                       
mux2 <<"			  RA13_out,           \n";                                                                       
mux2 <<"			  RA14_out,           \n";                                                                       
mux2 <<"			  RA15_out,           \n";                                                                       
mux2 <<"		      BN0_MEM0_in,        \n";                                                                       
mux2 <<"			  BN0_MEM1_in,        \n";                                                                       
mux2 <<"			  BN0_MEM2_in,        \n";                                                                       
mux2 <<"			  BN0_MEM3_in,        \n";                                                                       
mux2 <<"			  BN0_MEM4_in,        \n";                                                                       
mux2 <<"			  BN0_MEM5_in,        \n";                                                                       
mux2 <<"			  BN0_MEM6_in,        \n";                                                                       
mux2 <<"			  BN0_MEM7_in,        \n";                                                                       
mux2 <<"			  BN1_MEM0_in,        \n";                                                                       
mux2 <<"			  BN1_MEM1_in,        \n";                                                                       
mux2 <<"			  BN1_MEM2_in,        \n";                                                                       
mux2 <<"			  BN1_MEM3_in,        \n";                                                                       
mux2 <<"			  BN1_MEM4_in,        \n";                                                                       
mux2 <<"			  BN1_MEM5_in,        \n";                                                                       
mux2 <<"			  BN1_MEM6_in,        \n";                                                                       
mux2 <<"			  BN1_MEM7_in,        \n";                                                                       
mux2 <<"			  BN_sel              \n";                                                                       
mux2 <<"			  ) ;                 \n";                                                                       
mux2 <<"			                      \n";                                                                       
mux2 <<"			                      \n";                                                                       
mux2 <<"parameter SD_WIDTH  = 128 ;       \n";                                                                     
mux2 <<"parameter P_WIDTH   = 64 ;        \n";                                                                     
mux2 <<"parameter SEG1      = 64 ;        \n";                                                                     
mux2 <<"parameter SEG2      = 128 ;       \n";                                                                     
mux2 <<"                                  \n";                                                                     
mux2 <<"                                  \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA0_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA1_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA2_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA3_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA4_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA5_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA6_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA7_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA8_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA9_out ;    \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA10_out ;   \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA11_out ;   \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA12_out ;   \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA13_out ;   \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA14_out ;   \n";                                                                     
mux2 <<"output [P_WIDTH-1:0] RA15_out ;   \n";                                                                     
mux2 <<"                                  \n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM0_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM1_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM2_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM3_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM4_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM5_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM6_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN0_MEM7_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM0_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM1_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM2_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM3_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM4_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM5_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM6_in ;\n";                                                                     
mux2 <<"input [SD_WIDTH-1:0] BN1_MEM7_in ;\n";                                                                     
mux2 <<"input                BN_sel ;     \n";                                                                     
mux2 <<"                                  \n";                                                                     
mux2 <<"                                  \n";                                                                     
mux2 <<"                                  \n";                                                                     
mux2 <<"	// Radix-16 op_0              \n";                                                                       
mux2 <<"	assign RA0_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG2-1:SEG1]) : (BN0_MEM0_in[SEG2-1:SEG1]) ;   \n";        
mux2 <<"	// Radix-16 op_1                                                                             \n";        
mux2 <<"	assign RA1_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG1-1:0]) : (BN0_MEM0_in[SEG1-1:0]) ;         \n";        
mux2 <<"	// Radix-16 op_2                                                                             \n";        
mux2 <<"	assign RA2_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG2-1:SEG1]) : (BN0_MEM1_in[SEG2-1:SEG1]) ;   \n";        
mux2 <<"	// Radix-16 op_3                                                                             \n";        
mux2 <<"	assign RA3_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG1-1:0]) : (BN0_MEM1_in[SEG1-1:0]) ;         \n";        
mux2 <<"	// Radix-16 op_4                                                                             \n";        
mux2 <<"	assign RA4_out = (BN_sel==1'b1)? (BN1_MEM2_in[SEG2-1:SEG1]) : (BN0_MEM2_in[SEG2-1:SEG1]) ;   \n";        
mux2 <<"	// Radix-16 op_5                                                                             \n";        
mux2 <<"	assign RA5_out = (BN_sel==1'b1)? (BN1_MEM2_in[SEG1-1:0]) : (BN0_MEM2_in[SEG1-1:0]) ;         \n";        
mux2 <<"	// Radix-16 op_6                                                                             \n";        
mux2 <<"	assign RA6_out = (BN_sel==1'b1)? (BN1_MEM3_in[SEG2-1:SEG1]) : (BN0_MEM3_in[SEG2-1:SEG1]) ;   \n";        
mux2 <<"	// Radix-16 op_7                                                                             \n";        
mux2 <<"	assign RA7_out = (BN_sel==1'b1)? (BN1_MEM3_in[SEG1-1:0]) : (BN0_MEM3_in[SEG1-1:0]) ;         \n";        
mux2 <<"	// Radix-16 op_8                                                                             \n";        
mux2 <<"	assign RA8_out = (BN_sel==1'b1)? (BN1_MEM4_in[SEG2-1:SEG1]) : (BN0_MEM4_in[SEG2-1:SEG1]) ;   \n";        
mux2 <<"	// Radix-16 op_9                                                                             \n";        
mux2 <<"	assign RA9_out = (BN_sel==1'b1)? (BN1_MEM4_in[SEG1-1:0]) : (BN0_MEM4_in[SEG1-1:0]) ;         \n";        
mux2 <<"	// Radix-16 op_10                                                                            \n";        
mux2 <<"	assign RA10_out = (BN_sel==1'b1)? (BN1_MEM5_in[SEG2-1:SEG1]) : (BN0_MEM5_in[SEG2-1:SEG1]) ;  \n";        
mux2 <<"	// Radix-16 op_11                                                                            \n";        
mux2 <<"	assign RA11_out = (BN_sel==1'b1)? (BN1_MEM5_in[SEG1-1:0]) : (BN0_MEM5_in[SEG1-1:0]) ;        \n";        
mux2 <<"	// Radix-16 op_12                                                                            \n";        
mux2 <<"	assign RA12_out = (BN_sel==1'b1)? (BN1_MEM6_in[SEG2-1:SEG1]) : (BN0_MEM6_in[SEG2-1:SEG1]) ;  \n";        
mux2 <<"	// Radix-16 op_13                                                                            \n";        
mux2 <<"	assign RA13_out = (BN_sel==1'b1)? (BN1_MEM6_in[SEG1-1:0]) : (BN0_MEM6_in[SEG1-1:0]) ;        \n";        
mux2 <<"	// Radix-16 op_14                                                                            \n";        
mux2 <<"	assign RA14_out = (BN_sel==1'b1)? (BN1_MEM7_in[SEG2-1:SEG1]) : (BN0_MEM7_in[SEG2-1:SEG1]) ;  \n";        
mux2 <<"	// Radix-16 op_15                                                                            \n";        
mux2 <<"	assign RA15_out = (BN_sel==1'b1)? (BN1_MEM7_in[SEG1-1:0]) : (BN0_MEM7_in[SEG1-1:0]) ;        \n";        
mux2 <<"	                                                                                             \n";        
mux2 <<"endmodule                                                                                        \n";      
	 
     mux2.close();
}	 
void configurable_BFFT::Mux3(std::string string_in){
     std::ofstream mux3; 
     std::string        string_buf = "/Mux3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;      
     mux3.open(ss.str());
mux3 << "`timescale 1 ns/1 ps               \n";                                                        
mux3 << "module Mux3(MulB0_out,             \n";                                                        
mux3 << "			  MulB1_out,            \n";                                                         
mux3 << "			  MulB2_out,            \n";                                                         
mux3 << "			  MulB3_out,            \n";                                                         
mux3 << "			  MulB4_out,            \n";                                                         
mux3 << "			  MulB5_out,            \n";                                                         
mux3 << "			  MulB6_out,            \n";                                                         
mux3 << "			  MulB7_out,            \n";                                                         
mux3 << "			  MulB8_out,            \n";                                                         
mux3 << "			  MulB9_out,            \n";                                                         
mux3 << "			  MulB10_out,           \n";                                                         
mux3 << "			  MulB11_out,           \n";                                                         
mux3 << "			  MulB12_out,           \n";                                                         
mux3 << "			  MulB13_out,           \n";                                                         
mux3 << "			  MulB14_out,           \n";                                                         
mux3 << "			  MulB15_out,           \n";                                                         
mux3 << "			  MulA1_out,            \n";                                                         
mux3 << "			  MulA2_out,            \n";                                                         
mux3 << "			  MulA3_out,            \n";                                                         
mux3 << "			  MulA4_out,            \n";                                                         
mux3 << "			  MulA5_out,            \n";                                                         
mux3 << "			  MulA6_out,            \n";                                                         
mux3 << "			  MulA7_out,            \n";                                                         
mux3 << "			  MulA9_out,            \n";                                                         
mux3 << "			  MulA10_out,           \n";                                                         
mux3 << "			  MulA11_out,           \n";                                                         
mux3 << "			  MulA12_out,           \n";                                                         
mux3 << "			  MulA13_out,           \n";                                                         
mux3 << "			  MulA14_out,           \n";                                                         
mux3 << "			  MulA15_out,           \n";                                                         
mux3 << "			  IFFTROMD0_in,         \n";                                                         
mux3 << "			  IFFTROMD1_in,         \n";                                                         
mux3 << "			  IFFTROMD2_in,         \n";                                                         
mux3 << "			  IFFTROMD3_in,         \n";                                                         
mux3 << "			  IFFTROMD4_in,         \n";                                                         
mux3 << "			  IFFTROMD5_in,         \n";                                                         
mux3 << "			  IFFTROMD6_in,         \n";                                                         
mux3 << "			  IFFTROMD7_in,         \n";                                                         
mux3 << "            ROMD0_in,              \n";                                                        
mux3 << "			  ROMD1_in,             \n";                                                         
mux3 << "			  ROMD2_in,             \n";                                                         
mux3 << "			  ROMD3_in,             \n";                                                         
mux3 << "			  ROMD4_in,             \n";                                                         
mux3 << "			  ROMD5_in,             \n";                                                         
mux3 << "			  ROMD6_in,             \n";                                                         
mux3 << "			  ROMD7_in,             \n";                                                         
mux3 << "		      FFTBD0_in,            \n";                                                         
mux3 << "			  FFTBD1_in,            \n";                                                         
mux3 << "			  FFTBD2_in,            \n";                                                         
mux3 << "			  FFTBD3_in,            \n";                                                         
mux3 << "			  FFTBD4_in,            \n";                                                         
mux3 << "			  FFTBD5_in,            \n";                                                         
mux3 << "			  FFTBD6_in,            \n";                                                         
mux3 << "			  FFTBD7_in,            \n";                                                         
mux3 << "			  FFTBD8_in,            \n";                                                         
mux3 << "			  FFTBD9_in,            \n";                                                         
mux3 << "			  FFTBD10_in,           \n";                                                         
mux3 << "			  FFTBD11_in,           \n";                                                         
mux3 << "			  FFTBD12_in,           \n";                                                         
mux3 << "			  FFTBD13_in,           \n";                                                         
mux3 << "			  FFTBD14_in,           \n";                                                         
mux3 << "			  FFTBD15_in,           \n";                                                         
mux3 << "			  RA1D_in,              \n";                                                         
mux3 << "			  RA2D_in,              \n";                                                         
mux3 << "			  RA3D_in,              \n";                                                         
mux3 << "			  RA4D_in,              \n";                                                         
mux3 << "			  RA5D_in,              \n";                                                         
mux3 << "			  RA6D_in,              \n";                                                         
mux3 << "			  RA7D_in,              \n";                                                         
mux3 << "			  RA9D_in,              \n";                                                         
mux3 << "			  RA10D_in,             \n";                                                         
mux3 << "			  RA11D_in,             \n";                                                         
mux3 << "			  RA12D_in,             \n";                                                         
mux3 << "			  RA13D_in,             \n";                                                         
mux3 << "			  RA14D_in,             \n";                                                         
mux3 << "			  RA15D_in,             \n";                                                         
mux3 << "			  Mul_sel,              \n";
mux3 << "              Point_sel,           \n";		  
mux3 << "			  mode_sel              \n";                                                         
mux3 << "			  ) ;                   \n";                                                         
mux3 << "			                        \n";                                                         
mux3 << "parameter P_WIDTH   = 64 ;         \n";                                                        
mux3 << "parameter SD_WIDTH  = 128 ;        \n";                                                        
mux3 << "parameter SEG1  = 64 ;             \n";                                                        
mux3 << "parameter SEG2  = 128 ;            \n";                                                        
mux3 << "                                   \n";                                                        
mux3 << "parameter P_ONE      = 64'd1 ;     \n";                                                           
mux3 << "parameter PINV_65536 = 64'd18446462594437939201; // inverse N = 65536   \n";                                 
mux3 << "parameter PINV_32768 = 64'd18446181119461294081; // inverse N = 32768   \n";                                
mux3 << "parameter PINV_16384 = 64'd18445618169508003841; // inverse N = 16384   \n";                                
mux3 << "parameter PINV_8192  = 64'd18444492269601423361; // inverse N = 8192    \n";
mux3 << "parameter PINV_4096  = 64'd18442240469788262401; // inverse N = 4096    \n";  
mux3 << "                                                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB0_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB1_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB2_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB3_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB4_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB5_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB6_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB7_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB8_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB9_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulB10_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulB11_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulB12_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulB13_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulB14_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulB15_out ;                                       \n";                   
mux3 << "                                                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA1_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA2_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA3_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA4_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA5_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA6_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA7_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA9_out ;                                        \n";                   
mux3 << "output [P_WIDTH-1:0] MulA10_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulA11_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulA12_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulA13_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulA14_out ;                                       \n";                   
mux3 << "output [P_WIDTH-1:0] MulA15_out ;                                       \n";                   
mux3 << "                                                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  IFFTROMD0_in ;                                     \n";                   
mux3 << "input [SD_WIDTH-1:0] IFFTROMD1_in ;                                     \n";                   
mux3 << "input [SD_WIDTH-1:0] IFFTROMD2_in ;                                     \n";                   
mux3 << "input [SD_WIDTH-1:0] IFFTROMD3_in ;                                     \n";                   
mux3 << "input [SD_WIDTH-1:0] IFFTROMD4_in ;                                     \n";                   
mux3 << "input [SD_WIDTH-1:0] IFFTROMD5_in ;                                     \n";                   
mux3 << "input [SD_WIDTH-1:0] IFFTROMD6_in ;                                     \n";                   
mux3 << "input [SD_WIDTH-1:0] IFFTROMD7_in ;                                     \n";                   
mux3 << "input [P_WIDTH-1:0]  ROMD0_in ;                                         \n";                   
mux3 << "input [SD_WIDTH-1:0] ROMD1_in ;                                         \n";                   
mux3 << "input [SD_WIDTH-1:0] ROMD2_in ;                                         \n";                   
mux3 << "input [SD_WIDTH-1:0] ROMD3_in ;                                         \n";                   
mux3 << "input [SD_WIDTH-1:0] ROMD4_in ;                                         \n";                   
mux3 << "input [SD_WIDTH-1:0] ROMD5_in ;                                         \n";                   
mux3 << "input [SD_WIDTH-1:0] ROMD6_in ;                                         \n";                   
mux3 << "input [SD_WIDTH-1:0] ROMD7_in ;                                         \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD0_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD1_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD2_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD3_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD4_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD5_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD6_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD7_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD8_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD9_in ;                                        \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD10_in ;                                       \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD11_in ;                                       \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD12_in ;                                       \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD13_in ;                                       \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD14_in ;                                       \n";                   
mux3 << "input [P_WIDTH-1:0]  FFTBD15_in ;                                       \n";                   
mux3 << "input [P_WIDTH-1:0]  RA1D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA2D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA3D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA4D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA5D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA6D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA7D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA9D_in ;                                          \n";                   
mux3 << "input [P_WIDTH-1:0]  RA10D_in ;                                         \n";                   
mux3 << "input [P_WIDTH-1:0]  RA11D_in ;                                         \n";                   
mux3 << "input [P_WIDTH-1:0]  RA12D_in ;                                         \n";                   
mux3 << "input [P_WIDTH-1:0]  RA13D_in ;                                         \n";                   
mux3 << "input [P_WIDTH-1:0]  RA14D_in ;                                         \n";                   
mux3 << "input [P_WIDTH-1:0]  RA15D_in ;                                         \n";                   
mux3 << "input [1:0]          Mul_sel ;                                          \n";
mux3 << "input [2:0]          Point_sel;                                         \n";                    
mux3 << "input                mode_sel ;                                         \n";                   
mux3 << "                                                                        \n";                   
mux3 << "                                                                        \n";                   
mux3 << "                                                                        \n";                   
mux3 << "	//                                                                   \n";                    
mux3 << "	assign MulB0_out = (Mul_sel==2'd1)? P_ONE :                          \n";                    
mux3 << "					   (Mul_sel==2'd2)? FFTBD0_in :                      \n";                    
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :\n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :\n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :\n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :\n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE;\n";
mux3 << "	//\n";
mux3 << "	assign MulB1_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD0_in :              \n";         
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD0_in :          \n";         
mux3 << "					   (Mul_sel==2'd2)? FFTBD1_in :                                 \n";         
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :       \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :       \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :       \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :       \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE; \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB2_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG2-1:SEG1] :     \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG2-1:SEG1] : \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD2_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE;     \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB3_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG1-1:0] :        \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG1-1:0] :    \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD3_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE;     \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB4_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD2_in[SEG2-1:SEG1] :     \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD2_in[SEG2-1:SEG1] : \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD4_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;    \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB5_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD2_in[SEG1-1:0] :        \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD2_in[SEG1-1:0] :    \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD5_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;    \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB6_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD3_in[SEG2-1:SEG1] :     \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD3_in[SEG2-1:SEG1] : \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD6_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ; 	\n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB7_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD3_in[SEG1-1:0] :        \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD3_in[SEG1-1:0] :    \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD7_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;    \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB8_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD4_in[SEG2-1:SEG1] :     \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD4_in[SEG2-1:SEG1] : \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD8_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;    \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB9_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD4_in[SEG1-1:0] :        \n";     
mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD4_in[SEG1-1:0] :    \n";     
mux3 << "					   (Mul_sel==2'd2)? FFTBD9_in :                                     \n";     
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :           \n";
mux3 << "					   ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;    \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB10_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD5_in[SEG2-1:SEG1] :    \n";     
mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD5_in[SEG2-1:SEG1] :\n";     
mux3 << "					    (Mul_sel==2'd2)? FFTBD10_in :                                   \n";     
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ; 	\n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB11_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD5_in[SEG1-1:0] :       \n";     
mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD5_in[SEG1-1:0] :   \n";     
mux3 << "					    (Mul_sel==2'd2)? FFTBD11_in :                                   \n";     
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;   \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB12_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD6_in[SEG2-1:SEG1] :    \n";     
mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD6_in[SEG2-1:SEG1] :\n";     
mux3 << "					    (Mul_sel==2'd2)? FFTBD12_in :                                   \n";     
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;   \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB13_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD6_in[SEG1-1:0] :       \n";     
mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD6_in[SEG1-1:0] :   \n";     
mux3 << "					    (Mul_sel==2'd2)? FFTBD13_in :                                   \n";     
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;   \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB14_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD7_in[SEG2-1:SEG1] :    \n";     
mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD7_in[SEG2-1:SEG1] :\n";     
mux3 << "					    (Mul_sel==2'd2)? FFTBD14_in :                                   \n";     
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;   \n";
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulB15_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD7_in[SEG1-1:0] :       \n";     
mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD7_in[SEG1-1:0] :   \n";     
mux3 << "					    (Mul_sel==2'd2)? FFTBD15_in :                                   \n";     
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd0))? PINV_65536 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd1))? PINV_32768 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd2))? PINV_16384 :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd3))? PINV_8192  :          \n";
mux3 << "					    ((Mul_sel==2'd3) && (Point_sel == 3'd4))? PINV_4096  :P_ONE ;   \n";
mux3 << "	                                                                                    \n";
mux3 << "	                                                                                    \n";     
mux3 << "    // change RA output position in IFFT                                               \n";    
mux3 << "	assign MulA1_out = (mode_sel==1'b1)? RA15D_in : RA1D_in ;                           \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA2_out = (mode_sel==1'b1)? RA14D_in : RA2D_in ;                           \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA3_out = (mode_sel==1'b1)? RA13D_in : RA3D_in ;                           \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA4_out = (mode_sel==1'b1)? RA12D_in : RA4D_in ;                           \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA5_out = (mode_sel==1'b1)? RA11D_in : RA5D_in ;                           \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA6_out = (mode_sel==1'b1)? RA10D_in : RA6D_in ;                           \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA7_out = (mode_sel==1'b1)? RA9D_in : RA7D_in ;                            \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA9_out = (mode_sel==1'b1)? RA7D_in : RA9D_in ;                            \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA10_out = (mode_sel==1'b1)? RA6D_in : RA10D_in ;                          \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA11_out = (mode_sel==1'b1)? RA5D_in : RA11D_in ;                          \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA12_out = (mode_sel==1'b1)? RA4D_in : RA12D_in ;                          \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA13_out = (mode_sel==1'b1)? RA3D_in : RA13D_in ;                          \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA14_out = (mode_sel==1'b1)? RA2D_in : RA14D_in ;                          \n";     
mux3 << "	//                                                                                  \n";     
mux3 << "	assign MulA15_out = (mode_sel==1'b1)? RA1D_in : RA15D_in ;                          \n";     
mux3 << "	                                                                                    \n";     
mux3 << "	                                                                                    \n";     
mux3 << "endmodule                                                                              \n";    
	 
	 mux3.close();  
}
void configurable_BFFT::Mux4(std::string string_in){
     std::ofstream mux4;
     std::string        string_buf = "/Mux4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;      
     mux4.open(ss.str());
mux4 <<"`timescale 1 ns/1 ps                   \n";                      
mux4 <<"module Mux4(CRUD0_out,                 \n";                      
mux4 <<"			  CRUD1_out,               \n";                          
mux4 <<"			  CRUD2_out,               \n";                          
mux4 <<"			  CRUD3_out,               \n";                          
mux4 <<"			  CRUD4_out,               \n";                          
mux4 <<"			  CRUD5_out,               \n";                          
mux4 <<"			  CRUD6_out,               \n";                          
mux4 <<"			  CRUD7_out,               \n";                          
mux4 <<"			  CRUD8_out,               \n";                          
mux4 <<"			  CRUD9_out,               \n";                          
mux4 <<"			  CRUD10_out,              \n";                          
mux4 <<"			  CRUD11_out,              \n";                          
mux4 <<"			  CRUD12_out,              \n";                          
mux4 <<"			  CRUD13_out,              \n";                          
mux4 <<"			  CRUD14_out,              \n";                          
mux4 <<"			  CRUD15_out,              \n";                          
mux4 <<"			  IFFTD0_in,               \n";                          
mux4 <<"            IFFTD1_in,                 \n";                      
mux4 <<"            IFFTD2_in,                 \n";                      
mux4 <<"            IFFTD3_in,                 \n";                      
mux4 <<"			  IFFTD4_in,               \n";                          
mux4 <<"			  IFFTD5_in,               \n";                          
mux4 <<"			  IFFTD6_in,               \n";                          
mux4 <<"			  IFFTD7_in,               \n";                          
mux4 <<"			  IFFTD8_in,               \n";                          
mux4 <<"			  IFFTD9_in,               \n";                          
mux4 <<"			  IFFTD10_in,              \n";                          
mux4 <<"			  IFFTD11_in,              \n";                          
mux4 <<"			  IFFTD12_in,              \n";                          
mux4 <<"			  IFFTD13_in,              \n";                          
mux4 <<"			  IFFTD14_in,              \n";                          
mux4 <<"			  IFFTD15_in,              \n";                          
mux4 <<"			  m2_sel                   \n";                          
mux4 <<"			  ) ;                      \n";                          
mux4 <<"			                           \n";                        
mux4 <<"parameter P_WIDTH   = 64 ;             \n";                      
mux4 <<"parameter P_ZERO    = 64'h0 ;          \n";                      
mux4 <<"                                       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD0_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD1_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD2_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD3_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD4_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD5_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD6_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD7_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD8_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD9_out ;       \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD10_out ;      \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD11_out ;      \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD12_out ;      \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD13_out ;      \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD14_out ;      \n";                      
mux4 <<"output [P_WIDTH-1:0] CRUD15_out ;      \n";                      
mux4 <<"                                       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD0_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD1_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD2_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD3_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD4_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD5_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD6_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD7_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD8_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD9_in ;       \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD10_in ;      \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD11_in ;      \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD12_in ;      \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD13_in ;      \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD14_in ;      \n";                      
mux4 <<"input [P_WIDTH-1:0]  IFFTD15_in ;      \n";                      
mux4 <<"input                m2_sel ;          \n";                      
mux4 <<"                                       \n";                      
mux4 <<"                                       \n";                      
mux4 <<"                                       \n";                      
mux4 <<"	//                                 \n";                        
mux4 <<"	assign CRUD0_out  = IFFTD0_in ;    \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD1_out  = IFFTD1_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD2_out  = IFFTD2_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD3_out  = IFFTD3_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD4_out  = IFFTD4_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD5_out  = IFFTD5_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD6_out  = IFFTD6_in ;    \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD7_out  = IFFTD7_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD8_out  = IFFTD8_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD9_out  = IFFTD9_in ;	   \n";
mux4 <<"	//                                 \n";
mux4 <<"	assign CRUD10_out = IFFTD10_in;  \n";
mux4 <<"	//                               \n";
mux4 <<"	assign CRUD11_out = IFFTD11_in;  \n";
mux4 <<"	//                               \n";
mux4 <<"	assign CRUD12_out = IFFTD12_in;  \n";
mux4 <<"	//                               \n";
mux4 <<"	assign CRUD13_out = IFFTD13_in;  \n";
mux4 <<"	//                               \n";
mux4 <<"	assign CRUD14_out = IFFTD14_in;  \n";
mux4 <<"	//                               \n";
mux4 <<"	assign CRUD15_out = IFFTD15_in;  \n";
mux4 <<"	                                                           \n";
mux4 <<"	                                                           \n";
mux4 <<"endmodule                                                      \n";
	 
	 mux4.close();   
}
void configurable_BFFT::Mux5(std::string string_in){
	 std::ofstream mux5;
     std::string        string_buf = "/Mux5.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux5.open(ss.str());
mux5 << " //=============================================    \n";                          
mux5 << " //Data:2020/04/08                                  \n";                          
mux5 << " //note:re-order factor Mux                         \n";                          
mux5 << " //writter:shi yong wu                              \n";                          
mux5 << " //=============================================    \n";                          
mux5 << " `timescale 1ns/10ps                                \n";                          
mux5 << " module Mux5(                                       \n";                          
mux5 << "         B0M0_ain_o,                                \n";                          
mux5 << "         B0M1_ain_o,                                \n";                          
mux5 << "         B0M2_ain_o,                                \n";                          
mux5 << "         B0M3_ain_o,                                \n";                          
mux5 << "         B0M4_ain_o,                                \n";                          
mux5 << "         B0M5_ain_o,                                \n";                          
mux5 << "         B0M6_ain_o,                                \n";                          
mux5 << "         B0M7_ain_o,                                \n";                          
mux5 << "         B0M8_ain_o,                                \n";                          
mux5 << "         B0M9_ain_o,                                \n";                          
mux5 << "         B0M10_ain_o,                               \n";                          
mux5 << "         B0M11_ain_o,                               \n";                          
mux5 << "         B0M12_ain_o,                               \n";                          
mux5 << "         B0M13_ain_o,                               \n";                          
mux5 << "         B0M14_ain_o,                               \n";                          
mux5 << "         B0M15_ain_o,                               \n";                          
mux5 << " 		  B1M0_ain_o,                                \n";                          
mux5 << " 		  B1M1_ain_o,                                \n";                          
mux5 << " 		  B1M2_ain_o,                                \n";                          
mux5 << " 		  B1M3_ain_o,                                \n";                          
mux5 << " 		  B1M4_ain_o,                                \n";                          
mux5 << " 		  B1M5_ain_o,                                \n";                          
mux5 << " 		  B1M6_ain_o,                                \n";                          
mux5 << " 		  B1M7_ain_o,                                \n";                          
mux5 << " 		  B1M8_ain_o,                                \n";                          
mux5 << " 		  B1M9_ain_o,                                \n";                          
mux5 << " 		  B1M10_ain_o,                               \n";                          
mux5 << " 		  B1M11_ain_o,                               \n";                          
mux5 << " 		  B1M12_ain_o,                               \n";                          
mux5 << " 		  B1M13_ain_o,                               \n";                          
mux5 << " 		  B1M14_ain_o,                               \n";                          
mux5 << " 		  B1M15_ain_o,                               \n";                          
mux5 << "         B0M0_bin_o,                                \n";                           
mux5 << "         B0M1_bin_o,                                \n";                           
mux5 << "         B0M2_bin_o,                                \n";                           
mux5 << "         B0M3_bin_o,                                \n";                           
mux5 << "         B0M4_bin_o,                                \n";                           
mux5 << "         B0M5_bin_o,                                \n";                           
mux5 << "         B0M6_bin_o,                                \n";                           
mux5 << "         B0M7_bin_o,                                \n";                           
mux5 << "         B0M8_bin_o,                                \n";                           
mux5 << "         B0M9_bin_o,                                \n";                           
mux5 << "         B0M10_bin_o,                               \n";                            
mux5 << "         B0M11_bin_o,                               \n";                            
mux5 << "         B0M12_bin_o,                               \n";                            
mux5 << "         B0M13_bin_o,                               \n";                            
mux5 << "         B0M14_bin_o,                               \n";                            
mux5 << "         B0M15_bin_o,                               \n";                            
mux5 << " 		  B1M0_bin_o,                                \n";                           
mux5 << " 		  B1M1_bin_o,                                \n";                           
mux5 << " 		  B1M2_bin_o,                                \n";                           
mux5 << " 		  B1M3_bin_o,                                \n";                           
mux5 << " 		  B1M4_bin_o,                                \n";                           
mux5 << " 		  B1M5_bin_o,                                \n";                           
mux5 << " 		  B1M6_bin_o,                                \n";                           
mux5 << " 		  B1M7_bin_o,                                \n";                           
mux5 << " 		  B1M8_bin_o,                                \n";                           
mux5 << " 		  B1M9_bin_o,                                \n";                           
mux5 << " 		  B1M10_bin_o,                               \n";                           
mux5 << " 		  B1M11_bin_o,                               \n";                           
mux5 << " 		  B1M12_bin_o,                               \n";                           
mux5 << " 		  B1M13_bin_o,                               \n";                           
mux5 << " 		  B1M14_bin_o,                               \n";                           
mux5 << " 		  B1M15_bin_o,                               \n";                           
mux5 << "         ExtB0_D0,                                  \n";                           
mux5 << "         ExtB0_D1,                                  \n";                           
mux5 << "         ExtB0_D2,                                  \n";                           
mux5 << "         ExtB0_D3,                                  \n";                           
mux5 << "         ExtB0_D4,                                  \n";                           
mux5 << "         ExtB0_D5,                                  \n";                           
mux5 << "         ExtB0_D6,                                  \n";                           
mux5 << "         ExtB0_D7,                                  \n";                           
mux5 << "         ExtB1_D0_pip,                              \n";                                          
mux5 << "         ExtB1_D1_pip,                              \n";                                          
mux5 << "         ExtB1_D2_pip,                              \n";                                          
mux5 << "         ExtB1_D3_pip,                              \n";                                          
mux5 << "         ExtB1_D4_pip,                              \n";                                          
mux5 << "         ExtB1_D5_pip,                              \n";                                          
mux5 << "         ExtB1_D6_pip,                              \n";                                          
mux5 << "         ExtB1_D7_pip,                              \n";                                          
mux5 << "         SP_r0,                                     \n";                           
mux5 << "         SP_r1,                                     \n";                           
mux5 << "         SP_r2,                                     \n";                           
mux5 << "         SP_r3,                                     \n";                           
mux5 << "         SP_r4,                                     \n";                           
mux5 << "         SP_r5,                                     \n";                           
mux5 << "         SP_r6,                                     \n";                           
mux5 << "         SP_r7,                                     \n";                           
mux5 << "         SP_r8,                                     \n";                           
mux5 << "         SP_r9,                                     \n";                           
mux5 << "         SP_r10,                                    \n";                           
mux5 << "         SP_r11,                                    \n";                           
mux5 << "         SP_r12,                                    \n";                           
mux5 << "         SP_r13,                                    \n";                           
mux5 << "         SP_r14,                                    \n";                           
mux5 << "         SP_r15,                                    \n";                           
mux5 << "         reorderb0r0,                               \n";                           
mux5 << "         reorderb0r1,                               \n";                           
mux5 << "         reorderb0r2,                               \n";                           
mux5 << "         reorderb0r3,                               \n";                           
mux5 << "         reorderb0r4,                               \n";                           
mux5 << "         reorderb0r5,                               \n";                           
mux5 << "         reorderb0r6,                               \n";                           
mux5 << "         reorderb0r7,                               \n";                           
mux5 << "         ireorderr0,                                \n";                           
mux5 << "         ireorderr1,                                \n";                           
mux5 << "         ireorderr2,                                \n";                           
mux5 << "         ireorderr3,                                \n";                           
mux5 << "         ireorderr4,                                \n";                           
mux5 << "         ireorderr5,                                \n";                           
mux5 << "         ireorderr6,                                \n";                           
mux5 << "         ireorderr7,                                \n";                           
mux5 << "         ireorderr8,                                \n";                           
mux5 << "         ireorderr9,                                \n";                           
mux5 << "         ireorderr10,                               \n";                           
mux5 << "         ireorderr11,                               \n";                           
mux5 << "         ireorderr12,                               \n";                           
mux5 << "         ireorderr13,                               \n";                           
mux5 << "         ireorderr14,                               \n";                           
mux5 << "         ireorderr15,                               \n";                           
mux5 << " 		  CRUD0,                                     \n";                                           
mux5 << " 		  CRUD1,                                     \n";                                           
mux5 << " 		  CRUD2,                                     \n";                                           
mux5 << " 		  CRUD3,                                     \n";                                           
mux5 << " 		  CRUD4,                                     \n";                                           
mux5 << " 		  CRUD5,                                     \n";                                           
mux5 << " 		  CRUD6,                                     \n";                                           
mux5 << " 		  CRUD7,                                     \n";                                           
mux5 << " 		  CRUD8,                                     \n";                                           
mux5 << " 		  CRUD9,                                     \n";                                           
mux5 << " 		  CRUD10,                                    \n";                                            
mux5 << " 		  CRUD11,                                    \n";                                            
mux5 << " 		  CRUD12,                                    \n";                                            
mux5 << " 		  CRUD13,                                    \n";                                            
mux5 << " 		  CRUD14,                                    \n";                                            
mux5 << " 		  CRUD15,                                    \n";                                            
mux5 << " 		  reorderb1r0,                               \n";                                           
mux5 << " 		  reorderb1r1,                               \n";                                           
mux5 << " 		  reorderb1r2,                               \n";                                           
mux5 << " 		  reorderb1r3,                               \n";                                           
mux5 << " 		  reorderb1r4,                               \n";                                           
mux5 << " 		  reorderb1r5,                               \n";                                           
mux5 << " 		  reorderb1r6,                               \n";                                           
mux5 << " 		  reorderb1r7,                               \n";                                           
mux5 << "         re_sel                                     \n";                           
mux5 << " );                                                 \n";                           
mux5 << "                                                    \n";                           
mux5 << " parameter CP_WIDTH  = "<<      CP_width  <<";                         \n";                            
mux5 << " parameter CP_ZERO   = "<<      CP_width  <<"'d0;                      \n";                               
mux5 << " parameter DOP_WIDTH = "<< (2 * CP_width) <<";  //Double data width    \n";  
mux5 << "                                                    \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M0_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M1_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M2_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M3_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M4_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M5_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M6_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M7_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M8_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M9_ain_o;                  \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M10_ain_o;                 \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M11_ain_o;                 \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M12_ain_o;                 \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M13_ain_o;                 \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M14_ain_o;                 \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M15_ain_o;                 \n";                           
mux5 << "                                                    \n";                           
mux5 << " output [CP_WIDTH-1:0] B0M0_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M1_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M2_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M3_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M4_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M5_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M6_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M7_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M8_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M9_bin_o;                  \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M10_bin_o;                 \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M11_bin_o;                 \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M12_bin_o;                 \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M13_bin_o;                 \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M14_bin_o;                 \n";                            
mux5 << " output [CP_WIDTH-1:0] B0M15_bin_o;                 \n";                            
mux5 << "                                                    \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M0_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M1_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M2_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M3_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M4_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M5_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M6_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M7_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M8_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M9_ain_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M10_ain_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M11_ain_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M12_ain_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M13_ain_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M14_ain_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M15_ain_o;             \n";                                           
mux5 << " 	  output [CP_WIDTH-1:0] B1M0_bin_o;              \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M1_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M2_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M3_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M4_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M5_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M6_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M7_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M8_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M9_bin_o;              \n";                                          
mux5 << "     output [CP_WIDTH-1:0] B1M10_bin_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M11_bin_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M12_bin_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M13_bin_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M14_bin_o;             \n";                                           
mux5 << "     output [CP_WIDTH-1:0] B1M15_bin_o;             \n";                                           
mux5 << "                                                    \n";                                          
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D0_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D1_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D2_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D3_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D4_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D5_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D6_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  ExtB1_D7_pip;              \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r0;               \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r1;               \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r2;               \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r3;               \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r4;               \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r5;               \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r6;               \n";                                         
mux5 << " 	input [CP_WIDTH-1:0]  reorderb1r7;               \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD0;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD1;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD2;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD3;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD4;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD5;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD6;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD7;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD8;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD9;                     \n";                                         
mux5 << " 	input [DOP_WIDTH-1:0] CRUD10;                    \n";                                          
mux5 << " 	input [DOP_WIDTH-1:0] CRUD11;                    \n";                                          
mux5 << " 	input [DOP_WIDTH-1:0] CRUD12;                    \n";                                          
mux5 << " 	input [DOP_WIDTH-1:0] CRUD13;                    \n";                                          
mux5 << " 	input [DOP_WIDTH-1:0] CRUD14;                    \n";                                          
mux5 << " 	input [DOP_WIDTH-1:0] CRUD15;                    \n";                                          
mux5 << "                                                    \n";                           
mux5 << " input                 re_sel ;                     \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D0;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D1;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D2;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D3;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D4;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D5;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D6;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] ExtB0_D7;                    \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r0;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r1;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r2;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r3;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r4;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r5;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r6;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r7;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r8;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r9;                       \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r10;                      \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r11;                      \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r12;                      \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r13;                      \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r14;                      \n";                           
mux5 << " input  [CP_WIDTH-1:0] SP_r15;                      \n";                           
mux5 << "                                                    \n";                           
mux5 << " input [CP_WIDTH-1:0]  reorderb0r0;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  reorderb0r1;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  reorderb0r2;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  reorderb0r3;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  reorderb0r4;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  reorderb0r5;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  reorderb0r6;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  reorderb0r7;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr0;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr1;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr2;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr3;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr4;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr5;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr6;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr7;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr8;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr9;                  \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr10;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr11;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr12;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr13;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr14;                 \n";                            
mux5 << " input [CP_WIDTH-1:0]  ireorderr15;                 \n";                            
mux5 << "                                                    \n";                           
mux5 << "                                                    \n";                           
mux5 << "   assign B0M0_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D0 : SP_r0;     \n";            
mux5 << "   assign B0M1_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D1 : SP_r1;     \n";            
mux5 << "   assign B0M2_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D2 : SP_r2;     \n";            
mux5 << "   assign B0M3_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D3 : SP_r3;     \n";            
mux5 << "   assign B0M4_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D4 : SP_r4;     \n";            
mux5 << "   assign B0M5_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D5 : SP_r5;     \n";            
mux5 << "   assign B0M6_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D6 : SP_r6;     \n";            
mux5 << "   assign B0M7_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D7 : SP_r7;     \n";            
mux5 << "   assign B0M8_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r8;     \n";            
mux5 << "   assign B0M9_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r9;     \n";            
mux5 << "   assign B0M10_ain_o = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r10;    \n";            
mux5 << "   assign B0M11_ain_o = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r11;    \n";            
mux5 << "   assign B0M12_ain_o = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r12;    \n";            
mux5 << "   assign B0M13_ain_o = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r13;    \n";            
mux5 << "   assign B0M14_ain_o = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r14;    \n";            
mux5 << "   assign B0M15_ain_o = ( re_sel == 1'b1) ?  CP_ZERO  : SP_r15;    \n";            
mux5 << "                                                        //test     \n";            
mux5 << "   assign B0M0_bin_o  = ( re_sel == 1'b1) ?  reorderb0r0 : ireorderr0;//     \n";  
mux5 << "   assign B0M1_bin_o  = ( re_sel == 1'b1) ?  reorderb0r1 : ireorderr1;//     \n";  
mux5 << "   assign B0M2_bin_o  = ( re_sel == 1'b1) ?  reorderb0r2 : ireorderr2;//     \n";  
mux5 << "   assign B0M3_bin_o  = ( re_sel == 1'b1) ?  reorderb0r3 : ireorderr3;//     \n";  
mux5 << "   assign B0M4_bin_o  = ( re_sel == 1'b1) ?  reorderb0r4 : ireorderr4;//     \n";  
mux5 << "   assign B0M5_bin_o  = ( re_sel == 1'b1) ?  reorderb0r5 : ireorderr5;//     \n";  
mux5 << "   assign B0M6_bin_o  = ( re_sel == 1'b1) ?  reorderb0r6 : ireorderr6;//     \n";  
mux5 << "   assign B0M7_bin_o  = ( re_sel == 1'b1) ?  reorderb0r7 : ireorderr7;//     \n";  
mux5 << "   assign B0M8_bin_o  = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr8;//     \n";  
mux5 << "   assign B0M9_bin_o  = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr9;//     \n";  
mux5 << "   assign B0M10_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr10;//    \n";  
mux5 << "   assign B0M11_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr11;//    \n";  
mux5 << "   assign B0M12_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr12;//    \n";  
mux5 << "   assign B0M13_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr13;//    \n";  
mux5 << "   assign B0M14_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr14;//    \n";  
mux5 << "   assign B0M15_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr15;//    \n";  
mux5 << "                                                                             \n";  
mux5 << " 	assign B1M0_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D0_pip :CRUD0[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M1_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D1_pip :CRUD1[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M2_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D2_pip :CRUD2[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M3_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D3_pip :CRUD3[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M4_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D4_pip :CRUD4[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M5_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D5_pip :CRUD5[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M6_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D6_pip :CRUD6[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M7_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D7_pip :CRUD7[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M8_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD8[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M9_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD9[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5 << " 	assign B1M10_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD10[DOP_WIDTH-1:CP_WIDTH] ;      \n"; 
mux5 << " 	assign B1M11_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD11[DOP_WIDTH-1:CP_WIDTH] ;      \n"; 
mux5 << " 	assign B1M12_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD12[DOP_WIDTH-1:CP_WIDTH] ;      \n"; 
mux5 << " 	assign B1M13_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD13[DOP_WIDTH-1:CP_WIDTH] ;      \n"; 
mux5 << " 	assign B1M14_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD14[DOP_WIDTH-1:CP_WIDTH] ;      \n"; 
mux5 << " 	assign B1M15_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD15[DOP_WIDTH-1:CP_WIDTH] ;      \n"; 
mux5 << "                                                                                               \n";
mux5 << " 	assign B1M0_bin_o  = ( re_sel == 1'b1) ? reorderb1r0  :CRUD0[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M1_bin_o  = ( re_sel == 1'b1) ? reorderb1r1  :CRUD1[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M2_bin_o  = ( re_sel == 1'b1) ? reorderb1r2  :CRUD2[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M3_bin_o  = ( re_sel == 1'b1) ? reorderb1r3  :CRUD3[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M4_bin_o  = ( re_sel == 1'b1) ? reorderb1r4  :CRUD4[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M5_bin_o  = ( re_sel == 1'b1) ? reorderb1r5  :CRUD5[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M6_bin_o  = ( re_sel == 1'b1) ? reorderb1r6  :CRUD6[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M7_bin_o  = ( re_sel == 1'b1) ? reorderb1r7  :CRUD7[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M8_bin_o  = ( re_sel == 1'b1) ? CP_ZERO      :CRUD8[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M9_bin_o  = ( re_sel == 1'b1) ? CP_ZERO      :CRUD9[CP_WIDTH-1:0]  ;               \n"; 
mux5 << " 	assign B1M10_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD10[CP_WIDTH-1:0] ;               \n";  
mux5 << " 	assign B1M11_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD11[CP_WIDTH-1:0] ;               \n";  
mux5 << " 	assign B1M12_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD12[CP_WIDTH-1:0] ;               \n";  
mux5 << " 	assign B1M13_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD13[CP_WIDTH-1:0] ;               \n";  
mux5 << " 	assign B1M14_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD14[CP_WIDTH-1:0] ;               \n";  
mux5 << " 	assign B1M15_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD15[CP_WIDTH-1:0] ;               \n";  
mux5 << " endmodule                                                                                     \n";
	 
	 mux5.close();
}
void configurable_BFFT::Mux6(std::string string_in){
	 std::ofstream mux6;
     std::string        string_buf = "/Mux6.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux6.open(ss.str());
mux6 << "//=============================================      \n";                                   
mux6 << "//Data:2020/04/08                                    \n";                                   
mux6 << "//note:output data and ExtB0_Dx Mux                  \n";                                   
mux6 << "//writter:shi yong wu                                \n";                                   
mux6 << "//=============================================      \n";                                   
mux6 << "`timescale 1ns/10ps                                  \n";                                   
mux6 << "module Mux6(                                         \n";                                   
mux6 << "        ExtB0_D0,                                    \n";                                   
mux6 << "        ExtB0_D1,                                    \n";                                   
mux6 << "        ExtB0_D2,                                    \n";                                   
mux6 << "        ExtB0_D3,                                    \n";                                   
mux6 << "        ExtB0_D4,                                    \n";                                   
mux6 << "        ExtB0_D5,                                    \n";                                   
mux6 << "        ExtB0_D6,                                    \n";                                   
mux6 << "        ExtB0_D7,                                    \n";                                   
mux6 << "        ExtB0_D8,                                    \n";                                   
mux6 << "        ExtB0_D9,                                    \n";                                   
mux6 << "        ExtB0_D10,                                   \n";                                   
mux6 << "        ExtB0_D11,                                   \n";                                   
mux6 << "        ExtB0_D12,                                   \n";                                   
mux6 << "        ExtB0_D13,                                   \n";                                   
mux6 << "        ExtB0_D14,                                   \n";                                   
mux6 << "        ExtB0_D15,                                   \n";                                   
mux6 << "        MulD0_out,                                   \n";                                   
mux6 << "        MulD1_out,                                   \n";                                   
mux6 << "        MulD2_out,                                   \n";                                   
mux6 << "        MulD3_out,                                   \n";                                   
mux6 << "        MulD4_out,                                   \n";                                   
mux6 << "        MulD5_out,                                   \n";                                   
mux6 << "        MulD6_out,                                   \n";                                   
mux6 << "        MulD7_out,                                   \n";                                   
mux6 << "        MulD8_out,                                   \n";                                   
mux6 << "        MulD9_out,                                   \n";                                   
mux6 << "        MulD10_out,                                  \n";                                   
mux6 << "        MulD11_out,                                  \n";                                   
mux6 << "        MulD12_out,                                  \n";                                   
mux6 << "        MulD13_out,                                  \n";                                   
mux6 << "        MulD14_out,                                  \n";                                   
mux6 << "        MulD15_out,                                  \n";                                   
mux6 << "        B0M0_result,                                 \n";                                   
mux6 << "        B0M1_result,                                 \n";                                   
mux6 << "        B0M2_result,                                 \n";                                   
mux6 << "        B0M3_result,                                 \n";                                   
mux6 << "        B0M4_result,                                 \n";                                   
mux6 << "        B0M5_result,                                 \n";                                   
mux6 << "        B0M6_result,                                 \n";                                   
mux6 << "        B0M7_result,                                 \n";                                   
mux6 << "        B0M8_result,                                 \n";                                   
mux6 << "        B0M9_result,                                 \n";                                   
mux6 << "        B0M10_result,                                \n";                                   
mux6 << "        B0M11_result,                                \n";                                   
mux6 << "        B0M12_result,                                \n";                                   
mux6 << "        B0M13_result,                                \n";                                   
mux6 << "        B0M14_result,                                \n";                                   
mux6 << "        B0M15_result,                                \n";                                   
mux6 << "         ExtB1_D0,                                   \n";                          
mux6 << "         ExtB1_D1,                                   \n";                          
mux6 << "         ExtB1_D2,                                   \n";                          
mux6 << "         ExtB1_D3,                                   \n";                          
mux6 << "         ExtB1_D4,                                   \n";                          
mux6 << "         ExtB1_D5,                                   \n";                          
mux6 << "         ExtB1_D6,                                   \n";                          
mux6 << "         ExtB1_D7,                                   \n";                          
mux6 << "         ExtB1_D8,                                   \n";                          
mux6 << "         ExtB1_D9,                                   \n";                          
mux6 << "         ExtB1_D10,                                  \n";                           
mux6 << "         ExtB1_D11,                                  \n";                           
mux6 << "         ExtB1_D12,                                  \n";                           
mux6 << "         ExtB1_D13,                                  \n";                           
mux6 << "         ExtB1_D14,                                  \n";                           
mux6 << "         ExtB1_D15,                                  \n";                           
mux6 << "         BR_S0,                                      \n";                          
mux6 << "         BR_S1,                                      \n";                          
mux6 << "         BR_S2,                                      \n";                          
mux6 << "         BR_S3,                                      \n";                          
mux6 << "         BR_S4,                                      \n";                          
mux6 << "         BR_S5,                                      \n";                          
mux6 << "         BR_S6,                                      \n";                          
mux6 << "         BR_S7,                                      \n";                          
mux6 << "         BR_S8,                                      \n";                          
mux6 << "         BR_S9,                                      \n";                          
mux6 << "         BR_S10,                                     \n";                           
mux6 << "         BR_S11,                                     \n";                           
mux6 << "         BR_S12,                                     \n";                           
mux6 << "         BR_S13,                                     \n";                           
mux6 << "         BR_S14,                                     \n";                           
mux6 << "         BR_S15,                                     \n";                           
mux6 << "         B1M0_result,                                \n";                          
mux6 << "         B1M1_result,                                \n";                          
mux6 << "         B1M2_result,                                \n";                          
mux6 << "         B1M3_result,                                \n";                          
mux6 << "         B1M4_result,                                \n";                          
mux6 << "         B1M5_result,                                \n";                          
mux6 << "         B1M6_result,                                \n";                          
mux6 << "         B1M7_result,                                \n";                          
mux6 << "         B1M8_result,                                \n";                          
mux6 << "         B1M9_result,                                \n";                          
mux6 << "         B1M10_result,                               \n";                           
mux6 << "         B1M11_result,                               \n";                           
mux6 << "         B1M12_result,                               \n";                           
mux6 << "         B1M13_result,                               \n";                           
mux6 << "         B1M14_result,                               \n";                           
mux6 << "         B1M15_result,                               \n";                           
mux6 << "         m2_sel                                      \n";                          
mux6 << ");\n";                                   
mux6 << "\n";                                   
mux6 << "parameter CP_WIDTH = "<< CP_width <<";\n";
mux6 << "parameter CP_ZERO  = "<< CP_width <<"'d0;\n";
mux6 << "\n";
mux6 << "output [CP_WIDTH-1:0] ExtB0_D0;\n";
mux6 << "output [CP_WIDTH-1:0] ExtB0_D1;\n";
mux6 << "output [CP_WIDTH-1:0] ExtB0_D2;\n";
mux6 << "output [CP_WIDTH-1:0] ExtB0_D3;\n";
mux6 << "output [CP_WIDTH-1:0] ExtB0_D4;\n";
mux6 << "output [CP_WIDTH-1:0] ExtB0_D5;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D6;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D7;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D8;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D9;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D10;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D11;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D12;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D13;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D14;\n";                                   
mux6 << "output [CP_WIDTH-1:0] ExtB0_D15;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD0_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD1_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD2_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD3_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD4_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD5_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD6_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD7_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD8_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD9_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD10_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD11_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD12_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD13_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD14_out;\n";                                   
mux6 << "output [CP_WIDTH-1:0] MulD15_out;\n";                                   
mux6 << "\n";                                   
mux6 << " output [CP_WIDTH-1:0] ExtB1_D0;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D1;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D2;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D3;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D4;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D5;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D6;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D7;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D8;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D9;\n";                          
mux6 << " output [CP_WIDTH-1:0] ExtB1_D10;\n";                           
mux6 << " output [CP_WIDTH-1:0] ExtB1_D11;\n";                           
mux6 << " output [CP_WIDTH-1:0] ExtB1_D12;\n";                           
mux6 << " output [CP_WIDTH-1:0] ExtB1_D13;\n";                           
mux6 << " output [CP_WIDTH-1:0] ExtB1_D14;\n";                           
mux6 << " output [CP_WIDTH-1:0] ExtB1_D15;\n";                           
mux6 << " output [CP_WIDTH-1:0] BR_S0;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S1;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S2;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S3;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S4;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S5;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S6;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S7;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S8;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S9;\n";                          
mux6 << " output [CP_WIDTH-1:0] BR_S10;\n";                           
mux6 << " output [CP_WIDTH-1:0] BR_S11;\n";                           
mux6 << " output [CP_WIDTH-1:0] BR_S12;\n";                           
mux6 << " output [CP_WIDTH-1:0] BR_S13;\n";                           
mux6 << " output [CP_WIDTH-1:0] BR_S14;\n";                           
mux6 << " output [CP_WIDTH-1:0] BR_S15;\n";                           
mux6 << "\n";                          
mux6 << " input                 m2_sel;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M0_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M1_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M2_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M3_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M4_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M5_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M6_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M7_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M8_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M9_result;\n";                          
mux6 << " input  [CP_WIDTH-1:0] B1M10_result;\n";                           
mux6 << " input  [CP_WIDTH-1:0] B1M11_result;\n";                           
mux6 << " input  [CP_WIDTH-1:0] B1M12_result;\n";                           
mux6 << " input  [CP_WIDTH-1:0] B1M13_result;\n";                           
mux6 << " input  [CP_WIDTH-1:0] B1M14_result;\n";                           
mux6 << " input  [CP_WIDTH-1:0] B1M15_result;\n";                           
mux6 << " input  [CP_WIDTH-1:0] B0M0_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M1_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M2_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M3_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M4_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M5_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M6_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M7_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M8_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M9_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M10_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M11_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M12_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M13_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M14_result;\n";                                   
mux6 << " input  [CP_WIDTH-1:0] B0M15_result;\n";                                   
mux6 << "\n";                                   
mux6 << "  assign ExtB0_D0  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M0_result;\n";           
mux6 << "  assign ExtB0_D1  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M1_result;\n";           
mux6 << "  assign ExtB0_D2  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M2_result;\n";           
mux6 << "  assign ExtB0_D3  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M3_result;\n";           
mux6 << "  assign ExtB0_D4  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M4_result;\n";           
mux6 << "  assign ExtB0_D5  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M5_result;\n";           
mux6 << "  assign ExtB0_D6  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M6_result;\n";           
mux6 << "  assign ExtB0_D7  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M7_result;\n";           
mux6 << "  assign ExtB0_D8  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M8_result;\n";           
mux6 << "  assign ExtB0_D9  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M9_result;\n";           
mux6 << "  assign ExtB0_D10 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M10_result;\n";           
mux6 << "  assign ExtB0_D11 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M11_result;\n";           
mux6 << "  assign ExtB0_D12 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M12_result;\n";           
mux6 << "  assign ExtB0_D13 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M13_result;\n";           
mux6 << "  assign ExtB0_D14 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M14_result;\n";           
mux6 << "  assign ExtB0_D15 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M15_result;\n";           
mux6 << "\n";                 
mux6 << "  assign MulD0_out  = ( m2_sel == 1'b1) ?  B0M0_result  : CP_ZERO;  \n";
mux6 << "  assign MulD1_out  = ( m2_sel == 1'b1) ?  B0M1_result  : CP_ZERO;  \n";
mux6 << "  assign MulD2_out  = ( m2_sel == 1'b1) ?  B0M2_result  : CP_ZERO;  \n";
mux6 << "  assign MulD3_out  = ( m2_sel == 1'b1) ?  B0M3_result  : CP_ZERO;  \n";
mux6 << "  assign MulD4_out  = ( m2_sel == 1'b1) ?  B0M4_result  : CP_ZERO;  \n";
mux6 << "  assign MulD5_out  = ( m2_sel == 1'b1) ?  B0M5_result  : CP_ZERO;  \n";
mux6 << "  assign MulD6_out  = ( m2_sel == 1'b1) ?  B0M6_result  : CP_ZERO;  \n";
mux6 << "  assign MulD7_out  = ( m2_sel == 1'b1) ?  B0M7_result  : CP_ZERO;  \n";
mux6 << "  assign MulD8_out  = ( m2_sel == 1'b1) ?  B0M8_result  : CP_ZERO;  \n";
mux6 << "  assign MulD9_out  = ( m2_sel == 1'b1) ?  B0M9_result  : CP_ZERO;  \n";
mux6 << "  assign MulD10_out = ( m2_sel == 1'b1) ?  B0M10_result : CP_ZERO;  \n";
mux6 << "  assign MulD11_out = ( m2_sel == 1'b1) ?  B0M11_result : CP_ZERO;  \n";
mux6 << "  assign MulD12_out = ( m2_sel == 1'b1) ?  B0M12_result : CP_ZERO;  \n";
mux6 << "  assign MulD13_out = ( m2_sel == 1'b1) ?  B0M13_result : CP_ZERO;  \n";
mux6 << "  assign MulD14_out = ( m2_sel == 1'b1) ?  B0M14_result : CP_ZERO;  \n";
mux6 << "  assign MulD15_out = ( m2_sel == 1'b1) ?  B0M15_result : CP_ZERO;  \n";
mux6 << "\n";      
mux6 << "   assign ExtB1_D0  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M0_result;    \n";
mux6 << "   assign ExtB1_D1  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M1_result;    \n";
mux6 << "   assign ExtB1_D2  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M2_result;    \n";
mux6 << "   assign ExtB1_D3  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M3_result;    \n";
mux6 << "   assign ExtB1_D4  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M4_result;    \n";
mux6 << "   assign ExtB1_D5  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M5_result;    \n";
mux6 << "   assign ExtB1_D6  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M6_result;    \n";
mux6 << "   assign ExtB1_D7  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M7_result;    \n";
mux6 << "   assign ExtB1_D8  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M8_result;    \n";
mux6 << "   assign ExtB1_D9  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M9_result;    \n";
mux6 << "   assign ExtB1_D10 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M10_result;   \n";
mux6 << "   assign ExtB1_D11 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M11_result;   \n";
mux6 << "   assign ExtB1_D12 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M12_result;   \n";
mux6 << "   assign ExtB1_D13 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M13_result;   \n";
mux6 << "   assign ExtB1_D14 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M14_result;   \n";
mux6 << "   assign ExtB1_D15 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M15_result;   \n";
mux6 << "                                                                    \n";
mux6 << "   assign BR_S0  = ( m2_sel == 1'b1) ?  B1M0_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S1  = ( m2_sel == 1'b1) ?  B1M1_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S2  = ( m2_sel == 1'b1) ?  B1M2_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S3  = ( m2_sel == 1'b1) ?  B1M3_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S4  = ( m2_sel == 1'b1) ?  B1M4_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S5  = ( m2_sel == 1'b1) ?  B1M5_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S6  = ( m2_sel == 1'b1) ?  B1M6_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S7  = ( m2_sel == 1'b1) ?  B1M7_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S8  = ( m2_sel == 1'b1) ?  B1M8_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S9  = ( m2_sel == 1'b1) ?  B1M9_result  : CP_ZERO;     \n";
mux6 << "   assign BR_S10 = ( m2_sel == 1'b1) ?  B1M10_result : CP_ZERO;     \n";
mux6 << "   assign BR_S11 = ( m2_sel == 1'b1) ?  B1M11_result : CP_ZERO;     \n";
mux6 << "   assign BR_S12 = ( m2_sel == 1'b1) ?  B1M12_result : CP_ZERO;     \n";
mux6 << "   assign BR_S13 = ( m2_sel == 1'b1) ?  B1M13_result : CP_ZERO;     \n";
mux6 << "   assign BR_S14 = ( m2_sel == 1'b1) ?  B1M14_result : CP_ZERO;     \n";
mux6 << "   assign BR_S15 = ( m2_sel == 1'b1) ?  B1M15_result : CP_ZERO;     \n";
mux6 << "\n";      
mux6 << "endmodule\n";      
	 
	 mux6.close();  
}
//Pipe
void configurable_BFFT::TWIpipe_r16(std::string string_in){
     std::ofstream twipipe;
     std::string        string_buf = "/TWIpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twipipe.open(ss.str());	
twipipe << "//=========================================                         \n";
twipipe << "//Date:2020/04/08                                                   \n";
twipipe << "//writer:shiyong                                                    \n";
twipipe << "//note: bn ank ma pipline                                           \n";
twipipe << "//      FFT type of m-th tiwiddle factor. m-th cyclotomic polynomial\n";
twipipe << "//========================================                          \n";
twipipe << "`timescale 1ns/1ps \n";                                                
twipipe << "module TWIpipe(    \n";                                            
twipipe << "    BN_out,        \n";                                            
twipipe << "    MA_out,        \n";                                            
twipipe << "	TWIradix0_o,   \n";                                            
twipipe << "	TWIradix1_o,   \n";                                            
twipipe << "	TWIradix2_o,   \n";                                            
twipipe << "	TWIradix3_o,   \n";                                            
twipipe << "	TWIradix4_o,   \n";                                            
twipipe << "	TWIradix5_o,   \n";                                            
twipipe << "	TWIradix6_o,   \n";                                            
twipipe << "	TWIradix7_o,   \n";                                            
twipipe << "	TWIradix8_o,   \n";                                            
twipipe << "	TWIradix9_o,   \n";                                            
twipipe << "	TWIradix10_o,  \n";                                             
twipipe << "	TWIradix11_o,  \n";                                             
twipipe << "	TWIradix12_o,  \n";                                             
twipipe << "	TWIradix13_o,  \n";                                             
twipipe << "	TWIradix14_o,  \n";                                             
twipipe << "	TWIradix15_o,  \n";                                             
twipipe << "    BN_in,         \n";                                            
twipipe << "    MA_in,         \n";                                            
twipipe << "	TWIradix0_i,   \n";                                            
twipipe << "	TWIradix1_i,   \n";                                            
twipipe << "	TWIradix2_i,   \n";                                            
twipipe << "	TWIradix3_i,   \n";                                            
twipipe << "	TWIradix4_i,   \n";                                            
twipipe << "	TWIradix5_i,   \n";                                            
twipipe << "	TWIradix6_i,   \n";                                            
twipipe << "	TWIradix7_i,   \n";                                            
twipipe << "	TWIradix8_i,   \n";                                            
twipipe << "	TWIradix9_i,   \n";                                            
twipipe << "	TWIradix10_i,  \n";                                             
twipipe << "	TWIradix11_i,  \n";                                             
twipipe << "	TWIradix12_i,  \n";                                             
twipipe << "	TWIradix13_i,  \n";                                             
twipipe << "	TWIradix14_i,  \n";                                             
twipipe << "	TWIradix15_i,  \n";                                             
twipipe << "	rst_n,         \n";                                            
twipipe << "    clk            \n";                                            
twipipe << ");                 \n";                                            
twipipe << "                   \n";                                            
twipipe << "parameter A_WIDTH = 11;              \n";                                         
twipipe << "parameter A_ZERO  = 11'b0;           \n";                           
twipipe << "parameter P_WIDTH = 64;              \n";                          
twipipe << "parameter P_ZERO  = 64'd0;           \n";                          
twipipe << "                                     \n";                          
twipipe << "output [A_WIDTH-1:0] MA_out;         \n";                          
twipipe << "output               BN_out;         \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix0_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix1_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix2_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix3_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix4_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix5_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix6_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix7_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix8_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix9_o;     \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix10_o;    \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix11_o;    \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix12_o;    \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix13_o;    \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix14_o;    \n";                          
twipipe << "output [P_WIDTH-1:0]TWIradix15_o;    \n";                          
twipipe << "                                     \n";                          
twipipe << "input  [A_WIDTH-1:0] MA_in;          \n";                          
twipipe << "input                BN_in;          \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix0_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix1_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix2_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix3_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix4_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix5_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix6_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix7_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix8_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix9_i;     \n";                          
twipipe << "input  [P_WIDTH-1:0]TWIradix10_i;    \n";                           
twipipe << "input  [P_WIDTH-1:0]TWIradix11_i;    \n";                           
twipipe << "input  [P_WIDTH-1:0]TWIradix12_i;    \n";                           
twipipe << "input  [P_WIDTH-1:0]TWIradix13_i;    \n";                           
twipipe << "input  [P_WIDTH-1:0]TWIradix14_i;    \n";                           
twipipe << "input  [P_WIDTH-1:0]TWIradix15_i;    \n";                           
twipipe << "input                rst_n;          \n";                          
twipipe << "input                clk;            \n";                          
twipipe << "                                     \n";                          
twipipe << "reg  [A_WIDTH-1:0] MA_out;           \n";                          
twipipe << "reg  [A_WIDTH-1:0] MA_reg0;          \n";                          
twipipe << "reg  [A_WIDTH-1:0] MA_reg1;          \n";                          
twipipe << "                                     \n";                          
twipipe << "reg                BN_out;           \n";                          
twipipe << "reg                BN_reg0;          \n";                          
twipipe << "reg                BN_reg1;          \n";                          
twipipe << "                                     \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix0_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix1_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix2_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix3_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix4_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix5_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix6_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix7_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix8_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix9_o;        \n";                          
twipipe << "reg [P_WIDTH-1:0]TWIradix10_o;       \n";                           
twipipe << "reg [P_WIDTH-1:0]TWIradix11_o;       \n";                           
twipipe << "reg [P_WIDTH-1:0]TWIradix12_o;       \n";                           
twipipe << "reg [P_WIDTH-1:0]TWIradix13_o;       \n";                           
twipipe << "reg [P_WIDTH-1:0]TWIradix14_o;       \n";                           
twipipe << "reg [P_WIDTH-1:0]TWIradix15_o;       \n";                           
twipipe << "                                     \n";                          
twipipe << "                                     \n";                          
twipipe << "    always @(posedge clk,negedge rst_n)begin  \n";                 
twipipe << "        if(~rst_n)begin                       \n";                 
twipipe << "            MA_reg0       <=  A_ZERO;         \n";                  
twipipe << "            MA_reg1       <=  A_ZERO;         \n";                  
twipipe << "            MA_out        <=  A_ZERO;         \n";                  
twipipe << "            BN_reg0       <=  1'b0;           \n";                  
twipipe << "            BN_reg1       <=  1'b0;           \n";                  
twipipe << "			BN_out        <=  1'b0;           \n";                  
twipipe << "			TWIradix0_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix1_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix2_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix3_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix4_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix5_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix6_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix7_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix8_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix9_o   <=  P_ZERO;         \n";                  
twipipe << "			TWIradix10_o  <=  P_ZERO;         \n";                  
twipipe << "			TWIradix11_o  <=  P_ZERO;         \n";                  
twipipe << "			TWIradix12_o  <=  P_ZERO;         \n";                  
twipipe << "			TWIradix13_o  <=  P_ZERO;         \n";                  
twipipe << "			TWIradix14_o  <=  P_ZERO;         \n";                  
twipipe << "			TWIradix15_o  <=  P_ZERO;         \n";                  
twipipe << "        end                                   \n";                 
twipipe << "        else begin                            \n";                 
twipipe << "            MA_reg0  <= MA_in;                \n";                 
twipipe << "            MA_reg1  <= MA_reg0;              \n";                 
twipipe << "            MA_out   <= MA_reg1;              \n";                 
twipipe << "			//                                \n";                 
twipipe << "            BN_reg0  <= BN_in;                \n";                 
twipipe << "            BN_reg1  <= BN_reg0;              \n";                 
twipipe << "            BN_out   <= BN_reg1;              \n";                 
twipipe << "			//                                \n";                 
twipipe << "		    TWIradix0_o   <=  TWIradix0_i;    \n";                  
twipipe << "			TWIradix1_o   <=  TWIradix1_i;    \n";                  
twipipe << "			TWIradix2_o   <=  TWIradix2_i;    \n";                  
twipipe << "			TWIradix3_o   <=  TWIradix3_i;    \n";                  
twipipe << "			TWIradix4_o   <=  TWIradix4_i;    \n";                  
twipipe << "			TWIradix5_o   <=  TWIradix5_i;    \n";                  
twipipe << "			TWIradix6_o   <=  TWIradix6_i;    \n";                  
twipipe << "			TWIradix7_o   <=  TWIradix7_i;    \n";                  
twipipe << "			TWIradix8_o   <=  TWIradix8_i;    \n";                  
twipipe << "			TWIradix9_o   <=  TWIradix9_i;    \n";                  
twipipe << "			TWIradix10_o  <=  TWIradix10_i;   \n";                  
twipipe << "			TWIradix11_o  <=  TWIradix11_i;   \n";                  
twipipe << "			TWIradix12_o  <=  TWIradix12_i;   \n";                  
twipipe << "			TWIradix13_o  <=  TWIradix13_i;   \n";                  
twipipe << "			TWIradix14_o  <=  TWIradix14_i;   \n";                  
twipipe << "			TWIradix15_o  <=  TWIradix15_i;   \n";                  
twipipe << "        end                                   \n";                 
twipipe << "    end                                       \n";                 
twipipe << "                                              \n";                 
twipipe << "endmodule                                     \n";                 
	 
	 twipipe.close();
}	 
void configurable_BFFT::R16_NPipeReg1(std::string string_in){
	 std::ofstream r16_npipereg1;
     std::string        string_buf = "/R16_NPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 r16_npipereg1.open(ss.str());	
r16_npipereg1 << "`timescale 1 ns/1 ps                            \n";
r16_npipereg1 << "module R16_NPipeReg1(N_D2_out,                  \n";
r16_npipereg1 << "                     N_in,                      \n";
r16_npipereg1 << "                     rst_n,                     \n";
r16_npipereg1 << "                     clk                        \n";
r16_npipereg1 << "                     ) ;                        \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "parameter P_WIDTH     = 64 ;                    \n";
r16_npipereg1 << "parameter P_ZERO      = 64'h0 ;                 \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "output [P_WIDTH-1:0] N_D2_out ;                 \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "input [P_WIDTH-1:0]  N_in ;                     \n";
r16_npipereg1 << "input                rst_n ;                    \n";
r16_npipereg1 << "input                clk ;                      \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "reg [P_WIDTH-1:0]  N_D2_out ;                   \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "	//                                            \n";
r16_npipereg1 << "	always @(posedge clk or negedge rst_n) begin  \n";
r16_npipereg1 << "		if(~rst_n) begin                          \n";
r16_npipereg1 << "			N_D2_out <= P_ZERO ;                  \n";
r16_npipereg1 << "		end                                       \n";
r16_npipereg1 << "		else begin                                \n";
r16_npipereg1 << "			N_D2_out <= N_in ;                    \n";
r16_npipereg1 << "		end                                       \n";
r16_npipereg1 << "	end                                           \n";
r16_npipereg1 << "                                                \n";
r16_npipereg1 << "endmodule                                       \n";
	 
	 r16_npipereg1.close();
}
void configurable_BFFT::R16_NPipeReg2(std::string string_in){
	 std::ofstream r16_npipereg2;
     std::string        string_buf = "/R16_NPipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_npipereg2.open(ss.str());
r16_npipereg2 << "`timescale 1 ns/1 ps                                  \n";
r16_npipereg2 << "module R16_NPipeReg2(Ninv2_D1_out,                    \n";
r16_npipereg2 << "                     N_D2_out,                        \n";
r16_npipereg2 << "					 Ninv2_in,                          \n"; 
r16_npipereg2 << "                     N_in,                            \n";
r16_npipereg2 << "                     rst_n,                           \n";
r16_npipereg2 << "                     clk                              \n";
r16_npipereg2 << "                     ) ;                              \n";
r16_npipereg2 << "                                                      \n";
r16_npipereg2 << "parameter P_WIDTH     = 64 ;                          \n";
r16_npipereg2 << "parameter P_ZERO      = 64'h0 ;                       \n";
r16_npipereg2 << "parameter P1_ZERO     = 65'h0 ;                       \n";
r16_npipereg2 << "                                                      \n";
r16_npipereg2 << "                                                      \n";
r16_npipereg2 << "output [P_WIDTH:0]   Ninv2_D1_out ;                   \n";
r16_npipereg2 << "output [P_WIDTH-1:0] N_D2_out ;                       \n";
r16_npipereg2 << "                                                      \n";
r16_npipereg2 << "input [P_WIDTH:0]    Ninv2_in ;                       \n";
r16_npipereg2 << "input [P_WIDTH-1:0]  N_in ;                           \n";
r16_npipereg2 << "input                rst_n ;                          \n";
r16_npipereg2 << "input                clk ;                            \n";
r16_npipereg2 << "                                                      \n";
r16_npipereg2 << "reg [P_WIDTH-1:0]  N_D2_out ;                         \n";
r16_npipereg2 << "reg [P_WIDTH:0]    Ninv2_D1_out ;                     \n";
r16_npipereg2 << "                                                      \n";
r16_npipereg2 << "	//                                                  \n"; 
r16_npipereg2 << "	always @(posedge clk or negedge rst_n) begin        \n"; 
r16_npipereg2 << "		if(~rst_n) begin                                \n"; 
r16_npipereg2 << "			N_D2_out <= P_ZERO ;                        \n"; 
r16_npipereg2 << "			Ninv2_D1_out <= P1_ZERO ;                   \n"; 
r16_npipereg2 << "		end                                             \n"; 
r16_npipereg2 << "		else begin                                      \n"; 
r16_npipereg2 << "			N_D2_out <= N_in ;                       \n"; 
r16_npipereg2 << "			Ninv2_D1_out <= Ninv2_in ;                  \n"; 
r16_npipereg2 << "		end                                             \n"; 
r16_npipereg2 << "	end                                                 \n"; 
r16_npipereg2 << "                                                      \n";
r16_npipereg2 << "endmodule                                             \n";
	 
     r16_npipereg2.close();	 
}
void configurable_BFFT::R16_NPipeReg3(std::string string_in){
	 std::ofstream r16_npipereg3;
     std::string        string_buf = "/R16_NPipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_npipereg3.open(ss.str());
r16_npipereg3 << "`timescale 1 ns/1 ps                                \n";
r16_npipereg3 << "module R16_NPipeReg3(N_D4_out,                      \n";
r16_npipereg3 << "                     N_in,                          \n";
r16_npipereg3 << "                     rst_n,                         \n";
r16_npipereg3 << "                     clk                            \n";
r16_npipereg3 << "                     ) ;                            \n";
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "parameter P_WIDTH     = 64 ;                        \n";
r16_npipereg3 << "parameter P_ZERO      = 64'h0 ;                     \n";
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "output [P_WIDTH-1:0] N_D4_out ;                     \n";
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "input [P_WIDTH-1:0]  N_in ;                         \n";
r16_npipereg3 << "input                rst_n ;                        \n";
r16_npipereg3 << "input                clk ;                          \n";
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "reg [P_WIDTH-1:0]  N_D4_out ;                       \n";
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "	//                                                \n"; 
r16_npipereg3 << "	always @(posedge clk or negedge rst_n) begin      \n"; 
r16_npipereg3 << "		if(~rst_n) begin                              \n"; 
r16_npipereg3 << "			N_D4_out <= P_ZERO ;                      \n"; 
r16_npipereg3 << "		end                                           \n"; 
r16_npipereg3 << "		else begin                                    \n"; 
r16_npipereg3 << "			N_D4_out <= N_in ;                        \n"; 
r16_npipereg3 << "		end                                           \n"; 
r16_npipereg3 << "	end                                               \n"; 
r16_npipereg3 << "                                                    \n";
r16_npipereg3 << "endmodule                                           \n";

     r16_npipereg3.close();	 	
}	
void configurable_BFFT::R16_PipeReg1(std::string string_in){
	 std::ofstream r16_pipereg1;
     std::string        string_buf = "/R16_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_pipereg1.open(ss.str());
r16_pipereg1 << "`timescale 1 ns/1 ps                                       \n";
r16_pipereg1 << "module R16_PipeReg1(A0_out,                                \n";
r16_pipereg1 << "				      A1_out,                               \n";   
r16_pipereg1 << "				      A2_out,                               \n";   
r16_pipereg1 << "				      A3_out,                               \n";   
r16_pipereg1 << "				      A4_out,                               \n";   
r16_pipereg1 << "				      A5_out,                               \n";   
r16_pipereg1 << "				      A6_out,                               \n";   
r16_pipereg1 << "				      A7_out,                               \n";   
r16_pipereg1 << "				      A8_out,                               \n";   
r16_pipereg1 << "				      A9_out,                               \n";   
r16_pipereg1 << "				      A10_out,                              \n";   
r16_pipereg1 << "				      A11_out,                              \n";   
r16_pipereg1 << "				      A12_out,                              \n";   
r16_pipereg1 << "				      A13_out,                              \n";   
r16_pipereg1 << "				      A14_out,                              \n";   
r16_pipereg1 << "				      A15_out,                              \n";   
r16_pipereg1 << "                    A0_in,                                 \n";
r16_pipereg1 << "			          A1_in,                                \n";   
r16_pipereg1 << "			          A2_in,                                \n";   
r16_pipereg1 << "			          A3_in,                                \n";   
r16_pipereg1 << "			          A4_in,                                \n";   
r16_pipereg1 << "			          A5_in,                                \n";   
r16_pipereg1 << "			          A6_in,                                \n";   
r16_pipereg1 << "			          A7_in,                                \n";   
r16_pipereg1 << "			          A8_in,                                \n";   
r16_pipereg1 << "			          A9_in,                                \n";   
r16_pipereg1 << "			          A10_in,                               \n";   
r16_pipereg1 << "			          A11_in,                               \n";   
r16_pipereg1 << "			          A12_in,                               \n";   
r16_pipereg1 << "			          A13_in,                               \n";   
r16_pipereg1 << "			          A14_in,                               \n";   
r16_pipereg1 << "			          A15_in,                               \n";   
r16_pipereg1 << "                    rst_n,                                 \n";
r16_pipereg1 << "                    clk                                    \n";
r16_pipereg1 << "                    ) ;                                    \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "parameter D_WIDTH     = 192 ;                              \n";
r16_pipereg1 << "parameter DH_WIDTH    = 96 ;                               \n";
r16_pipereg1 << "parameter D_ZERO      = 192'h0 ;                           \n";
r16_pipereg1 << "parameter DH_ZERO     = 96'h0 ;                            \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "output [DH_WIDTH-1:0] A0_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A1_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A2_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A3_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A4_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A5_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A6_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A7_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A8_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A9_out ;                             \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A10_out ;                            \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A11_out ;                            \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A12_out ;                            \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A13_out ;                            \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A14_out ;                            \n";
r16_pipereg1 << "output [D_WIDTH-1:0]  A15_out ;                            \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "input [DH_WIDTH-1:0] A0_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A1_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A2_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A3_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A4_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A5_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A6_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A7_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A8_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A9_in ;                               \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A10_in ;                              \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A11_in ;                              \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A12_in ;                              \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A13_in ;                              \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A14_in ;                              \n";
r16_pipereg1 << "input [D_WIDTH-1:0]  A15_in ;                              \n";
r16_pipereg1 << "input                rst_n ;                               \n";
r16_pipereg1 << "input                clk ;                                 \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "reg [DH_WIDTH-1:0] A0_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A1_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A2_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A3_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A4_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A5_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A6_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A7_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A8_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A9_out ;                                \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A10_out ;                               \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A11_out ;                               \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A12_out ;                               \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A13_out ;                               \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A14_out ;                               \n";
r16_pipereg1 << "reg [D_WIDTH-1:0]  A15_out ;                               \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "	//                                                      \n"; 
r16_pipereg1 << "	always @(posedge clk or negedge rst_n) begin            \n"; 
r16_pipereg1 << "		if(~rst_n) begin                                    \n"; 
r16_pipereg1 << "			A0_out <= DH_ZERO ;                             \n"; 
r16_pipereg1 << "			A1_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A2_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A3_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A4_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A5_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A6_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A7_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A8_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A9_out <= D_ZERO ;                              \n"; 
r16_pipereg1 << "			A10_out <= D_ZERO ;                             \n"; 
r16_pipereg1 << "			A11_out <= D_ZERO ;                             \n"; 
r16_pipereg1 << "			A12_out <= D_ZERO ;                             \n"; 
r16_pipereg1 << "			A13_out <= D_ZERO ;                             \n"; 
r16_pipereg1 << "			A14_out <= D_ZERO ;                             \n"; 
r16_pipereg1 << "			A15_out <= D_ZERO ;                             \n"; 
r16_pipereg1 << "		end                                                 \n"; 
r16_pipereg1 << "		else begin                                          \n"; 
r16_pipereg1 << "			A0_out <= A0_in ;                               \n"; 
r16_pipereg1 << "			A1_out <= A1_in ;                               \n"; 
r16_pipereg1 << "			A2_out <= A2_in ;                               \n"; 
r16_pipereg1 << "			A3_out <= A3_in ;                               \n"; 
r16_pipereg1 << "			A4_out <= A4_in ;                               \n"; 
r16_pipereg1 << "			A5_out <= A5_in ;                               \n"; 
r16_pipereg1 << "			A6_out <= A6_in ;                               \n"; 
r16_pipereg1 << "			A7_out <= A7_in ;                               \n"; 
r16_pipereg1 << "			A8_out <= A8_in ;                               \n"; 
r16_pipereg1 << "			A9_out <= A9_in ;                               \n"; 
r16_pipereg1 << "			A10_out <= A10_in ;                             \n"; 
r16_pipereg1 << "			A11_out <= A11_in ;                             \n"; 
r16_pipereg1 << "			A12_out <= A12_in ;                             \n"; 
r16_pipereg1 << "			A13_out <= A13_in ;                             \n"; 
r16_pipereg1 << "			A14_out <= A14_in ;                             \n"; 
r16_pipereg1 << "			A15_out <= A15_in ;                             \n"; 
r16_pipereg1 << "		end                                                 \n"; 
r16_pipereg1 << "	end                                                     \n"; 
r16_pipereg1 << "                                                           \n";
r16_pipereg1 << "endmodule                                                  \n";

     r16_pipereg1.close();	 	
}
void configurable_BFFT::R16_PipeReg2(std::string string_in){
	 std::ofstream r16_pipereg2;
     std::string        string_buf = "/R16_PipeReg2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 r16_pipereg2.open(ss.str());
r16_pipereg2 << "`timescale 1 ns/1 ps                                     \n";
r16_pipereg2 << "module R16_PipeReg2(A0_out,                              \n";
r16_pipereg2 << "					  Ac_out,                             \n";   
r16_pipereg2 << "                    A0_in,                               \n";
r16_pipereg2 << "					  Ac_in,                              \n";   
r16_pipereg2 << "                    rst_n,                               \n";
r16_pipereg2 << "                    clk                                  \n";
r16_pipereg2 << "                    ) ;                                  \n";
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "parameter P_WIDTH     = 64 ;                             \n";
r16_pipereg2 << "parameter P_ZERO      = 64'h0 ;                          \n";
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "output [P_WIDTH-1:0] A0_out ;                            \n";
r16_pipereg2 << "output               Ac_out ;                            \n";
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "input [P_WIDTH-1:0]  A0_in ;                             \n";
r16_pipereg2 << "input                Ac_in ;                             \n";
r16_pipereg2 << "input                rst_n ;                             \n";
r16_pipereg2 << "input                clk ;                               \n";
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "reg [P_WIDTH-1:0]  A0_out ;                              \n";
r16_pipereg2 << "reg                Ac_out ;                              \n";
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "	//                                                    \n"; 
r16_pipereg2 << "	always @(posedge clk or negedge rst_n) begin          \n"; 
r16_pipereg2 << "		if(~rst_n) begin                                  \n"; 
r16_pipereg2 << "			A0_out <= P_ZERO ;                            \n"; 
r16_pipereg2 << "			Ac_out <= 1'b0 ;                              \n"; 
r16_pipereg2 << "		end                                               \n"; 
r16_pipereg2 << "		else begin                                        \n"; 
r16_pipereg2 << "			A0_out <= A0_in ;                             \n"; 
r16_pipereg2 << "			Ac_out <= Ac_in ;                             \n"; 
r16_pipereg2 << "		end                                               \n"; 
r16_pipereg2 << "	end                                                   \n"; 
r16_pipereg2 << "                                                         \n";
r16_pipereg2 << "endmodule                                                \n";
	 
     r16_pipereg2.close();	 	
}
void configurable_BFFT::R16_PipeReg3(std::string string_in){
	 std::ofstream r16_pipereg3;
     std::string        string_buf = "/R16_PipeReg3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg3.open(ss.str());
r16_pipereg3 << "`timescale 1 ns/1 ps                                      \n";
r16_pipereg3 << "module R16_PipeReg3(A0_out,                               \n";
r16_pipereg3 << "					  Ac_out,                              \n"; 
r16_pipereg3 << "					  Dinv_out,                            \n"; 
r16_pipereg3 << "					  Ninv2_out,                           \n"; 
r16_pipereg3 << "                    A0_in,                                \n";
r16_pipereg3 << "					  Ac_in,                               \n"; 
r16_pipereg3 << "					  Dinv_in,                             \n"; 
r16_pipereg3 << "					  Ninv2_in,                            \n"; 
r16_pipereg3 << "                    rst_n,                                \n";
r16_pipereg3 << "                    clk                                   \n";
r16_pipereg3 << "                    ) ;                                   \n";
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "parameter P_WIDTH     = 64 ;                              \n";
r16_pipereg3 << "parameter P_ZERO      = 64'h0 ;                           \n";
r16_pipereg3 << "parameter P1_ZERO     = 65'h0 ;                           \n";
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "output [P_WIDTH-1:0] A0_out ;                             \n";
r16_pipereg3 << "output               Ac_out ;                             \n";
r16_pipereg3 << "output [P_WIDTH-1:0] Dinv_out ;                           \n";
r16_pipereg3 << "output [P_WIDTH:0]   Ninv2_out ;                          \n";
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "input [P_WIDTH-1:0]  A0_in ;                              \n";
r16_pipereg3 << "input                Ac_in ;                              \n";
r16_pipereg3 << "input [P_WIDTH-1:0]  Dinv_in ;                            \n";
r16_pipereg3 << "input [P_WIDTH:0]    Ninv2_in ;                           \n";
r16_pipereg3 << "input                rst_n ;                              \n";
r16_pipereg3 << "input                clk ;                                \n";
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "reg [P_WIDTH-1:0]  A0_out ;                               \n";
r16_pipereg3 << "reg                Ac_out ;                               \n";
r16_pipereg3 << "reg [P_WIDTH-1:0]  Dinv_out ;                             \n";
r16_pipereg3 << "reg [P_WIDTH:0]    Ninv2_out ;                            \n";
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "	//                                                     \n"; 
r16_pipereg3 << "	always @(posedge clk or negedge rst_n) begin           \n"; 
r16_pipereg3 << "		if(~rst_n) begin                                   \n"; 
r16_pipereg3 << "			A0_out <= P_ZERO ;                             \n"; 
r16_pipereg3 << "			Ac_out <= 1'b0 ;                               \n"; 
r16_pipereg3 << "			Dinv_out <= P_ZERO ;                           \n"; 
r16_pipereg3 << "			Ninv2_out <= P1_ZERO ;                         \n"; 
r16_pipereg3 << "		end                                                \n"; 
r16_pipereg3 << "		else begin                                         \n"; 
r16_pipereg3 << "			A0_out <= A0_in ;                              \n"; 
r16_pipereg3 << "			Ac_out <= Ac_in ;                              \n"; 
r16_pipereg3 << "			Dinv_out <= Dinv_in ;                          \n"; 
r16_pipereg3 << "			Ninv2_out <= Ninv2_in ;                        \n"; 
r16_pipereg3 << "		end                                                \n"; 
r16_pipereg3 << "	end                                                    \n"; 
r16_pipereg3 << "                                                          \n";
r16_pipereg3 << "endmodule                                                 \n";
	 
     r16_pipereg3.close();	 	
}
void configurable_BFFT::R16_PipeReg4(std::string string_in){
	 std::ofstream r16_pipereg4;
     std::string        string_buf = "/R16_PipeReg4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg4.open(ss.str());
r16_pipereg4 << "`timescale 1 ns/1 ps                                     \n";
r16_pipereg4 << "module R16_PipeReg4(A0_out,                              \n";
r16_pipereg4 << "					  Ac_out,                             \n"; 
r16_pipereg4 << "					  Ninv2_D2_out,                       \n"; 
r16_pipereg4 << "                    A0_in,                               \n";
r16_pipereg4 << "					  Ac_in,                              \n"; 
r16_pipereg4 << "					  Ninv2_in,                           \n"; 
r16_pipereg4 << "                    rst_n,                               \n";
r16_pipereg4 << "                    clk                                  \n";
r16_pipereg4 << "                    ) ;                                  \n";
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "parameter P_WIDTH     = 64 ;                             \n";
r16_pipereg4 << "parameter P_ZERO      = 64'h0 ;                          \n";
r16_pipereg4 << "parameter P1_ZERO     = 65'h0 ;                          \n";
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "output [P_WIDTH-1:0] A0_out ;                            \n";
r16_pipereg4 << "output               Ac_out ;                            \n";
r16_pipereg4 << "output [P_WIDTH:0]   Ninv2_D2_out ;                      \n";
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "input [P_WIDTH-1:0]  A0_in ;                             \n";
r16_pipereg4 << "input                Ac_in ;                             \n";
r16_pipereg4 << "input [P_WIDTH:0]    Ninv2_in ;                          \n";
r16_pipereg4 << "input                rst_n ;                             \n";
r16_pipereg4 << "input                clk ;                               \n";
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "reg [P_WIDTH-1:0]  A0_out ;                              \n";
r16_pipereg4 << "reg                Ac_out ;                              \n";
r16_pipereg4 << "reg [P_WIDTH:0]    Ninv2_D0_reg ;                        \n";
r16_pipereg4 << "reg [P_WIDTH:0]    Ninv2_D2_out ;                        \n";
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "	//Ninv2 delay 2-cycle                                 \n"; 
r16_pipereg4 << "	always @(posedge clk or negedge rst_n) begin          \n"; 
r16_pipereg4 << "		if(~rst_n) begin                                  \n"; 
r16_pipereg4 << "			A0_out <= P_ZERO ;                            \n"; 
r16_pipereg4 << "			Ac_out <= 1'b0 ;                              \n"; 
r16_pipereg4 << "			Ninv2_D0_reg <= P1_ZERO ;                     \n"; 
r16_pipereg4 << "			Ninv2_D2_out <= P1_ZERO ;                     \n"; 
r16_pipereg4 << "		end                                               \n"; 
r16_pipereg4 << "		else begin                                        \n"; 
r16_pipereg4 << "			A0_out <= A0_in ;                             \n"; 
r16_pipereg4 << "			Ac_out <= Ac_in ;                             \n"; 
r16_pipereg4 << "			Ninv2_D0_reg <= Ninv2_in ;                    \n"; 
r16_pipereg4 << "			Ninv2_D2_out <= Ninv2_D0_reg ;                \n"; 
r16_pipereg4 << "		end                                               \n"; 
r16_pipereg4 << "	end                                                   \n"; 
r16_pipereg4 << "                                                         \n";
r16_pipereg4 << "endmodule                                                \n";
	 
     r16_pipereg4.close();	 	
}	
void configurable_BFFT::R16_PipeReg4_2(std::string string_in){
	 std::ofstream r16_pipereg4_2;
     std::string        string_buf = "/R16_PipeReg4_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg4_2.open(ss.str());
r16_pipereg4_2 << "`timescale 1 ns/1 ps                                    \n";
r16_pipereg4_2 << "module R16_PipeReg4_2(A0_out,                           \n";
r16_pipereg4_2 << "					  Ac_out,                              \n";
r16_pipereg4_2 << "					  N_D1_out,                            \n";
r16_pipereg4_2 << "					  D_out,                               \n";
r16_pipereg4_2 << "                      A0_in,                            \n";
r16_pipereg4_2 << "					  Ac_in,                               \n";
r16_pipereg4_2 << "					  N_in,                                \n";
r16_pipereg4_2 << "					  D_in,                                \n";
r16_pipereg4_2 << "                      rst_n,                            \n";
r16_pipereg4_2 << "                      clk                               \n";
r16_pipereg4_2 << "                      ) ;                               \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "parameter P_WIDTH     = 64 ;                            \n";
r16_pipereg4_2 << "parameter P_ZERO      = 64'h0 ;                         \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "output [P_WIDTH-1:0] A0_out ;                           \n";
r16_pipereg4_2 << "output               Ac_out ;                           \n";
r16_pipereg4_2 << "output [P_WIDTH-1:0] N_D1_out ;                         \n";
r16_pipereg4_2 << "output [P_WIDTH-1:0] D_out ;                            \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "input [P_WIDTH-1:0]  A0_in ;                            \n";
r16_pipereg4_2 << "input                Ac_in ;                            \n";
r16_pipereg4_2 << "input [P_WIDTH-1:0]  N_in ;                             \n";
r16_pipereg4_2 << "input [P_WIDTH-1:0]  D_in ;                             \n";
r16_pipereg4_2 << "input                rst_n ;                            \n";
r16_pipereg4_2 << "input                clk ;                              \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "reg [P_WIDTH-1:0]  A0_out ;                             \n";
r16_pipereg4_2 << "reg                Ac_out ;                             \n";
r16_pipereg4_2 << "reg [P_WIDTH-1:0]  N_D1_out ;                           \n";
r16_pipereg4_2 << "reg [P_WIDTH-1:0]  D_out ;                              \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "	//                                                     \n";
r16_pipereg4_2 << "	always @(posedge clk or negedge rst_n) begin           \n";
r16_pipereg4_2 << "		if(~rst_n) begin                                   \n";
r16_pipereg4_2 << "			A0_out <= P_ZERO ;                             \n";
r16_pipereg4_2 << "			Ac_out <= 1'b0 ;                               \n";
r16_pipereg4_2 << "			N_D1_out <= P_ZERO ;                           \n";
r16_pipereg4_2 << "			D_out <= P_ZERO ;                              \n";
r16_pipereg4_2 << "		end                                                \n";
r16_pipereg4_2 << "		else begin                                         \n";
r16_pipereg4_2 << "			A0_out <= A0_in ;                              \n";
r16_pipereg4_2 << "			Ac_out <= Ac_in ;                              \n";
r16_pipereg4_2 << "			N_D1_out <= N_in ;                             \n";
r16_pipereg4_2 << "			D_out <= D_in ;                                \n";
r16_pipereg4_2 << "		end                                                \n";
r16_pipereg4_2 << "	end                                                    \n";
r16_pipereg4_2 << "                                                        \n";
r16_pipereg4_2 << "endmodule                                               \n";
	 
     r16_pipereg4_2.close();	 	
}
void configurable_BFFT::R16_PipeReg5_1(std::string string_in){
	 std::ofstream r16_pipereg5_1;
     std::string        string_buf = "/R16_PipeReg5_1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg5_1.open(ss.str());
r16_pipereg5_1 << "`timescale 1 ns/1 ps                                    \n";
r16_pipereg5_1 << "module R16_PipeReg5_1(SS_out,                           \n";
r16_pipereg5_1 << "					  SC_out,                              \n";
r16_pipereg5_1 << "                      SS_in,                            \n";
r16_pipereg5_1 << "					  SC_in,                               \n";
r16_pipereg5_1 << "                      rst_n,                            \n";
r16_pipereg5_1 << "                      clk                               \n";
r16_pipereg5_1 << "                      ) ;                               \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "parameter DH_WIDTH     = 96 ;                           \n";
r16_pipereg5_1 << "parameter DH_ZERO      = 96'h0 ;                        \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "output [DH_WIDTH-1:0] SS_out ;                          \n";
r16_pipereg5_1 << "output [DH_WIDTH-1:0] SC_out ;                          \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "input [DH_WIDTH-1:0]  SS_in ;                           \n";
r16_pipereg5_1 << "input [DH_WIDTH-1:0]  SC_in ;                           \n";
r16_pipereg5_1 << "input                 rst_n ;                           \n";
r16_pipereg5_1 << "input                 clk ;                             \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "reg [DH_WIDTH-1:0]  SS_out ;                            \n";
r16_pipereg5_1 << "reg [DH_WIDTH-1:0]  SC_out ;                            \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "	//                                                     \n";
r16_pipereg5_1 << "	always @(posedge clk or negedge rst_n) begin           \n";
r16_pipereg5_1 << "		if(~rst_n) begin                                   \n";
r16_pipereg5_1 << "			SS_out <= DH_ZERO ;                            \n";
r16_pipereg5_1 << "			SC_out <= DH_ZERO ;                            \n";
r16_pipereg5_1 << "		end                                                \n";
r16_pipereg5_1 << "		else begin                                         \n";
r16_pipereg5_1 << "			SS_out <= SS_in ;                              \n";
r16_pipereg5_1 << "			SC_out <= SC_in ;                              \n";
r16_pipereg5_1 << "		end                                                \n";
r16_pipereg5_1 << "	end                                                    \n";
r16_pipereg5_1 << "                                                        \n";
r16_pipereg5_1 << "endmodule                                               \n";
	 
     r16_pipereg5_1.close();	 	
}
void configurable_BFFT::R16_PipeReg5_2(std::string string_in){
	 std::ofstream r16_pipereg5_2;
     std::string        string_buf = "/R16_PipeReg5_2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_pipereg5_2.open(ss.str());
r16_pipereg5_2 << "`timescale 1 ns/1 ps                                  \n";
r16_pipereg5_2 << "module R16_PipeReg5_2(SS_out,                         \n";
r16_pipereg5_2 << "					  SC_out,                            \n";
r16_pipereg5_2 << "                      SS_in,                          \n";
r16_pipereg5_2 << "					  SC_in,                             \n";
r16_pipereg5_2 << "                      rst_n,                          \n";
r16_pipereg5_2 << "                      clk                             \n";
r16_pipereg5_2 << "                      ) ;                             \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "parameter D_WIDTH     = 192 ;                         \n";
r16_pipereg5_2 << "parameter D_ZERO      = 192'h0 ;                      \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "output [D_WIDTH-1:0] SS_out ;                         \n";
r16_pipereg5_2 << "output [D_WIDTH-1:0] SC_out ;                         \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "input [D_WIDTH-1:0]  SS_in ;                          \n";
r16_pipereg5_2 << "input [D_WIDTH-1:0]  SC_in ;                          \n";
r16_pipereg5_2 << "input                rst_n ;                          \n";
r16_pipereg5_2 << "input                clk ;                            \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "reg [D_WIDTH-1:0]  SS_out ;                           \n";
r16_pipereg5_2 << "reg [D_WIDTH-1:0]  SC_out ;                           \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "	//                                                   \n";
r16_pipereg5_2 << "	always @(posedge clk or negedge rst_n) begin         \n";
r16_pipereg5_2 << "		if(~rst_n) begin                                 \n";
r16_pipereg5_2 << "			SS_out <= D_ZERO ;                           \n";
r16_pipereg5_2 << "			SC_out <= D_ZERO ;                           \n";
r16_pipereg5_2 << "		end                                              \n";
r16_pipereg5_2 << "		else begin                                       \n";
r16_pipereg5_2 << "			SS_out <= SS_in ;                            \n";
r16_pipereg5_2 << "			SC_out <= SC_in ;                            \n";
r16_pipereg5_2 << "		end                                              \n";
r16_pipereg5_2 << "	end                                                  \n";
r16_pipereg5_2 << "                                                      \n";
r16_pipereg5_2 << "endmodule                                             \n";
	 
     r16_pipereg5_2.close();	 	
}	
void configurable_BFFT::Radix16_Pipe(std::string string_in){
	 std::ofstream radix16_pipe;
     std::string        string_buf = "/Radix16_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 radix16_pipe.open(ss.str());
radix16_pipe <<"`timescale 1 ns/1 ps                                                   \n"; 
radix16_pipe <<"module Radix16_Pipe(RA0_out,                                           \n"; 
radix16_pipe <<"			          RA1_out,                                         \n";   
radix16_pipe <<"			          RA2_out,                                         \n";   
radix16_pipe <<"			          RA3_out,                                         \n";   
radix16_pipe <<"			          RA4_out,                                         \n";   
radix16_pipe <<"			          RA5_out,                                         \n";   
radix16_pipe <<"			          RA6_out,                                         \n";   
radix16_pipe <<"			          RA7_out,                                         \n";   
radix16_pipe <<"			          RA8_out,                                         \n";   
radix16_pipe <<"			          RA9_out,                                         \n";   
radix16_pipe <<"			          RA10_out,                                        \n";   
radix16_pipe <<"			          RA11_out,                                        \n";   
radix16_pipe <<"			          RA12_out,                                        \n";   
radix16_pipe <<"			          RA13_out,                                        \n";   
radix16_pipe <<"			          RA14_out,                                        \n";   
radix16_pipe <<"			          RA15_out,                                        \n";   
radix16_pipe <<"                    RA0_in,                                            \n"; 
radix16_pipe <<"			          RA1_in,                                          \n";   
radix16_pipe <<"			          RA2_in,                                          \n";   
radix16_pipe <<"			          RA3_in,                                          \n";   
radix16_pipe <<"			          RA4_in,                                          \n";   
radix16_pipe <<"			          RA5_in,                                          \n";   
radix16_pipe <<"			          RA6_in,                                          \n";   
radix16_pipe <<"			          RA7_in,                                          \n";   
radix16_pipe <<"			          RA8_in,                                          \n";   
radix16_pipe <<"			          RA9_in,                                          \n";   
radix16_pipe <<"			          RA10_in,                                         \n";   
radix16_pipe <<"			          RA11_in,                                         \n";   
radix16_pipe <<"			          RA12_in,                                         \n";   
radix16_pipe <<"			          RA13_in,                                         \n";   
radix16_pipe <<"			          RA14_in,                                         \n";   
radix16_pipe <<"			          RA15_in,                                         \n";   
radix16_pipe <<"		              N_in,                                            \n";   
radix16_pipe <<"		              MixRadix_sel_in,                                 \n";       
radix16_pipe <<"		              BU_mode_sel,                                     \n";
radix16_pipe <<"		              BU_dc_sel,                                       \n";                                             
radix16_pipe <<"                    rst_n,                                             \n"; 
radix16_pipe <<"                    clk                                                \n"; 
radix16_pipe <<"                    ) ;                                                \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"parameter P_WIDTH     = 64 ;                                           \n"; 
radix16_pipe <<"parameter DH_WIDTH    = 96 ;                                           \n"; 
radix16_pipe <<"parameter D_WIDTH     = 192 ;                                          \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA0_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA1_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA2_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA3_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA4_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA5_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA6_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA7_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA8_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA9_out ;                                          \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA10_out ;                                         \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA11_out ;                                         \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA12_out ;                                         \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA13_out ;                                         \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA14_out ;                                         \n"; 
radix16_pipe <<"output[P_WIDTH-1:0] RA15_out ;                                         \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA0_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA1_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA2_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA3_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA4_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA5_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA6_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA7_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA8_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA9_in ;                                           \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA10_in ;                                          \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA11_in ;                                          \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA12_in ;                                          \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA13_in ;                                          \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA14_in ;                                          \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] RA15_in ;                                          \n"; 
radix16_pipe <<"input [P_WIDTH-1:0] N_in ;                                             \n"; 
radix16_pipe <<"input [1:0]         MixRadix_sel_in;                                   \n";     
radix16_pipe <<"input               BU_mode_sel;                                       \n"; 
radix16_pipe <<"input               BU_dc_sel;                                         \n";                                          
radix16_pipe <<"input               rst_n ;                                            \n"; 
radix16_pipe <<"input               clk ;                                              \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"wire  [DH_WIDTH-1:0] Sum0_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum1_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum2_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum3_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum4_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum5_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum6_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum7_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum8_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum9_wire ;                                       \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum10_wire ;                                      \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum11_wire ;                                      \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum12_wire ;                                      \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum13_wire ;                                      \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum14_wire ;                                      \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum15_wire ;                                      \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"//origial wire                                                         \n"; 
radix16_pipe <<"wire  [DH_WIDTH-1:0] Sum0_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum1_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum2_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum3_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum4_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum5_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum6_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum7_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum8_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum9_reg_wire ;                                   \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum10_reg_wire ;                                  \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum11_reg_wire ;                                  \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum12_reg_wire ;                                  \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum13_reg_wire ;                                  \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum14_reg_wire ;                                  \n"; 
radix16_pipe <<"wire  [D_WIDTH-1:0]  Sum15_reg_wire ;                                  \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA1_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA2_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA3_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA4_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA5_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA6_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA7_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA9_out_wire;                                      \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA10_out_wire;                                     \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA11_out_wire;                                     \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA12_out_wire;                                     \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA13_out_wire;                                     \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA14_out_wire;                                     \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0] RA15_out_wire;                                     \n";
radix16_pipe <<"                                                                       \n";
radix16_pipe <<"                                                                       \n";
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"wire  [P_WIDTH-1:0]  N_D2_wire ;                                       \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"//Pipeline Register                                                    \n"; 
radix16_pipe <<"R16_NPipeReg1 u_R16_NPipeReg1(.N_D2_out(N_D2_wire),                    \n"; 
radix16_pipe <<"                              .N_in(N_in),                             \n"; 
radix16_pipe <<"                              .rst_n(rst_n),                           \n"; 
radix16_pipe <<"                              .clk(clk)                                \n"; 
radix16_pipe <<"                              ) ;                                      \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"//output0                                                              \n"; 
radix16_pipe <<"Sum16_out0 u_Sum16_out0(.S_out(Sum0_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;                                            \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod96 u0_Mod96(.S_out(RA0_out),                                        \n";
radix16_pipe <<"               .A_in(Sum0_reg_wire),                                   \n"; 
radix16_pipe <<"		         .N_in(N_D2_wire),                                     \n";   
radix16_pipe <<"               .rst_n(rst_n),                                          \n"; 
radix16_pipe <<"               .clk(clk)                                               \n"; 
radix16_pipe <<"               ) ;                                                     \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"//output1                                                              \n"; 
radix16_pipe <<"Sum16_out1 u_Sum16_out1(.S_out(Sum1_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;                                            \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u1_Mod192(.S_out(RA1_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum1_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;                                                    \n"; 
radix16_pipe <<"					                                                   \n";   
radix16_pipe <<"//output2                                                              \n"; 
radix16_pipe <<"Sum16_out2 u_Sum16_out2(.S_out(Sum2_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;                                            \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u2_Mod192(.S_out(RA2_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum2_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;					                                   \n";
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"//output3                                                              \n"; 
radix16_pipe <<"Sum16_out3 u_Sum16_out3(.S_out(Sum3_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;                                            \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u3_Mod192(.S_out(RA3_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum3_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;				                                       \n";
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output4                                                              \n"; 
radix16_pipe <<"Sum16_out4 u_Sum16_out4(.S_out(Sum4_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;                                            \n"; 
radix16_pipe <<"					                                                   \n";   
radix16_pipe <<"Mod192 u4_Mod192(.S_out(RA4_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum4_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;		                                               \n";
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output5                                                              \n"; 
radix16_pipe <<"Sum16_out5 u_Sum16_out5(.S_out(Sum5_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;                                            \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u5_Mod192(.S_out(RA5_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum5_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;		                                               \n";
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output6                                                              \n"; 
radix16_pipe <<"Sum16_out6 u_Sum16_out6(.S_out(Sum6_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;	                                           \n";
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u6_Mod192(.S_out(RA6_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum6_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;		                                               \n";
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output7                                                              \n"; 
radix16_pipe <<"Sum16_out7 u_Sum16_out7(.S_out(Sum7_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;                                            \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u7_Mod192(.S_out(RA7_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum7_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;		                                               \n";
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output8                                                              \n"; 
radix16_pipe <<"Sum16_out8 u_Sum16_out8(.S_out(Sum8_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;	                                           \n";
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u8_Mod192(.S_out(RA8_out),                                      \n"; 
radix16_pipe <<"                 .A_in(Sum8_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;		                                               \n";
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output*9                                                             \n"; 
radix16_pipe <<"Sum16_out9 u_Sum16_out9(.S_out(Sum9_wire),                             \n"; 
radix16_pipe <<"                        .A0_in(RA0_in),                                \n"; 
radix16_pipe <<"			              .A1_in(RA1_in),                              \n";   
radix16_pipe <<"			              .A2_in(RA2_in),                              \n";   
radix16_pipe <<"			              .A3_in(RA3_in),                              \n";   
radix16_pipe <<"			              .A4_in(RA4_in),                              \n";   
radix16_pipe <<"			              .A5_in(RA5_in),                              \n";   
radix16_pipe <<"			              .A6_in(RA6_in),                              \n";   
radix16_pipe <<"			              .A7_in(RA7_in),                              \n";   
radix16_pipe <<"			              .A8_in(RA8_in),                              \n";   
radix16_pipe <<"			              .A9_in(RA9_in),                              \n";   
radix16_pipe <<"			              .A10_in(RA10_in),                            \n";   
radix16_pipe <<"			              .A11_in(RA11_in),                            \n";   
radix16_pipe <<"			              .A12_in(RA12_in),                            \n";   
radix16_pipe <<"			              .A13_in(RA13_in),                            \n";   
radix16_pipe <<"			              .A14_in(RA14_in),                            \n";   
radix16_pipe <<"			              .A15_in(RA15_in),                            \n";   
radix16_pipe <<"                        .MixRadix_sel_in(MixRadix_sel_in),             \n";      
radix16_pipe <<"                        .BU_mode_sel_in(BU_mode_sel),                  \n"; 
radix16_pipe <<"                        .rst_n(rst_n),                                 \n"; 
radix16_pipe <<"                        .clk(clk)                                      \n"; 
radix16_pipe <<"                        ) ;	                                           \n";
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u9_Mod192(.S_out(RA9_out_wire),                                 \n"; 
radix16_pipe <<"                 .A_in(Sum9_reg_wire),                                 \n"; 
radix16_pipe <<"		           .N_in(N_D2_wire),                                   \n";   
radix16_pipe <<"                 .rst_n(rst_n),                                        \n"; 
radix16_pipe <<"                 .clk(clk)                                             \n"; 
radix16_pipe <<"                ) ;		                                               \n";
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output*10                                                            \n"; 
radix16_pipe <<"Sum16_out10 u_Sum16_out10(.S_out(Sum10_wire),                          \n"; 
radix16_pipe <<"                          .A0_in(RA0_in),                              \n"; 
radix16_pipe <<"			                .A1_in(RA1_in),                            \n";   
radix16_pipe <<"			                .A2_in(RA2_in),                            \n";   
radix16_pipe <<"			                .A3_in(RA3_in),                            \n";   
radix16_pipe <<"			                .A4_in(RA4_in),                            \n";   
radix16_pipe <<"			                .A5_in(RA5_in),                            \n";   
radix16_pipe <<"			                .A6_in(RA6_in),                            \n";   
radix16_pipe <<"			                .A7_in(RA7_in),                            \n";   
radix16_pipe <<"			                .A8_in(RA8_in),                            \n";   
radix16_pipe <<"			                .A9_in(RA9_in),                            \n";   
radix16_pipe <<"			                .A10_in(RA10_in),                          \n";   
radix16_pipe <<"			                .A11_in(RA11_in),                          \n";   
radix16_pipe <<"			                .A12_in(RA12_in),                          \n";   
radix16_pipe <<"			                .A13_in(RA13_in),                          \n";   
radix16_pipe <<"			                .A14_in(RA14_in),                          \n";   
radix16_pipe <<"			                .A15_in(RA15_in),                          \n";   
radix16_pipe <<"                          .MixRadix_sel_in(MixRadix_sel_in),           \n";      
radix16_pipe <<"                          .BU_mode_sel_in(BU_mode_sel),                \n"; 
radix16_pipe <<"                          .rst_n(rst_n),                               \n"; 
radix16_pipe <<"                          .clk(clk)                                    \n"; 
radix16_pipe <<"                          ) ;                                          \n"; 
radix16_pipe <<"						                                               \n";   
radix16_pipe <<"Mod192 u10_Mod192(.S_out(RA10_out_wire),                               \n"; 
radix16_pipe <<"                  .A_in(Sum10_reg_wire),                               \n"; 
radix16_pipe <<"		            .N_in(N_D2_wire),                                  \n";   
radix16_pipe <<"                  .rst_n(rst_n),                                       \n"; 
radix16_pipe <<"                  .clk(clk)                                            \n"; 
radix16_pipe <<"                  ) ;		                                           \n";   
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output*11                                                            \n"; 
radix16_pipe <<"Sum16_out11 u_Sum16_out11(.S_out(Sum11_wire),                          \n"; 
radix16_pipe <<"                          .A0_in(RA0_in),                              \n"; 
radix16_pipe <<"			                .A1_in(RA1_in),                            \n";   
radix16_pipe <<"			                .A2_in(RA2_in),                            \n";   
radix16_pipe <<"			                .A3_in(RA3_in),                            \n";   
radix16_pipe <<"			                .A4_in(RA4_in),                            \n";   
radix16_pipe <<"			                .A5_in(RA5_in),                            \n";   
radix16_pipe <<"			                .A6_in(RA6_in),                            \n";   
radix16_pipe <<"			                .A7_in(RA7_in),                            \n";   
radix16_pipe <<"			                .A8_in(RA8_in),                            \n";   
radix16_pipe <<"			                .A9_in(RA9_in),                            \n";   
radix16_pipe <<"			                .A10_in(RA10_in),                          \n";   
radix16_pipe <<"			                .A11_in(RA11_in),                          \n";   
radix16_pipe <<"			                .A12_in(RA12_in),                          \n";   
radix16_pipe <<"			                .A13_in(RA13_in),                          \n";   
radix16_pipe <<"			                .A14_in(RA14_in),                          \n";   
radix16_pipe <<"			                .A15_in(RA15_in),                          \n";   
radix16_pipe <<"                          .MixRadix_sel_in(MixRadix_sel_in),           \n";      
radix16_pipe <<"                          .BU_mode_sel_in(BU_mode_sel),                \n"; 
radix16_pipe <<"                          .rst_n(rst_n),                               \n"; 
radix16_pipe <<"                          .clk(clk)                                    \n"; 
radix16_pipe <<"                          ) ;	                                       \n";   
radix16_pipe <<"						                                               \n";   
radix16_pipe <<"Mod192 u11_Mod192(.S_out(RA11_out_wire),                               \n"; 
radix16_pipe <<"                  .A_in(Sum11_reg_wire),                               \n"; 
radix16_pipe <<"		            .N_in(N_D2_wire),                                  \n";   
radix16_pipe <<"                  .rst_n(rst_n),                                       \n"; 
radix16_pipe <<"                  .clk(clk)                                            \n"; 
radix16_pipe <<"                  ) ;	                                               \n";   
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output*12                                                            \n"; 
radix16_pipe <<"Sum16_out12 u_Sum16_out12(.S_out(Sum12_wire),                          \n"; 
radix16_pipe <<"                          .A0_in(RA0_in),                              \n"; 
radix16_pipe <<"			                .A1_in(RA1_in),                            \n";   
radix16_pipe <<"			                .A2_in(RA2_in),                            \n";   
radix16_pipe <<"			                .A3_in(RA3_in),                            \n";   
radix16_pipe <<"			                .A4_in(RA4_in),                            \n";   
radix16_pipe <<"			                .A5_in(RA5_in),                            \n";   
radix16_pipe <<"			                .A6_in(RA6_in),                            \n";   
radix16_pipe <<"			                .A7_in(RA7_in),                            \n";   
radix16_pipe <<"			                .A8_in(RA8_in),                            \n";   
radix16_pipe <<"			                .A9_in(RA9_in),                            \n";   
radix16_pipe <<"			                .A10_in(RA10_in),                          \n";   
radix16_pipe <<"			                .A11_in(RA11_in),                          \n";   
radix16_pipe <<"			                .A12_in(RA12_in),                          \n";   
radix16_pipe <<"			                .A13_in(RA13_in),                          \n";   
radix16_pipe <<"			                .A14_in(RA14_in),                          \n";   
radix16_pipe <<"			                .A15_in(RA15_in),                          \n";   
radix16_pipe <<"                          .MixRadix_sel_in(MixRadix_sel_in),           \n";      
radix16_pipe <<"                          .BU_mode_sel_in(BU_mode_sel),                \n"; 
radix16_pipe <<"                          .rst_n(rst_n),                               \n"; 
radix16_pipe <<"                          .clk(clk)                                    \n"; 
radix16_pipe <<"                          ) ;		                                   \n";   
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u12_Mod192(.S_out(RA12_out_wire),                               \n"; 
radix16_pipe <<"                  .A_in(Sum12_reg_wire),                               \n"; 
radix16_pipe <<"		            .N_in(N_D2_wire),                                  \n";   
radix16_pipe <<"                  .rst_n(rst_n),                                       \n"; 
radix16_pipe <<"                  .clk(clk)                                            \n"; 
radix16_pipe <<"                  ) ;	                                               \n";   
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output*13                                                            \n"; 
radix16_pipe <<"Sum16_out13 u_Sum16_out13(.S_out(Sum13_wire),                          \n"; 
radix16_pipe <<"                          .A0_in(RA0_in),                              \n"; 
radix16_pipe <<"			                .A1_in(RA1_in),                            \n";   
radix16_pipe <<"			                .A2_in(RA2_in),                            \n";   
radix16_pipe <<"			                .A3_in(RA3_in),                            \n";   
radix16_pipe <<"			                .A4_in(RA4_in),                            \n";   
radix16_pipe <<"			                .A5_in(RA5_in),                            \n";   
radix16_pipe <<"			                .A6_in(RA6_in),                            \n";   
radix16_pipe <<"			                .A7_in(RA7_in),                            \n";   
radix16_pipe <<"			                .A8_in(RA8_in),                            \n";   
radix16_pipe <<"			                .A9_in(RA9_in),                            \n";   
radix16_pipe <<"			                .A10_in(RA10_in),                          \n";   
radix16_pipe <<"			                .A11_in(RA11_in),                          \n";   
radix16_pipe <<"			                .A12_in(RA12_in),                          \n";   
radix16_pipe <<"			                .A13_in(RA13_in),                          \n";   
radix16_pipe <<"			                .A14_in(RA14_in),                          \n";   
radix16_pipe <<"			                .A15_in(RA15_in),                          \n";   
radix16_pipe <<"                          .MixRadix_sel_in(MixRadix_sel_in),           \n";      
radix16_pipe <<"                          .BU_mode_sel_in(BU_mode_sel),                \n"; 
radix16_pipe <<"                          .rst_n(rst_n),                               \n"; 
radix16_pipe <<"                          .clk(clk)                                    \n"; 
radix16_pipe <<"                          ) ;	                                       \n";   
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"Mod192 u13_Mod192(.S_out(RA13_out_wire),                               \n"; 
radix16_pipe <<"                  .A_in(Sum13_reg_wire),                               \n"; 
radix16_pipe <<"		            .N_in(N_D2_wire),                                  \n";   
radix16_pipe <<"                  .rst_n(rst_n),                                       \n"; 
radix16_pipe <<"                  .clk(clk)                                            \n"; 
radix16_pipe <<"                  ) ;	                                               \n";   
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output*14                                                            \n"; 
radix16_pipe <<"Sum16_out14 u_Sum16_out14(.S_out(Sum14_wire),                          \n"; 
radix16_pipe <<"                          .A0_in(RA0_in),                              \n"; 
radix16_pipe <<"			                .A1_in(RA1_in),                            \n";   
radix16_pipe <<"			                .A2_in(RA2_in),                            \n";   
radix16_pipe <<"			                .A3_in(RA3_in),                            \n";   
radix16_pipe <<"			                .A4_in(RA4_in),                            \n";   
radix16_pipe <<"			                .A5_in(RA5_in),                            \n";   
radix16_pipe <<"			                .A6_in(RA6_in),                            \n";   
radix16_pipe <<"			                .A7_in(RA7_in),                            \n";   
radix16_pipe <<"			                .A8_in(RA8_in),                            \n";   
radix16_pipe <<"			                .A9_in(RA9_in),                            \n";   
radix16_pipe <<"			                .A10_in(RA10_in),                          \n";   
radix16_pipe <<"			                .A11_in(RA11_in),                          \n";   
radix16_pipe <<"			                .A12_in(RA12_in),                          \n";   
radix16_pipe <<"			                .A13_in(RA13_in),                          \n";   
radix16_pipe <<"			                .A14_in(RA14_in),                          \n";   
radix16_pipe <<"			                .A15_in(RA15_in),                          \n";   
radix16_pipe <<"                          .MixRadix_sel_in(MixRadix_sel_in),           \n";      
radix16_pipe <<"                          .BU_mode_sel_in(BU_mode_sel),                \n"; 
radix16_pipe <<"                          .rst_n(rst_n),                               \n"; 
radix16_pipe <<"                          .clk(clk)                                    \n"; 
radix16_pipe <<"                          ) ;	                                       \n";   
radix16_pipe <<"						                                               \n";   
radix16_pipe <<"Mod192 u14_Mod192(.S_out(RA14_out_wire),                               \n"; 
radix16_pipe <<"                  .A_in(Sum14_reg_wire),                               \n"; 
radix16_pipe <<"		            .N_in(N_D2_wire),                                  \n";   
radix16_pipe <<"                  .rst_n(rst_n),                                       \n"; 
radix16_pipe <<"                  .clk(clk)                                            \n"; 
radix16_pipe <<"                  ) ;	                                               \n";   
radix16_pipe <<"				                                                       \n";   
radix16_pipe <<"//output*15                                                            \n"; 
radix16_pipe <<"Sum16_out15 u_Sum16_out15(.S_out(Sum15_wire),                          \n"; 
radix16_pipe <<"                          .A0_in(RA0_in),                              \n"; 
radix16_pipe <<"			                .A1_in(RA1_in),                            \n";   
radix16_pipe <<"			                .A2_in(RA2_in),                            \n";   
radix16_pipe <<"			                .A3_in(RA3_in),                            \n";   
radix16_pipe <<"			                .A4_in(RA4_in),                            \n";   
radix16_pipe <<"			                .A5_in(RA5_in),                            \n";   
radix16_pipe <<"			                .A6_in(RA6_in),                            \n";   
radix16_pipe <<"			                .A7_in(RA7_in),                            \n";   
radix16_pipe <<"			                .A8_in(RA8_in),                            \n";   
radix16_pipe <<"			                .A9_in(RA9_in),                            \n";   
radix16_pipe <<"			                .A10_in(RA10_in),                          \n";   
radix16_pipe <<"			                .A11_in(RA11_in),                          \n";   
radix16_pipe <<"			                .A12_in(RA12_in),                          \n";   
radix16_pipe <<"			                .A13_in(RA13_in),                          \n";   
radix16_pipe <<"			                .A14_in(RA14_in),                          \n";   
radix16_pipe <<"			                .A15_in(RA15_in),                          \n";   
radix16_pipe <<"                          .MixRadix_sel_in(MixRadix_sel_in),           \n";      
radix16_pipe <<"                          .BU_mode_sel_in(BU_mode_sel),                \n"; 
radix16_pipe <<"                          .rst_n(rst_n),                               \n"; 
radix16_pipe <<"                          .clk(clk)					                   \n";
radix16_pipe <<"					      ) ;                                          \n";   
radix16_pipe <<"					                                                   \n";   
radix16_pipe <<"Mod192 u15_Mod192(.S_out(RA15_out_wire),                               \n"; 
radix16_pipe <<"                  .A_in(Sum15_reg_wire),                               \n"; 
radix16_pipe <<"		            .N_in(N_D2_wire),                                  \n";   
radix16_pipe <<"                  .rst_n(rst_n),                                       \n"; 
radix16_pipe <<"                  .clk(clk)                                            \n"; 
radix16_pipe <<"                  ) ;                                                  \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"                                                                       \n"; 
radix16_pipe <<"//Mux ,Edit date                                                                                       \n";
radix16_pipe <<"// Mix radix , 2'd0: radix-2 , 2'd1: radix-4  , otherwise radix-8                                      \n";                
radix16_pipe <<"assign RA1_out  = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA15_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA13_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA9_out_wire  : RA1_out_wire;   \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA2_out  = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA14_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA14_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA10_out_wire : RA2_out_wire;   \n";
radix16_pipe <<"				                                                                                       \n";
radix16_pipe <<"assign RA3_out  = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA13_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA15_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA11_out_wire : RA3_out_wire;   \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA4_out  = (BU_dc_sel == 1'b1) ? RA12_out_wire : RA4_out_wire;                                  \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA5_out  = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA11_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA9_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA13_out_wire : RA5_out_wire;   \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA6_out  = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA10_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA10_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA14_out_wire : RA6_out_wire;   \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA7_out  = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA9_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA11_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA15_out_wire : RA7_out_wire;   \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA9_out  = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA7_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA5_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA1_out_wire  : RA9_out_wire;   \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA10_out = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA6_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA6_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA2_out_wire  : RA10_out_wire;  \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA11_out = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA5_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA7_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA3_out_wire  : RA11_out_wire;  \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA12_out = (BU_dc_sel == 1'b1) ? RA4_out_wire : RA12_out_wire;                                  \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA13_out = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA3_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA1_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA5_out_wire  : RA13_out_wire;  \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA14_out = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA2_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA2_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA6_out_wire  : RA14_out_wire;  \n";
radix16_pipe <<"                                                                                                       \n";
radix16_pipe <<"assign RA15_out = ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd0) )? RA11_out_wire :                 \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd1) )? RA3_out_wire :                  \n";
radix16_pipe <<"                  ((BU_dc_sel == 1'b1) && (MixRadix_sel_in == 2'd2) )? RA7_out_wire  : RA15_out_wire;  \n";
radix16_pipe <<"                                                                        \n";
radix16_pipe <<"                                                                        \n";
radix16_pipe <<"				                                                        \n";  
radix16_pipe <<"//Pipeline Register                                                     \n";
radix16_pipe <<"R16_PipeReg1 u_R16_PipeReg1(.A0_out(Sum0_reg_wire),                     \n";
radix16_pipe <<"				              .A1_out(Sum1_reg_wire),                   \n";  
radix16_pipe <<"				              .A2_out(Sum2_reg_wire),                   \n";  
radix16_pipe <<"				              .A3_out(Sum3_reg_wire),                   \n";  
radix16_pipe <<"				              .A4_out(Sum4_reg_wire),                   \n";  
radix16_pipe <<"				              .A5_out(Sum5_reg_wire),                   \n";  
radix16_pipe <<"				              .A6_out(Sum6_reg_wire),                   \n";  
radix16_pipe <<"				              .A7_out(Sum7_reg_wire),                   \n";  
radix16_pipe <<"				              .A8_out(Sum8_reg_wire),                   \n";  
radix16_pipe <<"				              .A9_out(Sum9_reg_wire),                   \n";  
radix16_pipe <<"				              .A10_out(Sum10_reg_wire),                 \n";  
radix16_pipe <<"				              .A11_out(Sum11_reg_wire),                 \n";  
radix16_pipe <<"				              .A12_out(Sum12_reg_wire),                 \n";  
radix16_pipe <<"				              .A13_out(Sum13_reg_wire),                 \n";  
radix16_pipe <<"				              .A14_out(Sum14_reg_wire),                 \n";  
radix16_pipe <<"				              .A15_out(Sum15_reg_wire),                 \n";  
radix16_pipe <<"                            .A0_in(Sum0_wire),                          \n";
radix16_pipe <<"			                  .A1_in(Sum1_wire),                        \n";  
radix16_pipe <<"			                  .A2_in(Sum2_wire),                        \n";  
radix16_pipe <<"			                  .A3_in(Sum3_wire),                        \n";  
radix16_pipe <<"			                  .A4_in(Sum4_wire),                        \n";  
radix16_pipe <<"			                  .A5_in(Sum5_wire),                        \n";  
radix16_pipe <<"			                  .A6_in(Sum6_wire),                        \n";  
radix16_pipe <<"			                  .A7_in(Sum7_wire),                        \n";  
radix16_pipe <<"			                  .A8_in(Sum8_wire),                        \n";  
radix16_pipe <<"			                  .A9_in(Sum9_wire),                        \n";  
radix16_pipe <<"			                  .A10_in(Sum10_wire),                      \n";  
radix16_pipe <<"			                  .A11_in(Sum11_wire),                      \n";  
radix16_pipe <<"			                  .A12_in(Sum12_wire),                      \n";  
radix16_pipe <<"			                  .A13_in(Sum13_wire),                      \n";  
radix16_pipe <<"			                  .A14_in(Sum14_wire),                      \n";  
radix16_pipe <<"			                  .A15_in(Sum15_wire),                      \n";  
radix16_pipe <<"                            .rst_n(rst_n),                              \n";
radix16_pipe <<"                            .clk(clk)                                   \n";
radix16_pipe <<"                            ) ;				  				            \n";
radix16_pipe <<"                                                                        \n";
radix16_pipe <<"				                                                        \n";  
radix16_pipe <<"endmodule                                                               \n";

     radix16_pipe.close();	 	
}	 
//Sum
void configurable_BFFT::Sum16_out0(std::string string_in){
	 std::ofstream sum16_out0;
     std::string        string_buf = "/Sum16_out0.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out0.open(ss.str());	
sum16_out0 <<" //==================================================\n";         
sum16_out0 <<" //Writer     : Shi Yong Wu                          \n";         
sum16_out0 <<" //                                                  \n";         
sum16_out0 <<" //Note       : Sum with CLA for Radix-16 output0    \n";         
sum16_out0 <<" //==================================================\n";         
sum16_out0 <<" `timescale 1 ns/1 ps                                \n";         
sum16_out0 <<" module Sum16_out0(S_out,                            \n";         
sum16_out0 <<"                   A0_in,                            \n";         
sum16_out0 <<" 			       A1_in,                              \n";       
sum16_out0 <<" 			       A2_in,                              \n";       
sum16_out0 <<" 			       A3_in,                              \n";       
sum16_out0 <<" 			       A4_in,                              \n";       
sum16_out0 <<" 			       A5_in,                              \n";       
sum16_out0 <<" 			       A6_in,                              \n";       
sum16_out0 <<" 			       A7_in,                              \n";       
sum16_out0 <<" 			       A8_in,                              \n";       
sum16_out0 <<" 			       A9_in,                              \n";       
sum16_out0 <<" 			       A10_in,                             \n";       
sum16_out0 <<" 			       A11_in,                             \n";       
sum16_out0 <<" 			       A12_in,                             \n";       
sum16_out0 <<" 			       A13_in,                             \n";       
sum16_out0 <<" 			       A14_in,                             \n";       
sum16_out0 <<" 			       A15_in,                             \n";       
sum16_out0 <<" 			       MixRadix_sel_in,                    \n";        
sum16_out0 <<" 			       BU_mode_sel_in,                     \n";       
sum16_out0 <<"                   rst_n,                            \n";         
sum16_out0 <<"                   clk                               \n";         
sum16_out0 <<"                   ) ;                               \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<" parameter D_WIDTH     = 96 ;                        \n";         
sum16_out0 <<" parameter P_WIDTH     = 64 ;                        \n";         
sum16_out0 <<" parameter D_ZERO      = 96'h0 ;                     \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<" output[D_WIDTH-1:0] S_out ;                         \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A0_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A1_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A2_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A3_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A4_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A5_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A6_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A7_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A8_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A9_in ;                         \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A10_in ;                        \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A11_in ;                        \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A12_in ;                        \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A13_in ;                        \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A14_in ;                        \n";         
sum16_out0 <<" input [P_WIDTH-1:0] A15_in ;                        \n";         
sum16_out0 <<" input [1:0]         MixRadix_sel_in;                \n";          
sum16_out0 <<" input               BU_mode_sel_in;                 \n";         
sum16_out0 <<" input               rst_n ;                         \n";         
sum16_out0 <<" input               clk ;                           \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";         
sum16_out0 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";         
sum16_out0 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";         
sum16_out0 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<"                                                     \n";         
sum16_out0 <<" 	//                                                 \n";      
sum16_out0 <<" 	Sum16_CSAout0 u_Sum16_CSAout0(.SS_out(SS_wire),    \n";      
sum16_out0 <<" 					              .SC_out(SC_wire),    \n";      
sum16_out0 <<"                                   .A0_in(A0_in),    \n";         
sum16_out0 <<" 			                      .A1_in(A1_in),       \n";      
sum16_out0 <<" 			                      .A2_in(A2_in),       \n";      
sum16_out0 <<" 			                      .A3_in(A3_in),       \n";      
sum16_out0 <<" 			                      .A4_in(A4_in),       \n";      
sum16_out0 <<" 			                      .A5_in(A5_in),       \n";      
sum16_out0 <<" 			                      .A6_in(A6_in),       \n";      
sum16_out0 <<" 			                      .A7_in(A7_in),       \n";      
sum16_out0 <<" 			                      .A8_in(A8_in),       \n";      
sum16_out0 <<" 			                      .A9_in(A9_in),       \n";      
sum16_out0 <<" 			                      .A10_in(A10_in),     \n";      
sum16_out0 <<" 			                      .A11_in(A11_in),     \n";      
sum16_out0 <<" 			                      .A12_in(A12_in),     \n";      
sum16_out0 <<" 			                      .A13_in(A13_in),     \n";      
sum16_out0 <<" 			                      .A14_in(A14_in),     \n";      
sum16_out0 <<" 			                      .A15_in(A15_in),     \n";      
sum16_out0 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out0 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out0 <<"                                   // rst_n,         \n";         
sum16_out0 <<"                                   // rst_n,         \n";         
sum16_out0 <<"                                   // clk            \n";         
sum16_out0 <<"                                   ) ;               \n";         
sum16_out0 <<" 	//Pipeline Register                                \n";      
sum16_out0 <<" 	R16_PipeReg5_1 u_R16_PipeReg5_1(.SS_out(SS_reg_wire),  \n";  
sum16_out0 <<" 					                .SC_out(SC_reg_wire),  \n";  
sum16_out0 <<"                                     .SS_in(SS_wire),    \n";     
sum16_out0 <<" 					                .SC_in(SC_wire),       \n";  
sum16_out0 <<"                                     .rst_n(rst_n),      \n";     
sum16_out0 <<"                                     .clk(clk)           \n";     
sum16_out0 <<"                                     ) ;                 \n";     
sum16_out0 <<" 	                                                       \n";  
sum16_out0 <<" 	//                                                     \n";  
sum16_out0 <<" 	CLA96 u0_CLA96(.sum(S_out),                            \n";  
sum16_out0 <<"                    .c_out(),                            \n";     
sum16_out0 <<"                    .a_in(SS_reg_wire),                  \n";     
sum16_out0 <<"                    .b_in(SC_reg_wire),                  \n";     
sum16_out0 <<"                    .c_in(1'b0)                          \n";     
sum16_out0 <<" 			       // rst_n,                               \n";  
sum16_out0 <<"                    // clk                               \n";     
sum16_out0 <<"                    ) ;                                  \n";     
sum16_out0 <<" 	                                                       \n";  
sum16_out0 <<" 			                                               \n";  
sum16_out0 <<" endmodule                                               \n";     	 
	 sum16_out0.close();
}
void configurable_BFFT::Sum16_out1(std::string string_in){
	 std::ofstream sum16_out1;
     std::string        string_buf = "/Sum16_out1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out1.open(ss.str());	
sum16_out1 <<" //==================================================\n";         
sum16_out1 <<" //Writer     : Shi Yong Wu                          \n";        
sum16_out1 <<" //                                                  \n";
sum16_out1 <<" //Note       : Sum with CLA for Radix-16 output1    \n";         
sum16_out1 <<" //==================================================\n";         
sum16_out1 <<" `timescale 1 ns/1 ps                                \n";         
sum16_out1 <<" module Sum16_out1(S_out,                            \n";         
sum16_out1 <<"                   A0_in,                            \n";         
sum16_out1 <<" 			       A1_in,                              \n";       
sum16_out1 <<" 			       A2_in,                              \n";       
sum16_out1 <<" 			       A3_in,                              \n";       
sum16_out1 <<" 			       A4_in,                              \n";       
sum16_out1 <<" 			       A5_in,                              \n";       
sum16_out1 <<" 			       A6_in,                              \n";       
sum16_out1 <<" 			       A7_in,                              \n";       
sum16_out1 <<" 			       A8_in,                              \n";       
sum16_out1 <<" 			       A9_in,                              \n";       
sum16_out1 <<" 			       A10_in,                             \n";       
sum16_out1 <<" 			       A11_in,                             \n";       
sum16_out1 <<" 			       A12_in,                             \n";       
sum16_out1 <<" 			       A13_in,                             \n";       
sum16_out1 <<" 			       A14_in,                             \n";       
sum16_out1 <<" 			       A15_in,                             \n";       
sum16_out1 <<" 			       MixRadix_sel_in,                    \n";       
sum16_out1 <<" 			       BU_mode_sel_in,                     \n";      
sum16_out1 <<"                   rst_n,                            \n";         
sum16_out1 <<"                   clk                               \n";         
sum16_out1 <<"                   ) ;                               \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<" parameter D_WIDTH     = 192 ;                       \n";         
sum16_out1 <<" parameter P_WIDTH     = 64 ;                        \n";         
sum16_out1 <<" parameter D_ZERO      = 192'h0 ;                    \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<" output[D_WIDTH-1:0] S_out ;                         \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A0_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A1_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A2_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A3_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A4_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A5_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A6_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A7_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A8_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A9_in ;                         \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A10_in ;                        \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A11_in ;                        \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A12_in ;                        \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A13_in ;                        \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A14_in ;                        \n";         
sum16_out1 <<" input [P_WIDTH-1:0] A15_in ;                        \n";         
sum16_out1 <<" input [1:0]         MixRadix_sel_in;                \n";         
sum16_out1 <<" input               BU_mode_sel_in;                 \n";        
sum16_out1 <<" input               rst_n ;                         \n";         
sum16_out1 <<" input               clk ;                           \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";         
sum16_out1 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";         
sum16_out1 <<" wire                 c0_wire ;                      \n";         
sum16_out1 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";         
sum16_out1 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";         
sum16_out1 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<"                                                     \n";         
sum16_out1 <<" 	//                                                 \n";      
sum16_out1 <<" 	Sum16_CSAout1 u_Sum16_CSAout1(.SS_out(SS_wire),    \n";      
sum16_out1 <<" 					              .SC_out(SC_wire),    \n";      
sum16_out1 <<"                                   .A0_in(A0_in),    \n";         
sum16_out1 <<" 			                      .A1_in(A1_in),       \n";      
sum16_out1 <<" 			                      .A2_in(A2_in),       \n";      
sum16_out1 <<" 			                      .A3_in(A3_in),       \n";      
sum16_out1 <<" 			                      .A4_in(A4_in),       \n";      
sum16_out1 <<" 			                      .A5_in(A5_in),       \n";      
sum16_out1 <<" 			                      .A6_in(A6_in),       \n";      
sum16_out1 <<" 			                      .A7_in(A7_in),       \n";      
sum16_out1 <<" 			                      .A8_in(A8_in),       \n";      
sum16_out1 <<" 			                      .A9_in(A9_in),       \n";      
sum16_out1 <<" 			                      .A10_in(A10_in),     \n";      
sum16_out1 <<" 			                      .A11_in(A11_in),     \n";      
sum16_out1 <<" 			                      .A12_in(A12_in),     \n";      
sum16_out1 <<" 			                      .A13_in(A13_in),     \n";      
sum16_out1 <<" 			                      .A14_in(A14_in),     \n";      
sum16_out1 <<" 			                      .A15_in(A15_in),     \n";      
sum16_out1 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";           
sum16_out1 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out1 <<"                                   // rst_n,         \n";         
sum16_out1 <<"                                   // clk            \n";         
sum16_out1 <<"                                   ) ;               \n";         
sum16_out1 <<" 	//Pipeline Register                                \n";      
sum16_out1 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),  \n";  
sum16_out1 <<" 					                .SC_out(SC_reg_wire),  \n";  
sum16_out1 <<"                                     .SS_in(SS_wire),    \n";     
sum16_out1 <<" 					                .SC_in(SC_wire),       \n";  
sum16_out1 <<"                                     .rst_n(rst_n),      \n";     
sum16_out1 <<"                                     .clk(clk)           \n";     
sum16_out1 <<"                                      ) ;                \n";     
sum16_out1 <<" 	                                                       \n";  
sum16_out1 <<" 	//                                                     \n";  
sum16_out1 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                        \n";  
sum16_out1 <<"                      .c_out(c0_wire),                   \n";     
sum16_out1 <<"                      .a_in(SS_reg_wire),                \n";     
sum16_out1 <<"                      .b_in(SC_reg_wire),                \n";     
sum16_out1 <<"                      .c_in(1'b0)                        \n";     
sum16_out1 <<" 			         // rst_n,                             \n";  
sum16_out1 <<"                      // clk                             \n";     
sum16_out1 <<"                      ) ;                                \n";     
sum16_out1 <<" 	//			                                           \n";  
sum16_out1 <<" 	CLA192 u1_CLA192(.sum(S_out),                          \n";  
sum16_out1 <<"                      .c_out(),                          \n";     
sum16_out1 <<"                      .a_in(s0_wire),                    \n";     
sum16_out1 <<"                      .b_in(D_ZERO),                     \n";     
sum16_out1 <<"                      .c_in(c0_wire)                     \n";     
sum16_out1 <<" 			         // rst_n,                             \n";  
sum16_out1 <<"                      // clk                             \n";     
sum16_out1 <<"                      ) ;			                       \n";  
sum16_out1 <<" 			                                               \n";  
sum16_out1 <<" 	                                                       \n";  
sum16_out1 <<" endmodule                                               \n";     
	 
	 sum16_out1.close();	
}
void configurable_BFFT::Sum16_out2(std::string string_in){
	 std::ofstream sum16_out2;
     std::string        string_buf = "/Sum16_out2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out2.open(ss.str());	
sum16_out2 <<" //================================================== \n";     
sum16_out2 <<" //Writer     : Shi Yong Wu                           \n";    
sum16_out2 <<" //                                                   \n";
sum16_out2 <<" //Note       : Sum with CLA for Radix-16 output2     \n";     
sum16_out2 <<" //================================================== \n";     
sum16_out2 <<" `timescale 1 ns/1 ps                                 \n";     
sum16_out2 <<" module Sum16_out2(S_out,                             \n";     
sum16_out2 <<"                   A0_in,                             \n";     
sum16_out2 <<" 			       A1_in,                               \n";   
sum16_out2 <<" 			       A2_in,                               \n";   
sum16_out2 <<" 			       A3_in,                               \n";   
sum16_out2 <<" 			       A4_in,                               \n";   
sum16_out2 <<" 			       A5_in,                               \n";   
sum16_out2 <<" 			       A6_in,                               \n";   
sum16_out2 <<" 			       A7_in,                               \n";   
sum16_out2 <<" 			       A8_in,                               \n";   
sum16_out2 <<" 			       A9_in,                               \n";   
sum16_out2 <<" 			       A10_in,                              \n";   
sum16_out2 <<" 			       A11_in,                              \n";   
sum16_out2 <<" 			       A12_in,                              \n";   
sum16_out2 <<" 			       A13_in,                              \n";   
sum16_out2 <<" 			       A14_in,                              \n";   
sum16_out2 <<" 			       A15_in,                              \n";   
sum16_out2 <<"                   MixRadix_sel_in,                   \n";     
sum16_out2 <<"                   BU_mode_sel_in,                    \n";    
sum16_out2 <<"                   rst_n,                             \n";     
sum16_out2 <<"                   clk                                \n";     
sum16_out2 <<"                   ) ;                                \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<" parameter D_WIDTH     = 192 ;                        \n";     
sum16_out2 <<" parameter P_WIDTH     = 64 ;                         \n";     
sum16_out2 <<" parameter D_ZERO      = 192'h0 ;                     \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<" output[D_WIDTH-1:0] S_out ;                          \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A0_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A1_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A2_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A3_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A4_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A5_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A6_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A7_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A8_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A9_in ;                          \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A10_in ;                         \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A11_in ;                         \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A12_in ;                         \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A13_in ;                         \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A14_in ;                         \n";     
sum16_out2 <<" input [P_WIDTH-1:0] A15_in ;                         \n";     
sum16_out2 <<" input [1:0]         MixRadix_sel_in ;                \n";     
sum16_out2 <<" input               BU_mode_sel_in ;                 \n";    
sum16_out2 <<" input               rst_n ;                          \n";     
sum16_out2 <<" input               clk ;                            \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<" wire  [D_WIDTH-1:0]  SS_wire ;                       \n";     
sum16_out2 <<" wire  [D_WIDTH-1:0]  SC_wire ;                       \n";     
sum16_out2 <<" wire                 c0_wire ;                       \n";     
sum16_out2 <<" wire  [D_WIDTH-1:0]  s0_wire ;                       \n";     
sum16_out2 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                   \n";     
sum16_out2 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                   \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<"                                                      \n";     
sum16_out2 <<" 	//                                                  \n";  
sum16_out2 <<" 	Sum16_CSAout2 u_Sum16_CSAout2(.SS_out(SS_wire),     \n";  
sum16_out2 <<" 					              .SC_out(SC_wire),     \n";  
sum16_out2 <<"                                  .A0_in(A0_in),      \n";    
sum16_out2 <<" 			                      .A1_in(A1_in),        \n";  
sum16_out2 <<" 			                      .A2_in(A2_in),        \n";  
sum16_out2 <<" 			                      .A3_in(A3_in),        \n";  
sum16_out2 <<" 			                      .A4_in(A4_in),        \n";  
sum16_out2 <<" 			                      .A5_in(A5_in),        \n";  
sum16_out2 <<" 			                      .A6_in(A6_in),        \n";  
sum16_out2 <<" 			                      .A7_in(A7_in),        \n";  
sum16_out2 <<" 			                      .A8_in(A8_in),        \n";  
sum16_out2 <<" 			                      .A9_in(A9_in),        \n";  
sum16_out2 <<" 			                      .A10_in(A10_in),      \n";  
sum16_out2 <<" 			                      .A11_in(A11_in),      \n";  
sum16_out2 <<" 			                      .A12_in(A12_in),      \n";  
sum16_out2 <<" 			                      .A13_in(A13_in),      \n";  
sum16_out2 <<" 			                      .A14_in(A14_in),      \n";  
sum16_out2 <<" 			                      .A15_in(A15_in),      \n";   
sum16_out2 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out2 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out2 <<"                                   // rst_n,          \n";     
sum16_out2 <<"                                   // clk             \n";     
sum16_out2 <<"                                   ) ;                \n";     
sum16_out2 <<" 	//Pipeline Register                                 \n";  
sum16_out2 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire), \n";
sum16_out2 <<" 					                .SC_out(SC_reg_wire), \n";
sum16_out2 <<"                                     .SS_in(SS_wire),   \n";   
sum16_out2 <<" 					                .SC_in(SC_wire),      \n";
sum16_out2 <<"                                     .rst_n(rst_n),     \n";   
sum16_out2 <<"                                     .clk(clk)          \n";   
sum16_out2 <<"                                      ) ;               \n";   
sum16_out2 <<" 	                                                      \n";
sum16_out2 <<" 	//                                                    \n";
sum16_out2 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                       \n";
sum16_out2 <<"                      .c_out(c0_wire),                  \n";   
sum16_out2 <<"                      .a_in(SS_reg_wire),               \n";   
sum16_out2 <<"                      .b_in(SC_reg_wire),               \n";   
sum16_out2 <<"                      .c_in(1'b0)                       \n";   
sum16_out2 <<" 			         // rst_n,                            \n";
sum16_out2 <<"                      // clk                            \n";   
sum16_out2 <<"                      ) ;                               \n";   
sum16_out2 <<" 	//			                                          \n";
sum16_out2 <<" 	CLA192 u1_CLA192(.sum(S_out),                         \n";
sum16_out2 <<"                      .c_out(),                         \n";   
sum16_out2 <<"                      .a_in(s0_wire),                   \n";   
sum16_out2 <<"                      .b_in(D_ZERO),                    \n";   
sum16_out2 <<"                      .c_in(c0_wire)                    \n";   
sum16_out2 <<" 			         // rst_n,                            \n";
sum16_out2 <<"                      // clk                            \n";   
sum16_out2 <<"                      ) ;			                      \n";
sum16_out2 <<"                                                        \n";   
sum16_out2 <<"                                                        \n";   
sum16_out2 <<" endmodule                                              \n";   
	 
	 sum16_out2.close();
}
void configurable_BFFT::Sum16_out3(std::string string_in){
	 std::ofstream sum16_out3;
     std::string        string_buf = "/Sum16_out3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out3.open(ss.str());
sum16_out3 <<" //==================================================\n";        
sum16_out3 <<" //Writer     : Shi Yong Wu                          \n";       
sum16_out3 <<" //                                                  \n";
sum16_out3 <<" //Note       : Sum with CLA for Radix-16 output3    \n";        
sum16_out3 <<" //==================================================\n";        
sum16_out3 <<" `timescale 1 ns/1 ps                                \n";        
sum16_out3 <<" module Sum16_out3(S_out,                            \n";        
sum16_out3 <<"                   A0_in,                            \n";        
sum16_out3 <<" 			       A1_in,                              \n";      
sum16_out3 <<" 			       A2_in,                              \n";      
sum16_out3 <<" 			       A3_in,                              \n";      
sum16_out3 <<" 			       A4_in,                              \n";      
sum16_out3 <<" 			       A5_in,                              \n";      
sum16_out3 <<" 			       A6_in,                              \n";      
sum16_out3 <<" 			       A7_in,                              \n";      
sum16_out3 <<" 			       A8_in,                              \n";      
sum16_out3 <<" 			       A9_in,                              \n";      
sum16_out3 <<" 			       A10_in,                             \n";      
sum16_out3 <<" 			       A11_in,                             \n";      
sum16_out3 <<" 			       A12_in,                             \n";      
sum16_out3 <<" 			       A13_in,                             \n";      
sum16_out3 <<" 			       A14_in,                             \n";      
sum16_out3 <<" 			       A15_in,                             \n";      
sum16_out3 <<"                   MixRadix_sel_in,                  \n";        
sum16_out3 <<"                   BU_mode_sel_in,                   \n";       
sum16_out3 <<"                   rst_n,                            \n";        
sum16_out3 <<"                   clk                               \n";        
sum16_out3 <<"                   ) ;                               \n";        
sum16_out3 <<"                                                     \n";        
sum16_out3 <<" parameter D_WIDTH     = 192 ;                       \n";        
sum16_out3 <<" parameter P_WIDTH     = 64 ;                        \n";        
sum16_out3 <<" parameter D_ZERO      = 192'h0 ;                    \n";        
sum16_out3 <<"                                                     \n";        
sum16_out3 <<"                                                     \n";        
sum16_out3 <<" output[D_WIDTH-1:0] S_out ;                         \n";        
sum16_out3 <<"                                                     \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A0_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A1_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A2_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A3_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A4_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A5_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A6_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A7_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A8_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A9_in ;                         \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A10_in ;                        \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A11_in ;                        \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A12_in ;                        \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A13_in ;                        \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A14_in ;                        \n";        
sum16_out3 <<" input [P_WIDTH-1:0] A15_in ;                        \n";        
sum16_out3 <<" input [1:0]         MixRadix_sel_in;                \n";        
sum16_out3 <<" input               BU_mode_sel_in;                 \n";       
sum16_out3 <<" input               rst_n ;                         \n";        
sum16_out3 <<" input               clk ;                           \n";        
sum16_out3 <<"                                                     \n";        
sum16_out3 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";        
sum16_out3 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";        
sum16_out3 <<" wire                 c0_wire ;                      \n";        
sum16_out3 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";        
sum16_out3 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";        
sum16_out3 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";        
sum16_out3 <<"                                                     \n";        
sum16_out3 <<"                                                     \n";        
sum16_out3 <<" 	//                                                 \n";     
sum16_out3 <<" 	Sum16_CSAout3 u_Sum16_CSAout3(.SS_out(SS_wire),    \n";     
sum16_out3 <<" 					              .SC_out(SC_wire),    \n";     
sum16_out3 <<"                                   .A0_in(A0_in),    \n";        
sum16_out3 <<" 			                      .A1_in(A1_in),       \n";     
sum16_out3 <<" 			                      .A2_in(A2_in),       \n";     
sum16_out3 <<" 			                      .A3_in(A3_in),       \n";     
sum16_out3 <<" 			                      .A4_in(A4_in),       \n";     
sum16_out3 <<" 			                      .A5_in(A5_in),       \n";     
sum16_out3 <<" 			                      .A6_in(A6_in),       \n";     
sum16_out3 <<" 			                      .A7_in(A7_in),       \n";     
sum16_out3 <<" 			                      .A8_in(A8_in),       \n";     
sum16_out3 <<" 			                      .A9_in(A9_in),       \n";     
sum16_out3 <<" 			                      .A10_in(A10_in),     \n";     
sum16_out3 <<" 			                      .A11_in(A11_in),     \n";     
sum16_out3 <<" 			                      .A12_in(A12_in),     \n";     
sum16_out3 <<" 			                      .A13_in(A13_in),     \n";     
sum16_out3 <<" 			                      .A14_in(A14_in),     \n";     
sum16_out3 <<" 			                      .A15_in(A15_in),     \n";      
sum16_out3 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out3 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out3 <<"                                   // rst_n,         \n";        
sum16_out3 <<"                                   // clk            \n";        
sum16_out3 <<"                                   ) ;               \n";        
sum16_out3 <<" 	//Pipeline Register                                \n";      
sum16_out3 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),\n";   
sum16_out3 <<" 					                .SC_out(SC_reg_wire), \n";  
sum16_out3 <<"                                     .SS_in(SS_wire),   \n";     
sum16_out3 <<" 					                .SC_in(SC_wire),      \n";  
sum16_out3 <<"                                     .rst_n(rst_n),     \n";     
sum16_out3 <<"                                     .clk(clk)          \n";     
sum16_out3 <<"                                      ) ;               \n";     
sum16_out3 <<" 	                                                      \n";  
sum16_out3 <<" 	//                                                    \n";  
sum16_out3 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                       \n";  
sum16_out3 <<"                      .c_out(c0_wire),                  \n";     
sum16_out3 <<"                      .a_in(SS_reg_wire),               \n";     
sum16_out3 <<"                      .b_in(SC_reg_wire),               \n";     
sum16_out3 <<"                      .c_in(1'b0)                       \n";     
sum16_out3 <<" 			         // rst_n,                            \n";  
sum16_out3 <<"                      // clk                            \n";     
sum16_out3 <<"                      ) ;                               \n";     
sum16_out3 <<" 	//			                                          \n";  
sum16_out3 <<" 	CLA192 u1_CLA192(.sum(S_out),                         \n";  
sum16_out3 <<"                      .c_out(),                         \n";     
sum16_out3 <<"                      .a_in(s0_wire),                   \n";     
sum16_out3 <<"                      .b_in(D_ZERO),                    \n";     
sum16_out3 <<"                      .c_in(c0_wire)                    \n";     
sum16_out3 <<" 			         // rst_n,                            \n";  
sum16_out3 <<"                      // clk                            \n";     
sum16_out3 <<"                      ) ;			                      \n";  
sum16_out3 <<" 					                                      \n";  
sum16_out3 <<" 					                                      \n";  
sum16_out3 <<" endmodule                                              \n";     

	 sum16_out3.close();	
}	 
void configurable_BFFT::Sum16_out4(std::string string_in){
	 std::ofstream sum16_out4;
     std::string        string_buf = "/Sum16_out4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out4.open(ss.str());	
sum16_out4 <<" //==================================================\n";        
sum16_out4 <<" //Writer     : Shi Yong Wu                          \n";       
sum16_out4 <<" //                                                  \n";
sum16_out4 <<" //Note       : Sum with CLA for Radix-16 output4    \n";        
sum16_out4 <<" //             8 3-2 counter                        \n";        
sum16_out4 <<" //==================================================\n";        
sum16_out4 <<" `timescale 1 ns/1 ps                                \n";        
sum16_out4 <<" module Sum16_out4(S_out,                            \n";        
sum16_out4 <<"                   A0_in,                            \n";        
sum16_out4 <<" 			      A1_in,                               \n";     
sum16_out4 <<" 			      A2_in,                               \n";     
sum16_out4 <<" 			      A3_in,                               \n";     
sum16_out4 <<" 			      A4_in,                               \n";     
sum16_out4 <<" 			      A5_in,                               \n";     
sum16_out4 <<" 			      A6_in,                               \n";     
sum16_out4 <<" 			      A7_in,                               \n";     
sum16_out4 <<" 			      A8_in,                               \n";     
sum16_out4 <<" 			      A9_in,                               \n";     
sum16_out4 <<" 			      A10_in,                              \n";     
sum16_out4 <<" 			      A11_in,                              \n";     
sum16_out4 <<" 			      A12_in,                              \n";     
sum16_out4 <<" 			      A13_in,                              \n";     
sum16_out4 <<" 			      A14_in,                              \n";     
sum16_out4 <<" 			      A15_in,                              \n";     
sum16_out4 <<" 			      MixRadix_sel_in,                     \n";      
sum16_out4 <<" 			      BU_mode_sel_in,                      \n";     
sum16_out4 <<"                   rst_n,                            \n";        
sum16_out4 <<"                   clk                               \n";        
sum16_out4 <<"                   ) ;                               \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<" parameter D_WIDTH     = 192 ;                       \n";        
sum16_out4 <<" parameter P_WIDTH     = 64 ;                        \n";        
sum16_out4 <<" parameter D_ZERO      = 192'h0 ;                    \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<" output[D_WIDTH-1:0] S_out ;                         \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A0_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A1_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A2_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A3_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A4_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A5_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A6_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A7_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A8_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A9_in ;                         \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A10_in ;                        \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A11_in ;                        \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A12_in ;                        \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A13_in ;                        \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A14_in ;                        \n";        
sum16_out4 <<" input [P_WIDTH-1:0] A15_in ;                        \n";        
sum16_out4 <<" input [1:0]         MixRadix_sel_in ;               \n";        
sum16_out4 <<" input               BU_mode_sel_in ;                \n";       
sum16_out4 <<" input               rst_n ;                         \n";        
sum16_out4 <<" input               clk ;                           \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";        
sum16_out4 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";        
sum16_out4 <<" wire                 c0_wire ;                      \n";        
sum16_out4 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";        
sum16_out4 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";        
sum16_out4 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<"                                                     \n";        
sum16_out4 <<" 	//                                                 \n";     
sum16_out4 <<" 	Sum16_CSAout4 u_Sum16_CSAout4(.SS_out(SS_wire),    \n";     
sum16_out4 <<" 					              .SC_out(SC_wire),    \n";     
sum16_out4 <<"                                   .A0_in(A0_in),    \n";        
sum16_out4 <<" 			                      .A1_in(A1_in),       \n";     
sum16_out4 <<" 			                      .A2_in(A2_in),       \n";     
sum16_out4 <<" 			                      .A3_in(A3_in),       \n";     
sum16_out4 <<" 			                      .A4_in(A4_in),       \n";     
sum16_out4 <<" 			                      .A5_in(A5_in),       \n";     
sum16_out4 <<" 			                      .A6_in(A6_in),       \n";     
sum16_out4 <<" 			                      .A7_in(A7_in),       \n";     
sum16_out4 <<" 			                      .A8_in(A8_in),       \n";     
sum16_out4 <<" 			                      .A9_in(A9_in),       \n";     
sum16_out4 <<" 			                      .A10_in(A10_in),     \n";     
sum16_out4 <<" 			                      .A11_in(A11_in),     \n";     
sum16_out4 <<" 			                      .A12_in(A12_in),     \n";     
sum16_out4 <<" 			                      .A13_in(A13_in),     \n";     
sum16_out4 <<" 			                      .A14_in(A14_in),     \n";     
sum16_out4 <<" 			                      .A15_in(A15_in),     \n";      
sum16_out4 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out4 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out4 <<"                                   // rst_n,         \n";        
sum16_out4 <<"                                   // clk            \n";        
sum16_out4 <<"                                   ) ;               \n";        
sum16_out4 <<" 	//Pipeline Register                                \n";     
sum16_out4 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),  \n"; 
sum16_out4 <<" 					                .SC_out(SC_reg_wire),  \n"; 
sum16_out4 <<"                                     .SS_in(SS_wire),    \n";    
sum16_out4 <<" 					                .SC_in(SC_wire),       \n"; 
sum16_out4 <<"                                     .rst_n(rst_n),      \n";    
sum16_out4 <<"                                     .clk(clk)           \n";    
sum16_out4 <<"                                      ) ;                \n";    
sum16_out4 <<" 	                                                       \n"; 
sum16_out4 <<" 	//                                                     \n"; 
sum16_out4 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                        \n"; 
sum16_out4 <<"                      .c_out(c0_wire),                   \n";    
sum16_out4 <<"                      .a_in(SS_reg_wire),                \n";    
sum16_out4 <<"                      .b_in(SC_reg_wire),                \n";    
sum16_out4 <<"                      .c_in(1'b0)                        \n";    
sum16_out4 <<" 			         // rst_n,                             \n"; 
sum16_out4 <<"                      // clk                             \n";    
sum16_out4 <<"                      ) ;                                \n";    
sum16_out4 <<" 	//			                                           \n"; 
sum16_out4 <<" 	CLA192 u1_CLA192(.sum(S_out),                          \n"; 
sum16_out4 <<"                      .c_out(),                          \n";    
sum16_out4 <<"                      .a_in(s0_wire),                    \n";    
sum16_out4 <<"                      .b_in(D_ZERO),                     \n";    
sum16_out4 <<"                      .c_in(c0_wire)                     \n";    
sum16_out4 <<" 			         // rst_n,                             \n"; 
sum16_out4 <<"                      // clk                             \n";    
sum16_out4 <<"                      ) ;			                       \n"; 
sum16_out4 <<" 					                                       \n"; 
sum16_out4 <<"                                                         \n";    
sum16_out4 <<" endmodule                                               \n";    
	 
	 sum16_out4.close();	
}
void configurable_BFFT::Sum16_out5(std::string string_in){
	 std::ofstream sum16_out5;
     std::string        string_buf = "/Sum16_out5.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out5.open(ss.str());	
sum16_out5 <<" //==================================================\n";       
sum16_out5 <<" //Writer     : Shi Yong Wu                          \n";      
sum16_out5 <<" //                                                  \n";
sum16_out5 <<" //Note       : Sum with CLA for Radix-16 output5    \n";       
sum16_out5 <<" //==================================================\n";       
sum16_out5 <<" `timescale 1 ns/1 ps                                \n";       
sum16_out5 <<" module Sum16_out5(S_out,                            \n";       
sum16_out5 <<"                   A0_in,                            \n";       
sum16_out5 <<" 			      A1_in,                               \n";    
sum16_out5 <<" 			      A2_in,                               \n";    
sum16_out5 <<" 			      A3_in,                               \n";    
sum16_out5 <<" 			      A4_in,                               \n";    
sum16_out5 <<" 			      A5_in,                               \n";    
sum16_out5 <<" 			      A6_in,                               \n";    
sum16_out5 <<" 			      A7_in,                               \n";    
sum16_out5 <<" 			      A8_in,                               \n";    
sum16_out5 <<" 			      A9_in,                               \n";    
sum16_out5 <<" 			      A10_in,                              \n";    
sum16_out5 <<" 			      A11_in,                              \n";    
sum16_out5 <<" 			      A12_in,                              \n";    
sum16_out5 <<" 			      A13_in,                              \n";    
sum16_out5 <<" 			      A14_in,                              \n";    
sum16_out5 <<" 			      A15_in,                              \n";    
sum16_out5 <<" 			      MixRadix_sel_in,                     \n";    
sum16_out5 <<" 			      BU_mode_sel_in,                      \n";   
sum16_out5 <<"                   rst_n,                            \n";       
sum16_out5 <<"                   clk                               \n";       
sum16_out5 <<"                   ) ;                               \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<" parameter D_WIDTH     = 192 ;                       \n";       
sum16_out5 <<" parameter P_WIDTH     = 64 ;                        \n";       
sum16_out5 <<" parameter D_ZERO      = 192'h0 ;                    \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<" output[D_WIDTH-1:0] S_out ;                         \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A0_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A1_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A2_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A3_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A4_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A5_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A6_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A7_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A8_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A9_in ;                         \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A10_in ;                        \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A11_in ;                        \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A12_in ;                        \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A13_in ;                        \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A14_in ;                        \n";       
sum16_out5 <<" input [P_WIDTH-1:0] A15_in ;                        \n";       
sum16_out5 <<" input [1:0]         MixRadix_sel_in ;               \n";       
sum16_out5 <<" input               BU_mode_sel_in ;                \n";      
sum16_out5 <<" input               rst_n ;                         \n";       
sum16_out5 <<" input               clk ;                           \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";       
sum16_out5 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";       
sum16_out5 <<" wire                 c0_wire ;                      \n";       
sum16_out5 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";       
sum16_out5 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";       
sum16_out5 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<"                                                     \n";       
sum16_out5 <<" 	//                                                 \n";    
sum16_out5 <<" 	Sum16_CSAout5 u_Sum16_CSAout5(.SS_out(SS_wire),    \n";    
sum16_out5 <<" 					              .SC_out(SC_wire),    \n";    
sum16_out5 <<"                                   .A0_in(A0_in),    \n";       
sum16_out5 <<" 			                      .A1_in(A1_in),       \n";    
sum16_out5 <<" 			                      .A2_in(A2_in),       \n";    
sum16_out5 <<" 			                      .A3_in(A3_in),       \n";    
sum16_out5 <<" 			                      .A4_in(A4_in),       \n";    
sum16_out5 <<" 			                      .A5_in(A5_in),       \n";    
sum16_out5 <<" 			                      .A6_in(A6_in),       \n";    
sum16_out5 <<" 			                      .A7_in(A7_in),       \n";    
sum16_out5 <<" 			                      .A8_in(A8_in),       \n";    
sum16_out5 <<" 			                      .A9_in(A9_in),       \n";    
sum16_out5 <<" 			                      .A10_in(A10_in),     \n";    
sum16_out5 <<" 			                      .A11_in(A11_in),     \n";    
sum16_out5 <<" 			                      .A12_in(A12_in),     \n";    
sum16_out5 <<" 			                      .A13_in(A13_in),     \n";    
sum16_out5 <<" 			                      .A14_in(A14_in),     \n";    
sum16_out5 <<" 			                      .A15_in(A15_in),     \n";    
sum16_out5 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out5 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out5 <<"                                   // rst_n,         \n";       
sum16_out5 <<"                                   // clk            \n";       
sum16_out5 <<"                                   ) ;               \n";       
sum16_out5 <<" 	//Pipeline Register                                \n";    
sum16_out5 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),  \n";
sum16_out5 <<" 					                .SC_out(SC_reg_wire),  \n";
sum16_out5 <<"                                     .SS_in(SS_wire),    \n";   
sum16_out5 <<" 					                .SC_in(SC_wire),       \n";
sum16_out5 <<"                                     .rst_n(rst_n),      \n";   
sum16_out5 <<"                                     .clk(clk)           \n";   
sum16_out5 <<"                                      ) ;                \n";   
sum16_out5 <<" 	                                                       \n";
sum16_out5 <<" 	//                                                     \n";
sum16_out5 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                        \n";
sum16_out5 <<"                      .c_out(c0_wire),                   \n";   
sum16_out5 <<"                      .a_in(SS_reg_wire),                \n";   
sum16_out5 <<"                      .b_in(SC_reg_wire),                \n";   
sum16_out5 <<"                      .c_in(1'b0)                        \n";   
sum16_out5 <<" 			         // rst_n,                             \n";
sum16_out5 <<"                      // clk                             \n";   
sum16_out5 <<"                      ) ;                                \n";   
sum16_out5 <<" 	//			                                           \n";
sum16_out5 <<" 	CLA192 u1_CLA192(.sum(S_out),                          \n";
sum16_out5 <<"                      .c_out(),                          \n";   
sum16_out5 <<"                      .a_in(s0_wire),                    \n";   
sum16_out5 <<"                      .b_in(D_ZERO),                     \n";   
sum16_out5 <<"                      .c_in(c0_wire)                     \n";   
sum16_out5 <<" 			         // rst_n,                             \n";
sum16_out5 <<"                      // clk                             \n";   
sum16_out5 <<"                      ) ;			                       \n";
sum16_out5 <<" 					                                       \n";
sum16_out5 <<"                                                         \n";   
sum16_out5 <<" endmodule                                               \n";   
	 sum16_out5.close();	
}	 
void configurable_BFFT::Sum16_out6(std::string string_in){
	 std::ofstream sum16_out6;
     std::string        string_buf = "/Sum16_out6.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out6.open(ss.str());	
sum16_out6 <<" //==================================================\n";      
sum16_out6 <<" //Writer     : Shi Yong Wu                          \n";     
sum16_out6 <<" //                                                  \n";
sum16_out6 <<" //Note       : Sum with CLA for Radix-16 output6    \n";      
sum16_out6 <<" //==================================================\n";      
sum16_out6 <<" `timescale 1 ns/1 ps                                \n";      
sum16_out6 <<" module Sum16_out6(S_out,                            \n";      
sum16_out6 <<"                   A0_in,                            \n";      
sum16_out6 <<" 			      A1_in,                               \n";   
sum16_out6 <<" 			      A2_in,                               \n";   
sum16_out6 <<" 			      A3_in,                               \n";   
sum16_out6 <<" 			      A4_in,                               \n";   
sum16_out6 <<" 			      A5_in,                               \n";   
sum16_out6 <<" 			      A6_in,                               \n";   
sum16_out6 <<" 			      A7_in,                               \n";   
sum16_out6 <<" 			      A8_in,                               \n";   
sum16_out6 <<" 			      A9_in,                               \n";   
sum16_out6 <<" 			      A10_in,                              \n";   
sum16_out6 <<" 			      A11_in,                              \n";   
sum16_out6 <<" 			      A12_in,                              \n";   
sum16_out6 <<" 			      A13_in,                              \n";   
sum16_out6 <<" 			      A14_in,                              \n";   
sum16_out6 <<" 			      A15_in,                              \n";   
sum16_out6 <<"                   MixRadix_sel_in,                  \n";      
sum16_out6 <<"                   BU_mode_sel_in,                   \n";     
sum16_out6 <<"                   rst_n,                            \n";      
sum16_out6 <<"                   clk                               \n";      
sum16_out6 <<"                   ) ;                               \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<" parameter D_WIDTH     = 192 ;                       \n";      
sum16_out6 <<" parameter P_WIDTH     = 64 ;                        \n";      
sum16_out6 <<" parameter D_ZERO      = 192'h0 ;                    \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<" output[D_WIDTH-1:0] S_out ;                         \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A0_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A1_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A2_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A3_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A4_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A5_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A6_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A7_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A8_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A9_in ;                         \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A10_in ;                        \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A11_in ;                        \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A12_in ;                        \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A13_in ;                        \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A14_in ;                        \n";      
sum16_out6 <<" input [P_WIDTH-1:0] A15_in ;                        \n";      
sum16_out6 <<" input [1:0]         MixRadix_sel_in ;               \n";       
sum16_out6 <<" input               BU_mode_sel_in ;                \n";      
sum16_out6 <<" input               rst_n ;                         \n";      
sum16_out6 <<" input               clk ;                           \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";      
sum16_out6 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";      
sum16_out6 <<" wire                 c0_wire ;                      \n";      
sum16_out6 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";      
sum16_out6 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";      
sum16_out6 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<"                                                     \n";      
sum16_out6 <<" 	//                                                 \n";   
sum16_out6 <<" 	Sum16_CSAout6 u_Sum16_CSAout6(.SS_out(SS_wire),    \n";   
sum16_out6 <<" 					              .SC_out(SC_wire),    \n";   
sum16_out6 <<"                                   .A0_in(A0_in),    \n";      
sum16_out6 <<" 			                      .A1_in(A1_in),       \n";   
sum16_out6 <<" 			                      .A2_in(A2_in),       \n";   
sum16_out6 <<" 			                      .A3_in(A3_in),       \n";   
sum16_out6 <<" 			                      .A4_in(A4_in),       \n";   
sum16_out6 <<" 			                      .A5_in(A5_in),       \n";   
sum16_out6 <<" 			                      .A6_in(A6_in),       \n";   
sum16_out6 <<" 			                      .A7_in(A7_in),       \n";   
sum16_out6 <<" 			                      .A8_in(A8_in),       \n";   
sum16_out6 <<" 			                      .A9_in(A9_in),       \n";   
sum16_out6 <<" 			                      .A10_in(A10_in),     \n";   
sum16_out6 <<" 			                      .A11_in(A11_in),     \n";   
sum16_out6 <<" 			                      .A12_in(A12_in),     \n";   
sum16_out6 <<" 			                      .A13_in(A13_in),     \n";   
sum16_out6 <<" 			                      .A14_in(A14_in),     \n";   
sum16_out6 <<" 			                      .A15_in(A15_in),     \n";    
sum16_out6 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out6 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out6 <<"                                   // rst_n,        \n";       
sum16_out6 <<"                                   // clk           \n";       
sum16_out6 <<"                                   ) ;              \n";       
sum16_out6 <<" 	//Pipeline Register                               \n";    
sum16_out6 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire), \n";
sum16_out6 <<" 					                .SC_out(SC_reg_wire), \n";
sum16_out6 <<"                                     .SS_in(SS_wire),   \n";   
sum16_out6 <<" 					                .SC_in(SC_wire),      \n";
sum16_out6 <<"                                     .rst_n(rst_n),     \n";   
sum16_out6 <<"                                     .clk(clk)          \n";   
sum16_out6 <<"                                      ) ;               \n";   
sum16_out6 <<" 	                                                      \n";
sum16_out6 <<" 	//                                                    \n";
sum16_out6 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                       \n";
sum16_out6 <<"                      .c_out(c0_wire),                  \n";   
sum16_out6 <<"                      .a_in(SS_reg_wire),               \n";   
sum16_out6 <<"                      .b_in(SC_reg_wire),               \n";   
sum16_out6 <<"                      .c_in(1'b0)                       \n";   
sum16_out6 <<" 			         // rst_n,                            \n";
sum16_out6 <<"                      // clk                            \n";   
sum16_out6 <<"                      ) ;                               \n";   
sum16_out6 <<" 	//			                                          \n";
sum16_out6 <<" 	CLA192 u1_CLA192(.sum(S_out),                         \n";
sum16_out6 <<"                      .c_out(),                         \n";   
sum16_out6 <<"                      .a_in(s0_wire),                   \n";   
sum16_out6 <<"                      .b_in(D_ZERO),                    \n";   
sum16_out6 <<"                      .c_in(c0_wire)                    \n";   
sum16_out6 <<" 			         // rst_n,                            \n";
sum16_out6 <<"                      // clk                            \n";   
sum16_out6 <<"                      ) ;			                      \n";
sum16_out6 <<" 					                                      \n";
sum16_out6 <<"                                                        \n";   
sum16_out6 <<" endmodule                                              \n";   
	 
	 sum16_out6.close();	
}	 
void configurable_BFFT::Sum16_out7(std::string string_in){
	 std::ofstream sum16_out7;
     std::string        string_buf = "/Sum16_out7.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out7.open(ss.str());	
sum16_out7 <<" //==================================================\n";         
sum16_out7 <<" //Writer     : Shi Yong Wu                          \n";        
sum16_out7 <<" //                                                  \n";
sum16_out7 <<" //Note       : Sum with CLA for Radix-16 output7    \n";         
sum16_out7 <<" //==================================================\n";         
sum16_out7 <<" `timescale 1 ns/1 ps                                \n";         
sum16_out7 <<" module Sum16_out7(S_out,                            \n";         
sum16_out7 <<"                   A0_in,                            \n";         
sum16_out7 <<" 			      A1_in,                               \n";      
sum16_out7 <<" 			      A2_in,                               \n";      
sum16_out7 <<" 			      A3_in,                               \n";      
sum16_out7 <<" 			      A4_in,                               \n";      
sum16_out7 <<" 			      A5_in,                               \n";      
sum16_out7 <<" 			      A6_in,                               \n";      
sum16_out7 <<" 			      A7_in,                               \n";      
sum16_out7 <<" 			      A8_in,                               \n";      
sum16_out7 <<" 			      A9_in,                               \n";      
sum16_out7 <<" 			      A10_in,                              \n";      
sum16_out7 <<" 			      A11_in,                              \n";      
sum16_out7 <<" 			      A12_in,                              \n";      
sum16_out7 <<" 			      A13_in,                              \n";      
sum16_out7 <<" 			      A14_in,                              \n";      
sum16_out7 <<" 			      A15_in,                              \n";      
sum16_out7 <<" 			      MixRadix_sel_in,                     \n";      
sum16_out7 <<" 			      BU_mode_sel_in,                      \n";     
sum16_out7 <<"                   rst_n,                            \n";         
sum16_out7 <<"                   clk                               \n";         
sum16_out7 <<"                   ) ;                               \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<" parameter D_WIDTH     = 192 ;                       \n";         
sum16_out7 <<" parameter P_WIDTH     = 64 ;                        \n";         
sum16_out7 <<" parameter D_ZERO      = 192'h0 ;                    \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<" output[D_WIDTH-1:0] S_out ;                         \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A0_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A1_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A2_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A3_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A4_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A5_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A6_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A7_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A8_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A9_in ;                         \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A10_in ;                        \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A11_in ;                        \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A12_in ;                        \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A13_in ;                        \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A14_in ;                        \n";         
sum16_out7 <<" input [P_WIDTH-1:0] A15_in ;                        \n";         
sum16_out7 <<" input [1:0]         MixRadix_sel_in;                \n";         
sum16_out7 <<" input               BU_mode_sel_in;                 \n";        
sum16_out7 <<" input               rst_n ;                         \n";         
sum16_out7 <<" input               clk ;                           \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";         
sum16_out7 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";         
sum16_out7 <<" wire                 c0_wire ;                      \n";         
sum16_out7 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";         
sum16_out7 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";         
sum16_out7 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<"                                                     \n";         
sum16_out7 <<" 	//                                                 \n";      
sum16_out7 <<" 	Sum16_CSAout7 u_Sum16_CSAout7(.SS_out(SS_wire),    \n";      
sum16_out7 <<" 					              .SC_out(SC_wire),    \n";      
sum16_out7 <<"                                   .A0_in(A0_in),    \n";         
sum16_out7 <<" 			                      .A1_in(A1_in),       \n";      
sum16_out7 <<" 			                      .A2_in(A2_in),       \n";      
sum16_out7 <<" 			                      .A3_in(A3_in),       \n";      
sum16_out7 <<" 			                      .A4_in(A4_in),       \n";      
sum16_out7 <<" 			                      .A5_in(A5_in),       \n";      
sum16_out7 <<" 			                      .A6_in(A6_in),       \n";      
sum16_out7 <<" 			                      .A7_in(A7_in),       \n";      
sum16_out7 <<" 			                      .A8_in(A8_in),       \n";      
sum16_out7 <<" 			                      .A9_in(A9_in),       \n";      
sum16_out7 <<" 			                      .A10_in(A10_in),     \n";      
sum16_out7 <<" 			                      .A11_in(A11_in),     \n";      
sum16_out7 <<" 			                      .A12_in(A12_in),     \n";      
sum16_out7 <<" 			                      .A13_in(A13_in),     \n";      
sum16_out7 <<" 			                      .A14_in(A14_in),     \n";      
sum16_out7 <<" 			                      .A15_in(A15_in),     \n";       
sum16_out7 <<" 			                      .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out7 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out7 <<"                                   // rst_n,         \n";         
sum16_out7 <<"                                   // clk            \n";         
sum16_out7 <<"                                   ) ;               \n";         
sum16_out7 <<" 	//Pipeline Register                                \n";      
sum16_out7 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),   \n"; 
sum16_out7 <<" 					                .SC_out(SC_reg_wire),   \n"; 
sum16_out7 <<"                                     .SS_in(SS_wire),     \n";    
sum16_out7 <<" 					                .SC_in(SC_wire),        \n"; 
sum16_out7 <<"                                     .rst_n(rst_n),       \n";    
sum16_out7 <<"                                     .clk(clk)            \n";    
sum16_out7 <<"                                      ) ;                 \n";    
sum16_out7 <<" 	                                                        \n"; 
sum16_out7 <<" 	//                                                      \n"; 
sum16_out7 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                         \n"; 
sum16_out7 <<"                      .c_out(c0_wire),                    \n";    
sum16_out7 <<"                      .a_in(SS_reg_wire),                 \n";    
sum16_out7 <<"                      .b_in(SC_reg_wire),                 \n";    
sum16_out7 <<"                      .c_in(1'b0)                         \n";    
sum16_out7 <<" 			         // rst_n,                              \n"; 
sum16_out7 <<"                      // clk                              \n";    
sum16_out7 <<"                      ) ;                                 \n";    
sum16_out7 <<" 	//			                                            \n"; 
sum16_out7 <<" 	CLA192 u1_CLA192(.sum(S_out),                           \n"; 
sum16_out7 <<"                      .c_out(),                           \n";    
sum16_out7 <<"                      .a_in(s0_wire),                     \n";    
sum16_out7 <<"                      .b_in(D_ZERO),                      \n";    
sum16_out7 <<"                      .c_in(c0_wire)                      \n";    
sum16_out7 <<" 			         // rst_n,                              \n"; 
sum16_out7 <<"                      // clk                              \n";    
sum16_out7 <<"                      ) ;			                        \n"; 
sum16_out7 <<" 					                                        \n"; 
sum16_out7 <<" 					                                        \n"; 
sum16_out7 <<" endmodule                                                \n";    
	 
	 sum16_out7.close();
}	
void configurable_BFFT::Sum16_out8(std::string string_in){
	 std::ofstream sum16_out8;
     std::string        string_buf = "/Sum16_out8.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out8.open(ss.str());
sum16_out8 <<" //==================================================\n";           
sum16_out8 <<" //Writer     : Shi Yong Wu                          \n";          
sum16_out8 <<" //                                                  \n";
sum16_out8 <<" //Note       : Sum with CLA for Radix-16 output8    \n";           
sum16_out8 <<" //             8 3-2 counter                        \n";           
sum16_out8 <<" //==================================================\n";           
sum16_out8 <<" `timescale 1 ns/1 ps                                \n";           
sum16_out8 <<" module Sum16_out8(S_out,                            \n";           
sum16_out8 <<"                   A0_in,                            \n";           
sum16_out8 <<" 			      A1_in,                               \n";        
sum16_out8 <<" 			      A2_in,                               \n";        
sum16_out8 <<" 			      A3_in,                               \n";        
sum16_out8 <<" 			      A4_in,                               \n";        
sum16_out8 <<" 			      A5_in,                               \n";        
sum16_out8 <<" 			      A6_in,                               \n";        
sum16_out8 <<" 			      A7_in,                               \n";        
sum16_out8 <<" 			      A8_in,                               \n";        
sum16_out8 <<" 			      A9_in,                               \n";        
sum16_out8 <<" 			      A10_in,                              \n";        
sum16_out8 <<" 			      A11_in,                              \n";        
sum16_out8 <<" 			      A12_in,                              \n";        
sum16_out8 <<" 			      A13_in,                              \n";        
sum16_out8 <<" 			      A14_in,                              \n";        
sum16_out8 <<" 			      A15_in,                              \n";
sum16_out8 <<"                  MixRadix_sel_in,				   \n";
sum16_out8 <<"                   BU_mode_sel_in,                   \n";          
sum16_out8 <<"                   rst_n,                            \n";           
sum16_out8 <<"                   clk                               \n";           
sum16_out8 <<"                   ) ;                               \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<" parameter D_WIDTH     = 192 ;                       \n";           
sum16_out8 <<" parameter P_WIDTH     = 64 ;                        \n";           
sum16_out8 <<" parameter D_ZERO      = 192'h0 ;                    \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<" output[D_WIDTH-1:0] S_out ;                         \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A0_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A1_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A2_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A3_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A4_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A5_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A6_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A7_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A8_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A9_in ;                         \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A10_in ;                        \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A11_in ;                        \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A12_in ;                        \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A13_in ;                        \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A14_in ;                        \n";           
sum16_out8 <<" input [P_WIDTH-1:0] A15_in ;                        \n";           
sum16_out8 <<" input [1:0]         MixRadix_sel_in;                \n";           
sum16_out8 <<" input               BU_mode_sel_in;                 \n";          
sum16_out8 <<" input               rst_n ;                         \n";           
sum16_out8 <<" input               clk ;                           \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";           
sum16_out8 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";           
sum16_out8 <<" wire                 c0_wire ;                      \n";           
sum16_out8 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";           
sum16_out8 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";           
sum16_out8 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<"                                                     \n";           
sum16_out8 <<" 	//                                                 \n";        
sum16_out8 <<" 	Sum16_CSAout8 u_Sum16_CSAout8(.SS_out(SS_wire),    \n";        
sum16_out8 <<" 					              .SC_out(SC_wire),    \n";        
sum16_out8 <<"                                   .A0_in(A0_in),    \n";           
sum16_out8 <<" 			                      .A1_in(A1_in),       \n";        
sum16_out8 <<" 			                      .A2_in(A2_in),       \n";        
sum16_out8 <<" 			                      .A3_in(A3_in),       \n";        
sum16_out8 <<" 			                      .A4_in(A4_in),       \n";        
sum16_out8 <<" 			                      .A5_in(A5_in),       \n";        
sum16_out8 <<" 			                      .A6_in(A6_in),       \n";        
sum16_out8 <<" 			                      .A7_in(A7_in),       \n";        
sum16_out8 <<" 			                      .A8_in(A8_in),       \n";        
sum16_out8 <<" 			                      .A9_in(A9_in),       \n";        
sum16_out8 <<" 			                      .A10_in(A10_in),     \n";        
sum16_out8 <<" 			                      .A11_in(A11_in),     \n";        
sum16_out8 <<" 			                      .A12_in(A12_in),     \n";        
sum16_out8 <<" 			                      .A13_in(A13_in),     \n";        
sum16_out8 <<" 			                      .A14_in(A14_in),     \n";        
sum16_out8 <<" 			                      .A15_in(A15_in),     \n";
sum16_out8 <<"                                  .MixRadix_sel_in(MixRadix_sel_in),\n";								  
sum16_out8 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out8 <<"                                   // rst_n,         \n";           
sum16_out8 <<"                                   // clk            \n";           
sum16_out8 <<"                                   ) ;               \n";           
sum16_out8 <<" 	//Pipeline Register                                \n";        
sum16_out8 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),  \n";    
sum16_out8 <<" 					                .SC_out(SC_reg_wire),  \n";    
sum16_out8 <<"                                     .SS_in(SS_wire),    \n";       
sum16_out8 <<" 					                .SC_in(SC_wire),       \n";    
sum16_out8 <<"                                     .rst_n(rst_n),      \n";       
sum16_out8 <<"                                     .clk(clk)           \n";       
sum16_out8 <<"                                      ) ;                \n";       
sum16_out8 <<" 	                                                       \n";    
sum16_out8 <<" 	//                                                     \n";    
sum16_out8 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                        \n";    
sum16_out8 <<"                      .c_out(c0_wire),                   \n";       
sum16_out8 <<"                      .a_in(SS_reg_wire),                \n";       
sum16_out8 <<"                      .b_in(SC_reg_wire),                \n";       
sum16_out8 <<"                      .c_in(1'b0)                        \n";       
sum16_out8 <<" 			         // rst_n,                             \n";    
sum16_out8 <<"                      // clk                             \n";       
sum16_out8 <<"                      ) ;                                \n";       
sum16_out8 <<" 	//			                                           \n";    
sum16_out8 <<" 	CLA192 u1_CLA192(.sum(S_out),                          \n";    
sum16_out8 <<"                      .c_out(),                          \n";       
sum16_out8 <<"                      .a_in(s0_wire),                    \n";       
sum16_out8 <<"                      .b_in(D_ZERO),                     \n";       
sum16_out8 <<"                      .c_in(c0_wire)                     \n";       
sum16_out8 <<" 			         // rst_n,                             \n";    
sum16_out8 <<"                      // clk                             \n";       
sum16_out8 <<"                      ) ;			                       \n";    
sum16_out8 <<" 					                                       \n";    
sum16_out8 <<"                                                         \n";       
sum16_out8 <<" endmodule                                               \n";       
	 
	 sum16_out8.close();
}
void configurable_BFFT::Sum16_out9(std::string string_in){
	 std::ofstream sum16_out9;
     std::string        string_buf = "/Sum16_out9.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out9.open(ss.str());	
sum16_out9 <<" //==================================================\n";        
sum16_out9 <<" //Writer     : Shi Yong Wu                          \n";       
sum16_out9 <<" //                                                  \n";
sum16_out9 <<" //Note       : Sum with CLA for Radix-16 output9    \n";        
sum16_out9 <<" //==================================================\n";        
sum16_out9 <<" `timescale 1 ns/1 ps                                \n";        
sum16_out9 <<" module Sum16_out9(S_out,                            \n";        
sum16_out9 <<"                   A0_in,                            \n";        
sum16_out9 <<" 			      A1_in,                               \n";     
sum16_out9 <<" 			      A2_in,                               \n";     
sum16_out9 <<" 			      A3_in,                               \n";     
sum16_out9 <<" 			      A4_in,                               \n";     
sum16_out9 <<" 			      A5_in,                               \n";     
sum16_out9 <<" 			      A6_in,                               \n";     
sum16_out9 <<" 			      A7_in,                               \n";     
sum16_out9 <<" 			      A8_in,                               \n";     
sum16_out9 <<" 			      A9_in,                               \n";     
sum16_out9 <<" 			      A10_in,                              \n";     
sum16_out9 <<" 			      A11_in,                              \n";     
sum16_out9 <<" 			      A12_in,                              \n";     
sum16_out9 <<" 			      A13_in,                              \n";     
sum16_out9 <<" 			      A14_in,                              \n";     
sum16_out9 <<" 			      A15_in,                              \n";
sum16_out9 <<"                  MixRadix_sel_in,				   \n";
sum16_out9 <<"                   BU_mode_sel_in,                   \n";       
sum16_out9 <<"                   rst_n,                            \n";        
sum16_out9 <<"                   clk                               \n";        
sum16_out9 <<"                   ) ;                               \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<" parameter D_WIDTH     = 192 ;                       \n";        
sum16_out9 <<" parameter P_WIDTH     = 64 ;                        \n";        
sum16_out9 <<" parameter D_ZERO      = 192'h0 ;                    \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<" output[D_WIDTH-1:0] S_out ;                         \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A0_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A1_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A2_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A3_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A4_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A5_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A6_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A7_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A8_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A9_in ;                         \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A10_in ;                        \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A11_in ;                        \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A12_in ;                        \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A13_in ;                        \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A14_in ;                        \n";        
sum16_out9 <<" input [P_WIDTH-1:0] A15_in ;                        \n";        
sum16_out9 <<" input [1:0]         MixRadix_sel_in;                \n";        
sum16_out9 <<" input               BU_mode_sel_in;                 \n";       
sum16_out9 <<" input               rst_n ;                         \n";        
sum16_out9 <<" input               clk ;                           \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";        
sum16_out9 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";        
sum16_out9 <<" wire                 c0_wire ;                      \n";        
sum16_out9 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";        
sum16_out9 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";        
sum16_out9 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<"                                                     \n";        
sum16_out9 <<" 	//                                                 \n";     
sum16_out9 <<" 	Sum16_CSAout9 u_Sum16_CSAout9(.SS_out(SS_wire),    \n";     
sum16_out9 <<" 					              .SC_out(SC_wire),    \n";     
sum16_out9 <<"                                   .A0_in(A0_in),    \n";        
sum16_out9 <<" 			                      .A1_in(A1_in),       \n";     
sum16_out9 <<" 			                      .A2_in(A2_in),       \n";     
sum16_out9 <<" 			                      .A3_in(A3_in),       \n";     
sum16_out9 <<" 			                      .A4_in(A4_in),       \n";     
sum16_out9 <<" 			                      .A5_in(A5_in),       \n";     
sum16_out9 <<" 			                      .A6_in(A6_in),       \n";     
sum16_out9 <<" 			                      .A7_in(A7_in),       \n";     
sum16_out9 <<" 			                      .A8_in(A8_in),       \n";     
sum16_out9 <<" 			                      .A9_in(A9_in),       \n";     
sum16_out9 <<" 			                      .A10_in(A10_in),     \n";     
sum16_out9 <<" 			                      .A11_in(A11_in),     \n";     
sum16_out9 <<" 			                      .A12_in(A12_in),     \n";     
sum16_out9 <<" 			                      .A13_in(A13_in),     \n";     
sum16_out9 <<" 			                      .A14_in(A14_in),     \n";     
sum16_out9 <<" 			                      .A15_in(A15_in),     \n";
sum16_out9 <<"                                  .MixRadix_sel_in(MixRadix_sel_in),\n";								  
sum16_out9 <<" 			                      .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out9 <<"                                   // rst_n,                 \n";
sum16_out9 <<"                                   // clk                    \n";
sum16_out9 <<"                                   ) ;                       \n";
sum16_out9 <<" 	//Pipeline Register                                     \n";
sum16_out9 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),   \n";
sum16_out9 <<" 					                .SC_out(SC_reg_wire),   \n";
sum16_out9 <<"                                     .SS_in(SS_wire),     \n";   
sum16_out9 <<" 					                .SC_in(SC_wire),        \n";
sum16_out9 <<"                                     .rst_n(rst_n),       \n";   
sum16_out9 <<"                                     .clk(clk)            \n";   
sum16_out9 <<"                                      ) ;                 \n";   
sum16_out9 <<" 	                                                        \n";
sum16_out9 <<" 	//                                                      \n";
sum16_out9 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                         \n";
sum16_out9 <<"                      .c_out(c0_wire),                    \n";   
sum16_out9 <<"                      .a_in(SS_reg_wire),                 \n";   
sum16_out9 <<"                      .b_in(SC_reg_wire),                 \n";   
sum16_out9 <<"                      .c_in(1'b0)                         \n";   
sum16_out9 <<" 			         // rst_n,                              \n";
sum16_out9 <<"                      // clk                              \n";   
sum16_out9 <<"                      ) ;                                 \n";   
sum16_out9 <<" 	//			                                            \n";
sum16_out9 <<" 	CLA192 u1_CLA192(.sum(S_out),                           \n";
sum16_out9 <<"                      .c_out(),                           \n";   
sum16_out9 <<"                      .a_in(s0_wire),                     \n";   
sum16_out9 <<"                      .b_in(D_ZERO),                      \n";   
sum16_out9 <<"                      .c_in(c0_wire)                      \n";   
sum16_out9 <<" 			         // rst_n,                              \n";
sum16_out9 <<"                      // clk                              \n";   
sum16_out9 <<"                      ) ;			                        \n";
sum16_out9 <<" 					                                        \n";
sum16_out9 <<"                                                          \n";   
sum16_out9 <<" endmodule                                                \n";   

	 sum16_out9.close();	
}
void configurable_BFFT::Sum16_out10(std::string string_in){
	 std::ofstream sum16_out10;
     std::string        string_buf = "/Sum16_out10.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out10.open(ss.str());	 
sum16_out10 <<" //==================================================\n";          
sum16_out10 <<" //Writer     : Shi Yong Wu                          \n";         
sum16_out10 <<" //                                                  \n";
sum16_out10 <<" //Note       : Sum with CLA for Radix-16 output10   \n";          
sum16_out10 <<" //==================================================\n";          
sum16_out10 <<" `timescale 1 ns/1 ps                                \n";          
sum16_out10 <<" module Sum16_out10(S_out,                           \n";          
sum16_out10 <<"                    A0_in,                           \n";          
sum16_out10 <<" 			        A1_in,                          \n";           
sum16_out10 <<" 			        A2_in,                          \n";           
sum16_out10 <<" 			        A3_in,                          \n";           
sum16_out10 <<" 			        A4_in,                          \n";           
sum16_out10 <<" 			        A5_in,                          \n";           
sum16_out10 <<" 			        A6_in,                          \n";           
sum16_out10 <<" 			        A7_in,                          \n";           
sum16_out10 <<" 			        A8_in,                          \n";           
sum16_out10 <<" 			        A9_in,                          \n";           
sum16_out10 <<" 			        A10_in,                         \n";           
sum16_out10 <<" 			        A11_in,                         \n";           
sum16_out10 <<" 			        A12_in,                         \n";           
sum16_out10 <<" 			        A13_in,                         \n";           
sum16_out10 <<" 			        A14_in,                         \n";           
sum16_out10 <<" 			        A15_in,                         \n";
sum16_out10 <<"                    MixRadix_sel_in,					\n";
sum16_out10 <<"                    BU_mode_sel_in,                  \n";         
sum16_out10 <<"                    rst_n,                           \n";          
sum16_out10 <<"                    clk                              \n";          
sum16_out10 <<"                    );                               \n";         
sum16_out10 <<"                                                     \n";          
sum16_out10 <<" parameter D_WIDTH     = 192 ;                       \n";          
sum16_out10 <<" parameter P_WIDTH     = 64 ;                        \n";          
sum16_out10 <<" parameter D_ZERO      = 192'h0 ;                    \n";          
sum16_out10 <<"                                                     \n";          
sum16_out10 <<"                                                     \n";          
sum16_out10 <<" output[D_WIDTH-1:0] S_out ;                         \n";          
sum16_out10 <<"                                                     \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A0_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A1_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A2_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A3_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A4_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A5_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A6_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A7_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A8_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A9_in ;                         \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A10_in ;                        \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A11_in ;                        \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A12_in ;                        \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A13_in ;                        \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A14_in ;                        \n";          
sum16_out10 <<" input [P_WIDTH-1:0] A15_in ;                        \n";          
sum16_out10 <<" input [1:0]         MixRadix_sel_in ;               \n";                    
sum16_out10 <<" input               BU_mode_sel_in ;                \n";                   
sum16_out10 <<" input               rst_n ;                         \n";          
sum16_out10 <<" input               clk ;                           \n";          
sum16_out10 <<"                                                     \n";          
sum16_out10 <<"                                                     \n";          
sum16_out10 <<" wire  [D_WIDTH-1:0]  SS_wire ;                      \n";          
sum16_out10 <<" wire  [D_WIDTH-1:0]  SC_wire ;                      \n";          
sum16_out10 <<" wire                 c0_wire ;                      \n";          
sum16_out10 <<" wire  [D_WIDTH-1:0]  s0_wire ;                      \n";          
sum16_out10 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                  \n";          
sum16_out10 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                  \n";          
sum16_out10 <<"                                                     \n";          
sum16_out10 <<"                                                     \n";          
sum16_out10 <<" 	//                                              \n";           
sum16_out10 <<" 	Sum16_CSAout10 u_Sum16_CSAout10(.SS_out(SS_wire),\n";          
sum16_out10 <<" 					                .SC_out(SC_wire),\n";          
sum16_out10 <<"                                     .A0_in(A0_in),   \n";         
sum16_out10 <<" 			                        .A1_in(A1_in),   \n";          
sum16_out10 <<" 			                        .A2_in(A2_in),   \n";          
sum16_out10 <<" 			                        .A3_in(A3_in),   \n";          
sum16_out10 <<" 			                        .A4_in(A4_in),   \n";          
sum16_out10 <<" 			                        .A5_in(A5_in),   \n";          
sum16_out10 <<" 			                        .A6_in(A6_in),   \n";          
sum16_out10 <<" 			                        .A7_in(A7_in),   \n";          
sum16_out10 <<" 			                        .A8_in(A8_in),   \n";          
sum16_out10 <<" 			                        .A9_in(A9_in),   \n";          
sum16_out10 <<" 			                        .A10_in(A10_in), \n";          
sum16_out10 <<" 			                        .A11_in(A11_in), \n";          
sum16_out10 <<" 			                        .A12_in(A12_in), \n";          
sum16_out10 <<" 			                        .A13_in(A13_in), \n";          
sum16_out10 <<" 			                        .A14_in(A14_in), \n";          
sum16_out10 <<" 			                        .A15_in(A15_in), \n";           
sum16_out10 <<" 			                        .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out10 <<" 			                        .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out10 <<"                                     // rst_n,        \n";         
sum16_out10 <<"                                     // clk           \n";         
sum16_out10 <<"                                     ) ;              \n";         
sum16_out10 <<" 	//Pipeline Register                              \n";          
sum16_out10 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire), \n";     
sum16_out10 <<" 					                .SC_out(SC_reg_wire), \n";     
sum16_out10 <<"                                     .SS_in(SS_wire),      \n";    
sum16_out10 <<" 					                .SC_in(SC_wire),      \n";     
sum16_out10 <<"                                     .rst_n(rst_n),        \n";    
sum16_out10 <<"                                     .clk(clk)             \n";    
sum16_out10 <<"                                      ) ;                  \n";    
sum16_out10 <<" 	                                                      \n";     
sum16_out10 <<" 	//                                                    \n";     
sum16_out10 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                       \n";     
sum16_out10 <<"                      .c_out(c0_wire),                     \n";    
sum16_out10 <<"                      .a_in(SS_reg_wire),                  \n";    
sum16_out10 <<"                      .b_in(SC_reg_wire),                  \n";    
sum16_out10 <<"                      .c_in(1'b0)                          \n";    
sum16_out10 <<" 			         // rst_n,                            \n";     
sum16_out10 <<"                      // clk                               \n";    
sum16_out10 <<"                      ) ;                                  \n";    
sum16_out10 <<" 	//			                                          \n";     
sum16_out10 <<" 	CLA192 u1_CLA192(.sum(S_out),                         \n";     
sum16_out10 <<"                      .c_out(),                            \n";    
sum16_out10 <<"                      .a_in(s0_wire),                      \n";    
sum16_out10 <<"                      .b_in(D_ZERO),                       \n";    
sum16_out10 <<"                      .c_in(c0_wire)                       \n";    
sum16_out10 <<" 			         // rst_n,                            \n";     
sum16_out10 <<"                      // clk                               \n";    
sum16_out10 <<"                      ) ;			                      \n";     
sum16_out10 <<" 					                                      \n";     
sum16_out10 <<"                                                           \n";    
sum16_out10 <<" endmodule                                                 \n";    
	 
	 sum16_out10.close();	
}
void configurable_BFFT::Sum16_out11(std::string string_in){
	 std::ofstream sum16_out11;
     std::string        string_buf = "/Sum16_out11.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out11.open(ss.str());
sum16_out11 <<" //================================================== \n";         
sum16_out11 <<" //Writer     : Shi Yong Wu                           \n";        
sum16_out11 <<" //                                                   \n";
sum16_out11 <<" //Note       : Sum with CLA for Radix-16 output11    \n";         
sum16_out11 <<" //================================================== \n";         
sum16_out11 <<" `timescale 1 ns/1 ps                                 \n";         
sum16_out11 <<" module Sum16_out11(S_out,                            \n";         
sum16_out11 <<"                    A0_in,                            \n";         
sum16_out11 <<" 			        A1_in,                           \n";          
sum16_out11 <<" 			        A2_in,                           \n";          
sum16_out11 <<" 			        A3_in,                           \n";          
sum16_out11 <<" 			        A4_in,                           \n";          
sum16_out11 <<" 			        A5_in,                           \n";          
sum16_out11 <<" 			        A6_in,                           \n";          
sum16_out11 <<" 			        A7_in,                           \n";          
sum16_out11 <<" 			        A8_in,                           \n";          
sum16_out11 <<" 			        A9_in,                           \n";          
sum16_out11 <<" 			        A10_in,                          \n";          
sum16_out11 <<" 			        A11_in,                          \n";          
sum16_out11 <<" 			        A12_in,                          \n";          
sum16_out11 <<" 			        A13_in,                          \n";          
sum16_out11 <<" 			        A14_in,                          \n";          
sum16_out11 <<" 			        A15_in,                          \n";          
sum16_out11 <<"                    MixRadix_sel_in,                  \n";         
sum16_out11 <<"                    BU_mode_sel_in,                   \n";        
sum16_out11 <<"                    rst_n,                            \n";         
sum16_out11 <<"                    clk                               \n";         
sum16_out11 <<"                    ) ;                               \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<" parameter D_WIDTH     = 192 ;                        \n";         
sum16_out11 <<" parameter P_WIDTH     = 64 ;                         \n";         
sum16_out11 <<" parameter D_ZERO      = 192'h0 ;                     \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<" output[D_WIDTH-1:0] S_out ;                          \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A0_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A1_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A2_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A3_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A4_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A5_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A6_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A7_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A8_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A9_in ;                          \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A10_in ;                         \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A11_in ;                         \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A12_in ;                         \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A13_in ;                         \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A14_in ;                         \n";         
sum16_out11 <<" input [P_WIDTH-1:0] A15_in ;                         \n";         
sum16_out11 <<" input [1:0]         MixRadix_sel_in ;                \n";         
sum16_out11 <<" input               BU_mode_sel_in ;                 \n";        
sum16_out11 <<" input               rst_n ;                          \n";         
sum16_out11 <<" input               clk ;                            \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<" wire  [D_WIDTH-1:0]  SS_wire ;                       \n";         
sum16_out11 <<" wire  [D_WIDTH-1:0]  SC_wire ;                       \n";         
sum16_out11 <<" wire                 c0_wire ;                       \n";         
sum16_out11 <<" wire  [D_WIDTH-1:0]  s0_wire ;                       \n";         
sum16_out11 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                   \n";         
sum16_out11 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                   \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<"                                                      \n";         
sum16_out11 <<" 	//                                               \n";          
sum16_out11 <<" 	Sum16_CSAout11 u_Sum16_CSAout11(.SS_out(SS_wire),\n";          
sum16_out11 <<" 					                .SC_out(SC_wire),\n";          
sum16_out11 <<"                                     .A0_in(A0_in),   \n";         
sum16_out11 <<" 			                        .A1_in(A1_in),   \n";          
sum16_out11 <<" 			                        .A2_in(A2_in),   \n";          
sum16_out11 <<" 			                        .A3_in(A3_in),   \n";          
sum16_out11 <<" 			                        .A4_in(A4_in),   \n";          
sum16_out11 <<" 			                        .A5_in(A5_in),   \n";          
sum16_out11 <<" 			                        .A6_in(A6_in),   \n";          
sum16_out11 <<" 			                        .A7_in(A7_in),   \n";          
sum16_out11 <<" 			                        .A8_in(A8_in),   \n";          
sum16_out11 <<" 			                        .A9_in(A9_in),   \n";          
sum16_out11 <<" 			                        .A10_in(A10_in), \n";          
sum16_out11 <<" 			                        .A11_in(A11_in), \n";          
sum16_out11 <<" 			                        .A12_in(A12_in), \n";          
sum16_out11 <<" 			                        .A13_in(A13_in), \n";          
sum16_out11 <<" 			                        .A14_in(A14_in), \n";          
sum16_out11 <<" 			                        .A15_in(A15_in), \n";           
sum16_out11 <<" 			                        .MixRadix_sel_in(MixRadix_sel_in),\n";            
sum16_out11 <<" 			                        .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out11 <<"                                     // rst_n,        \n";         
sum16_out11 <<"                                     // clk           \n";         
sum16_out11 <<"                                     ) ;              \n";         
sum16_out11 <<" 	//Pipeline Register                              \n";          
sum16_out11 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),\n";      
sum16_out11 <<" 					                .SC_out(SC_reg_wire),\n";      
sum16_out11 <<"                                     .SS_in(SS_wire),     \n";     
sum16_out11 <<" 					                .SC_in(SC_wire),     \n";      
sum16_out11 <<"                                     .rst_n(rst_n),       \n";     
sum16_out11 <<"                                     .clk(clk)            \n";     
sum16_out11 <<"                                      ) ;                 \n";     
sum16_out11 <<" 	                                                     \n";      
sum16_out11 <<" 	//                                                   \n";      
sum16_out11 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                      \n";      
sum16_out11 <<"                      .c_out(c0_wire),                    \n";     
sum16_out11 <<"                      .a_in(SS_reg_wire),                 \n";     
sum16_out11 <<"                      .b_in(SC_reg_wire),                 \n";     
sum16_out11 <<"                      .c_in(1'b0)                         \n";     
sum16_out11 <<" 			         // rst_n,                           \n";      
sum16_out11 <<"                      // clk                              \n";     
sum16_out11 <<"                      ) ;                                 \n";     
sum16_out11 <<" 	//			                                         \n";      
sum16_out11 <<" 	CLA192 u1_CLA192(.sum(S_out),                        \n";      
sum16_out11 <<"                      .c_out(),                           \n";     
sum16_out11 <<"                      .a_in(s0_wire),                     \n";     
sum16_out11 <<"                      .b_in(D_ZERO),                      \n";     
sum16_out11 <<"                      .c_in(c0_wire)                      \n";     
sum16_out11 <<" 			         // rst_n,                           \n";      
sum16_out11 <<"                      // clk                              \n";     
sum16_out11 <<"                      ) ;			                     \n";      
sum16_out11 <<" 					                                     \n";      
sum16_out11 <<"                                                          \n";     
sum16_out11 <<" endmodule                                                \n";     
	 
	 sum16_out11.close();	
}
void configurable_BFFT::Sum16_out12(std::string string_in){
	 std::ofstream sum16_out12;
     std::string        string_buf = "/Sum16_out12.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
     sum16_out12.open(ss.str());
sum16_out12 <<" //================================================== \n";          
sum16_out12 <<" //Writer     : Shi Yong Wu                           \n";         
sum16_out12 <<" //                                                   \n";
sum16_out12 <<" //Note       : Sum with CLA for Radix-16 output12    \n";          
sum16_out12 <<" //             8 3-2 counter                         \n";          
sum16_out12 <<" //================================================== \n";          
sum16_out12 <<" `timescale 1 ns/1 ps                                 \n";          
sum16_out12 <<" module Sum16_out12(S_out,                            \n";          
sum16_out12 <<"                    A0_in,                            \n";          
sum16_out12 <<" 			        A1_in,                           \n";           
sum16_out12 <<" 			        A2_in,                           \n";           
sum16_out12 <<" 			        A3_in,                           \n";           
sum16_out12 <<" 			        A4_in,                           \n";           
sum16_out12 <<" 			        A5_in,                           \n";           
sum16_out12 <<" 			        A6_in,                           \n";           
sum16_out12 <<" 			        A7_in,                           \n";           
sum16_out12 <<" 			        A8_in,                           \n";           
sum16_out12 <<" 			        A9_in,                           \n";           
sum16_out12 <<" 			        A10_in,                          \n";           
sum16_out12 <<" 			        A11_in,                          \n";           
sum16_out12 <<" 			        A12_in,                          \n";           
sum16_out12 <<" 			        A13_in,                          \n";           
sum16_out12 <<" 			        A14_in,                          \n";           
sum16_out12 <<" 			        A15_in,                          \n";           
sum16_out12 <<"                    MixRadix_sel_in,                  \n";          
sum16_out12 <<"                    BU_mode_sel_in,                   \n";         
sum16_out12 <<"                    rst_n,                            \n";          
sum16_out12 <<"                    clk                               \n";          
sum16_out12 <<"                    ) ;                               \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<" parameter D_WIDTH     = 192 ;                        \n";          
sum16_out12 <<" parameter P_WIDTH     = 64 ;                         \n";          
sum16_out12 <<" parameter D_ZERO      = 192'h0 ;                     \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<" output[D_WIDTH-1:0] S_out ;                          \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A0_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A1_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A2_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A3_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A4_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A5_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A6_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A7_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A8_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A9_in ;                          \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A10_in ;                         \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A11_in ;                         \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A12_in ;                         \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A13_in ;                         \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A14_in ;                         \n";          
sum16_out12 <<" input [P_WIDTH-1:0] A15_in ;                         \n";          
sum16_out12 <<" input [1:0]         MixRadix_sel_in ;                \n";          
sum16_out12 <<" input               BU_mode_sel_in ;                 \n";         
sum16_out12 <<" input               rst_n ;                          \n";          
sum16_out12 <<" input               clk ;                            \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<" wire  [D_WIDTH-1:0]  SS_wire ;                       \n";          
sum16_out12 <<" wire  [D_WIDTH-1:0]  SC_wire ;                       \n";          
sum16_out12 <<" wire                 c0_wire ;                       \n";          
sum16_out12 <<" wire  [D_WIDTH-1:0]  s0_wire ;                       \n";          
sum16_out12 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                   \n";          
sum16_out12 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                   \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<"                                                      \n";          
sum16_out12 <<" 	//                                               \n";            
sum16_out12 <<" 	Sum16_CSAout12 u_Sum16_CSAout12(.SS_out(SS_wire),\n";            
sum16_out12 <<" 					                .SC_out(SC_wire),\n";            
sum16_out12 <<"                                     .A0_in(A0_in),   \n";          
sum16_out12 <<" 			                        .A1_in(A1_in),   \n";            
sum16_out12 <<" 			                        .A2_in(A2_in),   \n";            
sum16_out12 <<" 			                        .A3_in(A3_in),   \n";            
sum16_out12 <<" 			                        .A4_in(A4_in),   \n";            
sum16_out12 <<" 			                        .A5_in(A5_in),   \n";            
sum16_out12 <<" 			                        .A6_in(A6_in),   \n";            
sum16_out12 <<" 			                        .A7_in(A7_in),   \n";            
sum16_out12 <<" 			                        .A8_in(A8_in),   \n";            
sum16_out12 <<" 			                        .A9_in(A9_in),   \n";            
sum16_out12 <<" 			                        .A10_in(A10_in), \n";            
sum16_out12 <<" 			                        .A11_in(A11_in), \n";            
sum16_out12 <<" 			                        .A12_in(A12_in), \n";            
sum16_out12 <<" 			                        .A13_in(A13_in), \n";            
sum16_out12 <<" 			                        .A14_in(A14_in), \n";            
sum16_out12 <<" 			                        .A15_in(A15_in), \n";             
sum16_out12 <<" 			                        .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out12 <<" 			                        .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out12 <<"                                     // rst_n,        \n";          
sum16_out12 <<"                                     // clk           \n";          
sum16_out12 <<"                                     ) ;              \n";          
sum16_out12 <<" 	//Pipeline Register                              \n";            
sum16_out12 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),\n";        
sum16_out12 <<" 					                .SC_out(SC_reg_wire),\n";        
sum16_out12 <<"                                     .SS_in(SS_wire),     \n";      
sum16_out12 <<" 					                .SC_in(SC_wire),     \n";        
sum16_out12 <<"                                     .rst_n(rst_n),       \n";      
sum16_out12 <<"                                     .clk(clk)            \n";      
sum16_out12 <<"                                      ) ;                 \n";      
sum16_out12 <<" 	                                                     \n";        
sum16_out12 <<" 	//                                                   \n";        
sum16_out12 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                      \n";        
sum16_out12 <<"                      .c_out(c0_wire),                    \n";      
sum16_out12 <<"                      .a_in(SS_reg_wire),                 \n";      
sum16_out12 <<"                      .b_in(SC_reg_wire),                 \n";      
sum16_out12 <<"                      .c_in(1'b0)                         \n";      
sum16_out12 <<" 			         // rst_n,                           \n";        
sum16_out12 <<"                      // clk                              \n";      
sum16_out12 <<"                      ) ;                                 \n";      
sum16_out12 <<" 	//			                                         \n";        
sum16_out12 <<" 	CLA192 u1_CLA192(.sum(S_out),                        \n";        
sum16_out12 <<"                      .c_out(),                           \n";      
sum16_out12 <<"                      .a_in(s0_wire),                     \n";      
sum16_out12 <<"                      .b_in(D_ZERO),                      \n";      
sum16_out12 <<"                      .c_in(c0_wire)                      \n";      
sum16_out12 <<" 			         // rst_n,                           \n";        
sum16_out12 <<"                      // clk                              \n";      
sum16_out12 <<"                      ) ;			                     \n";        
sum16_out12 <<" 					                                     \n";        
sum16_out12 <<"                                                          \n";      
sum16_out12 <<" endmodule                                                \n";      
	 
	 sum16_out12.close();
}
void configurable_BFFT::Sum16_out13(std::string string_in){
	 std::ofstream sum16_out13;
     std::string        string_buf = "/Sum16_out13.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out13.open(ss.str());
sum16_out13 <<" //================================================== \n";          
sum16_out13 <<" //Writer     : Shi Yong Wu                           \n";         
sum16_out13 <<" //                                                   \n";
sum16_out13 <<" //Note       : Sum with CLA for Radix-16 output13    \n";          
sum16_out13 <<" //================================================== \n";          
sum16_out13 <<" `timescale 1 ns/1 ps                                 \n";          
sum16_out13 <<" module Sum16_out13(S_out,                            \n";          
sum16_out13 <<"                    A0_in,                            \n";          
sum16_out13 <<" 			        A1_in,                           \n";           
sum16_out13 <<" 			        A2_in,                           \n";           
sum16_out13 <<" 			        A3_in,                           \n";           
sum16_out13 <<" 			        A4_in,                           \n";           
sum16_out13 <<" 			        A5_in,                           \n";           
sum16_out13 <<" 			        A6_in,                           \n";           
sum16_out13 <<" 			        A7_in,                           \n";           
sum16_out13 <<" 			        A8_in,                           \n";           
sum16_out13 <<" 			        A9_in,                           \n";           
sum16_out13 <<" 			        A10_in,                          \n";           
sum16_out13 <<" 			        A11_in,                          \n";           
sum16_out13 <<" 			        A12_in,                          \n";           
sum16_out13 <<" 			        A13_in,                          \n";           
sum16_out13 <<" 			        A14_in,                          \n";           
sum16_out13 <<" 			        A15_in,                          \n";           
sum16_out13 <<"                    MixRadix_sel_in,                  \n";          
sum16_out13 <<"                    BU_mode_sel_in,                   \n";         
sum16_out13 <<"                    rst_n,                            \n";          
sum16_out13 <<"                    clk                               \n";          
sum16_out13 <<"                    ) ;                               \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<" parameter D_WIDTH     = 192 ;                        \n";          
sum16_out13 <<" parameter P_WIDTH     = 64 ;                         \n";          
sum16_out13 <<" parameter D_ZERO      = 192'h0 ;                     \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<" output[D_WIDTH-1:0] S_out ;                          \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A0_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A1_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A2_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A3_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A4_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A5_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A6_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A7_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A8_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A9_in ;                          \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A10_in ;                         \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A11_in ;                         \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A12_in ;                         \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A13_in ;                         \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A14_in ;                         \n";          
sum16_out13 <<" input [P_WIDTH-1:0] A15_in ;                         \n";          
sum16_out13 <<" input [1:0]         MixRadix_sel_in ;                \n";          
sum16_out13 <<" input               BU_mode_sel_in ;                 \n";         
sum16_out13 <<" input               rst_n ;                          \n";          
sum16_out13 <<" input               clk ;                            \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<" wire  [D_WIDTH-1:0]  SS_wire ;                       \n";          
sum16_out13 <<" wire  [D_WIDTH-1:0]  SC_wire ;                       \n";          
sum16_out13 <<" wire                 c0_wire ;                       \n";          
sum16_out13 <<" wire  [D_WIDTH-1:0]  s0_wire ;                       \n";          
sum16_out13 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;                   \n";          
sum16_out13 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;                   \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<"                                                      \n";          
sum16_out13 <<" 	//                                               \n";           
sum16_out13 <<" 	Sum16_CSAout13 u_Sum16_CSAout13(.SS_out(SS_wire),\n";           
sum16_out13 <<" 					                .SC_out(SC_wire),\n";           
sum16_out13 <<"                                     .A0_in(A0_in),   \n";          
sum16_out13 <<" 			                        .A1_in(A1_in),   \n";           
sum16_out13 <<" 			                        .A2_in(A2_in),   \n";           
sum16_out13 <<" 			                        .A3_in(A3_in),   \n";           
sum16_out13 <<" 			                        .A4_in(A4_in),   \n";           
sum16_out13 <<" 			                        .A5_in(A5_in),   \n";           
sum16_out13 <<" 			                        .A6_in(A6_in),   \n";           
sum16_out13 <<" 			                        .A7_in(A7_in),   \n";           
sum16_out13 <<" 			                        .A8_in(A8_in),   \n";           
sum16_out13 <<" 			                        .A9_in(A9_in),   \n";           
sum16_out13 <<" 			                        .A10_in(A10_in), \n";           
sum16_out13 <<" 			                        .A11_in(A11_in), \n";           
sum16_out13 <<" 			                        .A12_in(A12_in), \n";           
sum16_out13 <<" 			                        .A13_in(A13_in), \n";           
sum16_out13 <<" 			                        .A14_in(A14_in), \n";           
sum16_out13 <<" 			                        .A15_in(A15_in), \n";           
sum16_out13 <<" 			                        .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out13 <<" 			                        .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out13 <<"                                     // rst_n,                  \n";
sum16_out13 <<"                                     // clk                     \n";
sum16_out13 <<"                                     ) ;                        \n";
sum16_out13 <<" 	//Pipeline Register                                        \n"; 
sum16_out13 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),      \n";
sum16_out13 <<" 					                .SC_out(SC_reg_wire),      \n"; 
sum16_out13 <<"                                     .SS_in(SS_wire),           \n";
sum16_out13 <<" 					                .SC_in(SC_wire),           \n"; 
sum16_out13 <<"                                     .rst_n(rst_n),             \n";
sum16_out13 <<"                                     .clk(clk)                  \n";
sum16_out13 <<"                                      ) ;                       \n";
sum16_out13 <<" 	                                                           \n"; 
sum16_out13 <<" 	//                                                         \n"; 
sum16_out13 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                            \n"; 
sum16_out13 <<"                      .c_out(c0_wire),                          \n";
sum16_out13 <<"                      .a_in(SS_reg_wire),                       \n";
sum16_out13 <<"                      .b_in(SC_reg_wire),                       \n";
sum16_out13 <<"                      .c_in(1'b0)                               \n";
sum16_out13 <<" 			         // rst_n,                                 \n"; 
sum16_out13 <<"                      // clk                                    \n";
sum16_out13 <<"                      ) ;                                       \n";
sum16_out13 <<" 	//			                                               \n"; 
sum16_out13 <<" 	CLA192 u1_CLA192(.sum(S_out),                              \n"; 
sum16_out13 <<"                      .c_out(),                                 \n";
sum16_out13 <<"                      .a_in(s0_wire),                           \n";
sum16_out13 <<"                      .b_in(D_ZERO),                            \n";
sum16_out13 <<"                      .c_in(c0_wire)                            \n";
sum16_out13 <<" 			         // rst_n,                                 \n"; 
sum16_out13 <<"                      // clk                                    \n";
sum16_out13 <<"                      ) ;			                           \n"; 
sum16_out13 <<" 					                                           \n"; 
sum16_out13 <<"                                                                \n";
sum16_out13 <<" endmodule                                                      \n";
	 
	 sum16_out13.close();		
}
void configurable_BFFT::Sum16_out14(std::string string_in){
	 std::ofstream sum16_out14;
     std::string        string_buf = "/Sum16_out14.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out14.open(ss.str());
sum16_out14 <<" //==================================================\n";         
sum16_out14 <<" //Writer     : Shi Yong Wu                          \n";        
sum16_out14 <<" //                                                  \n";
sum16_out14 <<" //Note       : Sum with CLA for Radix-16 output14   \n";         
sum16_out14 <<" //==================================================\n";         
sum16_out14 <<" `timescale 1 ns/1 ps          \n";                               
sum16_out14 <<" module Sum16_out14(S_out,                   \n";                 
sum16_out14 <<"                    A0_in,                   \n";                 
sum16_out14 <<" 			        A1_in,                  \n";                  
sum16_out14 <<" 			        A2_in,                  \n";                  
sum16_out14 <<" 			        A3_in,                  \n";                  
sum16_out14 <<" 			        A4_in,                  \n";                  
sum16_out14 <<" 			        A5_in,                  \n";                  
sum16_out14 <<" 			        A6_in,                  \n";                  
sum16_out14 <<" 			        A7_in,                  \n";                  
sum16_out14 <<" 			        A8_in,                  \n";                  
sum16_out14 <<" 			        A9_in,                  \n";                  
sum16_out14 <<" 			        A10_in,                 \n";                  
sum16_out14 <<" 			        A11_in,                 \n";                  
sum16_out14 <<" 			        A12_in,                 \n";                  
sum16_out14 <<" 			        A13_in,                 \n";                  
sum16_out14 <<" 			        A14_in,                 \n";                  
sum16_out14 <<" 			        A15_in,                 \n";
sum16_out14 <<"                    MixRadix_sel_in,			\n";		
sum16_out14 <<"                    BU_mode_sel_in,          \n";                
sum16_out14 <<"                    rst_n,                   \n";                 
sum16_out14 <<"                    clk                      \n";                 
sum16_out14 <<"                    ) ;                      \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<" parameter D_WIDTH     = 192 ;               \n";                 
sum16_out14 <<" parameter P_WIDTH     = 64 ;                \n";                 
sum16_out14 <<" parameter D_ZERO      = 192'h0 ;            \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<" output[D_WIDTH-1:0] S_out ;                 \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A0_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A1_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A2_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A3_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A4_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A5_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A6_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A7_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A8_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A9_in ;                 \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A10_in ;                \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A11_in ;                \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A12_in ;                \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A13_in ;                \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A14_in ;                \n";                 
sum16_out14 <<" input [P_WIDTH-1:0] A15_in ;                \n";                 
sum16_out14 <<" input [1:0]         MixRadix_sel_in;        \n";                 
sum16_out14 <<" input               BU_mode_sel_in;         \n";                
sum16_out14 <<" input               rst_n ;                 \n";                 
sum16_out14 <<" input               clk ;                   \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<" wire  [D_WIDTH-1:0]  SS_wire ;              \n";                 
sum16_out14 <<" wire  [D_WIDTH-1:0]  SC_wire ;              \n";                 
sum16_out14 <<" wire                 c0_wire ;              \n";                 
sum16_out14 <<" wire  [D_WIDTH-1:0]  s0_wire ;              \n";                 
sum16_out14 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;          \n";                 
sum16_out14 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;          \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<"                                             \n";                 
sum16_out14 <<" 	//                                      \n";                  
sum16_out14 <<" 	Sum16_CSAout14 u_Sum16_CSAout14(.SS_out(SS_wire),\n";         
sum16_out14 <<" 					                .SC_out(SC_wire),\n";         
sum16_out14 <<"                                     .A0_in(A0_in),   \n";        
sum16_out14 <<" 			                        .A1_in(A1_in),   \n";         
sum16_out14 <<" 			                        .A2_in(A2_in),   \n";         
sum16_out14 <<" 			                        .A3_in(A3_in),   \n";         
sum16_out14 <<" 			                        .A4_in(A4_in),   \n";         
sum16_out14 <<" 			                        .A5_in(A5_in),   \n";         
sum16_out14 <<" 			                        .A6_in(A6_in),   \n";         
sum16_out14 <<" 			                        .A7_in(A7_in),   \n";         
sum16_out14 <<" 			                        .A8_in(A8_in),   \n";         
sum16_out14 <<" 			                        .A9_in(A9_in),   \n";         
sum16_out14 <<" 			                        .A10_in(A10_in), \n";         
sum16_out14 <<" 			                        .A11_in(A11_in), \n";         
sum16_out14 <<" 			                        .A12_in(A12_in), \n";         
sum16_out14 <<" 			                        .A13_in(A13_in), \n";         
sum16_out14 <<" 			                        .A14_in(A14_in), \n";         
sum16_out14 <<" 			                        .A15_in(A15_in), \n";         
sum16_out14 <<" 			                        .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out14 <<" 			                        .BU_mode_sel_in(BU_mode_sel_in)   \n";
sum16_out14 <<"                                     // rst_n, \n";               
sum16_out14 <<"                                     // clk    \n";               
sum16_out14 <<"                                     ) ;       \n";               
sum16_out14 <<" 	//Pipeline Register                       \n";                
sum16_out14 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),     \n";
sum16_out14 <<" 					                .SC_out(SC_reg_wire),     \n";
sum16_out14 <<"                                     .SS_in(SS_wire),          \n";
sum16_out14 <<" 					                .SC_in(SC_wire),          \n";
sum16_out14 <<"                                     .rst_n(rst_n),            \n";
sum16_out14 <<"                                     .clk(clk)                 \n";
sum16_out14 <<"                                      ) ;                      \n";
sum16_out14 <<" 	                                                          \n";
sum16_out14 <<" 	//                                                        \n";
sum16_out14 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                           \n";
sum16_out14 <<"                      .c_out(c0_wire),                         \n";
sum16_out14 <<"                      .a_in(SS_reg_wire),                      \n";
sum16_out14 <<"                      .b_in(SC_reg_wire),                      \n";
sum16_out14 <<"                      .c_in(1'b0)                              \n";
sum16_out14 <<" 			         // rst_n,                                \n";
sum16_out14 <<"                      // clk                                   \n";
sum16_out14 <<"                      ) ;                                      \n";
sum16_out14 <<" 	//			                                              \n";
sum16_out14 <<" 	CLA192 u1_CLA192(.sum(S_out),                             \n";
sum16_out14 <<"                      .c_out(),                                \n";
sum16_out14 <<"                      .a_in(s0_wire),                          \n";
sum16_out14 <<"                      .b_in(D_ZERO),                           \n";
sum16_out14 <<"                      .c_in(c0_wire)                           \n";
sum16_out14 <<" 			         // rst_n,                                \n";
sum16_out14 <<"                      // clk                                   \n";
sum16_out14 <<"                      ) ;			                          \n";
sum16_out14 <<" 					                                          \n";
sum16_out14 <<"                                                               \n";
sum16_out14 <<" endmodule                                                     \n";
	 
	 sum16_out14.close();	
}
void configurable_BFFT::Sum16_out15(std::string string_in){
	 std::ofstream sum16_out15;
     std::string        string_buf = "/Sum16_out15.v";
     std::stringstream  ss;
     ss << string_in << string_buf;
	 sum16_out15.open(ss.str());
sum16_out15 <<" //==================================================\n";          
sum16_out15 <<" //Writer     : Shi Yong Wu                          \n";         
sum16_out15 <<" //                                                  \n";
sum16_out15 <<" //Note       : Sum with CLA for Radix-16 output15   \n";          
sum16_out15 <<" //==================================================\n";          
sum16_out15 <<" `timescale 1 ns/1 ps   \n";                                       
sum16_out15 <<" module Sum16_out15(S_out,   \n";                                  
sum16_out15 <<"                    A0_in,   \n";                                  
sum16_out15 <<" 			       A1_in,   \n";                                   
sum16_out15 <<" 			       A2_in,   \n";                                   
sum16_out15 <<" 			       A3_in,   \n";                                   
sum16_out15 <<" 			       A4_in,   \n";                                   
sum16_out15 <<" 			       A5_in,   \n";                                   
sum16_out15 <<" 			       A6_in,   \n";                                   
sum16_out15 <<" 			       A7_in,   \n";                                   
sum16_out15 <<" 			       A8_in,   \n";                                   
sum16_out15 <<" 			       A9_in,   \n";                                   
sum16_out15 <<" 			       A10_in,  \n";                                   
sum16_out15 <<" 			       A11_in,  \n";                                   
sum16_out15 <<" 			       A12_in,  \n";                                   
sum16_out15 <<" 			       A13_in,  \n";                                   
sum16_out15 <<" 			       A14_in,  \n";                                   
sum16_out15 <<" 			       A15_in,  \n";
sum16_out15 <<"                   MixRadix_sel_in,\n";				   
sum16_out15 <<" 			       BU_mode_sel_in,\n";                            
sum16_out15 <<"                    rst_n,          \n";                        
sum16_out15 <<"                    clk             \n";                    
sum16_out15 <<"                    ) ;             \n";                           
sum16_out15 <<"                    \n";                          
sum16_out15 <<" parameter D_WIDTH     = 192 ;      \n";                           
sum16_out15 <<" parameter P_WIDTH     = 64 ;       \n";                           
sum16_out15 <<" parameter D_ZERO      = 192'h0 ;   \n";                           
sum16_out15 <<"                                    \n";                           
sum16_out15 <<"                                    \n";                           
sum16_out15 <<" output[D_WIDTH-1:0] S_out ;        \n";                           
sum16_out15 <<"                                    \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A0_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A1_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A2_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A3_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A4_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A5_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A6_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A7_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A8_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A9_in ;        \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A10_in ;       \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A11_in ;       \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A12_in ;       \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A13_in ;       \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A14_in ;       \n";                           
sum16_out15 <<" input [P_WIDTH-1:0] A15_in ;       \n";                           
sum16_out15 <<" input [1:0]         MixRadix_sel_in;  \n";                        
sum16_out15 <<" input               BU_mode_sel_in;   \n";                       
sum16_out15 <<" input               rst_n ;           \n";                        
sum16_out15 <<" input               clk ;             \n";                        
sum16_out15 <<"                                       \n";                        
sum16_out15 <<"                                       \n";                        
sum16_out15 <<" wire  [D_WIDTH-1:0]  SS_wire ;        \n";                        
sum16_out15 <<" wire  [D_WIDTH-1:0]  SC_wire ;        \n";                        
sum16_out15 <<" wire                 c0_wire ;        \n";                        
sum16_out15 <<" wire  [D_WIDTH-1:0]  s0_wire ;        \n";                        
sum16_out15 <<" wire  [D_WIDTH-1:0]  SS_reg_wire ;    \n";                        
sum16_out15 <<" wire  [D_WIDTH-1:0]  SC_reg_wire ;    \n";                        
sum16_out15 <<"                                       \n";                        
sum16_out15 <<"                                       \n";                        
sum16_out15 <<" 	//                                \n";                         
sum16_out15 <<" 	Sum16_CSAout15 u_Sum16_CSAout15(.SS_out(SS_wire), \n";
sum16_out15 <<" 					                .SC_out(SC_wire), \n";
sum16_out15 <<"                                     .A0_in(A0_in),    \n";
sum16_out15 <<" 			                        .A1_in(A1_in),    \n";
sum16_out15 <<" 			                        .A2_in(A2_in),    \n";
sum16_out15 <<" 			                        .A3_in(A3_in),    \n";
sum16_out15 <<" 			                        .A4_in(A4_in),    \n";
sum16_out15 <<" 			                        .A5_in(A5_in),    \n";
sum16_out15 <<" 			                        .A6_in(A6_in),    \n";
sum16_out15 <<" 			                        .A7_in(A7_in),    \n";
sum16_out15 <<" 			                        .A8_in(A8_in),    \n";
sum16_out15 <<" 			                        .A9_in(A9_in),    \n";
sum16_out15 <<" 			                        .A10_in(A10_in),  \n";
sum16_out15 <<" 			                        .A11_in(A11_in),  \n";
sum16_out15 <<" 			                        .A12_in(A12_in),  \n";
sum16_out15 <<" 			                        .A13_in(A13_in),  \n";
sum16_out15 <<" 			                        .A14_in(A14_in),  \n";
sum16_out15 <<" 			                        .A15_in(A15_in),  \n";
sum16_out15 <<" 			                        .MixRadix_sel_in(MixRadix_sel_in),\n";
sum16_out15 <<" 			                        .BU_mode_sel_in(BU_mode_sel_in)\n";
sum16_out15 <<"                                     // rst_n,                 \n";
sum16_out15 <<"                                     // clk                    \n";
sum16_out15 <<"                                     ) ;                       \n";
sum16_out15 <<" 	//Pipeline Register                                       \n";
sum16_out15 <<" 	R16_PipeReg5_2 u_R16_PipeReg5_2(.SS_out(SS_reg_wire),     \n"; 
sum16_out15 <<" 					                .SC_out(SC_reg_wire),     \n";
sum16_out15 <<"                                     .SS_in(SS_wire),          \n";
sum16_out15 <<" 					                .SC_in(SC_wire),          \n";
sum16_out15 <<"                                     .rst_n(rst_n),            \n";
sum16_out15 <<"                                     .clk(clk)                 \n";
sum16_out15 <<"                                      ) ;                      \n";
sum16_out15 <<" 	                                                          \n"; 
sum16_out15 <<" 	//                                                        \n"; 
sum16_out15 <<" 	CLA192 u0_CLA192(.sum(s0_wire),                           \n"; 
sum16_out15 <<"                      .c_out(c0_wire),                         \n";
sum16_out15 <<"                      .a_in(SS_reg_wire),                      \n";
sum16_out15 <<"                      .b_in(SC_reg_wire),                      \n";
sum16_out15 <<"                      .c_in(1'b0)                              \n";
sum16_out15 <<" 			         // rst_n,                                \n"; 
sum16_out15 <<"                      // clk                                   \n";
sum16_out15 <<"                      ) ;                                      \n";
sum16_out15 <<" 	//			                                              \n"; 
sum16_out15 <<" 	CLA192 u1_CLA192(.sum(S_out),                             \n"; 
sum16_out15 <<"                      .c_out(),                                \n";
sum16_out15 <<"                      .a_in(s0_wire),                          \n";
sum16_out15 <<"                      .b_in(D_ZERO),                           \n";
sum16_out15 <<"                      .c_in(c0_wire)                           \n";
sum16_out15 <<" 			         // rst_n,                                \n"; 
sum16_out15 <<"                      // clk                                   \n";
sum16_out15 <<"                      ) ;			                          \n"; 
sum16_out15 <<" 					                                          \n"; 
sum16_out15 <<"                                                               \n";
sum16_out15 <<" endmodule                                                     \n";
	 
	 sum16_out15.close();	
}	 
//CSA
//radix-16
void configurable_BFFT::Sum16_CSAout0(std::string string_in){
	 std::ofstream sum16_csaout0;
     std::string         string_buf = "/Sum16_CSAout0.v";
     std::stringstream   ss;
     ss << string_in << string_buf;
	 sum16_csaout0.open(ss.str());
sum16_csaout0 <<" `timescale 1 ns/1 ps \n";
//sum16_csaout0 <<" module Sum16_CSAout0(SS_out,\n";
//sum16_csaout0 <<" 					   SC_out,\n";
sum16_csaout0 <<" module Sum16_CSAout0(SS_out,\n";
sum16_csaout0 <<" 					   SC_out,\n";
sum16_csaout0 <<"                      A0_in,\n";
sum16_csaout0 <<" 			           A1_in,\n";
sum16_csaout0 <<" 			           A2_in, \n";
sum16_csaout0 <<" 			           A3_in, \n";
sum16_csaout0 <<" 			           A4_in, \n";
sum16_csaout0 <<" 			           A5_in, \n";
sum16_csaout0 <<" 			           A6_in, \n";
sum16_csaout0 <<" 			           A7_in, \n";
sum16_csaout0 <<" 			           A8_in, \n";
sum16_csaout0 <<" 			           A9_in, \n";
sum16_csaout0 <<" 			           A10_in,\n";
sum16_csaout0 <<" 			           A11_in,\n";
sum16_csaout0 <<" 			           A12_in,\n";
sum16_csaout0 <<" 			           A13_in,\n";
sum16_csaout0 <<" 			           A14_in,\n";
sum16_csaout0 <<" 			           A15_in,\n";
sum16_csaout0 <<"                      MixRadix_sel_in,\n";
sum16_csaout0 <<"                      BU_mode_sel_in\n";
sum16_csaout0 <<"                      ) ;\n"; 
sum16_csaout0 <<"                             \n";
sum16_csaout0 <<" parameter D_WIDTH     = 96 ;\n";
sum16_csaout0 <<" parameter P_WIDTH     = 64 ;\n";
sum16_csaout0 <<" parameter D_ZERO      = 96'h0 ;\n";
sum16_csaout0 <<" parameter P_ZERO      = 64'h0 ;\n";
sum16_csaout0 <<" parameter SEG_ZERO    = 32'h0 ;\n";
sum16_csaout0 <<"\n";
sum16_csaout0 <<"\n";
sum16_csaout0 <<" output[D_WIDTH-1:0] SS_out ;\n";
sum16_csaout0 <<" output[D_WIDTH-1:0] SC_out ;\n";
sum16_csaout0 <<"\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A0_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A1_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A2_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A3_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A4_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A5_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A6_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A7_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A8_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A9_in ;\n";
sum16_csaout0 <<" input [P_WIDTH-1:0] A10_in ;\n";         
sum16_csaout0 <<" input [P_WIDTH-1:0] A11_in ;\n";         
sum16_csaout0 <<" input [P_WIDTH-1:0] A12_in ;\n";         
sum16_csaout0 <<" input [P_WIDTH-1:0] A13_in ;\n";         
sum16_csaout0 <<" input [P_WIDTH-1:0] A14_in ;\n";         
sum16_csaout0 <<" input [P_WIDTH-1:0] A15_in ;\n";
sum16_csaout0 <<" input [1:0]         MixRadix_sel_in; \n";
sum16_csaout0 <<" input               BU_mode_sel_in ; \n";      
sum16_csaout0 <<" // input               clk ;\n";
sum16_csaout0 <<"                                 \n";
sum16_csaout0 <<"                                 \n";
//-----------------------------------------------------------
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op0 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op1 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op2 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op3 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op4 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op5 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op6 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op7 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op8 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op9 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op10 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op11 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op12 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op13 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op14 ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  op15 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op0 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op1 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op2 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op3 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op4 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op5 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op6 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op7 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op8 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op9 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op10 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op11 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op12 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op13 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op14 ;\n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  op15 ;\n";
//------------------------------------------------------------
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts1_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc1_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  s1_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c1_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts2_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc2_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  s2_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c2_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts3_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc3_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  s3_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c3_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts4_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc4_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  s4_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c4_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts5_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc5_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  s5_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c5_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts6_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc6_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  s6_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c6_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts7_wire ;  \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc7_wire ;  \n";
//sum16_csaout0 <<" // wire  [D_WIDTH-1:0]  s7_wire ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c7_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  ts1_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  tc1_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  s1_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  c1_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  ts2_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  tc2_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  s2_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  c2_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  ts3_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  tc3_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  s3_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  c3_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  ts4_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  tc4_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  s4_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  c4_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  ts5_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  tc5_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH+1:0]  s5_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH+1:0]  c5_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  ts6_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  tc6_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH+1:0]  s6_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH+1:0]  c6_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH+1:0]  ts7_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH+1:0]  tc7_wire ;  \n";
sum16_csaout0 <<" wire  [P_WIDTH+2:0]  c7_wire ;   \n";
//---------------------------------------------------------
//sum16_csaout0 <<"                                  \n";       
//sum16_csaout0 <<" wire  [D_WIDTH-1:0] SS_out_wire ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0] SC_out_wire ;\n";
sum16_csaout0 <<" wire  [P_WIDTH+2:0] SS_out_wire ;\n";
sum16_csaout0 <<" wire  [P_WIDTH+2:0] SC_out_wire ;\n";
sum16_csaout0 <<"//---------------------------------------\n";
sum16_csaout0 <<" //radix-2 \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  SS_R2_out_wire ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  SC_R2_out_wire ;\n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  ts1_R2_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  tc1_R2_wire ;   \n";
//sum16_csaout0 <<" wire  [D_WIDTH-1:0]  c1_R2_wire ;    \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  ts1_R2_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH-1:0]  tc1_R2_wire ;   \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  c1_R2_wire ;    \n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  SS_R2_out_wire ;\n";
sum16_csaout0 <<" wire  [P_WIDTH  :0]  SC_R2_out_wire ;\n";

sum16_csaout0 <<"//--------------------------------------\n";
sum16_csaout0 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;\n";
sum16_csaout0 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;\n";

//---------------------------------------------------------------
sum16_csaout0 <<"                                          \n";
//sum16_csaout0 <<" 	assign op0 = {SEG_ZERO,A0_in} ;\n";
//sum16_csaout0 <<" 	//                             \n";
//sum16_csaout0 <<" 	assign op1 = {SEG_ZERO,A1_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op2 = {SEG_ZERO,A2_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op3 = {SEG_ZERO,A3_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op4 = {SEG_ZERO,A4_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op5 = {SEG_ZERO,A5_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op6 = {SEG_ZERO,A6_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op7 = {SEG_ZERO,A7_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op8 = {SEG_ZERO,A8_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op9 = {SEG_ZERO,A9_in} ;\n"; 
//sum16_csaout0 <<" 	//                             \n"; 
//sum16_csaout0 <<" 	assign op10 = {SEG_ZERO,A10_in} ;\n"; 
//sum16_csaout0 <<" 	//                               \n";
//sum16_csaout0 <<" 	assign op11 = {SEG_ZERO,A11_in} ;\n";
//sum16_csaout0 <<" 	//                               \n";
//sum16_csaout0 <<" 	assign op12 = {SEG_ZERO,A12_in} ;\n";
//sum16_csaout0 <<" 	//                               \n";
//sum16_csaout0 <<" 	assign op13 = {SEG_ZERO,A13_in} ;\n";
//sum16_csaout0 <<" 	//                               \n";
//sum16_csaout0 <<" 	assign op14 = {SEG_ZERO,A14_in} ;\n";
//sum16_csaout0 <<" 	//                               \n";
//sum16_csaout0 <<" 	assign op15 = {SEG_ZERO,A15_in} ;\n";
//
sum16_csaout0 <<" 	assign op0 = A0_in ;\n";
sum16_csaout0 <<" 	//                   \n";
sum16_csaout0 <<" 	assign op1 = A1_in ;\n"; 
sum16_csaout0 <<" 	//                   \n"; 
sum16_csaout0 <<" 	assign op2 = A2_in ;\n"; 
sum16_csaout0 <<" 	//                   \n"; 
sum16_csaout0 <<" 	assign op3 = A3_in ;\n"; 
sum16_csaout0 <<" 	//                  \n"; 
sum16_csaout0 <<" 	assign op4 = A4_in ;\n"; 
sum16_csaout0 <<" 	//                  \n"; 
sum16_csaout0 <<" 	assign op5 = A5_in ;\n"; 
sum16_csaout0 <<" 	//                  \n"; 
sum16_csaout0 <<" 	assign op6 = A6_in ;\n"; 
sum16_csaout0 <<" 	//                  \n"; 
sum16_csaout0 <<" 	assign op7 = A7_in ;\n"; 
sum16_csaout0 <<" 	//                  \n"; 
sum16_csaout0 <<" 	assign op8 = A8_in ;\n"; 
sum16_csaout0 <<" 	//                  \n"; 
sum16_csaout0 <<" 	assign op9 = A9_in ;\n"; 
sum16_csaout0 <<" 	//                   \n"; 
sum16_csaout0 <<" 	assign op10 = A10_in;\n"; 
sum16_csaout0 <<" 	//                   \n";
sum16_csaout0 <<" 	assign op11 = A11_in;\n";
sum16_csaout0 <<" 	//                   \n";
sum16_csaout0 <<" 	assign op12 = A12_in;\n";
sum16_csaout0 <<" 	//                   \n";
sum16_csaout0 <<" 	assign op13 = A13_in;\n";
sum16_csaout0 <<" 	//                   \n";
sum16_csaout0 <<" 	assign op14 = A14_in;\n";
sum16_csaout0 <<" 	//                   \n";
sum16_csaout0 <<" 	assign op15 = A15_in;\n";
//-----------------------------------------------------------------
//sum16_csaout0 <<" 	//4-2 counter1                   \n";
//sum16_csaout0 <<" 	assign ts1_wire = op0^op1^op2 ;  \n";
//sum16_csaout0 <<" 	assign tc1_wire = (op0&op1)|(op1&op2)|(op0&op2) ;\n";
//sum16_csaout0 <<" 	                                    \n";
//sum16_csaout0 <<" 	assign s1_wire = ({tc1_wire[D_WIDTH-2:0],1'b0})^ts1_wire^op3 ;\n";
//sum16_csaout0 <<" 	assign c1_wire = (({tc1_wire[D_WIDTH-2:0],1'b0})&ts1_wire)|(ts1_wire&op3)|(({tc1_wire[D_WIDTH-2:0],1'b0})&op3) ;\n";
//sum16_csaout0 <<" 	                                                  \n";
//sum16_csaout0 <<" 	//4-2 counter2                                    \n";
//sum16_csaout0 <<" 	assign ts2_wire = op4^op5^op6 ;                   \n";
//sum16_csaout0 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ; \n";
//sum16_csaout0 <<" 	                                                  \n";
//sum16_csaout0 <<" 	assign s2_wire = ({tc2_wire[D_WIDTH-2:0],1'b0})^ts2_wire^op7 ;\n";
//sum16_csaout0 <<" 	assign c2_wire = (({tc2_wire[D_WIDTH-2:0],1'b0})&ts2_wire)|(ts2_wire&op7)|(({tc2_wire[D_WIDTH-2:0],1'b0})&op7) ;\n";
//sum16_csaout0 <<" 	                                                   \n";
//sum16_csaout0 <<" 	//4-2 counter3                                     \n";
//sum16_csaout0 <<" 	assign ts3_wire = op8^op9^op10 ;                   \n";
//sum16_csaout0 <<" 	assign tc3_wire = (op8&op9)|(op9&op10)|(op8&op10) ;\n";
//sum16_csaout0 <<" 	                                                   \n";
//sum16_csaout0 <<" 	assign s3_wire = ({tc3_wire[D_WIDTH-2:0],1'b0})^ts3_wire^op11 ;\n";
//sum16_csaout0 <<" 	assign c3_wire = (({tc3_wire[D_WIDTH-2:0],1'b0})&ts3_wire)|(ts3_wire&op11)|(({tc3_wire[D_WIDTH-2:0],1'b0})&op11) ;\n";
//sum16_csaout0 <<" 	                                                   \n";
//sum16_csaout0 <<" 	//4-2 counter4                                     \n";
//sum16_csaout0 <<" 	assign ts4_wire = op12^op13^op14 ;                 \n";
//sum16_csaout0 <<" 	assign tc4_wire = (op12&op13)|(op13&op14)|(op12&op14) ;\n";
//sum16_csaout0 <<" 	                                                   \n";
//sum16_csaout0 <<" 	assign s4_wire = ({tc4_wire[D_WIDTH-2:0],1'b0})^ts4_wire^op15 ;\n";
//sum16_csaout0 <<" 	assign c4_wire = (({tc4_wire[D_WIDTH-2:0],1'b0})&ts4_wire)|(ts4_wire&op15)|(({tc4_wire[D_WIDTH-2:0],1'b0})&op15) ;\n";
//sum16_csaout0 <<"   \n";
//-----------------------------------------------------------------------------------
sum16_csaout0 <<" 	//4-2 counter1                   \n";
sum16_csaout0 <<" 	assign ts1_wire = op0^op1^op2 ;  \n";
sum16_csaout0 <<" 	assign tc1_wire = (op0&op1)|(op1&op2)|(op0&op2) ;\n";
sum16_csaout0 <<" 	                                    \n";
sum16_csaout0 <<" 	assign s1_wire = ({tc1_wire,1'b0})^ts1_wire^op3 ;\n";
sum16_csaout0 <<" 	assign c1_wire = (({tc1_wire,1'b0})&ts1_wire)|(ts1_wire&op3)|(({tc1_wire,1'b0})&op3) ;\n";
sum16_csaout0 <<" 	                                                  \n";
sum16_csaout0 <<" 	//4-2 counter2                                    \n";
sum16_csaout0 <<" 	assign ts2_wire = op4^op5^op6 ;                   \n";
sum16_csaout0 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ; \n";
sum16_csaout0 <<" 	                                                  \n";
sum16_csaout0 <<" 	assign s2_wire = ({tc2_wire,1'b0})^ts2_wire^op7 ;\n";
sum16_csaout0 <<" 	assign c2_wire = (({tc2_wire,1'b0})&ts2_wire)|(ts2_wire&op7)|(({tc2_wire,1'b0})&op7) ;\n";
sum16_csaout0 <<" 	                                                   \n";
sum16_csaout0 <<" 	//4-2 counter3                                     \n";
sum16_csaout0 <<" 	assign ts3_wire = op8^op9^op10 ;                   \n";
sum16_csaout0 <<" 	assign tc3_wire = (op8&op9)|(op9&op10)|(op8&op10) ;\n";
sum16_csaout0 <<" 	                                                   \n";
sum16_csaout0 <<" 	assign s3_wire = ({tc3_wire,1'b0})^ts3_wire^op11 ;\n";
sum16_csaout0 <<" 	assign c3_wire = (({tc3_wire,1'b0})&ts3_wire)|(ts3_wire&op11)|(({tc3_wire,1'b0})&op11) ;\n";
sum16_csaout0 <<" 	                                                   \n";
sum16_csaout0 <<" 	//4-2 counter4                                     \n";
sum16_csaout0 <<" 	assign ts4_wire = op12^op13^op14 ;                 \n";
sum16_csaout0 <<" 	assign tc4_wire = (op12&op13)|(op13&op14)|(op12&op14) ;\n";
sum16_csaout0 <<" 	                                                   \n";
sum16_csaout0 <<" 	assign s4_wire = ({tc4_wire,1'b0})^ts4_wire^op15 ;\n";
sum16_csaout0 <<" 	assign c4_wire = (({tc4_wire,1'b0})&ts4_wire)|(ts4_wire&op15)|(({tc4_wire,1'b0})&op15) ;\n";
sum16_csaout0 <<"   \n";
//------------------------------------------------------------------------------------
//sum16_csaout0 <<" 	//4-2 counter5\n";
//sum16_csaout0 <<" 	assign ts5_wire = ({c1_wire[D_WIDTH-2:0],1'b0})^s1_wire^({c2_wire[D_WIDTH-2:0],1'b0}) ;\n";
//sum16_csaout0 <<" 	assign tc5_wire = (({c1_wire[D_WIDTH-2:0],1'b0})&s1_wire)|(s1_wire&({c2_wire[D_WIDTH-2:0],1'b0}))|(({c1_wire[D_WIDTH-2:0],1'b0})&({c2_wire[D_WIDTH-2:0],1'b0})) ;\n";
//sum16_csaout0 <<"   \n";
//sum16_csaout0 <<" 	assign s5_wire = ({tc5_wire[D_WIDTH-2:0],1'b0})^ts5_wire^s2_wire ;\n";
//sum16_csaout0 <<" 	assign c5_wire = (({tc5_wire[D_WIDTH-2:0],1'b0})&ts5_wire)|(ts5_wire&s2_wire)|(({tc5_wire[D_WIDTH-2:0],1'b0})&s2_wire) ;\n";
//sum16_csaout0 <<"   \n";
//sum16_csaout0 <<" 	//4-2 counter6\n";
//sum16_csaout0 <<" 	assign ts6_wire = ({c3_wire[D_WIDTH-2:0],1'b0})^s3_wire^({c4_wire[D_WIDTH-2:0],1'b0}) ;\n";
//sum16_csaout0 <<" 	assign tc6_wire = (({c3_wire[D_WIDTH-2:0],1'b0})&s3_wire)|(s3_wire&({c4_wire[D_WIDTH-2:0],1'b0}))|(({c3_wire[D_WIDTH-2:0],1'b0})&({c4_wire[D_WIDTH-2:0],1'b0})) ;\n";
//sum16_csaout0 <<" 	                                                                                       \n";
//sum16_csaout0 <<" 	assign s6_wire = ({tc6_wire[D_WIDTH-2:0],1'b0})^ts6_wire^s4_wire ;                     \n";
//sum16_csaout0 <<" 	assign c6_wire = (({tc6_wire[D_WIDTH-2:0],1'b0})&ts6_wire)|(ts6_wire&s4_wire)|(({tc6_wire[D_WIDTH-2:0],1'b0})&s4_wire) ;\n";
//sum16_csaout0 <<" 	                                                                                       \n";
//sum16_csaout0 <<" 	//4-2 counter7                                                                         \n";
//sum16_csaout0 <<" 	assign ts7_wire = ({c5_wire[D_WIDTH-2:0],1'b0})^s5_wire^({c6_wire[D_WIDTH-2:0],1'b0}) ;\n";
//sum16_csaout0 <<" 	assign tc7_wire = (({c5_wire[D_WIDTH-2:0],1'b0})&s5_wire)|(s5_wire&({c6_wire[D_WIDTH-2:0],1'b0}))|(({c5_wire[D_WIDTH-2:0],1'b0})&({c6_wire[D_WIDTH-2:0],1'b0})) ;\n";
//sum16_csaout0 <<" 	                                                                                       \n";
//sum16_csaout0 <<" 	assign SS_out_wire = ({tc7_wire[D_WIDTH-2:0],1'b0})^ts7_wire^s6_wire ;                 \n";
//sum16_csaout0 <<" 	assign c7_wire = (({tc7_wire[D_WIDTH-2:0],1'b0})&ts7_wire)|(ts7_wire&s6_wire)|(({tc7_wire[D_WIDTH-2:0],1'b0})&s6_wire) ; \n";
//sum16_csaout0 <<" 	                                                  \n";
//sum16_csaout0 <<" 	assign SC_out_wire = {c7_wire[D_WIDTH-2:0],1'b0} ;\n";
//sum16_csaout0 <<"	\n";
//sum16_csaout0 <<" 	//------------------------------------\n";
//sum16_csaout0 <<" 	//radix-2                             \n";
//sum16_csaout0 <<" 	assign ts1_R2_wire = op0 ^ op1;       \n";
//sum16_csaout0 <<" 	assign tc1_R2_wire = (op0 & op1);     \n";
//sum16_csaout0 <<" 	                                      \n";
//sum16_csaout0 <<" 	assign SS_R2_out_wire = ({tc1_R2_wire[D_WIDTH-2:0],1'b0}) ^ ts1_R2_wire;  \n";
//sum16_csaout0 <<" 	assign c1_R2_wire     = (({tc1_R2_wire[D_WIDTH-2:0],1'b0}) & ts1_R2_wire);\n";
//sum16_csaout0 <<" 	assign SC_R2_out_wire = {c1_R2_wire[D_WIDTH-2:0],1'b0} ;     \n";
//sum16_csaout0 <<"    \n";
//sum16_csaout0 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , 2'd2: radix-8 \n";
//sum16_csaout0 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_out_wire:\n";
//sum16_csaout0 <<"	                              (MixRadix_sel_in == 2'd1) ? s1_wire  : s5_wire;\n";
//sum16_csaout0 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? SC_R2_out_wire:\n";
//sum16_csaout0 <<"	                              (MixRadix_sel_in == 2'd1) ? ( {c1_wire[D_WIDTH-2:0],1'b0} ) : ( { c5_wire[D_WIDTH-2:0],1'b0} );\n";
//sum16_csaout0 <<"    \n";
//sum16_csaout0 <<"    //-------------------------------------------------------------------	\n";
//sum16_csaout0 <<" 	//output                                    \n";
//sum16_csaout0 <<" 	assign SS_out  = ( BU_mode_sel_in == 1'b1 ) ?  ( MixRadix_SS_out_wire ) : ( SS_out_wire  );\n";
//sum16_csaout0 <<" 	assign SC_out  = ( BU_mode_sel_in == 1'b1 ) ?  ( MixRadix_SC_out_wire ) : ( SC_out_wire  );\n";
//--------------------------------------------------------------------------------------
sum16_csaout0 <<" 	//4-2 counter5\n";
sum16_csaout0 <<" 	assign ts5_wire = ({c1_wire,1'b0})^s1_wire^({c2_wire,1'b0}) ;\n";
sum16_csaout0 <<" 	assign tc5_wire = (({c1_wire,1'b0})&s1_wire)|(s1_wire&({c2_wire,1'b0}))|(({c1_wire,1'b0})&({c2_wire,1'b0})) ;\n";
sum16_csaout0 <<"   \n";
sum16_csaout0 <<" 	assign s5_wire = ({tc5_wire,1'b0})^ts5_wire^s2_wire ;\n";
sum16_csaout0 <<" 	assign c5_wire = (({tc5_wire,1'b0})&ts5_wire)|(ts5_wire&s2_wire)|(({tc5_wire,1'b0})&s2_wire) ;\n";
sum16_csaout0 <<"   \n";
sum16_csaout0 <<" 	//4-2 counter6\n";
sum16_csaout0 <<" 	assign ts6_wire = ({c3_wire,1'b0})^s3_wire^({c4_wire,1'b0}) ;\n";
sum16_csaout0 <<" 	assign tc6_wire = (({c3_wire,1'b0})&s3_wire)|(s3_wire&({c4_wire,1'b0}))|(({c3_wire,1'b0})&({c4_wire,1'b0})) ;\n";
sum16_csaout0 <<" 	                                                                                       \n";
sum16_csaout0 <<" 	assign s6_wire = ({tc6_wire,1'b0})^ts6_wire^s4_wire ;                     \n";
sum16_csaout0 <<" 	assign c6_wire = (({tc6_wire,1'b0})&ts6_wire)|(ts6_wire&s4_wire)|(({tc6_wire,1'b0})&s4_wire) ;\n";
sum16_csaout0 <<" 	                                                                                       \n";
sum16_csaout0 <<" 	//4-2 counter7                                                                         \n";
sum16_csaout0 <<" 	assign ts7_wire = ({c5_wire,1'b0})^s5_wire^({c6_wire,1'b0}) ;\n";
sum16_csaout0 <<" 	assign tc7_wire = (({c5_wire,1'b0})&s5_wire)|(s5_wire&({c6_wire,1'b0}))|(({c5_wire,1'b0})&({c6_wire,1'b0})) ;\n";
sum16_csaout0 <<" 	                                                                                       \n";
sum16_csaout0 <<" 	assign SS_out_wire = ({tc7_wire,1'b0})^ts7_wire^s6_wire ;                 \n";
sum16_csaout0 <<" 	assign c7_wire = (({tc7_wire,1'b0})&ts7_wire)|(ts7_wire&s6_wire)|(({tc7_wire,1'b0})&s6_wire) ; \n";
sum16_csaout0 <<" 	                                                  \n";
sum16_csaout0 <<" 	assign SC_out_wire = {c7_wire[P_WIDTH+1:0],1'b0} ;\n";
sum16_csaout0 <<"	\n";
sum16_csaout0 <<" 	//------------------------------------\n";
sum16_csaout0 <<" 	//radix-2                             \n";
sum16_csaout0 <<" 	assign ts1_R2_wire = op0 ^ op1;       \n";
sum16_csaout0 <<" 	assign tc1_R2_wire = (op0 & op1);     \n";
sum16_csaout0 <<" 	                                      \n";
sum16_csaout0 <<" 	assign SS_R2_out_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire;  \n";
sum16_csaout0 <<" 	assign c1_R2_wire     = (({tc1_R2_wire,1'b0}) & ts1_R2_wire);\n";
sum16_csaout0 <<" 	assign SC_R2_out_wire = {c1_R2_wire[P_WIDTH-1:0],1'b0} ;     \n";
sum16_csaout0 <<"    \n";
sum16_csaout0 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , 2'd2: radix-8 \n";
sum16_csaout0 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({32'd0,SS_R2_out_wire}):\n";
sum16_csaout0 <<"	                              (MixRadix_sel_in == 2'd1) ? ({31'd0,s1_wire})  : ({30'd0,s5_wire});\n";
sum16_csaout0 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({31'd0,SC_R2_out_wire}):\n";
sum16_csaout0 <<"	                              (MixRadix_sel_in == 2'd1) ? ({30'd0,c1_wire,1'b0}) : ({29'd0,c5_wire,1'b0});\n";
sum16_csaout0 <<"    \n";
sum16_csaout0 <<"    //-------------------------------------------------------------------	\n";
sum16_csaout0 <<" 	//output                                    \n";
sum16_csaout0 <<" 	assign SS_out  = ( BU_mode_sel_in == 1'b1 ) ?  ( MixRadix_SS_out_wire ) : ( {29'd0,SS_out_wire}  );\n";
sum16_csaout0 <<" 	assign SC_out  = ( BU_mode_sel_in == 1'b1 ) ?  ( MixRadix_SC_out_wire ) : ( {29'd0,SC_out_wire}  );\n";
sum16_csaout0 <<"                                               \n";
sum16_csaout0 <<" endmodule                                     \n";
	 sum16_csaout0.close();
}
void configurable_BFFT::Sum16_CSAout1(std::string string_in){
	 std::ofstream sum16_csaout1;
     std::string         string_buf = "/Sum16_CSAout1.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout1.open(ss.str());
sum16_csaout1 <<" `timescale 1 ns/1 ps\n";
sum16_csaout1 <<" module Sum16_CSAout1(SS_out,\n";
sum16_csaout1 <<" 					   SC_out,\n";
sum16_csaout1 <<"                       A0_in,\n";
sum16_csaout1 <<" 			            A1_in,\n";
sum16_csaout1 <<" 			            A2_in,\n";
sum16_csaout1 <<" 			            A3_in,\n";
sum16_csaout1 <<" 			            A4_in,\n";
sum16_csaout1 <<" 			            A5_in,\n";
sum16_csaout1 <<" 			            A6_in,\n";
sum16_csaout1 <<" 			            A7_in,\n";
sum16_csaout1 <<" 			            A8_in,\n";
sum16_csaout1 <<" 			            A9_in,\n";
sum16_csaout1 <<" 			            A10_in,\n";
sum16_csaout1 <<" 			            A11_in,\n";
sum16_csaout1 <<" 			            A12_in,\n";
sum16_csaout1 <<" 			            A13_in,\n";
sum16_csaout1 <<" 			            A14_in,\n";
sum16_csaout1 <<" 			            A15_in,\n";
sum16_csaout1 <<"                       MixRadix_sel_in,\n";
sum16_csaout1 <<"                       BU_mode_sel_in\n";
sum16_csaout1 <<"                      // clk\n";
sum16_csaout1 <<"                      ) ;\n";
sum16_csaout1 <<" \n";
sum16_csaout1 <<" parameter D_WIDTH     = 192 ;\n";
sum16_csaout1 <<" parameter P_WIDTH     = 64 ; \n";
sum16_csaout1 <<" parameter D_ZERO      = 192'h0 ;\n";
sum16_csaout1 <<" parameter SEG_ZERO    = 8'h0 ;\n";
sum16_csaout1 <<" parameter SEG_32_ZERO = 32'h0 ; \n";
sum16_csaout1 <<" parameter SEG1        = 12 ;\n";
sum16_csaout1 <<" parameter SEG2        = 24 ;\n";
sum16_csaout1 <<" parameter SEG3        = 36 ;\n";
sum16_csaout1 <<" parameter SEG4        = 48 ;\n";
sum16_csaout1 <<" parameter SEG5        = 60 ;\n";
sum16_csaout1 <<" parameter SEG6        = 64 ;\n";
sum16_csaout1 <<"                             \n";
sum16_csaout1 <<"                             \n";
sum16_csaout1 <<" output[D_WIDTH-1:0] SS_out ;\n";
sum16_csaout1 <<" output[D_WIDTH-1:0] SC_out ;\n";
sum16_csaout1 <<"                             \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A0_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A1_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A2_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A3_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A4_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A5_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A6_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A7_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A8_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A9_in ; \n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A10_in ;\n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A11_in ;\n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A12_in ;\n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A13_in ;\n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A14_in ;\n";
sum16_csaout1 <<" input [P_WIDTH-1:0] A15_in ;\n";
sum16_csaout1 <<" input [1:0]         MixRadix_sel_in;\n";
sum16_csaout1 <<" input               BU_mode_sel_in; \n";
sum16_csaout1 <<"                     \n";
sum16_csaout1 <<"                     \n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op1 ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op2 ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op3 ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op4 ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op5 ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op6 ;\n";
sum16_csaout1 <<"                           \n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  ts1_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  tc1_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  ts2_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  tc2_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  ts3_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  tc3_wire ;\n";
sum16_csaout1 <<" // wire  [D_WIDTH-1:0]  ts4_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  tc4_wire ;   \n";
sum16_csaout1 <<"  \n";
sum16_csaout1 <<" //--------------------------------\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  SS_out_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  SC_out_wire ;\n";
sum16_csaout1 <<" //radix-2 wire\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0] SS_R2_wire ;\n";
sum16_csaout1 <<" //radix-4\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0] SS_R4_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0] SC_R4_wire ;\n";
sum16_csaout1 <<" //radix-8                       \n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;\n";
sum16_csaout1 <<" //                   \n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  SS_R8_wire ; \n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  SC_R8_wire ; \n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<" //--------------------------------------\n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout1 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<"  //radix-2 butterfly unit\n";
sum16_csaout1 <<"  //op0 - op1             \n";
sum16_csaout1 <<"  assign SS_R2_wire = {SEG_32_ZERO,A1_in,SEG_32_ZERO,A0_in};\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<"  //Radix-4 butterfly unit operation!!!\n";
sum16_csaout1 <<"  assign SS_R4_wire = {A3_in[SEG4-1:0],\n";
sum16_csaout1 <<"                       A2_in[SEG4-1:0],\n";
sum16_csaout1 <<"                       A1_in[SEG4-1:0],\n";
sum16_csaout1 <<"                       A0_in[SEG4-1:0] \n";
sum16_csaout1 <<"                      };               \n";
sum16_csaout1 <<"  assign SC_R4_wire = {SEG_32_ZERO,A2_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                       SEG_32_ZERO,A1_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"     			       SEG_32_ZERO,A0_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"  			           SEG_32_ZERO,A3_in[SEG6-1:SEG4] \n";
sum16_csaout1 <<"  			          } ;\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<"  //Radix-8 butterfly unit\n";
sum16_csaout1 <<"  assign op1_R8_wire = { A7_in[SEG2-1:0],\n";
sum16_csaout1 <<"                         A6_in[SEG2-1:0],\n";
sum16_csaout1 <<"                         A5_in[SEG2-1:0],\n";
sum16_csaout1 <<"                         A4_in[SEG2-1:0],\n";
sum16_csaout1 <<"                         A3_in[SEG2-1:0],\n";
sum16_csaout1 <<"                         A2_in[SEG2-1:0],\n";
sum16_csaout1 <<"                         A1_in[SEG2-1:0],\n";
sum16_csaout1 <<"                         A0_in[SEG2-1:0] \n";
sum16_csaout1 <<"                       };\n";
sum16_csaout1 <<"  assign op2_R8_wire = { A6_in[SEG4-1:SEG2],\n";
sum16_csaout1 <<"                         A5_in[SEG4-1:SEG2],\n";
sum16_csaout1 <<"                         A4_in[SEG4-1:SEG2],\n";
sum16_csaout1 <<"                         A3_in[SEG4-1:SEG2],\n";
sum16_csaout1 <<"                         A2_in[SEG4-1:SEG2],\n";
sum16_csaout1 <<"                         A1_in[SEG4-1:SEG2],\n";
sum16_csaout1 <<"                         A0_in[SEG4-1:SEG2],\n";
sum16_csaout1 <<"                         A7_in[SEG4-1:SEG2] \n";
sum16_csaout1 <<"                       };\n";
sum16_csaout1 <<"  assign op3_R8_wire = { SEG_ZERO,A5_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                         SEG_ZERO,A4_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                         SEG_ZERO,A3_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                         SEG_ZERO,A2_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                         SEG_ZERO,A1_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                         SEG_ZERO,A0_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                         SEG_ZERO,A7_in[SEG6-1:SEG4],\n";
sum16_csaout1 <<"                         SEG_ZERO,A6_in[SEG6-1:SEG4] \n";
sum16_csaout1 <<"                       };                            \n";
sum16_csaout1 <<"                                                     \n";
sum16_csaout1 <<"  //R8 butterfly unit operation                      \n";   
sum16_csaout1 <<"  assign SS_R8_wire = op1_R8_wire^op2_R8_wire^op3_R8_wire ; \n";
sum16_csaout1 <<"  assign tc1_R8_wire = ( op1_R8_wire & op2_R8_wire) | ( op2_R8_wire & op3_R8_wire ) | ( op1_R8_wire & op3_R8_wire );\n";
sum16_csaout1 <<"                                                             \n";
sum16_csaout1 <<"  assign SC_R8_wire = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]};\n";
sum16_csaout1 <<"                                                         \n";
sum16_csaout1 <<" 	//                                                    \n";
sum16_csaout1 <<" 	assign op1 = {A15_in[SEG1-1:0],\n";
sum16_csaout1 <<" 	              A14_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				  A13_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				  A12_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				  A11_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				  A10_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A9_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A8_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A7_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A6_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A5_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A4_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A3_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A2_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A1_in[SEG1-1:0],\n";
sum16_csaout1 <<" 				   A0_in[SEG1-1:0] \n";
sum16_csaout1 <<" 				  } ;              \n";
sum16_csaout1 <<" 	//                             \n";
sum16_csaout1 <<" 	assign op2 = {A14_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				  A13_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				  A12_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				  A11_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				  A10_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A9_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A8_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A7_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A6_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A5_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A4_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A3_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A2_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A1_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				   A0_in[SEG2-1:SEG1],\n";
sum16_csaout1 <<" 				  A15_in[SEG2-1:SEG1] \n";
sum16_csaout1 <<" 				  } ;			      \n";
sum16_csaout1 <<" 	//                                \n";
sum16_csaout1 <<" 	assign op3 = {A13_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				  A12_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				  A11_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				  A10_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A9_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A8_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A7_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A6_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A5_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A4_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A3_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A2_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A1_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				   A0_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 				  A15_in[SEG3-1:SEG2],\n";
sum16_csaout1 <<" 	              A14_in[SEG3-1:SEG2] \n";
sum16_csaout1 <<" 				  } ;                 \n";
sum16_csaout1 <<" 	//                                \n";
sum16_csaout1 <<" 	assign op4 = {                    \n";
sum16_csaout1 <<" 				  A12_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				  A11_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				  A10_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A9_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A8_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A7_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A6_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A5_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A4_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A3_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A2_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A1_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				   A0_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				  A15_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 	              A14_in[SEG4-1:SEG3],\n";
sum16_csaout1 <<" 				  A13_in[SEG4-1:SEG3] \n";
sum16_csaout1 <<" 				  } ;                 \n";
sum16_csaout1 <<" 	//                                \n";
sum16_csaout1 <<" 	assign op5 = {A11_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				  A10_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A9_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A8_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A7_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A6_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A5_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A4_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A3_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A2_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A1_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				   A0_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				  A15_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 	              A14_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				  A13_in[SEG5-1:SEG4],\n";
sum16_csaout1 <<" 				  A12_in[SEG5-1:SEG4] \n";
sum16_csaout1 <<" 				  } ;                 \n";
sum16_csaout1 <<" 	//                                \n";
sum16_csaout1 <<" 	assign op6 = {SEG_ZERO,A10_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A9_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A8_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A7_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A6_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A5_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A4_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A3_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A2_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A1_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				   SEG_ZERO,A0_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 	              SEG_ZERO,A14_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],\n";
sum16_csaout1 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5] \n";
sum16_csaout1 <<" 				  } ;                          \n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<" 	//3-2 counter1\n";
sum16_csaout1 <<" 	assign ts1_wire = op1^op2^op3 ;                     \n";
sum16_csaout1 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;   \n";
sum16_csaout1 <<" 	                                                    \n";
sum16_csaout1 <<" 	//3-2 counter1                                      \n";
sum16_csaout1 <<" 	assign ts2_wire = op4^op5^op6 ;                     \n";
sum16_csaout1 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;   \n";
sum16_csaout1 <<" 	                                                    \n";
sum16_csaout1 <<" 	//3-2 counter1                                      \n";
sum16_csaout1 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ; \n";
sum16_csaout1 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ; \n";
sum16_csaout1 <<" 	                                                    \n";
sum16_csaout1 <<" 	//3-2 counter1                                      \n";
sum16_csaout1 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ;\n";
sum16_csaout1 <<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout1 <<" 	                                                    \n";
sum16_csaout1 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout1 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout1 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout1 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO    :\n";
sum16_csaout1 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<" 	//Output\n";
sum16_csaout1 <<" 	assign SS_out =  ( BU_mode_sel_in == 1'b1) ?  MixRadix_SS_out_wire  : SS_out_wire;  \n";
sum16_csaout1 <<" 	assign SC_out =  ( BU_mode_sel_in == 1'b1) ?  MixRadix_SC_out_wire  : SC_out_wire;  \n";
sum16_csaout1 <<"\n";
sum16_csaout1 <<" endmodule\n";
	 sum16_csaout1.close();
}
void configurable_BFFT::Sum16_CSAout2(std::string string_in){
	 std::ofstream sum16_csaout2;
     std::string         string_buf = "/Sum16_CSAout2.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout2.open(ss.str());
sum16_csaout2 <<" `timescale 1 ns/1 ps\n";
sum16_csaout2 <<" module Sum16_CSAout2(SS_out,\n";
sum16_csaout2 <<" 					   SC_out,\n";
sum16_csaout2 <<"                       A0_in,\n";
sum16_csaout2 <<" 			            A1_in,\n"; 
sum16_csaout2 <<" 			            A2_in,\n"; 
sum16_csaout2 <<" 			            A3_in,\n"; 
sum16_csaout2 <<" 			            A4_in,\n"; 
sum16_csaout2 <<" 			            A5_in,\n"; 
sum16_csaout2 <<" 			            A6_in,\n"; 
sum16_csaout2 <<" 			            A7_in,\n"; 
sum16_csaout2 <<" 			            A8_in,\n"; 
sum16_csaout2 <<" 			            A9_in,\n"; 
sum16_csaout2 <<" 			            A10_in,\n";
sum16_csaout2 <<" 			            A11_in,\n";
sum16_csaout2 <<" 			            A12_in,\n";
sum16_csaout2 <<" 			            A13_in,\n";
sum16_csaout2 <<" 			            A14_in,\n";
sum16_csaout2 <<" 			            A15_in,\n";
sum16_csaout2 <<"						MixRadix_sel_in,\n";
sum16_csaout2 <<"                       BU_mode_sel_in\n"; 
sum16_csaout2 <<"                      // clk\n";
sum16_csaout2 <<"                      ) ;\n";
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"  parameter D_WIDTH     = 192;             \n";
sum16_csaout2 <<"  parameter HD_WIDTH    = 96;              \n";
sum16_csaout2 <<"  parameter P_WIDTH     = 64;              \n";
sum16_csaout2 <<"  parameter D_ZERO      = 192'h0;          \n";
sum16_csaout2 <<"  parameter HD_ZERO     = 96'h0;           \n";
sum16_csaout2 <<"  parameter SEG_32_ZERO = 32'h0;           \n";
sum16_csaout2 <<"  parameter SEG_ZERO    = 8'h0;            \n";
sum16_csaout2 <<"  parameter SEG1        = 12;              \n";
sum16_csaout2 <<"  parameter SEG2        = 24;              \n";
sum16_csaout2 <<"  parameter SEG3        = 36;              \n";
sum16_csaout2 <<"  parameter SEG4        = 48;              \n";
sum16_csaout2 <<"  parameter SEG5        = 60;              \n";
sum16_csaout2 <<"  parameter SEG6        = 64;              \n";
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"  output[D_WIDTH-1:0] SS_out ;             \n";
sum16_csaout2 <<"  output[D_WIDTH-1:0] SC_out ;             \n";
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A0_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A1_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A2_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A3_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A4_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A5_in ;              \n"; 
sum16_csaout2 <<"  input [P_WIDTH-1:0] A6_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A7_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A8_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A9_in ;              \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A10_in ;             \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A11_in ;             \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A12_in ;             \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A13_in ;             \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A14_in ;             \n";
sum16_csaout2 <<"  input [P_WIDTH-1:0] A15_in ;             \n";
sum16_csaout2 <<"  input [1:0]         MixRadix_sel_in;     \n";
sum16_csaout2 <<"  input               BU_mode_sel_in;      \n"; 
sum16_csaout2 <<"                                           \n"; 
sum16_csaout2 <<"                                           \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op1 ;               \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op2 ;               \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op3 ;               \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op4 ;               \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op5 ;               \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op6 ;               \n"; 
sum16_csaout2 <<"                                           \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  ts1_wire ;          \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  tc1_wire ;          \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  ts2_wire ;          \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  tc2_wire ;          \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  ts3_wire ;          \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  tc3_wire ;          \n"; 
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  tc4_wire ;          \n";
sum16_csaout2 <<"  //-------------------------              \n";
sum16_csaout2 <<"  wire [D_WIDTH-1:0]  SS_out_wire ;        \n";
sum16_csaout2 <<"  wire [D_WIDTH-1:0]  SC_out_wire ;        \n";
//sum16_csaout2 <<"  //radix-2 butterfly unit wire            \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  op0_R2_wire ;      \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  op1_R2_wire ;      \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  SS_R2_wire ;       \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  SC_R2_wire ;       \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  ts1_R2_wire ;      \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  tc1_R2_wire ;      \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  c1_R2_wire ;       \n";
//------------------------------------------------------------------
//sum16_csaout2 <<"  //radix-2 butterfly unit wire            \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  op0_R2_wire ;      \n";
//sum16_csaout2 <<"  wire  [HD_WIDTH-1:0]  op1_R2_wire ;      \n";
sum16_csaout2 <<"  wire  [P_WIDTH-1:0]  ts1_R2_wire ;      \n";
sum16_csaout2 <<"  wire  [P_WIDTH-1:0]  tc1_R2_wire ;      \n";
sum16_csaout2 <<"  wire  [P_WIDTH  :0]  c1_R2_wire ;       \n";
sum16_csaout2 <<"  wire  [P_WIDTH  :0]  SS_R2_wire ;       \n";
sum16_csaout2 <<"  wire  [P_WIDTH  :0]  SC_R2_wire ;       \n";
//-----------------------------------------------------------------
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"  //Radix-4                                \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0] SS_R4_wire;          \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0] SC_R4_wire;          \n";
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"  //radix-8                                \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op1_R8_wire ;       \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op2_R8_wire ;       \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op3_R8_wire ;       \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  op4_R8_wire ;       \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  ts1_R8_wire ;       \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  tc1_R8_wire ;       \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  tc2_R8_wire ;       \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  SS_R8_wire ;        \n";
sum16_csaout2 <<"  wire  [D_WIDTH-1:0]  SC_R8_wire ;        \n";
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<" //--------------------------------------  \n";
sum16_csaout2 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout2 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n";  
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"                                           \n";
sum16_csaout2 <<"   //Radix-2 OP                            \n";
//sum16_csaout2 <<"   assign op0_R2_wire = {SEG_32_ZERO,A2_in}; \n";
//sum16_csaout2 <<"   assign op1_R2_wire = {SEG_32_ZERO,A3_in}; \n";
//sum16_csaout2 <<"                                             \n";
//sum16_csaout2 <<" 	//radix-2 operation                       \n";                                           
//sum16_csaout2 <<" 	assign ts1_R2_wire =  op0_R2_wire ^ op1_R2_wire;  \n";
//sum16_csaout2 <<" 	assign tc1_R2_wire = (op0_R2_wire & op1_R2_wire); \n";
//sum16_csaout2 <<"                                              \n";
//sum16_csaout2 <<" 	assign SS_R2_wire = ({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R2_wire; \n";
//sum16_csaout2 <<" 	assign c1_R2_wire     = (({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) & ts1_R2_wire); \n";
//sum16_csaout2 <<" 	assign SC_R2_wire = {c1_R2_wire[HD_WIDTH-2:0],1'b0} ;  \n";
sum16_csaout2 <<" 	//radix-2 operation                       \n";                                           
sum16_csaout2 <<" 	assign ts1_R2_wire =  A2_in ^ A3_in;  \n";
sum16_csaout2 <<" 	assign tc1_R2_wire =  A2_in & A3_in; \n";
sum16_csaout2 <<"                                              \n";
sum16_csaout2 <<" 	assign SS_R2_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire; \n";
sum16_csaout2 <<" 	assign c1_R2_wire = (({tc1_R2_wire,1'b0}) & ts1_R2_wire); \n";
sum16_csaout2 <<" 	assign SC_R2_wire = ({c1_R2_wire[P_WIDTH-1:0],1'b0}) ;  \n";
//---------------------------------------------------------------------
sum16_csaout2 <<" \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<"    //radix-4 \n";
sum16_csaout2 <<" 	//Radix-4 butterfly unit operation \n";
sum16_csaout2 <<" 	assign SS_R4_wire = {SEG_32_ZERO,A1_in[SEG6-1:SEG4],A1_in[SEG4-1:0], \n";
sum16_csaout2 <<" 					     SEG_32_ZERO,A0_in[SEG6-1:SEG4],A0_in[SEG4-1:0]  \n";
sum16_csaout2 <<" 					    } ;                                              \n";
sum16_csaout2 <<" 	assign SC_R4_wire = {SEG_32_ZERO,A3_in[SEG6-1:SEG4],A3_in[SEG4-1:0], \n";
sum16_csaout2 <<" 					     SEG_32_ZERO,A2_in[SEG6-1:SEG4],A2_in[SEG4-1:0]  \n";
sum16_csaout2 <<" 					    } ;			                                     \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<"   //radix-8 operator \n";
sum16_csaout2 <<"   assign op1_R8_wire = {A3_in[SEG4-1:SEG2], \n";
sum16_csaout2 <<" 				  A3_in[SEG2-1:0],            \n";
sum16_csaout2 <<" 	              A2_in[SEG4-1:SEG2],         \n";
sum16_csaout2 <<" 				  A2_in[SEG2-1:0],            \n";
sum16_csaout2 <<" 				  A1_in[SEG4-1:SEG2],         \n";
sum16_csaout2 <<" 				  A1_in[SEG2-1:0],            \n";
sum16_csaout2 <<" 				  A0_in[SEG4-1:SEG2],         \n";
sum16_csaout2 <<" 				  A0_in[SEG2-1:0]             \n";
sum16_csaout2 <<" 				  } ;                         \n";
sum16_csaout2 <<" 	assign op2_R8_wire = {A7_in[SEG4-1:SEG2], \n";
sum16_csaout2 <<" 				  A7_in[SEG2-1:0],            \n";
sum16_csaout2 <<" 	              A6_in[SEG4-1:SEG2],         \n";
sum16_csaout2 <<" 				  A6_in[SEG2-1:0],            \n";
sum16_csaout2 <<" 				  A5_in[SEG4-1:SEG2],         \n";
sum16_csaout2 <<" 				  A5_in[SEG2-1:0],            \n";
sum16_csaout2 <<" 				  A4_in[SEG4-1:SEG2],         \n";
sum16_csaout2 <<" 				  A4_in[SEG2-1:0]             \n";
sum16_csaout2 <<" 				  } ;			              \n";
sum16_csaout2 <<" 	assign op3_R8_wire = {SEG_32_ZERO,A2_in[SEG6-1:SEG4],    \n";
sum16_csaout2 <<" 				  SEG_32_ZERO,A1_in[SEG6-1:SEG4],            \n";
sum16_csaout2 <<" 				  SEG_32_ZERO,A0_in[SEG6-1:SEG4],            \n";
sum16_csaout2 <<" 				  SEG_32_ZERO,A3_in[SEG6-1:SEG4]             \n";
sum16_csaout2 <<" 				  } ;                                        \n";
sum16_csaout2 <<" 	assign op4_R8_wire = {SEG_32_ZERO,A6_in[SEG6-1:SEG4],    \n";
sum16_csaout2 <<" 				  SEG_32_ZERO,A5_in[SEG6-1:SEG4],            \n";
sum16_csaout2 <<" 				  SEG_32_ZERO,A4_in[SEG6-1:SEG4],            \n";
sum16_csaout2 <<" 				  SEG_32_ZERO,A7_in[SEG6-1:SEG4]             \n";
sum16_csaout2 <<" 				  } ;                                        \n";
sum16_csaout2 <<"  //Radix-8 Butterfly unit                                  \n";
sum16_csaout2 <<" 	//3-2 counter1                                           \n";
sum16_csaout2 <<" 	assign ts1_R8_wire = op1_R8_wire^op2_R8_wire^op3_R8_wire ; \n";
sum16_csaout2 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;  \n";
sum16_csaout2 <<" 	                                                         \n";
sum16_csaout2 <<" 	//3-2 counter1                                           \n";
sum16_csaout2 <<" 	assign SS_R8_wire  = ({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})^ts1_R8_wire^op4_R8_wire ; \n";
sum16_csaout2 <<" 	assign tc2_R8_wire = (({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&ts1_R8_wire)|(ts1_R8_wire&op4_R8_wire)|(({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&op4_R8_wire) ;   \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<" 	assign SC_R8_wire  = {tc2_R8_wire[D_WIDTH-2:0],tc2_R8_wire[D_WIDTH-1]} ; \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<" 	assign op1 = {A7_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A7_in[SEG1-1:0],    \n";
sum16_csaout2 <<" 	              A6_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A6_in[SEG1-1:0],    \n";
sum16_csaout2 <<" 				  A5_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A5_in[SEG1-1:0],    \n";
sum16_csaout2 <<" 				  A4_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A4_in[SEG1-1:0],    \n";
sum16_csaout2 <<" 				  A3_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A3_in[SEG1-1:0],    \n";
sum16_csaout2 <<" 				  A2_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A2_in[SEG1-1:0],    \n";
sum16_csaout2 <<" 				  A1_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A1_in[SEG1-1:0],    \n";
sum16_csaout2 <<" 				  A0_in[SEG2-1:SEG1], \n";
sum16_csaout2 <<" 				  A0_in[SEG1-1:0]     \n";
sum16_csaout2 <<" 				  } ;                 \n";
sum16_csaout2 <<" 	//                                \n";
sum16_csaout2 <<" 	assign op2 = {A6_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A6_in[SEG3-1:SEG2], \n";
sum16_csaout2 <<" 				  A5_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A5_in[SEG3-1:SEG2], \n";
sum16_csaout2 <<" 				  A4_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A4_in[SEG3-1:SEG2], \n";
sum16_csaout2 <<" 				  A3_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A3_in[SEG3-1:SEG2], \n";
sum16_csaout2 <<" 				  A2_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A2_in[SEG3-1:SEG2], \n";
sum16_csaout2 <<" 				  A1_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A1_in[SEG3-1:SEG2], \n";
sum16_csaout2 <<" 				  A0_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A0_in[SEG3-1:SEG2], \n";
sum16_csaout2 <<" 				  A7_in[SEG4-1:SEG3], \n";
sum16_csaout2 <<" 				  A7_in[SEG3-1:SEG2]  \n";
sum16_csaout2 <<" 				  } ;			      \n";
sum16_csaout2 <<" 	//                                \n";
sum16_csaout2 <<" 	assign op3 = {SEG_ZERO,A5_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A5_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A4_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A3_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A2_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A1_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A0_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A7_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A6_in[SEG5-1:SEG4]           \n";
sum16_csaout2 <<" 				  } ;                          \n";
sum16_csaout2 <<" 	//                                         \n";
sum16_csaout2 <<" 	assign op4 = {A15_in[SEG2-1:SEG1],         \n";
sum16_csaout2 <<" 				  A15_in[SEG1-1:0],            \n";
sum16_csaout2 <<" 	              A14_in[SEG2-1:SEG1],         \n";
sum16_csaout2 <<" 				  A14_in[SEG1-1:0],            \n";
sum16_csaout2 <<" 				  A13_in[SEG2-1:SEG1],         \n";
sum16_csaout2 <<" 				  A13_in[SEG1-1:0],            \n";
sum16_csaout2 <<" 				  A12_in[SEG2-1:SEG1],         \n";
sum16_csaout2 <<" 				  A12_in[SEG1-1:0],            \n";
sum16_csaout2 <<" 				  A11_in[SEG2-1:SEG1],         \n";
sum16_csaout2 <<" 				  A11_in[SEG1-1:0],            \n";
sum16_csaout2 <<" 				  A10_in[SEG2-1:SEG1],         \n";
sum16_csaout2 <<" 				  A10_in[SEG1-1:0],            \n";
sum16_csaout2 <<" 				  A9_in[SEG2-1:SEG1],          \n";
sum16_csaout2 <<" 				  A9_in[SEG1-1:0],             \n";
sum16_csaout2 <<" 				  A8_in[SEG2-1:SEG1],          \n";
sum16_csaout2 <<" 				  A8_in[SEG1-1:0]              \n";
sum16_csaout2 <<" 				  } ;                          \n";
sum16_csaout2 <<" 	//                                         \n";
sum16_csaout2 <<" 	assign op5 = {A14_in[SEG4-1:SEG3],         \n";
sum16_csaout2 <<" 				  A14_in[SEG3-1:SEG2],         \n";
sum16_csaout2 <<" 				  A13_in[SEG4-1:SEG3],         \n";
sum16_csaout2 <<" 				  A13_in[SEG3-1:SEG2],         \n";
sum16_csaout2 <<" 				  A12_in[SEG4-1:SEG3],         \n";
sum16_csaout2 <<" 				  A12_in[SEG3-1:SEG2],         \n";
sum16_csaout2 <<" 				  A11_in[SEG4-1:SEG3],         \n";
sum16_csaout2 <<" 				  A11_in[SEG3-1:SEG2],         \n";
sum16_csaout2 <<" 				  A10_in[SEG4-1:SEG3],         \n";
sum16_csaout2 <<" 				  A10_in[SEG3-1:SEG2],         \n";
sum16_csaout2 <<" 				  A9_in[SEG4-1:SEG3],          \n";
sum16_csaout2 <<" 				  A9_in[SEG3-1:SEG2],          \n";
sum16_csaout2 <<" 				  A8_in[SEG4-1:SEG3],          \n";
sum16_csaout2 <<" 				  A8_in[SEG3-1:SEG2],          \n";
sum16_csaout2 <<" 				  A15_in[SEG4-1:SEG3],         \n";
sum16_csaout2 <<" 				  A15_in[SEG3-1:SEG2]          \n";
sum16_csaout2 <<" 				  } ;                          \n";
sum16_csaout2 <<" 	//                                         \n";
sum16_csaout2 <<" 	assign op6 = {SEG_ZERO,A13_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A13_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A12_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A11_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A10_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5],  \n";
sum16_csaout2 <<" 				  A9_in[SEG5-1:SEG4],           \n";
sum16_csaout2 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],  \n";
sum16_csaout2 <<" 				  A8_in[SEG5-1:SEG4],           \n";
sum16_csaout2 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A15_in[SEG5-1:SEG4],          \n";
sum16_csaout2 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5], \n";
sum16_csaout2 <<" 				  A14_in[SEG5-1:SEG4]           \n";
sum16_csaout2 <<" 				  } ;                           \n";
sum16_csaout2 <<" 	                                            \n";
sum16_csaout2 <<"                                               \n";
sum16_csaout2 <<" 	//3-2 counter1                              \n";
sum16_csaout2 <<" 	assign ts1_wire = op1^op2^op3 ;             \n";
sum16_csaout2 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ; \n";
sum16_csaout2 <<" 	                                                  \n";
sum16_csaout2 <<" 	//3-2 counter1                                    \n";
sum16_csaout2 <<" 	assign ts2_wire = op4^op5^op6 ;                   \n";
sum16_csaout2 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ; \n";
sum16_csaout2 <<" 	                                                  \n";
sum16_csaout2 <<" 	//3-2 counter1                                    \n";
sum16_csaout2 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ; \n";
sum16_csaout2 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ; \n";
sum16_csaout2 <<" 	                                                   \n";
sum16_csaout2 <<" 	//3-2 counter1                                     \n";                 
sum16_csaout2 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ;  \n";
sum16_csaout2 <<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ; \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<"  	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;       \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8 \n";
sum16_csaout2 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SS_R2_wire}): \n";
sum16_csaout2 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire; \n";
sum16_csaout2 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SC_R2_wire}): \n";
sum16_csaout2 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;  \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<" 	//Output \n";
sum16_csaout2 <<" 	assign  SS_out  = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SS_out_wire : SS_out_wire ; \n";
sum16_csaout2 <<" 	assign  SC_out  = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SC_out_wire : SC_out_wire ; \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<" \n";
sum16_csaout2 <<" endmodule	  \n";
	 sum16_csaout2.close();	
}
void configurable_BFFT::Sum16_CSAout3(std::string string_in){
	 std::ofstream sum16_csaout3;
     std::string         string_buf = "/Sum16_CSAout3.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout3.open(ss.str());
sum16_csaout3 <<" `timescale 1 ns/1 ps \n";
sum16_csaout3 <<" module Sum16_CSAout3(SS_out, \n";
sum16_csaout3 <<" 					   SC_out, \n";
sum16_csaout3 <<"                       A0_in, \n";
sum16_csaout3 <<" 			            A1_in, \n";
sum16_csaout3 <<" 			            A2_in, \n";
sum16_csaout3 <<" 			            A3_in, \n";
sum16_csaout3 <<" 			            A4_in, \n";
sum16_csaout3 <<" 			            A5_in, \n";
sum16_csaout3 <<" 			            A6_in, \n";
sum16_csaout3 <<" 			            A7_in, \n";
sum16_csaout3 <<" 			            A8_in, \n";
sum16_csaout3 <<" 			            A9_in, \n";
sum16_csaout3 <<" 			           A10_in, \n";
sum16_csaout3 <<" 			           A11_in, \n";
sum16_csaout3 <<" 			           A12_in, \n";
sum16_csaout3 <<" 			           A13_in, \n";
sum16_csaout3 <<" 			           A14_in, \n";
sum16_csaout3 <<" 			           A15_in, \n";
sum16_csaout3 <<"                      MixRadix_sel_in, \n";
sum16_csaout3 <<"                      BU_mode_sel_in \n";
sum16_csaout3 <<"                      // clk \n";
sum16_csaout3 <<"                      ) ;    \n";
sum16_csaout3 <<"                             \n";
sum16_csaout3 <<" parameter D_WIDTH     = 192 ;    \n";
sum16_csaout3 <<" parameter P_WIDTH     = 64 ;     \n";
sum16_csaout3 <<" parameter D_ZERO      = 192'h0 ; \n";
sum16_csaout3 <<" parameter SEG_32_ZERO = 32'h0 ;  \n"; 
sum16_csaout3 <<" parameter SEG_ZERO    = 8'h0 ;   \n";
sum16_csaout3 <<" parameter SEG1        = 12 ;     \n";
sum16_csaout3 <<" parameter SEG2        = 24 ;     \n";
sum16_csaout3 <<" parameter SEG3        = 36 ;     \n";
sum16_csaout3 <<" parameter SEG4        = 48 ;     \n";
sum16_csaout3 <<" parameter SEG5        = 60 ;     \n";
sum16_csaout3 <<" parameter SEG6        = 64 ;     \n";
sum16_csaout3 <<"                                  \n";
sum16_csaout3 <<"                                   \n";
sum16_csaout3 <<" output[D_WIDTH-1:0] SS_out ;      \n";
sum16_csaout3 <<" output[D_WIDTH-1:0] SC_out ;      \n";
sum16_csaout3 <<"                                   \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A0_in ;       \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A1_in ;       \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A2_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A3_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A4_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A5_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A6_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A7_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A8_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A9_in ;        \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A10_in ;       \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A11_in ;       \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A12_in ;       \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A13_in ;       \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A14_in ;       \n";
sum16_csaout3 <<" input [P_WIDTH-1:0] A15_in ;       \n";
sum16_csaout3 <<" input [1:0]         MixRadix_sel_in;  \n";
sum16_csaout3 <<" input               BU_mode_sel_in;   \n";
sum16_csaout3 <<" // input               clk ;          \n"; 
sum16_csaout3 <<"\n";
sum16_csaout3 <<"\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op1 ;\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op2 ;\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op3 ;\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op4 ;\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op5 ;\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op6 ;\n";
sum16_csaout3 <<"\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  ts1_wire ;   \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  tc1_wire ;   \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  ts2_wire ;   \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  tc2_wire ;   \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  ts3_wire ;   \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  tc3_wire ;   \n";
sum16_csaout3 <<" // wire  [D_WIDTH-1:0]  ts4_wire ;\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  tc4_wire ;   \n";
sum16_csaout3 <<"                 \n";
sum16_csaout3 <<" //--------------------------------\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  SS_out_wire ;       \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  SC_out_wire ;       \n";
sum16_csaout3 <<" //Radix-2 wire\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0] SS_R2_wire ;  \n";
sum16_csaout3 <<"\n";
sum16_csaout3 <<" //radix-4 wire\n";
sum16_csaout3 <<" wire [D_WIDTH-1:0] SS_R4_wire ; \n";
sum16_csaout3 <<" wire [D_WIDTH-1:0] SC_R4_wire ; \n";
sum16_csaout3 <<"\n";
sum16_csaout3 <<" //Radix-8 wire                    \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;\n";                           
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;\n";                           
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  SS_R8_wire;  \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  SC_R8_wire;  \n"; 
sum16_csaout3 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;\n";
sum16_csaout3 <<" //--------------------------------------\n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout3 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<"  //radix-2 operation\n";
sum16_csaout3 <<"  assign SS_R2_wire = {SEG_32_ZERO,A3_in,SEG_32_ZERO,A2_in};\n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<"  //Radix-4 butterfly unit \n";
sum16_csaout3 <<"  assign  SS_R4_wire  = {A1_in[SEG4-1:0],\n";
sum16_csaout3 <<" 	                     A2_in[SEG4-1:0], \n";
sum16_csaout3 <<" 	                     A3_in[SEG4-1:0], \n";
sum16_csaout3 <<" 	                     A0_in[SEG4-1:0]};\n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<"  assign  SC_R4_wire  = {SEG_32_ZERO,A2_in[SEG6-1:SEG4], \n";
sum16_csaout3 <<" 	                     SEG_32_ZERO,A3_in[SEG6-1:SEG4],  \n";
sum16_csaout3 <<" 	                     SEG_32_ZERO,A0_in[SEG6-1:SEG4],  \n";
sum16_csaout3 <<" 	                     SEG_32_ZERO,A1_in[SEG6-1:SEG4]} ;\n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" //radix-8 operation \n";
sum16_csaout3 <<" 	assign op1_R8_wire = {A5_in[SEG2-1:0],\n";
sum16_csaout3 <<" 				  A2_in[SEG2-1:0],        \n";
sum16_csaout3 <<" 				  A7_in[SEG2-1:0],        \n";
sum16_csaout3 <<" 				  A4_in[SEG2-1:0],        \n";
sum16_csaout3 <<" 				  A1_in[SEG2-1:0],        \n";    
sum16_csaout3 <<" 				  A6_in[SEG2-1:0],        \n";    
sum16_csaout3 <<" 				  A3_in[SEG2-1:0],        \n";    
sum16_csaout3 <<" 				  A0_in[SEG2-1:0]         \n";    
sum16_csaout3 <<" 				  } ;                     \n";    
sum16_csaout3 <<" 	//                                    \n";    
sum16_csaout3 <<" 	assign op2_R8_wire = {A2_in[SEG4-1:SEG2],\n";
sum16_csaout3 <<" 				  A7_in[SEG4-1:SEG2],        \n";
sum16_csaout3 <<" 				  A4_in[SEG4-1:SEG2],        \n";
sum16_csaout3 <<" 				  A1_in[SEG4-1:SEG2],        \n";
sum16_csaout3 <<" 				  A6_in[SEG4-1:SEG2],        \n";
sum16_csaout3 <<" 				  A3_in[SEG4-1:SEG2],        \n";
sum16_csaout3 <<" 				  A0_in[SEG4-1:SEG2],        \n";
sum16_csaout3 <<" 				  A5_in[SEG4-1:SEG2]         \n";
sum16_csaout3 <<" 				  } ;			             \n";
sum16_csaout3 <<" 	//                                       \n";
sum16_csaout3 <<" 	assign op3_R8_wire = {SEG_ZERO,A7_in[SEG6-1:SEG4],\n";
sum16_csaout3 <<" 				          SEG_ZERO,A4_in[SEG6-1:SEG4],\n";
sum16_csaout3 <<" 				          SEG_ZERO,A1_in[SEG6-1:SEG4],\n";
sum16_csaout3 <<" 				          SEG_ZERO,A6_in[SEG6-1:SEG4],\n";
sum16_csaout3 <<" 				          SEG_ZERO,A3_in[SEG6-1:SEG4],\n";
sum16_csaout3 <<" 				          SEG_ZERO,A0_in[SEG6-1:SEG4],\n";
sum16_csaout3 <<" 				          SEG_ZERO,A5_in[SEG6-1:SEG4],\n";
sum16_csaout3 <<" 				          SEG_ZERO,A2_in[SEG6-1:SEG4] \n";
sum16_csaout3 <<" 				          } ;                         \n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" 	//3-2 counter1 \n";
sum16_csaout3 <<" 	assign SS_R8_wire  = op1_R8_wire^op2_R8_wire^op3_R8_wire;\n";
sum16_csaout3 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;\n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" 	assign SC_R8_wire  = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]} ;\n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" 	// \n";
sum16_csaout3 <<" 	assign op1 = { A5_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				  A10_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				  A15_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A4_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A9_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				  A14_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A3_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A8_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				  A13_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A2_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A7_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				  A12_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A1_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A6_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				  A11_in[SEG1-1:0],\n";
sum16_csaout3 <<" 				   A0_in[SEG1-1:0] \n";
sum16_csaout3 <<" 				  } ;              \n";
sum16_csaout3 <<" 	//                             \n";
sum16_csaout3 <<" 	assign op2 = {A10_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 	              A15_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A4_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A9_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				  A14_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A3_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A8_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				  A13_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A2_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A7_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				  A12_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A1_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A6_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				  A11_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A0_in[SEG2-1:SEG1],\n";
sum16_csaout3 <<" 				   A5_in[SEG2-1:SEG1] \n";
sum16_csaout3 <<" 				  } ;			      \n";
sum16_csaout3 <<" 	//                                \n";
sum16_csaout3 <<" 	assign op3 = {A15_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A4_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A9_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				  A14_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A3_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A8_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				  A13_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A2_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A7_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				  A12_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A1_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A6_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				  A11_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A0_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				   A5_in[SEG3-1:SEG2],\n";
sum16_csaout3 <<" 				  A10_in[SEG3-1:SEG2] \n";
sum16_csaout3 <<" 				  } ;                 \n";
sum16_csaout3 <<" 	//                                \n";
sum16_csaout3 <<" 	assign op4 = { A4_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A9_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				  A14_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A3_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A8_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				  A13_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A2_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A7_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				  A12_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A1_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A6_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				  A11_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A0_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				   A5_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				  A10_in[SEG4-1:SEG3],\n";
sum16_csaout3 <<" 				  A15_in[SEG4-1:SEG3] \n";
sum16_csaout3 <<" 				  } ;                 \n";
sum16_csaout3 <<" 	//                                \n";
sum16_csaout3 <<" 	assign op5 = { A9_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				  A14_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A3_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A8_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				  A13_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A2_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A7_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				  A12_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A1_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A6_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				  A11_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A0_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A5_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				  A10_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				  A15_in[SEG5-1:SEG4],\n";
sum16_csaout3 <<" 				   A4_in[SEG5-1:SEG4] \n";
sum16_csaout3 <<" 				  } ;                 \n";
sum16_csaout3 <<" 	//                               \n";
sum16_csaout3 <<" 	assign op6 = {SEG_ZERO,A14_in[SEG6-1:SEG5],\n";
sum16_csaout3 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],\n";
sum16_csaout3 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],\n";
sum16_csaout3 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],\n";
sum16_csaout3 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],\n";
sum16_csaout3 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],\n";
sum16_csaout3 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5], \n";
sum16_csaout3 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5]  \n";
sum16_csaout3 <<" 				  } ;                          \n";
sum16_csaout3 <<" 	                                           \n";
sum16_csaout3 <<"                                              \n";
sum16_csaout3 <<" 	//3-2 counter1                             \n";
sum16_csaout3 <<" 	assign ts1_wire = op1^op2^op3 ;            \n";
sum16_csaout3 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;\n";
sum16_csaout3 <<" 	                                                 \n";
sum16_csaout3 <<" 	//3-2 counter1                                   \n";
sum16_csaout3 <<" 	assign ts2_wire = op4^op5^op6 ;                  \n";
sum16_csaout3 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;\n";
sum16_csaout3 <<" 	                                                 \n";
sum16_csaout3 <<" 	//3-2 counter1                                   \n";
sum16_csaout3 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ; \n";
sum16_csaout3 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ;\n";
sum16_csaout3 <<" 	                                                 \n";
sum16_csaout3 <<" 	//3-2 counter1                                   \n";
sum16_csaout3 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ; \n";
sum16_csaout3 <<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout3 <<" 	                                                                  \n";
sum16_csaout3 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";
sum16_csaout3 <<"\n";
sum16_csaout3 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout3 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout3 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout3 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO    :\n";
sum16_csaout3 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire; \n";
sum16_csaout3 <<"\n";
sum16_csaout3 <<" 	         \n";
sum16_csaout3 <<" 	//Output \n";
sum16_csaout3 <<" 	assign  SS_out  = ( BU_mode_sel_in == 1'b1 ) ?   MixRadix_SS_out_wire :  SS_out_wire;\n";
sum16_csaout3 <<" 	assign  SC_out  = ( BU_mode_sel_in == 1'b1 ) ?   MixRadix_SC_out_wire :  SC_out_wire;\n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" \n";
sum16_csaout3 <<" endmodule \n";
	 sum16_csaout3.close();	
}
void configurable_BFFT::Sum16_CSAout4(std::string string_in){
	 std::ofstream sum16_csaout4;
     std::string         string_buf = "/Sum16_CSAout4.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout4.open(ss.str());
sum16_csaout4 <<" `timescale 1 ns/1 ps\n";
sum16_csaout4 <<" module Sum16_CSAout4(SS_out, \n";
sum16_csaout4 <<" 					   SC_out, \n";   
sum16_csaout4 <<"                       A0_in, \n";    
sum16_csaout4 <<" 			            A1_in, \n";    
sum16_csaout4 <<" 			            A2_in, \n";    
sum16_csaout4 <<" 			            A3_in, \n";    
sum16_csaout4 <<" 			            A4_in, \n";    
sum16_csaout4 <<" 			            A5_in, \n";    
sum16_csaout4 <<" 			            A6_in, \n";    
sum16_csaout4 <<" 			            A7_in, \n";    
sum16_csaout4 <<" 			            A8_in, \n";    
sum16_csaout4 <<" 			            A9_in, \n";    
sum16_csaout4 <<" 			            A10_in,\n";    
sum16_csaout4 <<" 			            A11_in,\n";    
sum16_csaout4 <<" 			            A12_in,\n";    
sum16_csaout4 <<" 			            A13_in,\n";    
sum16_csaout4 <<" 			            A14_in,\n";    
sum16_csaout4 <<" 			            A15_in,\n";
sum16_csaout4 <<"                       MixRadix_sel_in,\n";
sum16_csaout4 <<"                       BU_mode_sel_in  \n"; 
sum16_csaout4 <<"                      ) ;              \n"; 
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" parameter D_WIDTH     = 192 ;          \n";
sum16_csaout4 <<" parameter HD_WIDTH    = 96 ;           \n";
sum16_csaout4 <<" parameter P_WIDTH     = 64 ;           \n";
sum16_csaout4 <<" parameter D_ZERO      = 192'h0 ;       \n";
sum16_csaout4 <<" parameter HD_ZERO     = 96'h0 ;        \n";
sum16_csaout4 <<" parameter SEG_32_ZERO = 32'h0 ;        \n"; 
sum16_csaout4 <<" parameter SEG_ZERO    = 8'h0 ;         \n";
sum16_csaout4 <<" parameter SEG1_ZERO   = 12'h0 ;        \n";
sum16_csaout4 <<" parameter SEG1        = 12 ;           \n";
sum16_csaout4 <<" parameter SEG2        = 24 ;           \n";
sum16_csaout4 <<" parameter SEG3        = 36 ;           \n";
sum16_csaout4 <<" parameter SEG4        = 48 ;           \n";
sum16_csaout4 <<" parameter SEG5        = 60 ;           \n";
sum16_csaout4 <<" parameter SEG6        = 64 ;           \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" output[D_WIDTH-1:0] SS_out ;           \n";
sum16_csaout4 <<" output[D_WIDTH-1:0] SC_out ;           \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A0_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A1_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A2_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A3_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A4_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A5_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A6_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A7_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A8_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A9_in ;            \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A10_in ;           \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A11_in ;           \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A12_in ;           \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A13_in ;           \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A14_in ;           \n";
sum16_csaout4 <<" input [P_WIDTH-1:0] A15_in ;           \n";
sum16_csaout4 <<" input [1:0]         MixRadix_sel_in;   \n";
sum16_csaout4 <<" input               BU_mode_sel_in ;   \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op1 ;             \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op2 ;             \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op3 ;             \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op4 ;             \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op5 ;             \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op6 ;             \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op7 ;             \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op8 ;             \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  ts1_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc1_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  ts2_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc2_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  ts3_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc3_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  ts4_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc4_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  ts5_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc5_wire ;        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc6_wire ;        \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" //--------------------                 \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  SS_out_wire ;     \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  SC_out_wire ;     \n";
sum16_csaout4 <<"                                        \n";
//--------------------------------------------------------------------
//sum16_csaout4 <<" //Radix-2                              \n";
//sum16_csaout4 <<" //radix-2 butterfly unit wire          \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0]  op0_R2_wire ;    \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0]  op1_R2_wire ;    \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0]  SS_R2_wire ;     \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0]  SC_R2_wire ;     \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0]  ts1_R2_wire ;    \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0]  tc1_R2_wire ;    \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0]  c1_R2_wire ;     \n";
sum16_csaout4 <<" //Radix-2                             \n";
sum16_csaout4 <<" //radix-2 butterfly unit wire         \n";
sum16_csaout4 <<" wire  [P_WIDTH-1:0]  ts1_R2_wire ;    \n";
sum16_csaout4 <<" wire  [P_WIDTH-1:0]  tc1_R2_wire ;    \n";
sum16_csaout4 <<" wire  [P_WIDTH  :0]  c1_R2_wire ;     \n";
sum16_csaout4 <<" wire  [P_WIDTH  :0]  SS_R2_wire ;     \n";
sum16_csaout4 <<" wire  [P_WIDTH  :0]  SC_R2_wire ;     \n";
//--------------------------------------------------------------------
sum16_csaout4 <<"                                        \n";
//sum16_csaout4 <<" //radix-4 wire                         \n";
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] op0_R4_wire;      \n";  
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] op1_R4_wire;      \n";  
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] op2_R4_wire;      \n";  
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] op3_R4_wire;      \n";  
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] ts1_R4_wire;      \n";  
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] tc1_R4_wire;      \n";  
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] SS_R4_wire;       \n"; 
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] c1_R4_wire;       \n"; 
//sum16_csaout4 <<" wire  [HD_WIDTH-1:0] SC_R4_wire;       \n";
sum16_csaout4 <<" //radix-4 wire                         \n";
sum16_csaout4 <<" wire  [P_WIDTH-1:0] ts1_R4_wire;      \n";
sum16_csaout4 <<" wire  [P_WIDTH-1:0] tc1_R4_wire;      \n";
sum16_csaout4 <<" wire  [P_WIDTH  :0] SS_R4_wire;       \n";
sum16_csaout4 <<" wire  [P_WIDTH  :0] c1_R4_wire;       \n";
sum16_csaout4 <<" wire  [P_WIDTH  :0] SC_R4_wire;       \n";
//---------------------------------------------------------------------
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" //Radix-8 wire                         \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;     \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;     \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;     \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  op4_R8_wire ;     \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  ts1_R8_wire ;     \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;     \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  tc2_R8_wire ;     \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  SS_R8_wire ;      \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0]  SC_R8_wire ;      \n";
sum16_csaout4 <<"                                        \n";
sum16_csaout4 <<" //--------------------------------------\n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout4 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n"; 
sum16_csaout4 <<"                                           \n";
//-------------------------------------------------------------------
//sum16_csaout4 <<"    //Radix-2 OP                           \n";
//sum16_csaout4 <<"    assign op0_R2_wire = {SEG_32_ZERO,A4_in}; \n";
//sum16_csaout4 <<"    assign op1_R2_wire = {SEG_32_ZERO,A5_in}; \n";
//sum16_csaout4 <<"                                              \n";
//sum16_csaout4 <<"     //radix-2 operation                      \n";                                         
//sum16_csaout4 <<"    assign ts1_R2_wire =  op0_R2_wire ^ op1_R2_wire; \n";
//sum16_csaout4 <<"    assign tc1_R2_wire = (op0_R2_wire & op1_R2_wire);\n";
//sum16_csaout4 <<"                                                     \n";
//sum16_csaout4 <<"    assign SS_R2_wire = ({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R2_wire;  \n";
//sum16_csaout4 <<"    assign c1_R2_wire = (({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) & ts1_R2_wire);\n";
//sum16_csaout4 <<"    assign SC_R2_wire = {c1_R2_wire[HD_WIDTH-2:0],1'b0} ; \n";
//sum16_csaout4 <<"\n";
sum16_csaout4 <<"    //radix-2 operation                      \n";                                         
sum16_csaout4 <<"    assign ts1_R2_wire =  A4_in ^ A5_in; \n";
sum16_csaout4 <<"    assign tc1_R2_wire =  A4_in & A5_in;\n";
sum16_csaout4 <<"                                                     \n";
sum16_csaout4 <<"    assign SS_R2_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire;  \n";
sum16_csaout4 <<"    assign c1_R2_wire = (({tc1_R2_wire,1'b0}) & ts1_R2_wire);\n";
sum16_csaout4 <<"    assign SC_R2_wire = {c1_R2_wire[P_WIDTH-1:0],1'b0} ; \n";
sum16_csaout4 <<"\n";
//----------------------------------------------------------------------------
//sum16_csaout4 <<"    //radix-4 operation\n";
//sum16_csaout4 <<" 	//op assign                           \n";
//sum16_csaout4 <<" 	assign op0_R4_wire = {SEG_32_ZERO,A4_in}; \n";
//sum16_csaout4 <<" 	assign op1_R4_wire = {SEG_32_ZERO,A5_in}; \n";
//sum16_csaout4 <<" 	assign op2_R4_wire = {SEG_32_ZERO,A6_in}; \n";
//sum16_csaout4 <<" 	assign op3_R4_wire = {SEG_32_ZERO,A7_in}; \n";
//sum16_csaout4 <<" 	                                          \n";
//sum16_csaout4 <<" 	//                                        \n";
//sum16_csaout4 <<" 	assign ts1_R4_wire = op0_R4_wire^op1_R4_wire^op2_R4_wire;\n";
//sum16_csaout4 <<" 	assign tc1_R4_wire = (op0_R4_wire & op1_R4_wire) | (op1_R4_wire & op2_R4_wire ) | ( op0_R4_wire & op2_R4_wire );\n";
//sum16_csaout4 <<" 	                                                                                    \n";
//sum16_csaout4 <<" 	assign SS_R4_wire  = ({tc1_R4_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R4_wire ^ op3_R4_wire ;\n";
//sum16_csaout4 <<" 	assign c1_R4_wire  = (({tc1_R4_wire[HD_WIDTH-2:0],1'b0})&ts1_R4_wire)|(ts1_R4_wire&op3_R4_wire)|(({tc1_R4_wire[HD_WIDTH-2:0],1'b0})&op3_R4_wire);\n";
//sum16_csaout4 <<" 	assign SC_R4_wire = {c1_R4_wire[HD_WIDTH-2:0],1'b0} ;\n";
//sum16_csaout4 <<"	\n";
sum16_csaout4 <<"   //radix-4 operation\n";
sum16_csaout4 <<" 	assign ts1_R4_wire = A4_in^A5_in^A6_in;\n";
sum16_csaout4 <<" 	assign tc1_R4_wire = (A4_in & A5_in) | (A4_in & A6_in) | (A5_in & A6_in);\n";
sum16_csaout4 <<" 	                                                                                    \n";
sum16_csaout4 <<" 	assign SS_R4_wire  = ({tc1_R4_wire,1'b0}) ^ ts1_R4_wire ^ A7_in ;\n";
sum16_csaout4 <<" 	assign c1_R4_wire  = (({tc1_R4_wire,1'b0})&ts1_R4_wire)|(ts1_R4_wire&A7_in)|(({tc1_R4_wire,1'b0})&A7_in);\n";
sum16_csaout4 <<" 	assign SC_R4_wire = {c1_R4_wire[P_WIDTH-1:0],1'b0} ;\n";
sum16_csaout4 <<"	\n";
//-------------------------------------------------------------------------------
sum16_csaout4 <<" 	// Radix-8 operation                                    \n";
sum16_csaout4 <<" 	assign op1_R8_wire = {SEG_32_ZERO,A1_in[SEG6-1:SEG4],   \n";
sum16_csaout4 <<" 				  A1_in[SEG4-1:SEG2],                       \n";
sum16_csaout4 <<" 				  A1_in[SEG2-1:0],                          \n";
sum16_csaout4 <<" 				  SEG_32_ZERO,A0_in[SEG6-1:SEG4],           \n";
sum16_csaout4 <<" 				  A0_in[SEG4-1:SEG2],                       \n";
sum16_csaout4 <<" 				  A0_in[SEG2-1:0]                           \n";
sum16_csaout4 <<" 				  } ;                                       \n";
sum16_csaout4 <<" 	//                                                      \n";
sum16_csaout4 <<" 	assign op2_R8_wire = {SEG_32_ZERO,A3_in[SEG6-1:SEG4],   \n";
sum16_csaout4 <<" 				  A3_in[SEG4-1:SEG2],                       \n";
sum16_csaout4 <<" 				  A3_in[SEG2-1:0],                          \n";
sum16_csaout4 <<" 				  SEG_32_ZERO,A2_in[SEG6-1:SEG4],           \n";
sum16_csaout4 <<" 				  A2_in[SEG4-1:SEG2],                       \n";
sum16_csaout4 <<" 				  A2_in[SEG2-1:0]                           \n";
sum16_csaout4 <<" 				  } ;			                            \n";
sum16_csaout4 <<" 	//                                                      \n";
sum16_csaout4 <<" 	assign op3_R8_wire = {SEG_32_ZERO,A5_in[SEG6-1:SEG4],   \n";
sum16_csaout4 <<" 				          A5_in[SEG4-1:SEG2],               \n";
sum16_csaout4 <<" 				          A5_in[SEG2-1:0],                  \n";
sum16_csaout4 <<" 				          SEG_32_ZERO,A4_in[SEG6-1:SEG4],   \n";
sum16_csaout4 <<" 				          A4_in[SEG4-1:SEG2],               \n";
sum16_csaout4 <<" 				          A4_in[SEG2-1:0]                   \n";
sum16_csaout4 <<" 				          } ;                               \n";
sum16_csaout4 <<" 	//                                                      \n";
sum16_csaout4 <<" 	assign op4_R8_wire = {SEG_32_ZERO,A7_in[SEG6-1:SEG4],   \n";
sum16_csaout4 <<" 				          A7_in[SEG4-1:SEG2],               \n";
sum16_csaout4 <<" 				          A7_in[SEG2-1:0],                  \n";
sum16_csaout4 <<" 				          SEG_32_ZERO,A6_in[SEG6-1:SEG4],   \n";
sum16_csaout4 <<" 				          A6_in[SEG4-1:SEG2],               \n";
sum16_csaout4 <<" 				          A6_in[SEG2-1:0]                   \n";
sum16_csaout4 <<" 				          } ;                               \n";
sum16_csaout4 <<"                                                           \n";
sum16_csaout4 <<"                                                           \n";
sum16_csaout4 <<" 	//3-2 counter1                                          \n";
sum16_csaout4 <<" 	assign ts1_R8_wire = op1_R8_wire^op2_R8_wire^op3_R8_wire ;\n";
sum16_csaout4 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;\n";
sum16_csaout4 <<" 	                                                          \n";
sum16_csaout4 <<" 	//3-2 counter1                                            \n";
sum16_csaout4 <<" 	assign SS_R8_wire  = ({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})^ts1_R8_wire^op4_R8_wire ; \n";
sum16_csaout4 <<" 	assign tc2_R8_wire = (({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&ts1_R8_wire)|(ts1_R8_wire&op4_R8_wire)|(({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&op4_R8_wire) ;         \n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	assign SC_R8_wire  = {tc2_R8_wire[D_WIDTH-2:0],tc2_R8_wire[D_WIDTH-1]} ; \n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op1 = {A3_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A3_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A3_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A3_in[SEG1-1:0],                                           \n";
sum16_csaout4 <<" 				  A2_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A2_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A2_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A2_in[SEG1-1:0],                                           \n";
sum16_csaout4 <<" 				  A1_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A1_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A1_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A1_in[SEG1-1:0],                                           \n";
sum16_csaout4 <<" 				  A0_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A0_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A0_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A0_in[SEG1-1:0]                                            \n";
sum16_csaout4 <<" 				  } ;                                                        \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op2 = {SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A2_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A1_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A0_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A3_in[SEG5-1:SEG4]                                         \n";
sum16_csaout4 <<" 				  } ;			                                             \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op3 = {A7_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A7_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A7_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A7_in[SEG1-1:0],                                           \n";
sum16_csaout4 <<" 				  A6_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A6_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A6_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A6_in[SEG1-1:0],                                           \n";
sum16_csaout4 <<" 				  A5_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A5_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A5_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A5_in[SEG1-1:0],                                           \n";
sum16_csaout4 <<" 				  A4_in[SEG4-1:SEG3],                                        \n";
sum16_csaout4 <<" 	              A4_in[SEG3-1:SEG2],                                        \n";
sum16_csaout4 <<" 				  A4_in[SEG2-1:SEG1],                                        \n";
sum16_csaout4 <<" 				  A4_in[SEG1-1:0]                                            \n";
sum16_csaout4 <<" 				  } ;                                                        \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op4 = {SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A6_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A5_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A4_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A7_in[SEG5-1:SEG4]                                         \n";
sum16_csaout4 <<" 				  } ;                                                        \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op5 = {A11_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	              A11_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				  A11_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				  A11_in[SEG1-1:0],                                          \n";
sum16_csaout4 <<" 				  A10_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	              A10_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				  A10_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				  A10_in[SEG1-1:0],                                          \n";
sum16_csaout4 <<" 				   A9_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	               A9_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				   A9_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				   A9_in[SEG1-1:0],                                          \n";
sum16_csaout4 <<" 				   A8_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	               A8_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				   A8_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				   A8_in[SEG1-1:0]                                           \n";
sum16_csaout4 <<" 				  } ;                                                        \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op6 = {SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],                              \n";
sum16_csaout4 <<" 				  A10_in[SEG5-1:SEG4],                                       \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A9_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],                               \n";
sum16_csaout4 <<" 				  A8_in[SEG5-1:SEG4],                                        \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],                              \n";
sum16_csaout4 <<" 				  A11_in[SEG5-1:SEG4]                                        \n";
sum16_csaout4 <<" 				  } ;                                                        \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op7 = {A15_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	              A15_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				  A15_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				  A15_in[SEG1-1:0],                                          \n";
sum16_csaout4 <<" 				  A14_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	              A14_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				  A14_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				  A14_in[SEG1-1:0],                                          \n";
sum16_csaout4 <<" 				  A13_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	              A13_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				  A13_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				  A13_in[SEG1-1:0],                                          \n";
sum16_csaout4 <<" 				  A12_in[SEG4-1:SEG3],                                       \n";
sum16_csaout4 <<" 	              A12_in[SEG3-1:SEG2],                                       \n";
sum16_csaout4 <<" 				  A12_in[SEG2-1:SEG1],                                       \n";
sum16_csaout4 <<" 				  A12_in[SEG1-1:0]                                           \n";
sum16_csaout4 <<" 				  } ;                                                        \n";
sum16_csaout4 <<" 	//                                                                       \n";
sum16_csaout4 <<" 	assign op8 = {SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],                              \n";
sum16_csaout4 <<" 				  A14_in[SEG5-1:SEG4],                                       \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],                              \n";
sum16_csaout4 <<" 				  A13_in[SEG5-1:SEG4],                                       \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],                              \n";
sum16_csaout4 <<" 				  A12_in[SEG5-1:SEG4],                                       \n";
sum16_csaout4 <<" 				  SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 	              SEG1_ZERO,                                                 \n";
sum16_csaout4 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],                              \n";
sum16_csaout4 <<" 				  A15_in[SEG5-1:SEG4]                                        \n";
sum16_csaout4 <<" 				  } ;                                                        \n";
sum16_csaout4 <<" 				                                                             \n";
sum16_csaout4 <<" 				                                                             \n";
sum16_csaout4 <<" 	//3-2 counter1                                                           \n";
sum16_csaout4 <<" 	assign ts1_wire = op1^op2^op3 ;                                          \n";
sum16_csaout4 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;                        \n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	//3-2 counter1                                                           \n";
sum16_csaout4 <<" 	assign ts2_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^op4 ;\n";
sum16_csaout4 <<" 	assign tc2_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&op4)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&op4) ;\n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	//3-2 counter1                                                           \n";
sum16_csaout4 <<" 	assign ts3_wire = op5^op6^op7 ;                                          \n";
sum16_csaout4 <<" 	assign tc3_wire = (op5&op6)|(op6&op7)|(op5&op7) ;                        \n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	//3-2 counter1                                                           \n";
sum16_csaout4 <<" 	assign ts4_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^op8 ;\n";
sum16_csaout4 <<" 	assign tc4_wire = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&op8)|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&op8) ;\n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	//3-2 counter1                                                           \n";
sum16_csaout4 <<" 	assign ts5_wire = ({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})^ts2_wire^({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]}) ; \n";
sum16_csaout4 <<" 	assign tc5_wire = (({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})&ts2_wire)|(ts2_wire&({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]}))|(({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})&({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]})) ;\n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	//3-2 counter1                                                           \n";
sum16_csaout4 <<" 	assign SS_out_wire = ({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})^ts5_wire^ts4_wire ;\n";
sum16_csaout4 <<" 	assign tc6_wire    = (({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})&ts5_wire)|(ts5_wire&ts4_wire)|(({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})&ts4_wire) ; \n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	assign SC_out_wire = {tc6_wire[D_WIDTH-2:0],tc6_wire[D_WIDTH-1]} ;       \n";
sum16_csaout4 <<"\n";
sum16_csaout4 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout4 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SS_R2_wire}):\n";
sum16_csaout4 <<"	                              (MixRadix_sel_in == 2'd1) ? ({127'd0,SS_R4_wire}): SS_R8_wire;\n";
sum16_csaout4 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SC_R2_wire}):\n";
sum16_csaout4 <<"	                              (MixRadix_sel_in == 2'd1) ? ({127'd0,SC_R4_wire}): SC_R8_wire; \n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<" 	//Output                                                                 \n";
sum16_csaout4 <<" 	assign SS_out = ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SS_out_wire : SS_out_wire;   \n";
sum16_csaout4 <<" 	assign SC_out = ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SC_out_wire : SC_out_wire;   \n";
sum16_csaout4 <<" 	                                                                         \n";
sum16_csaout4 <<"                                                                            \n";
sum16_csaout4 <<" endmodule                                                                  \n";
	 sum16_csaout4.close();	
}
void configurable_BFFT::Sum16_CSAout5(std::string string_in){
	 std::ofstream sum16_csaout5;
     std::string         string_buf = "/Sum16_CSAout5.v";
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout5.open(ss.str());
sum16_csaout5 <<" `timescale 1 ns/1 ps \n";
sum16_csaout5 <<" module Sum16_CSAout5(SS_out, \n";
sum16_csaout5 <<" 				       SC_out, \n";
sum16_csaout5 <<"                      A0_in,  \n";
sum16_csaout5 <<" 			           A1_in,  \n";   
sum16_csaout5 <<" 			           A2_in,  \n";   
sum16_csaout5 <<" 			           A3_in,  \n";   
sum16_csaout5 <<" 			           A4_in,  \n";   
sum16_csaout5 <<" 			           A5_in,  \n";   
sum16_csaout5 <<" 			           A6_in,  \n";   
sum16_csaout5 <<" 			           A7_in,  \n";   
sum16_csaout5 <<" 			           A8_in,  \n";   
sum16_csaout5 <<" 			           A9_in,  \n";   
sum16_csaout5 <<" 			           A10_in, \n";   
sum16_csaout5 <<" 			           A11_in, \n";   
sum16_csaout5 <<" 			           A12_in, \n";   
sum16_csaout5 <<" 			           A13_in, \n";   
sum16_csaout5 <<" 			           A14_in, \n";   
sum16_csaout5 <<" 			           A15_in, \n";
sum16_csaout5 <<"                      MixRadix_sel_in,\n";
sum16_csaout5 <<"                      BU_mode_sel_in  \n";
sum16_csaout5 <<"                      // clk          \n";
sum16_csaout5 <<"                      ) ;             \n";
sum16_csaout5 <<"                                      \n";
sum16_csaout5 <<" parameter D_WIDTH     = 192 ;        \n";
sum16_csaout5 <<" parameter P_WIDTH     = 64 ;         \n";
sum16_csaout5 <<" parameter D_ZERO      = 192'h0 ;     \n";
sum16_csaout5 <<" parameter SEG_32_ZERO = 32'h0 ;      \n";
sum16_csaout5 <<" parameter SEG_ZERO    = 8'h0 ;       \n";
sum16_csaout5 <<" parameter SEG1        = 12 ;         \n";
sum16_csaout5 <<" parameter SEG2        = 24 ;         \n";
sum16_csaout5 <<" parameter SEG3        = 36 ;         \n";
sum16_csaout5 <<" parameter SEG4        = 48 ;         \n";
sum16_csaout5 <<" parameter SEG5        = 60 ;         \n";
sum16_csaout5 <<" parameter SEG6        = 64 ;         \n";
sum16_csaout5 <<"                                      \n";
sum16_csaout5 <<"                                      \n";
sum16_csaout5 <<" output[D_WIDTH-1:0] SS_out ;         \n";
sum16_csaout5 <<" output[D_WIDTH-1:0] SC_out ;         \n";
sum16_csaout5 <<"                                      \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A0_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A1_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A2_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A3_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A4_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A5_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A6_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A7_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A8_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A9_in ;          \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A10_in ;         \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A11_in ;         \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A12_in ;         \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A13_in ;         \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A14_in ;         \n";
sum16_csaout5 <<" input [P_WIDTH-1:0] A15_in ;         \n";
sum16_csaout5 <<" input [1:0]         MixRadix_sel_in; \n";
sum16_csaout5 <<" input               BU_mode_sel_in ; \n";
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op1 ;            \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op2 ;            \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op3 ;            \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op4 ;            \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op5 ;            \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op6 ;            \n";
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  ts1_wire ;       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  tc1_wire ;       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  ts2_wire ;       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  tc2_wire ;       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  ts3_wire ;       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  tc3_wire ;       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  tc4_wire ;       \n";
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<" //---------------------------------------\n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0] SS_out_wire ;     \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0] SC_out_wire ;     \n";
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<" //radix-2                             \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0] SS_R2_wire ;      \n";                              
sum16_csaout5 <<" //radix-4                             \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0] SS_R4_wire ;      \n";    
sum16_csaout5 <<" wire  [D_WIDTH-1:0] SC_R4_wire ;      \n";  
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<" //radix-8								\n";	   
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;    \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;    \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;    \n";
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  SS_R8_wire ;     \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;    \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0]  SC_R8_wire ;     \n";
sum16_csaout5 <<"                                       \n";
sum16_csaout5 <<" //-------                             \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout5 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n";
sum16_csaout5 <<"                                           \n";
sum16_csaout5 <<" 	//radix-2 operation                     \n";                                      
sum16_csaout5 <<" 	assign SS_R2_wire = {SEG_32_ZERO,A5_in,SEG_32_ZERO,A4_in};\n";
sum16_csaout5 <<"\n";
sum16_csaout5 <<"\n";
sum16_csaout5 <<"    //Radix-4 operation!!!    \n";
sum16_csaout5 <<"    assign SS_R4_wire = {A7_in[SEG4-1:0],    \n";
sum16_csaout5 <<"                         A6_in[SEG4-1:0],    \n";
sum16_csaout5 <<"                         A5_in[SEG4-1:0],    \n";
sum16_csaout5 <<"                         A4_in[SEG4-1:0]     \n";
sum16_csaout5 <<" 	                    };                    \n";
sum16_csaout5 <<" 	assign SC_R4_wire = {SEG_32_ZERO,A6_in[SEG6-1:SEG4],\n";
sum16_csaout5 <<" 	                     SEG_32_ZERO,A5_in[SEG6-1:SEG4],\n";
sum16_csaout5 <<" 				         SEG_32_ZERO,A4_in[SEG6-1:SEG4],\n";
sum16_csaout5 <<" 				         SEG_32_ZERO,A7_in[SEG6-1:SEG4] \n";
sum16_csaout5 <<" 				        } ;   	                        \n";
sum16_csaout5 <<"                                                       \n";
sum16_csaout5 <<" 	//Radix-8                                           \n";
sum16_csaout5 <<" 	assign op1_R8_wire  = {A3_in[SEG2-1:0],             \n";
sum16_csaout5 <<" 				           A6_in[SEG2-1:0],             \n";
sum16_csaout5 <<" 				           A1_in[SEG2-1:0],             \n";
sum16_csaout5 <<" 				           A4_in[SEG2-1:0],             \n";
sum16_csaout5 <<" 				           A7_in[SEG2-1:0],             \n";
sum16_csaout5 <<" 				           A2_in[SEG2-1:0],             \n";
sum16_csaout5 <<" 				           A5_in[SEG2-1:0],             \n";
sum16_csaout5 <<" 				           A0_in[SEG2-1:0]              \n";
sum16_csaout5 <<" 				           } ;                          \n";
sum16_csaout5 <<" 	//                                                  \n";
sum16_csaout5 <<" 	assign op2_R8_wire = {A6_in[SEG4-1:SEG2],           \n";
sum16_csaout5 <<" 				          A1_in[SEG4-1:SEG2],           \n";
sum16_csaout5 <<" 				          A4_in[SEG4-1:SEG2],           \n";
sum16_csaout5 <<" 				          A7_in[SEG4-1:SEG2],           \n";
sum16_csaout5 <<" 				          A2_in[SEG4-1:SEG2],           \n";
sum16_csaout5 <<" 				          A5_in[SEG4-1:SEG2],           \n";
sum16_csaout5 <<" 				          A0_in[SEG4-1:SEG2],           \n";
sum16_csaout5 <<" 				          A3_in[SEG4-1:SEG2]            \n";
sum16_csaout5 <<" 				          } ;			                \n";
sum16_csaout5 <<" 	//                                                  \n";
sum16_csaout5 <<" 	assign op3_R8_wire = {SEG_ZERO,A1_in[SEG6-1:SEG4],  \n";
sum16_csaout5 <<" 				          SEG_ZERO,A4_in[SEG6-1:SEG4],  \n";
sum16_csaout5 <<" 				          SEG_ZERO,A7_in[SEG6-1:SEG4],  \n";
sum16_csaout5 <<" 				          SEG_ZERO,A2_in[SEG6-1:SEG4],  \n";
sum16_csaout5 <<" 				          SEG_ZERO,A5_in[SEG6-1:SEG4],  \n";
sum16_csaout5 <<" 				          SEG_ZERO,A0_in[SEG6-1:SEG4],  \n";
sum16_csaout5 <<" 				          SEG_ZERO,A3_in[SEG6-1:SEG4],  \n";
sum16_csaout5 <<" 				          SEG_ZERO,A6_in[SEG6-1:SEG4]   \n";
sum16_csaout5 <<" 				          } ;                           \n";
sum16_csaout5 <<" 	                                                    \n";
sum16_csaout5 <<"                                                       \n";
sum16_csaout5 <<" 	//3-2 counter1                                      \n";
sum16_csaout5 <<" 	assign SS_R8_wire  = op1_R8_wire^op2_R8_wire^op3_R8_wire ;   \n";
sum16_csaout5 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;\n";
sum16_csaout5 <<"\n";
sum16_csaout5 <<" 	assign SC_R8_wire  = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]} ;\n";
sum16_csaout5 <<" 	                                                    \n";        
sum16_csaout5 <<"                                                       \n";
sum16_csaout5 <<" 	//Raidx-16                                          \n";
sum16_csaout5 <<" 	assign op1 = { A3_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A6_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A9_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				  A12_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				  A15_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A2_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A5_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A8_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				  A11_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				  A14_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A1_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A4_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A7_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				  A10_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				  A13_in[SEG1-1:0],                     \n";    
sum16_csaout5 <<" 				   A0_in[SEG1-1:0]                      \n";    
sum16_csaout5 <<" 				  } ;                                   \n";    
sum16_csaout5 <<" 	//                                                  \n";    
sum16_csaout5 <<" 	assign op2 = { A6_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A9_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				  A12_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				  A15_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A2_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A5_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A8_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				  A11_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				  A14_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A1_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A4_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A7_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				  A10_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				  A13_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A0_in[SEG2-1:SEG1],                  \n";    
sum16_csaout5 <<" 				   A3_in[SEG2-1:SEG1]                   \n";    
sum16_csaout5 <<" 				  } ;			                        \n";    
sum16_csaout5 <<" 	//                                                  \n";    
sum16_csaout5 <<" 	assign op3 = { A9_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				  A12_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				  A15_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A2_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A5_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A8_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				  A11_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				  A14_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A1_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A4_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A7_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				  A10_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				  A13_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A0_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A3_in[SEG3-1:SEG2],                  \n";    
sum16_csaout5 <<" 				   A6_in[SEG3-1:SEG2]                   \n";    
sum16_csaout5 <<" 				  } ;                                   \n";    
sum16_csaout5 <<" 	//                                                  \n";    
sum16_csaout5 <<" 	assign op4 = {A12_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				  A15_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A2_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A5_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A8_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				  A11_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				  A14_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A1_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A4_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A7_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				  A10_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				  A13_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A0_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A3_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A6_in[SEG4-1:SEG3],                  \n";    
sum16_csaout5 <<" 				   A9_in[SEG4-1:SEG3]                   \n";    
sum16_csaout5 <<" 				  } ;                                   \n";    
sum16_csaout5 <<" 	//                                                  \n";    
sum16_csaout5 <<" 	assign op5 = {A15_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A2_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A5_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A8_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				  A11_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				  A14_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A1_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A4_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A7_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				  A10_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				  A13_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A0_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A3_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A6_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				   A9_in[SEG5-1:SEG4],                  \n";    
sum16_csaout5 <<" 				  A12_in[SEG5-1:SEG4]                   \n";    
sum16_csaout5 <<" 				  } ;                                   \n";    
sum16_csaout5 <<" 	//                                                  \n";    
sum16_csaout5 <<" 	assign op6 = {SEG_ZERO,A2_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],         \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],         \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],         \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],         \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5],          \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],         \n";    
sum16_csaout5 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5]          \n";    
sum16_csaout5 <<" 				  } ;                                   \n";    
sum16_csaout5 <<" 	                                                    \n";    
sum16_csaout5 <<"                                                       \n";   
sum16_csaout5 <<" 	//3-2 counter1                                      \n";    
sum16_csaout5 <<" 	assign ts1_wire = op1^op2^op3 ;                     \n";    
sum16_csaout5 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;   \n";    
sum16_csaout5 <<" 	                                                    \n";    
sum16_csaout5 <<" 	//3-2 counter1                                      \n";    
sum16_csaout5 <<" 	assign ts2_wire = op4^op5^op6 ;                     \n";    
sum16_csaout5 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;   \n";    
sum16_csaout5 <<" 	                                                    \n";    
sum16_csaout5 <<" 	//3-2 counter1                                      \n";    
sum16_csaout5 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ;\n";
sum16_csaout5 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ;\n";
sum16_csaout5 <<" 	                                                    \n";
sum16_csaout5 <<" 	//3-2 counter1                                      \n";    
sum16_csaout5 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ;\n";
sum16_csaout5 <<" 	assign tc4_wire     = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout5 <<" 	                                                    \n";
sum16_csaout5 <<" 	assign SC_out_wire  = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";
sum16_csaout5 <<"\n";
sum16_csaout5 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout5 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout5 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout5 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO    :\n";
sum16_csaout5 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire; \n";
sum16_csaout5 <<" 	//output\n";
sum16_csaout5 <<"  assign SS_out  =  ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SS_out_wire : SS_out_wire;\n";
sum16_csaout5 <<"  assign SC_out  =  ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SC_out_wire : SC_out_wire;\n";
sum16_csaout5 <<"\n";
sum16_csaout5 <<"\n";
sum16_csaout5 <<" endmodule\n";
	 sum16_csaout5.close();
}	 
void configurable_BFFT::Sum16_CSAout6(std::string string_in){
	 std::ofstream sum16_csaout6;
     std::string         string_buf = "/Sum16_CSAout6.v";
     std::stringstream   ss;     
     ss << string_in << string_buf;          
	 sum16_csaout6.open(ss.str());
sum16_csaout6 <<" `timescale 1 ns/1 ps \n";
sum16_csaout6 <<" module Sum16_CSAout6(SS_out,          \n";
sum16_csaout6 <<" 				       SC_out,          \n";
sum16_csaout6 <<"                       A0_in,          \n";
sum16_csaout6 <<" 			            A1_in,          \n";
sum16_csaout6 <<" 			            A2_in,          \n";
sum16_csaout6 <<" 			            A3_in,          \n";
sum16_csaout6 <<" 			            A4_in,          \n";
sum16_csaout6 <<" 			            A5_in,          \n";
sum16_csaout6 <<" 			            A6_in,          \n";
sum16_csaout6 <<" 			            A7_in,          \n";
sum16_csaout6 <<" 			            A8_in,          \n";
sum16_csaout6 <<" 			            A9_in,          \n";
sum16_csaout6 <<" 			            A10_in,         \n";
sum16_csaout6 <<" 			            A11_in,         \n";
sum16_csaout6 <<" 			            A12_in,         \n";
sum16_csaout6 <<" 			            A13_in,         \n";
sum16_csaout6 <<" 			            A14_in,         \n";
sum16_csaout6 <<" 			            A15_in,         \n";
sum16_csaout6 <<"                      MixRadix_sel_in,	\n";					
sum16_csaout6 <<"                      BU_mode_sel_in   \n";
sum16_csaout6 <<"                      ) ;              \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<" parameter D_WIDTH     = 192 ;         \n";
sum16_csaout6 <<" parameter HD_WIDTH    = 96 ;          \n";
sum16_csaout6 <<" parameter P_WIDTH     = 64 ;          \n";
sum16_csaout6 <<" parameter D_ZERO      = 192'h0 ;      \n";
sum16_csaout6 <<" parameter HD_ZERO     = 96'h0 ;       \n";
sum16_csaout6 <<" parameter SEG_32_ZERO = 32'h0 ;       \n";
sum16_csaout6 <<" parameter SEG_ZERO    = 8'h0 ;        \n";
sum16_csaout6 <<" parameter SEG1        = 12 ;          \n";
sum16_csaout6 <<" parameter SEG2        = 24 ;          \n";
sum16_csaout6 <<" parameter SEG3        = 36 ;          \n";
sum16_csaout6 <<" parameter SEG4        = 48 ;          \n";
sum16_csaout6 <<" parameter SEG5        = 60 ;          \n";
sum16_csaout6 <<" parameter SEG6        = 64 ;          \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<" output[D_WIDTH-1:0] SS_out ;          \n";
sum16_csaout6 <<" output[D_WIDTH-1:0] SC_out ;          \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A0_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A1_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A2_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A3_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A4_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A5_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A6_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A7_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A8_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A9_in ;           \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A10_in ;          \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A11_in ;          \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A12_in ;          \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A13_in ;          \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A14_in ;          \n";
sum16_csaout6 <<" input [P_WIDTH-1:0] A15_in ;          \n";
sum16_csaout6 <<" input [1:0]         MixRadix_sel_in;  \n";
sum16_csaout6 <<" input               BU_mode_sel_in ;  \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  op1 ;            \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  op2 ;            \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  op3 ;            \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  op4 ;            \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  op5 ;            \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  op6 ;            \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  ts1_wire ;       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  tc1_wire ;       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  ts2_wire ;       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  tc2_wire ;       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  ts3_wire ;       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  tc3_wire ;       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  tc4_wire ;       \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<" //-------------------------------     \n";    
sum16_csaout6 <<" wire  [D_WIDTH-1:0] SS_out_wire ;     \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] SC_out_wire ;     \n";
sum16_csaout6 <<"                                       \n";
//---------------------------------------------------------------
//sum16_csaout6 <<" //radix-2 butterfly unit wire         \n";      
//sum16_csaout6 <<" wire  [HD_WIDTH-1:0]  op0_R2_wire ;   \n";     
//sum16_csaout6 <<" wire  [HD_WIDTH-1:0]  op1_R2_wire ;   \n";     
//sum16_csaout6 <<" wire  [HD_WIDTH-1:0]  SS_R2_wire ;    \n"; 
//sum16_csaout6 <<" wire  [HD_WIDTH-1:0]  SC_R2_wire ;    \n"; 
//sum16_csaout6 <<" wire  [HD_WIDTH-1:0]  ts1_R2_wire ;   \n";     
//sum16_csaout6 <<" wire  [HD_WIDTH-1:0]  tc1_R2_wire ;   \n";     
//sum16_csaout6 <<" wire  [HD_WIDTH-1:0]  c1_R2_wire ;    \n";   
sum16_csaout6 <<" //radix-2 butterfly unit wire         \n";      
sum16_csaout6 <<" wire  [P_WIDTH-1:0]  ts1_R2_wire ;   \n";     
sum16_csaout6 <<" wire  [P_WIDTH-1:0]  tc1_R2_wire ;   \n";     
sum16_csaout6 <<" wire  [P_WIDTH  :0]  c1_R2_wire ;    \n";
sum16_csaout6 <<" wire  [P_WIDTH  :0]  SS_R2_wire ;    \n"; 
sum16_csaout6 <<" wire  [P_WIDTH  :0]  SC_R2_wire ;    \n"; 
//-----------------------------------------------------------------
sum16_csaout6 <<" //Radix-4                             \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] SS_R4_wire;       \n";      
sum16_csaout6 <<" wire  [D_WIDTH-1:0] SC_R4_wire;       \n";
sum16_csaout6 <<"                                       \n";      
sum16_csaout6 <<" //radix-8                             \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] op1_R8_wire ;     \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] op2_R8_wire ;     \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] op3_R8_wire ;     \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] op4_R8_wire ;     \n";
sum16_csaout6 <<"                                       \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  ts1_R8_wire ;    \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;    \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  tc2_R8_wire ;    \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  SS_R8_wire ;     \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0]  SC_R8_wire ;     \n";
sum16_csaout6 <<" //--------------------------------------\n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout6 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n";                                        
sum16_csaout6 <<"                                           \n";
//------------------------------------------------------------------
//sum16_csaout6 <<"    //Radix-2 OP                           \n";    
//sum16_csaout6 <<"    assign op0_R2_wire = {SEG_32_ZERO,A6_in}; \n";
//sum16_csaout6 <<"    assign op1_R2_wire = {SEG_32_ZERO,A7_in}; \n"; 
//sum16_csaout6 <<"                                              \n";
//sum16_csaout6 <<"                                              \n";
//sum16_csaout6 <<" 	assign ts1_R2_wire =  op0_R2_wire ^ op1_R2_wire; \n";
//sum16_csaout6 <<" 	assign tc1_R2_wire = (op0_R2_wire & op1_R2_wire);\n";
//sum16_csaout6 <<"\n";
//sum16_csaout6 <<" 	assign SS_R2_wire = ({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R2_wire;          \n";
//sum16_csaout6 <<" 	assign c1_R2_wire = (({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) & ts1_R2_wire);        \n";
//sum16_csaout6 <<" 	assign SC_R2_wire = {c1_R2_wire[HD_WIDTH-2:0],1'b0} ;\n";
//sum16_csaout6 <<"	\n";
sum16_csaout6 <<"    //Radix-2 operation                           \n";    
sum16_csaout6 <<" 	assign ts1_R2_wire = A6_in ^ A7_in; \n";
sum16_csaout6 <<" 	assign tc1_R2_wire = A6_in & A7_in;\n";
sum16_csaout6 <<"\n";
sum16_csaout6 <<" 	assign SS_R2_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire;          \n";
sum16_csaout6 <<" 	assign c1_R2_wire = (({tc1_R2_wire,1'b0}) & ts1_R2_wire);        \n";
sum16_csaout6 <<" 	assign SC_R2_wire = {c1_R2_wire[P_WIDTH-1:0],1'b0} ;\n";
sum16_csaout6 <<"	\n";
//------------------------------------------------------------------------
sum16_csaout6 <<" 	//Radix-4 butterfly unit operation                                    \n";
sum16_csaout6 <<" 	assign SS_R4_wire = {SEG_32_ZERO,A5_in[SEG6-1:SEG4],A5_in[SEG4-1:0],  \n";
sum16_csaout6 <<" 					     SEG_32_ZERO,A4_in[SEG6-1:SEG4],A4_in[SEG4-1:0]   \n";
sum16_csaout6 <<" 					    } ;                                               \n";
sum16_csaout6 <<" 	assign SC_R4_wire = {SEG_32_ZERO,A7_in[SEG6-1:SEG4],A7_in[SEG4-1:0],  \n";
sum16_csaout6 <<" 					     SEG_32_ZERO,A6_in[SEG6-1:SEG4],A6_in[SEG4-1:0]   \n";
sum16_csaout6 <<" 					    } ;			         \n";
sum16_csaout6 <<"                                            \n";
sum16_csaout6 <<" 	//                                       \n";
sum16_csaout6 <<" 	assign op1_R8_wire = {A1_in[SEG4-1:SEG2],\n";
sum16_csaout6 <<" 				          A1_in[SEG2-1:0],   \n";
sum16_csaout6 <<" 	                      A2_in[SEG4-1:SEG2],\n";
sum16_csaout6 <<" 				          A2_in[SEG2-1:0],   \n";
sum16_csaout6 <<" 				          A3_in[SEG4-1:SEG2],\n";
sum16_csaout6 <<" 				          A3_in[SEG2-1:0],   \n";
sum16_csaout6 <<" 				          A0_in[SEG4-1:SEG2],\n";
sum16_csaout6 <<" 				          A0_in[SEG2-1:0]    \n";         
sum16_csaout6 <<" 				          } ;                \n";         
sum16_csaout6 <<" 	//                                       \n";         
sum16_csaout6 <<" 	assign op2_R8_wire = {A5_in[SEG4-1:SEG2],\n";         
sum16_csaout6 <<" 				          A5_in[SEG2-1:0],   \n";         
sum16_csaout6 <<" 	                      A6_in[SEG4-1:SEG2],\n";         
sum16_csaout6 <<" 				          A6_in[SEG2-1:0],   \n";         
sum16_csaout6 <<" 				          A7_in[SEG4-1:SEG2],\n";         
sum16_csaout6 <<" 				          A7_in[SEG2-1:0],   \n";         
sum16_csaout6 <<" 				          A4_in[SEG4-1:SEG2],\n";         
sum16_csaout6 <<" 				          A4_in[SEG2-1:0]    \n";         
sum16_csaout6 <<" 				          } ;			     \n";
sum16_csaout6 <<" 	//                                       \n";         
sum16_csaout6 <<" 	assign op3_R8_wire = {SEG_32_ZERO,A2_in[SEG6-1:SEG4],\n";
sum16_csaout6 <<" 				          SEG_32_ZERO,A3_in[SEG6-1:SEG4],\n";
sum16_csaout6 <<" 				          SEG_32_ZERO,A0_in[SEG6-1:SEG4],\n";
sum16_csaout6 <<" 				          SEG_32_ZERO,A1_in[SEG6-1:SEG4] \n";
sum16_csaout6 <<" 				          } ;                            \n";           
sum16_csaout6 <<" 	//                                                   \n";           
sum16_csaout6 <<" 	assign op4_R8_wire = {SEG_32_ZERO,A6_in[SEG6-1:SEG4],\n";           
sum16_csaout6 <<" 				          SEG_32_ZERO,A7_in[SEG6-1:SEG4],\n";           
sum16_csaout6 <<" 				          SEG_32_ZERO,A4_in[SEG6-1:SEG4],\n";           
sum16_csaout6 <<" 				          SEG_32_ZERO,A5_in[SEG6-1:SEG4] \n";           
sum16_csaout6 <<" 				          } ;                            \n";           
sum16_csaout6 <<"                                                        \n";          
sum16_csaout6 <<"                                                        \n";          
sum16_csaout6 <<" 	//3-2 counter1                                       \n";           
sum16_csaout6 <<" 	assign ts1_R8_wire = op1_R8_wire^op2_R8_wire^op3_R8_wire ;\n";
sum16_csaout6 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ; \n";
sum16_csaout6 <<" 	                                                     \n";
sum16_csaout6 <<" 	//3-2 counter1                                       \n";
sum16_csaout6 <<" 	assign SS_R8_wire  = ({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})^ts1_R8_wire^op4_R8_wire ; \n";
sum16_csaout6 <<" 	assign tc2_R8_wire = (({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&ts1_R8_wire)|(ts1_R8_wire&op4_R8_wire)|(({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&op4_R8_wire) ;  \n";
sum16_csaout6 <<"\n";           
sum16_csaout6 <<" 	assign SC_R8_wire  = {tc2_R8_wire[D_WIDTH-2:0],tc2_R8_wire[D_WIDTH-1]} ; \n";
sum16_csaout6 <<"\n";
sum16_csaout6 <<"\n";
sum16_csaout6 <<"\n";
sum16_csaout6 <<" 	//\n";
sum16_csaout6 <<" 	assign op1 = { A5_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A5_in[SEG1-1:0],   \n";
sum16_csaout6 <<" 	               A2_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A2_in[SEG1-1:0],   \n";
sum16_csaout6 <<" 				   A7_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A7_in[SEG1-1:0],   \n";
sum16_csaout6 <<" 				   A4_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A4_in[SEG1-1:0],   \n";
sum16_csaout6 <<" 				   A1_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A1_in[SEG1-1:0],   \n";
sum16_csaout6 <<" 				   A6_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A6_in[SEG1-1:0],   \n";
sum16_csaout6 <<" 				   A3_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A3_in[SEG1-1:0],   \n";
sum16_csaout6 <<" 				   A0_in[SEG2-1:SEG1],\n";
sum16_csaout6 <<" 				   A0_in[SEG1-1:0]    \n";
sum16_csaout6 <<" 				  } ;                 \n";
sum16_csaout6 <<" 	//                                \n";
sum16_csaout6 <<" 	assign op2 = { A2_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A2_in[SEG3-1:SEG2],\n";
sum16_csaout6 <<" 				   A7_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A7_in[SEG3-1:SEG2],\n";
sum16_csaout6 <<" 				   A4_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A4_in[SEG3-1:SEG2],\n";
sum16_csaout6 <<" 				   A1_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A1_in[SEG3-1:SEG2],\n";
sum16_csaout6 <<" 				   A6_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A6_in[SEG3-1:SEG2],\n";
sum16_csaout6 <<" 				   A3_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A3_in[SEG3-1:SEG2],\n";
sum16_csaout6 <<" 				   A0_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A0_in[SEG3-1:SEG2],\n";
sum16_csaout6 <<" 				   A5_in[SEG4-1:SEG3],\n";
sum16_csaout6 <<" 				   A5_in[SEG3-1:SEG2] \n";
sum16_csaout6 <<" 				  } ;			      \n";
sum16_csaout6 <<" 	//                                \n";
sum16_csaout6 <<" 	assign op3 = {SEG_ZERO,A7_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A7_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A4_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A1_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A6_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A3_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A0_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A5_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A2_in[SEG5-1:SEG4]          \n";
sum16_csaout6 <<" 				  } ;                         \n";
sum16_csaout6 <<" 	//                                 \n";
sum16_csaout6 <<" 	assign op4 = {A13_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				  A13_in[SEG1-1:0],    \n";
sum16_csaout6 <<" 	              A10_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				  A10_in[SEG1-1:0],    \n";
sum16_csaout6 <<" 				  A15_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				  A15_in[SEG1-1:0],    \n";
sum16_csaout6 <<" 				  A12_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				  A12_in[SEG1-1:0],    \n";
sum16_csaout6 <<" 				   A9_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				   A9_in[SEG1-1:0],    \n";
sum16_csaout6 <<" 				  A14_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				  A14_in[SEG1-1:0],    \n";
sum16_csaout6 <<" 				  A11_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				  A11_in[SEG1-1:0],    \n";
sum16_csaout6 <<" 				   A8_in[SEG2-1:SEG1], \n";
sum16_csaout6 <<" 				   A8_in[SEG1-1:0]     \n";
sum16_csaout6 <<" 				  } ;                  \n";
sum16_csaout6 <<" 	//                                 \n";
sum16_csaout6 <<" 	assign op5 = {A10_in[SEG4-1:SEG3], \n";
sum16_csaout6 <<" 				  A10_in[SEG3-1:SEG2], \n";                             
sum16_csaout6 <<" 				  A15_in[SEG4-1:SEG3], \n";                             
sum16_csaout6 <<" 				  A15_in[SEG3-1:SEG2], \n";                             
sum16_csaout6 <<" 				  A12_in[SEG4-1:SEG3], \n";                             
sum16_csaout6 <<" 				  A12_in[SEG3-1:SEG2], \n";                             
sum16_csaout6 <<" 				   A9_in[SEG4-1:SEG3], \n";                             
sum16_csaout6 <<" 				   A9_in[SEG3-1:SEG2], \n";                             
sum16_csaout6 <<" 				  A14_in[SEG4-1:SEG3], \n";                             
sum16_csaout6 <<" 				  A14_in[SEG3-1:SEG2], \n";                             
sum16_csaout6 <<" 				  A11_in[SEG4-1:SEG3], \n";                             
sum16_csaout6 <<" 				  A11_in[SEG3-1:SEG2], \n";                             
sum16_csaout6 <<" 				   A8_in[SEG4-1:SEG3], \n";                             
sum16_csaout6 <<" 				   A8_in[SEG3-1:SEG2], \n";                             
sum16_csaout6 <<" 				  A13_in[SEG4-1:SEG3], \n";                             
sum16_csaout6 <<" 				  A13_in[SEG3-1:SEG2]  \n";                             
sum16_csaout6 <<" 				  } ;                  \n";                             
sum16_csaout6 <<" 	//                                 \n";                             
sum16_csaout6 <<" 	assign op6 = {SEG_ZERO,A15_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A15_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A12_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5], \n";
sum16_csaout6 <<" 				  A9_in[SEG5-1:SEG4],          \n";
sum16_csaout6 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A14_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A11_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5], \n";
sum16_csaout6 <<" 				  A8_in[SEG5-1:SEG4],          \n";
sum16_csaout6 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A13_in[SEG5-1:SEG4],         \n";
sum16_csaout6 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],\n";
sum16_csaout6 <<" 				  A10_in[SEG5-1:SEG4]          \n";
sum16_csaout6 <<" 				  } ;                          \n";
sum16_csaout6 <<" 	                                           \n";
sum16_csaout6 <<"                                              \n";                    
sum16_csaout6 <<" 	//3-2 counter1                             \n";                     
sum16_csaout6 <<" 	assign ts1_wire = op1^op2^op3 ;            \n";                     
sum16_csaout6 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;\n";               
sum16_csaout6 <<" 	                                           \n";                     
sum16_csaout6 <<" 	//3-2 counter1                             \n";                     
sum16_csaout6 <<" 	assign ts2_wire = op4^op5^op6 ;            \n";                     
sum16_csaout6 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;\n";               
sum16_csaout6 <<" 	                                           \n";                     
sum16_csaout6 <<" 	//3-2 counter1                             \n";                     
sum16_csaout6 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ;\n";  
sum16_csaout6 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ;\n";   
sum16_csaout6 <<" 	\n";                                                                
sum16_csaout6 <<" 	//3-2 counter1  \n";                                                
sum16_csaout6 <<" 	assign SS_out_wire  = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ; \n";
sum16_csaout6 <<" 	assign tc4_wire     = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout6 <<" 	\n";                                                                    
sum16_csaout6 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";  
sum16_csaout6 <<"	\n";
sum16_csaout6 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout6 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SS_R2_wire}):\n";
sum16_csaout6 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout6 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SC_R2_wire}):\n";
sum16_csaout6 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;\n";
sum16_csaout6 <<"  //output\n";
sum16_csaout6 <<" 	assign SS_out = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SS_out_wire : SS_out_wire;\n";
sum16_csaout6 <<" 	assign SC_out = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SC_out_wire : SC_out_wire;\n";
sum16_csaout6 <<"\n"; 	                                                                
sum16_csaout6 <<"\n";                                                              
sum16_csaout6 <<" endmodule\n";
	 sum16_csaout6.close();	
}
void configurable_BFFT::Sum16_CSAout7(std::string string_in){
	 std::ofstream sum16_csaout7;
     std::string         string_buf = "/Sum16_CSAout7.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout7.open(ss.str());
sum16_csaout7 <<" `timescale 1 ns/1 ps \n";                 
sum16_csaout7 <<" module Sum16_CSAout7(SS_out,          \n";
sum16_csaout7 <<"                      SC_out,          \n";   
sum16_csaout7 <<"                      A0_in,           \n";
sum16_csaout7 <<"                      A1_in,           \n";   
sum16_csaout7 <<"                      A2_in,           \n";   
sum16_csaout7 <<"                      A3_in,           \n";   
sum16_csaout7 <<"                      A4_in,           \n";   
sum16_csaout7 <<"                      A5_in,           \n";   
sum16_csaout7 <<"                      A6_in,           \n";   
sum16_csaout7 <<"                      A7_in,           \n";   
sum16_csaout7 <<"                      A8_in,           \n";   
sum16_csaout7 <<"                      A9_in,           \n";   
sum16_csaout7 <<"                      A10_in,          \n";   
sum16_csaout7 <<"                      A11_in,          \n";   
sum16_csaout7 <<"                      A12_in,          \n";   
sum16_csaout7 <<"                      A13_in,          \n";   
sum16_csaout7 <<"                      A14_in,          \n";   
sum16_csaout7 <<"                      A15_in,          \n";
sum16_csaout7 <<"                      MixRadix_sel_in,	\n"; 
sum16_csaout7 <<"                      BU_mode_sel_in   \n";   
sum16_csaout7 <<"                      // clk           \n";
sum16_csaout7 <<"                      ) ;              \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" parameter D_WIDTH     = 192 ;         \n";
sum16_csaout7 <<" parameter P_WIDTH     = 64 ;          \n";
sum16_csaout7 <<" parameter D_ZERO      = 192'h0 ;      \n";
sum16_csaout7 <<" parameter SEG_32_ZERO = 32'h0 ;       \n";
sum16_csaout7 <<" parameter SEG_ZERO    = 8'h0 ;        \n";
sum16_csaout7 <<" parameter SEG1        = 12 ;          \n";
sum16_csaout7 <<" parameter SEG2        = 24 ;          \n";
sum16_csaout7 <<" parameter SEG3        = 36 ;          \n";
sum16_csaout7 <<" parameter SEG4        = 48 ;          \n";
sum16_csaout7 <<" parameter SEG5        = 60 ;          \n";
sum16_csaout7 <<" parameter SEG6        = 64 ;          \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" output[D_WIDTH-1:0] SS_out ;          \n";
sum16_csaout7 <<" output[D_WIDTH-1:0] SC_out ;          \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A0_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A1_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A2_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A3_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A4_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A5_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A6_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A7_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A8_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A9_in ;           \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A10_in ;          \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A11_in ;          \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A12_in ;          \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A13_in ;          \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A14_in ;          \n";
sum16_csaout7 <<" input [P_WIDTH-1:0] A15_in ;          \n";
sum16_csaout7 <<" input [1:0]         MixRadix_sel_in;  \n";
sum16_csaout7 <<" input               BU_mode_sel_in ;  \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  op1 ;            \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  op2 ;            \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  op3 ;            \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  op4 ;            \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  op5 ;            \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  op6 ;            \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  ts1_wire ;       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  tc1_wire ;       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  ts2_wire ;       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  tc2_wire ;       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  ts3_wire ;       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  tc3_wire ;       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0]  tc4_wire ;       \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<"  //-----------------------------------\n";           
sum16_csaout7 <<" wire  [D_WIDTH-1:0] SS_out_wire ;     \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] SC_out_wire ;     \n";
sum16_csaout7 <<" //radix-2                             \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] SS_R2_wire ;      \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" //RADIX-4                             \n";
sum16_csaout7 <<" wire [D_WIDTH-1:0] SS_R4_wire ;       \n"; 
sum16_csaout7 <<" wire [D_WIDTH-1:0] SC_R4_wire ;       \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" //Radix-8                             \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] op1_R8_wire ;     \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] op2_R8_wire ;     \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] op3_R8_wire ;     \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] SS_R8_wire ;      \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] tc1_R8_wire ;     \n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] SC_R8_wire ;      \n";
sum16_csaout7 <<" //--------------------------------------\n";
sum16_csaout7 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;\n"; 
sum16_csaout7 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;\n";                                        
sum16_csaout7 <<"\n";
sum16_csaout7 <<" 	//radix-2 butterfly unit  \n";                                                          
sum16_csaout7 <<" 	assign SS_R2_wire = {SEG_32_ZERO,A7_in,SEG_32_ZERO,A6_in}; \n";                     
sum16_csaout7 <<" \n";
sum16_csaout7 <<" 	//Radix-4 butterfly unit   \n";                                                   
sum16_csaout7 <<" 	assign  SS_R4_wire  = {A5_in[SEG4-1:0],       \n";                                
sum16_csaout7 <<" 	                       A6_in[SEG4-1:0],       \n";                                
sum16_csaout7 <<" 	                       A7_in[SEG4-1:0],       \n";                                
sum16_csaout7 <<" 	                       A4_in[SEG4-1:0]};      \n";                                
sum16_csaout7 <<" 	                                              \n";                                
sum16_csaout7 <<"    assign 	SC_R4_wire  = {SEG_32_ZERO,A6_in[SEG6-1:SEG4],      \n";                  
sum16_csaout7 <<" 	                       SEG_32_ZERO,A7_in[SEG6-1:SEG4],          \n";              
sum16_csaout7 <<" 	                       SEG_32_ZERO,A4_in[SEG6-1:SEG4],          \n";              
sum16_csaout7 <<" 	                       SEG_32_ZERO,A5_in[SEG6-1:SEG4]} ;        \n";
sum16_csaout7 <<"                                       \n";
sum16_csaout7 <<" 	//                                  \n"; 
sum16_csaout7 <<" 	assign op1_R8_wire = {A1_in[SEG2-1:0],\n";
sum16_csaout7 <<" 				  A2_in[SEG2-1:0],        \n";
sum16_csaout7 <<" 				  A3_in[SEG2-1:0],        \n";
sum16_csaout7 <<" 				  A4_in[SEG2-1:0],        \n";
sum16_csaout7 <<" 				  A5_in[SEG2-1:0],        \n";
sum16_csaout7 <<" 				  A6_in[SEG2-1:0],        \n";
sum16_csaout7 <<" 				  A7_in[SEG2-1:0],        \n";
sum16_csaout7 <<" 				  A0_in[SEG2-1:0]         \n";
sum16_csaout7 <<" 				  } ;                     \n";
sum16_csaout7 <<" 	//                                    \n";
sum16_csaout7 <<" 	assign op2_R8_wire = {A2_in[SEG4-1:SEG2],\n";
sum16_csaout7 <<" 				  A3_in[SEG4-1:SEG2],        \n";
sum16_csaout7 <<" 				  A4_in[SEG4-1:SEG2],        \n";
sum16_csaout7 <<" 				  A5_in[SEG4-1:SEG2],        \n";
sum16_csaout7 <<" 				  A6_in[SEG4-1:SEG2],        \n";
sum16_csaout7 <<" 				  A7_in[SEG4-1:SEG2],        \n";
sum16_csaout7 <<" 				  A0_in[SEG4-1:SEG2],        \n";
sum16_csaout7 <<" 				  A1_in[SEG4-1:SEG2]         \n";
sum16_csaout7 <<" 				  } ;			             \n";
sum16_csaout7 <<" 	//                                       \n";
sum16_csaout7 <<" 	assign op3_R8_wire = {SEG_ZERO,A3_in[SEG6-1:SEG4], \n";
sum16_csaout7 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG4],         \n";
sum16_csaout7 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG4],         \n";
sum16_csaout7 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG4],         \n";
sum16_csaout7 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG4],         \n";
sum16_csaout7 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG4],         \n";
sum16_csaout7 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG4],         \n";
sum16_csaout7 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG4]          \n";
sum16_csaout7 <<" 				  } ;                                  \n";
sum16_csaout7 <<" 	                                                   \n";
sum16_csaout7 <<"                                                      \n";
sum16_csaout7 <<" 	//3-2 counter1                                     \n";
sum16_csaout7 <<" 	assign SS_R8_wire  = op1_R8_wire ^ op2_R8_wire ^ op3_R8_wire ;   \n";                                         
sum16_csaout7 <<" 	assign tc1_R8_wire = (op1_R8_wire & op2_R8_wire)|(op2_R8_wire & op3_R8_wire)|(op1_R8_wire & op3_R8_wire) ;    \n";
sum16_csaout7 <<" 	                                                                 \n";         
sum16_csaout7 <<" 	assign SC_R8_wire  = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]} ; \n";            
sum16_csaout7 <<" 	\n";                                                                         
sum16_csaout7 <<"   \n";                                           
sum16_csaout7 <<"   \n";                                           
sum16_csaout7 <<" 	//                                          \n";
sum16_csaout7 <<" 	assign op1 = { A9_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A2_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				  A11_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A4_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				  A13_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A6_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				  A15_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A8_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A1_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				  A10_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A3_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				  A12_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A5_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				  A14_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A7_in[SEG1-1:0],             \n";
sum16_csaout7 <<" 				   A0_in[SEG1-1:0]              \n";
sum16_csaout7 <<" 				  } ;                           \n";
sum16_csaout7 <<" 	//                                          \n";
sum16_csaout7 <<" 	assign op2 = { A2_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				  A11_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A4_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				  A13_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A6_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				  A15_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A8_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A1_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				  A10_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A3_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				  A12_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A5_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				  A14_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A7_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A0_in[SEG2-1:SEG1],          \n";
sum16_csaout7 <<" 				   A9_in[SEG2-1:SEG1]           \n";
sum16_csaout7 <<" 				  } ;			                \n";
sum16_csaout7 <<" 	//                                          \n";
sum16_csaout7 <<" 	assign op3 = {A11_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A4_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				  A13_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A6_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				  A15_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A8_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A1_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				  A10_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A3_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				  A12_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A5_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				  A14_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A7_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A0_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A9_in[SEG3-1:SEG2],          \n";
sum16_csaout7 <<" 				   A2_in[SEG3-1:SEG2]           \n";
sum16_csaout7 <<" 				  } ;                           \n";
sum16_csaout7 <<" 	//                                          \n";
sum16_csaout7 <<" 	assign op4 = { A4_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				  A13_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A6_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				  A15_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A8_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A1_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				  A10_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A3_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				  A12_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A5_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				  A14_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A7_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A0_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A9_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				   A2_in[SEG4-1:SEG3],          \n";
sum16_csaout7 <<" 				  A11_in[SEG4-1:SEG3]           \n";
sum16_csaout7 <<" 				  } ;                           \n";
sum16_csaout7 <<" 	//                                          \n";
sum16_csaout7 <<" 	assign op5 = {A13_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A6_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				  A15_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A8_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A1_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				  A10_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A3_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				  A12_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A5_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				  A14_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A7_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A0_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A9_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A2_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				  A11_in[SEG5-1:SEG4],          \n";
sum16_csaout7 <<" 				   A4_in[SEG5-1:SEG4]           \n";
sum16_csaout7 <<" 				  } ;                           \n";
sum16_csaout7 <<" 	//                                          \n";
sum16_csaout7 <<" 	assign op6 = {SEG_ZERO,A6_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5], \n";
sum16_csaout7 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5], \n";
sum16_csaout7 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5], \n";
sum16_csaout7 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5], \n";
sum16_csaout7 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5], \n";
sum16_csaout7 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],  \n";
sum16_csaout7 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5]  \n";
sum16_csaout7 <<" 				  } ;                           \n";
sum16_csaout7 <<" 	                                            \n";
sum16_csaout7 <<"                                               \n";
sum16_csaout7 <<" 	//3-2 counter1                              \n";      
sum16_csaout7 <<" 	assign ts1_wire = op1^op2^op3 ;             \n";      
sum16_csaout7 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;\n"; 
sum16_csaout7 <<" 	                                                 \n"; 
sum16_csaout7 <<" 	//3-2 counter1                                   \n"; 
sum16_csaout7 <<" 	assign ts2_wire = op4^op5^op6 ;                  \n"; 
sum16_csaout7 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;\n"; 
sum16_csaout7 <<" 	                                                 \n"; 
sum16_csaout7 <<" 	//3-2 counter1                                   \n"; 
sum16_csaout7 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ;\n";
sum16_csaout7 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ;\n";
sum16_csaout7 <<"   \n";
sum16_csaout7 <<" 	//3-2 counter1\n";
sum16_csaout7 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ;\n";
sum16_csaout7 <<" 	assign tc4_wire = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout7 <<"   \n";
sum16_csaout7 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";
sum16_csaout7 <<"   \n";
sum16_csaout7 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout7 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout7 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout7 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO    :\n";
sum16_csaout7 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire; \n";
sum16_csaout7 <<" 	//output \n";
sum16_csaout7 <<" 	assign  SS_out  =  ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SS_out_wire  : SS_out_wire;  \n";
sum16_csaout7 <<" 	assign  SC_out  =  ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SC_out_wire  : SC_out_wire;  \n";
sum16_csaout7 <<" 	\n";                                                                  
sum16_csaout7 <<"   \n";                                                                 
sum16_csaout7 <<" endmodule  \n";                                                        
	 
	 sum16_csaout7.close();	
}
void configurable_BFFT::Sum16_CSAout8(std::string string_in){
	 std::ofstream sum16_csaout8;
     std::string         string_buf = "/Sum16_CSAout8.v";
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout8.open(ss.str());
sum16_csaout8 <<" `timescale 1 ns/1 ps            \n";                     
sum16_csaout8 <<" module Sum16_CSAout8(SS_out,    \n";          
sum16_csaout8 <<"                      SC_out,    \n";             
sum16_csaout8 <<"                      A0_in,     \n";          
sum16_csaout8 <<"                      A1_in,     \n";             
sum16_csaout8 <<"                      A2_in,     \n";             
sum16_csaout8 <<"                      A3_in,     \n";             
sum16_csaout8 <<"                      A4_in,     \n";             
sum16_csaout8 <<"                      A5_in,     \n";             
sum16_csaout8 <<"                      A6_in,     \n";             
sum16_csaout8 <<"                      A7_in,     \n";             
sum16_csaout8 <<"                      A8_in,     \n";             
sum16_csaout8 <<"                      A9_in,     \n";             
sum16_csaout8 <<"                      A10_in,    \n";             
sum16_csaout8 <<"                      A11_in,    \n";             
sum16_csaout8 <<"                      A12_in,    \n";             
sum16_csaout8 <<"                      A13_in,    \n";             
sum16_csaout8 <<"                      A14_in,    \n";             
sum16_csaout8 <<"                      A15_in,    \n";
sum16_csaout8 <<"                     MixRadix_sel_in,\n";					 
sum16_csaout8 <<"                     BU_mode_sel_in  \n";        
sum16_csaout8 <<"                      ) ;            \n";      
sum16_csaout8 <<"                                     \n";      
sum16_csaout8 <<" parameter D_WIDTH     = 192 ;       \n";      
sum16_csaout8 <<" parameter HD_WIDTH    = 96 ;        \n";      
sum16_csaout8 <<" parameter P_WIDTH     = 64 ;        \n";      
sum16_csaout8 <<" parameter D_ZERO      = 192'h0 ;    \n";      
sum16_csaout8 <<" parameter HD_ZERO     = 96'h0 ;     \n";      
sum16_csaout8 <<" parameter SEG_32_ZERO = 32'h0 ;     \n";      
sum16_csaout8 <<" parameter SEG_ZERO    = 8'h0 ;      \n";      
sum16_csaout8 <<" parameter SEG1_ZERO   = 12'h0 ;     \n";      
sum16_csaout8 <<" parameter SEG1        = 12 ;        \n";      
sum16_csaout8 <<" parameter SEG2        = 24 ;        \n";      
sum16_csaout8 <<" parameter SEG3        = 36 ;        \n";      
sum16_csaout8 <<" parameter SEG4        = 48 ;        \n";      
sum16_csaout8 <<" parameter SEG5        = 60 ;        \n";      
sum16_csaout8 <<" parameter SEG6        = 64 ;        \n";      
sum16_csaout8 <<"                                     \n";      
sum16_csaout8 <<"                                     \n";      
sum16_csaout8 <<" output[D_WIDTH-1:0] SS_out ;        \n";      
sum16_csaout8 <<" output[D_WIDTH-1:0] SC_out ;        \n";      
sum16_csaout8 <<"                                     \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A0_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A1_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A2_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A3_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A4_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A5_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A6_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A7_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A8_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A9_in ;         \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A10_in ;        \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A11_in ;        \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A12_in ;        \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A13_in ;        \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A14_in ;        \n";      
sum16_csaout8 <<" input [P_WIDTH-1:0] A15_in ;        \n";
sum16_csaout8 <<" input [1:0]         MixRadix_sel_in;\n";  
sum16_csaout8 <<" input               BU_mode_sel_in ;\n";      
sum16_csaout8 <<"                                     \n";      
sum16_csaout8 <<"                                     \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op1 ;          \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op2 ;          \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op3 ;          \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op4 ;          \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op5 ;          \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op6 ;          \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op7 ;          \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op8 ;          \n";      
sum16_csaout8 <<"                                     \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts1_wire ;     \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc1_wire ;     \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts2_wire ;     \n";      
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc2_wire ;     \n";       
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts3_wire ;     \n";       
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc3_wire ;     \n";       
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts4_wire ;     \n";       
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc4_wire ;     \n";       
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts5_wire ;     \n";       
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc5_wire ;     \n";       
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc6_wire ;     \n";       
sum16_csaout8 <<"                                     \n";       
sum16_csaout8 <<" //---------------------------------------\n";        
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  SS_out_wire ;       \n";  
sum16_csaout8 <<" wire  [D_WIDTH-1:0]  SC_out_wire ;       \n";  
sum16_csaout8 <<"\n";
//--------------------------------------------------------------
//sum16_csaout8 <<" //radix-2 butterfly unit wire            \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0]  op0_R2_wire ;      \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0]  op1_R2_wire ;      \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0]  SS_R2_wire ;       \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0]  SC_R2_wire ;       \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0]  ts1_R2_wire ;      \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0]  tc1_R2_wire ;      \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0]  c1_R2_wire ;       \n";

sum16_csaout8 <<" //radix-2 butterfly unit wire            \n";
sum16_csaout8 <<" wire  [P_WIDTH-1:0]  ts1_R2_wire ;      \n";
sum16_csaout8 <<" wire  [P_WIDTH-1:0]  tc1_R2_wire ;      \n";
sum16_csaout8 <<" wire  [P_WIDTH  :0]  c1_R2_wire ;       \n";
sum16_csaout8 <<" wire  [P_WIDTH  :0]  SS_R2_wire ;       \n";
sum16_csaout8 <<" wire  [P_WIDTH  :0]  SC_R2_wire ;       \n";
//--------------------------------------------------------------
sum16_csaout8 <<"                                          \n";
//sum16_csaout8 <<" //radix-4 butterfly unit wire            \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] op0_R4_wire;        \n";     
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] op1_R4_wire;        \n";     
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] op2_R4_wire;        \n";     
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] op3_R4_wire;        \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] SS_R4_wire;         \n";    
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] SC_R4_wire;         \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] ts1_R4_wire;        \n";     
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] tc1_R4_wire;        \n";
//sum16_csaout8 <<" wire  [HD_WIDTH-1:0] c1_R4_wire;         \n";

sum16_csaout8 <<" //radix-4 butterfly unit wire           \n";
sum16_csaout8 <<" wire  [P_WIDTH-1:0] ts1_R4_wire;        \n";     
sum16_csaout8 <<" wire  [P_WIDTH-1:0] tc1_R4_wire;        \n";
sum16_csaout8 <<" wire  [P_WIDTH  :0] c1_R4_wire;         \n";
sum16_csaout8 <<" wire  [P_WIDTH  :0] SS_R4_wire;         \n";
sum16_csaout8 <<" wire  [P_WIDTH  :0] SC_R4_wire;         \n";
//------------------------------------------------------------------
//sum16_csaout8 <<" //radix-8 butterfly unit wire!           \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op0_R8_wire ;       \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;       \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;       \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;       \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op4_R8_wire ;       \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op5_R8_wire ;       \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op6_R8_wire ;       \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  op7_R8_wire ;       \n";  
//sum16_csaout8 <<"                                          \n";  
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts1_R8_wire ;       \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;       \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  s1_R8_wire ;        \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  c1_R8_wire ;        \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts2_R8_wire ;       \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc2_R8_wire ;       \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  s2_R8_wire ;        \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  c2_R8_wire ;        \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  ts5_R8_wire ;       \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  tc5_R8_wire ;       \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0]  c5_R8_wire ;        \n";   
//sum16_csaout8 <<"                                          \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0] SS_R8_wire ;         \n";   
//sum16_csaout8 <<" wire  [D_WIDTH-1:0] SC_R8_wire ;         \n";

sum16_csaout8 <<" //radix-8 butterfly unit wire!           \n";  
sum16_csaout8 <<" wire  [P_WIDTH-1:0]  ts1_R8_wire ;       \n";   
sum16_csaout8 <<" wire  [P_WIDTH-1:0]  tc1_R8_wire ;       \n";   
sum16_csaout8 <<" wire  [P_WIDTH  :0]  s1_R8_wire ;        \n";   
sum16_csaout8 <<" wire  [P_WIDTH  :0]  c1_R8_wire ;        \n";   
sum16_csaout8 <<" wire  [P_WIDTH-1:0]  ts2_R8_wire ;       \n";   
sum16_csaout8 <<" wire  [P_WIDTH-1:0]  tc2_R8_wire ;       \n";   
sum16_csaout8 <<" wire  [P_WIDTH  :0]  s2_R8_wire ;        \n";   
sum16_csaout8 <<" wire  [P_WIDTH  :0]  c2_R8_wire ;        \n";   
sum16_csaout8 <<" wire  [P_WIDTH  :0]  ts5_R8_wire ;       \n";   
sum16_csaout8 <<" wire  [P_WIDTH  :0]  tc5_R8_wire ;       \n";   
sum16_csaout8 <<" wire  [P_WIDTH+1:0]  c5_R8_wire ;        \n";   
sum16_csaout8 <<"                                          \n";   
sum16_csaout8 <<" wire  [P_WIDTH+1:0]  SS_R8_wire ;         \n";   
sum16_csaout8 <<" wire  [P_WIDTH+1:0]  SC_R8_wire ;         \n";

//-----------------------------------------------------------------
sum16_csaout8 <<"                                          \n";
sum16_csaout8 <<" //-------------------------------------- \n";
//sum16_csaout8 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;\n"; 
//sum16_csaout8 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;\n";  
sum16_csaout8 <<" wire  [P_WIDTH+1:0] MixRadix_SS_out_wire;\n"; 
sum16_csaout8 <<" wire  [P_WIDTH+1:0] MixRadix_SC_out_wire;\n";  

sum16_csaout8 <<"                                          \n";
//-----------------------------------------------------------------
//sum16_csaout8 <<"    //Radix-2 operation                   \n";       
//sum16_csaout8 <<"    assign op0_R2_wire = {SEG_32_ZERO,A8_in};\n";
//sum16_csaout8 <<"    assign op1_R2_wire = {SEG_32_ZERO,A9_in};\n";
//sum16_csaout8 <<" 	 \n";
//sum16_csaout8 <<" 	assign ts1_R2_wire =  op0_R2_wire ^ op1_R2_wire;      \n";                                      
//sum16_csaout8 <<" 	assign tc1_R2_wire = (op0_R2_wire & op1_R2_wire);     \n";                                      
//sum16_csaout8 <<"                                                         \n";                                     
//sum16_csaout8 <<" 	assign SS_R2_wire = ({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R2_wire; \n";                  
//sum16_csaout8 <<" 	assign c1_R2_wire     = (({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) & ts1_R2_wire);\n";                 
//sum16_csaout8 <<" 	assign SC_R2_wire = {c1_R2_wire[HD_WIDTH-2:0],1'b0} ; \n";  
//sum16_csaout8 <<"   \n";
sum16_csaout8 <<"    //Radix-2 operation                   \n";       
sum16_csaout8 <<" 	assign ts1_R2_wire =  A8_in ^ A9_in;      \n";                                      
sum16_csaout8 <<" 	assign tc1_R2_wire =  A8_in & A9_in;     \n";                                      
sum16_csaout8 <<"                                                         \n";                                     
sum16_csaout8 <<" 	assign SS_R2_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire; \n";                  
sum16_csaout8 <<" 	assign c1_R2_wire = (({tc1_R2_wire,1'b0}) & ts1_R2_wire);\n";                 
sum16_csaout8 <<" 	assign SC_R2_wire = {c1_R2_wire[P_WIDTH-1:0],1'b0} ; \n";  
sum16_csaout8 <<"   \n";
//--------------------------------------------------------------------
//sum16_csaout8 <<"	//radix-4 \n";
//sum16_csaout8 <<" 	//op assign \n";                               
//sum16_csaout8 <<" 	assign op0_R4_wire = {SEG_32_ZERO,A8_in};  \n"; 
//sum16_csaout8 <<" 	assign op1_R4_wire = {SEG_32_ZERO,A9_in};  \n"; 
//sum16_csaout8 <<" 	assign op2_R4_wire = {SEG_32_ZERO,A10_in}; \n"; 
//sum16_csaout8 <<" 	assign op3_R4_wire = {SEG_32_ZERO,A11_in}; \n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign ts1_R4_wire = op0_R4_wire^op1_R4_wire^op2_R4_wire;\n";
//sum16_csaout8 <<" 	assign tc1_R4_wire = (op0_R4_wire & op1_R4_wire) | (op1_R4_wire & op2_R4_wire ) | ( op0_R4_wire & op2_R4_wire );  \n";
//sum16_csaout8 <<" 	                                            \n";              
//sum16_csaout8 <<" 	assign SS_R4_wire  = ({tc1_R4_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R4_wire ^ op3_R4_wire ; \n";
//sum16_csaout8 <<" 	assign c1_R4_wire  = (({tc1_R4_wire[HD_WIDTH-2:0],1'b0})&ts1_R4_wire)|(ts1_R4_wire&op3_R4_wire)|(({tc1_R4_wire[HD_WIDTH-2:0],1'b0})&op3_R4_wire);\n";
//sum16_csaout8 <<"   assign SC_R4_wire = {c1_R4_wire[HD_WIDTH-2:0],1'b0} ;         \n";                   	
//sum16_csaout8 <<"   \n";

sum16_csaout8 <<"	//radix-4 \n";
sum16_csaout8 <<" 	assign ts1_R4_wire = A8_in^A9_in^A10_in;\n";
sum16_csaout8 <<" 	assign tc1_R4_wire = (A8_in & A9_in) | (A9_in & A10_in) | (A8_in & A10_in );  \n";
sum16_csaout8 <<" 	                                            \n";              
sum16_csaout8 <<" 	assign SS_R4_wire = ({tc1_R4_wire,1'b0}) ^ ts1_R4_wire ^ A11_in ; \n";
sum16_csaout8 <<" 	assign c1_R4_wire = (({tc1_R4_wire,1'b0})&ts1_R4_wire)|(ts1_R4_wire&A11_in)|(({tc1_R4_wire,1'b0})&A11_in);\n";
sum16_csaout8 <<"   assign SC_R4_wire = {c1_R4_wire[P_WIDTH-1:0],1'b0} ;         \n";                   	
sum16_csaout8 <<"   \n";
//---------------------------------------------------------------------------------------------------------------
//sum16_csaout8 <<"   //radix-8   \n";
//sum16_csaout8 <<" 	//          \n";                               
//sum16_csaout8 <<" 	assign op0_R8_wire = {SEG_32_ZERO,A8_in} ; \n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign op1_R8_wire = {SEG_32_ZERO,A9_in} ; \n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign op2_R8_wire = {SEG_32_ZERO,A10_in} ;\n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign op3_R8_wire = {SEG_32_ZERO,A11_in} ;\n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign op4_R8_wire = {SEG_32_ZERO,A12_in} ;\n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign op5_R8_wire = {SEG_32_ZERO,A13_in} ;\n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign op6_R8_wire = {SEG_32_ZERO,A14_in} ;\n";
//sum16_csaout8 <<" 	//                                         \n";
//sum16_csaout8 <<" 	assign op7_R8_wire = {SEG_32_ZERO,A15_in} ;\n";
//sum16_csaout8 <<"                                              \n";
//sum16_csaout8 <<"                                              \n";
//sum16_csaout8 <<" 	//4-2 counter1                             \n";
//sum16_csaout8 <<" 	assign ts1_R8_wire = op0_R8_wire^op1_R8_wire^op2_R8_wire ;\n";
//sum16_csaout8 <<" 	assign tc1_R8_wire = (op0_R8_wire&op1_R8_wire)|(op1_R8_wire&op2_R8_wire)|(op0_R8_wire&op2_R8_wire) ; \n";
//sum16_csaout8 <<" 	                                           \n";                                    
//sum16_csaout8 <<" 	assign s1_R8_wire = ({tc1_R8_wire[D_WIDTH-2:0],1'd0})^ts1_R8_wire^op3_R8_wire ;\n";
//sum16_csaout8 <<" 	assign c1_R8_wire = (({tc1_R8_wire[D_WIDTH-2:0],1'd0})&ts1_R8_wire)|(ts1_R8_wire&op3_R8_wire)|(({tc1_R8_wire[D_WIDTH-2:0],1'd0})&op3_R8_wire) ;\n"; 
//sum16_csaout8 <<" 	\n";                                                                                
//sum16_csaout8 <<" 	//4-2 counter2   \n";                                                               
//sum16_csaout8 <<" 	assign ts2_R8_wire = op4_R8_wire^op5_R8_wire^op6_R8_wire ; \n";                     
//sum16_csaout8 <<" 	assign tc2_R8_wire = (op4_R8_wire&op5_R8_wire)|(op5_R8_wire&op6_R8_wire)|(op4_R8_wire&op6_R8_wire) ; \n";  
//sum16_csaout8 <<" 	\n";                                                                                
//sum16_csaout8 <<" 	assign s2_R8_wire = ({tc2_R8_wire[D_WIDTH-2:0],1'd0})^ts2_R8_wire^op7_R8_wire ;\n"; 
//sum16_csaout8 <<" 	assign c2_R8_wire = (({tc2_R8_wire[D_WIDTH-2:0],1'd0})&ts2_R8_wire)|(ts2_R8_wire&op7_R8_wire)|(({tc2_R8_wire[D_WIDTH-2:0],1'd0})&op7_R8_wire) ; \n";
//sum16_csaout8 <<" 	\n";                                                                                
//sum16_csaout8 <<" 	//4-2 counter5   \n";                                                               
//sum16_csaout8 <<" 	assign ts5_R8_wire = ({c1_R8_wire[D_WIDTH-2:0],1'd0})^s1_R8_wire^({c2_R8_wire[D_WIDTH-2:0],1'd0}) ;\n";
//sum16_csaout8 <<" 	assign tc5_R8_wire = (({c1_R8_wire[D_WIDTH-2:0],1'd0})&s1_R8_wire)|(s1_R8_wire&({c2_R8_wire[D_WIDTH-2:0],1'd0}))|(({c1_R8_wire[D_WIDTH-2:0],1'd0})&({c2_R8_wire[D_WIDTH-2:0],1'd0})) ; \n";
//sum16_csaout8 <<" 	                                                                                \n";
//sum16_csaout8 <<" 	assign SS_R8_wire = ({tc5_R8_wire[D_WIDTH-2:0],1'd0})^ts5_R8_wire^s2_R8_wire ;  \n";
//sum16_csaout8 <<" 	assign c5_R8_wire = (({tc5_R8_wire[D_WIDTH-2:0],1'd0})&ts5_R8_wire)|(ts5_R8_wire&s2_R8_wire)|(({tc5_R8_wire[D_WIDTH-2:0],1'd0})&s2_R8_wire) ; \n";
//sum16_csaout8 <<"                                                                                  \n";
//sum16_csaout8 <<" 	assign SC_R8_wire = {c5_R8_wire[D_WIDTH-2:0],1'd0} ;                           \n";


sum16_csaout8 <<"   //radix-8   \n";
sum16_csaout8 <<" 	//4-2 counter1                             \n";
sum16_csaout8 <<" 	assign ts1_R8_wire = A8_in^A9_in^A10_in ;\n";
sum16_csaout8 <<" 	assign tc1_R8_wire = (A8_in&A9_in)|(A9_in&A10_in)|(A8_in&A10_in) ; \n";
sum16_csaout8 <<" 	                                           \n";                                    
sum16_csaout8 <<" 	assign s1_R8_wire = ({tc1_R8_wire,1'd0})^ts1_R8_wire^A11_in ;\n";
sum16_csaout8 <<" 	assign c1_R8_wire = (({tc1_R8_wire,1'd0})&ts1_R8_wire)|(ts1_R8_wire&A11_in)|(({tc1_R8_wire,1'd0})&A11_in) ;\n"; 
sum16_csaout8 <<" 	\n";                                                                                
sum16_csaout8 <<" 	//4-2 counter2   \n";                                                               
sum16_csaout8 <<" 	assign ts2_R8_wire = A12_in^A13_in^A14_in ; \n";                     
sum16_csaout8 <<" 	assign tc2_R8_wire = (A12_in&A13_in)|(A13_in&A14_in)|(A12_in&A14_in) ; \n";  
sum16_csaout8 <<" 	\n";                                                                                
sum16_csaout8 <<" 	assign s2_R8_wire = ({tc2_R8_wire,1'd0})^ts2_R8_wire^A15_in ;\n"; 
sum16_csaout8 <<" 	assign c2_R8_wire = (({tc2_R8_wire,1'd0})&ts2_R8_wire)|(ts2_R8_wire&A15_in)|(({tc2_R8_wire,1'd0})&A15_in) ; \n";
sum16_csaout8 <<" 	\n";                                                                                
sum16_csaout8 <<" 	//4-2 counter5   \n";                                                               
sum16_csaout8 <<" 	assign ts5_R8_wire = ({c1_R8_wire,1'd0})^s1_R8_wire^({c2_R8_wire,1'd0}) ;\n";
sum16_csaout8 <<" 	assign tc5_R8_wire = (({c1_R8_wire,1'd0})&s1_R8_wire)|(s1_R8_wire&({c2_R8_wire,1'd0}))|(({c1_R8_wire,1'd0})&({c2_R8_wire,1'd0})) ; \n";
sum16_csaout8 <<" 	                                                                                \n";
sum16_csaout8 <<" 	assign SS_R8_wire = ({tc5_R8_wire,1'd0})^ts5_R8_wire^s2_R8_wire ;  \n";
sum16_csaout8 <<" 	assign c5_R8_wire = (({tc5_R8_wire,1'd0})&ts5_R8_wire)|(ts5_R8_wire&s2_R8_wire)|(({tc5_R8_wire,1'd0})&s2_R8_wire) ; \n";
sum16_csaout8 <<"                                                                                  \n";
sum16_csaout8 <<" 	assign SC_R8_wire = {c5_R8_wire[P_WIDTH:0],1'd0} ;                           \n";

//-----------------------------------------------------------------------------------------------------------------
sum16_csaout8 <<" 	                                                                                \n";
sum16_csaout8 <<"                                                                                  \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op1 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A1_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A1_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A1_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A1_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A1_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A1_in[SEG1-1:0],                                                  \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A0_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A0_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A0_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A0_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A0_in[SEG1-1:0]                                                   \n";
sum16_csaout8 <<" 				  } ;                                                               \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op2 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A3_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A3_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A3_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A3_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A3_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A3_in[SEG1-1:0],                                                  \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A2_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A2_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A2_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A2_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A2_in[SEG1-1:0]                                                   \n";
sum16_csaout8 <<" 				  } ;			                                                    \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op3 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A5_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A5_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A5_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A5_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A5_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A5_in[SEG1-1:0],                                                  \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A4_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A4_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A4_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A4_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A4_in[SEG1-1:0]                                                   \n";
sum16_csaout8 <<" 				  } ;                                                               \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op4 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A7_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A7_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A7_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A7_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A7_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A7_in[SEG1-1:0],                                                  \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A6_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A6_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A6_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A6_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A6_in[SEG1-1:0]                                                   \n";
sum16_csaout8 <<" 				  } ;                                                               \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op5 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A9_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A9_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A9_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A9_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A9_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A9_in[SEG1-1:0],                                                  \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],                                      \n";
sum16_csaout8 <<" 	              A8_in[SEG5-1:SEG4],                                               \n";
sum16_csaout8 <<" 	              A8_in[SEG4-1:SEG3],                                               \n";
sum16_csaout8 <<" 	              A8_in[SEG3-1:SEG2],                                               \n";
sum16_csaout8 <<" 				  A8_in[SEG2-1:SEG1],                                               \n";
sum16_csaout8 <<" 				  A8_in[SEG1-1:0]                                                   \n";
sum16_csaout8 <<" 				  } ;                                                               \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op6 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A11_in[SEG6-1:SEG5],                                     \n";
sum16_csaout8 <<" 	              A11_in[SEG5-1:SEG4],                                              \n";
sum16_csaout8 <<" 	              A11_in[SEG4-1:SEG3],                                              \n";
sum16_csaout8 <<" 	              A11_in[SEG3-1:SEG2],                                              \n";
sum16_csaout8 <<" 				  A11_in[SEG2-1:SEG1],                                              \n";
sum16_csaout8 <<" 				  A11_in[SEG1-1:0],                                                 \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],                                     \n";
sum16_csaout8 <<" 	              A10_in[SEG5-1:SEG4],                                              \n";
sum16_csaout8 <<" 	              A10_in[SEG4-1:SEG3],                                              \n";
sum16_csaout8 <<" 	              A10_in[SEG3-1:SEG2],                                              \n";
sum16_csaout8 <<" 				  A10_in[SEG2-1:SEG1],                                              \n";
sum16_csaout8 <<" 				  A10_in[SEG1-1:0]                                                  \n";
sum16_csaout8 <<" 				  } ;                                                               \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op7 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A13_in[SEG6-1:SEG5],                                     \n";
sum16_csaout8 <<" 	              A13_in[SEG5-1:SEG4],                                              \n";
sum16_csaout8 <<" 	              A13_in[SEG4-1:SEG3],                                              \n";
sum16_csaout8 <<" 	              A13_in[SEG3-1:SEG2],                                              \n";
sum16_csaout8 <<" 				  A13_in[SEG2-1:SEG1],                                              \n";
sum16_csaout8 <<" 				  A13_in[SEG1-1:0],                                                 \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],                                     \n";
sum16_csaout8 <<" 	              A12_in[SEG5-1:SEG4],                                              \n";
sum16_csaout8 <<" 	              A12_in[SEG4-1:SEG3],                                              \n";
sum16_csaout8 <<" 	              A12_in[SEG3-1:SEG2],                                              \n";
sum16_csaout8 <<" 				  A12_in[SEG2-1:SEG1],                                              \n";
sum16_csaout8 <<" 				  A12_in[SEG1-1:0]                                                  \n";
sum16_csaout8 <<" 				  } ;                                                               \n";
sum16_csaout8 <<" 	//                                                                              \n";
sum16_csaout8 <<" 	assign op8 = {SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 	              SEG_ZERO,A15_in[SEG6-1:SEG5],                                     \n";
sum16_csaout8 <<" 	              A15_in[SEG5-1:SEG4],                                              \n";
sum16_csaout8 <<" 	              A15_in[SEG4-1:SEG3],                                              \n";
sum16_csaout8 <<" 	              A15_in[SEG3-1:SEG2],                                              \n";
sum16_csaout8 <<" 				  A15_in[SEG2-1:SEG1],                                              \n";
sum16_csaout8 <<" 				  A15_in[SEG1-1:0],                                                 \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG1_ZERO,                                                        \n";
sum16_csaout8 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],                                     \n";
sum16_csaout8 <<" 	              A14_in[SEG5-1:SEG4],                                              \n";
sum16_csaout8 <<" 	              A14_in[SEG4-1:SEG3],                                              \n";
sum16_csaout8 <<" 	              A14_in[SEG3-1:SEG2],                                              \n";
sum16_csaout8 <<" 				  A14_in[SEG2-1:SEG1],                                              \n";
sum16_csaout8 <<" 				  A14_in[SEG1-1:0]                                                  \n";
sum16_csaout8 <<" 				  } ;                                                               \n";
sum16_csaout8 <<" 				                                                                    \n";
sum16_csaout8 <<" 				                                                                    \n";
sum16_csaout8 <<" 	//3-2 counter1                                                                  \n";
sum16_csaout8 <<" 	assign ts1_wire = op1^op2^op3 ;                                                 \n";
sum16_csaout8 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;                               \n";
sum16_csaout8 <<" 	                                                                                \n";
sum16_csaout8 <<" 	//3-2 counter1                                                                  \n";
sum16_csaout8 <<" 	assign ts2_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^op4 ;  \n";
sum16_csaout8 <<" 	assign tc2_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&op4)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&op4) ;\n"; 
sum16_csaout8 <<" 	                                                                                \n";
sum16_csaout8 <<" 	//3-2 counter1                                                                  \n";
sum16_csaout8 <<" 	assign ts3_wire = op5^op6^op7 ;                                                 \n";
sum16_csaout8 <<" 	assign tc3_wire = (op5&op6)|(op6&op7)|(op5&op7) ;                               \n";
sum16_csaout8 <<" 	                                                                                \n";
sum16_csaout8 <<" 	//3-2 counter1                                                                  \n";
sum16_csaout8 <<" 	assign ts4_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^op8 ;  \n";
sum16_csaout8 <<" 	assign tc4_wire = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&op8)|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&op8) ;\n";
sum16_csaout8 <<" 	                                                                                \n";                                          
sum16_csaout8 <<" 	//3-2 counter1                                                                  \n";                                          
sum16_csaout8 <<" 	assign ts5_wire = ({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})^ts2_wire^({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]}) ; \n";
sum16_csaout8 <<" 	assign tc5_wire = (({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})&ts2_wire)|(ts2_wire&({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]}))|(({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})&({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]})) ;\n";
sum16_csaout8 <<" 	                                                                                \n";       
sum16_csaout8 <<" 	//3-2 counter1                                                                  \n";       
sum16_csaout8 <<" 	assign SS_out_wire = ({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})^ts5_wire^ts4_wire ; \n";
sum16_csaout8 <<" 	assign tc6_wire    = (({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})&ts5_wire)|(ts5_wire&ts4_wire)|(({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})&ts4_wire) ; \n";
sum16_csaout8 <<" 	                                                                                \n";       
sum16_csaout8 <<" 	assign SC_out_wire = {tc6_wire[D_WIDTH-2:0],tc6_wire[D_WIDTH-1]} ;              \n";       
sum16_csaout8 <<"\n";
sum16_csaout8 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout8 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({1'd0,SS_R2_wire}):\n";
sum16_csaout8 <<"	                              (MixRadix_sel_in == 2'd1) ? ({1'd0,SS_R4_wire}): (SS_R8_wire);\n";
sum16_csaout8 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({1'd0,SC_R2_wire}):\n";
sum16_csaout8 <<"	                              (MixRadix_sel_in == 2'd1) ? ({1'd0,SC_R4_wire}): (SC_R8_wire); \n";
sum16_csaout8 <<" 	                                                                                 \n";
sum16_csaout8 <<" 	//output                                                                         \n";      
sum16_csaout8 <<" 	assign SS_out = ( BU_mode_sel_in == 1'd1 ) ? {126'd0,MixRadix_SS_out_wire} : SS_out_wire ;\n";                
sum16_csaout8 <<" 	assign SC_out = ( BU_mode_sel_in == 1'd1 ) ? {126'd0,MixRadix_SC_out_wire} : SC_out_wire ;\n";                
sum16_csaout8 <<" 	                                                                                 \n";      
sum16_csaout8 <<"                                                                                    \n";     
sum16_csaout8 <<" endmodule \n";                                                                              
	 
	 sum16_csaout8.close();	
}
void configurable_BFFT::Sum16_CSAout9(std::string string_in){
	 std::ofstream sum16_csaout9;
     std::string         string_buf = "/Sum16_CSAout9.v";
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout9.open(ss.str());
sum16_csaout9 <<" `timescale 1 ns/1 ps          \n";                       
sum16_csaout9 <<" module Sum16_CSAout9(SS_out,  \n";              
sum16_csaout9 <<"                      SC_out,  \n";                 
sum16_csaout9 <<"                      A0_in,   \n";              
sum16_csaout9 <<"                      A1_in,   \n";                 
sum16_csaout9 <<"                      A2_in,   \n";                 
sum16_csaout9 <<"                      A3_in,   \n";                 
sum16_csaout9 <<"                      A4_in,   \n";                 
sum16_csaout9 <<"                      A5_in,   \n";                 
sum16_csaout9 <<"                      A6_in,   \n";                 
sum16_csaout9 <<"                      A7_in,   \n";                 
sum16_csaout9 <<"                      A8_in,   \n";                 
sum16_csaout9 <<"                      A9_in,   \n";                 
sum16_csaout9 <<"                      A10_in,  \n";                 
sum16_csaout9 <<"                      A11_in,  \n";                 
sum16_csaout9 <<"                      A12_in,  \n";                 
sum16_csaout9 <<"                      A13_in,  \n";                 
sum16_csaout9 <<"                      A14_in,  \n";                 
sum16_csaout9 <<"                      A15_in,  \n";
sum16_csaout9 <<"                      MixRadix_sel_in,\n";					 
sum16_csaout9 <<"                      BU_mode_sel_in  \n";       
sum16_csaout9 <<"                      // clk          \n";       
sum16_csaout9 <<"                      ) ;             \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<" parameter D_WIDTH     = 192 ;        \n";       
sum16_csaout9 <<" parameter P_WIDTH     = 64 ;         \n";       
sum16_csaout9 <<" parameter D_ZERO      = 192'h0 ;     \n";
sum16_csaout9 <<" parameter SEG_32_ZERO = 32'h0 ;      \n";
sum16_csaout9 <<" parameter SEG_ZERO    = 8'h0 ;       \n";       
sum16_csaout9 <<" parameter SEG1        = 12 ;         \n";       
sum16_csaout9 <<" parameter SEG2        = 24 ;         \n";       
sum16_csaout9 <<" parameter SEG3        = 36 ;         \n";       
sum16_csaout9 <<" parameter SEG4        = 48 ;         \n";       
sum16_csaout9 <<" parameter SEG5        = 60 ;         \n";       
sum16_csaout9 <<" parameter SEG6        = 64 ;         \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<" output[D_WIDTH-1:0] SS_out ;         \n";       
sum16_csaout9 <<" output[D_WIDTH-1:0] SC_out ;         \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A0_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A1_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A2_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A3_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A4_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A5_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A6_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A7_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A8_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A9_in ;          \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A10_in ;         \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A11_in ;         \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A12_in ;         \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A13_in ;         \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A14_in ;         \n";       
sum16_csaout9 <<" input [P_WIDTH-1:0] A15_in ;         \n";
sum16_csaout9 <<" input [1:0]         MixRadix_sel_in; \n"; 
sum16_csaout9 <<" input               BU_mode_sel_in ; \n";       
sum16_csaout9 <<" // input               clk ;         \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op1 ;           \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op2 ;           \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op3 ;           \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op4 ;           \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op5 ;           \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op6 ;           \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  ts1_wire ;      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  tc1_wire ;      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  ts2_wire ;      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  tc2_wire ;      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  ts3_wire ;      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  tc3_wire ;      \n";       
sum16_csaout9 <<" // wire  [D_WIDTH-1:0]  ts4_wire ;   \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  tc4_wire ;      \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<" //Radix-8 butterfly unit wire        \n";       
sum16_csaout9 <<" wire[D_WIDTH-1:0] SS_out_wire ;      \n";       
sum16_csaout9 <<" wire[D_WIDTH-1:0] SC_out_wire ;      \n";       
sum16_csaout9 <<"                                      \n";
sum16_csaout9 <<" //radix-2                            \n";
sum16_csaout9 <<" wire  [D_WIDTH-1:0] SS_R2_wire ;     \n";                               
sum16_csaout9 <<" //radix-4                            \n";
sum16_csaout9 <<" wire  [D_WIDTH-1:0] SS_R4_wire ;     \n";     
sum16_csaout9 <<" wire  [D_WIDTH-1:0] SC_R4_wire ;     \n";   
sum16_csaout9 <<"                                      \n";
sum16_csaout9 <<" //RADIX-8                            \n";                
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;   \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;   \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;   \n";       
sum16_csaout9 <<"                                      \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;   \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  SS_R8_wire ;    \n";       
sum16_csaout9 <<" wire  [D_WIDTH-1:0]  SC_R8_wire ;    \n";       
sum16_csaout9 <<"                                      \n";
sum16_csaout9 <<" //-------                            \n";
sum16_csaout9 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;\n"; 
sum16_csaout9 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;\n";                                              
sum16_csaout9 <<" \n";
sum16_csaout9 <<" 	//radix-2 operation \n";                                                          
sum16_csaout9 <<" 	assign SS_R2_wire = {SEG_32_ZERO,A9_in,SEG_32_ZERO,A8_in}; \n";                    
 sum16_csaout9 <<"  \n";
sum16_csaout9 <<"  \n";
sum16_csaout9 <<"    //Radix-4 operation!!! \n";   
sum16_csaout9 <<"    assign SS_R4_wire = {A11_in[SEG4-1:0], \n";   
sum16_csaout9 <<"                         A10_in[SEG4-1:0], \n";   
sum16_csaout9 <<"                         A9_in[SEG4-1:0],  \n";  
sum16_csaout9 <<"                         A8_in[SEG4-1:0]   \n";  
sum16_csaout9 <<" 	                    };                  \n"; 
sum16_csaout9 <<" 	assign SC_R4_wire = {SEG_32_ZERO,A10_in[SEG6-1:SEG4], \n";
sum16_csaout9 <<" 	                     SEG_32_ZERO,A9_in[SEG6-1:SEG4],  \n";
sum16_csaout9 <<" 				         SEG_32_ZERO,A8_in[SEG6-1:SEG4],  \n";
sum16_csaout9 <<" 				         SEG_32_ZERO,A11_in[SEG6-1:SEG4]  \n";
sum16_csaout9 <<" 				        } ;   	                          \n";
sum16_csaout9 <<"                                                         \n";
sum16_csaout9 <<"                                                         \n";
sum16_csaout9 <<" 	//                                                    \n";
sum16_csaout9 <<" 	assign op1_R8_wire = {A15_in[SEG2-1:0],               \n";
sum16_csaout9 <<" 				          A14_in[SEG2-1:0],               \n";
sum16_csaout9 <<" 				          A13_in[SEG2-1:0],               \n";
sum16_csaout9 <<" 				          A12_in[SEG2-1:0],               \n";
sum16_csaout9 <<" 				          A11_in[SEG2-1:0],               \n";
sum16_csaout9 <<" 				          A10_in[SEG2-1:0],               \n";
sum16_csaout9 <<" 				          A9_in[SEG2-1:0],                \n";
sum16_csaout9 <<" 				          A8_in[SEG2-1:0]                 \n";
sum16_csaout9 <<" 				          } ;                             \n";
sum16_csaout9 <<" 	//                                                    \n";
sum16_csaout9 <<" 	assign op2_R8_wire = {A14_in[SEG4-1:SEG2],            \n";
sum16_csaout9 <<" 				          A13_in[SEG4-1:SEG2],            \n";
sum16_csaout9 <<" 				          A12_in[SEG4-1:SEG2],            \n";
sum16_csaout9 <<" 				          A11_in[SEG4-1:SEG2],            \n";
sum16_csaout9 <<" 				          A10_in[SEG4-1:SEG2],            \n";
sum16_csaout9 <<" 				          A9_in[SEG4-1:SEG2],             \n";
sum16_csaout9 <<" 				          A8_in[SEG4-1:SEG2],             \n";
sum16_csaout9 <<" 				          A15_in[SEG4-1:SEG2]             \n";
sum16_csaout9 <<" 				          } ;			                  \n";
sum16_csaout9 <<" 	//                                                    \n";
sum16_csaout9 <<" 	assign op3_R8_wire = {SEG_ZERO,A13_in[SEG6-1:SEG4],   \n";
sum16_csaout9 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG4],           \n";
sum16_csaout9 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG4],           \n";
sum16_csaout9 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG4],           \n";
sum16_csaout9 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG4],            \n";
sum16_csaout9 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG4],            \n";
sum16_csaout9 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG4],           \n";
sum16_csaout9 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG4]            \n";
sum16_csaout9 <<" 				  } ;                                     \n";
sum16_csaout9 <<" 	                                                      \n";
sum16_csaout9 <<"                                                         \n";
sum16_csaout9 <<" 	//3-2 counter1                                        \n";
sum16_csaout9 <<" 	assign SS_R8_wire  = op1_R8_wire^op2_R8_wire^op3_R8_wire ;\n";                                             
sum16_csaout9 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;\n";                         
sum16_csaout9 <<" 	                                                     \n";                     
sum16_csaout9 <<" 	assign SC_R8_wire  = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]} ;\n";             
sum16_csaout9 <<" 	\n";                                                                          
sum16_csaout9 <<"   \n";                                             
sum16_csaout9 <<" 	// \n";                                           
sum16_csaout9 <<" 	assign op1 = { A7_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				  A14_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A5_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				  A12_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A3_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				  A10_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A1_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A8_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				  A15_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A6_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				  A13_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A4_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				  A11_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A2_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A9_in[SEG1-1:0],               \n";
sum16_csaout9 <<" 				   A0_in[SEG1-1:0]                \n";
sum16_csaout9 <<" 				  } ;                             \n";
sum16_csaout9 <<" 	//                                            \n";
sum16_csaout9 <<" 	assign op2 = {A14_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A5_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				  A12_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A3_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				  A10_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A1_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A8_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				  A15_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A6_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				  A13_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A4_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				  A11_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A2_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A9_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A0_in[SEG2-1:SEG1],            \n";
sum16_csaout9 <<" 				   A7_in[SEG2-1:SEG1]             \n";
sum16_csaout9 <<" 				  } ;			                  \n";
sum16_csaout9 <<" 	//                                            \n";
sum16_csaout9 <<" 	assign op3 = { A5_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				  A12_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A3_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				  A10_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A1_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A8_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				  A15_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A6_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				  A13_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A4_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				  A11_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A2_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A9_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A0_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				   A7_in[SEG3-1:SEG2],            \n";
sum16_csaout9 <<" 				  A14_in[SEG3-1:SEG2]             \n";
sum16_csaout9 <<" 				  } ;                             \n";
sum16_csaout9 <<" 	//                                            \n";
sum16_csaout9 <<" 	assign op4 = {A12_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A3_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				  A10_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A1_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A8_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				  A15_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A6_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				  A13_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A4_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				  A11_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A2_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A9_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A0_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A7_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				  A14_in[SEG4-1:SEG3],            \n";
sum16_csaout9 <<" 				   A5_in[SEG4-1:SEG3]             \n";
sum16_csaout9 <<" 				  } ;                             \n";
sum16_csaout9 <<" 	//                                            \n";
sum16_csaout9 <<" 	assign op5 = { A3_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				  A10_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A1_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A8_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				  A15_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A6_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				  A13_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A4_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				  A11_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A2_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A9_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A0_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A7_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				  A14_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				   A5_in[SEG5-1:SEG4],            \n";
sum16_csaout9 <<" 				  A12_in[SEG5-1:SEG4]             \n";
sum16_csaout9 <<" 				  } ;                             \n";
sum16_csaout9 <<" 	//                                            \n";
sum16_csaout9 <<" 	assign op6 = {SEG_ZERO,A10_in[SEG6-1:SEG5],   \n";
sum16_csaout9 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],   \n";
sum16_csaout9 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],   \n";
sum16_csaout9 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],   \n";
sum16_csaout9 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],   \n";
sum16_csaout9 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],    \n";
sum16_csaout9 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],   \n";
sum16_csaout9 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5]     \n";
sum16_csaout9 <<" 				  } ;                             \n";
sum16_csaout9 <<" 	                                              \n";
sum16_csaout9 <<"                                                 \n";
sum16_csaout9 <<" 	//3-2 counter1                                \n";
sum16_csaout9 <<" 	assign ts1_wire = op1^op2^op3 ;               \n";
sum16_csaout9 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;\n";
sum16_csaout9 <<" 	                                                 \n";
sum16_csaout9 <<" 	//3-2 counter1                                   \n";
sum16_csaout9 <<" 	assign ts2_wire = op4^op5^op6 ;                  \n";
sum16_csaout9 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;\n";
sum16_csaout9 <<" 	                                                 \n";
sum16_csaout9 <<" 	//3-2 counter1                                   \n";
sum16_csaout9 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ; \n";
sum16_csaout9 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ; \n";
sum16_csaout9 <<" 	                                                  \n";
sum16_csaout9 <<" 	//3-2 counter1                                    \n";
sum16_csaout9 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ;  \n";
sum16_csaout9 <<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout9 <<" 	                                                  \n";                          
sum16_csaout9 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";
sum16_csaout9 <<"   \n";
sum16_csaout9 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout9 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout9 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout9 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO    :\n";
sum16_csaout9 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;\n"; 
sum16_csaout9 <<"   \n";
sum16_csaout9 <<" 	\n";                                                                            
sum16_csaout9 <<" 	//output \n";                                                                    
sum16_csaout9 <<" 	assign SS_out  = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SS_out_wire : SS_out_wire;\n";    
sum16_csaout9 <<" 	assign SC_out  = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SC_out_wire : SC_out_wire;\n";    
sum16_csaout9 <<" 	\n";                                                                            
sum16_csaout9 <<"   \n";                                                                           
sum16_csaout9 <<" endmodule \n";                                                                   
	 sum16_csaout9.close();	
}
void configurable_BFFT::Sum16_CSAout10(std::string string_in){
	 std::ofstream sum16_csaout10;
     std::string         string_buf = "/Sum16_CSAout10.v";
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout10.open(ss.str());
sum16_csaout10 <<" `timescale 1 ns/1 ps \n";
sum16_csaout10 <<" module Sum16_CSAout10(SS_out,\n";                
sum16_csaout10 <<"                       SC_out, \n";               
sum16_csaout10 <<"                       A0_in,  \n";               
sum16_csaout10 <<"                       A1_in,  \n";               
sum16_csaout10 <<"                       A2_in,  \n";               
sum16_csaout10 <<"                       A3_in,  \n";               
sum16_csaout10 <<"                       A4_in,  \n";               
sum16_csaout10 <<"                       A5_in,  \n";               
sum16_csaout10 <<"                       A6_in,  \n";               
sum16_csaout10 <<"                       A7_in,  \n";               
sum16_csaout10 <<"                       A8_in,  \n";               
sum16_csaout10 <<"                       A9_in,  \n";               
sum16_csaout10 <<"                       A10_in, \n";               
sum16_csaout10 <<"                       A11_in, \n";               
sum16_csaout10 <<"                       A12_in, \n";               
sum16_csaout10 <<"                       A13_in, \n";               
sum16_csaout10 <<"                       A14_in, \n";               
sum16_csaout10 <<"                       A15_in, \n";
sum16_csaout10 <<"                       MixRadix_sel_in,\n";					  
sum16_csaout10 <<"                       BU_mode_sel_in  \n";       
sum16_csaout10 <<"                       ) ;             \n";       
sum16_csaout10 <<"                                       \n";       
sum16_csaout10 <<" parameter D_WIDTH     = 192 ;         \n";    
sum16_csaout10 <<" parameter HD_WIDTH    = 96 ;          \n";
sum16_csaout10 <<" parameter P_WIDTH     = 64 ;          \n";       
sum16_csaout10 <<" parameter D_ZERO      = 192'h0 ;      \n";
sum16_csaout10 <<" parameter HD_ZERO     = 96'h0 ;       \n";
sum16_csaout10 <<" parameter SEG_32_ZERO = 32'h0 ;       \n";       
sum16_csaout10 <<" parameter SEG_ZERO    = 8'h0 ;        \n";       
sum16_csaout10 <<" parameter SEG1        = 12 ;          \n";       
sum16_csaout10 <<" parameter SEG2        = 24 ;          \n";       
sum16_csaout10 <<" parameter SEG3        = 36 ;          \n";       
sum16_csaout10 <<" parameter SEG4        = 48 ;          \n";       
sum16_csaout10 <<" parameter SEG5        = 60 ;          \n";       
sum16_csaout10 <<" parameter SEG6        = 64 ;          \n";       
sum16_csaout10 <<"                                       \n";       
sum16_csaout10 <<"                                       \n";       
sum16_csaout10 <<" output[D_WIDTH-1:0] SS_out ;          \n";       
sum16_csaout10 <<" output[D_WIDTH-1:0] SC_out ;          \n";       
sum16_csaout10 <<"                                       \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A0_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A1_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A2_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A3_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A4_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A5_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A6_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A7_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A8_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A9_in ;           \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A10_in ;          \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A11_in ;          \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A12_in ;          \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A13_in ;          \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A14_in ;          \n";       
sum16_csaout10 <<" input [P_WIDTH-1:0] A15_in ;          \n";
sum16_csaout10 <<" input [1:0]         MixRadix_sel_in;  \n";
sum16_csaout10 <<" input               BU_mode_sel_in;   \n";       
sum16_csaout10 <<"                                       \n";       
sum16_csaout10 <<"                                       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op1 ;            \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op2 ;            \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op3 ;            \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op4 ;            \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op5 ;            \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op6 ;            \n";       
sum16_csaout10 <<"                                       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  ts1_wire ;       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  tc1_wire ;       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  ts2_wire ;       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  tc2_wire ;       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  ts3_wire ;       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  tc3_wire ;       \n";       
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  tc4_wire ;       \n";       
sum16_csaout10 <<"                                       \n";
sum16_csaout10 <<" //----------------------------------  \n";
sum16_csaout10 <<" wire [D_WIDTH-1:0] SS_out_wire ;      \n";       
sum16_csaout10 <<" wire [D_WIDTH-1:0] SC_out_wire ;      \n";       
sum16_csaout10 <<" \n";
//------------------------------------------------------------------
//sum16_csaout10 <<" //radix-2               \n";
//sum16_csaout10 <<" wire  [HD_WIDTH-1:0]  op0_R2_wire ;        \n";
//sum16_csaout10 <<" wire  [HD_WIDTH-1:0]  op1_R2_wire ;        \n";
//sum16_csaout10 <<" wire  [HD_WIDTH-1:0]  SS_R2_wire ;         \n";
//sum16_csaout10 <<" wire  [HD_WIDTH-1:0]  SC_R2_wire ;         \n";
//sum16_csaout10 <<" wire  [HD_WIDTH-1:0]  ts1_R2_wire ;        \n";
//sum16_csaout10 <<" wire  [HD_WIDTH-1:0]  tc1_R2_wire ;        \n";
//sum16_csaout10 <<" wire  [HD_WIDTH-1:0]  c1_R2_wire ;         \n";

sum16_csaout10 <<" //radix-2               \n";
sum16_csaout10 <<" wire  [P_WIDTH-1:0]  ts1_R2_wire ;        \n";
sum16_csaout10 <<" wire  [P_WIDTH-1:0]  tc1_R2_wire ;        \n";
sum16_csaout10 <<" wire  [P_WIDTH  :0]  c1_R2_wire ;         \n";
sum16_csaout10 <<" wire  [P_WIDTH  :0]  SS_R2_wire ;         \n";
sum16_csaout10 <<" wire  [P_WIDTH  :0]  SC_R2_wire ;         \n";

//--------------------------------------------------------------------
sum16_csaout10 <<" //Radix-4                                  \n";
sum16_csaout10 <<" wire  [D_WIDTH-1:0] SS_R4_wire;            \n"; 
sum16_csaout10 <<" wire  [D_WIDTH-1:0] SC_R4_wire;            \n";
sum16_csaout10 <<"                                            \n";
sum16_csaout10 <<" //radix-8                                  \n";
sum16_csaout10 <<" wire [D_WIDTH-1:0] SS_R8_wire ;            \n";  
sum16_csaout10 <<" wire [D_WIDTH-1:0] SC_R8_wire ;            \n";  
sum16_csaout10 <<"                                            \n";  
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;         \n";  
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;         \n";  
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;         \n";  
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  op4_R8_wire ;         \n";  
sum16_csaout10 <<"                                            \n";  
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  ts1_R8_wire ;         \n";  
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;         \n";  
sum16_csaout10 <<" wire  [D_WIDTH-1:0]  tc2_R8_wire ;         \n";  
sum16_csaout10 <<"                                            \n";
sum16_csaout10 <<" //--------------------------------------   \n";
sum16_csaout10 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;  \n";
sum16_csaout10 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;  \n";                                             
sum16_csaout10 <<"                                            \n";
sum16_csaout10 <<"                                            \n";
//----------------------------------------------------------------------------
//sum16_csaout10 <<"    //Radix-2 OP                            \n";
//sum16_csaout10 <<"    assign op0_R2_wire = {SEG_32_ZERO,A10_in}; \n";
//sum16_csaout10 <<"    assign op1_R2_wire = {SEG_32_ZERO,A11_in}; \n"; 
//sum16_csaout10 <<"  \n";
//sum16_csaout10 <<" 	assign ts1_R2_wire =  op0_R2_wire ^ op1_R2_wire; \n";                                  
//sum16_csaout10 <<" 	assign tc1_R2_wire = (op0_R2_wire & op1_R2_wire);\n";  	
//sum16_csaout10 <<"  \n";
//sum16_csaout10 <<" 	assign SS_R2_wire = ({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R2_wire; \n";         
//sum16_csaout10 <<" 	assign c1_R2_wire = (({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) & ts1_R2_wire); \n";       
//sum16_csaout10 <<" 	assign SC_R2_wire = {c1_R2_wire[HD_WIDTH-2:0],1'b0} ;\n";
//sum16_csaout10 <<"	\n";

sum16_csaout10 <<"    //Radix-2 OP                            \n";
sum16_csaout10 <<" 	assign ts1_R2_wire =  A10_in ^ A11_in; \n";                                  
sum16_csaout10 <<" 	assign tc1_R2_wire = (A10_in & A11_in);\n";  	
sum16_csaout10 <<"  \n";
sum16_csaout10 <<" 	assign SS_R2_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire; \n";         
sum16_csaout10 <<" 	assign c1_R2_wire = (({tc1_R2_wire,1'b0}) & ts1_R2_wire); \n";       
sum16_csaout10 <<" 	assign SC_R2_wire = {c1_R2_wire[P_WIDTH-1:0],1'b0} ;\n";
sum16_csaout10 <<"	\n";
//------------------------------------------------------------------------------
sum16_csaout10 <<" 	//Radix-4 butterfly unit operation    \n";                                
sum16_csaout10 <<" 	assign SS_R4_wire = {SEG_32_ZERO,A9_in[SEG6-1:SEG4],A9_in[SEG4-1:0], \n"; 
sum16_csaout10 <<" 					     SEG_32_ZERO,A8_in[SEG6-1:SEG4],A8_in[SEG4-1:0]  \n"; 
sum16_csaout10 <<" 					    } ;                                              \n"; 
sum16_csaout10 <<" 	assign SC_R4_wire = {SEG_32_ZERO,A11_in[SEG6-1:SEG4],A11_in[SEG4-1:0],\n";  
sum16_csaout10 <<" 					     SEG_32_ZERO,A10_in[SEG6-1:SEG4],A10_in[SEG4-1:0] \n";  
sum16_csaout10 <<" 					    } ;			\n";
sum16_csaout10 <<"                                  \n";
sum16_csaout10 <<"  \n";
sum16_csaout10 <<" 	// radix-8    \n";                                   
sum16_csaout10 <<" 	assign op1_R8_wire = {A11_in[SEG4-1:SEG2], \n";                    
sum16_csaout10 <<" 				  A11_in[SEG2-1:0],            \n";                    
sum16_csaout10 <<" 	              A10_in[SEG4-1:SEG2],         \n";                    
sum16_csaout10 <<" 				  A10_in[SEG2-1:0],            \n";                    
sum16_csaout10 <<" 				  A9_in[SEG4-1:SEG2],          \n";                    
sum16_csaout10 <<" 				  A9_in[SEG2-1:0],             \n";                    
sum16_csaout10 <<" 				  A8_in[SEG4-1:SEG2],          \n";                    
sum16_csaout10 <<" 				  A8_in[SEG2-1:0]              \n";                    
sum16_csaout10 <<" 				  } ;                          \n";                    
sum16_csaout10 <<" 	//                                         \n";                    
sum16_csaout10 <<" 	assign op2_R8_wire = {A15_in[SEG4-1:SEG2], \n";                    
sum16_csaout10 <<" 				  A15_in[SEG2-1:0],            \n";                    
sum16_csaout10 <<" 	              A14_in[SEG4-1:SEG2],         \n";                    
sum16_csaout10 <<" 				  A14_in[SEG2-1:0],            \n";                    
sum16_csaout10 <<" 				  A13_in[SEG4-1:SEG2],         \n";                    
sum16_csaout10 <<" 				  A13_in[SEG2-1:0],            \n";                    
sum16_csaout10 <<" 				  A12_in[SEG4-1:SEG2],         \n";                    
sum16_csaout10 <<" 				  A12_in[SEG2-1:0]             \n";                    
sum16_csaout10 <<" 				  } ;			               \n";                    
sum16_csaout10 <<" 	//                                         \n";                    
sum16_csaout10 <<" 	assign op3_R8_wire = {SEG_32_ZERO,A10_in[SEG6-1:SEG4], \n";         
sum16_csaout10 <<" 				  SEG_32_ZERO,A9_in[SEG6-1:SEG4],          \n";         
sum16_csaout10 <<" 				  SEG_32_ZERO,A8_in[SEG6-1:SEG4],          \n";        
sum16_csaout10 <<" 				  SEG_32_ZERO,A11_in[SEG6-1:SEG4]          \n";        
sum16_csaout10 <<" 				  } ;                                      \n";        
sum16_csaout10 <<" 	//                                                     \n";        
sum16_csaout10 <<" 	assign op4_R8_wire = {SEG_32_ZERO,A14_in[SEG6-1:SEG4], \n";        
sum16_csaout10 <<" 				          SEG_32_ZERO,A13_in[SEG6-1:SEG4], \n";        
sum16_csaout10 <<" 				          SEG_32_ZERO,A12_in[SEG6-1:SEG4], \n";        
sum16_csaout10 <<" 				          SEG_32_ZERO,A15_in[SEG6-1:SEG4]  \n";        
sum16_csaout10 <<" 				          } ;                              \n";        
sum16_csaout10 <<"                                                         \n";           
sum16_csaout10 <<"                                                         \n";           
sum16_csaout10 <<" 	//3-2 counter1                                         \n";                                                                                                
sum16_csaout10 <<" 	assign ts1_R8_wire = op1_R8_wire^op2_R8_wire^op3_R8_wire ; \n";                                                                                            
sum16_csaout10 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire & op3_R8_wire)|(op1_R8_wire & op3_R8_wire) ;\n";                                                   
sum16_csaout10 <<" 	\n";                                                                                                                                                       
sum16_csaout10 <<" 	//3-2 counter1 \n";                                                                                                                                         
sum16_csaout10 <<" 	assign SS_R8_wire = ({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})^ts1_R8_wire^op4_R8_wire ;\n";                                                      
sum16_csaout10 <<" 	assign tc2_R8_wire = (({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&ts1_R8_wire)|(ts1_R8_wire&op4_R8_wire)|(({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&op4_R8_wire) ;\n";        
sum16_csaout10 <<" 	\n";                                                                                                                                                       
sum16_csaout10 <<" 	assign SC_R8_wire = {tc2_R8_wire[D_WIDTH-2:0],tc2_R8_wire[D_WIDTH-1]} ;\n";                                                                                
sum16_csaout10 <<" 	\n";                                                                                                                                                       
sum16_csaout10 <<"  \n";                                                                  
sum16_csaout10 <<" 	// \n";                                                            
sum16_csaout10 <<" 	assign op1 = { A3_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A3_in[SEG1-1:0],           \n";                     
sum16_csaout10 <<" 	               A6_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A6_in[SEG1-1:0],           \n";                     
sum16_csaout10 <<" 				   A1_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A1_in[SEG1-1:0],           \n";                     
sum16_csaout10 <<" 				   A4_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A4_in[SEG1-1:0],           \n";                     
sum16_csaout10 <<" 				   A7_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A7_in[SEG1-1:0],           \n";                     
sum16_csaout10 <<" 				   A2_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A2_in[SEG1-1:0],           \n";                     
sum16_csaout10 <<" 				   A5_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A5_in[SEG1-1:0],           \n";                     
sum16_csaout10 <<" 				   A0_in[SEG2-1:SEG1],        \n";                     
sum16_csaout10 <<" 				   A0_in[SEG1-1:0]            \n";                     
sum16_csaout10 <<" 				  } ;                         \n";                     
sum16_csaout10 <<" 	//                                        \n";                     
sum16_csaout10 <<" 	assign op2 = { A6_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A6_in[SEG3-1:SEG2],        \n";                     
sum16_csaout10 <<" 				   A1_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A1_in[SEG3-1:SEG2],        \n";                     
sum16_csaout10 <<" 				   A4_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A4_in[SEG3-1:SEG2],        \n";                     
sum16_csaout10 <<" 				   A7_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A7_in[SEG3-1:SEG2],        \n";                     
sum16_csaout10 <<" 				   A2_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A2_in[SEG3-1:SEG2],        \n";                     
sum16_csaout10 <<" 				   A5_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A5_in[SEG3-1:SEG2],        \n";                     
sum16_csaout10 <<" 				   A0_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A0_in[SEG3-1:SEG2],        \n";                     
sum16_csaout10 <<" 				   A3_in[SEG4-1:SEG3],        \n";                     
sum16_csaout10 <<" 				   A3_in[SEG3-1:SEG2]         \n";                     
sum16_csaout10 <<" 				  } ;			              \n";                     
sum16_csaout10 <<" 	//                                        \n";                     
sum16_csaout10 <<" 	assign op3 = {SEG_ZERO,A1_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A1_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A4_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A7_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A2_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A5_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A0_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A3_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A6_in[SEG5-1:SEG4]              \n";                 
sum16_csaout10 <<" 				  } ;                             \n";                 
sum16_csaout10 <<" 	//                                            \n";                 
sum16_csaout10 <<" 	assign op4 = {A11_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				  A11_in[SEG1-1:0],               \n";                 
sum16_csaout10 <<" 	              A14_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				  A14_in[SEG1-1:0],               \n";                 
sum16_csaout10 <<" 				   A9_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				   A9_in[SEG1-1:0],               \n";                 
sum16_csaout10 <<" 				  A12_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				  A12_in[SEG1-1:0],               \n";                 
sum16_csaout10 <<" 				  A15_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				  A15_in[SEG1-1:0],               \n";                 
sum16_csaout10 <<" 				  A10_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				  A10_in[SEG1-1:0],               \n";                 
sum16_csaout10 <<" 				  A13_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				  A13_in[SEG1-1:0],               \n";                 
sum16_csaout10 <<" 				   A8_in[SEG2-1:SEG1],            \n";                 
sum16_csaout10 <<" 				   A8_in[SEG1-1:0]                \n";                 
sum16_csaout10 <<" 				  } ;                             \n";                 
sum16_csaout10 <<" 	//                                            \n";                 
sum16_csaout10 <<" 	assign op5 = {A14_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				  A14_in[SEG3-1:SEG2],            \n";                 
sum16_csaout10 <<" 				   A9_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				   A9_in[SEG3-1:SEG2],            \n";                 
sum16_csaout10 <<" 				  A12_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				  A12_in[SEG3-1:SEG2],            \n";                 
sum16_csaout10 <<" 				  A15_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				  A15_in[SEG3-1:SEG2],            \n";                 
sum16_csaout10 <<" 				  A10_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				  A10_in[SEG3-1:SEG2],            \n";                 
sum16_csaout10 <<" 				  A13_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				  A13_in[SEG3-1:SEG2],            \n";                 
sum16_csaout10 <<" 				   A8_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				   A8_in[SEG3-1:SEG2],            \n";                 
sum16_csaout10 <<" 				  A11_in[SEG4-1:SEG3],            \n";                 
sum16_csaout10 <<" 				  A11_in[SEG3-1:SEG2]             \n";                 
sum16_csaout10 <<" 				  } ;                             \n";                 
sum16_csaout10 <<" 	//                                            \n";                 
sum16_csaout10 <<" 	assign op6 = {SEG_ZERO,A9_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A9_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],   \n";                 
sum16_csaout10 <<" 				  A12_in[SEG5-1:SEG4],            \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],   \n";                 
sum16_csaout10 <<" 				  A15_in[SEG5-1:SEG4],            \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],   \n";                 
sum16_csaout10 <<" 				  A10_in[SEG5-1:SEG4],            \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],   \n";                 
sum16_csaout10 <<" 				  A13_in[SEG5-1:SEG4],            \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],    \n";                 
sum16_csaout10 <<" 				  A8_in[SEG5-1:SEG4],             \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],   \n";                 
sum16_csaout10 <<" 				  A11_in[SEG5-1:SEG4],            \n";                 
sum16_csaout10 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],   \n";                 
sum16_csaout10 <<" 				  A14_in[SEG5-1:SEG4]             \n";                 
sum16_csaout10 <<" 				  } ;                             \n";                 
sum16_csaout10 <<" 	                                              \n";                 
sum16_csaout10 <<"                                                \n";                    
sum16_csaout10 <<" 	//3-2 counter1                                \n";                 
sum16_csaout10 <<" 	assign ts1_wire = op1^op2^op3 ;               \n";                 
sum16_csaout10 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ; \n";             
sum16_csaout10 <<" 	                                                  \n";             
sum16_csaout10 <<" 	//3-2 counter1                                    \n";             
sum16_csaout10 <<" 	assign ts2_wire = op4^op5^op6 ;                   \n";             
sum16_csaout10 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ; \n";             
sum16_csaout10 <<" 	                                                  \n";             
sum16_csaout10 <<" 	//3-2 counter1                                    \n";             
sum16_csaout10 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ; \n";
sum16_csaout10 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ;\n";
sum16_csaout10 <<" 	                                                  \n";                                  
sum16_csaout10 <<" 	//3-2 counter1                                    \n";                                  
sum16_csaout10 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ;\n";
sum16_csaout10 <<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout10 <<" 	                                                  \n";                                  
sum16_csaout10 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";                       
sum16_csaout10 <<"  \n";
sum16_csaout10 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout10 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SS_R2_wire}):\n";
sum16_csaout10 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout10 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SC_R2_wire}):\n";
sum16_csaout10 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;\n";   	                                                                                    
sum16_csaout10 <<" 	\n";                                                                           
sum16_csaout10 <<" 	//Output \n";                                                                  
sum16_csaout10 <<" 	assign  SS_out  = ( BU_mode_sel_in == 1'b1) ?  MixRadix_SS_out_wire : SS_out_wire;\n";   
sum16_csaout10 <<" 	assign  SC_out  = ( BU_mode_sel_in == 1'b1) ?  MixRadix_SC_out_wire : SC_out_wire;\n";   
sum16_csaout10 <<" 	\n";                                                                           
sum16_csaout10 <<"  \n";                                                                              
sum16_csaout10 <<" endmodule \n";                                                                      	 
	 sum16_csaout10.close();
}
void configurable_BFFT::Sum16_CSAout11(std::string string_in){
	 std::ofstream sum16_csaout11;
     std::string         string_buf = "/Sum16_CSAout11.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout11.open(ss.str());
sum16_csaout11<<" `timescale 1 ns/1 ps \n";                    
sum16_csaout11<<" module Sum16_CSAout11(SS_out,   \n";        
sum16_csaout11<<"                       SC_out,   \n";        
sum16_csaout11<<"                       A0_in,    \n";        
sum16_csaout11<<"                       A1_in,    \n";        
sum16_csaout11<<"                       A2_in,    \n";        
sum16_csaout11<<"                       A3_in,    \n";        
sum16_csaout11<<"                       A4_in,    \n";        
sum16_csaout11<<"                       A5_in,    \n";        
sum16_csaout11<<"                       A6_in,    \n";        
sum16_csaout11<<"                       A7_in,    \n";        
sum16_csaout11<<"                       A8_in,    \n";        
sum16_csaout11<<"                       A9_in,    \n";        
sum16_csaout11<<"                       A10_in,   \n";        
sum16_csaout11<<"                       A11_in,   \n";        
sum16_csaout11<<"                       A12_in,   \n";        
sum16_csaout11<<"                       A13_in,   \n";        
sum16_csaout11<<"                       A14_in,   \n";        
sum16_csaout11<<"                       A15_in,   \n";
sum16_csaout11<<"                      MixRadix_sel_in,\n";					  
sum16_csaout11<<"                       BU_mode_sel_in \n";   
sum16_csaout11<<"                       // clk         \n";   
sum16_csaout11<<"                       ) ;            \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<" parameter D_WIDTH     = 192 ;        \n";   
sum16_csaout11<<" parameter P_WIDTH     = 64 ;         \n";   
sum16_csaout11<<" parameter D_ZERO      = 192'h0 ;     \n";
sum16_csaout11<<" parameter SEG_32_ZERO = 32'h0 ;      \n";
sum16_csaout11<<" parameter SEG_ZERO    = 8'h0 ;       \n";   
sum16_csaout11<<" parameter SEG1        = 12 ;         \n";   
sum16_csaout11<<" parameter SEG2        = 24 ;         \n";   
sum16_csaout11<<" parameter SEG3        = 36 ;         \n";   
sum16_csaout11<<" parameter SEG4        = 48 ;         \n";   
sum16_csaout11<<" parameter SEG5        = 60 ;         \n";   
sum16_csaout11<<" parameter SEG6        = 64 ;         \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<" output[D_WIDTH-1:0] SS_out ;         \n";   
sum16_csaout11<<" output[D_WIDTH-1:0] SC_out ;         \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A0_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A1_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A2_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A3_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A4_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A5_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A6_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A7_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A8_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A9_in ;          \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A10_in ;         \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A11_in ;         \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A12_in ;         \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A13_in ;         \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A14_in ;         \n";   
sum16_csaout11<<" input [P_WIDTH-1:0] A15_in ;         \n";
sum16_csaout11<<" input [1:0]         MixRadix_sel_in; \n"; 
sum16_csaout11<<" input               BU_mode_sel_in;  \n";   
sum16_csaout11<<" // input               clk ;         \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  op1 ;           \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  op2 ;           \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  op3 ;           \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  op4 ;           \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  op5 ;           \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  op6 ;           \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  ts1_wire ;      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  tc1_wire ;      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  ts2_wire ;      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  tc2_wire ;      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  ts3_wire ;      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  tc3_wire ;      \n";   
sum16_csaout11<<" // wire  [D_WIDTH-1:0]  ts4_wire ;   \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0]  tc4_wire ;      \n";   
sum16_csaout11<<" //-----------------------            \n";                             
sum16_csaout11<<" wire  [D_WIDTH-1:0] SS_out_wire ;    \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0] SC_out_wire ;    \n";   
sum16_csaout11<<"                                      \n";
sum16_csaout11<<" //radix-2                            \n";
sum16_csaout11<<" wire  [D_WIDTH-1:0] SS_R2_wire ;     \n";
sum16_csaout11<<"                                      \n";
sum16_csaout11<<" //RADIX-4                            \n";
sum16_csaout11<<" wire [D_WIDTH-1:0] SS_R4_wire ;      \n";  
sum16_csaout11<<" wire [D_WIDTH-1:0] SC_R4_wire ;      \n";
sum16_csaout11<<"                                      \n";
sum16_csaout11<<" //Radix-8                            \n";
sum16_csaout11<<" wire  [D_WIDTH-1:0] SS_R8_wire ;     \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0] SC_R8_wire ;     \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0] op1_R8_wire ;    \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0] op2_R8_wire ;    \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0] op3_R8_wire ;    \n";   
sum16_csaout11<<"                                      \n";   
sum16_csaout11<<" wire  [D_WIDTH-1:0] tc1_R8_wire ;    \n";   
sum16_csaout11<<" //--------------------------------------\n";
sum16_csaout11<<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;\n"; 
sum16_csaout11<<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;\n";                                          
sum16_csaout11<<" \n";
sum16_csaout11<<" 	//radix-2 butterfly unit                                    \n";
sum16_csaout11<<" 	assign SS_R2_wire = {SEG_32_ZERO,A11_in,SEG_32_ZERO,A10_in};\n";
sum16_csaout11<<" \n";
sum16_csaout11<<" 	//Radix-4 butterfly unit                 \n";                                     
sum16_csaout11<<" 	assign  SS_R4_wire  = {A9_in[SEG4-1:0],  \n";                                     
sum16_csaout11<<" 	                       A10_in[SEG4-1:0], \n";                                      
sum16_csaout11<<" 	                       A11_in[SEG4-1:0], \n";                                      
sum16_csaout11<<" 	                       A8_in[SEG4-1:0]}; \n";                                     
sum16_csaout11<<" 	                                         \n";                                     
sum16_csaout11<<"    assign 	SC_R4_wire  = {SEG_32_ZERO,A10_in[SEG6-1:SEG4],  \n";                      
sum16_csaout11<<" 	                       SEG_32_ZERO,A11_in[SEG6-1:SEG4],      \n";                  
sum16_csaout11<<" 	                       SEG_32_ZERO,A8_in[SEG6-1:SEG4],       \n";                 
sum16_csaout11<<" 	                       SEG_32_ZERO,A9_in[SEG6-1:SEG4]} ;     \n";                                      
sum16_csaout11<<" 	//                                                           \n";
sum16_csaout11<<" 	assign op1_R8_wire = {A13_in[SEG2-1:0],                      \n";
sum16_csaout11<<" 				          A10_in[SEG2-1:0],                      \n";
sum16_csaout11<<" 				          A15_in[SEG2-1:0],                      \n";
sum16_csaout11<<" 				          A12_in[SEG2-1:0],                      \n";
sum16_csaout11<<" 				          A9_in[SEG2-1:0],                       \n";
sum16_csaout11<<" 				          A14_in[SEG2-1:0],                      \n";
sum16_csaout11<<" 				          A11_in[SEG2-1:0],                      \n";
sum16_csaout11<<" 				          A8_in[SEG2-1:0]                        \n";
sum16_csaout11<<" 				          } ;                                    \n";
sum16_csaout11<<" 	//                                                           \n";
sum16_csaout11<<" 	assign op2_R8_wire = {A10_in[SEG4-1:SEG2],                   \n";
sum16_csaout11<<" 				          A15_in[SEG4-1:SEG2],                   \n";
sum16_csaout11<<" 				          A12_in[SEG4-1:SEG2],                   \n";
sum16_csaout11<<" 				          A9_in[SEG4-1:SEG2],                    \n";
sum16_csaout11<<" 				          A14_in[SEG4-1:SEG2],                   \n";
sum16_csaout11<<" 				          A11_in[SEG4-1:SEG2],                   \n";
sum16_csaout11<<" 				          A8_in[SEG4-1:SEG2],                    \n";
sum16_csaout11<<" 				          A13_in[SEG4-1:SEG2]                    \n";
sum16_csaout11<<" 				          } ;			                         \n";
sum16_csaout11<<" 	//                                                           \n";
sum16_csaout11<<" 	assign op3_R8_wire = {SEG_ZERO,A15_in[SEG6-1:SEG4],          \n";
sum16_csaout11<<" 				  SEG_ZERO,A12_in[SEG6-1:SEG4],                  \n";
sum16_csaout11<<" 				  SEG_ZERO,A9_in[SEG6-1:SEG4],                   \n";
sum16_csaout11<<" 				  SEG_ZERO,A14_in[SEG6-1:SEG4],                  \n";
sum16_csaout11<<" 				  SEG_ZERO,A11_in[SEG6-1:SEG4],                  \n";
sum16_csaout11<<" 				  SEG_ZERO,A8_in[SEG6-1:SEG4],                   \n";
sum16_csaout11<<" 				  SEG_ZERO,A13_in[SEG6-1:SEG4],                  \n";
sum16_csaout11<<" 				  SEG_ZERO,A10_in[SEG6-1:SEG4]                   \n";
sum16_csaout11<<" 				  } ;                                            \n";
sum16_csaout11<<" 	                                                             \n";
sum16_csaout11<<"                                                                \n";
sum16_csaout11<<" 	//3-2 counter1                                               \n";
sum16_csaout11<<" 	assign SS_R8_wire  = op1_R8_wire^op2_R8_wire^op3_R8_wire;    \n";
sum16_csaout11<<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ; \n";
sum16_csaout11<<" 	                                                                              \n";
sum16_csaout11<<" 	assign SC_R8_wire  = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]} ;      \n";
sum16_csaout11<<" 	\n";                                                                              
sum16_csaout11<<" 	//\n";                                                  
sum16_csaout11<<" 	assign op1 = {A13_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				  A10_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A7_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A4_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A1_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				  A14_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				  A11_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A8_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A5_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A2_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				  A15_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				  A12_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A9_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A6_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A3_in[SEG1-1:0],    \n";                 
sum16_csaout11<<" 				   A0_in[SEG1-1:0]     \n";                 
sum16_csaout11<<" 				  } ;                  \n";                 
sum16_csaout11<<" 	//                                 \n";                 
sum16_csaout11<<" 	assign op2 = {A10_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A7_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A4_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A1_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				  A14_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				  A11_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A8_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A5_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A2_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				  A15_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				  A12_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A9_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A6_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A3_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				   A0_in[SEG2-1:SEG1], \n";                 
sum16_csaout11<<" 				  A13_in[SEG2-1:SEG1]  \n";                 
sum16_csaout11<<" 				  } ;			       \n";                 
sum16_csaout11<<" 	//                                 \n";                 
sum16_csaout11<<" 	assign op3 = { A7_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A4_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A1_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				  A14_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				  A11_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A8_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A5_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A2_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				  A15_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				  A12_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A9_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A6_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A3_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				   A0_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				  A13_in[SEG3-1:SEG2], \n";                 
sum16_csaout11<<" 				  A10_in[SEG3-1:SEG2]  \n";                 
sum16_csaout11<<" 				  } ;                  \n";                 
sum16_csaout11<<" 	//                                 \n";                 
sum16_csaout11<<" 	assign op4 = { A4_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A1_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				  A14_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				  A11_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A8_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A5_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A2_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				  A15_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				  A12_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A9_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A6_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A3_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A0_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				  A13_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				  A10_in[SEG4-1:SEG3], \n";                 
sum16_csaout11<<" 				   A7_in[SEG4-1:SEG3]  \n";                 
sum16_csaout11<<" 				  } ;                  \n";                 
sum16_csaout11<<" 	//                                 \n";                 
sum16_csaout11<<" 	assign op5 = { A1_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				  A14_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				  A11_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A8_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A5_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A2_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				  A15_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				  A12_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A9_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A6_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A3_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A0_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				  A13_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				  A10_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A7_in[SEG5-1:SEG4], \n";                 
sum16_csaout11<<" 				   A4_in[SEG5-1:SEG4]  \n";                 
sum16_csaout11<<" 				  } ;                  \n";                 
sum16_csaout11<<" 	//                                 \n";                 
sum16_csaout11<<" 	assign op6 = {SEG_ZERO,A14_in[SEG6-1:SEG5],  \n";       
sum16_csaout11<<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],  \n";       
sum16_csaout11<<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],  \n";       
sum16_csaout11<<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],  \n";       
sum16_csaout11<<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],  \n";       
sum16_csaout11<<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],  \n";       
sum16_csaout11<<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],   \n";       
sum16_csaout11<<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5]    \n";       
sum16_csaout11<<" 				  } ;                            \n";       
sum16_csaout11<<" 	                                             \n";       
sum16_csaout11<<"                                                \n";         
sum16_csaout11<<" 	//3-2 counter1                               \n";       
sum16_csaout11<<" 	assign ts1_wire = op1^op2^op3 ;              \n";       
sum16_csaout11<<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;\n";   
sum16_csaout11<<" 	                                                 \n";   
sum16_csaout11<<" 	//3-2 counter1                                   \n";   
sum16_csaout11<<" 	assign ts2_wire = op4^op5^op6 ;                  \n";   
sum16_csaout11<<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;\n";   
sum16_csaout11<<" 	                                                 \n";   
sum16_csaout11<<" 	//3-2 counter1                                   \n";   
sum16_csaout11<<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ;\n";
sum16_csaout11<<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ; \n";
sum16_csaout11<<" 	                                                 \n";   
sum16_csaout11<<" 	//3-2 counter1                                   \n";   
sum16_csaout11<<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ; \n";
sum16_csaout11<<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout11<<" 	                                                 \n";   
sum16_csaout11<<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";
sum16_csaout11<<"	\n";
sum16_csaout11<<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout11<<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout11<<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout11<<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO    :\n";
sum16_csaout11<<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;\n";  	                                                    
sum16_csaout11<<" 	//output \n";                                           
sum16_csaout11<<" 	assign SS_out  = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SS_out_wire : SS_out_wire;\n";
sum16_csaout11<<" 	assign SC_out  = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SC_out_wire : SC_out_wire;\n";
sum16_csaout11<<" 	\n";                                                    
sum16_csaout11<<"   \n";                                                      
sum16_csaout11<<" endmodule \n";                                              
	 sum16_csaout11.close();
}
void configurable_BFFT::Sum16_CSAout12(std::string string_in){
	 std::ofstream sum16_csaout12;
     std::string         string_buf = "/Sum16_CSAout12.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout12.open(ss.str());
sum16_csaout12 <<" `timescale 1 ns/1 ps   \n";                           
sum16_csaout12 <<" module Sum16_CSAout12(SS_out,\n";                     
sum16_csaout12 <<" 				         SC_out, \n";                    
sum16_csaout12 <<"                       A0_in,  \n";                    
sum16_csaout12 <<"                       A1_in,  \n";                    
sum16_csaout12 <<"                       A2_in,  \n";                    
sum16_csaout12 <<"                       A3_in,  \n";                    
sum16_csaout12 <<"                       A4_in,  \n";                    
sum16_csaout12 <<"                       A5_in,  \n";                    
sum16_csaout12 <<"                       A6_in,  \n";                    
sum16_csaout12 <<"                       A7_in,  \n";                    
sum16_csaout12 <<"                       A8_in,  \n";                    
sum16_csaout12 <<"                       A9_in,  \n";                    
sum16_csaout12 <<"                       A10_in, \n";                    
sum16_csaout12 <<"                       A11_in, \n";                    
sum16_csaout12 <<"                       A12_in, \n";                    
sum16_csaout12 <<"                       A13_in, \n";                    
sum16_csaout12 <<"                       A14_in, \n";                    
sum16_csaout12 <<"                       A15_in, \n";
sum16_csaout12 <<"                       MixRadix_sel_in,\n";
sum16_csaout12 <<"                       BU_mode_sel_in \n";            
sum16_csaout12 <<"                       // clk   \n";                   
sum16_csaout12 <<"                       ) ;      \n";                   
sum16_csaout12 <<"                                \n";                   
sum16_csaout12 <<" parameter D_WIDTH     = 192 ;\n";
sum16_csaout12 <<" parameter HD_WIDTH    = 96 ; \n";
sum16_csaout12 <<" parameter P_WIDTH     = 64 ; \n";                     
sum16_csaout12 <<" parameter D_ZERO      = 192'h0 ;\n";
sum16_csaout12 <<" parameter HD_ZERO     = 96'h0 ; \n";
sum16_csaout12 <<" parameter SEG_32_ZERO = 32'h0 ; \n";                  
sum16_csaout12 <<" parameter SEG_ZERO    = 8'h0 ;  \n";                  
sum16_csaout12 <<" parameter SEG1_ZERO   = 12'h0 ; \n";                  
sum16_csaout12 <<" parameter SEG1        = 12 ;    \n";                  
sum16_csaout12 <<" parameter SEG2        = 24 ;    \n";                  
sum16_csaout12 <<" parameter SEG3        = 36 ;    \n";                  
sum16_csaout12 <<" parameter SEG4        = 48 ;    \n";                  
sum16_csaout12 <<" parameter SEG5        = 60 ;    \n";                  
sum16_csaout12 <<" parameter SEG6        = 64 ;    \n";                  
sum16_csaout12 <<"                                 \n";                  
sum16_csaout12 <<"                                 \n";                  
sum16_csaout12 <<" output[D_WIDTH-1:0] SS_out ;    \n";                  
sum16_csaout12 <<" output[D_WIDTH-1:0] SC_out ;    \n";                  
sum16_csaout12 <<"                                 \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A0_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A1_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A2_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A3_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A4_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A5_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A6_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A7_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A8_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A9_in ;     \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A10_in ;    \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A11_in ;    \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A12_in ;    \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A13_in ;    \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A14_in ;    \n";                  
sum16_csaout12 <<" input [P_WIDTH-1:0] A15_in ;    \n";
sum16_csaout12 <<" input [1:0]         MixRadix_sel_in;\n";  
sum16_csaout12 <<" input               BU_mode_sel_in; \n";              
sum16_csaout12 <<" // input               clk ;        \n";              
sum16_csaout12 <<"                                     \n";              
sum16_csaout12 <<"                                     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op1 ;          \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op2 ;          \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op3 ;          \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op4 ;          \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op5 ;          \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op6 ;          \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op7 ;          \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op8 ;          \n";              
sum16_csaout12 <<"                                     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  ts1_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc1_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  ts2_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc2_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  ts3_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc3_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  ts4_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc4_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  ts5_wire ;     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc5_wire ;     \n";              
sum16_csaout12 <<" // wire  [D_WIDTH-1:0]  ts6_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc6_wire ;     \n";              
sum16_csaout12 <<"                                     \n";              
sum16_csaout12 <<" //----------------------------------\n";                      
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  SS_out_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  SC_out_wire ;  \n";              
sum16_csaout12 <<" //radix-2                           \n";
//----------------------------------------------------------------
//sum16_csaout12 <<" //radix-2 butterfly unit wire       \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0]  op0_R2_wire ; \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0]  op1_R2_wire ; \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0]  SS_R2_wire ;  \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0]  SC_R2_wire ;  \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0]  ts1_R2_wire ; \n";  
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0]  tc1_R2_wire ; \n";  
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0]  c1_R2_wire ;  \n";

sum16_csaout12 <<" //radix-2 butterfly unit wire       \n";
sum16_csaout12 <<" wire  [P_WIDTH-1:0]  ts1_R2_wire ; \n";  
sum16_csaout12 <<" wire  [P_WIDTH-1:0]  tc1_R2_wire ; \n";  
sum16_csaout12 <<" wire  [P_WIDTH  :0]  c1_R2_wire ;  \n";
sum16_csaout12 <<" wire  [P_WIDTH  :0]  SS_R2_wire ;  \n";
sum16_csaout12 <<" wire  [P_WIDTH  :0]  SC_R2_wire ;  \n";

//-----------------------------------------------------------------
//sum16_csaout12 <<" //radix-4 butterfly unit wire       \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] op0_R4_wire;   \n";          
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] op1_R4_wire;   \n";          
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] op2_R4_wire;   \n";          
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] op3_R4_wire;   \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] SS_R4_wire;    \n";         
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] SC_R4_wire;    \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] ts1_R4_wire;   \n";          
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] tc1_R4_wire;   \n";
//sum16_csaout12 <<" wire  [HD_WIDTH-1:0] c1_R4_wire;    \n";

sum16_csaout12 <<" //radix-4 butterfly unit wire       \n";
sum16_csaout12 <<" wire  [P_WIDTH-1:0] ts1_R4_wire;   \n";          
sum16_csaout12 <<" wire  [P_WIDTH-1:0] tc1_R4_wire;   \n";
sum16_csaout12 <<" wire  [P_WIDTH  :0] c1_R4_wire;    \n";
sum16_csaout12 <<" wire  [P_WIDTH  :0] SS_R4_wire;    \n";
sum16_csaout12 <<" wire  [P_WIDTH  :0] SC_R4_wire;    \n";
//------------------------------------------------------------------
sum16_csaout12 <<"                                     \n";
sum16_csaout12 <<" //Radix-8                           \n";                        
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op1_R8_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op2_R8_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op3_R8_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  op4_R8_wire ;  \n";              
sum16_csaout12 <<"                                     \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  ts1_R8_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  tc2_R8_wire ;  \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  SS_R8_wire ;   \n";              
sum16_csaout12 <<" wire  [D_WIDTH-1:0]  SC_R8_wire ;   \n";              
sum16_csaout12 <<" //--------------------------------------\n";
sum16_csaout12 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;\n"; 
sum16_csaout12 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;\n";                                                    
sum16_csaout12 <<"\n";
//-------------------------------------------------------------------------------
//sum16_csaout12 <<"    //Radix-2 operation                          \n";
//sum16_csaout12 <<"    assign op0_R2_wire = {SEG_32_ZERO,A12_in};\n";
//sum16_csaout12 <<"    assign op1_R2_wire = {SEG_32_ZERO,A13_in};\n";
//sum16_csaout12 <<" 	 \n";
//sum16_csaout12 <<" 	assign ts1_R2_wire =  op0_R2_wire ^ op1_R2_wire; \n";
//sum16_csaout12 <<" 	assign tc1_R2_wire = (op0_R2_wire & op1_R2_wire);\n";
//sum16_csaout12 <<"                                                   \n";                                           
//sum16_csaout12 <<" 	assign SS_R2_wire = ({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R2_wire; \n";                  
//sum16_csaout12 <<" 	assign c1_R2_wire     = (({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) & ts1_R2_wire);\n";                 
//sum16_csaout12 <<" 	assign SC_R2_wire = {c1_R2_wire[HD_WIDTH-2:0],1'b0} ; \n";  
//sum16_csaout12 <<"\n";
sum16_csaout12 <<"    //Radix-2 operation                          \n";
sum16_csaout12 <<" 	assign ts1_R2_wire =  A12_in ^ A13_in; \n";
sum16_csaout12 <<" 	assign tc1_R2_wire = (A12_in & A13_in);\n";
sum16_csaout12 <<"                                                   \n";                                           
sum16_csaout12 <<" 	assign SS_R2_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire; \n";                  
sum16_csaout12 <<" 	assign c1_R2_wire = (({tc1_R2_wire,1'b0}) & ts1_R2_wire);\n";                 
sum16_csaout12 <<" 	assign SC_R2_wire = {c1_R2_wire[P_WIDTH-1:0],1'b0} ; \n";  
sum16_csaout12 <<"\n";
//-------------------------------------------------------------------------------
//sum16_csaout12 <<"	//radix-4\n";
//sum16_csaout12 <<" 	//op assign \n";                              
//sum16_csaout12 <<" 	assign op0_R4_wire = {SEG_32_ZERO,A12_in}; \n";
//sum16_csaout12 <<" 	assign op1_R4_wire = {SEG_32_ZERO,A13_in}; \n";
//sum16_csaout12 <<" 	assign op2_R4_wire = {SEG_32_ZERO,A14_in}; \n";
//sum16_csaout12 <<" 	assign op3_R4_wire = {SEG_32_ZERO,A15_in}; \n";
//sum16_csaout12 <<" 	//                                        \n";
//sum16_csaout12 <<" 	assign ts1_R4_wire = op0_R4_wire^op1_R4_wire^op2_R4_wire;\n";
//sum16_csaout12 <<" 	assign tc1_R4_wire = (op0_R4_wire & op1_R4_wire) | (op1_R4_wire & op2_R4_wire ) | ( op0_R4_wire & op2_R4_wire );  \n";
//sum16_csaout12 <<" 	                                                         \n";
//sum16_csaout12 <<" 	assign SS_R4_wire  = ({tc1_R4_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R4_wire ^ op3_R4_wire ; \n";
//sum16_csaout12 <<" 	assign c1_R4_wire  = (({tc1_R4_wire[HD_WIDTH-2:0],1'b0})&ts1_R4_wire)|(ts1_R4_wire&op3_R4_wire)|(({tc1_R4_wire[HD_WIDTH-2:0],1'b0})&op3_R4_wire);\n";
//sum16_csaout12 <<"    assign SC_R4_wire = {c1_R4_wire[HD_WIDTH-2:0],1'b0} ; \n";  
//sum16_csaout12 <<"  \n"; 

sum16_csaout12 <<"	//radix-4\n";
sum16_csaout12 <<" 	assign ts1_R4_wire = A12_in^A13_in^A14_in;\n";
sum16_csaout12 <<" 	assign tc1_R4_wire = (A12_in & A13_in) | (A13_in & A14_in) | (A12_in & A14_in);  \n";
sum16_csaout12 <<" 	                                                         \n";
sum16_csaout12 <<" 	assign SS_R4_wire = ({tc1_R4_wire,1'b0}) ^ ts1_R4_wire ^ A15_in ; \n";
sum16_csaout12 <<" 	assign c1_R4_wire = (({tc1_R4_wire,1'b0})&ts1_R4_wire)|(ts1_R4_wire&A15_in)|(({tc1_R4_wire,1'b0})&A15_in);\n";
sum16_csaout12 <<"  assign SC_R4_wire = {c1_R4_wire[P_WIDTH-1:0],1'b0} ; \n";  
sum16_csaout12 <<"  \n"; 
//--------------------------------------------------------------------------------
sum16_csaout12 <<" 	//                                            \n";
sum16_csaout12 <<" 	assign op1_R8_wire = {SEG_32_ZERO,A9_in[SEG6-1:SEG4],\n";
sum16_csaout12 <<" 				  A9_in[SEG4-1:SEG2],                    \n";
sum16_csaout12 <<" 				  A9_in[SEG2-1:0],                       \n";
sum16_csaout12 <<" 				  SEG_32_ZERO,A8_in[SEG6-1:SEG4],        \n";
sum16_csaout12 <<" 				  A8_in[SEG4-1:SEG2],                    \n";
sum16_csaout12 <<" 				  A8_in[SEG2-1:0]                           \n";
sum16_csaout12 <<" 				  } ;                                       \n";
sum16_csaout12 <<" 	//                                                      \n";
sum16_csaout12 <<" 	assign op2_R8_wire = {SEG_32_ZERO,A11_in[SEG6-1:SEG4],  \n";
sum16_csaout12 <<" 				  A11_in[SEG4-1:SEG2],                      \n";      
sum16_csaout12 <<" 				  A11_in[SEG2-1:0],                         \n";      
sum16_csaout12 <<" 				  SEG_32_ZERO,A10_in[SEG6-1:SEG4],          \n";      
sum16_csaout12 <<" 				  A10_in[SEG4-1:SEG2],                      \n";      
sum16_csaout12 <<" 				  A10_in[SEG2-1:0]                          \n";      
sum16_csaout12 <<" 				  } ;			                            \n";      
sum16_csaout12 <<" 	//                                                      \n";      
sum16_csaout12 <<" 	assign op3_R8_wire = {SEG_32_ZERO,A13_in[SEG6-1:SEG4],  \n";      
sum16_csaout12 <<" 				          A13_in[SEG4-1:SEG2],              \n";      
sum16_csaout12 <<" 				          A13_in[SEG2-1:0],                 \n";      
sum16_csaout12 <<" 				          SEG_32_ZERO,A12_in[SEG6-1:SEG4],  \n";      
sum16_csaout12 <<" 				          A12_in[SEG4-1:SEG2],              \n";      
sum16_csaout12 <<" 				          A12_in[SEG2-1:0]                  \n";      
sum16_csaout12 <<" 				          } ;                               \n";      
sum16_csaout12 <<" 	//                                                      \n";      
sum16_csaout12 <<" 	assign op4_R8_wire = {SEG_32_ZERO,A15_in[SEG6-1:SEG4],  \n";      
sum16_csaout12 <<" 				          A15_in[SEG4-1:SEG2],              \n";      
sum16_csaout12 <<" 				          A15_in[SEG2-1:0],                 \n";      
sum16_csaout12 <<" 				          SEG_32_ZERO,A14_in[SEG6-1:SEG4],  \n";      
sum16_csaout12 <<" 				          A14_in[SEG4-1:SEG2],              \n";      
sum16_csaout12 <<" 				          A14_in[SEG2-1:0]                  \n";      
sum16_csaout12 <<" 				          } ;                               \n";      
sum16_csaout12 <<"                                                          \n";         
sum16_csaout12 <<" 	//3-2 counter1                                          \n";      
sum16_csaout12 <<" 	assign ts1_R8_wire = op1_R8_wire^op2_R8_wire^op3_R8_wire ; \n";   
sum16_csaout12 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;   \n";
sum16_csaout12 <<" 	                                                              \n";
sum16_csaout12 <<" 	//3-2 counter1                                                \n";
sum16_csaout12 <<" 	assign SS_R8_wire  = ({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})^ts1_R8_wire^op4_R8_wire ;\n";
sum16_csaout12 <<" 	assign tc2_R8_wire = (({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&ts1_R8_wire)|(ts1_R8_wire&op4_R8_wire)|(({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&op4_R8_wire) ;\n";
sum16_csaout12 <<" 	\n";
sum16_csaout12 <<" 	assign SC_R8_wire  = {tc2_R8_wire[D_WIDTH-2:0],tc2_R8_wire[D_WIDTH-1]} ;\n";
sum16_csaout12 <<" 	\n";                                                                                                                                                        
sum16_csaout12 <<"  \n";                                                                                                                                                        
sum16_csaout12 <<"  \n";                                                                                                                                                                                                                                      
sum16_csaout12 <<" 	// \n";                                                           
sum16_csaout12 <<" 	assign op1 = {A1_in[SEG4-1:SEG3],    \n";                         
sum16_csaout12 <<" 	              A1_in[SEG3-1:SEG2],    \n";                         
sum16_csaout12 <<" 				  A1_in[SEG2-1:SEG1],    \n";                         
sum16_csaout12 <<" 				  A1_in[SEG1-1:0],       \n";                         
sum16_csaout12 <<" 				  A2_in[SEG4-1:SEG3],    \n";                         
sum16_csaout12 <<" 	              A2_in[SEG3-1:SEG2],    \n";                         
sum16_csaout12 <<" 				  A2_in[SEG2-1:SEG1],    \n";                         
sum16_csaout12 <<" 				  A2_in[SEG1-1:0],       \n";                         
sum16_csaout12 <<" 				  A3_in[SEG4-1:SEG3],    \n";                         
sum16_csaout12 <<" 	              A3_in[SEG3-1:SEG2],    \n";                         
sum16_csaout12 <<" 				  A3_in[SEG2-1:SEG1],    \n";                         
sum16_csaout12 <<" 				  A3_in[SEG1-1:0],       \n";                         
sum16_csaout12 <<" 				  A0_in[SEG4-1:SEG3],    \n";                         
sum16_csaout12 <<" 	              A0_in[SEG3-1:SEG2],    \n";                         
sum16_csaout12 <<" 				  A0_in[SEG2-1:SEG1],    \n";                         
sum16_csaout12 <<" 				  A0_in[SEG1-1:0]        \n";                         
sum16_csaout12 <<" 				  } ;                    \n";                         
sum16_csaout12 <<" 	//                                   \n";                         
sum16_csaout12 <<" 	assign op2 = {SEG1_ZERO,             \n";                         
sum16_csaout12 <<" 				  SEG1_ZERO,             \n";                         
sum16_csaout12 <<" 	              SEG_ZERO,A2_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A2_in[SEG5-1:SEG4],           \n";                  
sum16_csaout12 <<" 	              SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A3_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A3_in[SEG5-1:SEG4],           \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A0_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A0_in[SEG5-1:SEG4],           \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A1_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A1_in[SEG5-1:SEG4]            \n";                  
sum16_csaout12 <<" 				  } ;			                \n";                  
sum16_csaout12 <<" 	//                                          \n";                  
sum16_csaout12 <<" 	assign op3 = {A5_in[SEG4-1:SEG3],           \n";                  
sum16_csaout12 <<" 	              A5_in[SEG3-1:SEG2],           \n";                  
sum16_csaout12 <<" 				  A5_in[SEG2-1:SEG1],           \n";                  
sum16_csaout12 <<" 				  A5_in[SEG1-1:0],              \n";                  
sum16_csaout12 <<" 				  A6_in[SEG4-1:SEG3],           \n";                  
sum16_csaout12 <<" 	              A6_in[SEG3-1:SEG2],           \n";                  
sum16_csaout12 <<" 				  A6_in[SEG2-1:SEG1],           \n";                  
sum16_csaout12 <<" 				  A6_in[SEG1-1:0],              \n";                  
sum16_csaout12 <<" 				  A7_in[SEG4-1:SEG3],           \n";                  
sum16_csaout12 <<" 	              A7_in[SEG3-1:SEG2],           \n";                  
sum16_csaout12 <<" 				  A7_in[SEG2-1:SEG1],           \n";                  
sum16_csaout12 <<" 				  A7_in[SEG1-1:0],              \n";                  
sum16_csaout12 <<" 				  A4_in[SEG4-1:SEG3],           \n";                  
sum16_csaout12 <<" 	              A4_in[SEG3-1:SEG2],           \n";                  
sum16_csaout12 <<" 				  A4_in[SEG2-1:SEG1],           \n";                  
sum16_csaout12 <<" 				  A4_in[SEG1-1:0]               \n";                  
sum16_csaout12 <<" 				  } ;                           \n";                  
sum16_csaout12 <<" 	//                                          \n";                  
sum16_csaout12 <<" 	assign op4 = {SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A6_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A6_in[SEG5-1:SEG4],           \n";                  
sum16_csaout12 <<" 	              SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A7_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A7_in[SEG5-1:SEG4],           \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A4_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A4_in[SEG5-1:SEG4],           \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A5_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A5_in[SEG5-1:SEG4]            \n";                  
sum16_csaout12 <<" 				  } ;                           \n";                  
sum16_csaout12 <<" 	//                                          \n";                  
sum16_csaout12 <<" 	assign op5 = { A9_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	               A9_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				   A9_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				   A9_in[SEG1-1:0],             \n";                  
sum16_csaout12 <<" 				  A10_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	              A10_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				  A10_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				  A10_in[SEG1-1:0],             \n";                  
sum16_csaout12 <<" 				  A11_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	              A11_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				  A11_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				  A11_in[SEG1-1:0],             \n";                  
sum16_csaout12 <<" 				   A8_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	               A8_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				   A8_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				   A8_in[SEG1-1:0]              \n";                  
sum16_csaout12 <<" 				  } ;                           \n";                  
sum16_csaout12 <<" 	//                                          \n";                  
sum16_csaout12 <<" 	assign op6 = {SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A10_in[SEG6-1:SEG5], \n";                  
sum16_csaout12 <<" 	              A10_in[SEG5-1:SEG4],          \n";                  
sum16_csaout12 <<" 	              SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A11_in[SEG6-1:SEG5], \n";                  
sum16_csaout12 <<" 	              A11_in[SEG5-1:SEG4],          \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A8_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A8_in[SEG5-1:SEG4],           \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A9_in[SEG6-1:SEG5],  \n";                  
sum16_csaout12 <<" 	              A9_in[SEG5-1:SEG4]            \n";                  
sum16_csaout12 <<" 				  } ;                           \n";                  
sum16_csaout12 <<" 	//                                          \n";                  
sum16_csaout12 <<" 	assign op7 = {A13_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	              A13_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				  A13_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				  A13_in[SEG1-1:0],             \n";                  
sum16_csaout12 <<" 				  A14_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	              A14_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				  A14_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				  A14_in[SEG1-1:0],             \n";                  
sum16_csaout12 <<" 				  A15_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	              A15_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				  A15_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				  A15_in[SEG1-1:0],             \n";                  
sum16_csaout12 <<" 				  A12_in[SEG4-1:SEG3],          \n";                  
sum16_csaout12 <<" 	              A12_in[SEG3-1:SEG2],          \n";                  
sum16_csaout12 <<" 				  A12_in[SEG2-1:SEG1],          \n";                  
sum16_csaout12 <<" 				  A12_in[SEG1-1:0]              \n";                  
sum16_csaout12 <<" 				  } ;                           \n";                  
sum16_csaout12 <<" 	//                                          \n";                  
sum16_csaout12 <<" 	assign op8 = {SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A14_in[SEG6-1:SEG5], \n";                  
sum16_csaout12 <<" 	              A14_in[SEG5-1:SEG4],          \n";                  
sum16_csaout12 <<" 	              SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A15_in[SEG6-1:SEG5], \n";                  
sum16_csaout12 <<" 	              A15_in[SEG5-1:SEG4],          \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A12_in[SEG6-1:SEG5], \n";                  
sum16_csaout12 <<" 	              A12_in[SEG5-1:SEG4],          \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 				  SEG1_ZERO,                    \n";                  
sum16_csaout12 <<" 	              SEG_ZERO,A13_in[SEG6-1:SEG5], \n";                  
sum16_csaout12 <<" 	              A13_in[SEG5-1:SEG4]           \n";                  
sum16_csaout12 <<" 				  } ;                           \n";                  
sum16_csaout12 <<" 				                                \n";                  
sum16_csaout12 <<" 				                                \n";                  
sum16_csaout12 <<" 	//3-2 counter1                              \n";                  
sum16_csaout12 <<" 	assign ts1_wire = op1^op2^op3 ;             \n";                  
sum16_csaout12 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;\n";             
sum16_csaout12 <<" 	               \n";
sum16_csaout12 <<" 	//3-2 counter1 \n";
sum16_csaout12 <<" 	assign ts2_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^op4 ;\n";
sum16_csaout12 <<" 	assign tc2_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&op4)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&op4) ;\n"; 
sum16_csaout12 <<" 	               \n";
sum16_csaout12 <<" 	//3-2 counter1 \n";
sum16_csaout12 <<" 	assign ts3_wire = op5^op6^op7 ;\n";
sum16_csaout12 <<" 	assign tc3_wire = (op5&op6)|(op6&op7)|(op5&op7) ;\n";                                                                                               
sum16_csaout12 <<" 	               \n";
sum16_csaout12 <<" 	//3-2 counter1 \n";
sum16_csaout12 <<" 	assign ts4_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^op8 ; \n";                                                                 
sum16_csaout12 <<" 	assign tc4_wire = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&op8)|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&op8) ;\n"; 
sum16_csaout12 <<" 	\n";               
sum16_csaout12 <<" 	//3-2 counter1\n"; 
sum16_csaout12 <<" 	assign ts5_wire = ({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})^ts2_wire^({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]}) ;\n"; 
sum16_csaout12 <<" 	assign tc5_wire = (({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})&ts2_wire)|(ts2_wire&({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]}))|(({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})&({tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]})) ;\n";
sum16_csaout12 <<" 	\n";                                                                                                    
sum16_csaout12 <<" 	//3-2 counter1 \n";                                                                                     
sum16_csaout12 <<" 	assign SS_out_wire = ({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})^ts5_wire^ts4_wire ; \n";             
sum16_csaout12 <<" 	assign tc6_wire    = (({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})&ts5_wire)|(ts5_wire&ts4_wire)|(({tc5_wire[D_WIDTH-2:0],tc5_wire[D_WIDTH-1]})&ts4_wire) ;\n"; 
sum16_csaout12 <<" 	\n";                                                                            
sum16_csaout12 <<" 	assign SC_out_wire = {tc6_wire[D_WIDTH-2:0],tc6_wire[D_WIDTH-1]} ;\n";          
sum16_csaout12 <<"  \n";
sum16_csaout12 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout12 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SS_R2_wire}):\n";
sum16_csaout12 <<"	                              (MixRadix_sel_in == 2'd1) ? ({127'd0,SS_R4_wire}): SS_R8_wire;\n";
sum16_csaout12 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SC_R2_wire}):\n";
sum16_csaout12 <<"	                              (MixRadix_sel_in == 2'd1) ? ({127'd0,SC_R4_wire}): SC_R8_wire;\n";
sum16_csaout12 <<" 	//Output \n";                                                                   
sum16_csaout12 <<" 	assign SS_out = ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SS_out_wire : SS_out_wire;\n";      
sum16_csaout12 <<" 	assign SC_out = ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SC_out_wire : SC_out_wire;\n";      
sum16_csaout12 <<" 	\n";                                                                            
sum16_csaout12 <<"  \n";                                                                               
sum16_csaout12 <<" endmodule\n"; 
	 sum16_csaout12.close();	
}
void configurable_BFFT::Sum16_CSAout13(std::string string_in){
	 std::ofstream sum16_csaout13;
     std::string         string_buf = "/Sum16_CSAout13.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout13.open(ss.str());
sum16_csaout13 << " `timescale 1 ns/1 ps         \n";               
sum16_csaout13 << " module Sum16_CSAout13(SS_out, \n";           
sum16_csaout13 << " 				      SC_out, \n";           
sum16_csaout13 << "                       A0_in,  \n";           
sum16_csaout13 << " 			          A1_in,  \n";           
sum16_csaout13 << " 			          A2_in,  \n";           
sum16_csaout13 << " 			          A3_in,  \n";           
sum16_csaout13 << " 			          A4_in,  \n";           
sum16_csaout13 << " 			          A5_in,  \n";           
sum16_csaout13 << " 			          A6_in,  \n";           
sum16_csaout13 << " 			          A7_in,  \n";           
sum16_csaout13 << " 			          A8_in,  \n";           
sum16_csaout13 << " 			          A9_in,  \n";           
sum16_csaout13 << " 			          A10_in, \n";           
sum16_csaout13 << " 			          A11_in, \n";           
sum16_csaout13 << " 			          A12_in, \n";           
sum16_csaout13 << " 			          A13_in, \n";           
sum16_csaout13 << " 			          A14_in, \n";           
sum16_csaout13 << " 			          A15_in, \n";
sum16_csaout13 << "                      MixRadix_sel_in,\n";
sum16_csaout13 << "                       BU_mode_sel_in \n";
sum16_csaout13 << "                       // clk         \n";
sum16_csaout13 << "                       ) ;            \n";   
sum16_csaout13 << "                                      \n";   
sum16_csaout13 << " parameter D_WIDTH     = 192 ;           \n";
sum16_csaout13 << " parameter P_WIDTH     = 64 ;            \n";
sum16_csaout13 << " parameter D_ZERO      = 192'h0 ;        \n";
sum16_csaout13 << " parameter SEG_ZERO    = 8'h0 ;          \n";
sum16_csaout13 << " parameter SEG_32_ZERO = 32'h0 ;         \n";
sum16_csaout13 << " parameter SEG1        = 12 ;            \n";
sum16_csaout13 << " parameter SEG2        = 24 ;            \n";
sum16_csaout13 << " parameter SEG3        = 36 ;            \n";
sum16_csaout13 << " parameter SEG4        = 48 ;            \n";
sum16_csaout13 << " parameter SEG5        = 60 ;            \n";
sum16_csaout13 << " parameter SEG6        = 64 ;            \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " output[D_WIDTH-1:0] SS_out ;            \n";
sum16_csaout13 << " output[D_WIDTH-1:0] SC_out ;            \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A0_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A1_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A2_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A3_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A4_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A5_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A6_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A7_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A8_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A9_in ;             \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A10_in ;            \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A11_in ;            \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A12_in ;            \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A13_in ;            \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A14_in ;            \n";
sum16_csaout13 << " input [P_WIDTH-1:0] A15_in ;            \n";
sum16_csaout13 << " input [1:0]         MixRadix_sel_in;    \n";
sum16_csaout13 << " input               BU_mode_sel_in ;    \n";
sum16_csaout13 << " // input               clk ;            \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op1 ;              \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op2 ;              \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op3 ;              \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op4 ;              \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op5 ;              \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op6 ;              \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  ts1_wire ;         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  tc1_wire ;         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  ts2_wire ;         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  tc2_wire ;         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  ts3_wire ;         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  tc3_wire ;         \n";
sum16_csaout13 << " // wire  [D_WIDTH-1:0]  ts4_wire ;      \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  tc4_wire ;         \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " //------------------                    \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0] SS_out_wire ;       \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0] SC_out_wire ;       \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " //radix-2                               \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0] SS_R2_wire ;        \n";                            
sum16_csaout13 << " //radix-4                               \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0] SS_R4_wire ;        \n";  
sum16_csaout13 << " wire  [D_WIDTH-1:0] SC_R4_wire ;        \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " //Radix-8                               \n";         
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op1_R8_wire ;      \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op2_R8_wire ;      \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  op3_R8_wire ;      \n";
sum16_csaout13 << "                                         \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  SS_R8_wire ;       \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  tc1_R8_wire ;      \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0]  SC_R8_wire ;       \n";
sum16_csaout13 << " //-------                               \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout13 << " wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n";
sum16_csaout13 << "                                           \n";
sum16_csaout13 << " 	//radix-2 operation                   \n";                                        
sum16_csaout13 << " 	assign SS_R2_wire = {SEG_32_ZERO,A13_in,SEG_32_ZERO,A12_in}; \n";
sum16_csaout13 << " \n";
sum16_csaout13 << " \n";
sum16_csaout13 << "    //Radix-4 operation!!!    \n";
sum16_csaout13 << "    assign SS_R4_wire = {A15_in[SEG4-1:0],    \n";
sum16_csaout13 << "                         A14_in[SEG4-1:0],    \n";
sum16_csaout13 << "                         A13_in[SEG4-1:0],    \n";
sum16_csaout13 << "                         A12_in[SEG4-1:0]     \n";
sum16_csaout13 << " 	                    };                   \n";
sum16_csaout13 << " 	assign SC_R4_wire = {SEG_32_ZERO,A14_in[SEG6-1:SEG4],\n";
sum16_csaout13 << " 	                     SEG_32_ZERO,A13_in[SEG6-1:SEG4],\n";
sum16_csaout13 << " 				         SEG_32_ZERO,A12_in[SEG6-1:SEG4],\n";
sum16_csaout13 << " 				         SEG_32_ZERO,A15_in[SEG6-1:SEG4] \n";
sum16_csaout13 << " 				        } ;   	                         \n";                
sum16_csaout13 << " 	//                                  \n";
sum16_csaout13 << " 	assign op1_R8_wire  = {A11_in[SEG2-1:0],         \n";
sum16_csaout13 << " 				           A14_in[SEG2-1:0],         \n";
sum16_csaout13 << " 				           A9_in[SEG2-1:0],          \n";
sum16_csaout13 << " 				           A12_in[SEG2-1:0],         \n";
sum16_csaout13 << " 				           A15_in[SEG2-1:0],         \n";
sum16_csaout13 << " 				           A10_in[SEG2-1:0],         \n";
sum16_csaout13 << " 				           A13_in[SEG2-1:0],         \n";
sum16_csaout13 << " 				           A8_in[SEG2-1:0]           \n";
sum16_csaout13 << " 				           } ;                       \n";
sum16_csaout13 << " 	//                                               \n";
sum16_csaout13 << " 	assign op2_R8_wire = {A14_in[SEG4-1:SEG2],       \n";
sum16_csaout13 << " 				          A9_in[SEG4-1:SEG2],        \n";
sum16_csaout13 << " 				          A12_in[SEG4-1:SEG2],       \n";
sum16_csaout13 << " 				          A15_in[SEG4-1:SEG2],       \n";
sum16_csaout13 << " 				          A10_in[SEG4-1:SEG2],       \n";
sum16_csaout13 << " 				          A13_in[SEG4-1:SEG2],       \n";
sum16_csaout13 << " 				          A8_in[SEG4-1:SEG2],        \n";
sum16_csaout13 << " 				          A11_in[SEG4-1:SEG2]        \n";
sum16_csaout13 << " 				          } ;			             \n";
sum16_csaout13 << " 	//                                               \n";
sum16_csaout13 << " 	assign op3_R8_wire = {SEG_ZERO,A9_in[SEG6-1:SEG4],   \n";                           
sum16_csaout13 << " 				          SEG_ZERO,A12_in[SEG6-1:SEG4],  \n";                            
sum16_csaout13 << " 				          SEG_ZERO,A15_in[SEG6-1:SEG4],  \n";                            
sum16_csaout13 << " 				          SEG_ZERO,A10_in[SEG6-1:SEG4],  \n";                            
sum16_csaout13 << " 				          SEG_ZERO,A13_in[SEG6-1:SEG4],  \n";                            
sum16_csaout13 << " 				          SEG_ZERO,A8_in[SEG6-1:SEG4],   \n";                           
sum16_csaout13 << " 				          SEG_ZERO,A11_in[SEG6-1:SEG4],  \n";                            
sum16_csaout13 << " 				          SEG_ZERO,A14_in[SEG6-1:SEG4]   \n";                            
sum16_csaout13 << " 				          } ;                            \n";                           
sum16_csaout13 << " 	                                                     \n";                           
sum16_csaout13 << "                                                          \n";                        
sum16_csaout13 << " 	//3-2 counter1                                       \n";                           
sum16_csaout13 << " 	assign SS_R8_wire  = op1_R8_wire^op2_R8_wire^op3_R8_wire ;\n";
sum16_csaout13 << " 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;\n";
sum16_csaout13 << " 	                                                     \n";
sum16_csaout13 << " 	assign SC_R8_wire  = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]} ;\n";
sum16_csaout13 << " 	                                                     \n";
sum16_csaout13 << "                                                          \n";                        
sum16_csaout13 << " 	//                                                   \n";
sum16_csaout13 << " 	assign op1 = {A11_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A6_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A1_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				  A12_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A7_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A2_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				  A13_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A8_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A3_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				  A14_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A9_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A4_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				  A15_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				  A10_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A5_in[SEG1-1:0],    \n";                 
sum16_csaout13 << " 				   A0_in[SEG1-1:0]     \n";                 
sum16_csaout13 << " 				  } ;                  \n";                 
sum16_csaout13 << " 	//                                 \n";                 
sum16_csaout13 << " 	assign op2 = { A6_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A1_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				  A12_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A7_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A2_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				  A13_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A8_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A3_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				  A14_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A9_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A4_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				  A15_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				  A10_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A5_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				   A0_in[SEG2-1:SEG1], \n";                 
sum16_csaout13 << " 				  A11_in[SEG2-1:SEG1]  \n";                 
sum16_csaout13 << " 				  } ;			       \n";                 
sum16_csaout13 << " 	//                                 \n";                 
sum16_csaout13 << " 	assign op3 = { A1_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				  A12_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A7_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A2_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				  A13_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A8_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A3_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				  A14_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A9_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A4_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				  A15_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				  A10_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A5_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A0_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				  A11_in[SEG3-1:SEG2], \n";                 
sum16_csaout13 << " 				   A6_in[SEG3-1:SEG2]  \n";                 
sum16_csaout13 << " 				  } ;                  \n";                 
sum16_csaout13 << " 	//                                 \n";                 
sum16_csaout13 << " 	assign op4 = {A12_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A7_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A2_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				  A13_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A8_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A3_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				  A14_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A9_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A4_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				  A15_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				  A10_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A5_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A0_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				  A11_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A6_in[SEG4-1:SEG3], \n";                 
sum16_csaout13 << " 				   A1_in[SEG4-1:SEG3]  \n";                 
sum16_csaout13 << " 				  } ;                  \n";                 
sum16_csaout13 << " 	//                                 \n";                 
sum16_csaout13 << " 	assign op5 = { A7_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A2_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				  A13_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A8_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A3_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				  A14_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A9_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A4_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				  A15_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				  A10_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A5_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A0_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				  A11_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A6_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				   A1_in[SEG5-1:SEG4], \n";                 
sum16_csaout13 << " 				  A12_in[SEG5-1:SEG4]  \n";                 
sum16_csaout13 << " 				  } ;                  \n";                 
sum16_csaout13 << " 	//                                 \n";                 
sum16_csaout13 << " 	assign op6 = {SEG_ZERO,A2_in[SEG6-1:SEG5],  \n";          
sum16_csaout13 << " 				  SEG_ZERO,A13_in[SEG6-1:SEG5], \n";        
sum16_csaout13 << " 				  SEG_ZERO,A8_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A3_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A14_in[SEG6-1:SEG5], \n";        
sum16_csaout13 << " 				  SEG_ZERO,A9_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A4_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A15_in[SEG6-1:SEG5], \n";        
sum16_csaout13 << " 				  SEG_ZERO,A10_in[SEG6-1:SEG5], \n";        
sum16_csaout13 << " 				  SEG_ZERO,A5_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A0_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A11_in[SEG6-1:SEG5], \n";        
sum16_csaout13 << " 				  SEG_ZERO,A6_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A1_in[SEG6-1:SEG5],  \n";        
sum16_csaout13 << " 				  SEG_ZERO,A12_in[SEG6-1:SEG5], \n";        
sum16_csaout13 << " 				  SEG_ZERO,A7_in[SEG6-1:SEG5]   \n";        
sum16_csaout13 << " 				  } ;                           \n";        
sum16_csaout13 << " 	                                            \n";        
sum16_csaout13 << "                                                 \n";        
sum16_csaout13 << " 	//3-2 counter1                              \n";        
sum16_csaout13 << " 	assign ts1_wire = op1^op2^op3 ;             \n";        
sum16_csaout13 << " 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;   \n";
sum16_csaout13 << " 	                                                    \n";
sum16_csaout13 << " 	//3-2 counter1                                      \n";
sum16_csaout13 << " 	assign ts2_wire = op4^op5^op6 ;                     \n";
sum16_csaout13 << " 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;   \n";
sum16_csaout13 << " 	                                                    \n";
sum16_csaout13 << " 	//3-2 counter1                                      \n";
sum16_csaout13 << " 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ;\n";
sum16_csaout13 << " 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ; \n";
sum16_csaout13 << " 	                                                    \n";
sum16_csaout13 << " 	//3-2 counter1                                      \n";
sum16_csaout13 << " 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ; \n";
sum16_csaout13 << " 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout13 << " 	                                                    \n";                       
sum16_csaout13 << " 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;\n";         
sum16_csaout13 << " \n";
sum16_csaout13 << "	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout13 << "	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout13 << "	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout13 << "	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO    :\n";
sum16_csaout13 << "	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire; \n";
sum16_csaout13 << " 	                                                    \n";                       
sum16_csaout13 << " 	//output                                            \n";                       
sum16_csaout13 << "     assign SS_out  =  ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SS_out_wire : SS_out_wire;  \n";
sum16_csaout13 << "     assign SC_out  =  ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SC_out_wire : SC_out_wire;  \n";
sum16_csaout13 << " 	                                                    \n";                       
sum16_csaout13 << "                                                         \n";                       
sum16_csaout13 << " endmodule \n";                                                                     
	 sum16_csaout13.close();
}	
void configurable_BFFT::Sum16_CSAout14(std::string string_in){
	 std::ofstream sum16_csaout14;
     std::string         string_buf = "/Sum16_CSAout14.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout14.open(ss.str());
sum16_csaout14 <<" `timescale 1 ns/1 ps \n";
sum16_csaout14 <<" module Sum16_CSAout14(SS_out,\n";
sum16_csaout14 <<"                       SC_out, \n";  
sum16_csaout14 <<"                       A0_in,  \n";
sum16_csaout14 <<"                       A1_in,  \n";  
sum16_csaout14 <<"                       A2_in,  \n";  
sum16_csaout14 <<"                       A3_in,  \n";  
sum16_csaout14 <<"                       A4_in,  \n";  
sum16_csaout14 <<"                       A5_in,  \n";  
sum16_csaout14 <<"                       A6_in,  \n";  
sum16_csaout14 <<"                       A7_in,  \n";  
sum16_csaout14 <<"                       A8_in,  \n";  
sum16_csaout14 <<"                       A9_in,  \n";  
sum16_csaout14 <<"                       A10_in, \n";  
sum16_csaout14 <<"                       A11_in, \n";  
sum16_csaout14 <<"                       A12_in, \n";  
sum16_csaout14 <<"                       A13_in, \n";  
sum16_csaout14 <<"                       A14_in, \n";  
sum16_csaout14 <<"                       A15_in, \n";
sum16_csaout14 <<"                      MixRadix_sel_in,\n";					  
sum16_csaout14 <<"                        BU_mode_sel_in\n";                        
sum16_csaout14 <<"                       // clk\n";                                  
sum16_csaout14 <<"                       ) ;   \n";                                  
sum16_csaout14 <<"                             \n";                                  
sum16_csaout14 <<" parameter D_WIDTH     = 192 ;     \n";
sum16_csaout14 <<" parameter HD_WIDTH    = 96 ;      \n";
sum16_csaout14 <<" parameter P_WIDTH     = 64 ;      \n";                            
sum16_csaout14 <<" parameter D_ZERO      = 192'h0 ;  \n";                            
sum16_csaout14 <<" parameter HD_ZERO     = 96'h0 ;   \n";                           
sum16_csaout14 <<" parameter SEG_32_ZERO = 32'h0 ;   \n";                             
sum16_csaout14 <<" parameter SEG_ZERO    = 8'h0 ;    \n";                            
sum16_csaout14 <<" parameter SEG1        = 12 ;      \n";                            
sum16_csaout14 <<" parameter SEG2        = 24 ;      \n";                            
sum16_csaout14 <<" parameter SEG3        = 36 ;      \n";                            
sum16_csaout14 <<" parameter SEG4        = 48 ;      \n";                            
sum16_csaout14 <<" parameter SEG5        = 60 ;      \n";                            
sum16_csaout14 <<" parameter SEG6        = 64 ;      \n";                            
sum16_csaout14 <<"                                   \n";                            
sum16_csaout14 <<"                                   \n";                            
sum16_csaout14 <<" output[D_WIDTH-1:0] SS_out ;      \n";                            
sum16_csaout14 <<" output[D_WIDTH-1:0] SC_out ;      \n";                            
sum16_csaout14 <<"                                   \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A0_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A1_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A2_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A3_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A4_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A5_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A6_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A7_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A8_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A9_in ;       \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A10_in ;      \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A11_in ;      \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A12_in ;      \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A13_in ;      \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A14_in ;      \n";                            
sum16_csaout14 <<" input [P_WIDTH-1:0] A15_in ;      \n";
sum16_csaout14 <<" input [1:0]         MixRadix_sel_in; \n";
sum16_csaout14 <<" input               BU_mode_sel_in ; \n";                        
sum16_csaout14 <<" // input               clk ;         \n";                         
sum16_csaout14 <<"                                      \n";                         
sum16_csaout14 <<"                                      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  op1 ;           \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  op2 ;           \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  op3 ;           \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  op4 ;           \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  op5 ;           \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  op6 ;           \n";                         
sum16_csaout14 <<"                                      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  ts1_wire ;      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  tc1_wire ;      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  ts2_wire ;      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  tc2_wire ;      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  ts3_wire ;      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  tc3_wire ;      \n";                         
sum16_csaout14 <<" // wire  [D_WIDTH-1:0]  ts4_wire ;   \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  tc4_wire ;      \n";                         
sum16_csaout14 <<"                                      \n";                         
sum16_csaout14 <<" //------------                       \n";          
sum16_csaout14 <<" wire  [D_WIDTH-1:0] SS_out_wire ;    \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0] SC_out_wire ;    \n";
sum16_csaout14 <<"                                      \n";
//--------------------------------------------------------------
//sum16_csaout14 <<" //radix-2                            \n";
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  op0_R2_wire ;  \n";      
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  op1_R2_wire ;  \n";      
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  SS_R2_wire ;   \n";  
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  SC_R2_wire ;   \n";  
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  ts1_R2_wire ;  \n";      
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  tc1_R2_wire ;  \n";      
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  c1_R2_wire ;   \n";    

sum16_csaout14 <<" //radix-2                            \n";
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  op0_R2_wire ;  \n";      
//sum16_csaout14 <<" wire  [HD_WIDTH-1:0]  op1_R2_wire ;  \n";
sum16_csaout14 <<" wire  [P_WIDTH-1:0]  ts1_R2_wire ;  \n";      
sum16_csaout14 <<" wire  [P_WIDTH-1:0]  tc1_R2_wire ;  \n";      
sum16_csaout14 <<" wire  [P_WIDTH  :0]  c1_R2_wire ;   \n";
sum16_csaout14 <<" wire  [P_WIDTH  :0]  SS_R2_wire ;   \n";  
sum16_csaout14 <<" wire  [P_WIDTH  :0]  SC_R2_wire ;   \n";  

//---------------------------------------------------------------
sum16_csaout14 <<" //Radix-4                            \n";
sum16_csaout14 <<" wire  [D_WIDTH-1:0] SS_R4_wire;      \n";       
sum16_csaout14 <<" wire  [D_WIDTH-1:0] SC_R4_wire;      \n";
sum16_csaout14 <<"                                      \n";
sum16_csaout14 <<" //radix-8                            \n";
sum16_csaout14 <<" wire  [D_WIDTH-1:0] op1_R8_wire ;    \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0] op2_R8_wire ;    \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0] op3_R8_wire ;    \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0] op4_R8_wire ;    \n";                         
sum16_csaout14 <<"                                      \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  ts1_R8_wire ;   \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  tc1_R8_wire ;   \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  tc2_R8_wire ;   \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  SS_R8_wire ;    \n";                         
sum16_csaout14 <<" wire  [D_WIDTH-1:0]  SC_R8_wire ;    \n";                         
sum16_csaout14 <<"                                      \n";                         
sum16_csaout14 <<" //--------------------------------------\n";
sum16_csaout14 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire; \n";
sum16_csaout14 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire; \n";
sum16_csaout14 <<" \n";
sum16_csaout14 <<" \n";
//----------------------------------------------------------------------------------
//sum16_csaout14 <<"    //Radix-2 OP                               \n";
//sum16_csaout14 <<"    assign op0_R2_wire = {SEG_32_ZERO,A14_in}; \n";
//sum16_csaout14 <<"    assign op1_R2_wire = {SEG_32_ZERO,A15_in}; \n"; 
//sum16_csaout14 <<" \n";
//sum16_csaout14 <<" \n";                               
//sum16_csaout14 <<" 	assign ts1_R2_wire =  op0_R2_wire ^ op1_R2_wire; \n";                                   
//sum16_csaout14 <<" 	assign tc1_R2_wire = (op0_R2_wire & op1_R2_wire);\n";  	
//sum16_csaout14 <<" \n";
//sum16_csaout14 <<" 	assign SS_R2_wire = ({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) ^ ts1_R2_wire;  \n";        
//sum16_csaout14 <<" 	assign c1_R2_wire = (({tc1_R2_wire[HD_WIDTH-2:0],1'b0}) & ts1_R2_wire);\n";        
//sum16_csaout14 <<" 	assign SC_R2_wire = {c1_R2_wire[HD_WIDTH-2:0],1'b0} ;\n";
//sum16_csaout14 <<"	\n";

sum16_csaout14 <<"    //Radix-2 OP                               \n";
sum16_csaout14 <<" 	assign ts1_R2_wire =  A14_in ^ A15_in; \n";                                   
sum16_csaout14 <<" 	assign tc1_R2_wire = (A14_in & A15_in);\n";  	
sum16_csaout14 <<" \n";
sum16_csaout14 <<" 	assign SS_R2_wire = ({tc1_R2_wire,1'b0}) ^ ts1_R2_wire;  \n";        
sum16_csaout14 <<" 	assign c1_R2_wire = (({tc1_R2_wire,1'b0}) & ts1_R2_wire);\n";        
sum16_csaout14 <<" 	assign SC_R2_wire = {c1_R2_wire[P_WIDTH-1:0],1'b0} ;\n";
sum16_csaout14 <<"	\n";
//-----------------------------------------------------------------------------------
sum16_csaout14 <<" 	//Radix-4 butterfly unit operation                                    \n";
sum16_csaout14 <<" 	assign SS_R4_wire = {SEG_32_ZERO,A13_in[SEG6-1:SEG4],A13_in[SEG4-1:0],\n";  
sum16_csaout14 <<" 					     SEG_32_ZERO,A12_in[SEG6-1:SEG4],A12_in[SEG4-1:0] \n";  
sum16_csaout14 <<" 					    } ;                                               \n";
sum16_csaout14 <<" 	assign SC_R4_wire = {SEG_32_ZERO,A15_in[SEG6-1:SEG4],A15_in[SEG4-1:0],\n";  
sum16_csaout14 <<" 					     SEG_32_ZERO,A14_in[SEG6-1:SEG4],A14_in[SEG4-1:0] \n";  
sum16_csaout14 <<" 					    } ;			\n";
sum16_csaout14 <<"                              \n";
sum16_csaout14 <<" 	//                          \n";                              
sum16_csaout14 <<" 	assign op1_R8_wire = {A9_in[SEG4-1:SEG2],                 \n";
sum16_csaout14 <<" 				          A9_in[SEG2-1:0],                    \n";
sum16_csaout14 <<" 	                      A10_in[SEG4-1:SEG2],                \n";
sum16_csaout14 <<" 				          A10_in[SEG2-1:0],                   \n";
sum16_csaout14 <<" 				          A11_in[SEG4-1:SEG2],                \n";
sum16_csaout14 <<" 				          A11_in[SEG2-1:0],                   \n";
sum16_csaout14 <<" 				          A8_in[SEG4-1:SEG2],                 \n";
sum16_csaout14 <<" 				          A8_in[SEG2-1:0]                     \n";
sum16_csaout14 <<" 				          } ;                                 \n";
sum16_csaout14 <<" 	//                                                        \n";
sum16_csaout14 <<" 	assign op2_R8_wire = {A13_in[SEG4-1:SEG2],                \n";
sum16_csaout14 <<" 				          A13_in[SEG2-1:0],                   \n";
sum16_csaout14 <<" 	                      A14_in[SEG4-1:SEG2],                \n";
sum16_csaout14 <<" 				          A14_in[SEG2-1:0],                   \n";
sum16_csaout14 <<" 				          A15_in[SEG4-1:SEG2],                \n";
sum16_csaout14 <<" 				          A15_in[SEG2-1:0],                   \n";
sum16_csaout14 <<" 				          A12_in[SEG4-1:SEG2],                \n";
sum16_csaout14 <<" 				          A12_in[SEG2-1:0]                    \n";
sum16_csaout14 <<" 				          } ;			                      \n";
sum16_csaout14 <<" 	//                                                        \n";
sum16_csaout14 <<" 	assign op3_R8_wire = {SEG_32_ZERO,A10_in[SEG6-1:SEG4],    \n";
sum16_csaout14 <<" 				          SEG_32_ZERO,A11_in[SEG6-1:SEG4],    \n";
sum16_csaout14 <<" 				          SEG_32_ZERO,A8_in[SEG6-1:SEG4],     \n";
sum16_csaout14 <<" 				          SEG_32_ZERO,A9_in[SEG6-1:SEG4]      \n";
sum16_csaout14 <<" 				          } ;                                 \n";
sum16_csaout14 <<" 	//                                                        \n";
sum16_csaout14 <<" 	assign op4_R8_wire = {SEG_32_ZERO,A14_in[SEG6-1:SEG4],    \n";
sum16_csaout14 <<" 				          SEG_32_ZERO,A15_in[SEG6-1:SEG4],    \n";
sum16_csaout14 <<" 				          SEG_32_ZERO,A12_in[SEG6-1:SEG4],    \n";
sum16_csaout14 <<" 				          SEG_32_ZERO,A13_in[SEG6-1:SEG4]     \n";
sum16_csaout14 <<" 				          } ;                                 \n";
sum16_csaout14 <<"                                                            \n";   
sum16_csaout14 <<"                                                            \n";   
sum16_csaout14 <<" 	//3-2 counter1                                            \n";
sum16_csaout14 <<" 	assign ts1_R8_wire = op1_R8_wire^op2_R8_wire^op3_R8_wire ;\n"; 
sum16_csaout14 <<" 	assign tc1_R8_wire = (op1_R8_wire&op2_R8_wire)|(op2_R8_wire&op3_R8_wire)|(op1_R8_wire&op3_R8_wire) ;\n";
sum16_csaout14 <<" 	\n";                                                           
sum16_csaout14 <<" 	//3-2 counter1                                             \n";
sum16_csaout14 <<" 	assign SS_R8_wire  = ({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})^ts1_R8_wire^op4_R8_wire ;\n";
sum16_csaout14 <<" 	assign tc2_R8_wire = (({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&ts1_R8_wire)|(ts1_R8_wire&op4_R8_wire)|(({tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]})&op4_R8_wire) ;  \n";
sum16_csaout14 <<" 	                                                           \n";
sum16_csaout14 <<" 	assign SC_R8_wire  = {tc2_R8_wire[D_WIDTH-2:0],tc2_R8_wire[D_WIDTH-1]} ;\n";
sum16_csaout14 <<"                                                             \n";
sum16_csaout14 <<"                                                             \n";  
sum16_csaout14 <<" 	//                                                         \n";
sum16_csaout14 <<" 	assign op1 = { A1_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A1_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 	               A2_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A2_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				   A3_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A3_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				   A4_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A4_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				   A5_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A5_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				   A6_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A6_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				   A7_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A7_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				   A0_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A0_in[SEG1-1:0]                             \n";
sum16_csaout14 <<" 				  } ;                                          \n";
sum16_csaout14 <<" 	//                                                         \n";
sum16_csaout14 <<" 	assign op2 = { A2_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A2_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A3_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A3_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A4_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A4_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A5_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A5_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A6_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A6_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A7_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A7_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A0_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A0_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A1_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A1_in[SEG3-1:SEG2]                          \n";
sum16_csaout14 <<" 				  } ;			                               \n";
sum16_csaout14 <<" 	//                                                         \n";
sum16_csaout14 <<" 	assign op3 = {SEG_ZERO,A3_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A3_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A4_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A5_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A6_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A6_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A7_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A0_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A1_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A2_in[SEG5-1:SEG4]                           \n";
sum16_csaout14 <<" 				  } ;                                          \n";
sum16_csaout14 <<" 	//                                                         \n";
sum16_csaout14 <<" 	assign op4 = { A9_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A9_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 	              A10_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				  A10_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				  A11_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				  A11_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				  A12_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				  A12_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				  A13_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				  A13_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				  A14_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				  A14_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				  A15_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				  A15_in[SEG1-1:0],                            \n";
sum16_csaout14 <<" 				   A8_in[SEG2-1:SEG1],                         \n";
sum16_csaout14 <<" 				   A8_in[SEG1-1:0]                             \n";
sum16_csaout14 <<" 				  } ;                                          \n";
sum16_csaout14 <<" 	//                                                         \n";
sum16_csaout14 <<" 	assign op5 = {A10_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				  A10_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				  A11_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				  A11_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				  A12_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				  A12_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				  A13_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				  A13_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				  A14_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				  A14_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				  A15_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				  A15_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A8_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A8_in[SEG3-1:SEG2],                         \n";
sum16_csaout14 <<" 				   A9_in[SEG4-1:SEG3],                         \n";
sum16_csaout14 <<" 				   A9_in[SEG3-1:SEG2]                          \n";
sum16_csaout14 <<" 				  } ;                                          \n";
sum16_csaout14 <<" 	//                                                         \n";
sum16_csaout14 <<" 	assign op6 = {SEG_ZERO,A11_in[SEG6-1:SEG5],                \n";
sum16_csaout14 <<" 				  A11_in[SEG5-1:SEG4],                         \n";
sum16_csaout14 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],                \n";
sum16_csaout14 <<" 				  A12_in[SEG5-1:SEG4],                         \n";
sum16_csaout14 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],                \n";
sum16_csaout14 <<" 				  A13_in[SEG5-1:SEG4],                         \n";
sum16_csaout14 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],                \n";
sum16_csaout14 <<" 				  A14_in[SEG5-1:SEG4],                         \n";
sum16_csaout14 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],                \n";
sum16_csaout14 <<" 				  A15_in[SEG5-1:SEG4],                         \n";
sum16_csaout14 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A8_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5],                 \n";
sum16_csaout14 <<" 				  A9_in[SEG5-1:SEG4],                          \n";
sum16_csaout14 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],                \n";
sum16_csaout14 <<" 				  A10_in[SEG5-1:SEG4]                          \n";
sum16_csaout14 <<" 				  } ;                                          \n";
sum16_csaout14 <<" 	                                                           \n";
sum16_csaout14 <<"                                                             \n";  
sum16_csaout14 <<" 	//3-2 counter1                                             \n";
sum16_csaout14 <<" 	assign ts1_wire = op1^op2^op3 ;                            \n";
sum16_csaout14 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ;          \n";
sum16_csaout14 <<" 	                                                           \n";
sum16_csaout14 <<" 	//3-2 counter1                                             \n";
sum16_csaout14 <<" 	assign ts2_wire = op4^op5^op6 ;                            \n";
sum16_csaout14 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ;          \n";
sum16_csaout14 <<" 	                                                           \n";
sum16_csaout14 <<" 	//3-2 counter1                                             \n";
sum16_csaout14 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ;\n";
sum16_csaout14 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ;\n";
sum16_csaout14 <<" 	                                                          \n";
sum16_csaout14 <<" 	//3-2 counter1                                            \n";
sum16_csaout14 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ;  \n";
sum16_csaout14 <<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout14 <<" 	                                                          \n";
sum16_csaout14 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ; \n";
sum16_csaout14 <<" \n";
sum16_csaout14 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout14 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SS_R2_wire}):\n";
sum16_csaout14 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout14 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? ({127'd0,SC_R2_wire}):\n";
sum16_csaout14 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;\n";
sum16_csaout14 <<" 	                                                          \n";
sum16_csaout14 <<"  //output 	                                              \n";
sum16_csaout14 <<" 	assign SS_out = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SS_out_wire : SS_out_wire;\n";
sum16_csaout14 <<" 	assign SC_out = ( BU_mode_sel_in == 1'b1 ) ?  MixRadix_SC_out_wire : SC_out_wire;\n";
sum16_csaout14 <<"                                                            \n";
sum16_csaout14 <<" endmodule                                                  \n";
	 sum16_csaout14.close();
}	
void configurable_BFFT::Sum16_CSAout15(std::string string_in){
	 std::ofstream sum16_csaout15;
     std::string         string_buf = "/Sum16_CSAout15.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 sum16_csaout15.open(ss.str());
sum16_csaout15 <<" `timescale 1 ns/1 ps \n";                        
sum16_csaout15 <<" module Sum16_CSAout15(SS_out, \n";
sum16_csaout15 <<"                       SC_out, \n";              
sum16_csaout15 <<"                       A0_in,  \n";              
sum16_csaout15 <<"                       A1_in,  \n";              
sum16_csaout15 <<"                       A2_in,  \n";              
sum16_csaout15 <<"                       A3_in,  \n";              
sum16_csaout15 <<"                       A4_in,  \n";              
sum16_csaout15 <<"                       A5_in,  \n";              
sum16_csaout15 <<"                       A6_in,  \n";              
sum16_csaout15 <<"                       A7_in,  \n";              
sum16_csaout15 <<"                       A8_in,  \n";
sum16_csaout15 <<"                       A9_in,  \n";              
sum16_csaout15 <<"                       A10_in, \n";              
sum16_csaout15 <<"                       A11_in, \n";              
sum16_csaout15 <<"                       A12_in, \n";              
sum16_csaout15 <<"                       A13_in, \n";              
sum16_csaout15 <<"                       A14_in, \n";              
sum16_csaout15 <<"                       A15_in, \n";
sum16_csaout15 <<"                       MixRadix_sel_in,\n";
sum16_csaout15 <<"                       BU_mode_sel_in  \n";
sum16_csaout15 <<"                       // clk          \n";      
sum16_csaout15 <<"                       ) ;             \n";      
sum16_csaout15 <<"                                       \n";      
sum16_csaout15 <<" parameter D_WIDTH     = 192 ;         \n";      
sum16_csaout15 <<" parameter P_WIDTH     = 64 ;          \n";      
sum16_csaout15 <<" parameter D_ZERO      = 192'h0 ;\n";
sum16_csaout15 <<" parameter SEG_32_ZERO = 32'h0 ; \n"; 
sum16_csaout15 <<" parameter SEG_ZERO    = 8'h0 ;  \n";            
sum16_csaout15 <<" parameter SEG1        = 12 ;    \n";            
sum16_csaout15 <<" parameter SEG2        = 24 ;    \n";            
sum16_csaout15 <<" parameter SEG3        = 36 ;    \n";            
sum16_csaout15 <<" parameter SEG4        = 48 ;    \n";            
sum16_csaout15 <<" parameter SEG5        = 60 ;    \n";            
sum16_csaout15 <<" parameter SEG6        = 64 ;    \n";            
sum16_csaout15 <<"                                 \n";            
sum16_csaout15 <<"                                 \n";            
sum16_csaout15 <<" output[D_WIDTH-1:0] SS_out ;    \n";            
sum16_csaout15 <<" output[D_WIDTH-1:0] SC_out ;    \n";            
sum16_csaout15 <<"                                 \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A0_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A1_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A2_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A3_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A4_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A5_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A6_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A7_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A8_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A9_in ;     \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A10_in ;    \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A11_in ;    \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A12_in ;    \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A13_in ;    \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A14_in ;    \n";            
sum16_csaout15 <<" input [P_WIDTH-1:0] A15_in ;\n";
sum16_csaout15 <<" input [1:0]         MixRadix_sel_in;  \n";
sum16_csaout15 <<" input               BU_mode_sel_in ;  \n";      
sum16_csaout15 <<" // input               clk ; \n";               
sum16_csaout15 <<"                              \n";               
sum16_csaout15 <<"                              \n";               
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  op1 ;   \n";               
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  op2 ;   \n";               
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  op3 ;   \n";               
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  op4 ;   \n";               
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  op5 ;   \n";               
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  op6 ;   \n";               
sum16_csaout15 <<"                              \n";               
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  ts1_wire;\n";             
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  tc1_wire;\n";             
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  ts2_wire ;\n";             
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  tc2_wire ;\n";             
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  ts3_wire ;\n";             
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  tc3_wire ;\n";             
sum16_csaout15 <<" // wire  [D_WIDTH-1:0]  ts4_wire;\n";         
sum16_csaout15 <<" wire  [D_WIDTH-1:0]  tc4_wire ;  \n";          
sum16_csaout15 <<"                                  \n";          
sum16_csaout15 <<" //-----------                    \n";
sum16_csaout15 <<" wire  [D_WIDTH-1:0] SS_out_wire ;\n";          
sum16_csaout15 <<" wire  [D_WIDTH-1:0] SC_out_wire ;\n";
sum16_csaout15 <<" //radix-2\n";
sum16_csaout15 <<" wire  [D_WIDTH-1:0] SS_R2_wire ;\n";
sum16_csaout15 <<" //RADIX-4\n";
sum16_csaout15 <<" wire [D_WIDTH-1:0] SS_R4_wire ;\n";        
sum16_csaout15 <<" wire [D_WIDTH-1:0] SC_R4_wire ;\n"; 
sum16_csaout15 <<"  \n";
sum16_csaout15 <<" //raidx-8 \n";
sum16_csaout15 <<" wire  [D_WIDTH-1:0] op1_R8_wire ; \n";         
sum16_csaout15 <<" wire  [D_WIDTH-1:0] op2_R8_wire ; \n";          
sum16_csaout15 <<" wire  [D_WIDTH-1:0] op3_R8_wire ; \n";          
sum16_csaout15 <<"                                   \n";          
sum16_csaout15 <<" wire  [D_WIDTH-1:0] SS_R8_wire ;  \n";          
sum16_csaout15 <<" wire  [D_WIDTH-1:0] tc1_R8_wire ; \n";          
sum16_csaout15 <<" wire  [D_WIDTH-1:0] SC_R8_wire ;  \n";          
sum16_csaout15 <<" //--------------------------------------\n";
sum16_csaout15 <<" wire  [D_WIDTH-1:0] MixRadix_SS_out_wire;\n";
sum16_csaout15 <<" wire  [D_WIDTH-1:0] MixRadix_SC_out_wire;\n";                                             
sum16_csaout15 <<"\n";
sum16_csaout15 <<" 	//radix-2 butterfly unit  \n";
sum16_csaout15 <<" 	assign SS_R2_wire = {SEG_32_ZERO,A15_in,SEG_32_ZERO,A14_in};\n";                      
sum16_csaout15 <<" \n";
sum16_csaout15 <<" 	//Radix-4 butterfly unit \n";                                                     
sum16_csaout15 <<" 	assign  SS_R4_wire  = {A13_in[SEG4-1:0],  \n";                                     
sum16_csaout15 <<" 	                       A14_in[SEG4-1:0],  \n";                                     
sum16_csaout15 <<" 	                       A15_in[SEG4-1:0],  \n";                                     
sum16_csaout15 <<" 	                       A12_in[SEG4-1:0]}; \n";                                     
sum16_csaout15 <<" 	                                          \n";                                    
sum16_csaout15 <<"    assign 	SC_R4_wire  = {SEG_32_ZERO,A14_in[SEG6-1:SEG4], \n";                       
sum16_csaout15 <<" 	                       SEG_32_ZERO,A15_in[SEG6-1:SEG4],     \n";                   
sum16_csaout15 <<" 	                       SEG_32_ZERO,A12_in[SEG6-1:SEG4],     \n";                   
sum16_csaout15 <<" 	                       SEG_32_ZERO,A13_in[SEG6-1:SEG4]} ;   \n";                                            
sum16_csaout15 <<" 	//                                                          \n";
sum16_csaout15 <<" 	assign op1_R8_wire = {A9_in[SEG2-1:0],                      \n";
sum16_csaout15 <<" 				  A10_in[SEG2-1:0],                             \n";
sum16_csaout15 <<" 				  A11_in[SEG2-1:0],                             \n";
sum16_csaout15 <<" 				  A12_in[SEG2-1:0],                             \n";
sum16_csaout15 <<" 				  A13_in[SEG2-1:0],                             \n";
sum16_csaout15 <<" 				  A14_in[SEG2-1:0],                             \n";
sum16_csaout15 <<" 				  A15_in[SEG2-1:0],                             \n";
sum16_csaout15 <<" 				  A8_in[SEG2-1:0]                               \n";
sum16_csaout15 <<" 				  } ;                                           \n";
sum16_csaout15 <<" 	//                                                          \n";
sum16_csaout15 <<" 	assign op2_R8_wire = {A10_in[SEG4-1:SEG2],                  \n";
sum16_csaout15 <<" 				  A11_in[SEG4-1:SEG2],                          \n";
sum16_csaout15 <<" 				  A12_in[SEG4-1:SEG2],                          \n";
sum16_csaout15 <<" 				  A13_in[SEG4-1:SEG2],                          \n";
sum16_csaout15 <<" 				  A14_in[SEG4-1:SEG2],                          \n";
sum16_csaout15 <<" 				  A15_in[SEG4-1:SEG2],                          \n";
sum16_csaout15 <<" 				  A8_in[SEG4-1:SEG2],                           \n";
sum16_csaout15 <<" 				  A9_in[SEG4-1:SEG2]                            \n";
sum16_csaout15 <<" 				  } ;			                                \n";
sum16_csaout15 <<" 	//                                                          \n";
sum16_csaout15 <<" 	assign op3_R8_wire = {SEG_ZERO,A11_in[SEG6-1:SEG4],         \n";
sum16_csaout15 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG4],                 \n";
sum16_csaout15 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG4],                 \n";
sum16_csaout15 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG4],                 \n";
sum16_csaout15 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG4],                 \n";
sum16_csaout15 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG4],                  \n";
sum16_csaout15 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG4],                  \n";
sum16_csaout15 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG4]                  \n";
sum16_csaout15 <<" 				  } ;                                           \n";
sum16_csaout15 <<"\n";
sum16_csaout15 <<"\n";   
sum16_csaout15 <<" 	//3-2 counter1   \n";                                  
sum16_csaout15 <<" 	assign SS_R8_wire  = op1_R8_wire ^ op2_R8_wire ^ op3_R8_wire ; \n";
sum16_csaout15 <<" 	assign tc1_R8_wire = (op1_R8_wire & op2_R8_wire)|(op2_R8_wire & op3_R8_wire)|(op1_R8_wire & op3_R8_wire) ;\n";
sum16_csaout15 <<" 	                                                                         \n";
sum16_csaout15 <<" 	assign SC_R8_wire  = {tc1_R8_wire[D_WIDTH-2:0],tc1_R8_wire[D_WIDTH-1]} ; \n";           
sum16_csaout15 <<" 	   \n";                                                                      
sum16_csaout15 <<"     \n";                                                  
sum16_csaout15 <<" 	// \n";                                               
sum16_csaout15 <<" 	assign op1 = { A1_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A2_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A3_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A4_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A5_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A6_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A7_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A8_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A9_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				  A10_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				  A11_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				  A12_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				  A13_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				  A14_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				  A15_in[SEG1-1:0],  \n";                 
sum16_csaout15 <<" 				   A0_in[SEG1-1:0]   \n";                 
sum16_csaout15 <<" 				  } ;                \n";                 
sum16_csaout15 <<" 	//                               \n";                 
sum16_csaout15 <<" 	assign op2 = { A2_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A3_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A4_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A5_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A6_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A7_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A8_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A9_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				  A10_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				  A11_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				  A12_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				  A13_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				  A14_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				  A15_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A0_in[SEG2-1:SEG1], \n";               
sum16_csaout15 <<" 				   A1_in[SEG2-1:SEG1]  \n";               
sum16_csaout15 <<" 				  } ;			       \n";               
sum16_csaout15 <<" 	//                                 \n";               
sum16_csaout15 <<" 	assign op3 = { A3_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A4_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A5_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A6_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A7_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A8_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A9_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				  A10_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				  A11_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				  A12_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				  A13_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				  A14_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				  A15_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A0_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A1_in[SEG3-1:SEG2], \n";               
sum16_csaout15 <<" 				   A2_in[SEG3-1:SEG2]  \n";               
sum16_csaout15 <<" 				  } ;                  \n";               
sum16_csaout15 <<" 	//                                 \n";               
sum16_csaout15 <<" 	assign op4 = { A4_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A5_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A6_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A7_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A8_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A9_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				  A10_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				  A11_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				  A12_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				  A13_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				  A14_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				  A15_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A0_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A1_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A2_in[SEG4-1:SEG3], \n";               
sum16_csaout15 <<" 				   A3_in[SEG4-1:SEG3]  \n";               
sum16_csaout15 <<" 				  } ;                  \n";               
sum16_csaout15 <<" 	//                                 \n";               
sum16_csaout15 <<" 	assign op5 = { A5_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A6_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A7_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A8_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A9_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				  A10_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				  A11_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				  A12_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				  A13_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				  A14_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				  A15_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A0_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A1_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A2_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A3_in[SEG5-1:SEG4], \n";               
sum16_csaout15 <<" 				   A4_in[SEG5-1:SEG4]  \n";               
sum16_csaout15 <<" 				  } ;                  \n";               
sum16_csaout15 <<" 	//                                 \n";               
sum16_csaout15 <<" 	assign op6 = {SEG_ZERO,A6_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A7_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A8_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A9_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A10_in[SEG6-1:SEG5],\n";       
sum16_csaout15 <<" 				  SEG_ZERO,A11_in[SEG6-1:SEG5],\n";       
sum16_csaout15 <<" 				  SEG_ZERO,A12_in[SEG6-1:SEG5],\n";       
sum16_csaout15 <<" 				  SEG_ZERO,A13_in[SEG6-1:SEG5],\n";       
sum16_csaout15 <<" 				  SEG_ZERO,A14_in[SEG6-1:SEG5],\n";       
sum16_csaout15 <<" 				  SEG_ZERO,A15_in[SEG6-1:SEG5],\n";       
sum16_csaout15 <<" 				  SEG_ZERO,A0_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A1_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A2_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A3_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A4_in[SEG6-1:SEG5], \n";       
sum16_csaout15 <<" 				  SEG_ZERO,A5_in[SEG6-1:SEG5]  \n";       
sum16_csaout15 <<" 				  } ;                          \n";       
sum16_csaout15 <<" 	                                           \n";       
sum16_csaout15 <<"                                             \n";          
sum16_csaout15 <<" 	//3-2 counter1                             \n";       
sum16_csaout15 <<" 	assign ts1_wire = op1^op2^op3 ;            \n";       
sum16_csaout15 <<" 	assign tc1_wire = (op1&op2)|(op2&op3)|(op1&op3) ; \n";
sum16_csaout15 <<" 	                                                  \n";
sum16_csaout15 <<" 	//3-2 counter1                                    \n";
sum16_csaout15 <<" 	assign ts2_wire = op4^op5^op6 ;                   \n";
sum16_csaout15 <<" 	assign tc2_wire = (op4&op5)|(op5&op6)|(op4&op6) ; \n";
sum16_csaout15 <<" 	                                                  \n";
sum16_csaout15 <<" 	//3-2 counter1                                    \n";
sum16_csaout15 <<" 	assign ts3_wire = ({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})^ts1_wire^ts2_wire ;\n";
sum16_csaout15 <<" 	assign tc3_wire = (({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts1_wire)|(ts1_wire&ts2_wire)|(({tc1_wire[D_WIDTH-2:0],tc1_wire[D_WIDTH-1]})&ts2_wire) ;\n";
sum16_csaout15 <<"\n"; 	                                                                    
sum16_csaout15 <<" 	//3-2 counter1\n";                                                      
sum16_csaout15 <<" 	assign SS_out_wire = ({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})^ts3_wire^({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}) ; \n";
sum16_csaout15 <<" 	assign tc4_wire    = (({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&ts3_wire)|(ts3_wire&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]}))|(({tc3_wire[D_WIDTH-2:0],tc3_wire[D_WIDTH-1]})&({tc2_wire[D_WIDTH-2:0],tc2_wire[D_WIDTH-1]})) ;\n";
sum16_csaout15 <<"\n"; 	                                                                    
sum16_csaout15 <<" 	assign SC_out_wire = {tc4_wire[D_WIDTH-2:0],tc4_wire[D_WIDTH-1]} ;  \n";
sum16_csaout15 <<"\n";
sum16_csaout15 <<"	// 2'd0: radix-2 , 2'd1: radix-4 , otherwise radix-8\n";
sum16_csaout15 <<"	assign MixRadix_SS_out_wire = (MixRadix_sel_in == 2'd0) ? SS_R2_wire:\n";
sum16_csaout15 <<"	                              (MixRadix_sel_in == 2'd1) ? SS_R4_wire: SS_R8_wire;\n";
sum16_csaout15 <<"	assign MixRadix_SC_out_wire = (MixRadix_sel_in == 2'd0) ? D_ZERO:\n";
sum16_csaout15 <<"	                              (MixRadix_sel_in == 2'd1) ? SC_R4_wire: SC_R8_wire;\n";
sum16_csaout15 <<" 	//output                                             \n";               
sum16_csaout15 <<" 	assign  SS_out  =  ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SS_out_wire : SS_out_wire;   \n";
sum16_csaout15 <<" 	assign  SC_out  =  ( BU_mode_sel_in == 1'b1 ) ? MixRadix_SC_out_wire : SC_out_wire;   \n";
sum16_csaout15 <<" 	 \n";                                                                    
sum16_csaout15 <<"   \n";                                                                       
sum16_csaout15 <<" endmodule\n";                                                                
	 
	 sum16_csaout15.close();
}	 
// R2P Butterfly unit
void configurable_BFFT::Ctrl_PipeReg1_R2P(std::string string_in){
	 std::ofstream ctrl_pipereg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 ctrl_pipereg1.open(ss.str());	
     ctrl_pipereg1<< " `timescale 1 ns/1 ps                                                             \n";
     ctrl_pipereg1<< " module Ctrl_PipeReg1(mode_sel_Dout,                                              \n";
     ctrl_pipereg1<< " 				        Mul_sel_Dout,                                               \n";
     ctrl_pipereg1<< " 				        RDC_sel_Dout,                                               \n";
     ctrl_pipereg1<< " 				        BU_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< " 				        BU_dc_sel_Dout,                                             \n";
     ctrl_pipereg1<< " 				        DC_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< "                      mode_sel_in,                                                \n";
     ctrl_pipereg1<< " 			            Mul_sel_in,                                                 \n";
     ctrl_pipereg1<< " 			            RDC_sel_in,                                                 \n";
     ctrl_pipereg1<< " 			            BU_mode_sel_in,                                             \n";
     ctrl_pipereg1<< " 			            BU_dc_sel_in,                                               \n";
     ctrl_pipereg1<< " 			            DC_mode_sel_in,                                             \n";
     ctrl_pipereg1<< "                      rst_n,                                                      \n";
     ctrl_pipereg1<< "                      clk                                                         \n";
     ctrl_pipereg1<< "                      ) ;                                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " parameter ROMA_WIDTH  = 11;\n";
     ctrl_pipereg1<< " parameter ROMA_ZERO   = 11'h0 ;\n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " output                  mode_sel_Dout ;                                          \n";
     ctrl_pipereg1<< " output [1:0]            Mul_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [3:0]            RDC_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [2:0]            DC_mode_sel_Dout ;                                       \n";
     ctrl_pipereg1<< " output                  BU_mode_sel_Dout ;                                       \n";
     ctrl_pipereg1<< " output                  BU_dc_sel_Dout ;                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " input                   mode_sel_in ;                                            \n";
     ctrl_pipereg1<< " input  [1:0]            Mul_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [3:0]            RDC_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [2:0]            DC_mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " input                   BU_mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " input                   BU_dc_sel_in ;                                           \n";
     ctrl_pipereg1<< " input                   rst_n ;                                                  \n";
     ctrl_pipereg1<< " input                   clk ;                                                    \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " reg                  mode_sel_D0reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D1reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D2reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D3reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D4reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_Dout ;                                             \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D45reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_Dout  ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D0reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D1reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D2reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D3reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D4reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D5reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D6reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D7reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D8reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D9reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D10reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D11reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D12reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D13reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D14reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D15reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D16reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D17reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D18reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D19reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D20reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D21reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D22reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D23reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D24reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D25reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D26reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D27reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D28reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D29reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D30reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D31reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D32reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D33reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D34reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D35reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D36reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D37reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D38reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D39reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D40reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D41reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D42reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D43reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D44reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D45reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_Dout  ;                                           \n";	 
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_D45reg ;                                        \n";
     ctrl_pipereg1<< " reg [2:0]            DC_mode_sel_Dout  ;                                         \n";
     //-------------------------------------------------------------
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D3reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D4reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_Dout ;                                              \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D3reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D4reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D5reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D6reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D7reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_Dout ;                                              \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n";
     ctrl_pipereg1<< " 	always @(posedge clk or negedge rst_n) begin                                    \n";
     ctrl_pipereg1<< " 		if(~rst_n) begin                                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D3reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D4reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_Dout       <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D3reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D4reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout        <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D6reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D7reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout        <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= 3'd0;                                            \n";	 
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= 3'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg  <= 1'd0;                                             \n";	 
     ctrl_pipereg1<< " 			BU_mode_sel_Dout    <= 1'd0;                                             \n"; 
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg  <= 1'd0;                                               \n";	 
     ctrl_pipereg1<< " 			BU_dc_sel_Dout    <= 1'd0;                                               \n";     	 
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 		else begin                                                                  \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg <= mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg <= mode_sel_D0reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg <= mode_sel_D1reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D3reg <= mode_sel_D2reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D4reg <= mode_sel_D3reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_Dout  <= mode_sel_D4reg ;                                      \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg <= Mul_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D3reg <= Mul_sel_D2reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D4reg <= Mul_sel_D3reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout  <= Mul_sel_D4reg ;                                        \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg <= RDC_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D6reg <= RDC_sel_D5reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D7reg <= RDC_sel_D6reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout  <= RDC_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;                                  \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;                              \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg  <= BU_mode_sel_in;                                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg  <= BU_mode_sel_D0reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg  <= BU_mode_sel_D1reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg  <= BU_mode_sel_D2reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg  <= BU_mode_sel_D3reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg  <= BU_mode_sel_D4reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg  <= BU_mode_sel_D5reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg  <= BU_mode_sel_D6reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg  <= BU_mode_sel_D7reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg  <= BU_mode_sel_D8reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg <= BU_mode_sel_D9reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg <= BU_mode_sel_D10reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg <= BU_mode_sel_D11reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg <= BU_mode_sel_D12reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg <= BU_mode_sel_D13reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg <= BU_mode_sel_D14reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg <= BU_mode_sel_D15reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg <= BU_mode_sel_D16reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg <= BU_mode_sel_D17reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg <= BU_mode_sel_D18reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg <= BU_mode_sel_D19reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg <= BU_mode_sel_D20reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg <= BU_mode_sel_D21reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg <= BU_mode_sel_D22reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg <= BU_mode_sel_D23reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg <= BU_mode_sel_D24reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg <= BU_mode_sel_D25reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg <= BU_mode_sel_D26reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg <= BU_mode_sel_D27reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg <= BU_mode_sel_D28reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg <= BU_mode_sel_D29reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg <= BU_mode_sel_D30reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg <= BU_mode_sel_D31reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg <= BU_mode_sel_D32reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg <= BU_mode_sel_D33reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg <= BU_mode_sel_D34reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg <= BU_mode_sel_D35reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg <= BU_mode_sel_D36reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg <= BU_mode_sel_D37reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg <= BU_mode_sel_D38reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg <= BU_mode_sel_D39reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg <= BU_mode_sel_D40reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg <= BU_mode_sel_D41reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg <= BU_mode_sel_D42reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg <= BU_mode_sel_D43reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg <= BU_mode_sel_D44reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_Dout   <= BU_mode_sel_D45reg;                               \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg  <= BU_dc_sel_in;                                       \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg  <= BU_dc_sel_D0reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg  <= BU_dc_sel_D1reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg  <= BU_dc_sel_D2reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg  <= BU_dc_sel_D3reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg  <= BU_dc_sel_D4reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg  <= BU_dc_sel_D5reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg  <= BU_dc_sel_D6reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg  <= BU_dc_sel_D7reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg  <= BU_dc_sel_D8reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg <= BU_dc_sel_D9reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg <= BU_dc_sel_D10reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg <= BU_dc_sel_D11reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg <= BU_dc_sel_D12reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg <= BU_dc_sel_D13reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg <= BU_dc_sel_D14reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg <= BU_dc_sel_D15reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg <= BU_dc_sel_D16reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg <= BU_dc_sel_D17reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg <= BU_dc_sel_D18reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg <= BU_dc_sel_D19reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg <= BU_dc_sel_D20reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg <= BU_dc_sel_D21reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg <= BU_dc_sel_D22reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg <= BU_dc_sel_D23reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg <= BU_dc_sel_D24reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg <= BU_dc_sel_D25reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg <= BU_dc_sel_D26reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg <= BU_dc_sel_D27reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg <= BU_dc_sel_D28reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg <= BU_dc_sel_D29reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg <= BU_dc_sel_D30reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg <= BU_dc_sel_D31reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg <= BU_dc_sel_D32reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg <= BU_dc_sel_D33reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg <= BU_dc_sel_D34reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg <= BU_dc_sel_D35reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg <= BU_dc_sel_D36reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg <= BU_dc_sel_D37reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg <= BU_dc_sel_D38reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg <= BU_dc_sel_D39reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg <= BU_dc_sel_D40reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg <= BU_dc_sel_D41reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg <= BU_dc_sel_D42reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg <= BU_dc_sel_D43reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg <= BU_dc_sel_D44reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_Dout   <= BU_dc_sel_D45reg;                                   \n";     
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 	end                                                                             \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " endmodule                                                                        \n";
	 ctrl_pipereg1.close();
}
void configurable_BFFT::R16_WD_buf_R2P(std::string string_in){
	 std::ofstream R16_WD_buf;
     std::string        string_buf = "/R16_WD_buf.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 R16_WD_buf.open(ss.str());
R16_WD_buf << " `timescale 1 ns/1 ps                                        \n";
R16_WD_buf << " module R16_WD_buf(RDC0_D_out,                               \n";
R16_WD_buf << " 			       RDC1_D_out,                              \n";
R16_WD_buf << " 				   RDC2_D_out,                              \n";
R16_WD_buf << " 				   RDC3_D_out,                              \n";
R16_WD_buf << " 				   RDC4_D_out,                              \n";
R16_WD_buf << " 				   RDC5_D_out,                              \n";
R16_WD_buf << " 				   RDC6_D_out,                              \n";
R16_WD_buf << " 				   RDC7_D_out,                              \n";
R16_WD_buf << " 				   RDC8_D_out,                              \n";
R16_WD_buf << " 				   RDC9_D_out,                              \n";
R16_WD_buf << " 				   RDC10_D_out,                             \n";
R16_WD_buf << " 				   RDC11_D_out,                             \n";
R16_WD_buf << " 				   RDC12_D_out,                             \n";
R16_WD_buf << " 				   RDC13_D_out,                             \n";
R16_WD_buf << " 				   RDC14_D_out,                             \n";
R16_WD_buf << " 				   RDC15_D_out,                             \n";
R16_WD_buf << " 		           RDC0_in,                                 \n";
R16_WD_buf << " 				   RDC1_in,                                 \n";
R16_WD_buf << " 				   RDC2_in,                                 \n";
R16_WD_buf << " 				   RDC3_in,                                 \n";
R16_WD_buf << " 				   RDC4_in,                                 \n";
R16_WD_buf << " 				   RDC5_in,                                 \n";
R16_WD_buf << " 				   RDC6_in,                                 \n";
R16_WD_buf << " 				   RDC7_in,                                 \n";
R16_WD_buf << " 				   RDC8_in,                                 \n";
R16_WD_buf << " 				   RDC9_in,                                 \n";
R16_WD_buf << " 				   RDC10_in,                                \n";
R16_WD_buf << " 				   RDC11_in,                                \n";
R16_WD_buf << " 				   RDC12_in,                                \n";
R16_WD_buf << " 				   RDC13_in,                                \n";
R16_WD_buf << " 				   RDC14_in,                                \n";
R16_WD_buf << " 				   RDC15_in,                                \n";
R16_WD_buf << "                   rst_n,                                    \n";
R16_WD_buf << "                   clk                                       \n";
R16_WD_buf << "                   ) ;                                       \n";
R16_WD_buf << " parameter P_WIDTH     = 64 ;                                \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " parameter P_ZERO    = 64'h0 ;                               \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC0_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC1_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC2_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC3_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC4_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC5_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC6_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC7_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC8_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC9_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC10_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC11_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC12_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC13_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC14_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC15_D_out ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC0_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC1_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC2_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC3_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC4_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC5_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC6_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC7_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC8_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC9_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC10_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC11_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC12_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC13_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC14_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC15_in ;                              \n";
R16_WD_buf << " input               rst_n ;                                 \n";
R16_WD_buf << " input               clk ;                                   \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D_out ;                            \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D21_reg  ;                          \n";                       
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " 	//RDC output delay 23 cycles                            \n";
R16_WD_buf << " 	always @(posedge clk or negedge rst_n) begin            \n";
R16_WD_buf << " 		if(~rst_n) begin                                    \n";
R16_WD_buf << " 			RDC0_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC1_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D21_reg <= P_ZERO ;                        \n";                
R16_WD_buf << " 			RDC1_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC2_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC3_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D21_reg <= P_ZERO ;                        \n"; 
R16_WD_buf << " 			RDC3_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC4_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D21_reg <= P_ZERO ;                        \n";                     
R16_WD_buf << " 			RDC4_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC5_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC6_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC7_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC8_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC9_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC10_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC11_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC12_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC13_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC14_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC15_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 		end                                                 \n";
R16_WD_buf << " 		else begin                                          \n";
R16_WD_buf << " 			RDC0_D0_reg  <= RDC0_in ;                       \n";
R16_WD_buf << " 			RDC0_D1_reg  <= RDC0_D0_reg ;                   \n";
R16_WD_buf << " 			RDC0_D2_reg  <= RDC0_D1_reg ;                   \n";
R16_WD_buf << " 			RDC0_D3_reg  <= RDC0_D2_reg ;                   \n";
R16_WD_buf << " 			RDC0_D4_reg  <= RDC0_D3_reg ;                   \n";
R16_WD_buf << " 			RDC0_D5_reg  <= RDC0_D4_reg ;                   \n";
R16_WD_buf << " 			RDC0_D6_reg  <= RDC0_D5_reg ;                   \n";
R16_WD_buf << " 			RDC0_D7_reg  <= RDC0_D6_reg ;                   \n";
R16_WD_buf << " 			RDC0_D8_reg  <= RDC0_D7_reg ;                   \n";
R16_WD_buf << " 			RDC0_D9_reg  <= RDC0_D8_reg ;                   \n";
R16_WD_buf << " 			RDC0_D10_reg <= RDC0_D9_reg ;                   \n";
R16_WD_buf << " 			RDC0_D11_reg <= RDC0_D10_reg ;                  \n";
R16_WD_buf << " 			RDC0_D12_reg <= RDC0_D11_reg ;                  \n";
R16_WD_buf << " 			RDC0_D13_reg <= RDC0_D12_reg ;                  \n";
R16_WD_buf << " 			RDC0_D14_reg <= RDC0_D13_reg ;                  \n";
R16_WD_buf << " 			RDC0_D15_reg <= RDC0_D14_reg ;                  \n";
R16_WD_buf << " 			RDC0_D16_reg <= RDC0_D15_reg ;                  \n";
R16_WD_buf << " 			RDC0_D17_reg <= RDC0_D16_reg ;                  \n";
R16_WD_buf << " 			RDC0_D18_reg <= RDC0_D17_reg ;                  \n";
R16_WD_buf << " 			RDC0_D19_reg <= RDC0_D18_reg ;                  \n";
R16_WD_buf << " 			RDC0_D20_reg <= RDC0_D19_reg ;                  \n";
R16_WD_buf << " 			RDC0_D21_reg <= RDC0_D20_reg ;                  \n";
R16_WD_buf << " 			RDC0_D_out   <= RDC0_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC1_D0_reg  <= RDC1_in ;                       \n";
R16_WD_buf << " 			RDC1_D1_reg  <= RDC1_D0_reg ;                   \n";
R16_WD_buf << " 			RDC1_D2_reg  <= RDC1_D1_reg ;                   \n";
R16_WD_buf << " 			RDC1_D3_reg  <= RDC1_D2_reg ;                   \n";
R16_WD_buf << " 			RDC1_D4_reg  <= RDC1_D3_reg ;                   \n";
R16_WD_buf << " 			RDC1_D5_reg  <= RDC1_D4_reg ;                   \n";
R16_WD_buf << " 			RDC1_D6_reg  <= RDC1_D5_reg ;                   \n";
R16_WD_buf << " 			RDC1_D7_reg  <= RDC1_D6_reg ;                   \n";
R16_WD_buf << " 			RDC1_D8_reg  <= RDC1_D7_reg ;                   \n";
R16_WD_buf << " 			RDC1_D9_reg  <= RDC1_D8_reg ;                   \n";
R16_WD_buf << " 			RDC1_D10_reg <= RDC1_D9_reg ;                   \n";
R16_WD_buf << " 			RDC1_D11_reg <= RDC1_D10_reg ;                  \n";
R16_WD_buf << " 			RDC1_D12_reg <= RDC1_D11_reg ;                  \n";
R16_WD_buf << " 			RDC1_D13_reg <= RDC1_D12_reg ;                  \n";
R16_WD_buf << " 			RDC1_D14_reg <= RDC1_D13_reg ;                  \n";
R16_WD_buf << " 			RDC1_D15_reg <= RDC1_D14_reg ;                  \n";
R16_WD_buf << " 			RDC1_D16_reg <= RDC1_D15_reg ;                  \n";
R16_WD_buf << " 			RDC1_D17_reg <= RDC1_D16_reg ;                  \n";
R16_WD_buf << " 			RDC1_D18_reg <= RDC1_D17_reg ;                  \n";
R16_WD_buf << " 			RDC1_D19_reg <= RDC1_D18_reg ;                  \n";
R16_WD_buf << " 			RDC1_D20_reg <= RDC1_D19_reg ;                  \n";
R16_WD_buf << " 			RDC1_D21_reg <= RDC1_D20_reg ;                  \n";
R16_WD_buf << " 			RDC1_D_out   <= RDC1_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC2_D0_reg  <= RDC2_in ;                       \n";
R16_WD_buf << " 			RDC2_D1_reg  <= RDC2_D0_reg ;                   \n";
R16_WD_buf << " 			RDC2_D2_reg  <= RDC2_D1_reg ;                   \n";
R16_WD_buf << " 			RDC2_D3_reg  <= RDC2_D2_reg ;                   \n";
R16_WD_buf << " 			RDC2_D4_reg  <= RDC2_D3_reg ;                   \n";
R16_WD_buf << " 			RDC2_D5_reg  <= RDC2_D4_reg ;                   \n";
R16_WD_buf << " 			RDC2_D6_reg  <= RDC2_D5_reg ;                   \n";
R16_WD_buf << " 			RDC2_D7_reg  <= RDC2_D6_reg ;                   \n";
R16_WD_buf << " 			RDC2_D8_reg  <= RDC2_D7_reg ;                   \n";
R16_WD_buf << " 			RDC2_D9_reg  <= RDC2_D8_reg ;                   \n";
R16_WD_buf << " 			RDC2_D10_reg <= RDC2_D9_reg ;                   \n";
R16_WD_buf << " 			RDC2_D11_reg <= RDC2_D10_reg ;                  \n";
R16_WD_buf << " 			RDC2_D12_reg <= RDC2_D11_reg ;                  \n";
R16_WD_buf << " 			RDC2_D13_reg <= RDC2_D12_reg ;                  \n";
R16_WD_buf << " 			RDC2_D14_reg <= RDC2_D13_reg ;                  \n";
R16_WD_buf << " 			RDC2_D15_reg <= RDC2_D14_reg ;                  \n";
R16_WD_buf << " 			RDC2_D16_reg <= RDC2_D15_reg ;                  \n";
R16_WD_buf << " 			RDC2_D17_reg <= RDC2_D16_reg ;                  \n";
R16_WD_buf << " 			RDC2_D18_reg <= RDC2_D17_reg ;                  \n";
R16_WD_buf << " 			RDC2_D19_reg <= RDC2_D18_reg ;                  \n";
R16_WD_buf << " 			RDC2_D20_reg <= RDC2_D19_reg ;                  \n";
R16_WD_buf << " 			RDC2_D21_reg <= RDC2_D20_reg ;                  \n";
R16_WD_buf << " 			RDC2_D_out   <= RDC2_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC3_D0_reg  <= RDC3_in ;                       \n";
R16_WD_buf << " 			RDC3_D1_reg  <= RDC3_D0_reg ;                   \n";
R16_WD_buf << " 			RDC3_D2_reg  <= RDC3_D1_reg ;                   \n";
R16_WD_buf << " 			RDC3_D3_reg  <= RDC3_D2_reg ;                   \n";
R16_WD_buf << " 			RDC3_D4_reg  <= RDC3_D3_reg ;                   \n";
R16_WD_buf << " 			RDC3_D5_reg  <= RDC3_D4_reg ;                   \n";
R16_WD_buf << " 			RDC3_D6_reg  <= RDC3_D5_reg ;                   \n";
R16_WD_buf << " 			RDC3_D7_reg  <= RDC3_D6_reg ;                   \n";
R16_WD_buf << " 			RDC3_D8_reg  <= RDC3_D7_reg ;                   \n";
R16_WD_buf << " 			RDC3_D9_reg  <= RDC3_D8_reg ;                   \n";
R16_WD_buf << " 			RDC3_D10_reg <= RDC3_D9_reg ;                   \n";
R16_WD_buf << " 			RDC3_D11_reg <= RDC3_D10_reg ;                  \n";
R16_WD_buf << " 			RDC3_D12_reg <= RDC3_D11_reg ;                  \n";
R16_WD_buf << " 			RDC3_D13_reg <= RDC3_D12_reg ;                  \n";
R16_WD_buf << " 			RDC3_D14_reg <= RDC3_D13_reg ;                  \n";
R16_WD_buf << " 			RDC3_D15_reg <= RDC3_D14_reg ;                  \n";
R16_WD_buf << " 			RDC3_D16_reg <= RDC3_D15_reg ;                  \n";
R16_WD_buf << " 			RDC3_D17_reg <= RDC3_D16_reg ;                  \n";
R16_WD_buf << " 			RDC3_D18_reg <= RDC3_D17_reg ;                  \n";
R16_WD_buf << " 			RDC3_D19_reg <= RDC3_D18_reg ;                  \n";
R16_WD_buf << " 			RDC3_D20_reg <= RDC3_D19_reg ;                  \n";
R16_WD_buf << " 			RDC3_D21_reg <= RDC3_D20_reg ;                  \n";
R16_WD_buf << " 			RDC3_D_out   <= RDC3_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC4_D0_reg  <= RDC4_in ;                       \n";
R16_WD_buf << " 			RDC4_D1_reg  <= RDC4_D0_reg ;                   \n";
R16_WD_buf << " 			RDC4_D2_reg  <= RDC4_D1_reg ;                   \n";
R16_WD_buf << " 			RDC4_D3_reg  <= RDC4_D2_reg ;                   \n";
R16_WD_buf << " 			RDC4_D4_reg  <= RDC4_D3_reg ;                   \n";
R16_WD_buf << " 			RDC4_D5_reg  <= RDC4_D4_reg ;                   \n";
R16_WD_buf << " 			RDC4_D6_reg  <= RDC4_D5_reg ;                   \n";
R16_WD_buf << " 			RDC4_D7_reg  <= RDC4_D6_reg ;                   \n";
R16_WD_buf << " 			RDC4_D8_reg  <= RDC4_D7_reg ;                   \n";
R16_WD_buf << " 			RDC4_D9_reg  <= RDC4_D8_reg ;                   \n";
R16_WD_buf << " 			RDC4_D10_reg <= RDC4_D9_reg ;                   \n";
R16_WD_buf << " 			RDC4_D11_reg <= RDC4_D10_reg ;                  \n";
R16_WD_buf << " 			RDC4_D12_reg <= RDC4_D11_reg ;                  \n";
R16_WD_buf << " 			RDC4_D13_reg <= RDC4_D12_reg ;                  \n";
R16_WD_buf << " 			RDC4_D14_reg <= RDC4_D13_reg ;                  \n";
R16_WD_buf << " 			RDC4_D15_reg <= RDC4_D14_reg ;                  \n";
R16_WD_buf << " 			RDC4_D16_reg <= RDC4_D15_reg ;                  \n";
R16_WD_buf << " 			RDC4_D17_reg <= RDC4_D16_reg ;                  \n";
R16_WD_buf << " 			RDC4_D18_reg <= RDC4_D17_reg ;                  \n";
R16_WD_buf << " 			RDC4_D19_reg <= RDC4_D18_reg ;                  \n";
R16_WD_buf << " 			RDC4_D20_reg <= RDC4_D19_reg ;                  \n";
R16_WD_buf << " 			RDC4_D21_reg <= RDC4_D20_reg ;                  \n";
R16_WD_buf << " 			RDC4_D_out   <= RDC4_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC5_D0_reg  <= RDC5_in ;                       \n";
R16_WD_buf << " 			RDC5_D1_reg  <= RDC5_D0_reg ;                   \n";
R16_WD_buf << " 			RDC5_D2_reg  <= RDC5_D1_reg ;                   \n";
R16_WD_buf << " 			RDC5_D3_reg  <= RDC5_D2_reg ;                   \n";
R16_WD_buf << " 			RDC5_D4_reg  <= RDC5_D3_reg ;                   \n";
R16_WD_buf << " 			RDC5_D5_reg  <= RDC5_D4_reg ;                   \n";
R16_WD_buf << " 			RDC5_D6_reg  <= RDC5_D5_reg ;                   \n";
R16_WD_buf << " 			RDC5_D7_reg  <= RDC5_D6_reg ;                   \n";
R16_WD_buf << " 			RDC5_D8_reg  <= RDC5_D7_reg ;                   \n";
R16_WD_buf << " 			RDC5_D9_reg  <= RDC5_D8_reg ;                   \n";
R16_WD_buf << " 			RDC5_D10_reg <= RDC5_D9_reg ;                   \n";
R16_WD_buf << " 			RDC5_D11_reg <= RDC5_D10_reg ;                  \n";
R16_WD_buf << " 			RDC5_D12_reg <= RDC5_D11_reg ;                  \n";
R16_WD_buf << " 			RDC5_D13_reg <= RDC5_D12_reg ;                  \n";
R16_WD_buf << " 			RDC5_D14_reg <= RDC5_D13_reg ;                  \n";
R16_WD_buf << " 			RDC5_D15_reg <= RDC5_D14_reg ;                  \n";
R16_WD_buf << " 			RDC5_D16_reg <= RDC5_D15_reg ;                  \n";
R16_WD_buf << " 			RDC5_D17_reg <= RDC5_D16_reg ;                  \n";
R16_WD_buf << " 			RDC5_D18_reg <= RDC5_D17_reg ;                  \n";
R16_WD_buf << " 			RDC5_D19_reg <= RDC5_D18_reg ;                  \n";
R16_WD_buf << " 			RDC5_D20_reg <= RDC5_D19_reg ;                  \n";
R16_WD_buf << " 			RDC5_D21_reg <= RDC5_D20_reg ;                  \n";
R16_WD_buf << " 			RDC5_D_out   <= RDC5_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC6_D0_reg  <= RDC6_in ;                       \n";
R16_WD_buf << " 			RDC6_D1_reg  <= RDC6_D0_reg ;                   \n";
R16_WD_buf << " 			RDC6_D2_reg  <= RDC6_D1_reg ;                   \n";
R16_WD_buf << " 			RDC6_D3_reg  <= RDC6_D2_reg ;                   \n";
R16_WD_buf << " 			RDC6_D4_reg  <= RDC6_D3_reg ;                   \n";
R16_WD_buf << " 			RDC6_D5_reg  <= RDC6_D4_reg ;                   \n";
R16_WD_buf << " 			RDC6_D6_reg  <= RDC6_D5_reg ;                   \n";
R16_WD_buf << " 			RDC6_D7_reg  <= RDC6_D6_reg ;                   \n";
R16_WD_buf << " 			RDC6_D8_reg  <= RDC6_D7_reg ;                   \n";
R16_WD_buf << " 			RDC6_D9_reg  <= RDC6_D8_reg ;                   \n";
R16_WD_buf << " 			RDC6_D10_reg <= RDC6_D9_reg ;                   \n";
R16_WD_buf << " 			RDC6_D11_reg <= RDC6_D10_reg ;                  \n";
R16_WD_buf << " 			RDC6_D12_reg <= RDC6_D11_reg ;                  \n";
R16_WD_buf << " 			RDC6_D13_reg <= RDC6_D12_reg ;                  \n";
R16_WD_buf << " 			RDC6_D14_reg <= RDC6_D13_reg ;                  \n";
R16_WD_buf << " 			RDC6_D15_reg <= RDC6_D14_reg ;                  \n";
R16_WD_buf << " 			RDC6_D16_reg <= RDC6_D15_reg ;                  \n";
R16_WD_buf << " 			RDC6_D17_reg <= RDC6_D16_reg ;                  \n";
R16_WD_buf << " 			RDC6_D18_reg <= RDC6_D17_reg ;                  \n";
R16_WD_buf << " 			RDC6_D19_reg <= RDC6_D18_reg ;                  \n";
R16_WD_buf << " 			RDC6_D20_reg <= RDC6_D19_reg ;                  \n";
R16_WD_buf << " 			RDC6_D21_reg <= RDC6_D20_reg ;                  \n";
R16_WD_buf << " 			RDC6_D_out   <= RDC6_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC7_D0_reg  <= RDC7_in ;                       \n";
R16_WD_buf << " 			RDC7_D1_reg  <= RDC7_D0_reg ;                   \n";
R16_WD_buf << " 			RDC7_D2_reg  <= RDC7_D1_reg ;                   \n";
R16_WD_buf << " 			RDC7_D3_reg  <= RDC7_D2_reg ;                   \n";
R16_WD_buf << " 			RDC7_D4_reg  <= RDC7_D3_reg ;                   \n";
R16_WD_buf << " 			RDC7_D5_reg  <= RDC7_D4_reg ;                   \n";
R16_WD_buf << " 			RDC7_D6_reg  <= RDC7_D5_reg ;                   \n";
R16_WD_buf << " 			RDC7_D7_reg  <= RDC7_D6_reg ;                   \n";
R16_WD_buf << " 			RDC7_D8_reg  <= RDC7_D7_reg ;                   \n";
R16_WD_buf << " 			RDC7_D9_reg  <= RDC7_D8_reg ;                   \n";
R16_WD_buf << " 			RDC7_D10_reg <= RDC7_D9_reg ;                   \n";
R16_WD_buf << " 			RDC7_D11_reg <= RDC7_D10_reg ;                  \n";
R16_WD_buf << " 			RDC7_D12_reg <= RDC7_D11_reg ;                  \n";
R16_WD_buf << " 			RDC7_D13_reg <= RDC7_D12_reg ;                  \n";
R16_WD_buf << " 			RDC7_D14_reg <= RDC7_D13_reg ;                  \n";
R16_WD_buf << " 			RDC7_D15_reg <= RDC7_D14_reg ;                  \n";
R16_WD_buf << " 			RDC7_D16_reg <= RDC7_D15_reg ;                  \n";
R16_WD_buf << " 			RDC7_D17_reg <= RDC7_D16_reg ;                  \n";
R16_WD_buf << " 			RDC7_D18_reg <= RDC7_D17_reg ;                  \n";
R16_WD_buf << " 			RDC7_D19_reg <= RDC7_D18_reg ;                  \n";
R16_WD_buf << " 			RDC7_D20_reg <= RDC7_D19_reg ;                  \n";
R16_WD_buf << " 			RDC7_D21_reg <= RDC7_D20_reg ;                  \n";
R16_WD_buf << " 			RDC7_D_out   <= RDC7_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC8_D0_reg  <= RDC8_in ;                       \n";
R16_WD_buf << " 			RDC8_D1_reg  <= RDC8_D0_reg ;                   \n";
R16_WD_buf << " 			RDC8_D2_reg  <= RDC8_D1_reg ;                   \n";
R16_WD_buf << " 			RDC8_D3_reg  <= RDC8_D2_reg ;                   \n";
R16_WD_buf << " 			RDC8_D4_reg  <= RDC8_D3_reg ;                   \n";
R16_WD_buf << " 			RDC8_D5_reg  <= RDC8_D4_reg ;                   \n";
R16_WD_buf << " 			RDC8_D6_reg  <= RDC8_D5_reg ;                   \n";
R16_WD_buf << " 			RDC8_D7_reg  <= RDC8_D6_reg ;                   \n";
R16_WD_buf << " 			RDC8_D8_reg  <= RDC8_D7_reg ;                   \n";
R16_WD_buf << " 			RDC8_D9_reg  <= RDC8_D8_reg ;                   \n";
R16_WD_buf << " 			RDC8_D10_reg <= RDC8_D9_reg ;                   \n";
R16_WD_buf << " 			RDC8_D11_reg <= RDC8_D10_reg ;                  \n";
R16_WD_buf << " 			RDC8_D12_reg <= RDC8_D11_reg ;                  \n";
R16_WD_buf << " 			RDC8_D13_reg <= RDC8_D12_reg ;                  \n";
R16_WD_buf << " 			RDC8_D14_reg <= RDC8_D13_reg ;                  \n";
R16_WD_buf << " 			RDC8_D15_reg <= RDC8_D14_reg ;                  \n";
R16_WD_buf << " 			RDC8_D16_reg <= RDC8_D15_reg ;                  \n";
R16_WD_buf << " 			RDC8_D17_reg <= RDC8_D16_reg ;                  \n";
R16_WD_buf << " 			RDC8_D18_reg <= RDC8_D17_reg ;                  \n";
R16_WD_buf << " 			RDC8_D19_reg <= RDC8_D18_reg ;                  \n";
R16_WD_buf << " 			RDC8_D20_reg <= RDC8_D19_reg ;                  \n";
R16_WD_buf << " 			RDC8_D21_reg <= RDC8_D20_reg ;                  \n";
R16_WD_buf << " 			RDC8_D_out   <= RDC8_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC9_D0_reg  <= RDC9_in ;                       \n";
R16_WD_buf << " 			RDC9_D1_reg  <= RDC9_D0_reg ;                   \n";
R16_WD_buf << " 			RDC9_D2_reg  <= RDC9_D1_reg ;                   \n";
R16_WD_buf << " 			RDC9_D3_reg  <= RDC9_D2_reg ;                   \n";
R16_WD_buf << " 			RDC9_D4_reg  <= RDC9_D3_reg ;                   \n";
R16_WD_buf << " 			RDC9_D5_reg  <= RDC9_D4_reg ;                   \n";
R16_WD_buf << " 			RDC9_D6_reg  <= RDC9_D5_reg ;                   \n";
R16_WD_buf << " 			RDC9_D7_reg  <= RDC9_D6_reg ;                   \n";
R16_WD_buf << " 			RDC9_D8_reg  <= RDC9_D7_reg ;                   \n";
R16_WD_buf << " 			RDC9_D9_reg  <= RDC9_D8_reg ;                   \n";
R16_WD_buf << " 			RDC9_D10_reg <= RDC9_D9_reg ;                   \n";
R16_WD_buf << " 			RDC9_D11_reg <= RDC9_D10_reg ;                  \n";
R16_WD_buf << " 			RDC9_D12_reg <= RDC9_D11_reg ;                  \n";
R16_WD_buf << " 			RDC9_D13_reg <= RDC9_D12_reg ;                  \n";
R16_WD_buf << " 			RDC9_D14_reg <= RDC9_D13_reg ;                  \n";
R16_WD_buf << " 			RDC9_D15_reg <= RDC9_D14_reg ;                  \n";
R16_WD_buf << " 			RDC9_D16_reg <= RDC9_D15_reg ;                  \n";
R16_WD_buf << " 			RDC9_D17_reg <= RDC9_D16_reg ;                  \n";
R16_WD_buf << " 			RDC9_D18_reg <= RDC9_D17_reg ;                  \n";
R16_WD_buf << " 			RDC9_D19_reg <= RDC9_D18_reg ;                  \n";
R16_WD_buf << " 			RDC9_D20_reg <= RDC9_D19_reg ;                  \n";
R16_WD_buf << " 			RDC9_D21_reg <= RDC9_D20_reg ;                  \n";
R16_WD_buf << " 			RDC9_D_out   <= RDC9_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC10_D0_reg  <= RDC10_in ;                     \n";
R16_WD_buf << " 			RDC10_D1_reg  <= RDC10_D0_reg ;                 \n";
R16_WD_buf << " 			RDC10_D2_reg  <= RDC10_D1_reg ;                 \n";
R16_WD_buf << " 			RDC10_D3_reg  <= RDC10_D2_reg ;                 \n";
R16_WD_buf << " 			RDC10_D4_reg  <= RDC10_D3_reg ;                 \n";
R16_WD_buf << " 			RDC10_D5_reg  <= RDC10_D4_reg ;                 \n";
R16_WD_buf << " 			RDC10_D6_reg  <= RDC10_D5_reg ;                 \n";
R16_WD_buf << " 			RDC10_D7_reg  <= RDC10_D6_reg ;                 \n";
R16_WD_buf << " 			RDC10_D8_reg  <= RDC10_D7_reg ;                 \n";
R16_WD_buf << " 			RDC10_D9_reg  <= RDC10_D8_reg ;                 \n";
R16_WD_buf << " 			RDC10_D10_reg <= RDC10_D9_reg ;                 \n";
R16_WD_buf << " 			RDC10_D11_reg <= RDC10_D10_reg ;                \n";
R16_WD_buf << " 			RDC10_D12_reg <= RDC10_D11_reg ;                \n";
R16_WD_buf << " 			RDC10_D13_reg <= RDC10_D12_reg ;                \n";
R16_WD_buf << " 			RDC10_D14_reg <= RDC10_D13_reg ;                \n";
R16_WD_buf << " 			RDC10_D15_reg <= RDC10_D14_reg ;                \n";
R16_WD_buf << " 			RDC10_D16_reg <= RDC10_D15_reg ;                \n";
R16_WD_buf << " 			RDC10_D17_reg <= RDC10_D16_reg ;                \n";
R16_WD_buf << " 			RDC10_D18_reg <= RDC10_D17_reg ;                \n";
R16_WD_buf << " 			RDC10_D19_reg <= RDC10_D18_reg ;                \n";
R16_WD_buf << " 			RDC10_D20_reg <= RDC10_D19_reg ;                \n";
R16_WD_buf << " 			RDC10_D21_reg <= RDC10_D20_reg ;                \n";
R16_WD_buf << " 			RDC10_D_out   <= RDC10_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC11_D0_reg  <= RDC11_in ;                     \n";
R16_WD_buf << " 			RDC11_D1_reg  <= RDC11_D0_reg ;                 \n";
R16_WD_buf << " 			RDC11_D2_reg  <= RDC11_D1_reg ;                 \n";
R16_WD_buf << " 			RDC11_D3_reg  <= RDC11_D2_reg ;                 \n";
R16_WD_buf << " 			RDC11_D4_reg  <= RDC11_D3_reg ;                 \n";
R16_WD_buf << " 			RDC11_D5_reg  <= RDC11_D4_reg ;                 \n";
R16_WD_buf << " 			RDC11_D6_reg  <= RDC11_D5_reg ;                 \n";
R16_WD_buf << " 			RDC11_D7_reg  <= RDC11_D6_reg ;                 \n";
R16_WD_buf << " 			RDC11_D8_reg  <= RDC11_D7_reg ;                 \n";
R16_WD_buf << " 			RDC11_D9_reg  <= RDC11_D8_reg ;                 \n";
R16_WD_buf << " 			RDC11_D10_reg <= RDC11_D9_reg ;                 \n";
R16_WD_buf << " 			RDC11_D11_reg <= RDC11_D10_reg ;                \n";
R16_WD_buf << " 			RDC11_D12_reg <= RDC11_D11_reg ;                \n";
R16_WD_buf << " 			RDC11_D13_reg <= RDC11_D12_reg ;                \n";
R16_WD_buf << " 			RDC11_D14_reg <= RDC11_D13_reg ;                \n";
R16_WD_buf << " 			RDC11_D15_reg <= RDC11_D14_reg ;                \n";
R16_WD_buf << " 			RDC11_D16_reg <= RDC11_D15_reg ;                \n";
R16_WD_buf << " 			RDC11_D17_reg <= RDC11_D16_reg ;                \n";
R16_WD_buf << " 			RDC11_D18_reg <= RDC11_D17_reg ;                \n";
R16_WD_buf << " 			RDC11_D19_reg <= RDC11_D18_reg ;                \n";
R16_WD_buf << " 			RDC11_D20_reg <= RDC11_D19_reg ;                \n";
R16_WD_buf << " 			RDC11_D21_reg <= RDC11_D20_reg ;                \n";
R16_WD_buf << " 			RDC11_D_out   <= RDC11_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC12_D0_reg  <= RDC12_in ;                     \n";
R16_WD_buf << " 			RDC12_D1_reg  <= RDC12_D0_reg ;                 \n";
R16_WD_buf << " 			RDC12_D2_reg  <= RDC12_D1_reg ;                 \n";
R16_WD_buf << " 			RDC12_D3_reg  <= RDC12_D2_reg ;                 \n";
R16_WD_buf << " 			RDC12_D4_reg  <= RDC12_D3_reg ;                 \n";
R16_WD_buf << " 			RDC12_D5_reg  <= RDC12_D4_reg ;                 \n";
R16_WD_buf << " 			RDC12_D6_reg  <= RDC12_D5_reg ;                 \n";
R16_WD_buf << " 			RDC12_D7_reg  <= RDC12_D6_reg ;                 \n";
R16_WD_buf << " 			RDC12_D8_reg  <= RDC12_D7_reg ;                 \n";
R16_WD_buf << " 			RDC12_D9_reg  <= RDC12_D8_reg ;                 \n";
R16_WD_buf << " 			RDC12_D10_reg <= RDC12_D9_reg ;                 \n";
R16_WD_buf << " 			RDC12_D11_reg <= RDC12_D10_reg ;                \n";
R16_WD_buf << " 			RDC12_D12_reg <= RDC12_D11_reg ;                \n";
R16_WD_buf << " 			RDC12_D13_reg <= RDC12_D12_reg ;                \n";
R16_WD_buf << " 			RDC12_D14_reg <= RDC12_D13_reg ;                \n";
R16_WD_buf << " 			RDC12_D15_reg <= RDC12_D14_reg ;                \n";
R16_WD_buf << " 			RDC12_D16_reg <= RDC12_D15_reg ;                \n";
R16_WD_buf << " 			RDC12_D17_reg <= RDC12_D16_reg ;                \n";
R16_WD_buf << " 			RDC12_D18_reg <= RDC12_D17_reg ;                \n";
R16_WD_buf << " 			RDC12_D19_reg <= RDC12_D18_reg ;                \n";
R16_WD_buf << " 			RDC12_D20_reg <= RDC12_D19_reg ;                \n";
R16_WD_buf << " 			RDC12_D21_reg <= RDC12_D20_reg ;                \n";
R16_WD_buf << " 			RDC12_D_out   <= RDC12_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC13_D0_reg  <= RDC13_in ;                     \n";
R16_WD_buf << " 			RDC13_D1_reg  <= RDC13_D0_reg ;                 \n";
R16_WD_buf << " 			RDC13_D2_reg  <= RDC13_D1_reg ;                 \n";
R16_WD_buf << " 			RDC13_D3_reg  <= RDC13_D2_reg ;                 \n";
R16_WD_buf << " 			RDC13_D4_reg  <= RDC13_D3_reg ;                 \n";
R16_WD_buf << " 			RDC13_D5_reg  <= RDC13_D4_reg ;                 \n";
R16_WD_buf << " 			RDC13_D6_reg  <= RDC13_D5_reg ;                 \n";
R16_WD_buf << " 			RDC13_D7_reg  <= RDC13_D6_reg ;                 \n";
R16_WD_buf << " 			RDC13_D8_reg  <= RDC13_D7_reg ;                 \n";
R16_WD_buf << " 			RDC13_D9_reg  <= RDC13_D8_reg ;                 \n";
R16_WD_buf << " 			RDC13_D10_reg <= RDC13_D9_reg ;                 \n";
R16_WD_buf << " 			RDC13_D11_reg <= RDC13_D10_reg ;                \n";
R16_WD_buf << " 			RDC13_D12_reg <= RDC13_D11_reg ;                \n";
R16_WD_buf << " 			RDC13_D13_reg <= RDC13_D12_reg ;                \n";
R16_WD_buf << " 			RDC13_D14_reg <= RDC13_D13_reg ;                \n";
R16_WD_buf << " 			RDC13_D15_reg <= RDC13_D14_reg ;                \n";
R16_WD_buf << " 			RDC13_D16_reg <= RDC13_D15_reg ;                \n";
R16_WD_buf << " 			RDC13_D17_reg <= RDC13_D16_reg ;                \n";
R16_WD_buf << " 			RDC13_D18_reg <= RDC13_D17_reg ;                \n";
R16_WD_buf << " 			RDC13_D19_reg <= RDC13_D18_reg ;                \n";
R16_WD_buf << " 			RDC13_D20_reg <= RDC13_D19_reg ;                \n";
R16_WD_buf << " 			RDC13_D21_reg <= RDC13_D20_reg ;                \n";
R16_WD_buf << " 			RDC13_D_out   <= RDC13_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC14_D0_reg  <= RDC14_in ;                     \n";
R16_WD_buf << " 			RDC14_D1_reg  <= RDC14_D0_reg ;                 \n";
R16_WD_buf << " 			RDC14_D2_reg  <= RDC14_D1_reg ;                 \n";
R16_WD_buf << " 			RDC14_D3_reg  <= RDC14_D2_reg ;                 \n";
R16_WD_buf << " 			RDC14_D4_reg  <= RDC14_D3_reg ;                 \n";
R16_WD_buf << " 			RDC14_D5_reg  <= RDC14_D4_reg ;                 \n";
R16_WD_buf << " 			RDC14_D6_reg  <= RDC14_D5_reg ;                 \n";
R16_WD_buf << " 			RDC14_D7_reg  <= RDC14_D6_reg ;                 \n";
R16_WD_buf << " 			RDC14_D8_reg  <= RDC14_D7_reg ;                 \n";
R16_WD_buf << " 			RDC14_D9_reg  <= RDC14_D8_reg ;                 \n";
R16_WD_buf << " 			RDC14_D10_reg <= RDC14_D9_reg ;                 \n";
R16_WD_buf << " 			RDC14_D11_reg <= RDC14_D10_reg ;                \n";
R16_WD_buf << " 			RDC14_D12_reg <= RDC14_D11_reg ;                \n";
R16_WD_buf << " 			RDC14_D13_reg <= RDC14_D12_reg ;                \n";
R16_WD_buf << " 			RDC14_D14_reg <= RDC14_D13_reg ;                \n";
R16_WD_buf << " 			RDC14_D15_reg <= RDC14_D14_reg ;                \n";
R16_WD_buf << " 			RDC14_D16_reg <= RDC14_D15_reg ;                \n";
R16_WD_buf << " 			RDC14_D17_reg <= RDC14_D16_reg ;                \n";
R16_WD_buf << " 			RDC14_D18_reg <= RDC14_D17_reg ;                \n";
R16_WD_buf << " 			RDC14_D19_reg <= RDC14_D18_reg ;                \n";
R16_WD_buf << " 			RDC14_D20_reg <= RDC14_D19_reg ;                \n";
R16_WD_buf << " 			RDC14_D21_reg <= RDC14_D20_reg ;                \n";
R16_WD_buf << " 			RDC14_D_out   <= RDC14_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC15_D0_reg  <= RDC15_in ;                     \n";
R16_WD_buf << " 			RDC15_D1_reg  <= RDC15_D0_reg ;                 \n";
R16_WD_buf << " 			RDC15_D2_reg  <= RDC15_D1_reg ;                 \n";
R16_WD_buf << " 			RDC15_D3_reg  <= RDC15_D2_reg ;                 \n";
R16_WD_buf << " 			RDC15_D4_reg  <= RDC15_D3_reg ;                 \n";
R16_WD_buf << " 			RDC15_D5_reg  <= RDC15_D4_reg ;                 \n";
R16_WD_buf << " 			RDC15_D6_reg  <= RDC15_D5_reg ;                 \n";
R16_WD_buf << " 			RDC15_D7_reg  <= RDC15_D6_reg ;                 \n";
R16_WD_buf << " 			RDC15_D8_reg  <= RDC15_D7_reg ;                 \n";
R16_WD_buf << " 			RDC15_D9_reg  <= RDC15_D8_reg ;                 \n";
R16_WD_buf << " 			RDC15_D10_reg <= RDC15_D9_reg ;                 \n";
R16_WD_buf << " 			RDC15_D11_reg <= RDC15_D10_reg ;                \n";
R16_WD_buf << " 			RDC15_D12_reg <= RDC15_D11_reg ;                \n";
R16_WD_buf << " 			RDC15_D13_reg <= RDC15_D12_reg ;                \n";
R16_WD_buf << " 			RDC15_D14_reg <= RDC15_D13_reg ;                \n";
R16_WD_buf << " 			RDC15_D15_reg <= RDC15_D14_reg ;                \n";
R16_WD_buf << " 			RDC15_D16_reg <= RDC15_D15_reg ;                \n";
R16_WD_buf << " 			RDC15_D17_reg <= RDC15_D16_reg ;                \n";
R16_WD_buf << " 			RDC15_D18_reg <= RDC15_D17_reg ;                \n";
R16_WD_buf << " 			RDC15_D19_reg <= RDC15_D18_reg ;                \n";
R16_WD_buf << " 			RDC15_D20_reg <= RDC15_D19_reg ;                \n";
R16_WD_buf << " 			RDC15_D21_reg <= RDC15_D20_reg ;                \n";
R16_WD_buf << " 			RDC15_D_out   <= RDC15_D21_reg ;                \n";
R16_WD_buf << " 		end                                                 \n";
R16_WD_buf << " 	end                                                     \n";
R16_WD_buf << " endmodule                                                   \n";
	 R16_WD_buf.close();
}	
void configurable_BFFT::R16_ROMPipeReg1_R2P(std::string string_in){
	 std::ofstream R16_ROMPipeReg1;
     std::string        string_buf = "/R16_ROMPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 R16_ROMPipeReg1.open(ss.str());
R16_ROMPipeReg1 << " `timescale 1 ns/1 ps                                            \n";
R16_ROMPipeReg1 << " module R16_ROMPipeReg1(ROMD0_Dout,                              \n";
R16_ROMPipeReg1 << " 				         ROMD1_Dout,                             \n"; 
R16_ROMPipeReg1 << " 				         ROMD2_Dout,                             \n"; 
R16_ROMPipeReg1 << " 				         ROMD3_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD4_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD5_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD6_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD7_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD0_Dout,                         \n"; 
R16_ROMPipeReg1 << " 				         IFFTROMD1_Dout,                         \n"; 
R16_ROMPipeReg1 << " 				         IFFTROMD2_Dout,                         \n"; 
R16_ROMPipeReg1 << " 				         IFFTROMD3_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD4_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD5_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD6_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD7_Dout,                         \n"; 
R16_ROMPipeReg1 << " 			             ROMD0_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD1_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD2_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD3_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD4_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD5_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD6_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD7_in,                               \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD0_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD1_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD2_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD3_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD4_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD5_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD6_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD7_in,                           \n"; 
R16_ROMPipeReg1 << "                        rst_n,                                   \n";
R16_ROMPipeReg1 << "                        clk                                      \n";
R16_ROMPipeReg1 << "                        ) ;                                      \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " parameter P_WIDTH   = 64 ;					                     \n";
R16_ROMPipeReg1 << " parameter SD_WIDTH  = 128 ;                                     \n";
R16_ROMPipeReg1 << " parameter P_ZERO    = 64'h0 ;                                   \n";
R16_ROMPipeReg1 << " parameter SD_ZERO   = 128'h0 ;                                  \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " output [P_WIDTH-1:0]    ROMD0_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD1_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD2_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD3_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD4_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD5_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD6_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD7_Dout ;                            \n";
R16_ROMPipeReg1 << " output [P_WIDTH-1:0]    IFFTROMD0_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                        \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " input  [P_WIDTH-1:0]    ROMD0_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD1_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD2_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD3_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD4_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD5_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD6_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD7_in ;                              \n";
R16_ROMPipeReg1 << " input  [P_WIDTH-1:0]    IFFTROMD0_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD1_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD2_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD3_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD4_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD5_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD6_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD7_in ;                          \n";
R16_ROMPipeReg1 << " input                   rst_n ;                                 \n";
R16_ROMPipeReg1 << " input                   clk ;                                   \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                           \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D4reg ;                              \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D4reg ;                          \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " 	//delay 4 cycles                                             \n"; 
R16_ROMPipeReg1 << " 	always @(posedge clk or negedge rst_n) begin                 \n"; 
R16_ROMPipeReg1 << " 		if(~rst_n) begin                                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D0reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D1reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D2reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D3reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D4reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_Dout  <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//---                                                \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D0reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D1reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D2reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D3reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D4reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_Dout  <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 		end                                                      \n"; 
R16_ROMPipeReg1 << " 		else begin                                               \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D0reg <= ROMD0_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D1reg <= ROMD0_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D2reg <= ROMD0_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D3reg <= ROMD0_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D4reg <= ROMD0_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_Dout  <= ROMD0_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D0reg <= ROMD1_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D1reg <= ROMD1_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D2reg <= ROMD1_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D3reg <= ROMD1_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D4reg <= ROMD1_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_Dout  <= ROMD1_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D0reg <= ROMD2_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D1reg <= ROMD2_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D2reg <= ROMD2_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D3reg <= ROMD2_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D4reg <= ROMD2_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_Dout  <= ROMD2_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D0reg <= ROMD3_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D1reg <= ROMD3_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D2reg <= ROMD3_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D3reg <= ROMD3_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D4reg <= ROMD3_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_Dout  <= ROMD3_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D0reg <= ROMD4_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D1reg <= ROMD4_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D2reg <= ROMD4_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D3reg <= ROMD4_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D4reg <= ROMD4_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_Dout  <= ROMD4_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D0reg <= ROMD5_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D1reg <= ROMD5_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D2reg <= ROMD5_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D3reg <= ROMD5_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D4reg <= ROMD5_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_Dout  <= ROMD5_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D0reg <= ROMD6_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D1reg <= ROMD6_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D2reg <= ROMD6_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D3reg <= ROMD6_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D4reg <= ROMD6_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_Dout  <= ROMD6_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D0reg <= ROMD7_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D1reg <= ROMD7_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D2reg <= ROMD7_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D3reg <= ROMD7_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D4reg <= ROMD7_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_Dout  <= ROMD7_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//---                                                \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D0reg <= IFFTROMD0_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D1reg <= IFFTROMD0_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D2reg <= IFFTROMD0_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D3reg <= IFFTROMD0_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D4reg <= IFFTROMD0_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_Dout  <= IFFTROMD0_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D0reg <= IFFTROMD1_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D1reg <= IFFTROMD1_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D2reg <= IFFTROMD1_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D3reg <= IFFTROMD1_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D4reg <= IFFTROMD1_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_Dout  <= IFFTROMD1_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D0reg <= IFFTROMD2_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D1reg <= IFFTROMD2_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D2reg <= IFFTROMD2_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D3reg <= IFFTROMD2_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D4reg <= IFFTROMD2_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_Dout  <= IFFTROMD2_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D0reg <= IFFTROMD3_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D1reg <= IFFTROMD3_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D2reg <= IFFTROMD3_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D3reg <= IFFTROMD3_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D4reg <= IFFTROMD3_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_Dout  <= IFFTROMD3_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D0reg <= IFFTROMD4_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D1reg <= IFFTROMD4_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D2reg <= IFFTROMD4_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D3reg <= IFFTROMD4_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D4reg <= IFFTROMD4_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_Dout  <= IFFTROMD4_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D0reg <= IFFTROMD5_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D1reg <= IFFTROMD5_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D2reg <= IFFTROMD5_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D3reg <= IFFTROMD5_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D4reg <= IFFTROMD5_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_Dout  <= IFFTROMD5_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D0reg <= IFFTROMD6_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D1reg <= IFFTROMD6_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D2reg <= IFFTROMD6_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D3reg <= IFFTROMD6_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D4reg <= IFFTROMD6_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_Dout  <= IFFTROMD6_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D0reg <= IFFTROMD7_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D1reg <= IFFTROMD7_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D2reg <= IFFTROMD7_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D3reg <= IFFTROMD7_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D4reg <= IFFTROMD7_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_Dout  <= IFFTROMD7_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 		end                                                      \n"; 
R16_ROMPipeReg1 << " 	end                                                          \n"; 
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " endmodule                                                       \n";

     R16_ROMPipeReg1.close();	 
}
void configurable_BFFT::BU_R16_S0_R2P(std::string string_in){
	 std::ofstream BU_S0;
     std::string         string_buf = "/BU_S0.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU_S0.open(ss.str());
     BU_S0 << "`timescale 1ns/1ps                           \n";
     BU_S0 << "module BU_S0(R0_out, //add                   \n";
     BU_S0 << "             R1_out, //sub                   \n";
     BU_S0 << "             R0_in,                          \n";
     BU_S0 << "             R1_in                           \n";
     BU_S0 << "             );                              \n";
     BU_S0 << "parameter D_WIDTH = 192;                     \n";
     BU_S0 << "parameter P_WIDTH = 64;                      \n";
     BU_S0 << "                                             \n";
     BU_S0 << "output [D_WIDTH-1:0] R0_out;                 \n";
     BU_S0 << "output [D_WIDTH-1:0] R1_out;                 \n";
     BU_S0 << "                                             \n";
     BU_S0 << "input  [P_WIDTH-1:0] R0_in;                  \n";
     BU_S0 << "input  [P_WIDTH-1:0] R1_in;                  \n";
     BU_S0 << "                                             \n";
     BU_S0 << "assign R0_out = R0_in + R1_in;               \n";
     BU_S0 << "assign R1_out = {32'd0,R1_in,32'd0,R0_in};   \n";
     BU_S0 << "                                             \n";
     BU_S0 << "endmodule                                    \n";
	 BU_S0.close();	
}
void configurable_BFFT::BU_R16_R2P(std::string string_in){
	 std::ofstream BU;
     std::string         string_buf = "/BU.v";     
     std::stringstream   ss;     
     ss << string_in << string_buf;     
	 BU.open(ss.str());
     BU << " `timescale 1ns/1ps                                                 \n";
     BU << " module BU(R0_out, //add                                            \n";
     BU << "           R1_out, //sub                                            \n";
     BU << "           R0_in,                                                   \n";
     BU << "           R1_in                                                    \n";
     BU << "           );                                                       \n";
     BU << " parameter D_WIDTH = 192;                                           \n";
     BU << "                                                                    \n";
     BU << " output [D_WIDTH-1:0] R0_out;                                       \n";
     BU << " output [D_WIDTH-1:0] R1_out;                                       \n";
     BU << " input  [D_WIDTH-1:0] R0_in;                                        \n";
     BU << " input  [D_WIDTH-1:0] R1_in;                                        \n";
     BU << "                                                                    \n";
     BU << " wire   [D_WIDTH:0]   Result_add;                                   \n";
     BU << " wire   [D_WIDTH:0]   Result_sub;                                   \n";
     BU << " wire   [D_WIDTH-1:0] R1_in_Complement;                             \n";
     BU << "                                                                    \n";
     BU << " assign R1_in_Complement = {R1_in[95:0],R1_in[191:96]};             \n";
     BU << " assign Result_add = R0_in + R1_in;                                 \n";
     BU << " assign Result_sub = R0_in + R1_in_Complement;                      \n";
     BU << " //output                                                           \n";
     BU << " assign R0_out = Result_add[D_WIDTH-1:0] + Result_add[D_WIDTH];     \n";
     BU << " assign R1_out = Result_sub[D_WIDTH-1:0] + Result_sub[D_WIDTH];     \n";
     BU << "                                                                    \n";
     BU << " endmodule                                                          \n";
	 BU.close();	
}
void configurable_BFFT::Pipe_R2P(std::string string_in){
	 std::ofstream Pipe;
     std::string        string_buf = "/Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 Pipe.open(ss.str());		
Pipe << "`timescale 1ns/1ps         \n";
Pipe << "module Pipe(R0_out,        \n";
Pipe << "             R1_out,       \n";
Pipe << "             R2_out,       \n";
Pipe << "             R3_out,       \n";
Pipe << "             R4_out,       \n";
Pipe << "             R5_out,       \n";
Pipe << "             R6_out,       \n";
Pipe << "             R7_out,       \n";
Pipe << "             R8_out,       \n";
Pipe << "             R9_out,       \n";
Pipe << "             R10_out,      \n";
Pipe << "             R11_out,      \n";
Pipe << "             R12_out,      \n";
Pipe << "             R13_out,      \n";
Pipe << "             R14_out,      \n";
Pipe << "             R15_out,      \n";
Pipe << "             R0_in,        \n";
Pipe << "             R1_in,        \n";
Pipe << "             R2_in,        \n";
Pipe << "             R3_in,        \n";
Pipe << "             R4_in,        \n";
Pipe << "             R5_in,        \n";
Pipe << "             R6_in,        \n";
Pipe << "             R7_in,        \n";
Pipe << "             R8_in,        \n";
Pipe << "             R9_in,        \n";
Pipe << "             R10_in,       \n";
Pipe << "             R11_in,       \n";
Pipe << "             R12_in,       \n";
Pipe << "             R13_in,       \n";
Pipe << "             R14_in,       \n";
Pipe << "             R15_in,       \n";
Pipe << "             clk,          \n";
Pipe << "             rst_n         \n";
Pipe << "            );             \n";
Pipe << " parameter D_WIDTH = 192;        \n"; 
Pipe << " parameter D_ZERO  = 192'd0;     \n";
Pipe << " output [D_WIDTH-1:0] R0_out;    \n";
Pipe << " output [D_WIDTH-1:0] R1_out;    \n";
Pipe << " output [D_WIDTH-1:0] R2_out;    \n";
Pipe << " output [D_WIDTH-1:0] R3_out;    \n";
Pipe << " output [D_WIDTH-1:0] R4_out;    \n";
Pipe << " output [D_WIDTH-1:0] R5_out;    \n";
Pipe << " output [D_WIDTH-1:0] R6_out;    \n";
Pipe << " output [D_WIDTH-1:0] R7_out;    \n";
Pipe << " output [D_WIDTH-1:0] R8_out;    \n";
Pipe << " output [D_WIDTH-1:0] R9_out;    \n";
Pipe << " output [D_WIDTH-1:0] R10_out;   \n";
Pipe << " output [D_WIDTH-1:0] R11_out;   \n";
Pipe << " output [D_WIDTH-1:0] R12_out;   \n";
Pipe << " output [D_WIDTH-1:0] R13_out;   \n";
Pipe << " output [D_WIDTH-1:0] R14_out;   \n";
Pipe << " output [D_WIDTH-1:0] R15_out;   \n";
Pipe << " input  [D_WIDTH-1:0] R0_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R1_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R2_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R3_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R4_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R5_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R6_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R7_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R8_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R9_in;     \n";
Pipe << " input  [D_WIDTH-1:0] R10_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R11_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R12_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R13_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R14_in;    \n";
Pipe << " input  [D_WIDTH-1:0] R15_in;    \n";
Pipe << " input                clk;       \n";
Pipe << " input                rst_n;     \n";
Pipe << "                                 \n";
Pipe << " reg [D_WIDTH-1:0] R0_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R1_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R2_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R3_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R4_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R5_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R6_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R7_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R8_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R9_out;       \n";
Pipe << " reg [D_WIDTH-1:0] R10_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R11_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R12_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R13_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R14_out;      \n";
Pipe << " reg [D_WIDTH-1:0] R15_out;	  \n";
Pipe << "                                 \n";
Pipe << " always@(posedge clk)begin       \n";
Pipe << "   if(~rst_n)begin               \n";
Pipe << "     R0_out  <= D_ZERO;          \n";
Pipe << "     R1_out  <= D_ZERO;          \n";
Pipe << "     R2_out  <= D_ZERO;          \n";
Pipe << "     R3_out  <= D_ZERO;          \n";
Pipe << "     R4_out  <= D_ZERO;          \n";
Pipe << "     R5_out  <= D_ZERO;          \n";
Pipe << "     R6_out  <= D_ZERO;          \n";
Pipe << "     R7_out  <= D_ZERO;          \n";
Pipe << "     R8_out  <= D_ZERO;          \n";
Pipe << "     R9_out  <= D_ZERO;          \n";
Pipe << "     R10_out <= D_ZERO;          \n";
Pipe << "     R11_out <= D_ZERO;          \n";
Pipe << "     R12_out <= D_ZERO;          \n";
Pipe << "     R13_out <= D_ZERO;          \n";
Pipe << "     R14_out <= D_ZERO;          \n";
Pipe << "     R15_out <= D_ZERO;          \n";
Pipe << "   end                           \n";
Pipe << "   else begin                    \n";
Pipe << "     R0_out  <= R0_in;           \n";
Pipe << "     R1_out  <= R1_in;           \n";
Pipe << "     R2_out  <= R2_in;           \n";
Pipe << "     R3_out  <= R3_in;           \n";
Pipe << "     R4_out  <= R4_in;           \n";
Pipe << "     R5_out  <= R5_in;           \n";
Pipe << "     R6_out  <= R6_in;           \n";
Pipe << "     R7_out  <= R7_in;           \n";
Pipe << "     R8_out  <= R8_in;           \n";
Pipe << "     R9_out  <= R9_in;           \n";
Pipe << "     R10_out <= R10_in;          \n";
Pipe << "     R11_out <= R11_in;          \n";
Pipe << "     R12_out <= R12_in;          \n";
Pipe << "     R13_out <= R13_in;          \n";
Pipe << "     R14_out <= R14_in;          \n";
Pipe << "     R15_out <= R15_in;          \n";
Pipe << "   end                           \n";
Pipe << " end                             \n";
Pipe << "                                 \n";
Pipe << "endmodule 	                      \n";
	 Pipe.close();
}
void configurable_BFFT::Radix16_Pipe_R2P(std::string string_in){
	 std::ofstream Radix16_Pipe_R2P;
     std::string        string_buf = "/Radix16_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 Radix16_Pipe_R2P.open(ss.str());	
Radix16_Pipe_R2P << "`timescale 1 ns/1 ps                                                     \n";
Radix16_Pipe_R2P << "//5-th pipeline                                                          \n";
Radix16_Pipe_R2P << "module Radix16_Pipe(RA0_out,                                             \n";
Radix16_Pipe_R2P << "			         RA1_out,                                             \n";
Radix16_Pipe_R2P << "			         RA2_out,                                             \n";
Radix16_Pipe_R2P << "			         RA3_out,                                             \n";
Radix16_Pipe_R2P << "			         RA4_out,                                             \n";
Radix16_Pipe_R2P << "			         RA5_out,                                             \n";
Radix16_Pipe_R2P << "			         RA6_out,                                             \n";
Radix16_Pipe_R2P << "			         RA7_out,                                             \n";
Radix16_Pipe_R2P << "			         RA8_out,                                             \n";
Radix16_Pipe_R2P << "			         RA9_out,                                             \n";
Radix16_Pipe_R2P << "			         RA10_out,                                            \n";
Radix16_Pipe_R2P << "			         RA11_out,                                            \n";
Radix16_Pipe_R2P << "			         RA12_out,                                            \n";
Radix16_Pipe_R2P << "			         RA13_out,                                            \n";
Radix16_Pipe_R2P << "			         RA14_out,                                            \n";
Radix16_Pipe_R2P << "			         RA15_out,                                            \n";
Radix16_Pipe_R2P << "                    RA0_in,                                              \n";
Radix16_Pipe_R2P << "			         RA1_in,                                              \n";
Radix16_Pipe_R2P << "			         RA2_in,                                              \n";
Radix16_Pipe_R2P << "			         RA3_in,                                              \n";
Radix16_Pipe_R2P << "			         RA4_in,                                              \n";
Radix16_Pipe_R2P << "			         RA5_in,                                              \n";
Radix16_Pipe_R2P << "			         RA6_in,                                              \n";
Radix16_Pipe_R2P << "			         RA7_in,                                              \n";
Radix16_Pipe_R2P << "			         RA8_in,                                              \n";
Radix16_Pipe_R2P << "			         RA9_in,                                              \n";
Radix16_Pipe_R2P << "			         RA10_in,                                             \n";
Radix16_Pipe_R2P << "			         RA11_in,                                             \n";
Radix16_Pipe_R2P << "			         RA12_in,                                             \n";
Radix16_Pipe_R2P << "			         RA13_in,                                             \n";
Radix16_Pipe_R2P << "			         RA14_in,                                             \n";
Radix16_Pipe_R2P << "			         RA15_in,                                             \n";
Radix16_Pipe_R2P << "		             N_in,                                                \n";
Radix16_Pipe_R2P << "		             MixRadix_sel_in,                                     \n";
Radix16_Pipe_R2P << "		             BU_mode_sel,                                         \n";
Radix16_Pipe_R2P << "		             BU_dc_sel,                                           \n";
Radix16_Pipe_R2P << "                    rst_n,                                               \n";
Radix16_Pipe_R2P << "                    clk                                                  \n";
Radix16_Pipe_R2P << "                    ) ;                                                  \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "parameter P_WIDTH     = 64 ;                                             \n";
Radix16_Pipe_R2P << "parameter D_WIDTH     = 192 ;                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA0_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA1_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA2_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA3_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA4_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA5_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA6_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA7_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA8_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA9_out ;                                            \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA10_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA11_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA12_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA13_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA14_out ;                                           \n";
Radix16_Pipe_R2P << "output[P_WIDTH-1:0] RA15_out ;                                           \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA0_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA1_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA2_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA3_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA4_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA5_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA6_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA7_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA8_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA9_in ;                                             \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA10_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA11_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA12_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA13_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA14_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] RA15_in ;                                            \n";
Radix16_Pipe_R2P << "input [P_WIDTH-1:0] N_in ;                                               \n";
Radix16_Pipe_R2P << "input [1:0]         MixRadix_sel_in;                                     \n";
Radix16_Pipe_R2P << "input               BU_mode_sel ;                                        \n";
Radix16_Pipe_R2P << "input               BU_dc_sel ;                                          \n";
Radix16_Pipe_R2P << "input               rst_n ;                                              \n";
Radix16_Pipe_R2P << "input               clk ;                                                \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "//stage0                                                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S0_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_0;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_0;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_0;                                               \n";
Radix16_Pipe_R2P << " //---------------------                                                 \n";
Radix16_Pipe_R2P << " //STAGE 1                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_0_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_0_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S1_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_1;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_1;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_1;                                               \n";
Radix16_Pipe_R2P << " //STAGE 2                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_1_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_1_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_0_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_0_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_1_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_1_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_2_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_2_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_3_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_3_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_4_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_4_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_5_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_5_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_6_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_6_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_7_R0_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] BU_S2_7_R1_out_wire;                                 \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_2;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_2;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_2;                                               \n";
Radix16_Pipe_R2P << " //STAGE 3                                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_2_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_2_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_3;                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_3;                                               \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_3;                                            	  \n";
Radix16_Pipe_R2P << " //stage4                                                                \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R0_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R1_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R2_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R3_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R4_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R5_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R6_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R7_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R8_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R9_3_D;                                              \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R10_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R11_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R12_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R13_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R14_3_D;                                             \n";
Radix16_Pipe_R2P << "wire  [D_WIDTH-1:0] R15_3_D;                                             \n";
Radix16_Pipe_R2P << " //Mod192_output                                                         \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R0_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R1_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R2_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R3_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R4_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R5_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R6_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R7_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R8_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R9_Mod192_S_out;                                     \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R10_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R11_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R12_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R13_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R14_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "wire  [P_WIDTH-1:0] R15_Mod192_S_out;                                    \n";
Radix16_Pipe_R2P << "//stage 0                                                                \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_0(.R0_out(BU_S0_0_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_0_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA0_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA8_in)                                             \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_1(.R0_out(BU_S0_1_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_1_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA1_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA9_in)                                             \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_2(.R0_out(BU_S0_2_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_2_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA2_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA10_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_3(.R0_out(BU_S0_3_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_3_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA3_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA11_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_4(.R0_out(BU_S0_4_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_4_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA4_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA12_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_5(.R0_out(BU_S0_5_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_5_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA5_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA13_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_6(.R0_out(BU_S0_6_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_6_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA6_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA14_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "BU_S0 BU_S0_7(.R0_out(BU_S0_7_R0_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R1_out(BU_S0_7_R1_out_wire),                              \n";
Radix16_Pipe_R2P << "              .R0_in(RA7_in),                                            \n";
Radix16_Pipe_R2P << "              .R1_in(RA15_in)                                            \n";
Radix16_Pipe_R2P << "              );                                                         \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "assign R0_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA0_in } : BU_S0_0_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R1_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA1_in } : BU_S0_1_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R2_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA2_in } : BU_S0_2_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R3_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA3_in } : BU_S0_3_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R4_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA4_in } : BU_S0_4_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R5_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA5_in } : BU_S0_5_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R6_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA6_in } : BU_S0_6_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R7_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA7_in } : BU_S0_7_R0_out_wire; \n";
Radix16_Pipe_R2P << "assign R8_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA8_in } : BU_S0_0_R1_out_wire; \n";
Radix16_Pipe_R2P << "assign R9_0  = (BU_mode_sel == 1'b1) ? {128'd0 , RA9_in } : {BU_S0_1_R1_out_wire[179:0],BU_S0_1_R1_out_wire[191:180]};\n";
Radix16_Pipe_R2P << "assign R10_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA10_in} : {BU_S0_2_R1_out_wire[167:0],BU_S0_2_R1_out_wire[191:168]};\n";
Radix16_Pipe_R2P << "assign R11_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA11_in} : {BU_S0_3_R1_out_wire[155:0],BU_S0_3_R1_out_wire[191:156]};\n";
Radix16_Pipe_R2P << "assign R12_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA12_in} : {BU_S0_4_R1_out_wire[143:0],BU_S0_4_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R13_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA13_in} : {BU_S0_5_R1_out_wire[131:0],BU_S0_5_R1_out_wire[191:132]};\n";
Radix16_Pipe_R2P << "assign R14_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA14_in} : {BU_S0_6_R1_out_wire[119:0],BU_S0_6_R1_out_wire[191:120]};\n";
Radix16_Pipe_R2P << "assign R15_0 = (BU_mode_sel == 1'b1) ? {128'd0 , RA15_in} : {BU_S0_7_R1_out_wire[107:0],BU_S0_7_R1_out_wire[191:108]};\n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_0(.R0_out(R0_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_0_D),                                      \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_0_D),                                    \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_0),                                         \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_0),                                         \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_0),                                         \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_0),                                         \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_0),                                         \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_0),                                         \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_0),                                         \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_0),                                         \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_0),                                         \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_0),                                         \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_0),                                       \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_0),                                       \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_0),                                       \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_0),                                       \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_0),                                       \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_0),                                       \n";
Radix16_Pipe_R2P << "                   .clk(clk),                                            \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)                                         \n";
Radix16_Pipe_R2P << "                   );                                                    \n";
Radix16_Pipe_R2P << " BU BU_S1_0(.R0_out(BU_S1_0_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_0_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R0_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R4_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_1(.R0_out(BU_S1_1_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_1_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R1_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R5_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_2(.R0_out(BU_S1_2_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_2_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R2_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R6_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_3(.R0_out(BU_S1_3_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_3_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R3_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R7_0_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_4(.R0_out(BU_S1_4_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_4_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R8_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R12_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_5(.R0_out(BU_S1_5_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_5_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R9_0_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R13_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_6(.R0_out(BU_S1_6_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_6_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R10_0_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R14_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S1_7(.R0_out(BU_S1_7_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S1_7_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R11_0_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R15_0_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";

// Mixed_radix_sel_in 
// 2'd0 :  radix-2 
// 2'd1 :  radix-4  
// 2'd2 :  radix-8
// radix-2 or radix-4 : bypass
Radix16_Pipe_R2P << "assign R0_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R0_0_D : BU_S1_0_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R1_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R1_0_D : BU_S1_1_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R2_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R2_0_D : BU_S1_2_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R3_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R3_0_D : BU_S1_3_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R4_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R4_0_D : BU_S1_0_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R5_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R5_0_D : {BU_S1_1_R1_out_wire[167:0],BU_S1_1_R1_out_wire[191:168]};\n";
Radix16_Pipe_R2P << "assign R6_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R6_0_D : {BU_S1_2_R1_out_wire[143:0],BU_S1_2_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R7_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R7_0_D : {BU_S1_3_R1_out_wire[119:0],BU_S1_3_R1_out_wire[191:120]};\n";
Radix16_Pipe_R2P << "assign R8_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R8_0_D : BU_S1_4_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R9_1  = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R9_0_D : BU_S1_5_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R10_1 = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R10_0_D : BU_S1_6_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R11_1 = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R11_0_D : BU_S1_7_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R12_1 = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R12_0_D : BU_S1_4_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R13_1 = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R13_0_D : {BU_S1_5_R1_out_wire[167:0],BU_S1_5_R1_out_wire[191:168]};\n";
Radix16_Pipe_R2P << "assign R14_1 = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R14_0_D : {BU_S1_6_R1_out_wire[143:0],BU_S1_6_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R15_1 = ((BU_mode_sel == 1'b1) && ((MixRadix_sel_in == 2'd0) || (MixRadix_sel_in == 2'd1))) ? R15_0_D : {BU_S1_7_R1_out_wire[119:0],BU_S1_7_R1_out_wire[191:120]};\n";

Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_1(.R0_out(R0_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_1_D),                                      \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_1_D),                                    \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_1),                                         \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_1),                                         \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_1),                                         \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_1),                                         \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_1),                                         \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_1),                                         \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_1),                                         \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_1),                                         \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_1),                                         \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_1),                                         \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_1),                                       \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_1),                                       \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_1),                                       \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_1),                                       \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_1),                                       \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_1),                                       \n";
Radix16_Pipe_R2P << "                   .clk(clk),                                            \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)                                         \n";
Radix16_Pipe_R2P << "                   );                                                    \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_0(.R0_out(BU_S2_0_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_0_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R0_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R2_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_1(.R0_out(BU_S2_1_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_1_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R1_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R3_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_2(.R0_out(BU_S2_2_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_2_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R4_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R6_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_3(.R0_out(BU_S2_3_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_3_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R5_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R7_1_D)                                               \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_4(.R0_out(BU_S2_4_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_4_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R8_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R10_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_5(.R0_out(BU_S2_5_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_5_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R9_1_D),                                              \n";
Radix16_Pipe_R2P << "            .R1_in(R11_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_6(.R0_out(BU_S2_6_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_6_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R12_1_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R14_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";
Radix16_Pipe_R2P << " BU BU_S2_7(.R0_out(BU_S2_7_R0_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R1_out(BU_S2_7_R1_out_wire),                                \n";
Radix16_Pipe_R2P << "            .R0_in(R13_1_D),                                             \n";
Radix16_Pipe_R2P << "            .R1_in(R15_1_D)                                              \n";
Radix16_Pipe_R2P << "           );                                                            \n";
Radix16_Pipe_R2P << "                                                                         \n";

Radix16_Pipe_R2P << "assign R0_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R0_1_D  : BU_S2_0_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R1_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R1_1_D  : BU_S2_1_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R2_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R2_1_D  : BU_S2_0_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R3_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R3_1_D  : {BU_S2_1_R1_out_wire[143:0],BU_S2_1_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R4_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R4_1_D  : BU_S2_2_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R5_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R5_1_D  : BU_S2_3_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R6_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R6_1_D  : BU_S2_2_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R7_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R7_1_D  : {BU_S2_3_R1_out_wire[143:0],BU_S2_3_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R8_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R8_1_D  : BU_S2_4_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R9_2  = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R9_1_D  : BU_S2_5_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R10_2 = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R10_1_D : BU_S2_4_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R11_2 = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R11_1_D : {BU_S2_5_R1_out_wire[143:0],BU_S2_5_R1_out_wire[191:144]};\n";
Radix16_Pipe_R2P << "assign R12_2 = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R12_1_D : BU_S2_6_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R13_2 = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R13_1_D : BU_S2_7_R0_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R14_2 = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R14_1_D : BU_S2_6_R1_out_wire;                                      \n";
Radix16_Pipe_R2P << "assign R15_2 = ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R15_1_D : {BU_S2_7_R1_out_wire[143:0],BU_S2_7_R1_out_wire[191:144]};\n";

Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_2(.R0_out(R0_2_D),          \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_2_D),          \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_2_D),          \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_2_D),          \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_2_D),          \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_2_D),          \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_2_D),          \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_2_D),          \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_2_D),          \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_2_D),          \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_2_D),        \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_2_D),        \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_2_D),        \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_2_D),        \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_2_D),        \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_2_D),        \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_2),             \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_2),             \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_2),             \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_2),             \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_2),             \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_2),             \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_2),             \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_2),             \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_2),             \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_2),             \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_2),           \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_2),           \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_2),           \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_2),           \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_2),           \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_2),           \n";
Radix16_Pipe_R2P << "                   .clk(clk),                \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)	          \n";
Radix16_Pipe_R2P << "                   );                        \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_0(.R0_out(R0_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R1_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R0_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R1_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_1(.R0_out(R2_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R3_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R2_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R3_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_2(.R0_out(R4_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R5_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R4_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R5_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_3(.R0_out(R6_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R7_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R6_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R7_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_4(.R0_out(R8_3),                   \n";
Radix16_Pipe_R2P << "            .R1_out(R9_3),                   \n";
Radix16_Pipe_R2P << "            .R0_in(R8_2_D),                  \n";
Radix16_Pipe_R2P << "            .R1_in(R9_2_D)                   \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_5(.R0_out(R10_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R11_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R10_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R11_2_D)                  \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_6(.R0_out(R12_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R13_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R12_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R13_2_D)                  \n";
Radix16_Pipe_R2P << "           );                                \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " BU BU_S3_7(.R0_out(R14_3),                  \n";
Radix16_Pipe_R2P << "            .R1_out(R15_3),                  \n";
Radix16_Pipe_R2P << "            .R0_in(R14_2_D),                 \n";
Radix16_Pipe_R2P << "            .R1_in(R15_2_D)                  \n";
Radix16_Pipe_R2P << "           );	                              \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Pipe Pipe_STAGE_3(.R0_out(R0_3_D),          \n";
Radix16_Pipe_R2P << "                   .R1_out(R1_3_D),          \n";
Radix16_Pipe_R2P << "                   .R2_out(R2_3_D),          \n";
Radix16_Pipe_R2P << "                   .R3_out(R3_3_D),          \n";
Radix16_Pipe_R2P << "                   .R4_out(R4_3_D),          \n";
Radix16_Pipe_R2P << "                   .R5_out(R5_3_D),          \n";
Radix16_Pipe_R2P << "                   .R6_out(R6_3_D),          \n";
Radix16_Pipe_R2P << "                   .R7_out(R7_3_D),          \n";
Radix16_Pipe_R2P << "                   .R8_out(R8_3_D),          \n";
Radix16_Pipe_R2P << "                   .R9_out(R9_3_D),          \n";
Radix16_Pipe_R2P << "                   .R10_out(R10_3_D),        \n";
Radix16_Pipe_R2P << "                   .R11_out(R11_3_D),        \n";
Radix16_Pipe_R2P << "                   .R12_out(R12_3_D),        \n";
Radix16_Pipe_R2P << "                   .R13_out(R13_3_D),        \n";
Radix16_Pipe_R2P << "                   .R14_out(R14_3_D),        \n";
Radix16_Pipe_R2P << "                   .R15_out(R15_3_D),        \n";
Radix16_Pipe_R2P << "                   .R0_in(R0_3),             \n";
Radix16_Pipe_R2P << "                   .R1_in(R1_3),             \n";
Radix16_Pipe_R2P << "                   .R2_in(R2_3),             \n";
Radix16_Pipe_R2P << "                   .R3_in(R3_3),             \n";
Radix16_Pipe_R2P << "                   .R4_in(R4_3),             \n";
Radix16_Pipe_R2P << "                   .R5_in(R5_3),             \n";
Radix16_Pipe_R2P << "                   .R6_in(R6_3),             \n";
Radix16_Pipe_R2P << "                   .R7_in(R7_3),             \n";
Radix16_Pipe_R2P << "                   .R8_in(R8_3),             \n";
Radix16_Pipe_R2P << "                   .R9_in(R9_3),             \n";
Radix16_Pipe_R2P << "                   .R10_in(R10_3),           \n";
Radix16_Pipe_R2P << "                   .R11_in(R11_3),           \n";
Radix16_Pipe_R2P << "                   .R12_in(R12_3),           \n";
Radix16_Pipe_R2P << "                   .R13_in(R13_3),           \n";
Radix16_Pipe_R2P << "                   .R14_in(R14_3),           \n";
Radix16_Pipe_R2P << "                   .R15_in(R15_3),           \n";
Radix16_Pipe_R2P << "                   .clk(clk),                \n";
Radix16_Pipe_R2P << "                   .rst_n(rst_n)	          \n";
Radix16_Pipe_R2P << "                   );  	 	              \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R0_Mod192(.S_out(R0_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R0_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R1_Mod192(.S_out(R1_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R1_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R2_Mod192(.S_out(R2_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R2_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << "                                             \n";
Radix16_Pipe_R2P << " Mod192 R3_Mod192(.S_out(R3_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R3_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R4_Mod192(.S_out(R4_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R4_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R5_Mod192(.S_out(R5_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R5_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R6_Mod192(.S_out(R6_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R6_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R7_Mod192(.S_out(R7_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R7_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R8_Mod192(.S_out(R8_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R8_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R9_Mod192(.S_out(R9_Mod192_S_out),   \n";
Radix16_Pipe_R2P << "                  .A_in(R9_3_D),             \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	                      \n";
Radix16_Pipe_R2P << " Mod192 R10_Mod192(.S_out(R10_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R10_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R11_Mod192(.S_out(R11_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R11_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R12_Mod192(.S_out(R12_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R12_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );	 	                  \n";
Radix16_Pipe_R2P << " Mod192 R13_Mod192(.S_out(R13_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R13_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );		                  \n";
Radix16_Pipe_R2P << " Mod192 R14_Mod192(.S_out(R14_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R14_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );                         \n";
Radix16_Pipe_R2P << " Mod192 R15_Mod192(.S_out(R15_Mod192_S_out), \n";
Radix16_Pipe_R2P << "                  .A_in(R15_3_D),            \n";
Radix16_Pipe_R2P << "                  .N_in(N_in),               \n";
Radix16_Pipe_R2P << "                  .clk(clk),                 \n";
Radix16_Pipe_R2P << "                  .rst_n(rst_n)              \n";
Radix16_Pipe_R2P << "                  );		                  \n";
//---------------------------------------------------------------------------
Radix16_Pipe_R2P << " assign RA0_out   = R0_Mod192_S_out;\n";
Radix16_Pipe_R2P << " assign RA1_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R15_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R1_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R13_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R2_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R12_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R4_Mod192_S_out   : R8_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA2_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R14_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R2_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R14_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R1_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R10_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R2_Mod192_S_out   : R4_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA3_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R13_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R3_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R15_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R3_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R14_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R6_Mod192_S_out   : R12_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA4_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R12_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R4_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R12_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R4_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R9_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R1_Mod192_S_out   : R2_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA5_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R11_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R5_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R9_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R6_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R13_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R5_Mod192_S_out   : R10_Mod192_S_out;\n";

Radix16_Pipe_R2P << " assign RA6_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R10_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R6_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R10_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R5_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R11_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R3_Mod192_S_out   : R6_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA7_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R9_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R7_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R11_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R7_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R15_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R7_Mod192_S_out   : R14_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA8_out   = ((BU_dc_sel == 1'b1) || (BU_mode_sel == 1'b1)) ? R8_Mod192_S_out  : R1_Mod192_S_out;\n";

Radix16_Pipe_R2P << " assign RA9_out   = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R7_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R9_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R5_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R10_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R4_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R12_Mod192_S_out  : R9_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA10_out  = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R6_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R10_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R6_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R9_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R2_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R10_Mod192_S_out  : R5_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA11_out  = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R5_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R11_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R7_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R11_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R6_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R14_Mod192_S_out  : R13_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA12_out  = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R4_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R12_Mod192_S_out : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R4_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R12_Mod192_S_out : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R1_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R9_Mod192_S_out  : R3_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA13_out  = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R3_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R13_Mod192_S_out : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R1_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R14_Mod192_S_out : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R5_Mod192_S_out  :   \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R13_Mod192_S_out : R11_Mod192_S_out;  \n";

Radix16_Pipe_R2P << " assign RA14_out  = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R2_Mod192_S_out   : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R14_Mod192_S_out : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R2_Mod192_S_out : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R13_Mod192_S_out : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R3_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_mode_sel == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R11_Mod192_S_out : R7_Mod192_S_out; \n";

Radix16_Pipe_R2P << " assign RA15_out  = ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd0)) ? R1_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd1)) ? R3_Mod192_S_out  : \n";
Radix16_Pipe_R2P << "                    ((BU_dc_sel   == 1'b1) && (MixRadix_sel_in == 2'd2)) ? R7_Mod192_S_out  : R15_Mod192_S_out; \n";


//    if(Mixed_radix_int == 2){
//       Radix16_Pipe_R2P << " assign RA0_out   = R0_Mod192_S_out;\n";
//       Radix16_Pipe_R2P << " assign RA1_out   = (BU_dc_sel == 1'b1) ? R15_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R1_Mod192_S_out  : R8_Mod192_S_out;  \n";
//       Radix16_Pipe_R2P << " assign RA2_out   = (BU_dc_sel == 1'b1) ? R14_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R2_Mod192_S_out  : R4_Mod192_S_out;  \n";
//       Radix16_Pipe_R2P << " assign RA3_out   = (BU_dc_sel == 1'b1) ? R13_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R3_Mod192_S_out  : R12_Mod192_S_out; \n";
//       Radix16_Pipe_R2P << " assign RA4_out   = (BU_dc_sel == 1'b1) ? R12_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R4_Mod192_S_out  : R2_Mod192_S_out;  \n";
//       Radix16_Pipe_R2P << " assign RA5_out   = (BU_dc_sel == 1'b1) ? R11_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R5_Mod192_S_out  : R10_Mod192_S_out; \n";
//       Radix16_Pipe_R2P << " assign RA6_out   = (BU_dc_sel == 1'b1) ? R10_Mod192_S_out : R6_Mod192_S_out;\n";
//       Radix16_Pipe_R2P << " assign RA7_out   = (BU_dc_sel == 1'b1) ? R9_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R7_Mod192_S_out  : R14_Mod192_S_out; \n";
//       Radix16_Pipe_R2P << " assign RA8_out   = ((BU_dc_sel == 1'b1) || (BU_mode_sel == 1'b1)) ? R8_Mod192_S_out  : R1_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA9_out   = (BU_dc_sel == 1'b1) ? R7_Mod192_S_out  : R9_Mod192_S_out;\n";
//       Radix16_Pipe_R2P << " assign RA10_out  = (BU_dc_sel == 1'b1) ? R6_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R10_Mod192_S_out : R5_Mod192_S_out;  \n";
//       Radix16_Pipe_R2P << " assign RA11_out  = (BU_dc_sel == 1'b1) ? R5_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R11_Mod192_S_out : R13_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA12_out  = (BU_dc_sel == 1'b1) ? R4_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R12_Mod192_S_out : R3_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA13_out  = (BU_dc_sel == 1'b1) ? R3_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R13_Mod192_S_out : R11_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA14_out  = (BU_dc_sel == 1'b1) ? R2_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R14_Mod192_S_out : R7_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA15_out  = (BU_dc_sel == 1'b1) ? R1_Mod192_S_out  : R15_Mod192_S_out;      \n";	
//    }
//    if(Mixed_radix_int == 4){
//       Radix16_Pipe_R2P << " assign RA0_out   = R0_Mod192_S_out;\n";
//       Radix16_Pipe_R2P << " assign RA1_out   = (BU_dc_sel == 1'b1) ? R13_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R2_Mod192_S_out : R8_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA2_out   = (BU_dc_sel == 1'b1) ? R14_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R1_Mod192_S_out : R4_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA3_out   = (BU_dc_sel == 1'b1) ? R15_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R3_Mod192_S_out : R12_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA4_out   = (BU_dc_sel == 1'b1) ? R12_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R4_Mod192_S_out : R2_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA5_out   = (BU_dc_sel == 1'b1) ? R9_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R6_Mod192_S_out : R10_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA6_out   = (BU_dc_sel == 1'b1) ? R10_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R5_Mod192_S_out : R6_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA7_out   = (BU_dc_sel == 1'b1) ? R11_Mod192_S_out : ( BU_mode_sel == 1'b1) ? R7_Mod192_S_out : R14_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA8_out   = ((BU_dc_sel == 1'b1) || ( BU_mode_sel == 1'b1)) ? R8_Mod192_S_out : R1_Mod192_S_out;\n";
//       Radix16_Pipe_R2P << " assign RA9_out   = (BU_dc_sel == 1'b1) ? R5_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R10_Mod192_S_out: R9_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA10_out  = (BU_dc_sel == 1'b1) ? R6_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R9_Mod192_S_out : R5_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA11_out  = (BU_dc_sel == 1'b1) ? R7_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R11_Mod192_S_out: R13_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA12_out  = (BU_dc_sel == 1'b1) ? R4_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R12_Mod192_S_out: R3_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA13_out  = (BU_dc_sel == 1'b1) ? R1_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R14_Mod192_S_out: R11_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA14_out  = (BU_dc_sel == 1'b1) ? R2_Mod192_S_out  : ( BU_mode_sel == 1'b1) ? R13_Mod192_S_out: R7_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA15_out  = (BU_dc_sel == 1'b1) ? R3_Mod192_S_out  : R15_Mod192_S_out;      \n";	
//    }
//    if(Mixed_radix_int == 8){
//       Radix16_Pipe_R2P << " assign RA0_out   = R0_Mod192_S_out;\n";
//       Radix16_Pipe_R2P << " assign RA1_out   = (BU_dc_sel == 1'b1) ? R12_Mod192_S_out : (BU_mode_sel == 1'b1) ? R4_Mod192_S_out  : R8_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA2_out   = (BU_dc_sel == 1'b1) ? R10_Mod192_S_out : (BU_mode_sel == 1'b1) ? R2_Mod192_S_out  : R4_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA3_out   = (BU_dc_sel == 1'b1) ? R14_Mod192_S_out : (BU_mode_sel == 1'b1) ? R6_Mod192_S_out  : R12_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA4_out   = (BU_dc_sel == 1'b1) ? R9_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R1_Mod192_S_out  : R2_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA5_out   = (BU_dc_sel == 1'b1) ? R13_Mod192_S_out : (BU_mode_sel == 1'b1) ? R5_Mod192_S_out  : R10_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA6_out   = (BU_dc_sel == 1'b1) ? R11_Mod192_S_out : (BU_mode_sel == 1'b1) ? R3_Mod192_S_out  : R6_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA7_out   = (BU_dc_sel == 1'b1) ? R15_Mod192_S_out : (BU_mode_sel == 1'b1) ? R7_Mod192_S_out  : R14_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA8_out   = ((BU_dc_sel == 1'b1) || (BU_mode_sel == 1'b1)) ? R8_Mod192_S_out  : R1_Mod192_S_out;\n";
//       Radix16_Pipe_R2P << " assign RA9_out   = (BU_dc_sel == 1'b1) ? R4_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R12_Mod192_S_out : R9_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA10_out  = (BU_dc_sel == 1'b1) ? R2_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R10_Mod192_S_out : R5_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA11_out  = (BU_dc_sel == 1'b1) ? R6_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R14_Mod192_S_out : R13_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA12_out  = (BU_dc_sel == 1'b1) ? R1_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R9_Mod192_S_out  : R3_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA13_out  = (BU_dc_sel == 1'b1) ? R5_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R13_Mod192_S_out : R11_Mod192_S_out;      \n";
//       Radix16_Pipe_R2P << " assign RA14_out  = (BU_dc_sel == 1'b1) ? R3_Mod192_S_out  : (BU_mode_sel == 1'b1) ? R11_Mod192_S_out : R7_Mod192_S_out;       \n";
//       Radix16_Pipe_R2P << " assign RA15_out  = (BU_dc_sel == 1'b1) ? R7_Mod192_S_out  : R15_Mod192_S_out;      \n";	
//    }
Radix16_Pipe_R2P << " \n";
Radix16_Pipe_R2P << "endmodule                                  \n";
	
	 Radix16_Pipe_R2P.close();
}

void configurable_BFFT::TWIpipe_r16_R2P(std::string string_in){
	 std::ofstream TWIpipe_r16_R2P;
     std::string        string_buf = "/TWIpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 TWIpipe_r16_R2P.open(ss.str());	
TWIpipe_r16_R2P << " //=========================================                         \n";
TWIpipe_r16_R2P << " //Date:2021/04/05                                                   \n";
TWIpipe_r16_R2P << " //writer:shiyong                                                    \n";
TWIpipe_r16_R2P << " //note: bn ank ma pipline                                           \n";
TWIpipe_r16_R2P << " //      FFT type of m-th tiwiddle factor. m-th cyclotomic polynomial\n";
TWIpipe_r16_R2P << " //========================================                          \n";
TWIpipe_r16_R2P << " `timescale 1 ns/1 ps                                                \n";
TWIpipe_r16_R2P << " module TWIpipe(                                                     \n";
TWIpipe_r16_R2P << "     BN_out,                                                         \n";
TWIpipe_r16_R2P << "     MA_out,                                                         \n";
TWIpipe_r16_R2P << " 	TWIradix0_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix1_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix2_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix3_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix4_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix5_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix6_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix7_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix8_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix9_o,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix10_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix11_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix12_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix13_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix14_o,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix15_o,                                                    \n";
TWIpipe_r16_R2P << "     BN_in,                                                          \n";
TWIpipe_r16_R2P << "     MA_in,                                                          \n";
TWIpipe_r16_R2P << " 	TWIradix0_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix1_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix2_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix3_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix4_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix5_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix6_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix7_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix8_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix9_i,                                                     \n";
TWIpipe_r16_R2P << " 	TWIradix10_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix11_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix12_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix13_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix14_i,                                                    \n";
TWIpipe_r16_R2P << " 	TWIradix15_i,                                                    \n";
TWIpipe_r16_R2P << " 	rst_n,                                                           \n";
TWIpipe_r16_R2P << "     clk                                                             \n";
TWIpipe_r16_R2P << " );                                                                  \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " parameter A_WIDTH = 11;                                             \n";
TWIpipe_r16_R2P << " parameter A_ZERO  = 11'b0;                                          \n";
TWIpipe_r16_R2P << " parameter P_WIDTH = 64;                                             \n";
TWIpipe_r16_R2P << " parameter P_ZERO  = 64'd0;                                          \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " output [A_WIDTH-1:0] MA_out;                                        \n";
TWIpipe_r16_R2P << " output               BN_out;                                        \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix0_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix1_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix2_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix3_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix4_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix5_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix6_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix7_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix8_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix9_o;                                    \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix10_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix11_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix12_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix13_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix14_o;                                   \n";
TWIpipe_r16_R2P << " output [P_WIDTH-1:0]TWIradix15_o;                                   \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " input  [A_WIDTH-1:0] MA_in;                                         \n";
TWIpipe_r16_R2P << " input                BN_in;                                         \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix0_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix1_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix2_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix3_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix4_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix5_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix6_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix7_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix8_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix9_i;                                    \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix10_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix11_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix12_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix13_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix14_i;                                   \n";
TWIpipe_r16_R2P << " input  [P_WIDTH-1:0]TWIradix15_i;                                   \n";
TWIpipe_r16_R2P << " input                rst_n;                                         \n";
TWIpipe_r16_R2P << " input                clk;                                           \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_out;                                          \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg0;                                         \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg1;                                         \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg2;                                         \n";
TWIpipe_r16_R2P << " reg  [A_WIDTH-1:0] MA_reg3;                                         \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " reg                BN_out;                                          \n";
TWIpipe_r16_R2P << " reg                BN_reg0;                                         \n";
TWIpipe_r16_R2P << " reg                BN_reg1;                                         \n";
TWIpipe_r16_R2P << " //---------------------------------                                 \n";   
TWIpipe_r16_R2P << " reg                BN_reg2;                                         \n";
TWIpipe_r16_R2P << " reg                BN_reg3;                                         \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix0_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix1_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix2_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix3_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix4_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix5_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix6_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix7_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix8_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix9_o;                                       \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix10_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix11_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix12_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix13_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix14_o;                                      \n";
TWIpipe_r16_R2P << " reg [P_WIDTH-1:0]TWIradix15_o;                                      \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << "     always @(posedge clk,negedge rst_n)begin                        \n";
TWIpipe_r16_R2P << "         if(~rst_n)begin                                             \n";
TWIpipe_r16_R2P << "             MA_reg0       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_reg1       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_reg2       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_reg3       <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             MA_out        <=  A_ZERO;                               \n";
TWIpipe_r16_R2P << "             BN_reg0       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << "             BN_reg1       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << "             BN_reg2       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << "             BN_reg3       <=  1'b0;                                 \n";
TWIpipe_r16_R2P << " 			BN_out        <=  1'b0;                                  \n";
TWIpipe_r16_R2P << " 			TWIradix0_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix1_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix2_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix3_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix4_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix5_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix6_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix7_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix8_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix9_o   <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix10_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix11_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix12_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix13_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix14_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << " 			TWIradix15_o  <=  P_ZERO;                                \n";
TWIpipe_r16_R2P << "         end                                                         \n";
TWIpipe_r16_R2P << "         else begin                                                  \n";
TWIpipe_r16_R2P << "             MA_reg0  <= MA_in;                                      \n";
TWIpipe_r16_R2P << "             MA_reg1  <= MA_reg0;                                    \n";
TWIpipe_r16_R2P << "             MA_reg2  <= MA_reg1;                                    \n";
TWIpipe_r16_R2P << "             MA_reg3  <= MA_reg2;                                    \n";
TWIpipe_r16_R2P << "             MA_out   <= MA_reg3;                                    \n";
TWIpipe_r16_R2P << " 			//                                                       \n";
TWIpipe_r16_R2P << "             BN_reg0  <= BN_in;                                      \n";
TWIpipe_r16_R2P << "             BN_reg1  <= BN_reg0;                                    \n";
TWIpipe_r16_R2P << "             BN_reg2  <= BN_reg1;                                    \n";
TWIpipe_r16_R2P << "             BN_reg3  <= BN_reg2;                                    \n";
TWIpipe_r16_R2P << "             BN_out   <= BN_reg3;                                    \n";
TWIpipe_r16_R2P << " 			//                                                       \n";
TWIpipe_r16_R2P << " 		    TWIradix0_o   <=  TWIradix0_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix1_o   <=  TWIradix1_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix2_o   <=  TWIradix2_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix3_o   <=  TWIradix3_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix4_o   <=  TWIradix4_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix5_o   <=  TWIradix5_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix6_o   <=  TWIradix6_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix7_o   <=  TWIradix7_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix8_o   <=  TWIradix8_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix9_o   <=  TWIradix9_i;                           \n";
TWIpipe_r16_R2P << " 			TWIradix10_o  <=  TWIradix10_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix11_o  <=  TWIradix11_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix12_o  <=  TWIradix12_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix13_o  <=  TWIradix13_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix14_o  <=  TWIradix14_i;                          \n";
TWIpipe_r16_R2P << " 			TWIradix15_o  <=  TWIradix15_i;                          \n";
TWIpipe_r16_R2P << "         end                                                         \n";
TWIpipe_r16_R2P << "     end                                                             \n";
TWIpipe_r16_R2P << "                                                                     \n";
TWIpipe_r16_R2P << " endmodule                                                           \n";
	 
	 TWIpipe_r16_R2P.close();
}

//CLA
void configurable_BFFT::CLA4(std::string string_in){
	 std::ofstream cla4;
     std::string        string_buf = "/CLA4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;     
	 cla4.open(ss.str());
     cla4 << " `timescale 1 ns/1 ps                                                   \n";
     cla4 << " module CLA4(sum,                                                       \n";
     cla4 << "             g_out,                                                     \n";
     cla4 << "             p_out,                                                     \n";
     cla4 << "             a_in,                                                      \n";
     cla4 << "             b_in,                                                      \n";
     cla4 << "             c_in                                                       \n";
     cla4 << "             ) ;                                                        \n";
     cla4 << " parameter CLA_WIDTH = 4 ;                                              \n";
     cla4 << " parameter CLA_ZERO = 4'd0 ;                                            \n";
     cla4 << " parameter C_1 = 0 ;                                                    \n";
     cla4 << " parameter C_2 = 1 ;                                                    \n";
     cla4 << " parameter C_3 = 2 ;                                                    \n";
     cla4 << "                                                                        \n";
     cla4 << " output[CLA_WIDTH-1:0] sum ;                                            \n";
     cla4 << " output                g_out ;                                          \n";
     cla4 << " output                p_out ;                                          \n";
     cla4 << "                                                                        \n";
     cla4 << " input [CLA_WIDTH-1:0] a_in ;                                           \n";
     cla4 << " input [CLA_WIDTH-1:0] b_in ;                                           \n";
     cla4 << " input                 c_in ;                                           \n";
     cla4 << " // input                 rst_n ;                                       \n";
     cla4 << " // input                 clk ;                                         \n";
     cla4 << "                                                                        \n";
     cla4 << " wire  [CLA_WIDTH-1:0] g_wire ;                                         \n";
     cla4 << " wire  [CLA_WIDTH-1:0] p_wire ;                                         \n";
     cla4 << " wire  [CLA_WIDTH-2:0] c_wire ;                                         \n";
     cla4 << " // wire  [CLA_WIDTH-1:0] sum_wire ;                                    \n";
     cla4 << "                                                                        \n";
     cla4 << " // reg[CLA_WIDTH-1:0] sum ;                                            \n";
     cla4 << "                                                                        \n";
     cla4 << "                                                                        \n";
     cla4 << "  //generate g                                                          \n";
     cla4 << "  assign g_wire = a_in & b_in ;                                         \n";
     cla4 << "  //propagate p                                                         \n";
     cla4 << "  assign p_wire = a_in ^ b_in ;                                         \n";
     cla4 << "                                                                        \n";
     cla4 << "  //carry lookahead carry generator                                     \n";
     cla4 << "  assign c_wire[C_1] = g_wire[0]|                                       \n";
     cla4 << "                       (c_in&p_wire[0]) ;                               \n";
     cla4 << "  assign c_wire[C_2] = g_wire[1]|                                       \n";
     cla4 << "                       (g_wire[0]&p_wire[1])|                           \n";
     cla4 << "                       (c_in&p_wire[0]&p_wire[1]) ;                     \n";
     cla4 << "  assign c_wire[C_3] = g_wire[2]|                                       \n";
     cla4 << "                       (g_wire[1]&p_wire[2])|                           \n";
     cla4 << "                       (g_wire[0]&p_wire[1]&p_wire[2])|                 \n";
     cla4 << "                       (c_in&p_wire[0]&p_wire[1]&p_wire[2]) ;           \n";
     cla4 << "                                                                        \n";
     cla4 << "  //SUM                                                                 \n";
     cla4 << "  assign sum = a_in^b_in^{c_wire, c_in} ;                               \n";
     cla4 << "                                                                        \n";
     cla4 << "  //                                                                    \n";
     cla4 << "  assign g_out = g_wire[3]|                                             \n";
     cla4 << "                 (g_wire[2]&p_wire[3])|                                 \n";
     cla4 << "                 (g_wire[1]&p_wire[2]&p_wire[3])|                       \n";
     cla4 << "                 (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]) ;            \n";
     cla4 << "  assign p_out = p_wire[3]&p_wire[2]&p_wire[1]&p_wire[0] ;              \n";
     cla4 << "                                                                        \n";
     cla4 << "                                                                        \n";
     cla4 << " endmodule                                                              \n";
	 cla4.close();	
}
void configurable_BFFT::CLA6(std::string string_in){
	 std::ofstream cla6;
     std::string        string_buf = "/CLA6.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla6.open(ss.str());
     cla6 << " `timescale 1 ns/1 ps                                                                         \n";
     cla6 << " module CLA6(sum,                                                                             \n";
     cla6 << "             g_out,                                                                           \n";
     cla6 << "             p_out,                                                                           \n";
     cla6 << "             a_in,                                                                            \n";
     cla6 << "             b_in,                                                                            \n";
     cla6 << "             c_in                                                                             \n";
     cla6 << "             ) ;                                                                              \n";
     cla6 << " parameter CLA_WIDTH = 6 ;                                                                    \n";
     cla6 << " parameter CLA_ZERO = 6'd0 ;                                                                  \n";
     cla6 << " parameter C_1 = 0 ;                                                                          \n";
     cla6 << " parameter C_2 = 1 ;                                                                          \n";
     cla6 << " parameter C_3 = 2 ;                                                                          \n";
     cla6 << " parameter C_4 = 3 ;                                                                          \n";
     cla6 << " parameter C_5 = 4 ;                                                                          \n";
     cla6 << "                                                                                              \n";
     cla6 << " output[CLA_WIDTH-1:0] sum ;                                                                  \n";
     cla6 << " output                g_out ;                                                                \n";
     cla6 << " output                p_out ;                                                                \n";
     cla6 << "                                                                                              \n";
     cla6 << " input [CLA_WIDTH-1:0] a_in ;                                                                 \n";
     cla6 << " input [CLA_WIDTH-1:0] b_in ;                                                                 \n";
     cla6 << " input                 c_in ;                                                                 \n";
     cla6 << "                                                                                              \n";
     cla6 << " wire  [CLA_WIDTH-1:0] g_wire ;                                                               \n";
     cla6 << " wire  [CLA_WIDTH-1:0] p_wire ;                                                               \n";
     cla6 << " wire  [CLA_WIDTH-2:0] c_wire ;                                                               \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //generate g                                                                             \n";
     cla6 << "     assign g_wire = a_in & b_in ;                                                            \n";
     cla6 << "     //propagate p                                                                            \n";
     cla6 << "     assign p_wire = a_in ^ b_in ;                                                            \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //carry lookahead carry generator                                                        \n";
     cla6 << "     assign c_wire[C_1] = g_wire[0]|                                                          \n";
     cla6 << "                         (c_in&p_wire[0]) ;                                                   \n";
     cla6 << "     assign c_wire[C_2] = g_wire[1]|                                                          \n";
     cla6 << "                         (g_wire[0]&p_wire[1])|                                               \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]) ;                                         \n";
     cla6 << "     assign c_wire[C_3] = g_wire[2]|                                                          \n";
     cla6 << "                         (g_wire[1]&p_wire[2])|                                               \n";
     cla6 << "                         (g_wire[0]&p_wire[1]&p_wire[2])|                                     \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]&p_wire[2]) ;                               \n";
     cla6 << "     assign c_wire[C_4] = g_wire[3]|                                                          \n";
     cla6 << "                         (g_wire[2]&p_wire[3])|                                               \n";
     cla6 << "                         (g_wire[1]&p_wire[2]&p_wire[3])|                                     \n";
     cla6 << "                         (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3])|                           \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]) ;                     \n";
     cla6 << "     assign c_wire[C_5] = g_wire[4]|                                                          \n";
     cla6 << "                         (g_wire[3]&p_wire[4])|                                               \n";
     cla6 << "                         (g_wire[2]&p_wire[3]&p_wire[4])|                                     \n";
     cla6 << "                         (g_wire[1]&p_wire[2]&p_wire[3]&p_wire[4])|                           \n";
     cla6 << "                         (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]&p_wire[4])|                 \n";
     cla6 << "                         (c_in&p_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]&p_wire[4]) ;           \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //SUM                                                                                    \n";
     cla6 << "     assign sum = a_in^b_in^{c_wire, c_in} ;                                                  \n";
     cla6 << "                                                                                              \n";
     cla6 << "     //                                                                                       \n";
     cla6 << "     assign g_out = g_wire[5]|                                                                \n";
     cla6 << "                    (g_wire[4]&p_wire[5])|                                                    \n";
     cla6 << "                    (g_wire[3]&p_wire[4]&p_wire[5])|                                          \n";
     cla6 << "                    (g_wire[2]&p_wire[3]&p_wire[4]&p_wire[5])|                                \n";
     cla6 << "                    (g_wire[1]&p_wire[2]&p_wire[3]&p_wire[4]&p_wire[5])|                      \n";
     cla6 << "                    (g_wire[0]&p_wire[1]&p_wire[2]&p_wire[3]&p_wire[4]&p_wire[5]) ;           \n";
     cla6 << "     assign p_out = p_wire[5]&p_wire[4]&p_wire[3]&p_wire[2]&p_wire[1]&p_wire[0] ;             \n";
     cla6 << "                                                                                              \n";
     cla6 << " endmodule                                                                                    \n";
	 cla6.close();
}
void configurable_BFFT::CLA16(std::string string_in){
	 std::ofstream cla16;
     std::string        string_buf = "/CLA16.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla16.open(ss.str());
     cla16 << " `timescale 1 ns/1 ps                                   \n";
     cla16 << " module CLA16(sum,                                      \n";
     cla16 << "              g_out,                                    \n";
     cla16 << "              p_out,                                    \n";
     cla16 << "              a_in,                                     \n";
     cla16 << "              b_in,                                     \n";
     cla16 << "              c_in                                      \n";
     cla16 << "              ) ;                                       \n";
     cla16 << " parameter CLA_WIDTH = 16 ;                             \n";
     cla16 << " parameter CA_WIDTH = 3 ;                               \n";
     cla16 << " parameter PG_WIDTH = 4 ;                               \n";
     cla16 << " parameter C_1 = 0 ;                                    \n";
     cla16 << " parameter C_2 = 1 ;                                    \n";
     cla16 << " parameter C_3 = 2 ;                                    \n";
     cla16 << " parameter C_4 = 3 ;                                    \n";
     cla16 << " parameter SEG_1 = 4 ;                                  \n";
     cla16 << " parameter SEG_2 = 8 ;                                  \n";
     cla16 << " parameter SEG_3 = 12 ;                                 \n";
     cla16 << " parameter SEG_4 = 16 ;                                 \n";
     cla16 << "                                                        \n";
     cla16 << " output[CLA_WIDTH-1:0] sum ;                            \n";
     cla16 << " output                g_out ;                          \n";
     cla16 << " output                p_out ;                          \n";
     cla16 << "                                                        \n";
     cla16 << " input [CLA_WIDTH-1:0] a_in ;                           \n";
     cla16 << " input [CLA_WIDTH-1:0] b_in ;                           \n";
     cla16 << " input                 c_in ;                           \n";
     cla16 << " // input                 rst_n ;                       \n";
     cla16 << " // input                 clk ;                         \n";
     cla16 << "                                                        \n";
     cla16 << " wire  [PG_WIDTH-1:0]  g_wire ;                         \n";
     cla16 << " wire  [PG_WIDTH-1:0]  p_wire ;                         \n";
     cla16 << " wire  [CA_WIDTH-1:0]  carry ;                          \n";
     cla16 << "                                                        \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_0(.sum(sum[SEG_1-1:0]),                \n";
     cla16 << "                   .g_out(g_wire[C_1]),                 \n";
     cla16 << "                   .p_out(p_wire[C_1]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_1-1:0]),              \n";
     cla16 << "                   .b_in(b_in[SEG_1-1:0]),              \n";
     cla16 << "                   .c_in(c_in) // c0                    \n";
     cla16 << "                   // .rst_n(rst_n),                    \n";
     cla16 << "                   // .clk(clk)                         \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_1(.sum(sum[SEG_2-1:SEG_1]),            \n";
     cla16 << "                   .g_out(g_wire[C_2]),                 \n";
     cla16 << "                   .p_out(p_wire[C_2]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_2-1:SEG_1]),          \n";
     cla16 << "                   .b_in(b_in[SEG_2-1:SEG_1]),          \n";
     cla16 << "                   .c_in(carry[C_1]) // c4              \n";
     cla16 << "                   // .rst_n(rst_n),                    \n";
     cla16 << "                   // .clk(clk)                         \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_2(.sum(sum[SEG_3-1:SEG_2]),            \n";
     cla16 << "                   .g_out(g_wire[C_3]),                 \n";
     cla16 << "                   .p_out(p_wire[C_3]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_3-1:SEG_2]),          \n";
     cla16 << "                   .b_in(b_in[SEG_3-1:SEG_2]),          \n";
     cla16 << "                   .c_in(carry[C_2]) // c8              \n";
     cla16 << "                   // .rst_n(rst_n),                    \n";
     cla16 << "                   // .clk(clk)                         \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA4 u_CLA4_3(.sum(sum[SEG_4-1:SEG_3]),            \n";
     cla16 << "                   .g_out(g_wire[C_4]),                 \n";
     cla16 << "                   .p_out(p_wire[C_4]),                 \n";
     cla16 << "                   .a_in(a_in[SEG_4-1:SEG_3]),          \n";
     cla16 << "                   .b_in(b_in[SEG_4-1:SEG_3]),          \n";
     cla16 << "                   .c_in(carry[C_3]) // c12             \n";
     cla16 << "                   ) ;                                  \n";
     cla16 << "     //                                                 \n";
     cla16 << "     CLA16clg u_CLA16clg(.g_out(g_out),                 \n";
     cla16 << "                         .p_out(p_out),                 \n";
     cla16 << "                         .carry(carry), // c4, c8, c12  \n";
     cla16 << "                         .p_in0(p_wire[C_1]),           \n";
     cla16 << "                         .g_in0(g_wire[C_1]),           \n";
     cla16 << "                         .p_in1(p_wire[C_2]),           \n";
     cla16 << "                         .g_in1(g_wire[C_2]),           \n";
     cla16 << "                         .p_in2(p_wire[C_3]),           \n";
     cla16 << "                         .g_in2(g_wire[C_3]),           \n";
     cla16 << "                         .p_in3(p_wire[C_4]),           \n";
     cla16 << "                         .g_in3(g_wire[C_4]),           \n";
     cla16 << "                         .c_in(c_in) // c0              \n";
     cla16 << "                         ) ;                            \n";
     cla16 << " endmodule                                              \n";

	 cla16.close();	
}
void configurable_BFFT::CLA16clg(std::string string_in){
	 std::ofstream cla16clg;
     std::string        string_buf = "/CLA16clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;    
	 cla16clg.open(ss.str());
     cla16clg << " `timescale 1 ns/1 ps                                                                      \n";
     cla16clg << " module CLA16clg(g_out,                                                                    \n";
     cla16clg << "                 p_out,                                                                    \n";
     cla16clg << "                 carry,                                                                    \n";
     cla16clg << "                 p_in0,                                                                    \n";
     cla16clg << "                 g_in0,                                                                    \n";
     cla16clg << "                 p_in1,                                                                    \n";
     cla16clg << "                 g_in1,                                                                    \n";
     cla16clg << "                 p_in2,                                                                    \n";
     cla16clg << "                 g_in2,                                                                    \n";
     cla16clg << "                 p_in3,                                                                    \n";
     cla16clg << "                 g_in3,                                                                    \n";
     cla16clg << "                 c_in                                                                      \n";
     cla16clg << "                 ) ;                                                                       \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
     cla16clg << " parameter C_1 = 0 ;                                                                       \n";
     cla16clg << " parameter C_2 = 1 ;                                                                       \n";
     cla16clg << " parameter C_3 = 2 ;                                                                       \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " output                g_out ;                                                             \n";
     cla16clg << " output                p_out ;                                                             \n";
     cla16clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " input                 p_in0 ;                                                             \n";
     cla16clg << " input                 g_in0 ;                                                             \n";
     cla16clg << " input                 p_in1 ;                                                             \n";
     cla16clg << " input                 g_in1 ;                                                             \n";
     cla16clg << " input                 p_in2 ;                                                             \n";
     cla16clg << " input                 g_in2 ;                                                             \n";
     cla16clg << " input                 p_in3 ;                                                             \n";
     cla16clg << " input                 g_in3 ;                                                             \n";
     cla16clg << " input                 c_in ;                                                              \n";
     cla16clg << " 	                                                                                         \n";
     cla16clg << " 	//                                                                                       \n";
     cla16clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
     cla16clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
     cla16clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " 	//                                                                                       \n";
     cla16clg << " 	assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;       \n";
     cla16clg << " 	assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                                 \n";
     cla16clg << "                                                                                           \n";
     cla16clg << "                                                                                           \n";
     cla16clg << " endmodule                                                                                 \n";

     cla16clg.close();	
}
void configurable_BFFT::CLA24(std::string string_in){
     std::ofstream cla24;
     std::string        string_buf = "/CLA24.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla24.open(ss.str());
     cla24 << " `timescale 1 ns/1 ps                                   \n";
     cla24 << " module CLA24(sum,                                      \n";
     cla24 << " 			 // c_out,                                 \n";
     cla24 << " 			 g_out,                                    \n";
     cla24 << "              p_out,                                    \n";
     cla24 << "              a_in,                                     \n";
     cla24 << "              b_in,                                     \n";
     cla24 << "              c_in                                      \n";
     cla24 << " 			 // rst_n,                                 \n";
     cla24 << "              // clk                                    \n";
     cla24 << "              ) ;                                       \n";
     cla24 << " parameter CLA_WIDTH = 24 ;                             \n";
     cla24 << " parameter CA_WIDTH = 3 ;                               \n";
     cla24 << " parameter PG_WIDTH = 4 ;                               \n";
     cla24 << " parameter C_1 = 0 ;                                    \n";
     cla24 << " parameter C_2 = 1 ;                                    \n";
     cla24 << " parameter C_3 = 2 ;                                    \n";
     cla24 << " parameter C_4 = 3 ;                                    \n";
     cla24 << " parameter SEG_1 = 6 ;                                  \n";
     cla24 << " parameter SEG_2 = 12 ;                                 \n";
     cla24 << " parameter SEG_3 = 18 ;                                 \n";
     cla24 << " parameter SEG_4 = 24 ;                                 \n";
     cla24 << "                                                        \n";
     cla24 << "                                                        \n";
     cla24 << " output[CLA_WIDTH-1:0] sum ;                            \n";
     cla24 << " // output                c_out ;                       \n";
     cla24 << " output                g_out ;                          \n";
     cla24 << " output                p_out ;                          \n";
     cla24 << "                                                        \n";
     cla24 << " input [CLA_WIDTH-1:0] a_in ;                           \n";
     cla24 << " input [CLA_WIDTH-1:0] b_in ;                           \n";
     cla24 << " input                 c_in ;                           \n";
     cla24 << " // input                 rst_n ;                       \n";
     cla24 << " // input                 clk ;                         \n";
     cla24 << "                                                        \n";
     cla24 << " wire  [PG_WIDTH-1:0]  g_wire ;                         \n";
     cla24 << " wire  [PG_WIDTH-1:0]  p_wire ;                         \n";
     cla24 << " wire  [CA_WIDTH-1:0]  carry ;                          \n";
     cla24 << "                                                         \n";
     cla24 << "     //                                                 \n";
     cla24 << "     CLA6 u_CLA6_0(.sum(sum[SEG_1-1:0]),                \n";
     cla24 << "                    .g_out(g_wire[C_1]),                 \n";
     cla24 << "                    .p_out(p_wire[C_1]),                 \n";
     cla24 << "                    .a_in(a_in[SEG_1-1:0]),              \n";
     cla24 << "                    .b_in(b_in[SEG_1-1:0]),              \n";
     cla24 << "                    .c_in(c_in) // c0                    \n";
     cla24 << "                    // .rst_n(rst_n),                    \n";
     cla24 << "                    // .clk(clk)                         \n";
     cla24 << "                    ) ;                                  \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA6 u_CLA6_1(.sum(sum[SEG_2-1:SEG_1]),            \n";
     cla24 << "                    .g_out(g_wire[C_2]),                 \n";
     cla24 << "                    .p_out(p_wire[C_2]),                 \n";
     cla24 << "                    .a_in(a_in[SEG_2-1:SEG_1]),          \n";
     cla24 << "                    .b_in(b_in[SEG_2-1:SEG_1]),          \n";
     cla24 << "                    .c_in(carry[C_1]) // c6              \n";
     cla24 << "                    // .rst_n(rst_n),                    \n";
     cla24 << "                    // .clk(clk)                         \n";
     cla24 << "                    ) ;                                  \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA6 u_CLA6_2(.sum(sum[SEG_3-1:SEG_2]),            \n";
     cla24 << "                    .g_out(g_wire[C_3]),                 \n";
     cla24 << "                    .p_out(p_wire[C_3]),                 \n";
     cla24 << "                    .a_in(a_in[SEG_3-1:SEG_2]),          \n";
     cla24 << "                    .b_in(b_in[SEG_3-1:SEG_2]),          \n";
     cla24 << "                    .c_in(carry[C_2]) // c12             \n";
     cla24 << "                    // .rst_n(rst_n),                    \n";
     cla24 << "                    // .clk(clk)                         \n";
     cla24 << "                    ) ;                                  \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA6 u_CLA6_3(.sum(sum[SEG_4-1:SEG_3]),            \n";
     cla24 << "                         .g_out(g_wire[C_4]),            \n";
     cla24 << "                         .p_out(p_wire[C_4]),            \n";
     cla24 << "                         .a_in(a_in[SEG_4-1:SEG_3]),     \n";
     cla24 << "                         .b_in(b_in[SEG_4-1:SEG_3]),     \n";
     cla24 << "                         .c_in(carry[C_3]) // c18        \n";
     cla24 << "                         // .rst_n(rst_n),               \n";
     cla24 << "                         // .clk(clk)                    \n";
     cla24 << "                         ) ;                             \n";
     cla24 << "      //                                                 \n";
     cla24 << "     CLA24clg u_CLA24clg(.g_out(g_out),                 \n";
     cla24 << "                          .p_out(p_out),                 \n";
     cla24 << "                          // .c_out(c_out),              \n";
     cla24 << "                          .carry(carry), // c6, c12, c18 \n";
     cla24 << "                          .p_in0(p_wire[C_1]),           \n";
     cla24 << "                          .g_in0(g_wire[C_1]),           \n";
     cla24 << "                          .p_in1(p_wire[C_2]),           \n";
     cla24 << "                          .g_in1(g_wire[C_2]),           \n";
     cla24 << "                          .p_in2(p_wire[C_3]),           \n";
     cla24 << "                          .g_in2(g_wire[C_3]),           \n";
     cla24 << "                          .p_in3(p_wire[C_4]),           \n";
     cla24 << "                          .g_in3(g_wire[C_4]),           \n";
     cla24 << "                          .c_in(c_in) // c0              \n";
     cla24 << "                          ) ;                            \n";                                      
     cla24 << "                                                         \n";
     cla24 << " endmodule                                              \n";               
	 cla24.close();
}
void configurable_BFFT::CLA24clg(std::string string_in){
	 std::ofstream cla24clg;
     std::string        string_buf = "/CLA24clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla24clg.open(ss.str());
     cla24clg << " `timescale 1 ns/1 ps                                                                      \n";
     cla24clg << " module CLA24clg(g_out,                                                                    \n";
     cla24clg << "                 p_out,                                                                    \n";
     cla24clg << "                 // c_out,                                                                 \n";
     cla24clg << "                 carry,                                                                    \n";
     cla24clg << "                 p_in0,                                                                    \n";
     cla24clg << "                 g_in0,                                                                    \n";
     cla24clg << "                 p_in1,                                                                    \n";
     cla24clg << "                 g_in1,                                                                    \n";
     cla24clg << "                 p_in2,                                                                    \n";
     cla24clg << "                 g_in2,                                                                    \n";
     cla24clg << "                 p_in3,                                                                    \n";
     cla24clg << "                 g_in3,                                                                    \n";
     cla24clg << "                 c_in                                                                      \n";
     cla24clg << "                 ) ;                                                                       \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
     cla24clg << " parameter C_1 = 0 ;                                                                       \n";
     cla24clg << " parameter C_2 = 1 ;                                                                       \n";
     cla24clg << " parameter C_3 = 2 ;                                                                       \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " output                g_out ;                                                             \n";
     cla24clg << " output                p_out ;                                                             \n";
     cla24clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
     cla24clg << " // output                c_out ;                                                          \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " input                 p_in0 ;                                                             \n";
     cla24clg << " input                 g_in0 ;                                                             \n";
     cla24clg << " input                 p_in1 ;                                                             \n";
     cla24clg << " input                 g_in1 ;                                                             \n";
     cla24clg << " input                 p_in2 ;                                                             \n";
     cla24clg << " input                 g_in2 ;                                                             \n";
     cla24clg << " input                 p_in3 ;                                                             \n";
     cla24clg << " input                 g_in3 ;                                                             \n";
     cla24clg << " input                 c_in ;                                                              \n";
     cla24clg << " 	                                                                                         \n";
     cla24clg << " 	//                                                                                       \n";
     cla24clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
     cla24clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
     cla24clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " 	//g[0,24], p[0,24]                                                                       \n";
     cla24clg << " 	assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;       \n";
     cla24clg << " 	assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                                 \n";
     cla24clg << " 	// assign c_out = g_in3|(carry[C_3]&p_in3) ;                                             \n";
     cla24clg << "                                                                                           \n";
     cla24clg << " endmodule                                                                                 \n";                                                                        
     cla24clg.close();
}
void configurable_BFFT::CLA32(std::string string_in){
	 std::ofstream cla32;
     std::string        string_buf = "/CLA32.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla32.open(ss.str());
     cla32 << " `timescale 1 ns/1 ps                                  \n";
     cla32 << " module CLA32(sum,                                     \n";
     cla32 << "              c_out,                                   \n";
     cla32 << "              a_in,                                    \n";
     cla32 << "              b_in,                                    \n";
     cla32 << "              c_in                                     \n";
     cla32 << "              // rst_n,                                \n";
     cla32 << "              // clk                                   \n";
     cla32 << "              ) ;                                      \n";
     cla32 << " parameter CLA_WIDTH = 32 ;                            \n";
     cla32 << " parameter CA_WIDTH = 1 ;                              \n";
     cla32 << " parameter PG_WIDTH = 2 ;                              \n";
     cla32 << " //                                                    \n";
     cla32 << " parameter C_1 = 0 ;                                   \n";
     cla32 << " parameter C_2 = 1 ;                                   \n";
     cla32 << " //                                                    \n";
     cla32 << " parameter SEG_1 = 16 ;                                \n";
     cla32 << " parameter SEG_2 = 32 ;                                \n";
     cla32 << "                                                       \n";
     cla32 << "                                                       \n";
     cla32 << " output[CLA_WIDTH-1:0] sum ;                           \n";
     cla32 << " output                c_out ;                         \n";
     cla32 << "                                                       \n";
     cla32 << " input [CLA_WIDTH-1:0] a_in ;                          \n";
     cla32 << " input [CLA_WIDTH-1:0] b_in ;                          \n";
     cla32 << " input                 c_in ;                          \n";
     cla32 << " // input                 rst_n ;                      \n";
     cla32 << " // input                 clk ;                        \n";
     cla32 << "                                                       \n";
     cla32 << " wire  [PG_WIDTH-1:0]  g_wire ;                        \n";
     cla32 << " wire  [PG_WIDTH-1:0]  p_wire ;                        \n";
     cla32 << " wire  [CA_WIDTH-1:0]  carry ;                         \n";
     cla32 << "                                                       \n";
     cla32 << "                                                       \n";
     cla32 << "     //                                                \n";
     cla32 << "     CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),             \n";
     cla32 << "                     .g_out(g_wire[C_1]),              \n";
     cla32 << "                     .p_out(p_wire[C_1]),              \n";
     cla32 << "                     .a_in(a_in[SEG_1-1:0]),           \n";
     cla32 << "                     .b_in(b_in[SEG_1-1:0]),           \n";
     cla32 << "                     .c_in(c_in) // c0                 \n";
     cla32 << "                     // .rst_n(rst_n),                 \n";
     cla32 << "                     // .clk(clk)                      \n";
     cla32 << "                     ) ;                               \n";
     cla32 << "     //                                                \n";
     cla32 << "     CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),         \n";
     cla32 << "                     .g_out(g_wire[C_2]),              \n";
     cla32 << "                     .p_out(p_wire[C_2]),              \n";
     cla32 << "                     .a_in(a_in[SEG_2-1:SEG_1]),       \n";
     cla32 << "                     .b_in(b_in[SEG_2-1:SEG_1]),       \n";
     cla32 << "                     .c_in(carry[C_1]) // c16          \n";
     cla32 << "                     // .rst_n(rst_n),                 \n";
     cla32 << "                     // .clk(clk)                      \n";
     cla32 << "                     ) ;                               \n";
     cla32 << "                                                       \n";
     cla32 << "     //                                                \n";
     cla32 << "     CLA32clg u_CLA32clg(.c_out(c_out), // c32         \n";
     cla32 << "                         .carry(carry), // c16         \n";
     cla32 << "                         .p_in0(p_wire[C_1]),          \n";
     cla32 << "                         .g_in0(g_wire[C_1]),          \n";
     cla32 << "                         .p_in1(p_wire[C_2]),          \n";
     cla32 << "                         .g_in1(g_wire[C_2]),          \n";
     cla32 << "                         .c_in(c_in) // c0             \n";
     cla32 << "                          ) ;					      \n";
     cla32 << "                                                       \n";
     cla32 << " endmodule                                             \n"; 

	 cla32.close();	
}
void configurable_BFFT::CLA32clg(std::string string_in){
	 std::ofstream cla32clg;
     std::string        string_buf = "/CLA32clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla32clg.open(ss.str());	
     cla32clg << " `timescale 1 ns/1 ps                                \n";  
     cla32clg << " module CLA32clg(c_out,                              \n";
     cla32clg << "                 carry,                              \n";
     cla32clg << "                 p_in0,                              \n";
     cla32clg << "                 g_in0,                              \n";
     cla32clg << "                 p_in1,                              \n";
     cla32clg << "                 g_in1,                              \n";
     cla32clg << "                 c_in                                \n";
     cla32clg << "                 ) ;                                 \n";
     cla32clg << "                                                     \n";
     cla32clg << " parameter CA_WIDTH = 1 ;                            \n";
     cla32clg << " parameter C_1 = 0 ;                                 \n";
     cla32clg << "                                                     \n";
     cla32clg << " output                c_out ;                       \n";
     cla32clg << " output[CA_WIDTH-1:0]  carry ;                       \n";
     cla32clg << "                                                     \n";
     cla32clg << " input                 p_in0 ;                       \n";
     cla32clg << " input                 g_in0 ;                       \n";
     cla32clg << " input                 p_in1 ;                       \n";
     cla32clg << " input                 g_in1 ;                       \n";
     cla32clg << " input                 c_in ;                        \n";
     cla32clg << " 	                                                   \n";
     cla32clg << " 	//                                                 \n";
     cla32clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;           \n";
     cla32clg << "                                                     \n";
     cla32clg << " 	assign c_out = g_in1|(carry[C_1]&p_in1) ;          \n";
     cla32clg << " 	                                                   \n";
     cla32clg << "                                                     \n";
     cla32clg << " endmodule                                           \n";

	 cla32clg.close();
}
void configurable_BFFT::CLA64(std::string string_in){
	 std::ofstream cla64;
     std::string        string_buf = "/CLA64.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla64.open(ss.str());
     cla64 << " `timescale 1 ns/1 ps                                             \n";
     cla64 << " module CLA64(sum,                                                \n";
     cla64 << "              g_out,                                              \n";
     cla64 << "              p_out,                                              \n";
     cla64 << "              // c_out,                                           \n";
     cla64 << "              a_in,                                               \n";
     cla64 << "              b_in,                                               \n";
     cla64 << "              c_in                                                \n";
     cla64 << "              // rst_n,                                           \n";
     cla64 << "              // clk                                              \n";
     cla64 << "              ) ;                                                 \n";
     cla64 << " parameter CLA_WIDTH = 64 ;                                       \n";
     cla64 << " parameter CA_WIDTH = 3 ;                                         \n";
     cla64 << " parameter PG_WIDTH = 4 ;                                         \n";
     cla64 << " //                                                               \n";
     cla64 << " parameter C_1 = 0 ;                                              \n";
     cla64 << " parameter C_2 = 1 ;                                              \n";
     cla64 << " parameter C_3 = 2 ;                                              \n";
     cla64 << " parameter C_4 = 3 ;                                              \n";
     cla64 << " //                                                               \n";
     cla64 << " parameter SEG_1 = 16 ;                                           \n";
     cla64 << " parameter SEG_2 = 32 ;                                           \n";
     cla64 << " parameter SEG_3 = 48 ;                                           \n";
     cla64 << " parameter SEG_4 = 64 ;                                           \n";
     cla64 << "                                                                  \n";
     cla64 << "                                                                  \n";
     cla64 << " output[CLA_WIDTH-1:0] sum ;                                      \n";
     cla64 << " output                g_out ;                                    \n";
     cla64 << " output                p_out ;                                    \n";
     cla64 << " // output                c_out ;                                 \n";
     cla64 << "                                                                  \n";
     cla64 << " input [CLA_WIDTH-1:0] a_in ;                                     \n";
     cla64 << " input [CLA_WIDTH-1:0] b_in ;                                     \n";
     cla64 << " input                 c_in ;                                     \n";
     cla64 << " // input                 rst_n ;                                 \n";
     cla64 << " // input                 clk ;                                   \n";
     cla64 << "                                                                  \n";
     cla64 << " wire  [PG_WIDTH-1:0]  g_wire ;                                   \n";
     cla64 << " wire  [PG_WIDTH-1:0]  p_wire ;                                   \n";
     cla64 << " wire  [CA_WIDTH-1:0]  carry ;                                    \n";
     cla64 << "                                                                  \n";
     cla64 << " 	                                                             \n";
     cla64 << " 	//                                                           \n";
     cla64 << "     CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),                        \n";
     cla64 << "                     .g_out(g_wire[C_1]),                         \n";
     cla64 << "                     .p_out(p_wire[C_1]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_1-1:0]),                      \n";
     cla64 << "                     .b_in(b_in[SEG_1-1:0]),                      \n";
     cla64 << "                     .c_in(c_in) // c0                            \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),                    \n";
     cla64 << "                     .g_out(g_wire[C_2]),                         \n";
     cla64 << "                     .p_out(p_wire[C_2]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_2-1:SEG_1]),                  \n";
     cla64 << "                     .b_in(b_in[SEG_2-1:SEG_1]),                  \n";
     cla64 << "                     .c_in(carry[C_1]) // c16                     \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA16 u_CLA16_2(.sum(sum[SEG_3-1:SEG_2]),                    \n";
     cla64 << "                     .g_out(g_wire[C_3]),                         \n";
     cla64 << "                     .p_out(p_wire[C_3]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_3-1:SEG_2]),                  \n";
     cla64 << "                     .b_in(b_in[SEG_3-1:SEG_2]),                  \n";
     cla64 << "                     .c_in(carry[C_2]) // c32                     \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA16 u_CLA16_3(.sum(sum[SEG_4-1:SEG_3]),                    \n";
     cla64 << "                     .g_out(g_wire[C_4]),                         \n";
     cla64 << "                     .p_out(p_wire[C_4]),                         \n";
     cla64 << "                     .a_in(a_in[SEG_4-1:SEG_3]),                  \n";
     cla64 << "                     .b_in(b_in[SEG_4-1:SEG_3]),                  \n";
     cla64 << "                     .c_in(carry[C_3]) // c48                     \n";
     cla64 << "                     // .rst_n(rst_n),                            \n";
     cla64 << "                     // .clk(clk)                                 \n";
     cla64 << "                     ) ;                                          \n";
     cla64 << "     //                                                           \n";
     cla64 << "     CLA64clg u_CLA64clg(.g_out(g_out),                           \n";
     cla64 << "                         .p_out(p_out),                           \n";
     cla64 << "                         .carry(carry), // c16, c32, c48          \n";
     cla64 << "                         .p_in0(p_wire[C_1]),                     \n";
     cla64 << "                         .g_in0(g_wire[C_1]),                     \n";
     cla64 << "                         .p_in1(p_wire[C_2]),                     \n";
     cla64 << "                         .g_in1(g_wire[C_2]),                     \n";
     cla64 << "                         .p_in2(p_wire[C_3]),                     \n";
     cla64 << "                         .g_in2(g_wire[C_3]),                     \n";
     cla64 << "                         .p_in3(p_wire[C_4]),                     \n";
     cla64 << "                         .g_in3(g_wire[C_4]),                     \n";
     cla64 << "                         .c_in(c_in) // c0                        \n";
     cla64 << "                          ) ;					                 \n";
     cla64 << "                                                                  \n";
     cla64 << " endmodule                                                        \n";   

	 cla64.close();	
}
void configurable_BFFT::CLA64_co(std::string string_in){
	 std::ofstream cla64_co;
     std::string        string_buf = "/CLA64_co.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla64_co.open(ss.str());
     cla64_co << " `timescale 1 ns/1 ps                                           \n";
     cla64_co << " module CLA64_co(sum,                                           \n";
     cla64_co << "                 c_out,                                         \n";
     cla64_co << "                 a_in,                                          \n";
     cla64_co << "                 b_in,                                          \n";
     cla64_co << "                 c_in                                           \n";
     cla64_co << "                 // rst_n,                                      \n";
     cla64_co << "                 // clk                                         \n";
     cla64_co << "                 ) ;                                            \n";
     cla64_co << " parameter CLA_WIDTH = 64 ;                                     \n";
     cla64_co << " parameter CA_WIDTH = 3 ;                                       \n";
     cla64_co << " parameter PG_WIDTH = 4 ;                                       \n";
     cla64_co << " //                                                             \n";
     cla64_co << " parameter C_1 = 0 ;                                            \n";
     cla64_co << " parameter C_2 = 1 ;                                            \n";
     cla64_co << " parameter C_3 = 2 ;                                            \n";
     cla64_co << " parameter C_4 = 3 ;                                            \n";
     cla64_co << " //                                                             \n";
     cla64_co << " parameter SEG_1 = 16 ;                                         \n";
     cla64_co << " parameter SEG_2 = 32 ;                                         \n";
     cla64_co << " parameter SEG_3 = 48 ;                                         \n";
     cla64_co << " parameter SEG_4 = 64 ;                                         \n";
     cla64_co << "                                                                \n";
     cla64_co << "                                                                \n";
     cla64_co << " output[CLA_WIDTH-1:0] sum ;                                    \n";
     cla64_co << " output                c_out ;                                  \n";
     cla64_co << "                                                                \n";
     cla64_co << " input [CLA_WIDTH-1:0] a_in ;                                   \n";
     cla64_co << " input [CLA_WIDTH-1:0] b_in ;                                   \n";
     cla64_co << " input                 c_in ;                                   \n";
     cla64_co << " // input                 rst_n ;                               \n";
     cla64_co << " // input                 clk ;                                 \n";
     cla64_co << "                                                                \n";
     cla64_co << " wire  [PG_WIDTH-1:0]  g_wire ;                                 \n";
     cla64_co << " wire  [PG_WIDTH-1:0]  p_wire ;                                 \n";
     cla64_co << " wire  [CA_WIDTH-1:0]  carry ;                                  \n";
     cla64_co << "                                                                \n";
     cla64_co << " 	                                                              \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),                         \n";
     cla64_co << "                  .g_out(g_wire[C_1]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_1]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_1-1:0]),                       \n";
     cla64_co << "                  .b_in(b_in[SEG_1-1:0]),                       \n";
     cla64_co << "                  .c_in(c_in) // c0                             \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                   // .clk(clk)                                 \n";
     cla64_co << "                   ) ;                                          \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),                     \n";
     cla64_co << "                  .g_out(g_wire[C_2]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_2]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_2-1:SEG_1]),                   \n";
     cla64_co << "                  .b_in(b_in[SEG_2-1:SEG_1]),                   \n";
     cla64_co << "                  .c_in(carry[C_1]) // c16                      \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                  // .clk(clk)                                  \n";
     cla64_co << "                  ) ;                                           \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_2(.sum(sum[SEG_3-1:SEG_2]),                     \n";
     cla64_co << "                  .g_out(g_wire[C_3]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_3]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_3-1:SEG_2]),                   \n";
     cla64_co << "                  .b_in(b_in[SEG_3-1:SEG_2]),                   \n";
     cla64_co << "                  .c_in(carry[C_2]) // c32                      \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                  // .clk(clk)                                  \n";
     cla64_co << "                  ) ;                                           \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA16 u_CLA16_3(.sum(sum[SEG_4-1:SEG_3]),                     \n";
     cla64_co << "                  .g_out(g_wire[C_4]),                          \n";
     cla64_co << "                  .p_out(p_wire[C_4]),                          \n";
     cla64_co << "                  .a_in(a_in[SEG_4-1:SEG_3]),                   \n";
     cla64_co << "                  .b_in(b_in[SEG_4-1:SEG_3]),                   \n";
     cla64_co << "                  .c_in(carry[C_3]) // c48                      \n";
     cla64_co << " 					// .rst_n(rst_n),                             \n";
     cla64_co << "                  // .clk(clk)                                  \n";
     cla64_co << "                  ) ;                                           \n";
     cla64_co << " 	//                                                            \n";
     cla64_co << " 	CLA64clg_co u_CLA64clg_co(.c_out(c_out), // c64               \n";
     cla64_co << "                            .carry(carry), // c16, c32, c48     \n";
     cla64_co << "                            .p_in0(p_wire[C_1]),                \n";
     cla64_co << "                            .g_in0(g_wire[C_1]),                \n";
     cla64_co << "                            .p_in1(p_wire[C_2]),                \n";
     cla64_co << "                            .g_in1(g_wire[C_2]),                \n";
     cla64_co << "                            .p_in2(p_wire[C_3]),                \n";
     cla64_co << "                            .g_in2(g_wire[C_3]),                \n";
     cla64_co << "                            .p_in3(p_wire[C_4]),                \n";
     cla64_co << "                            .g_in3(g_wire[C_4]),                \n";
     cla64_co << "                            .c_in(c_in) // c0                   \n";
     cla64_co << "                             ) ;					              \n";
     cla64_co << "                                                                \n";
     cla64_co << " endmodule                                                      \n";
     cla64_co.close();	
}
void configurable_BFFT::CLA64clg(std::string string_in){
	 std::ofstream cla64clg;
     std::string        string_buf = "/CLA64clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla64clg.open(ss.str());	
     cla64clg << " `timescale 1 ns/1 ps                                                                      \n";
     cla64clg << " module CLA64clg(g_out,                                                                    \n";
     cla64clg << "                 p_out,                                                                    \n";
     cla64clg << "                 carry,                                                                    \n";
     cla64clg << "                 p_in0,                                                                    \n";
     cla64clg << "                 g_in0,                                                                    \n";
     cla64clg << "                 p_in1,                                                                    \n";
     cla64clg << "                 g_in1,                                                                    \n";
     cla64clg << "                 p_in2,                                                                    \n";
     cla64clg << "                 g_in2,                                                                    \n";
     cla64clg << "                 p_in3,                                                                    \n";
     cla64clg << "                 g_in3,                                                                    \n";
     cla64clg << "                 c_in                                                                      \n";
     cla64clg << "                 ) ;                                                                       \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
     cla64clg << " parameter C_1 = 0 ;                                                                       \n";
     cla64clg << " parameter C_2 = 1 ;                                                                       \n";
     cla64clg << " parameter C_3 = 2 ;                                                                       \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " output                g_out ;                                                             \n";
     cla64clg << " output                p_out ;                                                             \n";
     cla64clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " input                 p_in0 ;                                                             \n";
     cla64clg << " input                 g_in0 ;                                                             \n";
     cla64clg << " input                 p_in1 ;                                                             \n";
     cla64clg << " input                 g_in1 ;                                                             \n";
     cla64clg << " input                 p_in2 ;                                                             \n";
     cla64clg << " input                 g_in2 ;                                                             \n";
     cla64clg << " input                 p_in3 ;                                                             \n";
     cla64clg << " input                 g_in3 ;                                                             \n";
     cla64clg << " input                 c_in ;                                                              \n";
     cla64clg << " 	                                                                                         \n";
     cla64clg << " 	//                                                                                       \n";
     cla64clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
     cla64clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
     cla64clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " 	//                                                                                       \n";
     cla64clg << " 	assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;       \n";
     cla64clg << " 	assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                                 \n";
     cla64clg << "                                                                                           \n";
     cla64clg << " endmodule                                                                                 \n";
     cla64clg.close();	
}
void configurable_BFFT::CLA64clg_co(std::string string_in){
 	 std::ofstream cla64clg_co;
     std::string        string_buf = "/CLA64clg_co.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla64clg_co.open(ss.str());
     cla64clg_co << " `timescale 1 ns/1 ps                                                                     \n";
     cla64clg_co << " module CLA64clg_co(c_out,                                                                \n";
     cla64clg_co << "                 // g_out,                                                             \n";
     cla64clg_co << "                 // p_out,                                                               \n";
     cla64clg_co << "                    carry,                                                                \n";
     cla64clg_co << "                    p_in0,                                                                \n";
     cla64clg_co << "                    g_in0,                                                                \n";
     cla64clg_co << "                    p_in1,                                                                \n";
     cla64clg_co << "                    g_in1,                                                                \n";
     cla64clg_co << "                    p_in2,                                                                \n";
     cla64clg_co << "                    g_in2,                                                                \n";
     cla64clg_co << "                    p_in3,                                                                \n";
     cla64clg_co << "                    g_in3,                                                                \n";
     cla64clg_co << "                    c_in                                                                  \n";
     cla64clg_co << "                    ) ;                                                                   \n";
     cla64clg_co << "                                                                                       \n";
     cla64clg_co << " parameter CA_WIDTH = 3 ;                                                                 \n";
     cla64clg_co << " parameter C_1 = 0 ;                                                                      \n";
     cla64clg_co << " parameter C_2 = 1 ;                                                                      \n";
     cla64clg_co << " parameter C_3 = 2 ;                                                                      \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << " output                c_out ;                                                            \n";
     cla64clg_co << " // output                g_out ;                                                         \n";
     cla64clg_co << " // output                p_out ;                                                         \n";
     cla64clg_co << " output[CA_WIDTH-1:0]  carry ;                                                            \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << " input                 p_in0 ;                                                            \n";
     cla64clg_co << " input                 g_in0 ;                                                            \n";
     cla64clg_co << " input                 p_in1 ;                                                            \n";
     cla64clg_co << " input                 g_in1 ;                                                            \n";
     cla64clg_co << " input                 p_in2 ;                                                            \n";
     cla64clg_co << " input                 g_in2 ;                                                            \n";
     cla64clg_co << " input                 p_in3 ;                                                            \n";
     cla64clg_co << " input                 g_in3 ;                                                            \n";
     cla64clg_co << " input                 c_in ;                                                             \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << "   //                                                                                     \n";
     cla64clg_co << "   assign carry[C_1] = g_in0|(c_in&p_in0) ;                                               \n";
     cla64clg_co << "   assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                           \n";
     cla64clg_co << "   assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ; \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << "   //                                                                                     \n";
     cla64clg_co << "   // assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;  \n";
     cla64clg_co << "   // assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                            \n";
     cla64clg_co << "   assign c_out = g_in3|(carry[C_3]&p_in3) ;                                              \n";
     cla64clg_co << "                                                                                          \n";
     cla64clg_co << " endmodule                                                                                \n";


     cla64clg_co.close();     
}
void configurable_BFFT::CLA65(std::string string_in){
	 std::ofstream cla65;
     std::string        string_buf = "/CLA65.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla65.open(ss.str());
 cla65 << " `timescale 1 ns/1 ps                                                  \n";
 cla65 << " module CLA65(sum,                                                     \n";
 cla65 << " 		     c_out,                                                   \n";
 cla65 << "              a_in,                                                    \n";
 cla65 << "              b_in,                                                    \n";
 cla65 << "              c_in                                                     \n";
 cla65 << " 		     // rst_n,                                                \n";
 cla65 << "              // clk                                                   \n";
 cla65 << "              ) ;                                                      \n";
 cla65 << " parameter CLA_WIDTH = 65 ;                                            \n";
 cla65 << " parameter CA_WIDTH = 3 ;                                              \n";
 cla65 << " parameter PG_WIDTH = 4 ;                                              \n";
 cla65 << " //                                                                    \n";
 cla65 << " parameter C_1 = 0 ;                                                   \n";
 cla65 << " parameter C_2 = 1 ;                                                   \n";
 cla65 << " parameter C_3 = 2 ;                                                   \n";
 cla65 << " parameter C_4 = 3 ;                                                   \n";
 cla65 << " //                                                                    \n";
 cla65 << " parameter SEG_1 = 16 ;                                                \n";
 cla65 << " parameter SEG_2 = 32 ;                                                \n";
 cla65 << " parameter SEG_3 = 48 ;                                                \n";
 cla65 << " parameter SEG_4 = 64 ;                                                \n";
 cla65 << "                                                                       \n";
 cla65 << "                                                                       \n";
 cla65 << " output[CLA_WIDTH-1:0] sum ;                                           \n";
 cla65 << " output                c_out ;                                         \n";
 cla65 << "                                                                       \n";
 cla65 << " input [CLA_WIDTH-1:0] a_in ;                                          \n";
 cla65 << " input [CLA_WIDTH-1:0] b_in ;                                          \n";
 cla65 << " input                 c_in ;                                          \n";
 cla65 << " // input                 rst_n ;                                      \n";
 cla65 << " // input                 clk ;                                        \n";
 cla65 << "                                                                       \n";
 cla65 << " wire  [PG_WIDTH-1:0]  g_wire ;                                        \n";
 cla65 << " wire  [PG_WIDTH-1:0]  p_wire ;                                        \n";
 cla65 << " wire  [CA_WIDTH-1:0]  carry ;                                         \n";
 cla65 << "                                                                       \n";
 cla65 << " 	                                                                  \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_0(.sum(sum[SEG_1-1:0]),                             \n";
 cla65 << " 			        .g_out(g_wire[C_1]),                              \n";
 cla65 << "                     .p_out(p_wire[C_1]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_1-1:0]),                           \n";
 cla65 << "                     .b_in(b_in[SEG_1-1:0]),                           \n";
 cla65 << "                     .c_in(c_in) // c0                                 \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_1(.sum(sum[SEG_2-1:SEG_1]),                         \n";
 cla65 << " 			        .g_out(g_wire[C_2]),                              \n";
 cla65 << "                     .p_out(p_wire[C_2]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_2-1:SEG_1]),                       \n";
 cla65 << "                     .b_in(b_in[SEG_2-1:SEG_1]),                       \n";
 cla65 << "                     .c_in(carry[C_1]) // c16                          \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_2(.sum(sum[SEG_3-1:SEG_2]),                         \n";
 cla65 << " 			        .g_out(g_wire[C_3]),                              \n";
 cla65 << "                     .p_out(p_wire[C_3]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_3-1:SEG_2]),                       \n";
 cla65 << "                     .b_in(b_in[SEG_3-1:SEG_2]),                       \n";
 cla65 << "                     .c_in(carry[C_2]) // c32                          \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA16 u_CLA16_3(.sum(sum[SEG_4-1:SEG_3]),                         \n";
 cla65 << " 			        .g_out(g_wire[C_4]),                              \n";
 cla65 << "                     .p_out(p_wire[C_4]),                              \n";
 cla65 << "                     .a_in(a_in[SEG_4-1:SEG_3]),                       \n";
 cla65 << "                     .b_in(b_in[SEG_4-1:SEG_3]),                       \n";
 cla65 << "                     .c_in(carry[C_3]) // c48                          \n";
 cla65 << " 					// .rst_n(rst_n),                                 \n";
 cla65 << "                     // .clk(clk)                                      \n";
 cla65 << "                     ) ;                                               \n";
 cla65 << " 	//                                                                \n";
 cla65 << " 	CLA65clg u_CLA65clg(.sum(sum[SEG_4]),                             \n";
 cla65 << " 	                     .c_out(c_out), // c65                        \n";
 cla65 << "                          .carry(carry), // c16, c32, c48              \n";
 cla65 << "                          .p_in0(p_wire[C_1]),                         \n";
 cla65 << "                          .g_in0(g_wire[C_1]),                         \n";
 cla65 << "                          .p_in1(p_wire[C_2]),                         \n";
 cla65 << "                          .g_in1(g_wire[C_2]),                         \n";
 cla65 << "                          .p_in2(p_wire[C_3]),                         \n";
 cla65 << "                          .g_in2(g_wire[C_3]),                         \n";
 cla65 << "                          .p_in3(p_wire[C_4]),                         \n";
 cla65 << "                          .g_in3(g_wire[C_4]),                         \n";
 cla65 << " 						 .a_in(a_in[SEG_4]),                          \n";
 cla65 << " 						 .b_in(b_in[SEG_4]),                          \n";
 cla65 << "                          .c_in(c_in) // c0                            \n";
 cla65 << "                           ) ;					                      \n";
 cla65 << " 	                                                                  \n";
 cla65 << " endmodule                                                             \n";

     cla65.close();	 
}
void configurable_BFFT::CLA65clg(std::string string_in){
	 std::ofstream cla65clg;
     std::string        string_buf = "/CLA65clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla65clg.open(ss.str());		
 cla65clg << " `timescale 1 ns/1 ps                                                                      \n";
 cla65clg << " module CLA65clg(sum,                                                                      \n";
 cla65clg << "                 c_out,                                                                    \n";
 cla65clg << "                 carry,                                                                    \n";
 cla65clg << "                 p_in0,                                                                    \n";
 cla65clg << "                 g_in0,                                                                    \n";
 cla65clg << "                 p_in1,                                                                    \n";
 cla65clg << "                 g_in1,                                                                    \n";
 cla65clg << "                 p_in2,                                                                    \n";
 cla65clg << "                 g_in2,                                                                    \n";
 cla65clg << "                 p_in3,                                                                    \n";
 cla65clg << "                 g_in3,                                                                    \n";
 cla65clg << " 				a_in,                                                                        \n";
 cla65clg << " 				b_in,                                                                        \n";
 cla65clg << "                 c_in                                                                      \n";
 cla65clg << "                 ) ;                                                                       \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " parameter CA_WIDTH = 3 ;                                                                  \n";
 cla65clg << " parameter C_1 = 0 ;                                                                       \n";
 cla65clg << " parameter C_2 = 1 ;                                                                       \n";
 cla65clg << " parameter C_3 = 2 ;                                                                       \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " output                sum ;                                                               \n";
 cla65clg << " output                c_out ;                                                             \n";
 cla65clg << " output[CA_WIDTH-1:0]  carry ;                                                             \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " input                 p_in0 ;                                                             \n";
 cla65clg << " input                 g_in0 ;                                                             \n";
 cla65clg << " input                 p_in1 ;                                                             \n";
 cla65clg << " input                 g_in1 ;                                                             \n";
 cla65clg << " input                 p_in2 ;                                                             \n";
 cla65clg << " input                 g_in2 ;                                                             \n";
 cla65clg << " input                 p_in3 ;                                                             \n";
 cla65clg << " input                 g_in3 ;                                                             \n";
 cla65clg << " input                 a_in ;                                                              \n";
 cla65clg << " input                 b_in ;                                                              \n";
 cla65clg << " input                 c_in ;                                                              \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " wire                  g64_wire ;                                                          \n";
 cla65clg << " wire                  p64_wire ;                                                          \n";
 cla65clg << " wire                  c64_wire ;                                                          \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " 	//                                                                                       \n";
 cla65clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                 \n";
 cla65clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                             \n";
 cla65clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;   \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " 	//                                                                                       \n";
 cla65clg << " 	assign c64_wire = g_in3|(carry[C_3]&p_in3) ;                                             \n";
 cla65clg << "                                                                                           \n";
 cla65clg << " 	//generate g                                                                             \n";
 cla65clg << " 	assign g64_wire = a_in & b_in ;                                                          \n";
 cla65clg << " 	//propagate p                                                                            \n";
 cla65clg << " 	assign p64_wire = a_in ^ b_in ;                                                          \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " 	//SUM                                                                                    \n";
 cla65clg << " 	assign sum = a_in^b_in^c64_wire ;                                                        \n";
 cla65clg << " 	//Carry Output                                                                           \n";
 cla65clg << " 	assign c_out = g64_wire|(c64_wire&p64_wire) ;                                            \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " 	                                                                                         \n";
 cla65clg << " endmodule                                                                                 \n";	 
	 cla65clg.close();	
}
void configurable_BFFT::CLA96(std::string string_in){
	 std::ofstream cla96;
     std::string        string_buf = "/CLA96.v";
     std::stringstream  ss;
     ss << string_in << string_buf;   
	 cla96.open(ss.str());	
 cla96 << " `timescale 1 ns/1 ps                                         \n";
 cla96 << " module CLA96(sum,                                            \n";
 cla96 << " 			 c_out,                                          \n";
 cla96 << "              a_in,                                           \n";
 cla96 << "              b_in,                                           \n";
 cla96 << "              c_in                                            \n";
 cla96 << " 			 // rst_n,                                       \n";
 cla96 << "              // clk                                          \n";
 cla96 << "              ) ;                                             \n";
 cla96 << " 			                                                 \n";
 cla96 << " parameter CLA_WIDTH = 96 ;                                   \n";
 cla96 << " parameter CA_WIDTH = 3 ;                                     \n";
 cla96 << " parameter PG_WIDTH = 4 ;                                     \n";
 cla96 << " parameter C_1 = 0 ;                                          \n";
 cla96 << " parameter C_2 = 1 ;                                          \n";
 cla96 << " parameter C_3 = 2 ;                                          \n";
 cla96 << " parameter C_4 = 3 ;                                          \n";
 cla96 << " parameter SEG_1 = 24 ;                                       \n";
 cla96 << " parameter SEG_2 = 48 ;                                       \n";
 cla96 << " parameter SEG_3 = 72 ;                                       \n";
 cla96 << " parameter SEG_4 = 96 ;                                       \n";
 cla96 << "                                                              \n";
 cla96 << " output[CLA_WIDTH-1:0] sum ;                                  \n";
 cla96 << " output                c_out ;                                \n";
 cla96 << "                                                              \n";
 cla96 << " input [CLA_WIDTH-1:0] a_in ;                                 \n";
 cla96 << " input [CLA_WIDTH-1:0] b_in ;                                 \n";
 cla96 << " input                 c_in ;                                 \n";
 cla96 << " // input                 rst_n ;                             \n";
 cla96 << " // input                 clk ;                               \n";
 cla96 << "                                                              \n";
 cla96 << " wire  [PG_WIDTH-1:0]  g_wire ;                               \n";
 cla96 << " wire  [PG_WIDTH-1:0]  p_wire ;                               \n";
 cla96 << " wire  [CA_WIDTH-1:0]  carry ;                                \n";
 cla96 << "                                                              \n";
 cla96 << " 	//                                                       \n";
 cla96 << " 	CLA24 u_CLA24_0(.sum(sum[SEG_1-1:0]),                    \n";
 cla96 << "                     .g_out(g_wire[C_1]),                     \n";
 cla96 << "                     .p_out(p_wire[C_1]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_1-1:0]),                  \n";
 cla96 << "                     .b_in(b_in[SEG_1-1:0]),                  \n";
 cla96 << "                     .c_in(c_in) // c0                        \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << "     //                                                       \n";
 cla96 << " 	CLA24 u_CLA24_1(.sum(sum[SEG_2-1:SEG_1]),                \n";
 cla96 << "                     .g_out(g_wire[C_2]),                     \n";
 cla96 << "                     .p_out(p_wire[C_2]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_2-1:SEG_1]),              \n";
 cla96 << "                     .b_in(b_in[SEG_2-1:SEG_1]),              \n";
 cla96 << "                     .c_in(carry[C_1]) // c24                 \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << "     //                                                       \n";
 cla96 << " 	CLA24 u_CLA24_2(.sum(sum[SEG_3-1:SEG_2]),                \n";
 cla96 << "                     .g_out(g_wire[C_3]),                     \n";
 cla96 << "                     .p_out(p_wire[C_3]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_3-1:SEG_2]),              \n";
 cla96 << "                     .b_in(b_in[SEG_3-1:SEG_2]),              \n";
 cla96 << "                     .c_in(carry[C_2]) // c48                 \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << "     //                                                       \n";
 cla96 << " 	CLA24 u_CLA24_3(.sum(sum[SEG_4-1:SEG_3]),                \n";
 cla96 << "                     .g_out(g_wire[C_4]),                     \n";
 cla96 << "                     .p_out(p_wire[C_4]),                     \n";
 cla96 << "                     .a_in(a_in[SEG_4-1:SEG_3]),              \n";
 cla96 << "                     .b_in(b_in[SEG_4-1:SEG_3]),              \n";
 cla96 << "                     .c_in(carry[C_3]) // c72                 \n";
 cla96 << " 				    // .rst_n(rst_n),                        \n";
 cla96 << "                     // .clk(clk)                             \n";
 cla96 << "                     ) ;                                      \n";
 cla96 << " 	                                                         \n";
 cla96 << "                                                              \n";
 cla96 << " 	//                                                       \n";
 cla96 << " 	CLA96clg u_CLA96clg(.c_out(c_out),                       \n";
 cla96 << " 						.carry(carry), // c24, c48, c72      \n";
 cla96 << "                         .p_in0(p_wire[C_1]),                 \n";
 cla96 << "                         .g_in0(g_wire[C_1]),                 \n";
 cla96 << "                         .p_in1(p_wire[C_2]),                 \n";
 cla96 << "                         .g_in1(g_wire[C_2]),                 \n";
 cla96 << "                         .p_in2(p_wire[C_3]),                 \n";
 cla96 << "                         .g_in2(g_wire[C_3]),                 \n";
 cla96 << "                         .p_in3(p_wire[C_4]),                 \n";
 cla96 << "                         .g_in3(g_wire[C_4]),                 \n";
 cla96 << "                         .c_in(c_in) // c0                    \n";
 cla96 << "                         ) ;                                  \n";                                
 cla96 << "                                                              \n";
 cla96 << " endmodule                                                    \n";

     cla96.close();		
}
void configurable_BFFT::CLA96clg(std::string string_in){
	 std::ofstream cla96clg;
     std::string        string_buf = "/CLA96clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla96clg.open(ss.str());	
     cla96clg << " `timescale 1 ns/1 ps                                                                       \n";
     cla96clg << " module CLA96clg(c_out,                                                                     \n";
     cla96clg << " 				carry,                                                                        \n";
     cla96clg << "                 p_in0,                                                                     \n";
     cla96clg << "                 g_in0,                                                                     \n";
     cla96clg << "                 p_in1,                                                                     \n";
     cla96clg << "                 g_in1,                                                                     \n";
     cla96clg << "                 p_in2,                                                                     \n";
     cla96clg << "                 g_in2,                                                                     \n";
     cla96clg << "                 p_in3,                                                                     \n";
     cla96clg << "                 g_in3,                                                                     \n";
     cla96clg << "                 c_in                                                                       \n";
     cla96clg << "                 ) ;                                                                        \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " parameter CA_WIDTH = 3 ;                                                                   \n";
     cla96clg << " parameter C_1 = 0 ;                                                                        \n";
     cla96clg << " parameter C_2 = 1 ;                                                                        \n";
     cla96clg << " parameter C_3 = 2 ;                                                                        \n";
     cla96clg << "                                                                                            \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " output[CA_WIDTH-1:0]  carry ;                                                              \n";
     cla96clg << " output                c_out ;                                                              \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " input                 p_in0 ;                                                              \n";
     cla96clg << " input                 g_in0 ;                                                              \n";
     cla96clg << " input                 p_in1 ;                                                              \n";
     cla96clg << " input                 g_in1 ;                                                              \n";
     cla96clg << " input                 p_in2 ;                                                              \n";
     cla96clg << " input                 g_in2 ;                                                              \n";
     cla96clg << " input                 p_in3 ;                                                              \n";
     cla96clg << " input                 g_in3 ;                                                              \n";
     cla96clg << " input                 c_in ;                                                               \n";
     cla96clg << " 	                                                                                          \n";
     cla96clg << " 	//                                                                                        \n";
     cla96clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                  \n";
     cla96clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                              \n";
     cla96clg << " 	assign carry[C_3] = g_in2|(g_in1&p_in2)|(g_in0&p_in1&p_in2)|(c_in&p_in0&p_in1&p_in2) ;    \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " 	assign c_out = g_in3|(carry[C_3]&p_in3) ;                                                 \n";
     cla96clg << "                                                                                            \n";
     cla96clg << " endmodule                                                                                  \n";
         
	 cla96clg.close();	
}
void configurable_BFFT::CLA192(std::string string_in){
	 std::ofstream cla192;
     std::string        string_buf = "/CLA192.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla192.open(ss.str());	
 cla192 << " `timescale 1 ns/1 ps                                              \n";
 cla192 << " module CLA192(sum,                                                \n";
 cla192 << "               c_out,                                              \n";
 cla192 << "               a_in,                                               \n";
 cla192 << "               b_in,                                               \n";
 cla192 << "               c_in                                                \n";
 cla192 << " 			  // rst_n,                                            \n";
 cla192 << "               // clk                                              \n";
 cla192 << "               ) ;                                                 \n";
 cla192 << " parameter CLA_WIDTH = 192 ;                                       \n";
 cla192 << " parameter CA_WIDTH = 2 ;                                          \n";
 cla192 << " parameter PG_WIDTH = 3 ;                                          \n";
 cla192 << " //                                                                \n";
 cla192 << " parameter C_1 = 0 ;                                               \n";
 cla192 << " parameter C_2 = 1 ;                                               \n";
 cla192 << " parameter C_3 = 2 ;                                               \n";
 cla192 << " //                                                                \n";
 cla192 << " parameter SEG_1 = 64 ;                                            \n";
 cla192 << " parameter SEG_2 = 128 ;                                           \n";
 cla192 << " parameter SEG_3 = 192 ;                                           \n";
 cla192 << "                                                                   \n";
 cla192 << "                                                                   \n";
 cla192 << " output[CLA_WIDTH-1:0] sum ;                                       \n";
 cla192 << " output                c_out ;                                     \n";
 cla192 << "                                                                   \n";
 cla192 << "                                                                   \n";
 cla192 << " input [CLA_WIDTH-1:0] a_in ;                                      \n";
 cla192 << " input [CLA_WIDTH-1:0] b_in ;                                      \n";
 cla192 << " input                 c_in ;                                      \n";
 cla192 << " // input                 rst_n ;                                  \n";
 cla192 << " // input                 clk ;                                    \n";
 cla192 << "                                                                   \n";
 cla192 << " wire  [PG_WIDTH-1:0]  g_wire ;                                    \n";
 cla192 << " wire  [PG_WIDTH-1:0]  p_wire ;                                    \n";
 cla192 << " wire  [CA_WIDTH-1:0]  carry ;                                     \n";
 cla192 << " 	                                                               \n";
 cla192 << " 	                                                               \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA64 u_CLA64_0(.sum(sum[SEG_1-1:0]),                          \n";
 cla192 << " 			        .g_out(g_wire[C_1]),                           \n";
 cla192 << "                     .p_out(p_wire[C_1]),                          \n";
 cla192 << "                     .a_in(a_in[SEG_1-1:0]),                       \n";
 cla192 << "                     .b_in(b_in[SEG_1-1:0]),                       \n";
 cla192 << "                     .c_in(c_in) // c0                             \n";
 cla192 << " 					// .rst_n(rst_n),                              \n";
 cla192 << "                     // .clk(clk)                                  \n";
 cla192 << "                     ) ;                                           \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA64 u_CLA64_1(.sum(sum[SEG_2-1:SEG_1]),                      \n";
 cla192 << " 			        .g_out(g_wire[C_2]),                           \n";
 cla192 << "                     .p_out(p_wire[C_2]),                          \n";
 cla192 << "                     .a_in(a_in[SEG_2-1:SEG_1]),                   \n";
 cla192 << "                     .b_in(b_in[SEG_2-1:SEG_1]),                   \n";
 cla192 << "                     .c_in(carry[C_1]) // c64                      \n";
 cla192 << " 					// .rst_n(rst_n),                              \n";
 cla192 << "                     // .clk(clk)                                  \n";
 cla192 << "                     ) ;                                           \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA64 u_CLA64_2(.sum(sum[SEG_3-1:SEG_2]),                      \n";
 cla192 << " 			        .g_out(g_wire[C_3]),                           \n";
 cla192 << "                     .p_out(p_wire[C_3]),                          \n";
 cla192 << "                     .a_in(a_in[SEG_3-1:SEG_2]),                   \n";
 cla192 << "                     .b_in(b_in[SEG_3-1:SEG_2]),                   \n";
 cla192 << "                     .c_in(carry[C_2]) // c128                     \n";
 cla192 << " 					// .rst_n(rst_n),                              \n";
 cla192 << "                     // .clk(clk)                                  \n";
 cla192 << "                     ) ;                                           \n";
 cla192 << " 	                                                               \n";
 cla192 << " 	//                                                             \n";
 cla192 << " 	CLA192clg u_CLA192clg(.c_out(c_out),                           \n";
 cla192 << " 	                      // .g_out(g_out),                        \n";
 cla192 << " 						  // .p_out(p_out),                        \n";
 cla192 << "                           .carry(carry), // c64, c128             \n";
 cla192 << "                           .p_in0(p_wire[C_1]),                    \n";
 cla192 << "                           .g_in0(g_wire[C_1]),                    \n";
 cla192 << "                           .p_in1(p_wire[C_2]),                    \n";
 cla192 << "                           .g_in1(g_wire[C_2]),                    \n";
 cla192 << "                           .p_in2(p_wire[C_3]),                    \n";
 cla192 << "                           .g_in2(g_wire[C_3]),                    \n";
 cla192 << "                           .c_in(c_in) // c0                       \n";
 cla192 << "                            ) ;                                    \n";
 cla192 << "                                                                   \n";
 cla192 << " endmodule                                                         \n";
     	 cla192.close();	
}
void configurable_BFFT::CLA192clg(std::string string_in){
	 std::ofstream cla192clg;
     std::string        string_buf = "/CLA192clg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;        
	 cla192clg.open(ss.str());
 cla192clg << " `timescale 1 ns/1 ps                                                                        \n";
 cla192clg << " module CLA192clg(c_out,                                                                     \n";
 cla192clg << " 				 // g_out,                                                                  \n";
 cla192clg << " 				 // p_out,                                                                  \n";
 cla192clg << "                  carry,                                                                     \n";
 cla192clg << "                  p_in0,                                                                     \n";
 cla192clg << "                  g_in0,                                                                     \n";
 cla192clg << "                  p_in1,                                                                     \n";
 cla192clg << "                  g_in1,                                                                     \n";
 cla192clg << "                  p_in2,                                                                     \n";
 cla192clg << "                  g_in2,                                                                     \n";
 cla192clg << "                  c_in                                                                       \n";
 cla192clg << "                  ) ;                                                                        \n";
 cla192clg << "                                                                                             \n";
 cla192clg << " parameter CA_WIDTH = 2 ;                                                                    \n";
 cla192clg << " parameter C_1 = 0 ;                                                                         \n";
 cla192clg << " parameter C_2 = 1 ;                                                                         \n";
 cla192clg << "                                                                                             \n";
 cla192clg << " output                c_out ;                                                               \n";
 cla192clg << " // output                g_out ;                                                            \n";
 cla192clg << " // output                p_out ;                                                            \n";
 cla192clg << " output[CA_WIDTH-1:0]  carry ;                                                               \n";
 cla192clg << "                                                                                             \n";
 cla192clg << " input                 p_in0 ;                                                               \n";
 cla192clg << " input                 g_in0 ;                                                               \n";
 cla192clg << " input                 p_in1 ;                                                               \n";
 cla192clg << " input                 g_in1 ;                                                               \n";
 cla192clg << " input                 p_in2 ;                                                               \n";
 cla192clg << " input                 g_in2 ;                                                               \n";
 cla192clg << " input                 c_in ;                                                                \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " 	//                                                                                      \n";
 cla192clg << " 	assign carry[C_1] = g_in0|(c_in&p_in0) ;                                                \n";
 cla192clg << " 	assign carry[C_2] = g_in1|(g_in0&p_in1)|(c_in&p_in0&p_in1) ;                            \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " 	//                                                                                      \n";
 cla192clg << " 	// assign g_out = g_in3|(g_in2&p_in3)|(g_in1&p_in2&p_in3)|(g_in0&p_in1&p_in2&p_in3) ;   \n";
 cla192clg << " 	// assign p_out = p_in3&p_in2&p_in1&p_in0 ;                                             \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " 	assign c_out = g_in2|(carry[C_2]&p_in2) ;                                               \n";
 cla192clg << " 	                                                                                        \n";
 cla192clg << " endmodule                                                                                   \n";
     
     cla192clg.close();		
}
