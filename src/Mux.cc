#include <vector>
#include <iostream>
#include <fstream>
#include <math.h>
#include <sstream>
#include <NTL/ZZ.h>

#include "Mux.h"

using namespace NTL;

void Mux::gen(unsigned long addr_w,unsigned long radix,unsigned long CP_w,std::string string_in,ZZ inverse_N){
	 parameter_init(addr_w,CP_w); //init parameter
     r = radix;
     IN = inverse_N;
     if(r== 4){
		 TWIMux_r4(string_in);
         Mux1_r4(string_in);        
         Mux2_r4(string_in);        
         Mux3_r4(string_in);         
         Mux4_r4(string_in);
         Mux5_r4(string_in);
         Mux6_r4(string_in);
         MuxMA_r4(string_in);
         MuxROMA_r4(string_in);
     }
	 if(r==8){
		 TWIMux_r8(string_in);
         Mux1_r8(string_in);        
         Mux2_r8(string_in);        
         Mux3_r8(string_in);         
         Mux4_r8(string_in);
         Mux5_r8(string_in);
         Mux6_r8(string_in);		 
	 }
	 if(r==16)
	 {
		 TWIMux_r16(string_in);
         Mux1(string_in);
         Mux2(string_in);
         Mux3(string_in);
         Mux4(string_in);
		 Mux5_r16(string_in);
		 Mux6_r16(string_in);
     }
}

void Mux::parameter_init(unsigned long addr_w , unsigned long CP_w){
	 addr_width = addr_w;
     CP_width   = CP_w;
}
//radix-4
void Mux::TWIMux_r4(std::string string_in){
     std::ofstream twimux;
     std::string        string_buf = "/TWIMux.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twimux.open(ss.str());	
twimux << "//=============================================                 \n";
twimux << "//Data:2020/04/08                                               \n";
twimux << "//note:twiddle factor mux                                       \n";
twimux << "//writter:shi yong wu                                           \n";
twimux << "//=============================================                 \n";
twimux << "`timescale 1ns/10ps                                             \n";
twimux << "module TWIMux(                                                  \n";
twimux << "    TWIradix0,                                                  \n";
twimux << "    TWIradix1,                                                  \n";
twimux << "    TWIradix2,                                                  \n";
twimux << "    TWIradix3,                                                  \n";
twimux << "    b0radix0,                                                   \n";
twimux << "    b0radix1,                                                   \n";
twimux << "    b0radix2,                                                   \n";
twimux << "    b0radix3,                                                   \n";
twimux << "    b1radix0,                                                   \n";
twimux << "    b1radix1,                                                   \n";
twimux << "    b1radix2,                                                   \n";
twimux << "    b1radix3,                                                   \n";
twimux << "    BN_wire                                                     \n";
twimux << ");                                                              \n";
twimux << "                                                                \n";
twimux << "                                                                \n";
twimux << "parameter P_WIDTH = 64;                                         \n";
twimux << "                                                                \n";
twimux << "output [P_WIDTH-1:0] TWIradix0;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix1;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix2;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix3;                                 \n";
twimux << "                                                                \n";
twimux << "input               BN_wire;                                    \n";
twimux << "input [P_WIDTH-1:0] b0radix0;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix1;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix2;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix3;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix0;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix1;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix2;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix3;                                   \n";
twimux << "                                                                \n";
twimux << "                                                                \n";
twimux << "  assign TWIradix0 = (BN_wire == 1'b1) ? b1radix0 : b0radix0;   \n";
twimux << "  assign TWIradix1 = (BN_wire == 1'b1) ? b1radix1 : b0radix1;   \n";
twimux << "  assign TWIradix2 = (BN_wire == 1'b1) ? b1radix2 : b0radix2;   \n";
twimux << "  assign TWIradix3 = (BN_wire == 1'b1) ? b1radix3 : b0radix3;   \n";
twimux << "                                                                \n";
twimux << "endmodule 	                                                   \n";
	
     twimux.close();
}
void Mux::TWIMux_r8(std::string string_in){
     std::ofstream twimux;
     std::string        string_buf = "/TWIMux.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twimux.open(ss.str());	
twimux << "//=============================================                 \n";
twimux << "//Data:2020/04/08                                               \n";
twimux << "//note:twiddle factor mux                                       \n";
twimux << "//writter:shi yong wu                                           \n";
twimux << "//=============================================                 \n";
twimux << "`timescale 1ns/10ps                                             \n";
twimux << "module TWIMux(                                                  \n";
twimux << "    TWIradix0,                                                  \n";
twimux << "    TWIradix1,                                                  \n";
twimux << "    TWIradix2,                                                  \n";
twimux << "    TWIradix3,                                                  \n";
twimux << "    TWIradix4,                                                  \n";
twimux << "    TWIradix5,                                                  \n";
twimux << "    TWIradix6,                                                  \n";
twimux << "    TWIradix7,                                                  \n";
twimux << "    b0radix0,                                                   \n";
twimux << "    b0radix1,                                                   \n";
twimux << "    b0radix2,                                                   \n";
twimux << "    b0radix3,                                                   \n";
twimux << "    b0radix4,                                                   \n";
twimux << "    b0radix5,                                                   \n";
twimux << "    b0radix6,                                                   \n";
twimux << "    b0radix7,                                                   \n";
twimux << "    b1radix0,                                                   \n";
twimux << "    b1radix1,                                                   \n";
twimux << "    b1radix2,                                                   \n";
twimux << "    b1radix3,                                                   \n";
twimux << "    b1radix4,                                                   \n";
twimux << "    b1radix5,                                                   \n";
twimux << "    b1radix6,                                                   \n";
twimux << "    b1radix7,                                                   \n";
twimux << "    BN_wire                                                     \n";
twimux << ");                                                              \n";
twimux << "                                                                \n";
twimux << "                                                                \n";
twimux << "parameter P_WIDTH = 64;                                         \n";
twimux << "                                                                \n";
twimux << "output [P_WIDTH-1:0] TWIradix0;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix1;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix2;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix3;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix4;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix5;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix6;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix7;                                 \n";
twimux << "                                                                \n";
twimux << "input               BN_wire;                                    \n";
twimux << "input [P_WIDTH-1:0] b0radix0;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix1;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix2;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix3;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix4;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix5;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix6;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix7;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix0;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix1;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix2;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix3;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix4;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix5;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix6;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix7;                                   \n";
twimux << "                                                                \n";
twimux << "                                                                \n";
twimux << "  assign TWIradix0 = (BN_wire == 1'b1) ? b1radix0 : b0radix0;   \n";
twimux << "  assign TWIradix1 = (BN_wire == 1'b1) ? b1radix1 : b0radix1;   \n";
twimux << "  assign TWIradix2 = (BN_wire == 1'b1) ? b1radix2 : b0radix2;   \n";
twimux << "  assign TWIradix3 = (BN_wire == 1'b1) ? b1radix3 : b0radix3;   \n";
twimux << "  assign TWIradix4 = (BN_wire == 1'b1) ? b1radix4 : b0radix4;   \n";
twimux << "  assign TWIradix5 = (BN_wire == 1'b1) ? b1radix5 : b0radix5;   \n";
twimux << "  assign TWIradix6 = (BN_wire == 1'b1) ? b1radix6 : b0radix6;   \n";
twimux << "  assign TWIradix7 = (BN_wire == 1'b1) ? b1radix7 : b0radix7;   \n";
twimux << "                                                                \n";
twimux << "endmodule 	                                                   \n";
	
     twimux.close();
}
void Mux::TWIMux_r16(std::string string_in){
     std::ofstream twimux;
     std::string        string_buf = "/TWIMux.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     twimux.open(ss.str());	
twimux << "//=============================================                 \n";
twimux << "//Data:2020/04/08                                               \n";
twimux << "//note:twiddle factor mux                                       \n";
twimux << "//writter:shi yong wu                                           \n";
twimux << "//=============================================                 \n";
twimux << "`timescale 1ns/10ps                                             \n";
twimux << "module TWIMux(                                                  \n";
twimux << "    TWIradix0,                                                  \n";
twimux << "    TWIradix1,                                                  \n";
twimux << "    TWIradix2,                                                  \n";
twimux << "    TWIradix3,                                                  \n";
twimux << "    TWIradix4,                                                  \n";
twimux << "    TWIradix5,                                                  \n";
twimux << "    TWIradix6,                                                  \n";
twimux << "    TWIradix7,                                                  \n";
twimux << "    TWIradix8,                                                  \n";
twimux << "    TWIradix9,                                                  \n";
twimux << "    TWIradix10,                                                  \n";
twimux << "    TWIradix11,                                                  \n";
twimux << "    TWIradix12,                                                  \n";
twimux << "    TWIradix13,                                                  \n";
twimux << "    TWIradix14,                                                  \n";
twimux << "    TWIradix15,                                                  \n";
twimux << "    b0radix0,                                                   \n";
twimux << "    b0radix1,                                                   \n";
twimux << "    b0radix2,                                                   \n";
twimux << "    b0radix3,                                                   \n";
twimux << "    b0radix4,                                                   \n";
twimux << "    b0radix5,                                                   \n";
twimux << "    b0radix6,                                                   \n";
twimux << "    b0radix7,                                                   \n";
twimux << "    b0radix8,                                                   \n";
twimux << "    b0radix9,                                                   \n";
twimux << "    b0radix10,                                                   \n";
twimux << "    b0radix11,                                                   \n";
twimux << "    b0radix12,                                                   \n";
twimux << "    b0radix13,                                                   \n";
twimux << "    b0radix14,                                                   \n";
twimux << "    b0radix15,                                                   \n";
twimux << "    b1radix0,                                                   \n";
twimux << "    b1radix1,                                                   \n";
twimux << "    b1radix2,                                                   \n";
twimux << "    b1radix3,                                                   \n";
twimux << "    b1radix4,                                                   \n";
twimux << "    b1radix5,                                                   \n";
twimux << "    b1radix6,                                                   \n";
twimux << "    b1radix7,                                                   \n";
twimux << "    b1radix8,                                                   \n";
twimux << "    b1radix9,                                                   \n";
twimux << "    b1radix10,                                                   \n";
twimux << "    b1radix11,                                                   \n";
twimux << "    b1radix12,                                                   \n";
twimux << "    b1radix13,                                                   \n";
twimux << "    b1radix14,                                                   \n";
twimux << "    b1radix15,                                                   \n";
twimux << "    BN_wire                                                     \n";
twimux << ");                                                              \n";
twimux << "                                                                \n";
twimux << "                                                                \n";
twimux << "parameter P_WIDTH = 64;                                         \n";
twimux << "                                                                \n";
twimux << "output [P_WIDTH-1:0] TWIradix0;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix1;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix2;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix3;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix4;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix5;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix6;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix7;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix8;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix9;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix10;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix11;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix12;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix13;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix14;                                 \n";
twimux << "output [P_WIDTH-1:0] TWIradix15;                                 \n";
twimux << "                                                                \n";
twimux << "input               BN_wire;                                    \n";
twimux << "input [P_WIDTH-1:0] b0radix0;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix1;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix2;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix3;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix4;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix5;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix6;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix7;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix8;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix9;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix10;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix11;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix12;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix13;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix14;                                   \n";
twimux << "input [P_WIDTH-1:0] b0radix15;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix0;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix1;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix2;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix3;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix4;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix5;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix6;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix7;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix8;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix9;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix10;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix11;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix12;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix13;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix14;                                   \n";
twimux << "input [P_WIDTH-1:0] b1radix15;                                   \n";
twimux << "                                                                \n";
twimux << "                                                                \n";
twimux << "  assign TWIradix0  = (BN_wire == 1'b1) ? b1radix0  : b0radix0;    \n";
twimux << "  assign TWIradix1  = (BN_wire == 1'b1) ? b1radix1  : b0radix1;    \n";
twimux << "  assign TWIradix2  = (BN_wire == 1'b1) ? b1radix2  : b0radix2;    \n";
twimux << "  assign TWIradix3  = (BN_wire == 1'b1) ? b1radix3  : b0radix3;    \n";
twimux << "  assign TWIradix4  = (BN_wire == 1'b1) ? b1radix4  : b0radix4;    \n";
twimux << "  assign TWIradix5  = (BN_wire == 1'b1) ? b1radix5  : b0radix5;    \n";
twimux << "  assign TWIradix6  = (BN_wire == 1'b1) ? b1radix6  : b0radix6;    \n";
twimux << "  assign TWIradix7  = (BN_wire == 1'b1) ? b1radix7  : b0radix7;    \n";
twimux << "  assign TWIradix8  = (BN_wire == 1'b1) ? b1radix8  : b0radix8;    \n";
twimux << "  assign TWIradix9  = (BN_wire == 1'b1) ? b1radix9  : b0radix9;    \n";
twimux << "  assign TWIradix10 = (BN_wire == 1'b1) ? b1radix10 : b0radix10;   \n";
twimux << "  assign TWIradix11 = (BN_wire == 1'b1) ? b1radix11 : b0radix11;   \n";
twimux << "  assign TWIradix12 = (BN_wire == 1'b1) ? b1radix12 : b0radix12;   \n";
twimux << "  assign TWIradix13 = (BN_wire == 1'b1) ? b1radix13 : b0radix13;   \n";
twimux << "  assign TWIradix14 = (BN_wire == 1'b1) ? b1radix14 : b0radix14;   \n";
twimux << "  assign TWIradix15 = (BN_wire == 1'b1) ? b1radix15 : b0radix15;   \n";
twimux << "                                                                \n";
twimux << "endmodule 	                                                   \n";
	
     twimux.close();
}
void Mux::Mux1_r4(std::string string_in){
	 std::ofstream mux1_r4;
     std::string        string_buf = "/Mux1.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux1_r4.open(ss.str());  
 mux1_r4 << " `timescale 1 ns/1 ps                                                                           \n";
 mux1_r4 << " module Mux1(BN0_MEM0_Dout,                                                                     \n";
 mux1_r4 << " 			BN0_MEM1_Dout,                                                                       \n";
 mux1_r4 << " 			BN1_MEM0_Dout,                                                                       \n";
 mux1_r4 << " 			BN1_MEM1_Dout,                                                                       \n";
 mux1_r4 << " 			MA0_out,                                                                             \n";
 mux1_r4 << " 			MA1_out,                                                                             \n";
 mux1_r4 << " 		    ExtB0_D0_in,                                                                         \n";
 mux1_r4 << " 			ExtB0_D1_in,                                                                         \n";
 mux1_r4 << " 			ExtB0_D2_in,                                                                         \n";
 mux1_r4 << " 			ExtB0_D3_in,                                                                         \n";
 mux1_r4 << " 			ExtB1_D0_in,                                                                         \n";
 mux1_r4 << " 			ExtB1_D1_in,                                                                         \n";
 mux1_r4 << "             ExtB1_D2_in,                                                                       \n";
 mux1_r4 << " 			ExtB1_D3_in,                                                                         \n";
 mux1_r4 << " 			RDC_in0,                                                                             \n";
 mux1_r4 << " 			RDC_in1,                                                                             \n";
 mux1_r4 << " 			RDC_in2,                                                                             \n";
 mux1_r4 << " 			RDC_in3,                                                                             \n";
 mux1_r4 << " 			ExtMA_in,                                                                            \n";
 mux1_r4 << " 			AGUMA_in,                                                                            \n";
 mux1_r4 << " 			WMA_in,                                                                              \n";
 mux1_r4 << " 			wen0_in,                                                                             \n";
 mux1_r4 << " 			wen1_in,                                                                             \n";
 mux1_r4 << " 			SD_sel                                                                               \n";
 mux1_r4 << " 			) ;                                                                                  \n";
 mux1_r4 << " 			                                                                                     \n";
 mux1_r4 << " 			                                                                                     \n";
 mux1_r4 << " parameter SD_WIDTH  = 128 ;                                                                    \n";
 mux1_r4 << " parameter P_WIDTH   = 64 ;                                                                     \n";
 mux1_r4 << " parameter A_WIDTH   = " << addr_width << ";                                                        \n";
 mux1_r4 << "                                                                                                \n";
 mux1_r4 << " parameter P_ZERO   = 64'h0 ;                                                                   \n";
 mux1_r4 << "                                                                                                \n";
 mux1_r4 << "                                                                                                \n";
 mux1_r4 << " output [SD_WIDTH-1:0] BN0_MEM0_Dout ;                                                          \n";
 mux1_r4 << " output [SD_WIDTH-1:0] BN0_MEM1_Dout ;                                                          \n";
 mux1_r4 << " output [SD_WIDTH-1:0] BN1_MEM0_Dout ;                                                          \n";
 mux1_r4 << " output [SD_WIDTH-1:0] BN1_MEM1_Dout ;                                                          \n";
 mux1_r4 << " output [A_WIDTH-1:0]  MA0_out ;                                                                \n";
 mux1_r4 << " output [A_WIDTH-1:0]  MA1_out ;                                                                \n";
 mux1_r4 << "                                                                                                \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB0_D0_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB0_D1_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB0_D2_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB0_D3_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB1_D0_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB1_D1_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB1_D2_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  ExtB1_D3_in ;                                                            \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  RDC_in0 ;                                                                \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  RDC_in1 ;                                                                \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  RDC_in2 ;                                                                \n";
 mux1_r4 << " input  [P_WIDTH-1:0]  RDC_in3 ;                                                                \n";
 mux1_r4 << " input  [A_WIDTH-1:0]  ExtMA_in ;                                                               \n";
 mux1_r4 << " input  [A_WIDTH-1:0]  AGUMA_in ;                                                               \n";
 mux1_r4 << " input  [A_WIDTH-1:0]  WMA_in ;                                                                 \n";
 mux1_r4 << " input                 wen0_in ;                                                                \n";
 mux1_r4 << " input                 wen1_in ;                                                                \n";
 mux1_r4 << " input                 SD_sel ;                                                                 \n";
 mux1_r4 << "                                                                                                \n";
 mux1_r4 << "                                                                                                \n";
 mux1_r4 << "                                                                                                \n";
 mux1_r4 << " 	// Bank0 for op0 and op1                                                                     \n";
 mux1_r4 << " 	assign BN0_MEM0_Dout = (SD_sel==1'b1)? ({ExtB0_D0_in,ExtB0_D1_in}) : ({RDC_in0,RDC_in1}) ;   \n";
 mux1_r4 << " 	// Bank0 for op2 and op3                                                                     \n";
 mux1_r4 << " 	assign BN0_MEM1_Dout = (SD_sel==1'b1)? ({ExtB0_D2_in,ExtB0_D3_in}) : ({RDC_in2,RDC_in3}) ;   \n";
 mux1_r4 << " 	// Bank1 for op0 and op1                                                                     \n";
 mux1_r4 << " 	assign BN1_MEM0_Dout = (SD_sel==1'b1)? ({ExtB1_D0_in,ExtB1_D1_in}) : ({RDC_in0,RDC_in1}) ;   \n";
 mux1_r4 << " 	// Bank1 for op2 and op3                                                                     \n";
 mux1_r4 << " 	assign BN1_MEM1_Dout = (SD_sel==1'b1)? ({ExtB1_D2_in,ExtB1_D3_in}) : ({RDC_in2,RDC_in3}) ;   \n";
 mux1_r4 << " 	                                                                                             \n";
 mux1_r4 << " 	//                                                                                           \n";
 mux1_r4 << " 	assign MA0_out = (SD_sel==1'b1)? ExtMA_in :                                                  \n";
 mux1_r4 << " 					 (wen0_in==1'b1)? AGUMA_in : WMA_in ;                                        \n";
 mux1_r4 << " 					                                                                             \n";
 mux1_r4 << " 	//                                                                                           \n";
 mux1_r4 << " 	assign MA1_out = (SD_sel==1'b1)? ExtMA_in :                                                  \n";
 mux1_r4 << " 					 (wen1_in==1'b1)? AGUMA_in : WMA_in ;                                        \n";
 mux1_r4 << " 					                                                                             \n";
 mux1_r4 << " 	                                                                                             \n";
 mux1_r4 << " endmodule                                                                                      \n";               
     mux1_r4.close();     
}    
void Mux::Mux2_r4(std::string string_in){
	 std::ofstream mux2_r4;
     std::string        string_buf = "/Mux2.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux2_r4.open(ss.str());
 mux2_r4 << " //==================================================                                         \n";
 mux2_r4 << " //                                                                      \n";
 mux2_r4 << " //                                                                       \n";
 mux2_r4 << " //Note       : Mux2 for Radix-4 datain                                                       \n";
 mux2_r4 << " //==================================================                                         \n";
 mux2_r4 << " `timescale 1 ns/1 ps                                                                         \n";
 mux2_r4 << " module Mux2(RA0_out,                                                                         \n";
 mux2_r4 << " 			RA1_out,                                                                           \n";
 mux2_r4 << " 			RA2_out,                                                                           \n";
 mux2_r4 << " 			RA3_out,                                                                           \n";
 mux2_r4 << " 		    BN0_MEM0_in,                                                                       \n";
 mux2_r4 << " 			BN0_MEM1_in,                                                                       \n";
 mux2_r4 << " 			BN1_MEM0_in,                                                                       \n";
 mux2_r4 << " 			BN1_MEM1_in,                                                                       \n";
 mux2_r4 << " 			BN_sel                                                                             \n";
 mux2_r4 << " 			) ;                                                                                \n";
 mux2_r4 << " 			                                                                                   \n";
 mux2_r4 << " 			                                                                                   \n";
 mux2_r4 << " parameter SD_WIDTH  = 128 ;                                                                  \n";
 mux2_r4 << " parameter P_WIDTH   = 64 ;                                                                   \n";
 mux2_r4 << " parameter SEG1      = 64 ;                                                                   \n";
 mux2_r4 << " parameter SEG2      = 128 ;                                                                  \n";
 mux2_r4 << "                                                                                              \n";
 mux2_r4 << "                                                                                              \n";
 mux2_r4 << " output [P_WIDTH-1:0] RA0_out ;                                                               \n";
 mux2_r4 << " output [P_WIDTH-1:0] RA1_out ;                                                               \n";
 mux2_r4 << " output [P_WIDTH-1:0] RA2_out ;                                                               \n";
 mux2_r4 << " output [P_WIDTH-1:0] RA3_out ;                                                               \n";
 mux2_r4 << "                                                                                              \n";
 mux2_r4 << " input [SD_WIDTH-1:0] BN0_MEM0_in ;                                                           \n";
 mux2_r4 << " input [SD_WIDTH-1:0] BN0_MEM1_in ;                                                           \n";
 mux2_r4 << " input [SD_WIDTH-1:0] BN1_MEM0_in ;                                                           \n";
 mux2_r4 << " input [SD_WIDTH-1:0] BN1_MEM1_in ;                                                           \n";
 mux2_r4 << " input                BN_sel ;                                                                \n";
 mux2_r4 << "                                                                                              \n";
 mux2_r4 << "                                                                                              \n";
 mux2_r4 << "                                                                                              \n";
 mux2_r4 << " 	// Radix-4 op_0                                                                            \n";
 mux2_r4 << " 	assign RA0_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG2-1:SEG1]) : (BN0_MEM0_in[SEG2-1:SEG1]) ; \n";
 mux2_r4 << " 	// Radix-4 op_1                                                                            \n";
 mux2_r4 << " 	assign RA1_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG1-1:0]) : (BN0_MEM0_in[SEG1-1:0]) ;       \n";
 mux2_r4 << " 	// Radix-4 op_2                                                                            \n";
 mux2_r4 << " 	assign RA2_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG2-1:SEG1]) : (BN0_MEM1_in[SEG2-1:SEG1]) ; \n";
 mux2_r4 << " 	// Radix-4 op_3                                                                            \n";
 mux2_r4 << " 	assign RA3_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG1-1:0]) : (BN0_MEM1_in[SEG1-1:0]) ;       \n";
 mux2_r4 << " 	                                                                                           \n";
 mux2_r4 << "                                                                                              \n";
 mux2_r4 << " endmodule                                                                                    \n"; 
     mux2_r4.close();     
}   
     
void Mux::Mux3_r4(std::string string_in){
	 std::ofstream mux3_r4;
     std::string        string_buf = "/Mux3.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux3_r4.open(ss.str());
 mux3_r4 << " `timescale 1 ns/1 ps                                                                  \n";
 mux3_r4 << " module Mux3(MulB0_out,                                                                \n";
 mux3_r4 << " 			MulB1_out,                                                                  \n";
 mux3_r4 << " 			MulB2_out,                                                                  \n";
 mux3_r4 << " 			MulB3_out,                                                                  \n";
 mux3_r4 << " 			MulA1_out,                                                                  \n";
 mux3_r4 << " 			MulA3_out,                                                                  \n";
 mux3_r4 << " 			IFFTROMD0_in,                                                               \n";
 mux3_r4 << " 			IFFTROMD1_in,                                                               \n";
 mux3_r4 << "             ROMD0_in,                                                                 \n";
 mux3_r4 << " 			ROMD1_in,                                                                   \n";
 mux3_r4 << " 		    FFTBD0_in,                                                                  \n";
 mux3_r4 << " 			FFTBD1_in,                                                                  \n";
 mux3_r4 << " 			FFTBD2_in,                                                                  \n";
 mux3_r4 << " 			FFTBD3_in,                                                                  \n";
 mux3_r4 << " 			RA1D_in,                                                                    \n";
 mux3_r4 << " 			RA3D_in,                                                                    \n";
 mux3_r4 << " 			Mul_sel,                                                                    \n";
 mux3_r4 << " 			mode_sel                                                                    \n";
 mux3_r4 << " 			) ;                                                                         \n";
 mux3_r4 << " 			                                                                            \n";
 mux3_r4 << " parameter P_WIDTH   = 64 ;                                                            \n";
 mux3_r4 << " parameter SD_WIDTH  = 128 ;                                                           \n";
 mux3_r4 << " parameter SEG1  = 64 ;                                                                \n";
 mux3_r4 << " parameter SEG2  = 128 ;                                                               \n";
 mux3_r4 << "                                                                                       \n";
 mux3_r4 << " parameter P_ONE   = 64'd1 ;                                                           \n";
 mux3_r4 << " parameter PINV    = 64'd" << IN <<"; // inverse N                              \n";
 mux3_r4 << "                                                                                       \n";
 mux3_r4 << " output [P_WIDTH-1:0] MulB0_out ;                                                      \n";
 mux3_r4 << " output [P_WIDTH-1:0] MulB1_out ;                                                      \n";
 mux3_r4 << " output [P_WIDTH-1:0] MulB2_out ;                                                      \n";
 mux3_r4 << " output [P_WIDTH-1:0] MulB3_out ;                                                      \n";
 mux3_r4 << " output [P_WIDTH-1:0] MulA1_out ;                                                      \n";
 mux3_r4 << " output [P_WIDTH-1:0] MulA3_out ;                                                      \n";
 mux3_r4 << "                                                                                       \n";
 mux3_r4 << " input [P_WIDTH-1:0]  IFFTROMD0_in ;                                                   \n";
 mux3_r4 << " input [SD_WIDTH-1:0] IFFTROMD1_in ;                                                   \n";
 mux3_r4 << " input [P_WIDTH-1:0]  ROMD0_in ;                                                       \n";
 mux3_r4 << " input [SD_WIDTH-1:0] ROMD1_in ;                                                       \n";
 mux3_r4 << " input [P_WIDTH-1:0]  FFTBD0_in ;                                                      \n";
 mux3_r4 << " input [P_WIDTH-1:0]  FFTBD1_in ;                                                      \n";
 mux3_r4 << " input [P_WIDTH-1:0]  FFTBD2_in ;                                                      \n";
 mux3_r4 << " input [P_WIDTH-1:0]  FFTBD3_in ;                                                      \n";
 mux3_r4 << " input [P_WIDTH-1:0]  RA1D_in ;                                                        \n";
 mux3_r4 << " input [P_WIDTH-1:0]  RA3D_in ;                                                        \n";
 mux3_r4 << " input [1:0]          Mul_sel ;                                                        \n";
 mux3_r4 << " input                mode_sel ;                                                       \n";
 mux3_r4 << "                                                                                       \n";
 mux3_r4 << "                                                                                       \n";
 mux3_r4 << "                                                                                       \n";
 mux3_r4 << " 	//                                                                                  \n";
 mux3_r4 << " 	assign MulB0_out = (Mul_sel==2'd1)? P_ONE :                                         \n";
 mux3_r4 << " 					   (Mul_sel==2'd2)? FFTBD0_in :                                     \n";
 mux3_r4 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;                                  \n";
 mux3_r4 << " 	//                                                                                  \n";
 mux3_r4 << " 	assign MulB1_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD0_in :                  \n";
 mux3_r4 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD0_in :              \n";
 mux3_r4 << " 					   (Mul_sel==2'd2)? FFTBD1_in :                                     \n";
 mux3_r4 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;                                  \n";
 mux3_r4 << " 	//                                                                                  \n";
 mux3_r4 << " 	assign MulB2_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG2-1:SEG1] :     \n";
 mux3_r4 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG2-1:SEG1] : \n";
 mux3_r4 << " 					   (Mul_sel==2'd2)? FFTBD2_in :                                     \n";
 mux3_r4 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r4 << " 	//                                                                                  \n";
 mux3_r4 << " 	assign MulB3_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG1-1:0] :        \n";
 mux3_r4 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG1-1:0] :    \n";
 mux3_r4 << " 					   (Mul_sel==2'd2)? FFTBD3_in :                                     \n";
 mux3_r4 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r4 << " 					                                                                    \n";
 mux3_r4 << "     // change RA output position in IFFT                                              \n";
 mux3_r4 << " 	assign MulA1_out = (mode_sel==1'b1)? RA3D_in : RA1D_in ;                            \n";
 mux3_r4 << " 	//                                                                                  \n";
 mux3_r4 << " 	assign MulA3_out = (mode_sel==1'b1)? RA1D_in : RA3D_in ;                            \n";
 mux3_r4 << " 	                                                                                    \n";
 mux3_r4 << "                                                                                       \n";
 mux3_r4 << " 	                                                                                    \n";
 mux3_r4 << " endmodule                                                                             \n";
     mux3_r4.close();    
}  
       
void Mux::Mux4_r4(std::string string_in){
	 std::ofstream mux4_r4;
     std::string        string_buf = "/Mux4.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux4_r4.open(ss.str());
 mux4_r4 << " `timescale 1 ns/1 ps                                           \n";
 mux4_r4 << " module Mux4(CRUD0_out,                                         \n";
 mux4_r4 << " 			CRUD1_out,                                           \n";
 mux4_r4 << " 			CRUD2_out,                                           \n";
 mux4_r4 << " 			CRUD3_out,                                           \n";
 mux4_r4 << " 			IFFTD0_in,                                           \n";
 mux4_r4 << "             IFFTD1_in,                                         \n";
 mux4_r4 << "             IFFTD2_in,                                         \n";
 mux4_r4 << "             IFFTD3_in,                                         \n";
 mux4_r4 << " 			m2_sel                                               \n";
 mux4_r4 << " 			) ;                                                  \n";
 mux4_r4 << " 			                                                     \n";
 mux4_r4 << " parameter P_WIDTH   = 64 ;                                     \n";
 mux4_r4 << " parameter P_ZERO    = 64'h0 ;                                  \n";
 mux4_r4 << "                                                                \n";
 mux4_r4 << " output [P_WIDTH-1:0] CRUD0_out ;                               \n";
 mux4_r4 << " output [P_WIDTH-1:0] CRUD1_out ;                               \n";
 mux4_r4 << " output [P_WIDTH-1:0] CRUD2_out ;                               \n";
 mux4_r4 << " output [P_WIDTH-1:0] CRUD3_out ;                               \n";
 mux4_r4 << "                                                                \n";
 mux4_r4 << " input [P_WIDTH-1:0]  IFFTD0_in ;                               \n";
 mux4_r4 << " input [P_WIDTH-1:0]  IFFTD1_in ;                               \n";
 mux4_r4 << " input [P_WIDTH-1:0]  IFFTD2_in ;                               \n";
 mux4_r4 << " input [P_WIDTH-1:0]  IFFTD3_in ;                               \n";
 mux4_r4 << " input                m2_sel ;                                  \n";
 mux4_r4 << "                                                                \n";
 mux4_r4 << "                                                                \n";
 mux4_r4 << "                                                                \n";
 mux4_r4 << " 	//                                                           \n";
 mux4_r4 << " 	assign CRUD0_out = (m2_sel==1'b1)? IFFTD0_in : P_ZERO ;      \n";
 mux4_r4 << " 	//                                                           \n";
 mux4_r4 << " 	assign CRUD1_out = (m2_sel==1'b1)? IFFTD1_in : P_ZERO ;		 \n";	  
 mux4_r4 << " 	//                                                           \n";
 mux4_r4 << " 	assign CRUD2_out = (m2_sel==1'b1)? IFFTD2_in : P_ZERO ;		 \n";	  
 mux4_r4 << " 	//                                                           \n";
 mux4_r4 << " 	assign CRUD3_out = (m2_sel==1'b1)? IFFTD3_in : P_ZERO ;		 \n";	  
 mux4_r4 << " 	                                                             \n";
 mux4_r4 << "                                                                \n";
 mux4_r4 << " 	                                                             \n";
 mux4_r4 << " endmodule                                                      \n";
     mux4_r4.close();    
}

void Mux::Mux5_r4(std::string string_in){
	 std::ofstream mux5_r4;
     std::string        string_buf = "/Mux5.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux5_r4.open(ss.str());  
 mux5_r4 << " //=============================================                            \n";
 mux5_r4 << " //Data:2020/04/08                                                          \n";
 mux5_r4 << " //note:re-order factor Mux                                                 \n";
 mux5_r4 << " //writter:shi yong wu                                                      \n";
 mux5_r4 << " //=============================================                            \n";
 mux5_r4 << " `timescale 1ns/10ps                                                        \n";
 mux5_r4 << " module Mux5(                                                               \n";
 mux5_r4 << "         B0M0_ain_o,                                                        \n";
 mux5_r4 << "         B0M1_ain_o,                                                        \n";
 mux5_r4 << "         B0M2_ain_o,                                                        \n";
 mux5_r4 << "         B0M3_ain_o,                                                        \n";
 mux5_r4 << "         B0M0_bin_o,                                                        \n";
 mux5_r4 << "         B0M1_bin_o,                                                        \n";
 mux5_r4 << "         B0M2_bin_o,                                                        \n";
 mux5_r4 << "         B0M3_bin_o,                                                        \n";
 mux5_r4 << " 		  B1M0_ain_o,                                                        \n";
 mux5_r4 << " 		  B1M1_ain_o,                                                        \n";
 mux5_r4 << " 		  B1M2_ain_o,                                                        \n";
 mux5_r4 << " 		  B1M3_ain_o,                                                        \n";
 mux5_r4 << " 		  B1M0_bin_o,                                                        \n";
 mux5_r4 << " 		  B1M1_bin_o,                                                        \n";
 mux5_r4 << " 		  B1M2_bin_o,                                                        \n";
 mux5_r4 << " 		  B1M3_bin_o,                                                        \n";
 mux5_r4 << "         ExtB0_D0,                                                          \n";
 mux5_r4 << "         ExtB0_D1,                                                          \n";
 mux5_r4 << "         ExtB0_D2,                                                          \n";
 mux5_r4 << "         ExtB0_D3,                                                          \n";
 mux5_r4 << "         ExtB1_D0_pip,                                                      \n";
 mux5_r4 << "         ExtB1_D1_pip,                                                      \n";
 mux5_r4 << "         ExtB1_D2_pip,                                                      \n";
 mux5_r4 << "         ExtB1_D3_pip,                                                      \n";
 mux5_r4 << "         SP_r0,                                                             \n";
 mux5_r4 << "         SP_r1,                                                             \n";
 mux5_r4 << "         SP_r2,                                                             \n";
 mux5_r4 << "         SP_r3,                                                             \n";
 mux5_r4 << " 		  CRUD0,                                                             \n";
 mux5_r4 << " 		  CRUD1,                                                             \n";
 mux5_r4 << " 		  CRUD2,                                                             \n";
 mux5_r4 << " 		  CRUD3,                                                             \n";
 mux5_r4 << " 		  reorderb1r0,                                                       \n";
 mux5_r4 << " 		  reorderb1r1,                                                       \n";
 mux5_r4 << "         reorderb0r0,                                                       \n";
 mux5_r4 << "         reorderb0r1,                                                       \n";
 mux5_r4 << "         ireorderr0,                                                        \n";
 mux5_r4 << "         ireorderr1,                                                        \n";
 mux5_r4 << "         ireorderr2,                                                        \n";
 mux5_r4 << "         ireorderr3,                                                        \n";
 mux5_r4 << "         re_sel                                                             \n";
 mux5_r4 << " );                                                                         \n";
 mux5_r4 << "                                                                            \n";
 mux5_r4 << " parameter CP_WIDTH = "<< CP_width <<";                                     \n";
 mux5_r4 << " parameter CP_ZERO  = "<< CP_width <<"'d0;                                  \n";
 mux5_r4 << " parameter DOP_WIDTH  = " << (2*CP_width) << ";  //Double data width        \n";
 mux5_r4 << "                                                                            \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M0_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M1_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M2_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M3_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M0_bin_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M1_bin_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M2_bin_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B0M3_bin_o; \n";
 mux5_r4 << "\n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M0_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M1_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M2_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M3_ain_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M0_bin_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M1_bin_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M2_bin_o; \n";
 mux5_r4 << " output [CP_WIDTH-1:0] B1M3_bin_o; \n";
 mux5_r4 << "\n";
 mux5_r4 << " input                 re_sel ;        \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] ExtB0_D0;       \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] ExtB0_D1;       \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] ExtB0_D2;       \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] ExtB0_D3;       \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ExtB1_D0_pip;   \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ExtB1_D1_pip;   \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ExtB1_D2_pip;   \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ExtB1_D3_pip;   \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] SP_r0;    \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] SP_r1;    \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] SP_r2;    \n";
 mux5_r4 << " input  [CP_WIDTH-1:0] SP_r3;    \n";
 mux5_r4 << " input [DOP_WIDTH-1:0] CRUD0;    \n";
 mux5_r4 << " input [DOP_WIDTH-1:0] CRUD1;    \n";
 mux5_r4 << " input [DOP_WIDTH-1:0] CRUD2;    \n";
 mux5_r4 << " input [DOP_WIDTH-1:0] CRUD3;    \n";
 mux5_r4 << "\n";
 mux5_r4 << " input [CP_WIDTH-1:0]  reorderb0r0; \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  reorderb0r1; \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  reorderb1r0; \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  reorderb1r1; \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ireorderr0;  \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ireorderr1;  \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ireorderr2;  \n";
 mux5_r4 << " input [CP_WIDTH-1:0]  ireorderr3;  \n";
 mux5_r4 << " \n";
 mux5_r4 << " \n"; 
 mux5_r4 << " \n";
 mux5_r4 << "   assign B0M0_ain_o = ( re_sel == 1'b1) ?  ExtB0_D0: SP_r0;                \n";
 mux5_r4 << "   assign B0M1_ain_o = ( re_sel == 1'b1) ?  ExtB0_D1: SP_r1;                \n";
 mux5_r4 << "   assign B0M2_ain_o = ( re_sel == 1'b1) ?  ExtB0_D2: SP_r2;                \n";
 mux5_r4 << "   assign B0M3_ain_o = ( re_sel == 1'b1) ?  ExtB0_D3: SP_r3;                \n";
 mux5_r4 << " \n";
 mux5_r4 << " 	assign B1M0_ain_o = ( re_sel == 1'b1) ? ExtB1_D0_pip : CRUD0[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r4 << " 	assign B1M1_ain_o = ( re_sel == 1'b1) ? ExtB1_D1_pip : CRUD1[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r4 << " 	assign B1M2_ain_o = ( re_sel == 1'b1) ? ExtB1_D2_pip : CRUD2[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r4 << " 	assign B1M3_ain_o = ( re_sel == 1'b1) ? ExtB1_D3_pip : CRUD3[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r4 << "                                                        //test         \n";
 mux5_r4 << "   assign B0M0_bin_o = ( re_sel == 1'b1) ?  reorderb0r0: ireorderr0;// \n";
 mux5_r4 << "   assign B0M1_bin_o = ( re_sel == 1'b1) ?  reorderb0r1: ireorderr1;// \n";
 mux5_r4 << "   assign B0M2_bin_o = ( re_sel == 1'b1) ?  CP_ZERO    : ireorderr2;// \n";
 mux5_r4 << "   assign B0M3_bin_o = ( re_sel == 1'b1) ?  CP_ZERO    : ireorderr3;// \n";
 mux5_r4 << "\n";
 mux5_r4 << " 	assign B1M0_bin_o = ( re_sel == 1'b1) ?  reorderb1r0 : CRUD0[CP_WIDTH-1:0] ;\n";
 mux5_r4 << " 	assign B1M1_bin_o = ( re_sel == 1'b1) ?  reorderb1r1 : CRUD1[CP_WIDTH-1:0] ;\n";
 mux5_r4 << " 	assign B1M2_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : CRUD2[CP_WIDTH-1:0] ;\n";
 mux5_r4 << " 	assign B1M3_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : CRUD3[CP_WIDTH-1:0] ;\n";
 mux5_r4 << "                                                                            \n";
 mux5_r4 << " endmodule                                                                  \n";           

     mux5_r4.close();
}

void Mux::Mux6_r4(std::string string_in){
	 std::ofstream mux6_r4;
     std::string        string_buf = "/Mux6.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux6_r4.open(ss.str()); 
 mux6_r4 << " //=============================================                                             \n";
 mux6_r4 << " //Data:2020/04/08                                                                           \n";
 mux6_r4 << " //note:output data and ExtB0_Dx Mux                                                         \n";
 mux6_r4 << " //writter:shi yong wu                                                                       \n";
 mux6_r4 << " //=============================================                                             \n";
 mux6_r4 << " `timescale 1ns/10ps                                                                         \n";
 mux6_r4 << " module Mux6(                                                                                \n";
 mux6_r4 << "         ExtB0_D0,                                                                           \n";
 mux6_r4 << "         ExtB0_D1,                                                                           \n";
 mux6_r4 << "         ExtB0_D2,                                                                           \n";
 mux6_r4 << "         ExtB0_D3,                                                                           \n";
 mux6_r4 << "         ExtB1_D0,                                                             \n";
 mux6_r4 << "         ExtB1_D1,                                                             \n";
 mux6_r4 << "         ExtB1_D2,                                                             \n";
 mux6_r4 << "         ExtB1_D3,                                                             \n";
 mux6_r4 << "         MulD0_out,                                                                          \n";
 mux6_r4 << "         MulD1_out,                                                                          \n";
 mux6_r4 << "         MulD2_out,                                                                          \n";
 mux6_r4 << "         MulD3_out,                                                                          \n";
 mux6_r4 << "         BR_S0,                                                                \n";
 mux6_r4 << "         BR_S1,                                                                \n";
 mux6_r4 << "         BR_S2,                                                                \n";
 mux6_r4 << "         BR_S3,                                                                \n";
 mux6_r4 << "         B0M0_result,                                                                        \n";
 mux6_r4 << "         B0M1_result,                                                                        \n";
 mux6_r4 << "         B0M2_result,                                                                        \n";
 mux6_r4 << "         B0M3_result,                                                                        \n";
 mux6_r4 << "         B1M0_result,                                                          \n";
 mux6_r4 << "         B1M1_result,                                                          \n";
 mux6_r4 << "         B1M2_result,                                                          \n";
 mux6_r4 << "         B1M3_result,                                                          \n";
 mux6_r4 << "         m2_sel                                                                \n";
 mux6_r4 << " );                                                                                          \n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << " parameter P_WIDTH  = 64;                                                                    \n";
 mux6_r4 << " parameter CP_WIDTH = "<< CP_width <<";\n";
 mux6_r4 << " parameter P_ZERO   = 64'd0;                                                                 \n";
 mux6_r4 << " parameter CP_ZERO  = "<< CP_width <<"'d0;\n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB0_D0;                                                             \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB0_D1;                                                             \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB0_D2;                                                             \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB0_D3;                                                             \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB1_D0;                                               \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB1_D1;                                               \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB1_D2;                                               \n";
 mux6_r4 << " output [P_WIDTH-1:0]  ExtB1_D3;                                               \n";
 mux6_r4 << " output [CP_WIDTH-1:0] MulD0_out;                                              \n";
 mux6_r4 << " output [CP_WIDTH-1:0] MulD1_out;                                              \n";
 mux6_r4 << " output [CP_WIDTH-1:0] MulD2_out;                                              \n";
 mux6_r4 << " output [CP_WIDTH-1:0] MulD3_out;                                              \n";
 mux6_r4 << " output [CP_WIDTH-1:0] BR_S0;                                                  \n";
 mux6_r4 << " output [CP_WIDTH-1:0] BR_S1;                                                  \n";
 mux6_r4 << " output [CP_WIDTH-1:0] BR_S2;                                                  \n";
 mux6_r4 << " output [CP_WIDTH-1:0] BR_S3;                                                  \n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << " input                m2_sel;                                                  \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B0M0_result;                                                           \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B0M1_result;                                                           \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B0M2_result;                                                           \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B0M3_result;                                                           \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B1M0_result;                                             \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B1M1_result;                                             \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B1M2_result;                                             \n";
 mux6_r4 << " input  [P_WIDTH-1:0] B1M3_result;                                             \n";
 mux6_r4 << "                                                                               \n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << "   assign ExtB0_D0 = ( m2_sel == 1'b1) ?  P_ZERO: B0M0_result;                         \n";
 mux6_r4 << "   assign ExtB0_D1 = ( m2_sel == 1'b1) ?  P_ZERO: B0M1_result;                         \n";
 mux6_r4 << "   assign ExtB0_D2 = ( m2_sel == 1'b1) ?  P_ZERO: B0M2_result;                         \n";
 mux6_r4 << "   assign ExtB0_D3 = ( m2_sel == 1'b1) ?  P_ZERO: B0M3_result;                         \n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << "   assign ExtB1_D0 = ( m2_sel == 1'b1) ?  P_ZERO: B1M0_result;                 \n";
 mux6_r4 << "   assign ExtB1_D1 = ( m2_sel == 1'b1) ?  P_ZERO: B1M1_result;                 \n";
 mux6_r4 << "   assign ExtB1_D2 = ( m2_sel == 1'b1) ?  P_ZERO: B1M2_result;                 \n";
 mux6_r4 << "   assign ExtB1_D3 = ( m2_sel == 1'b1) ?  P_ZERO: B1M3_result;                 \n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << "   assign MulD0_out = ( m2_sel == 1'b1) ?  B0M0_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r4 << "   assign MulD1_out = ( m2_sel == 1'b1) ?  B0M1_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r4 << "   assign MulD2_out = ( m2_sel == 1'b1) ?  B0M2_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r4 << "   assign MulD3_out = ( m2_sel == 1'b1) ?  B0M3_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << "   assign BR_S0 = ( m2_sel == 1'b1) ?  B1M0_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r4 << "   assign BR_S1 = ( m2_sel == 1'b1) ?  B1M1_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r4 << "   assign BR_S2 = ( m2_sel == 1'b1) ?  B1M2_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r4 << "   assign BR_S3 = ( m2_sel == 1'b1) ?  B1M3_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r4 << "                                                                                             \n";
 mux6_r4 << " endmodule                                                                                   \n";  

     mux6_r4.close();
}

void Mux::MuxMA_r4(std::string string_in){
	 std::ofstream muxma_r4;
     std::string        string_buf = "/MuxMA.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 muxma_r4.open(ss.str());
 muxma_r4 << " `timescale 1 ns/1 ps                                                                              \n";
 muxma_r4 << " module MuxMA(Data_out0,                                                                           \n";
 muxma_r4 << " 			 Data_out1,                                                                              \n";
 muxma_r4 << " 			 Data_out2,                                                                              \n";
 muxma_r4 << " 			 Data_out3,                                                                              \n";
 muxma_r4 << " 			 wen0_mem_sb0,                                                                           \n";
 muxma_r4 << " 			 wen0_mem_sb1,                                                                           \n";
 muxma_r4 << " 			 wen1_mem_sb0,                                                                           \n";
 muxma_r4 << " 			 wen1_mem_sb1,                                                                           \n";
 muxma_r4 << " 			 Dout0_mem0_sb0,                                                                         \n";
 muxma_r4 << " 			 Dout0_mem0_sb1,                                                                         \n";
 muxma_r4 << " 			 Dout0_mem1_sb0,                                                                         \n";
 muxma_r4 << " 			 Dout0_mem1_sb1,                                                                         \n";
 muxma_r4 << " 			 Dout1_mem0_sb0,                                                                         \n";
 muxma_r4 << " 			 Dout1_mem0_sb1,                                                                         \n";
 muxma_r4 << " 			 Dout1_mem1_sb0,                                                                         \n";
 muxma_r4 << " 			 Dout1_mem1_sb1,                                                                         \n";
 muxma_r4 << " 			 wen0_in,                                                                                \n";
 muxma_r4 << " 			 wen1_in,                                                                                \n";
 muxma_r4 << " 		     MA0_in,                                                                                 \n";
 muxma_r4 << " 			 MA1_in,                                                                                 \n";
 muxma_r4 << "           rst_n,                                                                               \n";
 muxma_r4 << "           clk                                                                                  \n";
 muxma_r4 << " 			 ) ;                                                                                     \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << " parameter A_WIDTH   = "<< addr_width << ";                                                        \n";
 muxma_r4 << " parameter SD_WIDTH  = 128 ;                                                                       \n";
 muxma_r4 << " parameter A_ZERO    = "<< addr_width << "'h0 ;                                                    \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << " output [SD_WIDTH-1:0] Data_out0 ;                                                                 \n";
 muxma_r4 << " output [SD_WIDTH-1:0] Data_out1 ;                                                                 \n";
 muxma_r4 << " output [SD_WIDTH-1:0] Data_out2 ;                                                                 \n";
 muxma_r4 << " output [SD_WIDTH-1:0] Data_out3 ;                                                                 \n";
 muxma_r4 << " //                                                                                                \n";
 muxma_r4 << " output                wen0_mem_sb0 ;                                                              \n";
 muxma_r4 << " output                wen0_mem_sb1 ;                                                              \n";
 muxma_r4 << " output                wen1_mem_sb0 ;                                                              \n";
 muxma_r4 << " output                wen1_mem_sb1 ;                                                              \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout0_mem0_sb0 ;                                                            \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout0_mem0_sb1 ;                                                            \n";
 muxma_r4 << " //                                                                                                \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout0_mem1_sb0 ;                                                            \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout0_mem1_sb1 ;                                                            \n";
 muxma_r4 << " //                                                                                                \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout1_mem0_sb0 ;                                                            \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout1_mem0_sb1 ;                                                            \n";
 muxma_r4 << " //                                                                                                \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout1_mem1_sb0 ;                                                            \n";
 muxma_r4 << " input  [SD_WIDTH-1:0] Dout1_mem1_sb1 ;                                                            \n";
 muxma_r4 << " //                                                                                                \n";
 muxma_r4 << " input                 wen0_in ;                                                                   \n";
 muxma_r4 << " input                 wen1_in ;                                                                   \n";
 muxma_r4 << " input  [A_WIDTH-1:0]  MA0_in ;                                                                    \n";
 muxma_r4 << " input  [A_WIDTH-1:0]  MA1_in ;                                                                    \n"; 
 muxma_r4 << " input                 rst_n ;                                                                     \n";
 muxma_r4 << " input                 clk ;                                                                       \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << " reg    [A_WIDTH-1:0]  MA0_reg ;                                                                   \n";
 muxma_r4 << " reg    [A_WIDTH-1:0]  MA1_reg ;                                                                   \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << " 	// FFT1-----------                                                                               \n";
 muxma_r4 << " 	// Bank0 memory0                                                                                 \n";
 muxma_r4 << " 	assign wen0_mem_sb0 = (MA0_in[A_WIDTH-1]==1'd0)? wen0_in : 1'b1 ;                                \n";
 muxma_r4 << " 	assign wen0_mem_sb1 = (MA0_in[A_WIDTH-1]==1'd1)? wen0_in : 1'b1 ;	                             \n";
 muxma_r4 << " 	                                                                                                 \n";
 muxma_r4 << " 	assign Data_out0 = (MA0_reg[A_WIDTH-1]==1'd0)? Dout0_mem0_sb0 : Dout0_mem0_sb1 ;                 \n";
 muxma_r4 << " 	                                                                                                 \n";
 muxma_r4 << " 	// Bank0 memory1                                                                                 \n";
 muxma_r4 << " 	assign Data_out1 = (MA0_reg[A_WIDTH-1]==1'd0)? Dout0_mem1_sb0 : Dout0_mem1_sb1 ;                 \n";
 muxma_r4 << " 	                                                                                                 \n";
 muxma_r4 << " 	                                                                                                 \n";
 muxma_r4 << " 	// Bank1 memory0                                                                                 \n";
 muxma_r4 << " 	assign wen1_mem_sb0 = (MA1_in[A_WIDTH-1]==1'd0)? wen1_in : 1'b1 ;                                \n";
 muxma_r4 << " 	assign wen1_mem_sb1 = (MA1_in[A_WIDTH-1]==1'd1)? wen1_in : 1'b1 ;                                \n";
 muxma_r4 << " 	                                                                                                 \n";
 muxma_r4 << " 	assign Data_out2 = (MA1_reg[A_WIDTH-1]==1'd0)? Dout1_mem0_sb0 : Dout1_mem0_sb1 ;                 \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << " 	// Bank1 memory1	                                                                             \n";
 muxma_r4 << " 	assign Data_out3 = (MA1_reg[A_WIDTH-1]==1'd0)? Dout1_mem1_sb0 : Dout1_mem1_sb1 ;                 \n";
 muxma_r4 << "                                                                                                   \n";
 muxma_r4 << " 	                                                                                                 \n";
 muxma_r4 << " 	//                                                                                               \n";
 muxma_r4 << " 	always @(posedge clk or negedge rst_n) begin                                                     \n";
 muxma_r4 << " 		if(~rst_n) begin                                                                             \n";
 muxma_r4 << " 			MA0_reg <= A_ZERO ;                                                                      \n";
 muxma_r4 << " 			MA1_reg <= A_ZERO ;                                                                      \n";
 muxma_r4 << " 		end                                                                                          \n";
 muxma_r4 << " 		else begin                                                                                   \n";
 muxma_r4 << " 			MA0_reg <= MA0_in ;                                                                      \n";
 muxma_r4 << " 			MA1_reg <= MA1_in ;                                                                      \n"; 
 muxma_r4 << " 		end                                                                                          \n";
 muxma_r4 << " 	end                                                                                              \n";
 muxma_r4 << " 		                                                                                             \n";
 muxma_r4 << " endmodule			                                                                             \n";

     muxma_r4.close();    
}
void Mux::MuxROMA_r4(std::string string_in){
	 std::ofstream muxroma_r4;
     std::string        string_buf = "/MuxROMA.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 muxroma_r4.open(ss.str());
 muxroma_r4 << " `timescale 1 ns/1 ps                                                                                                          \n";
 muxroma_r4 << " module MuxROMA(ROMD0_out,                                                                                                     \n";
 muxroma_r4 << " 			   ROMD1_out,			                                                                                           \n";
 muxroma_r4 << " 			   IFFTROMD0_out,                                                                                                  \n";
 muxroma_r4 << " 			   IFFTROMD1_out,			                                                                                       \n";
 muxroma_r4 << " 			   Dout_rom0_sb0,                                                                                                  \n";
 muxroma_r4 << " 			   Dout_rom0_sb1,                                                                                                  \n";
 muxroma_r4 << " 			   Dout_rom0_sb2,                                                                                                  \n";
 muxroma_r4 << " 			   Dout_rom0_sb3,			                                                                                       \n";
 muxroma_r4 << " 			   Dout_rom1_sb0,                                                                                                  \n";
 muxroma_r4 << " 			   Dout_rom1_sb1,                                                                                                  \n";
 muxroma_r4 << " 			   Dout_rom1_sb2,                                                                                                  \n";
 muxroma_r4 << " 			   Dout_rom1_sb3,			                                                                                       \n";
 muxroma_r4 << " 			   IFFTDout_rom0_sb0,                                                                                              \n";
 muxroma_r4 << " 			   IFFTDout_rom0_sb1,                                                                                              \n";
 muxroma_r4 << " 			   IFFTDout_rom0_sb2,                                                                                              \n";
 muxroma_r4 << " 			   IFFTDout_rom0_sb3,			                                                                                   \n";
 muxroma_r4 << " 			   IFFTDout_rom1_sb0,                                                                                              \n";
 muxroma_r4 << " 			   IFFTDout_rom1_sb1,                                                                                              \n";
 muxroma_r4 << " 			   IFFTDout_rom1_sb2,                                                                                              \n";
 muxroma_r4 << " 			   IFFTDout_rom1_sb3,                                                                                              \n";
 muxroma_r4 << " 			   ROMA_in,                                                                                                        \n";
 muxroma_r4 << "                rst_n,                                                                                                         \n";
 muxroma_r4 << "                clk                                                                                                            \n";
 muxroma_r4 << " 			   ) ;                                                                                                             \n";
 muxroma_r4 << "                                                                                                                               \n";
 muxroma_r4 << " parameter ROMA_WIDTH   = " << (addr_width+1) <<";                                                                            \n";
 muxroma_r4 << " parameter P_WIDTH      = 64 ; 	                                                                                               \n";
 muxroma_r4 << " parameter SD_WIDTH     = 128 ;                                                                                                \n";
 muxroma_r4 << " parameter ROMA_ZERO    = " << (addr_width+1) <<"'h0 ;                                                                         \n";
 muxroma_r4 << "                                                                                                                               \n";
 muxroma_r4 << " output [P_WIDTH-1:0]  ROMD0_out ;                                                                                             \n";
 muxroma_r4 << " output [SD_WIDTH-1:0] ROMD1_out ;                                                                                             \n";
 muxroma_r4 << " output [P_WIDTH-1:0]  IFFTROMD0_out ;                                                                                         \n";
 muxroma_r4 << " output [SD_WIDTH-1:0] IFFTROMD1_out ;                                                                                         \n";
 muxroma_r4 << "                                                                                                                               \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  Dout_rom0_sb0 ;                                                                                         \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  Dout_rom0_sb1 ;                                                                                         \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  Dout_rom0_sb2 ;                                                                                         \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  Dout_rom0_sb3 ;                                                                                         \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] Dout_rom1_sb0 ;                                                                                         \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] Dout_rom1_sb1 ;                                                                                         \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] Dout_rom1_sb2 ;                                                                                         \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] Dout_rom1_sb3 ;                                                                                         \n";
 muxroma_r4 << " //                                                                                                                            \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  IFFTDout_rom0_sb0 ;                                                                                     \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  IFFTDout_rom0_sb1 ;                                                                                     \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  IFFTDout_rom0_sb2 ;                                                                                     \n";
 muxroma_r4 << " input  [P_WIDTH-1:0]  IFFTDout_rom0_sb3 ;                                                                                     \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] IFFTDout_rom1_sb0 ;                                                                                     \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] IFFTDout_rom1_sb1 ;                                                                                     \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] IFFTDout_rom1_sb2 ;                                                                                     \n";
 muxroma_r4 << " input  [SD_WIDTH-1:0] IFFTDout_rom1_sb3 ;                                                                                     \n";
 muxroma_r4 << " //                                                                                                                            \n";
 muxroma_r4 << " input  [ROMA_WIDTH-1:0]  ROMA_in ;                                                                                            \n";
 muxroma_r4 << " input                    rst_n ;                                                                                              \n";
 muxroma_r4 << " input                    clk ;                                                                                                \n";
 muxroma_r4 << "                                                                                                                               \n";
 muxroma_r4 << " reg    [ROMA_WIDTH-1:0]  ROMA_reg ;                                                                                           \n";
 muxroma_r4 << "                                                                                                                               \n";
 muxroma_r4 << "                                                                                                                               \n";
 muxroma_r4 << " 	// FFT-----------                                                                                                          \n";
 muxroma_r4 << " 	// ROM0                                                                                                                    \n";
 muxroma_r4 << " 	assign ROMD0_out = ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd0)? Dout_rom0_sb0 :                                \n";
 muxroma_r4 << " 	                   ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd1)? Dout_rom0_sb1 :                                \n";
 muxroma_r4 << " 					   ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd2)? Dout_rom0_sb2 : Dout_rom0_sb3 ;                \n";
 muxroma_r4 << " 	                                                                                                                           \n";
 muxroma_r4 << " 	// ROM1                                                                                                                    \n";
 muxroma_r4 << " 	assign ROMD1_out = ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd0)? Dout_rom1_sb0 :                                \n";
 muxroma_r4 << " 	                   ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd1)? Dout_rom1_sb1 :                                \n";
 muxroma_r4 << " 					   ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd2)? Dout_rom1_sb2 : Dout_rom1_sb3 ;                \n";
 muxroma_r4 << " 					                                                                                                           \n";
 muxroma_r4 << " 	// IFFT-----------                                                                                                         \n";
 muxroma_r4 << " 	// ROM0                                                                                                                    \n";
 muxroma_r4 << " 	assign IFFTROMD0_out = ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd0)? IFFTDout_rom0_sb0 :                        \n";
 muxroma_r4 << " 	                       ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd1)? IFFTDout_rom0_sb1 :                        \n";
 muxroma_r4 << " 					       ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd2)? IFFTDout_rom0_sb2 : IFFTDout_rom0_sb3 ;    \n";
 muxroma_r4 << " 						                                                                                                       \n";
 muxroma_r4 << " 	// ROM1                                                                                                                    \n";
 muxroma_r4 << " 	assign IFFTROMD1_out = ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd0)? IFFTDout_rom1_sb0 :                        \n";
 muxroma_r4 << " 	                       ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd1)? IFFTDout_rom1_sb1 :                        \n";
 muxroma_r4 << " 					       ({ROMA_reg[ROMA_WIDTH-1],ROMA_reg[ROMA_WIDTH-2]}==2'd2)? IFFTDout_rom1_sb2 : IFFTDout_rom1_sb3 ;    \n";
 muxroma_r4 << " 						                                                                                                       \n";
 muxroma_r4 << " 	                                                                                                                           \n";
 muxroma_r4 << " 	//                                                                                                                         \n";
 muxroma_r4 << " 	always @(posedge clk or negedge rst_n) begin                                                                               \n";
 muxroma_r4 << " 		if(~rst_n) begin                                                                                                       \n";
 muxroma_r4 << " 			ROMA_reg <= ROMA_ZERO ;                                                                                            \n";
 muxroma_r4 << " 		end                                                                                                                    \n";
 muxroma_r4 << " 		else begin                                                                                                             \n";
 muxroma_r4 << " 			ROMA_reg <= ROMA_in ;                                                                                              \n";
 muxroma_r4 << " 		end                                                                                                                    \n";
 muxroma_r4 << " 	end                                                                                                                        \n";
 muxroma_r4 << " 		                                                                                                                       \n";
 muxroma_r4 << " endmodule			                                                                                                           \n";      

     muxroma_r4.close();    
}
//radix-8
void Mux::Mux1_r8(std::string string_in){
	 std::ofstream mux1_r8;
     std::string        string_buf = "/Mux1.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux1_r8.open(ss.str());  
 mux1_r8 << " `timescale 1 ns/1 ps                                                                           \n";
 mux1_r8 << " module Mux1(BN0_MEM0_Dout,                                                                     \n";
 mux1_r8 << " 			BN0_MEM1_Dout,                                                                       \n";
 mux1_r8 << " 			BN0_MEM2_Dout,                                                                       \n";
 mux1_r8 << " 			BN0_MEM3_Dout,                                                                       \n";
 mux1_r8 << " 			BN1_MEM0_Dout,                                                                       \n";
 mux1_r8 << " 			BN1_MEM1_Dout,                                                                       \n";
 mux1_r8 << " 			BN1_MEM2_Dout,                                                                       \n";
 mux1_r8 << " 			BN1_MEM3_Dout,                                                                       \n";
 mux1_r8 << " 			MA0_out,                                                                             \n";
 mux1_r8 << " 			MA1_out,                                                                             \n";
 mux1_r8 << " 		    ExtB0_D0_in,                                                                         \n";
 mux1_r8 << " 			ExtB0_D1_in,                                                                         \n";
 mux1_r8 << " 			ExtB0_D2_in,                                                                         \n";
 mux1_r8 << " 			ExtB0_D3_in,                                                                         \n";
 mux1_r8 << " 			ExtB0_D4_in,                                                                         \n";
 mux1_r8 << " 			ExtB0_D5_in,                                                                         \n";
 mux1_r8 << " 			ExtB0_D6_in,                                                                         \n";
 mux1_r8 << " 			ExtB0_D7_in,                                                                         \n";
 mux1_r8 << " 			ExtB1_D0_in,                                                                         \n";
 mux1_r8 << " 			ExtB1_D1_in,                                                                         \n";
 mux1_r8 << "           ExtB1_D2_in,                                                                       \n";
 mux1_r8 << " 			ExtB1_D3_in,                                                                         \n";
 mux1_r8 << " 			ExtB1_D4_in,                                                                         \n";
 mux1_r8 << " 			ExtB1_D5_in,                                                                         \n";
 mux1_r8 << " 			ExtB1_D6_in,                                                                         \n";
 mux1_r8 << " 			ExtB1_D7_in,                                                                         \n";
 mux1_r8 << " 			RDC_in0,                                                                             \n";
 mux1_r8 << " 			RDC_in1,                                                                             \n";
 mux1_r8 << " 			RDC_in2,                                                                             \n";
 mux1_r8 << " 			RDC_in3,                                                                             \n";
 mux1_r8 << " 			RDC_in4,                                                                             \n";
 mux1_r8 << " 			RDC_in5,                                                                             \n";
 mux1_r8 << " 			RDC_in6,                                                                             \n";
 mux1_r8 << " 			RDC_in7,                                                                             \n";
 mux1_r8 << " 			ExtMA_in,                                                                            \n";
 mux1_r8 << " 			AGUMA_in,                                                                            \n";
 mux1_r8 << " 			WMA_in,                                                                              \n";
 mux1_r8 << " 			wen0_in,                                                                             \n";
 mux1_r8 << " 			wen1_in,                                                                             \n";
 mux1_r8 << " 			SD_sel                                                                               \n";
 mux1_r8 << " 			) ;                                                                                  \n";
 mux1_r8 << " 			                                                                                     \n";
 mux1_r8 << " 			                                                                                     \n";
 mux1_r8 << " parameter SD_WIDTH  = 128 ;                                                                    \n";
 mux1_r8 << " parameter P_WIDTH   = 64 ;                                                                     \n";
 mux1_r8 << " parameter A_WIDTH   = " << addr_width << ";                                                        \n";
 mux1_r8 << "                                                                                                \n";
 mux1_r8 << " parameter P_ZERO   = 64'h0 ;                                                                   \n";
 mux1_r8 << "                                                                                                \n";
 mux1_r8 << "                                                                                                \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN0_MEM0_Dout ;                                                          \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN0_MEM1_Dout ;                                                          \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN0_MEM2_Dout ;                                                          \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN0_MEM3_Dout ;                                                          \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN1_MEM0_Dout ;                                                          \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN1_MEM1_Dout ;                                                          \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN1_MEM2_Dout ;                                                          \n";
 mux1_r8 << " output [SD_WIDTH-1:0] BN1_MEM3_Dout ;                                                          \n";
 mux1_r8 << " output [A_WIDTH-1:0]  MA0_out ;                                                                \n";
 mux1_r8 << " output [A_WIDTH-1:0]  MA1_out ;                                                                \n";
 mux1_r8 << "                                                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D0_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D1_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D2_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D3_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D4_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D5_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D6_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB0_D7_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D0_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D1_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D2_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D3_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D4_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D5_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D6_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  ExtB1_D7_in ;                                                            \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in0 ;                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in1 ;                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in2 ;                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in3 ;                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in4 ;                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in5 ;                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in6 ;                                                                \n";
 mux1_r8 << " input  [P_WIDTH-1:0]  RDC_in7 ;                                                                \n";
 mux1_r8 << " input  [A_WIDTH-1:0]  ExtMA_in ;                                                               \n";
 mux1_r8 << " input  [A_WIDTH-1:0]  AGUMA_in ;                                                               \n";
 mux1_r8 << " input  [A_WIDTH-1:0]  WMA_in ;                                                                 \n";
 mux1_r8 << " input                 wen0_in ;                                                                \n";
 mux1_r8 << " input                 wen1_in ;                                                                \n";
 mux1_r8 << " input                 SD_sel ;                                                                 \n";
 mux1_r8 << "                                                                                                \n";
 mux1_r8 << "                                                                                                \n";
 mux1_r8 << "                                                                                                \n";
 mux1_r8 << " 	// Bank0 for op0 and op1                                                                     \n";
 mux1_r8 << " 	assign BN0_MEM0_Dout = (SD_sel==1'b1)? ({ExtB0_D0_in,ExtB0_D1_in}) : ({RDC_in0,RDC_in1}) ;   \n";
 mux1_r8 << " 	// Bank0 for op2 and op3                                                                     \n";
 mux1_r8 << " 	assign BN0_MEM1_Dout = (SD_sel==1'b1)? ({ExtB0_D2_in,ExtB0_D3_in}) : ({RDC_in2,RDC_in3}) ;   \n";
 mux1_r8 << " 	// Bank0 for op4 and op5                                                                     \n";
 mux1_r8 << " 	assign BN0_MEM2_Dout = (SD_sel==1'b1)? ({ExtB0_D4_in,ExtB0_D5_in}) : ({RDC_in4,RDC_in5}) ;   \n";
 mux1_r8 << " 	// Bank0 for op6 and op7                                                                     \n";
 mux1_r8 << " 	assign BN0_MEM3_Dout = (SD_sel==1'b1)? ({ExtB0_D6_in,ExtB0_D7_in}) : ({RDC_in6,RDC_in7}) ;   \n";
 mux1_r8 << " 	// Bank1 for op0 and op1                                                                     \n";
 mux1_r8 << " 	assign BN1_MEM0_Dout = (SD_sel==1'b1)? ({ExtB1_D0_in,ExtB1_D1_in}) : ({RDC_in0,RDC_in1}) ;   \n";
 mux1_r8 << " 	// Bank1 for op2 and op3                                                                     \n";
 mux1_r8 << " 	assign BN1_MEM1_Dout = (SD_sel==1'b1)? ({ExtB1_D2_in,ExtB1_D3_in}) : ({RDC_in2,RDC_in3}) ;   \n";
 mux1_r8 << " 	// Bank1 for op4 and op5                                                                     \n";
 mux1_r8 << " 	assign BN1_MEM2_Dout = (SD_sel==1'b1)? ({ExtB1_D4_in,ExtB1_D5_in}) : ({RDC_in4,RDC_in5}) ;   \n";
 mux1_r8 << " 	// Bank1 for op6 and op7                                                                     \n";
 mux1_r8 << " 	assign BN1_MEM3_Dout = (SD_sel==1'b1)? ({ExtB1_D6_in,ExtB1_D7_in}) : ({RDC_in6,RDC_in7}) ;   \n";
 mux1_r8 << " 	                                                                                             \n";
 mux1_r8 << " 	//                                                                                           \n";
 mux1_r8 << " 	assign MA0_out = (SD_sel==1'b1)? ExtMA_in :                                                  \n";
 mux1_r8 << " 					 (wen0_in==1'b1)? AGUMA_in : WMA_in ;                                        \n";
 mux1_r8 << " 					                                                                             \n";
 mux1_r8 << " 	//                                                                                           \n";
 mux1_r8 << " 	assign MA1_out = (SD_sel==1'b1)? ExtMA_in :                                                  \n";
 mux1_r8 << " 					 (wen1_in==1'b1)? AGUMA_in : WMA_in ;                                        \n";
 mux1_r8 << " 					                                                                             \n";
 mux1_r8 << " 	                                                                                             \n";
 mux1_r8 << " endmodule                                                                                      \n";               
     mux1_r8.close();     
}    
void Mux::Mux2_r8(std::string string_in){
	 std::ofstream mux2_r8;
     std::string        string_buf = "/Mux2.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux2_r8.open(ss.str());
 mux2_r8 << " `timescale 1 ns/1 ps                                                                         \n";
 mux2_r8 << " module Mux2(RA0_out,                                                                         \n";
 mux2_r8 << " 			RA1_out,                                                                           \n";
 mux2_r8 << " 			RA2_out,                                                                           \n";
 mux2_r8 << " 			RA3_out,                                                                           \n";
 mux2_r8 << " 			RA4_out,                                                                           \n";
 mux2_r8 << " 			RA5_out,                                                                           \n";
 mux2_r8 << " 			RA6_out,                                                                           \n";
 mux2_r8 << " 			RA7_out,                                                                           \n";
 mux2_r8 << " 		    BN0_MEM0_in,                                                                       \n";
 mux2_r8 << " 			BN0_MEM1_in,                                                                       \n";
 mux2_r8 << " 			BN0_MEM2_in,                                                                       \n";
 mux2_r8 << " 			BN0_MEM3_in,                                                                       \n";
 mux2_r8 << " 			BN1_MEM0_in,                                                                       \n";
 mux2_r8 << " 			BN1_MEM1_in,                                                                       \n";
 mux2_r8 << " 			BN1_MEM2_in,                                                                       \n";
 mux2_r8 << " 			BN1_MEM3_in,                                                                       \n";
 mux2_r8 << " 			BN_sel                                                                             \n";
 mux2_r8 << " 			) ;                                                                                \n";
 mux2_r8 << " 			                                                                                   \n";
 mux2_r8 << " 			                                                                                   \n";
 mux2_r8 << " parameter SD_WIDTH  = 128 ;                                                                  \n";
 mux2_r8 << " parameter P_WIDTH   = 64 ;                                                                   \n";
 mux2_r8 << " parameter SEG1      = 64 ;                                                                   \n";
 mux2_r8 << " parameter SEG2      = 128 ;                                                                  \n";
 mux2_r8 << "                                                                                              \n";
 mux2_r8 << "                                                                                              \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA0_out ;                                                               \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA1_out ;                                                               \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA2_out ;                                                               \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA3_out ;                                                               \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA4_out ;                                                               \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA5_out ;                                                               \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA6_out ;                                                               \n";
 mux2_r8 << " output [P_WIDTH-1:0] RA7_out ;                                                               \n";
 mux2_r8 << "                                                                                              \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN0_MEM0_in ;                                                           \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN0_MEM1_in ;                                                           \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN0_MEM2_in ;                                                           \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN0_MEM3_in ;                                                           \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN1_MEM0_in ;                                                           \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN1_MEM1_in ;                                                           \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN1_MEM2_in ;                                                           \n";
 mux2_r8 << " input [SD_WIDTH-1:0] BN1_MEM3_in ;                                                           \n";
 mux2_r8 << " input                BN_sel ;                                                                \n";
 mux2_r8 << "                                                                                              \n";
 mux2_r8 << "                                                                                              \n";
 mux2_r8 << "                                                                                              \n";
 mux2_r8 << " 	// Radix-8 op_0                                                                            \n";
 mux2_r8 << " 	assign RA0_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG2-1:SEG1]) : (BN0_MEM0_in[SEG2-1:SEG1]) ; \n";
 mux2_r8 << " 	// Radix-8 op_1                                                                            \n";
 mux2_r8 << " 	assign RA1_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG1-1:0]) : (BN0_MEM0_in[SEG1-1:0]) ;       \n";
 mux2_r8 << " 	// Radix-8 op_2                                                                            \n";
 mux2_r8 << " 	assign RA2_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG2-1:SEG1]) : (BN0_MEM1_in[SEG2-1:SEG1]) ; \n";
 mux2_r8 << " 	// Radix-8 op_3                                                                            \n";
 mux2_r8 << " 	assign RA3_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG1-1:0]) : (BN0_MEM1_in[SEG1-1:0]) ;       \n";
 mux2_r8 << " 	// Radix-8 op_4                                                                            \n";
 mux2_r8 << " 	assign RA4_out = (BN_sel==1'b1)? (BN1_MEM2_in[SEG2-1:SEG1]) : (BN0_MEM2_in[SEG2-1:SEG1]) ;       \n";
 mux2_r8 << " 	// Radix-8 op_5                                                                            \n";
 mux2_r8 << " 	assign RA5_out = (BN_sel==1'b1)? (BN1_MEM2_in[SEG1-1:0]) : (BN0_MEM2_in[SEG1-1:0]) ;       \n";
 mux2_r8 << " 	// Radix-8 op_6                                                                            \n";
 mux2_r8 << " 	assign RA6_out = (BN_sel==1'b1)? (BN1_MEM3_in[SEG2-1:SEG1]) : (BN0_MEM3_in[SEG2-1:SEG1]) ;       \n";
 mux2_r8 << " 	// Radix-8 op_7                                                                            \n";
 mux2_r8 << " 	assign RA7_out = (BN_sel==1'b1)? (BN1_MEM3_in[SEG1-1:0]) : (BN0_MEM3_in[SEG1-1:0]) ;       \n";
 mux2_r8 << " 	                                                                                           \n";
 mux2_r8 << " endmodule                                                                                    \n"; 
     mux2_r8.close();     	
	
}
void Mux::Mux3_r8(std::string string_in){
	 std::ofstream mux3_r8;
     std::string        string_buf = "/Mux3.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux3_r8.open(ss.str());
 mux3_r8 << " `timescale 1 ns/1 ps                                                                  \n";
 mux3_r8 << " module Mux3(MulB0_out,                                                                \n";
 mux3_r8 << " 			MulB1_out,                                                                  \n";
 mux3_r8 << " 			MulB2_out,                                                                  \n";
 mux3_r8 << " 			MulB3_out,                                                                  \n";
 mux3_r8 << " 			MulB4_out,                                                                  \n";
 mux3_r8 << " 			MulB5_out,                                                                  \n";
 mux3_r8 << " 			MulB6_out,                                                                  \n";
 mux3_r8 << " 			MulB7_out,                                                                  \n";
 mux3_r8 << " 			MulA1_out,                                                                  \n";
 mux3_r8 << " 			MulA2_out,                                                                  \n";
 mux3_r8 << " 			MulA3_out,                                                                  \n";
 mux3_r8 << " 			MulA5_out,                                                                  \n";
 mux3_r8 << " 			MulA6_out,                                                                  \n";
 mux3_r8 << " 			MulA7_out,                                                                  \n";
 mux3_r8 << " 			IFFTROMD0_in,                                                               \n";
 mux3_r8 << " 			IFFTROMD1_in,                                                               \n";
 mux3_r8 << " 			IFFTROMD2_in,                                                               \n";
 mux3_r8 << " 			IFFTROMD3_in,                                                               \n";
 mux3_r8 << "           ROMD0_in,                                                                 \n";
 mux3_r8 << " 			ROMD1_in,                                                                   \n";
 mux3_r8 << " 			ROMD2_in,                                                                   \n";
 mux3_r8 << " 			ROMD3_in,                                                                   \n";
 mux3_r8 << " 		    FFTBD0_in,                                                                  \n";
 mux3_r8 << " 			FFTBD1_in,                                                                  \n";
 mux3_r8 << " 			FFTBD2_in,                                                                  \n";
 mux3_r8 << " 			FFTBD3_in,                                                                  \n";
 mux3_r8 << " 			FFTBD4_in,                                                                  \n";
 mux3_r8 << " 			FFTBD5_in,                                                                  \n";
 mux3_r8 << " 			FFTBD6_in,                                                                  \n";
 mux3_r8 << " 			FFTBD7_in,                                                                  \n";
 mux3_r8 << " 			RA1D_in,                                                                    \n";
 mux3_r8 << " 			RA2D_in,                                                                    \n";
 mux3_r8 << " 			RA3D_in,                                                                    \n";
 mux3_r8 << " 			RA5D_in,                                                                    \n";
 mux3_r8 << " 			RA6D_in,                                                                    \n";
 mux3_r8 << " 			RA7D_in,                                                                    \n";
 mux3_r8 << " 			Mul_sel,                                                                    \n";
 mux3_r8 << " 			mode_sel                                                                    \n";
 mux3_r8 << " 			) ;                                                                         \n";
 mux3_r8 << " 			                                                                            \n";
 mux3_r8 << " parameter P_WIDTH   = 64 ;                                                            \n";
 mux3_r8 << " parameter SD_WIDTH  = 128 ;                                                           \n";
 mux3_r8 << " parameter SEG1  = 64 ;                                                                \n";
 mux3_r8 << " parameter SEG2  = 128 ;                                                               \n";
 mux3_r8 << "                                                                                       \n";
 mux3_r8 << " parameter P_ONE   = 64'd1 ;                                                           \n";
 mux3_r8 << " parameter PINV    = 64'd" << IN <<"; // inverse N                              \n";
 mux3_r8 << "                                                                                       \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB0_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB1_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB2_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB3_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB4_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB5_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB6_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulB7_out ;                                                      \n";
 mux3_r8 << " 			                                                                            \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulA1_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulA2_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulA3_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulA5_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulA6_out ;                                                      \n";
 mux3_r8 << " output [P_WIDTH-1:0] MulA7_out ;                                                      \n";
 mux3_r8 << "                                                                                       \n";
 mux3_r8 << " input [P_WIDTH-1:0]  IFFTROMD0_in ;                                                   \n";
 mux3_r8 << " input [SD_WIDTH-1:0] IFFTROMD1_in ;                                                   \n";
 mux3_r8 << " input [SD_WIDTH-1:0] IFFTROMD2_in ;                                                   \n";
 mux3_r8 << " input [SD_WIDTH-1:0] IFFTROMD3_in ;                                                   \n";
 mux3_r8 << " input [P_WIDTH-1:0]  ROMD0_in ;                                                       \n";
 mux3_r8 << " input [SD_WIDTH-1:0] ROMD1_in ;                                                       \n";
 mux3_r8 << " input [SD_WIDTH-1:0] ROMD2_in ;                                                       \n";
 mux3_r8 << " input [SD_WIDTH-1:0] ROMD3_in ;                                                       \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD0_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD1_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD2_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD3_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD4_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD5_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD6_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  FFTBD7_in ;                                                      \n";
 mux3_r8 << " input [P_WIDTH-1:0]  RA1D_in ;                                                        \n";
 mux3_r8 << " input [P_WIDTH-1:0]  RA2D_in ;                                                        \n";
 mux3_r8 << " input [P_WIDTH-1:0]  RA3D_in ;                                                        \n";
 mux3_r8 << " input [P_WIDTH-1:0]  RA5D_in ;                                                        \n";
 mux3_r8 << " input [P_WIDTH-1:0]  RA6D_in ;                                                        \n";
 mux3_r8 << " input [P_WIDTH-1:0]  RA7D_in ;                                                        \n";
 mux3_r8 << " input [1:0]          Mul_sel ;                                                        \n";
 mux3_r8 << " input                mode_sel ;                                                       \n";
 mux3_r8 << "                                                                                       \n";
 mux3_r8 << "                                                                                       \n";
 mux3_r8 << "                                                                                       \n";
 mux3_r8 << " 	//                                                                                  \n";
 mux3_r8 << " 	assign MulB0_out = (Mul_sel==2'd1)? P_ONE :                                         \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD0_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;                                  \n";
 mux3_r8 << " 	//                                                                                  \n";
 mux3_r8 << " 	assign MulB1_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD0_in :                  \n";
 mux3_r8 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD0_in :              \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD1_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;                                  \n";
 mux3_r8 << " 	//                                                                                  \n";
 mux3_r8 << " 	assign MulB2_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG2-1:SEG1] :     \n";
 mux3_r8 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG2-1:SEG1] : \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD2_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r8 << " 	//                                                                                  \n";
 mux3_r8 << " 	assign MulB3_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG1-1:0] :        \n";
 mux3_r8 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG1-1:0] :    \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD3_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r8 << " 					                                                                    \n";
 mux3_r8 << " 	assign MulB4_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD2_in[SEG2-1:SEG1] :     \n";
 mux3_r8 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD2_in[SEG2-1:SEG1] : \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD4_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r8 << " 					                                                                    \n";
 mux3_r8 << " 	assign MulB5_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD2_in[SEG1-1:0] :        \n";
 mux3_r8 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD2_in[SEG1-1:0] :    \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD5_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r8 << " 					                                                                    \n"; 
 mux3_r8 << " 	assign MulB6_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD3_in[SEG2-1:SEG1] :     \n";
 mux3_r8 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD3_in[SEG2-1:SEG1] : \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD6_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r8 << " 	//                                                                                  \n";
 mux3_r8 << " 	assign MulB7_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD3_in[SEG1-1:0] :        \n";
 mux3_r8 << " 					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD3_in[SEG1-1:0] :    \n";
 mux3_r8 << " 					   (Mul_sel==2'd2)? FFTBD7_in :                                     \n";
 mux3_r8 << " 					   (Mul_sel==2'd3)? PINV : P_ONE ;				                    \n";
 mux3_r8 << " 					                                                                    \n"; 
 mux3_r8 << "     // change RA output position in IFFT                                              \n";
 mux3_r8 << "     assign MulA1_out = (mode_sel==1'b1)? RA7D_in : RA1D_in ; \n";
 mux3_r8 << "     //                                                       \n";
 mux3_r8 << "     assign MulA2_out = (mode_sel==1'b1)? RA6D_in : RA2D_in ; \n";
 mux3_r8 << "     //                                                       \n";
 mux3_r8 << "     assign MulA3_out = (mode_sel==1'b1)? RA5D_in : RA3D_in ; \n";
 mux3_r8 << "     //                                                       \n";
 mux3_r8 << "     assign MulA5_out = (mode_sel==1'b1)? RA3D_in : RA5D_in ; \n";
 mux3_r8 << "     //                                                       \n";
 mux3_r8 << "     assign MulA6_out = (mode_sel==1'b1)? RA2D_in : RA6D_in ; \n";
 mux3_r8 << "     //                                                       \n";
 mux3_r8 << "     assign MulA7_out = (mode_sel==1'b1)? RA1D_in : RA7D_in ; \n";
 mux3_r8 << "                                                                                       \n";
 mux3_r8 << " 	                                                                                    \n";
 mux3_r8 << " endmodule                                                                             \n";
     mux3_r8.close();    
}  
void Mux::Mux4_r8(std::string string_in){
	 std::ofstream mux4_r8;
     std::string        string_buf = "/Mux4.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux4_r8.open(ss.str());
 mux4_r8 << " `timescale 1 ns/1 ps                                           \n";
 mux4_r8 << " module Mux4(CRUD0_out,                                         \n";
 mux4_r8 << " 			CRUD1_out,                                           \n";
 mux4_r8 << " 			CRUD2_out,                                           \n";
 mux4_r8 << " 			CRUD3_out,                                           \n";
 mux4_r8 << " 			CRUD4_out,                                           \n";
 mux4_r8 << " 			CRUD5_out,                                           \n";
 mux4_r8 << " 			CRUD6_out,                                           \n";
 mux4_r8 << " 			CRUD7_out,                                           \n";
 mux4_r8 << " 			IFFTD0_in,                                           \n";
 mux4_r8 << "             IFFTD1_in,                                         \n";
 mux4_r8 << "             IFFTD2_in,                                         \n";
 mux4_r8 << "             IFFTD3_in,                                         \n";
 mux4_r8 << "             IFFTD4_in,                                         \n";
 mux4_r8 << "             IFFTD5_in,                                         \n";
 mux4_r8 << "             IFFTD6_in,                                         \n";
 mux4_r8 << "             IFFTD7_in,                                         \n";
 mux4_r8 << " 			m2_sel                                               \n";
 mux4_r8 << " 			) ;                                                  \n";
 mux4_r8 << " 			                                                     \n";
 mux4_r8 << " parameter P_WIDTH   = 64 ;                                     \n";
 mux4_r8 << " parameter P_ZERO    = 64'h0 ;                                  \n";
 mux4_r8 << "                                                                \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD0_out ;                               \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD1_out ;                               \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD2_out ;                               \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD3_out ;                               \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD4_out ;                               \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD5_out ;                               \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD6_out ;                               \n";
 mux4_r8 << " output [P_WIDTH-1:0] CRUD7_out ;                               \n";
 mux4_r8 << "                                                                \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD0_in ;                               \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD1_in ;                               \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD2_in ;                               \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD3_in ;                               \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD4_in ;                               \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD5_in ;                               \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD6_in ;                               \n";
 mux4_r8 << " input [P_WIDTH-1:0]  IFFTD7_in ;                               \n";
 mux4_r8 << " input                m2_sel ;                                  \n";
 mux4_r8 << "                                                                \n";
 mux4_r8 << "                                                                \n";
 mux4_r8 << "                                                                \n";
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD0_out = (m2_sel==1'b1)? IFFTD0_in : P_ZERO ;      \n";
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD1_out = (m2_sel==1'b1)? IFFTD1_in : P_ZERO ;		 \n";	  
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD2_out = (m2_sel==1'b1)? IFFTD2_in : P_ZERO ;		 \n";	  
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD3_out = (m2_sel==1'b1)? IFFTD3_in : P_ZERO ;		 \n";
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD4_out = (m2_sel==1'b1)? IFFTD4_in : P_ZERO ;      \n";
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD5_out = (m2_sel==1'b1)? IFFTD5_in : P_ZERO ;		 \n";	  
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD6_out = (m2_sel==1'b1)? IFFTD6_in : P_ZERO ;		 \n";	  
 mux4_r8 << " 	//                                                           \n";
 mux4_r8 << " 	assign CRUD7_out = (m2_sel==1'b1)? IFFTD7_in : P_ZERO ;		 \n";	  
 mux4_r8 << " 	                                                             \n";
 mux4_r8 << "                                                                \n";
 mux4_r8 << " 	                                                             \n";
 mux4_r8 << " endmodule                                                      \n";
     mux4_r8.close();    
}
void Mux::Mux5_r8(std::string string_in){
	 std::ofstream mux5_r8;
     std::string        string_buf = "/Mux5.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux5_r8.open(ss.str());  
 mux5_r8 << " //=============================================                            \n";
 mux5_r8 << " //Data:2020/04/08                                                          \n";
 mux5_r8 << " //note:re-order factor Mux                                                 \n";
 mux5_r8 << " //writter:shi yong wu                                                      \n";
 mux5_r8 << " //=============================================                            \n";
 mux5_r8 << " `timescale 1ns/10ps                                                        \n";
 mux5_r8 << " module Mux5(                                                               \n";
 mux5_r8 << "         B0M0_ain_o,                                                        \n";
 mux5_r8 << "         B0M1_ain_o,                                                        \n";
 mux5_r8 << "         B0M2_ain_o,                                                        \n";
 mux5_r8 << "         B0M3_ain_o,                                                        \n";
 mux5_r8 << "         B0M4_ain_o,                                                        \n";
 mux5_r8 << "         B0M5_ain_o,                                                        \n";
 mux5_r8 << "         B0M6_ain_o,                                                        \n";
 mux5_r8 << "         B0M7_ain_o,                                                        \n";
 mux5_r8 << "         B0M0_bin_o,                                                        \n";
 mux5_r8 << "         B0M1_bin_o,                                                        \n";
 mux5_r8 << "         B0M2_bin_o,                                                        \n";
 mux5_r8 << "         B0M3_bin_o,                                                        \n";
 mux5_r8 << "         B0M4_bin_o,                                                        \n";
 mux5_r8 << "         B0M5_bin_o,                                                        \n";
 mux5_r8 << "         B0M6_bin_o,                                                        \n";
 mux5_r8 << "         B0M7_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M0_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M1_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M2_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M3_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M4_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M5_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M6_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M7_ain_o,                                                        \n";
 mux5_r8 << " 		  B1M0_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M1_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M2_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M3_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M4_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M5_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M6_bin_o,                                                        \n";
 mux5_r8 << " 		  B1M7_bin_o,                                                        \n";
 mux5_r8 << "         ExtB0_D0,                                                          \n";
 mux5_r8 << "         ExtB0_D1,                                                          \n";
 mux5_r8 << "         ExtB0_D2,                                                          \n";
 mux5_r8 << "         ExtB0_D3,                                                          \n";
 mux5_r8 << "         ExtB0_D4,                                                          \n";
 mux5_r8 << "         ExtB0_D5,                                                          \n";
 mux5_r8 << "         ExtB0_D6,                                                          \n";
 mux5_r8 << "         ExtB0_D7,                                                          \n";
 mux5_r8 << "         ExtB1_D0_pip,                                                      \n";
 mux5_r8 << "         ExtB1_D1_pip,                                                      \n";
 mux5_r8 << "         ExtB1_D2_pip,                                                      \n";
 mux5_r8 << "         ExtB1_D3_pip,                                                      \n";
 mux5_r8 << "         ExtB1_D4_pip,                                                      \n";
 mux5_r8 << "         ExtB1_D5_pip,                                                      \n";
 mux5_r8 << "         ExtB1_D6_pip,                                                      \n";
 mux5_r8 << "         ExtB1_D7_pip,                                                      \n";
 mux5_r8 << "         SP_r0,                                                             \n";
 mux5_r8 << "         SP_r1,                                                             \n";
 mux5_r8 << "         SP_r2,                                                             \n";
 mux5_r8 << "         SP_r3,                                                             \n";
 mux5_r8 << "         SP_r4,                                                             \n";
 mux5_r8 << "         SP_r5,                                                             \n";
 mux5_r8 << "         SP_r6,                                                             \n";
 mux5_r8 << "         SP_r7,                                                             \n";
 mux5_r8 << " 		  CRUD0,                                                             \n";
 mux5_r8 << " 		  CRUD1,                                                             \n";
 mux5_r8 << " 		  CRUD2,                                                             \n";
 mux5_r8 << " 		  CRUD3,                                                             \n";
 mux5_r8 << " 		  CRUD4,                                                             \n";
 mux5_r8 << " 		  CRUD5,                                                             \n";
 mux5_r8 << " 		  CRUD6,                                                             \n";
 mux5_r8 << " 		  CRUD7,                                                             \n";
 mux5_r8 << " 		  reorderb1r0,                                                       \n";
 mux5_r8 << " 		  reorderb1r1,                                                       \n";
 mux5_r8 << " 		  reorderb1r2,                                                       \n";
 mux5_r8 << " 		  reorderb1r3,                                                       \n";
 mux5_r8 << "         reorderb0r0,                                                       \n";
 mux5_r8 << "         reorderb0r1,                                                       \n";
 mux5_r8 << "         reorderb0r2,                                                       \n";
 mux5_r8 << "         reorderb0r3,                                                       \n";
 mux5_r8 << "         ireorderr0,                                                        \n";
 mux5_r8 << "         ireorderr1,                                                        \n";
 mux5_r8 << "         ireorderr2,                                                        \n";
 mux5_r8 << "         ireorderr3,                                                        \n";
 mux5_r8 << "         ireorderr4,                                                        \n";
 mux5_r8 << "         ireorderr5,                                                        \n";
 mux5_r8 << "         ireorderr6,                                                        \n";
 mux5_r8 << "         ireorderr7,                                                        \n";
 mux5_r8 << "         re_sel                                                             \n";
 mux5_r8 << " );                                                                         \n";
 mux5_r8 << "                                                                            \n";
 mux5_r8 << " parameter CP_WIDTH = "<< CP_width <<";                                     \n";
 mux5_r8 << " parameter CP_ZERO  = "<< CP_width <<"'d0;                                  \n";
 mux5_r8 << " parameter DOP_WIDTH  = " << (2*CP_width) << ";  //Double data width        \n";
 mux5_r8 << "                                                                            \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M0_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M1_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M2_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M3_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M4_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M5_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M6_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M7_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M0_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M1_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M2_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M3_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M4_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M5_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M6_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B0M7_bin_o; \n";
 mux5_r8 << "\n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M0_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M1_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M2_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M3_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M4_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M5_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M6_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M7_ain_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M0_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M1_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M2_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M3_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M4_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M5_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M6_bin_o; \n";
 mux5_r8 << " output [CP_WIDTH-1:0] B1M7_bin_o; \n";
 mux5_r8 << "\n";
 mux5_r8 << " input                 re_sel ;        \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D0;       \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D1;       \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D2;       \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D3;       \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D4;       \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D5;       \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D6;       \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] ExtB0_D7;       \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D0_pip;   \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D1_pip;   \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D2_pip;   \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D3_pip;   \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D4_pip;   \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D5_pip;   \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D6_pip;   \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ExtB1_D7_pip;   \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r0;    \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r1;    \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r2;    \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r3;    \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r4;    \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r5;    \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r6;    \n";
 mux5_r8 << " input  [CP_WIDTH-1:0] SP_r7;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD0;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD1;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD2;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD3;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD4;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD5;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD6;    \n";
 mux5_r8 << " input [DOP_WIDTH-1:0] CRUD7;    \n";
 mux5_r8 << "\n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb0r0; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb0r1; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb0r2; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb0r3; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb1r0; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb1r1; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb1r2; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  reorderb1r3; \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr0;  \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr1;  \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr2;  \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr3;  \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr4;  \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr5;  \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr6;  \n";
 mux5_r8 << " input [CP_WIDTH-1:0]  ireorderr7;  \n";
 mux5_r8 << " \n";
 mux5_r8 << " \n"; 
 mux5_r8 << " \n";
 mux5_r8 << "   assign B0M0_ain_o = ( re_sel == 1'b1) ?  ExtB0_D0: SP_r0;\n";
 mux5_r8 << "   assign B0M1_ain_o = ( re_sel == 1'b1) ?  ExtB0_D1: SP_r1;\n";
 mux5_r8 << "   assign B0M2_ain_o = ( re_sel == 1'b1) ?  ExtB0_D2: SP_r2;\n";
 mux5_r8 << "   assign B0M3_ain_o = ( re_sel == 1'b1) ?  ExtB0_D3: SP_r3;\n";
 mux5_r8 << "   assign B0M4_ain_o = ( re_sel == 1'b1) ?  ExtB0_D4: SP_r4;\n";
 mux5_r8 << "   assign B0M5_ain_o = ( re_sel == 1'b1) ?  ExtB0_D5: SP_r5;\n";
 mux5_r8 << "   assign B0M6_ain_o = ( re_sel == 1'b1) ?  ExtB0_D6: SP_r6;\n";
 mux5_r8 << "   assign B0M7_ain_o = ( re_sel == 1'b1) ?  ExtB0_D7: SP_r7;\n";
 mux5_r8 << " \n";
 mux5_r8 << " 	assign B1M0_ain_o = ( re_sel == 1'b1) ? ExtB1_D0_pip : CRUD0[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << " 	assign B1M1_ain_o = ( re_sel == 1'b1) ? ExtB1_D1_pip : CRUD1[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << " 	assign B1M2_ain_o = ( re_sel == 1'b1) ? ExtB1_D2_pip : CRUD2[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << " 	assign B1M3_ain_o = ( re_sel == 1'b1) ? ExtB1_D3_pip : CRUD3[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << " 	assign B1M4_ain_o = ( re_sel == 1'b1) ? ExtB1_D4_pip : CRUD4[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << " 	assign B1M5_ain_o = ( re_sel == 1'b1) ? ExtB1_D5_pip : CRUD5[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << " 	assign B1M6_ain_o = ( re_sel == 1'b1) ? ExtB1_D6_pip : CRUD6[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << " 	assign B1M7_ain_o = ( re_sel == 1'b1) ? ExtB1_D7_pip : CRUD7[DOP_WIDTH-1:CP_WIDTH] ;\n";
 mux5_r8 << "                                                        //test         \n";
 mux5_r8 << "   assign B0M0_bin_o = ( re_sel == 1'b1) ?  reorderb0r0: ireorderr0;// \n";
 mux5_r8 << "   assign B0M1_bin_o = ( re_sel == 1'b1) ?  reorderb0r1: ireorderr1;// \n";
 mux5_r8 << "   assign B0M2_bin_o = ( re_sel == 1'b1) ?  reorderb0r2: ireorderr2;// \n";
 mux5_r8 << "   assign B0M3_bin_o = ( re_sel == 1'b1) ?  reorderb0r3: ireorderr3;// \n";
 mux5_r8 << "   assign B0M4_bin_o = ( re_sel == 1'b1) ?  CP_ZERO    : ireorderr4;// \n";
 mux5_r8 << "   assign B0M5_bin_o = ( re_sel == 1'b1) ?  CP_ZERO    : ireorderr5;// \n";
 mux5_r8 << "   assign B0M6_bin_o = ( re_sel == 1'b1) ?  CP_ZERO    : ireorderr6;// \n";
 mux5_r8 << "   assign B0M7_bin_o = ( re_sel == 1'b1) ?  CP_ZERO    : ireorderr7;// \n";
 mux5_r8 << "\n";
 mux5_r8 << " 	assign B1M0_bin_o = ( re_sel == 1'b1) ?  reorderb1r0 : CRUD0[CP_WIDTH-1:0] ;\n";
 mux5_r8 << " 	assign B1M1_bin_o = ( re_sel == 1'b1) ?  reorderb1r1 : CRUD1[CP_WIDTH-1:0] ;\n";
 mux5_r8 << " 	assign B1M2_bin_o = ( re_sel == 1'b1) ?  reorderb1r2 : CRUD2[CP_WIDTH-1:0] ;\n";
 mux5_r8 << " 	assign B1M3_bin_o = ( re_sel == 1'b1) ?  reorderb1r3 : CRUD3[CP_WIDTH-1:0] ;\n";
 mux5_r8 << " 	assign B1M4_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : CRUD4[CP_WIDTH-1:0] ;\n";
 mux5_r8 << " 	assign B1M5_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : CRUD5[CP_WIDTH-1:0] ;\n";
 mux5_r8 << " 	assign B1M6_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : CRUD6[CP_WIDTH-1:0] ;\n";
 mux5_r8 << " 	assign B1M7_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : CRUD7[CP_WIDTH-1:0] ;\n";
 mux5_r8 << "                                                                            \n";
 mux5_r8 << " endmodule                                                                  \n";           

     mux5_r8.close();
}
void Mux::Mux6_r8(std::string string_in){
	 std::ofstream mux6_r8;
     std::string        string_buf = "/Mux6.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux6_r8.open(ss.str()); 
 mux6_r8 << " //=============================================                                             \n";
 mux6_r8 << " //Data:2020/04/08                                                                           \n";
 mux6_r8 << " //note:output data and ExtB0_Dx Mux                                                         \n";
 mux6_r8 << " //writter:shi yong wu                                                                       \n";
 mux6_r8 << " //=============================================                                             \n";
 mux6_r8 << " `timescale 1ns/10ps                                                                         \n";
 mux6_r8 << " module Mux6(                                                                                \n";
 mux6_r8 << "         ExtB0_D0,                                                                           \n";
 mux6_r8 << "         ExtB0_D1,                                                                           \n";
 mux6_r8 << "         ExtB0_D2,                                                                           \n";
 mux6_r8 << "         ExtB0_D3,                                                                           \n";
 mux6_r8 << "         ExtB0_D4,                                                                           \n";
 mux6_r8 << "         ExtB0_D5,                                                                           \n";
 mux6_r8 << "         ExtB0_D6,                                                                           \n";
 mux6_r8 << "         ExtB0_D7,                                                                           \n";
 mux6_r8 << "         ExtB1_D0,                                                             \n";
 mux6_r8 << "         ExtB1_D1,                                                             \n";
 mux6_r8 << "         ExtB1_D2,                                                             \n";
 mux6_r8 << "         ExtB1_D3,                                                             \n";
 mux6_r8 << "         ExtB1_D4,                                                             \n";
 mux6_r8 << "         ExtB1_D5,                                                             \n";
 mux6_r8 << "         ExtB1_D6,                                                             \n";
 mux6_r8 << "         ExtB1_D7,                                                             \n";
 mux6_r8 << "         MulD0_out,                                                                          \n";
 mux6_r8 << "         MulD1_out,                                                                          \n";
 mux6_r8 << "         MulD2_out,                                                                          \n";
 mux6_r8 << "         MulD3_out,                                                                          \n";
 mux6_r8 << "         MulD4_out,                                                                          \n";
 mux6_r8 << "         MulD5_out,                                                                          \n";
 mux6_r8 << "         MulD6_out,                                                                          \n";
 mux6_r8 << "         MulD7_out,                                                                          \n";
 mux6_r8 << "         BR_S0,                                                                \n";
 mux6_r8 << "         BR_S1,                                                                \n";
 mux6_r8 << "         BR_S2,                                                                \n";
 mux6_r8 << "         BR_S3,                                                                \n";
 mux6_r8 << "         BR_S4,                                                                \n";
 mux6_r8 << "         BR_S5,                                                                \n";
 mux6_r8 << "         BR_S6,                                                                \n";
 mux6_r8 << "         BR_S7,                                                                \n";
 mux6_r8 << "         B0M0_result,                                                                        \n";
 mux6_r8 << "         B0M1_result,                                                                        \n";
 mux6_r8 << "         B0M2_result,                                                                        \n";
 mux6_r8 << "         B0M3_result,                                                                        \n";
 mux6_r8 << "         B0M4_result,                                                                        \n";
 mux6_r8 << "         B0M5_result,                                                                        \n";
 mux6_r8 << "         B0M6_result,                                                                        \n";
 mux6_r8 << "         B0M7_result,                                                                        \n";
 mux6_r8 << "         B1M0_result,                                                          \n";
 mux6_r8 << "         B1M1_result,                                                          \n";
 mux6_r8 << "         B1M2_result,                                                          \n";
 mux6_r8 << "         B1M3_result,                                                          \n";
 mux6_r8 << "         B1M4_result,                                                          \n";
 mux6_r8 << "         B1M5_result,                                                          \n";
 mux6_r8 << "         B1M6_result,                                                          \n";
 mux6_r8 << "         B1M7_result,                                                          \n";
 mux6_r8 << "         m2_sel                                                                \n";
 mux6_r8 << " );                                                                                          \n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << " parameter P_WIDTH  = 64;                                                                    \n";
 mux6_r8 << " parameter CP_WIDTH = "<< CP_width <<";\n";
 mux6_r8 << " parameter P_ZERO   = 64'd0;                                                                 \n";
 mux6_r8 << " parameter CP_ZERO  = "<< CP_width <<"'d0;\n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D0;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D1;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D2;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D3;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D4;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D5;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D6;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB0_D7;                                                             \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D0;                                               \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D1;                                               \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D2;                                               \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D3;                                               \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D4;                                               \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D5;                                               \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D6;                                               \n";
 mux6_r8 << " output [P_WIDTH-1:0]  ExtB1_D7;                                               \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD0_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD1_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD2_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD3_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD4_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD5_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD6_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] MulD7_out;                                              \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S0;                                                  \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S1;                                                  \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S2;                                                  \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S3;                                                  \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S4;                                                  \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S5;                                                  \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S6;                                                  \n";
 mux6_r8 << " output [CP_WIDTH-1:0] BR_S7;                                                  \n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << " input                m2_sel;                                                  \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M0_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M1_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M2_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M3_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M4_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M5_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M6_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B0M7_result;                                                           \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M0_result;                                             \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M1_result;                                             \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M2_result;                                             \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M3_result;                                             \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M4_result;                                             \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M5_result;                                             \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M6_result;                                             \n";
 mux6_r8 << " input  [P_WIDTH-1:0] B1M7_result;                                             \n";
 mux6_r8 << "                                                                               \n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << "   assign ExtB0_D0 = ( m2_sel == 1'b1) ?  P_ZERO: B0M0_result;                         \n";
 mux6_r8 << "   assign ExtB0_D1 = ( m2_sel == 1'b1) ?  P_ZERO: B0M1_result;                         \n";
 mux6_r8 << "   assign ExtB0_D2 = ( m2_sel == 1'b1) ?  P_ZERO: B0M2_result;                         \n";
 mux6_r8 << "   assign ExtB0_D3 = ( m2_sel == 1'b1) ?  P_ZERO: B0M3_result;                         \n";
 mux6_r8 << "   assign ExtB0_D4 = ( m2_sel == 1'b1) ?  P_ZERO: B0M4_result;                         \n";
 mux6_r8 << "   assign ExtB0_D5 = ( m2_sel == 1'b1) ?  P_ZERO: B0M5_result;                         \n";
 mux6_r8 << "   assign ExtB0_D6 = ( m2_sel == 1'b1) ?  P_ZERO: B0M6_result;                         \n";
 mux6_r8 << "   assign ExtB0_D7 = ( m2_sel == 1'b1) ?  P_ZERO: B0M7_result;                         \n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << "   assign ExtB1_D0 = ( m2_sel == 1'b1) ?  P_ZERO: B1M0_result;                 \n";
 mux6_r8 << "   assign ExtB1_D1 = ( m2_sel == 1'b1) ?  P_ZERO: B1M1_result;                 \n";
 mux6_r8 << "   assign ExtB1_D2 = ( m2_sel == 1'b1) ?  P_ZERO: B1M2_result;                 \n";
 mux6_r8 << "   assign ExtB1_D3 = ( m2_sel == 1'b1) ?  P_ZERO: B1M3_result;                 \n";
 mux6_r8 << "   assign ExtB1_D4 = ( m2_sel == 1'b1) ?  P_ZERO: B1M4_result;                 \n";
 mux6_r8 << "   assign ExtB1_D5 = ( m2_sel == 1'b1) ?  P_ZERO: B1M5_result;                 \n";
 mux6_r8 << "   assign ExtB1_D6 = ( m2_sel == 1'b1) ?  P_ZERO: B1M6_result;                 \n";
 mux6_r8 << "   assign ExtB1_D7 = ( m2_sel == 1'b1) ?  P_ZERO: B1M7_result;                 \n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << "   assign MulD0_out = ( m2_sel == 1'b1) ?  B0M0_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "   assign MulD1_out = ( m2_sel == 1'b1) ?  B0M1_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "   assign MulD2_out = ( m2_sel == 1'b1) ?  B0M2_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "   assign MulD3_out = ( m2_sel == 1'b1) ?  B0M3_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "   assign MulD4_out = ( m2_sel == 1'b1) ?  B0M4_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "   assign MulD5_out = ( m2_sel == 1'b1) ?  B0M5_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "   assign MulD6_out = ( m2_sel == 1'b1) ?  B0M6_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "   assign MulD7_out = ( m2_sel == 1'b1) ?  B0M7_result[CP_WIDTH-1:0] : CP_ZERO;        \n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << "   assign BR_S0 = ( m2_sel == 1'b1) ?  B1M0_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "   assign BR_S1 = ( m2_sel == 1'b1) ?  B1M1_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "   assign BR_S2 = ( m2_sel == 1'b1) ?  B1M2_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "   assign BR_S3 = ( m2_sel == 1'b1) ?  B1M3_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "   assign BR_S4 = ( m2_sel == 1'b1) ?  B1M4_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "   assign BR_S5 = ( m2_sel == 1'b1) ?  B1M5_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "   assign BR_S6 = ( m2_sel == 1'b1) ?  B1M6_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "   assign BR_S7 = ( m2_sel == 1'b1) ?  B1M7_result[CP_WIDTH-1:0] : CP_ZERO;    \n";
 mux6_r8 << "                                                                                             \n";
 mux6_r8 << " endmodule                                                                                   \n";  

     mux6_r8.close();
}

//radix-16
void Mux::Mux1(std::string string_in){
	 std::ofstream mux1;
     std::string        string_buf = "/Mux1.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux1.open(ss.str()); 
     mux1 << "`timescale 1 ns/1 ps                                                                               \n";
     mux1 << "module Mux1(BN0_MEM0_Dout,                                                                         \n";
     mux1 << "			  BN0_MEM1_Dout,                                                                           \n";
     mux1 << "			  BN0_MEM2_Dout,                                                                           \n";
     mux1 << "			  BN0_MEM3_Dout,                                                                           \n";
     mux1 << "			  BN0_MEM4_Dout,                                                                           \n";
     mux1 << "			  BN0_MEM5_Dout,                                                                           \n";
     mux1 << "			  BN0_MEM6_Dout,                                                                           \n";
     mux1 << "			  BN0_MEM7_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM0_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM1_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM2_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM3_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM4_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM5_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM6_Dout,                                                                           \n";
     mux1 << "			  BN1_MEM7_Dout,                                                                           \n";
     mux1 << "			  MA0_out,                                                                                 \n";
     mux1 << "			  MA1_out,                                                                                 \n";
     mux1 << "		      ExtB0_D0_in,                                                                             \n";
     mux1 << "			  ExtB0_D1_in,                                                                             \n";
     mux1 << "			  ExtB0_D2_in,                                                                             \n";
     mux1 << "			  ExtB0_D3_in,                                                                             \n";
     mux1 << "			  ExtB0_D4_in,                                                                             \n";
     mux1 << "			  ExtB0_D5_in,                                                                             \n";
     mux1 << "			  ExtB0_D6_in,                                                                             \n";
     mux1 << "			  ExtB0_D7_in,                                                                             \n";
     mux1 << "			  ExtB0_D8_in,                                                                             \n";
     mux1 << "			  ExtB0_D9_in,                                                                             \n";
     mux1 << "			  ExtB0_D10_in,                                                                            \n";
     mux1 << "			  ExtB0_D11_in,                                                                            \n";
     mux1 << "			  ExtB0_D12_in,                                                                            \n";
     mux1 << "			  ExtB0_D13_in,                                                                            \n";
     mux1 << "			  ExtB0_D14_in,                                                                            \n";
     mux1 << "			  ExtB0_D15_in,                                                                            \n";
     mux1 << "			  ExtB1_D0_in,                                                                             \n";
     mux1 << "			  ExtB1_D1_in,                                                                             \n";
     mux1 << "            ExtB1_D2_in,                                                                           \n";
     mux1 << "			  ExtB1_D3_in,                                                                             \n";
     mux1 << "			  ExtB1_D4_in,                                                                             \n";
     mux1 << "			  ExtB1_D5_in,                                                                             \n";
     mux1 << "			  ExtB1_D6_in,                                                                             \n";
     mux1 << "			  ExtB1_D7_in,                                                                             \n";
     mux1 << "			  ExtB1_D8_in,                                                                             \n";
     mux1 << "			  ExtB1_D9_in,                                                                             \n";
     mux1 << "			  ExtB1_D10_in,                                                                            \n";
     mux1 << "			  ExtB1_D11_in,                                                                            \n";
     mux1 << "			  ExtB1_D12_in,                                                                            \n";
     mux1 << "			  ExtB1_D13_in,                                                                            \n";
     mux1 << "			  ExtB1_D14_in,                                                                            \n";
     mux1 << "			  ExtB1_D15_in,                                                                            \n";
     mux1 << "			  RDC_in0,                                                                                 \n";
     mux1 << "			  RDC_in1,                                                                                 \n";
     mux1 << "			  RDC_in2,                                                                                 \n";
     mux1 << "			  RDC_in3,                                                                                 \n";
     mux1 << "			  RDC_in4,                                                                                 \n";
     mux1 << "			  RDC_in5,                                                                                 \n";
     mux1 << "			  RDC_in6,                                                                                 \n";
     mux1 << "			  RDC_in7,                                                                                 \n";
     mux1 << "			  RDC_in8,                                                                                 \n";
     mux1 << "			  RDC_in9,                                                                                 \n";
     mux1 << "			  RDC_in10,                                                                                \n";
     mux1 << "			  RDC_in11,                                                                                \n";
     mux1 << "			  RDC_in12,                                                                                \n";
     mux1 << "			  RDC_in13,                                                                                \n";
     mux1 << "			  RDC_in14,                                                                                \n";
     mux1 << "			  RDC_in15,                                                                                \n";
     mux1 << "			  ExtMA_in,                                                                                \n";
     mux1 << "			  AGUMA_in,                                                                                \n";
     mux1 << "			  WMA_in,                                                                                  \n";
     mux1 << "			  wen0_in,                                                                                 \n";
     mux1 << "			  wen1_in,                                                                                 \n";
     mux1 << "			  SD_sel                                                                                   \n";
     mux1 << "			  ) ;                                                                                      \n";
     mux1 << "			                                                                                         \n";
     mux1 << "			                                                                                         \n";
     mux1 << "parameter SD_WIDTH  = 128 ;                                                                        \n";
     mux1 << "parameter CP_WIDTH  = "<< CP_width <<" ;                                                                        \n";
     mux1 << "parameter P_WIDTH   = 64 ;                                                                         \n";
     mux1 << "parameter A_WIDTH   = " << addr_width <<";\n";
     mux1 << "                                                                                                   \n";
     mux1 << "parameter P_ZERO   = 64'h0 ;                                                                       \n";
     mux1 << "parameter CP_ZERO  = " << CP_width << "'h0 ;                                                                       \n";
     mux1 << "                                                                                                   \n";
     mux1 << "                                                                                                   \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM0_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM1_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM2_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM3_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM4_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM5_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM6_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN0_MEM7_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM0_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM1_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM2_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM3_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM4_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM5_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM6_Dout ;                                                              \n";
     mux1 << "output [SD_WIDTH-1:0] BN1_MEM7_Dout ;                                                              \n";
     mux1 << "output [A_WIDTH-1:0]  MA0_out ;                                                                    \n";
     mux1 << "output [A_WIDTH-1:0]  MA1_out ;                                                                    \n";
     mux1 << "                                                                                                   \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D0_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D1_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D2_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D3_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D4_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D5_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D6_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D7_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D8_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D9_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D10_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D11_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D12_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D13_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D14_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB0_D15_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D0_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D1_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D2_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D3_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D4_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D5_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D6_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D7_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D8_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D9_in ;                                                                \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D10_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D11_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D12_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D13_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D14_in ;                                                               \n";
     mux1 << "input  [CP_WIDTH-1:0]  ExtB1_D15_in ;                                                               \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in0 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in1 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in2 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in3 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in4 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in5 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in6 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in7 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in8 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in9 ;                                                                    \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in10 ;                                                                   \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in11 ;                                                                   \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in12 ;                                                                   \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in13 ;                                                                   \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in14 ;                                                                   \n";
     mux1 << "input  [P_WIDTH-1:0]  RDC_in15 ;                                                                   \n";
     mux1 << "input  [A_WIDTH-1:0]  ExtMA_in ;                                                                   \n";
     mux1 << "input  [A_WIDTH-1:0]  AGUMA_in ;                                                                   \n";
     mux1 << "input  [A_WIDTH-1:0]  WMA_in ;                                                                     \n";
     mux1 << "input                 wen0_in ;                                                                    \n";
     mux1 << "input                 wen1_in ;                                                                    \n";
     mux1 << "input                 SD_sel ;                                                                     \n";
     mux1 << "                                                                                                   \n";
     mux1 << "                                                                                                   \n";
     mux1 << "                                                                                                   \n";
     mux1 << "	// Bank0 for op0 and op1                                                                         \n";
     mux1 << "	assign BN0_MEM0_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D0_in,"<<(64-CP_width) <<"'d0,ExtB0_D1_in}) : ({RDC_in0,RDC_in1}) ;       \n";
     mux1 << "	// Bank0 for op2 and op3                                                                         \n";
     mux1 << "	assign BN0_MEM1_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D2_in,"<<( 64 - CP_width ) <<"'d0,ExtB0_D3_in}) : ({RDC_in2,RDC_in3}) ;       \n";
     mux1 << "	// Bank0 for op4 and op5                                                                         \n";
     mux1 << "	assign BN0_MEM2_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D4_in,"<<( 64 - CP_width ) <<"'d0,ExtB0_D5_in}) : ({RDC_in4,RDC_in5}) ;       \n";
     mux1 << "	// Bank0 for op6 and op7                                                                         \n";
     mux1 << "	assign BN0_MEM3_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D6_in,"<<( 64 - CP_width ) <<"'d0,ExtB0_D7_in}) : ({RDC_in6,RDC_in7}) ;       \n";
     mux1 << "	// Bank0 for op8 and op9                                                                         \n";
     mux1 << "	assign BN0_MEM4_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D8_in,"<<( 64 - CP_width ) <<"'d0,ExtB0_D9_in}) : ({RDC_in8,RDC_in9}) ;       \n";
     mux1 << "	// Bank0 for op10 and op11                                                                       \n";
     mux1 << "	assign BN0_MEM5_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D10_in,"<<( 64 - CP_width ) <<"'d0,ExtB0_D11_in}) : ({RDC_in10,RDC_in11}) ;   \n";
     mux1 << "	// Bank0 for op12 and op13                                                                       \n";
     mux1 << "	assign BN0_MEM6_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D12_in,"<<( 64 - CP_width ) <<"'d0,ExtB0_D13_in}) : ({RDC_in12,RDC_in13}) ;   \n";
     mux1 << "	// Bank0 for op14 and op15                                                                       \n";
     mux1 << "	assign BN0_MEM7_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB0_D14_in,"<<( 64 - CP_width ) <<"'d0,ExtB0_D15_in}) : ({RDC_in14,RDC_in15}) ;   \n";
     mux1 << "	                                                                                                 \n";
     mux1 << "	// Bank1 for op0 and op1                                                                         \n";
     mux1 << "	assign BN1_MEM0_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D0_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D1_in}) : ({RDC_in0,RDC_in1}) ;       \n";
     mux1 << "	// Bank1 for op2 and op3                                                                         \n";
     mux1 << "	assign BN1_MEM1_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D2_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D3_in}) : ({RDC_in2,RDC_in3}) ;       \n";
     mux1 << "	// Bank1 for op4 and op5                                                                         \n";
     mux1 << "	assign BN1_MEM2_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D4_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D5_in}) : ({RDC_in4,RDC_in5}) ;       \n";
     mux1 << "	// Bank1 for op6 and op7                                                                         \n";
     mux1 << "	assign BN1_MEM3_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D6_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D7_in}) : ({RDC_in6,RDC_in7}) ;       \n";
     mux1 << "	// Bank1 for op8 and op9                                                                         \n";
     mux1 << "	assign BN1_MEM4_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D8_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D9_in}) : ({RDC_in8,RDC_in9}) ;       \n";
     mux1 << "	// Bank1 for op10 and op11                                                                       \n";
     mux1 << "	assign BN1_MEM5_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D10_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D11_in}) : ({RDC_in10,RDC_in11}) ;   \n";
     mux1 << "	// Bank1 for op12 and op13                                                                       \n";
     mux1 << "	assign BN1_MEM6_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D12_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D13_in}) : ({RDC_in12,RDC_in13}) ;   \n";
     mux1 << "	// Bank1 for op14 and op15                                                                       \n";
     mux1 << "	assign BN1_MEM7_Dout = (SD_sel==1'b1)? ({"<<( 64 - CP_width ) <<"'d0,ExtB1_D14_in,"<<( 64 - CP_width ) <<"'d0,ExtB1_D15_in}) : ({RDC_in14,RDC_in15}) ;   \n";
     mux1 << "	                                                                                                 \n";
     mux1 << "	//                                                                                               \n";
     mux1 << "	assign MA0_out = (SD_sel==1'b1)? ExtMA_in :                                                      \n";
     mux1 << "					 (wen0_in==1'b1)? AGUMA_in : WMA_in ;			                                 \n";
     mux1 << "	//                                                                                               \n";
     mux1 << "	assign MA1_out = (SD_sel==1'b1)? ExtMA_in :                                                      \n";
     mux1 << "					 (wen1_in==1'b1)? AGUMA_in : WMA_in ;                                            \n";
     mux1 << "	                                                                                                 \n";
     mux1 << "endmodule                                                                                          \n";
    mux1.close();
}
void Mux::Mux2(std::string string_in){
     std::ofstream mux2; 
     std::string        string_buf = "/Mux2.v";
     std::stringstream  ss;
     ss << string_in << string_buf;      
     mux2.open(ss.str());
     mux2 << "`timescale 1 ns/1 ps                                                                                   \n";
     mux2 << "module Mux2(RA0_out,                                                                                   \n";
     mux2 << "			  RA1_out,                                                                                   \n";
     mux2 << "			  RA2_out,                                                                                   \n";
     mux2 << "			  RA3_out,                                                                                   \n";
     mux2 << "			  RA4_out,                                                                                   \n";
     mux2 << "			  RA5_out,                                                                                   \n";
     mux2 << "			  RA6_out,                                                                                   \n";
     mux2 << "			  RA7_out,                                                                                   \n";
     mux2 << "			  RA8_out,                                                                                   \n";
     mux2 << "			  RA9_out,                                                                                   \n";
     mux2 << "			  RA10_out,                                                                                  \n";
     mux2 << "			  RA11_out,                                                                                  \n";
     mux2 << "			  RA12_out,                                                                                  \n";
     mux2 << "			  RA13_out,                                                                                  \n";
     mux2 << "			  RA14_out,                                                                                  \n";
     mux2 << "			  RA15_out,                                                                                  \n";
     mux2 << "		      BN0_MEM0_in,                                                                               \n";
     mux2 << "			  BN0_MEM1_in,                                                                               \n";
     mux2 << "			  BN0_MEM2_in,                                                                               \n";
     mux2 << "			  BN0_MEM3_in,                                                                               \n";
     mux2 << "			  BN0_MEM4_in,                                                                               \n";
     mux2 << "			  BN0_MEM5_in,                                                                               \n";
     mux2 << "			  BN0_MEM6_in,                                                                               \n";
     mux2 << "			  BN0_MEM7_in,                                                                               \n";
     mux2 << "			  BN1_MEM0_in,                                                                               \n";
     mux2 << "			  BN1_MEM1_in,                                                                               \n";
     mux2 << "			  BN1_MEM2_in,                                                                               \n";
     mux2 << "			  BN1_MEM3_in,                                                                               \n";
     mux2 << "			  BN1_MEM4_in,                                                                               \n";
     mux2 << "			  BN1_MEM5_in,                                                                               \n";
     mux2 << "			  BN1_MEM6_in,                                                                               \n";
     mux2 << "			  BN1_MEM7_in,                                                                               \n";
     mux2 << "			  BN_sel                                                                                     \n";
     mux2 << "			  ) ;                                                                                        \n";
     mux2 << "			                                                                                             \n";
     mux2 << "			                                                                                             \n";
     mux2 << "parameter SD_WIDTH  = 128 ;                                                                            \n";
     mux2 << "parameter P_WIDTH   = 64 ;                                                                             \n";
     mux2 << "parameter SEG1      = 64 ;                                                                             \n";
     mux2 << "parameter SEG2      = 128 ;                                                                            \n";
     mux2 << "                                                                                                       \n";
     mux2 << "                                                                                                       \n";
     mux2 << "output [P_WIDTH-1:0] RA0_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA1_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA2_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA3_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA4_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA5_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA6_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA7_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA8_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA9_out ;                                                                         \n";
     mux2 << "output [P_WIDTH-1:0] RA10_out ;                                                                        \n";
     mux2 << "output [P_WIDTH-1:0] RA11_out ;                                                                        \n";
     mux2 << "output [P_WIDTH-1:0] RA12_out ;                                                                        \n";
     mux2 << "output [P_WIDTH-1:0] RA13_out ;                                                                        \n";
     mux2 << "output [P_WIDTH-1:0] RA14_out ;                                                                        \n";
     mux2 << "output [P_WIDTH-1:0] RA15_out ;                                                                        \n";
     mux2 << "                                                                                                       \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM0_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM1_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM2_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM3_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM4_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM5_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM6_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN0_MEM7_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM0_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM1_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM2_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM3_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM4_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM5_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM6_in ;                                                                     \n";
     mux2 << "input [SD_WIDTH-1:0] BN1_MEM7_in ;                                                                     \n";
     mux2 << "input                BN_sel ;                                                                          \n";
     mux2 << "                                                                                                       \n";
     mux2 << "                                                                                                       \n";
     mux2 << "                                                                                                       \n";
     mux2 << "	// Radix-16 op_0                                                                                     \n";
     mux2 << "	assign RA0_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG2-1:SEG1]) : (BN0_MEM0_in[SEG2-1:SEG1]) ;           \n";
     mux2 << "	// Radix-16 op_1                                                                                     \n";
     mux2 << "	assign RA1_out = (BN_sel==1'b1)? (BN1_MEM0_in[SEG1-1:0]) : (BN0_MEM0_in[SEG1-1:0]) ;                 \n";
     mux2 << "	// Radix-16 op_2                                                                                     \n";
     mux2 << "	assign RA2_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG2-1:SEG1]) : (BN0_MEM1_in[SEG2-1:SEG1]) ;           \n";
     mux2 << "	// Radix-16 op_3                                                                                     \n";
     mux2 << "	assign RA3_out = (BN_sel==1'b1)? (BN1_MEM1_in[SEG1-1:0]) : (BN0_MEM1_in[SEG1-1:0]) ;                 \n";
     mux2 << "	// Radix-16 op_4                                                                                     \n";
     mux2 << "	assign RA4_out = (BN_sel==1'b1)? (BN1_MEM2_in[SEG2-1:SEG1]) : (BN0_MEM2_in[SEG2-1:SEG1]) ;           \n";
     mux2 << "	// Radix-16 op_5                                                                                     \n";
     mux2 << "	assign RA5_out = (BN_sel==1'b1)? (BN1_MEM2_in[SEG1-1:0]) : (BN0_MEM2_in[SEG1-1:0]) ;                 \n";
     mux2 << "	// Radix-16 op_6                                                                                     \n";
     mux2 << "	assign RA6_out = (BN_sel==1'b1)? (BN1_MEM3_in[SEG2-1:SEG1]) : (BN0_MEM3_in[SEG2-1:SEG1]) ;           \n";
     mux2 << "	// Radix-16 op_7                                                                                     \n";
     mux2 << "	assign RA7_out = (BN_sel==1'b1)? (BN1_MEM3_in[SEG1-1:0]) : (BN0_MEM3_in[SEG1-1:0]) ;                 \n";
     mux2 << "	// Radix-16 op_8                                                                                     \n";
     mux2 << "	assign RA8_out = (BN_sel==1'b1)? (BN1_MEM4_in[SEG2-1:SEG1]) : (BN0_MEM4_in[SEG2-1:SEG1]) ;           \n";
     mux2 << "	// Radix-16 op_9                                                                                     \n";
     mux2 << "	assign RA9_out = (BN_sel==1'b1)? (BN1_MEM4_in[SEG1-1:0]) : (BN0_MEM4_in[SEG1-1:0]) ;                 \n";
     mux2 << "	// Radix-16 op_10                                                                                    \n";
     mux2 << "	assign RA10_out = (BN_sel==1'b1)? (BN1_MEM5_in[SEG2-1:SEG1]) : (BN0_MEM5_in[SEG2-1:SEG1]) ;          \n";
     mux2 << "	// Radix-16 op_11                                                                                    \n";
     mux2 << "	assign RA11_out = (BN_sel==1'b1)? (BN1_MEM5_in[SEG1-1:0]) : (BN0_MEM5_in[SEG1-1:0]) ;                \n";
     mux2 << "	// Radix-16 op_12                                                                                    \n";
     mux2 << "	assign RA12_out = (BN_sel==1'b1)? (BN1_MEM6_in[SEG2-1:SEG1]) : (BN0_MEM6_in[SEG2-1:SEG1]) ;          \n";
     mux2 << "	// Radix-16 op_13                                                                                    \n";
     mux2 << "	assign RA13_out = (BN_sel==1'b1)? (BN1_MEM6_in[SEG1-1:0]) : (BN0_MEM6_in[SEG1-1:0]) ;                \n";
     mux2 << "	// Radix-16 op_14                                                                                    \n";
     mux2 << "	assign RA14_out = (BN_sel==1'b1)? (BN1_MEM7_in[SEG2-1:SEG1]) : (BN0_MEM7_in[SEG2-1:SEG1]) ;          \n";
     mux2 << "	// Radix-16 op_15                                                                                    \n";
     mux2 << "	assign RA15_out = (BN_sel==1'b1)? (BN1_MEM7_in[SEG1-1:0]) : (BN0_MEM7_in[SEG1-1:0]) ;                \n";
     mux2 << "	                                                                                                     \n";
     mux2 << "endmodule                                                                                              \n";      
     mux2.close();
}
void Mux::Mux3(std::string string_in){
     std::ofstream mux3; 
     std::string        string_buf = "/Mux3.v";
     std::stringstream  ss;
     ss << string_in << string_buf;      
     mux3.open(ss.str());
     mux3 << "`timescale 1 ns/1 ps                                                                       \n";                                 
     mux3 << "module Mux3(MulB0_out,                                                                     \n";
     mux3 << "			  MulB1_out,                                                                     \n";
     mux3 << "			  MulB2_out,                                                                     \n";
     mux3 << "			  MulB3_out,                                                                     \n";
     mux3 << "			  MulB4_out,                                                                     \n";
     mux3 << "			  MulB5_out,                                                                     \n";
     mux3 << "			  MulB6_out,                                                                     \n";
     mux3 << "			  MulB7_out,                                                                     \n";
     mux3 << "			  MulB8_out,                                                                     \n";
     mux3 << "			  MulB9_out,                                                                     \n";
     mux3 << "			  MulB10_out,                                                                    \n";
     mux3 << "			  MulB11_out,                                                                    \n";
     mux3 << "			  MulB12_out,                                                                    \n";
     mux3 << "			  MulB13_out,                                                                    \n";
     mux3 << "			  MulB14_out,                                                                    \n";
     mux3 << "			  MulB15_out,                                                                    \n";
     mux3 << "			  MulA1_out,                                                                     \n";
     mux3 << "			  MulA2_out,                                                                     \n";
     mux3 << "			  MulA3_out,                                                                     \n";
     mux3 << "			  MulA4_out,                                                                     \n";
     mux3 << "			  MulA5_out,                                                                     \n";
     mux3 << "			  MulA6_out,                                                                     \n";
     mux3 << "			  MulA7_out,                                                                     \n";
     mux3 << "			  MulA9_out,                                                                     \n";
     mux3 << "			  MulA10_out,                                                                    \n";
     mux3 << "			  MulA11_out,                                                                    \n";
     mux3 << "			  MulA12_out,                                                                    \n";
     mux3 << "			  MulA13_out,                                                                    \n";
     mux3 << "			  MulA14_out,                                                                    \n";
     mux3 << "			  MulA15_out,                                                                    \n";
     mux3 << "			  IFFTROMD0_in,                                                                  \n";
     mux3 << "			  IFFTROMD1_in,                                                                  \n";
     mux3 << "			  IFFTROMD2_in,                                                                  \n";
     mux3 << "			  IFFTROMD3_in,                                                                  \n";
     mux3 << "			  IFFTROMD4_in,                                                                  \n";
     mux3 << "			  IFFTROMD5_in,                                                                  \n";
     mux3 << "			  IFFTROMD6_in,                                                                  \n";
     mux3 << "			  IFFTROMD7_in,                                                                  \n";
     mux3 << "            ROMD0_in,                                                                      \n";
     mux3 << "			  ROMD1_in,                                                                      \n";
     mux3 << "			  ROMD2_in,                                                                      \n";
     mux3 << "			  ROMD3_in,                                                                      \n";
     mux3 << "			  ROMD4_in,                                                                      \n";
     mux3 << "			  ROMD5_in,                                                                      \n";
     mux3 << "			  ROMD6_in,                                                                      \n";
     mux3 << "			  ROMD7_in,                                                                      \n";
     mux3 << "		      FFTBD0_in,                                                                     \n";
     mux3 << "			  FFTBD1_in,                                                                     \n";
     mux3 << "			  FFTBD2_in,                                                                     \n";
     mux3 << "			  FFTBD3_in,                                                                     \n";
     mux3 << "			  FFTBD4_in,                                                                     \n";
     mux3 << "			  FFTBD5_in,                                                                     \n";
     mux3 << "			  FFTBD6_in,                                                                     \n";
     mux3 << "			  FFTBD7_in,                                                                     \n";
     mux3 << "			  FFTBD8_in,                                                                     \n";
     mux3 << "			  FFTBD9_in,                                                                     \n";
     mux3 << "			  FFTBD10_in,                                                                    \n";
     mux3 << "			  FFTBD11_in,                                                                    \n";
     mux3 << "			  FFTBD12_in,                                                                    \n";
     mux3 << "			  FFTBD13_in,                                                                    \n";
     mux3 << "			  FFTBD14_in,                                                                    \n";
     mux3 << "			  FFTBD15_in,                                                                    \n";
     mux3 << "			  RA1D_in,                                                                       \n";
     mux3 << "			  RA2D_in,                                                                       \n";
     mux3 << "			  RA3D_in,                                                                       \n";
     mux3 << "			  RA4D_in,                                                                       \n";
     mux3 << "			  RA5D_in,                                                                       \n";
     mux3 << "			  RA6D_in,                                                                       \n";
     mux3 << "			  RA7D_in,                                                                       \n";
     mux3 << "			  RA9D_in,                                                                       \n";
     mux3 << "			  RA10D_in,                                                                      \n";
     mux3 << "			  RA11D_in,                                                                      \n";
     mux3 << "			  RA12D_in,                                                                      \n";
     mux3 << "			  RA13D_in,                                                                      \n";
     mux3 << "			  RA14D_in,                                                                      \n";
     mux3 << "			  RA15D_in,                                                                      \n";
     mux3 << "			  Mul_sel,                                                                       \n";
     mux3 << "			  mode_sel                                                                       \n";
     mux3 << "			  ) ;                                                                            \n";
     mux3 << "			                                                                                 \n";
     mux3 << "parameter P_WIDTH   = 64 ;                                                                 \n";
     mux3 << "parameter SD_WIDTH  = 128 ;                                                                \n";
     mux3 << "parameter SEG1  = 64 ;                                                                     \n";
     mux3 << "parameter SEG2  = 128 ;                                                                    \n";
     mux3 << "                                                                                           \n";
     mux3 << "parameter P_ONE   = 64'd1 ;                                                                \n";
     mux3 << "parameter PINV    = 64'd" << IN << "; // inverse N                                    \n";
     mux3 << "                                                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB0_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB1_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB2_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB3_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB4_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB5_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB6_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB7_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB8_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB9_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulB10_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulB11_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulB12_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulB13_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulB14_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulB15_out ;                                                          \n";
     mux3 << "                                                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA1_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA2_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA3_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA4_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA5_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA6_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA7_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA9_out ;                                                           \n";
     mux3 << "output [P_WIDTH-1:0] MulA10_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulA11_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulA12_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulA13_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulA14_out ;                                                          \n";
     mux3 << "output [P_WIDTH-1:0] MulA15_out ;                                                          \n";
     mux3 << "                                                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  IFFTROMD0_in ;                                                        \n";
     mux3 << "input [SD_WIDTH-1:0] IFFTROMD1_in ;                                                        \n";
     mux3 << "input [SD_WIDTH-1:0] IFFTROMD2_in ;                                                        \n";
     mux3 << "input [SD_WIDTH-1:0] IFFTROMD3_in ;                                                        \n";
     mux3 << "input [SD_WIDTH-1:0] IFFTROMD4_in ;                                                        \n";
     mux3 << "input [SD_WIDTH-1:0] IFFTROMD5_in ;                                                        \n";
     mux3 << "input [SD_WIDTH-1:0] IFFTROMD6_in ;                                                        \n";
     mux3 << "input [SD_WIDTH-1:0] IFFTROMD7_in ;                                                        \n";
     mux3 << "input [P_WIDTH-1:0]  ROMD0_in ;                                                            \n";
     mux3 << "input [SD_WIDTH-1:0] ROMD1_in ;                                                            \n";
     mux3 << "input [SD_WIDTH-1:0] ROMD2_in ;                                                            \n";
     mux3 << "input [SD_WIDTH-1:0] ROMD3_in ;                                                            \n";
     mux3 << "input [SD_WIDTH-1:0] ROMD4_in ;                                                            \n";
     mux3 << "input [SD_WIDTH-1:0] ROMD5_in ;                                                            \n";
     mux3 << "input [SD_WIDTH-1:0] ROMD6_in ;                                                            \n";
     mux3 << "input [SD_WIDTH-1:0] ROMD7_in ;                                                            \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD0_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD1_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD2_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD3_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD4_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD5_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD6_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD7_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD8_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD9_in ;                                                           \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD10_in ;                                                          \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD11_in ;                                                          \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD12_in ;                                                          \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD13_in ;                                                          \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD14_in ;                                                          \n";
     mux3 << "input [P_WIDTH-1:0]  FFTBD15_in ;                                                          \n";
     mux3 << "input [P_WIDTH-1:0]  RA1D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA2D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA3D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA4D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA5D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA6D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA7D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA9D_in ;                                                             \n";
     mux3 << "input [P_WIDTH-1:0]  RA10D_in ;                                                            \n";
     mux3 << "input [P_WIDTH-1:0]  RA11D_in ;                                                            \n";
     mux3 << "input [P_WIDTH-1:0]  RA12D_in ;                                                            \n";
     mux3 << "input [P_WIDTH-1:0]  RA13D_in ;                                                            \n";
     mux3 << "input [P_WIDTH-1:0]  RA14D_in ;                                                            \n";
     mux3 << "input [P_WIDTH-1:0]  RA15D_in ;                                                            \n";
     mux3 << "input [1:0]          Mul_sel ;                                                             \n";
     mux3 << "input                mode_sel ;                                                            \n";
     mux3 << "                                                                                           \n";
     mux3 << "                                                                                           \n";
     mux3 << "                                                                                           \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB0_out = (Mul_sel==2'd1)? P_ONE :                                              \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD0_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;                                       \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB1_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD0_in :                       \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD0_in :                   \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD1_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;                                       \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB2_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG2-1:SEG1] :          \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG2-1:SEG1] :      \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD2_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB3_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD1_in[SEG1-1:0] :             \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD1_in[SEG1-1:0] :         \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD3_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB4_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD2_in[SEG2-1:SEG1] :          \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD2_in[SEG2-1:SEG1] :      \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD4_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB5_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD2_in[SEG1-1:0] :             \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD2_in[SEG1-1:0] :         \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD5_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;	                                     \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB6_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD3_in[SEG2-1:SEG1] :          \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD3_in[SEG2-1:SEG1] :      \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD6_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB7_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD3_in[SEG1-1:0] :             \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD3_in[SEG1-1:0] :         \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD7_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;	                                     \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB8_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD4_in[SEG2-1:SEG1] :          \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD4_in[SEG2-1:SEG1] :      \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD8_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB9_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD4_in[SEG1-1:0] :             \n";
     mux3 << "					   ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD4_in[SEG1-1:0] :         \n";
     mux3 << "					   (Mul_sel==2'd2)? FFTBD9_in :                                          \n";
     mux3 << "					   (Mul_sel==2'd3)? PINV : P_ONE ;	                                     \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB10_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD5_in[SEG2-1:SEG1] :         \n";
     mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD5_in[SEG2-1:SEG1] :     \n";
     mux3 << "					    (Mul_sel==2'd2)? FFTBD10_in :                                        \n";
     mux3 << "					    (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB11_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD5_in[SEG1-1:0] :            \n";
     mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD5_in[SEG1-1:0] :        \n";
     mux3 << "					    (Mul_sel==2'd2)? FFTBD11_in :                                        \n";
     mux3 << "					    (Mul_sel==2'd3)? PINV : P_ONE ;	                                     \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB12_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD6_in[SEG2-1:SEG1] :         \n";
     mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD6_in[SEG2-1:SEG1] :     \n";
     mux3 << "					    (Mul_sel==2'd2)? FFTBD12_in :                                        \n";
     mux3 << "					    (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB13_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD6_in[SEG1-1:0] :            \n";
     mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD6_in[SEG1-1:0] :        \n";
     mux3 << "					    (Mul_sel==2'd2)? FFTBD13_in :                                        \n";
     mux3 << "					    (Mul_sel==2'd3)? PINV : P_ONE ;	                                     \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB14_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD7_in[SEG2-1:SEG1] :         \n";
     mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD7_in[SEG2-1:SEG1] :     \n";
     mux3 << "					    (Mul_sel==2'd2)? FFTBD14_in :                                        \n";
     mux3 << "					    (Mul_sel==2'd3)? PINV : P_ONE ;				                         \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulB15_out = ((Mul_sel==2'd1)&&(mode_sel==1'b0))? ROMD7_in[SEG1-1:0] :            \n";
     mux3 << "					    ((Mul_sel==2'd1)&&(mode_sel==1'b1))? IFFTROMD7_in[SEG1-1:0] :        \n";
     mux3 << "					    (Mul_sel==2'd2)? FFTBD15_in :                                        \n";
     mux3 << "					    (Mul_sel==2'd3)? PINV : P_ONE ;	                                     \n";
     mux3 << "	                                                                                         \n";
     mux3 << "	                                                                                         \n";
     mux3 << "    // change RA output position in IFFT                                                   \n";
     mux3 << "	assign MulA1_out = (mode_sel==1'b1)? RA15D_in : RA1D_in ;                                \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA2_out = (mode_sel==1'b1)? RA14D_in : RA2D_in ;                                \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA3_out = (mode_sel==1'b1)? RA13D_in : RA3D_in ;                                \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA4_out = (mode_sel==1'b1)? RA12D_in : RA4D_in ;                                \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA5_out = (mode_sel==1'b1)? RA11D_in : RA5D_in ;                                \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA6_out = (mode_sel==1'b1)? RA10D_in : RA6D_in ;                                \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA7_out = (mode_sel==1'b1)? RA9D_in : RA7D_in ;                                 \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA9_out = (mode_sel==1'b1)? RA7D_in : RA9D_in ;                                 \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA10_out = (mode_sel==1'b1)? RA6D_in : RA10D_in ;                               \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA11_out = (mode_sel==1'b1)? RA5D_in : RA11D_in ;                               \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA12_out = (mode_sel==1'b1)? RA4D_in : RA12D_in ;                               \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA13_out = (mode_sel==1'b1)? RA3D_in : RA13D_in ;                               \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA14_out = (mode_sel==1'b1)? RA2D_in : RA14D_in ;                               \n";
     mux3 << "	//                                                                                       \n";
     mux3 << "	assign MulA15_out = (mode_sel==1'b1)? RA1D_in : RA15D_in ;                               \n";
     mux3 << "	                                                                                         \n";
     mux3 << "	                                                                                         \n";
     mux3 << "endmodule                                                                                  \n";  
     mux3.close();  
}
void Mux::Mux4(std::string string_in){
     std::ofstream mux4;
     std::string        string_buf = "/Mux4.v";
     std::stringstream  ss;
     ss << string_in << string_buf;      
     mux4.open(ss.str());
     mux4 << "`timescale 1 ns/1 ps                                         \n";
     mux4 << "module Mux4(CRUD0_out,                                       \n";
     mux4 << "			  CRUD1_out,                                         \n";
     mux4 << "			  CRUD2_out,                                         \n";
     mux4 << "			  CRUD3_out,                                         \n";
     mux4 << "			  CRUD4_out,                                         \n";
     mux4 << "			  CRUD5_out,                                         \n";
     mux4 << "			  CRUD6_out,                                         \n";
     mux4 << "			  CRUD7_out,                                         \n";
     mux4 << "			  CRUD8_out,                                         \n";
     mux4 << "			  CRUD9_out,                                         \n";
     mux4 << "			  CRUD10_out,                                        \n";
     mux4 << "			  CRUD11_out,                                        \n";
     mux4 << "			  CRUD12_out,                                        \n";
     mux4 << "			  CRUD13_out,                                        \n";
     mux4 << "			  CRUD14_out,                                        \n";
     mux4 << "			  CRUD15_out,                                        \n";
     mux4 << "			  IFFTD0_in,                                         \n";
     mux4 << "            IFFTD1_in,                                       \n";
     mux4 << "            IFFTD2_in,                                       \n";
     mux4 << "            IFFTD3_in,                                       \n";
     mux4 << "			  IFFTD4_in,                                         \n";
     mux4 << "			  IFFTD5_in,                                         \n";
     mux4 << "			  IFFTD6_in,                                         \n";
     mux4 << "			  IFFTD7_in,                                         \n";
     mux4 << "			  IFFTD8_in,                                         \n";
     mux4 << "			  IFFTD9_in,                                         \n";
     mux4 << "			  IFFTD10_in,                                        \n";
     mux4 << "			  IFFTD11_in,                                        \n";
     mux4 << "			  IFFTD12_in,                                        \n";
     mux4 << "			  IFFTD13_in,                                        \n";
     mux4 << "			  IFFTD14_in,                                        \n";
     mux4 << "			  IFFTD15_in,                                        \n";
     mux4 << "			  m2_sel                                             \n";
     mux4 << "			  ) ;                                                \n";
     mux4 << "			                                                   \n";
     mux4 << "parameter P_WIDTH   = 64 ;                                   \n";
     mux4 << "parameter P_ZERO    = 64'h0 ;                                \n";
     mux4 << "                                                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD0_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD1_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD2_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD3_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD4_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD5_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD6_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD7_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD8_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD9_out ;                             \n";
     mux4 << "output [P_WIDTH-1:0] CRUD10_out ;                            \n";
     mux4 << "output [P_WIDTH-1:0] CRUD11_out ;                            \n";
     mux4 << "output [P_WIDTH-1:0] CRUD12_out ;                            \n";
     mux4 << "output [P_WIDTH-1:0] CRUD13_out ;                            \n";
     mux4 << "output [P_WIDTH-1:0] CRUD14_out ;                            \n";
     mux4 << "output [P_WIDTH-1:0] CRUD15_out ;                            \n";
     mux4 << "                                                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD0_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD1_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD2_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD3_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD4_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD5_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD6_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD7_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD8_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD9_in ;                             \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD10_in ;                            \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD11_in ;                            \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD12_in ;                            \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD13_in ;                            \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD14_in ;                            \n";
     mux4 << "input [P_WIDTH-1:0]  IFFTD15_in ;                            \n";
     mux4 << "input                m2_sel ;                                \n";
     mux4 << "                                                             \n";
     mux4 << "                                                             \n";
     mux4 << "                                                             \n";
	 //modify at 2021/12/19
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD0_out = (m2_sel==1'b1)? IFFTD0_in : P_ZERO ;    \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD1_out = (m2_sel==1'b1)? IFFTD1_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD2_out = (m2_sel==1'b1)? IFFTD2_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD3_out = (m2_sel==1'b1)? IFFTD3_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD4_out = (m2_sel==1'b1)? IFFTD4_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD5_out = (m2_sel==1'b1)? IFFTD5_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD6_out = (m2_sel==1'b1)? IFFTD6_in : P_ZERO ;    \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD7_out = (m2_sel==1'b1)? IFFTD7_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD8_out = (m2_sel==1'b1)? IFFTD8_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD9_out = (m2_sel==1'b1)? IFFTD9_in : P_ZERO ;	   \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD10_out = (m2_sel==1'b1)? IFFTD10_in : P_ZERO ;  \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD11_out = (m2_sel==1'b1)? IFFTD11_in : P_ZERO ;  \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD12_out = (m2_sel==1'b1)? IFFTD12_in : P_ZERO ;  \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD13_out = (m2_sel==1'b1)? IFFTD13_in : P_ZERO ;  \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD14_out = (m2_sel==1'b1)? IFFTD14_in : P_ZERO ;  \n";
     //mux4 << "	//                                                         \n";
     //mux4 << "	assign CRUD15_out = (m2_sel==1'b1)? IFFTD15_in : P_ZERO ;  \n";
     mux4 << "	assign CRUD0_out = IFFTD0_in;    \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD1_out = IFFTD1_in;	   \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD2_out = IFFTD2_in;	   \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD3_out = IFFTD3_in;	   \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD4_out = IFFTD4_in;	   \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD5_out = IFFTD5_in;	   \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD6_out = IFFTD6_in;    \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD7_out = IFFTD7_in;	   \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD8_out = IFFTD8_in;	   \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD9_out = IFFTD9_in;	   \n";
     mux4 << "	//                                         \n";
     mux4 << "	assign CRUD10_out = IFFTD10_in;  \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD11_out = IFFTD11_in;  \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD12_out = IFFTD12_in;  \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD13_out = IFFTD13_in;  \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD14_out = IFFTD14_in;  \n";
     mux4 << "	//                               \n";
     mux4 << "	assign CRUD15_out = IFFTD15_in;  \n";	 
	 
     mux4 << "	                                                           \n";
     mux4 << "	                                                           \n";
     mux4 << "endmodule                                                    \n";                                                                        
     mux4.close();   
}
void Mux::Mux5_r16(std::string string_in){
	 std::ofstream mux5_r16;
     std::string        string_buf = "/Mux5.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux5_r16.open(ss.str());  
mux5_r16 << " //=============================================                              \n";
mux5_r16 << " //Data:2020/04/08                                                            \n";
mux5_r16 << " //note:re-order factor Mux                                                   \n";
mux5_r16 << " //writter:shi yong wu                                                        \n";
mux5_r16 << " //=============================================                              \n";
mux5_r16 << " `timescale 1ns/10ps                                                          \n";
mux5_r16 << " module Mux5(                                                                 \n";
mux5_r16 << "         B0M0_ain_o,                                                          \n";
mux5_r16 << "         B0M1_ain_o,                                                          \n";
mux5_r16 << "         B0M2_ain_o,                                                          \n";
mux5_r16 << "         B0M3_ain_o,                                                          \n";
mux5_r16 << "         B0M4_ain_o,                                                          \n";
mux5_r16 << "         B0M5_ain_o,                                                          \n";
mux5_r16 << "         B0M6_ain_o,                                                          \n";
mux5_r16 << "         B0M7_ain_o,                                                          \n";
mux5_r16 << "         B0M8_ain_o,                                                          \n";
mux5_r16 << "         B0M9_ain_o,                                                          \n";
mux5_r16 << "         B0M10_ain_o,                                                         \n";
mux5_r16 << "         B0M11_ain_o,                                                         \n";
mux5_r16 << "         B0M12_ain_o,                                                         \n";
mux5_r16 << "         B0M13_ain_o,                                                         \n";
mux5_r16 << "         B0M14_ain_o,                                                         \n";
mux5_r16 << "         B0M15_ain_o,                                                         \n";
mux5_r16 << " 		  B1M0_ain_o,                                                          \n";
mux5_r16 << " 		  B1M1_ain_o,                                                          \n";
mux5_r16 << " 		  B1M2_ain_o,                                                          \n";
mux5_r16 << " 		  B1M3_ain_o,                                                          \n";
mux5_r16 << " 		  B1M4_ain_o,                                                          \n";
mux5_r16 << " 		  B1M5_ain_o,                                                          \n";
mux5_r16 << " 		  B1M6_ain_o,                                                          \n";
mux5_r16 << " 		  B1M7_ain_o,                                                          \n";
mux5_r16 << " 		  B1M8_ain_o,                                                          \n";
mux5_r16 << " 		  B1M9_ain_o,                                                          \n";
mux5_r16 << " 		  B1M10_ain_o,                                                         \n";
mux5_r16 << " 		  B1M11_ain_o,                                                         \n";
mux5_r16 << " 		  B1M12_ain_o,                                                         \n";
mux5_r16 << " 		  B1M13_ain_o,                                                         \n";
mux5_r16 << " 		  B1M14_ain_o,                                                         \n";
mux5_r16 << " 		  B1M15_ain_o,                                                         \n";
mux5_r16 << "         B0M0_bin_o,                                                           \n";
mux5_r16 << "         B0M1_bin_o,                                                           \n";
mux5_r16 << "         B0M2_bin_o,                                                           \n";
mux5_r16 << "         B0M3_bin_o,                                                           \n";
mux5_r16 << "         B0M4_bin_o,                                                           \n";
mux5_r16 << "         B0M5_bin_o,                                                           \n";
mux5_r16 << "         B0M6_bin_o,                                                           \n";
mux5_r16 << "         B0M7_bin_o,                                                           \n";
mux5_r16 << "         B0M8_bin_o,                                                           \n";
mux5_r16 << "         B0M9_bin_o,                                                           \n";
mux5_r16 << "         B0M10_bin_o,                                                           \n";
mux5_r16 << "         B0M11_bin_o,                                                           \n";
mux5_r16 << "         B0M12_bin_o,                                                           \n";
mux5_r16 << "         B0M13_bin_o,                                                           \n";
mux5_r16 << "         B0M14_bin_o,                                                           \n";
mux5_r16 << "         B0M15_bin_o,                                                           \n";
mux5_r16 << " 		  B1M0_bin_o,                                                           \n";
mux5_r16 << " 		  B1M1_bin_o,                                                           \n";
mux5_r16 << " 		  B1M2_bin_o,                                                           \n";
mux5_r16 << " 		  B1M3_bin_o,                                                           \n";
mux5_r16 << " 		  B1M4_bin_o,                                                           \n";
mux5_r16 << " 		  B1M5_bin_o,                                                           \n";
mux5_r16 << " 		  B1M6_bin_o,                                                           \n";
mux5_r16 << " 		  B1M7_bin_o,                                                           \n";
mux5_r16 << " 		  B1M8_bin_o,                                                           \n";
mux5_r16 << " 		  B1M9_bin_o,                                                           \n";
mux5_r16 << " 		  B1M10_bin_o,                                                          \n";
mux5_r16 << " 		  B1M11_bin_o,                                                          \n";
mux5_r16 << " 		  B1M12_bin_o,                                                          \n";
mux5_r16 << " 		  B1M13_bin_o,                                                          \n";
mux5_r16 << " 		  B1M14_bin_o,                                                          \n";
mux5_r16 << " 		  B1M15_bin_o,                                                          \n";
mux5_r16 << "         ExtB0_D0_pip,                                                             \n";
mux5_r16 << "         ExtB0_D1_pip,                                                             \n";
mux5_r16 << "         ExtB0_D2_pip,                                                             \n";
mux5_r16 << "         ExtB0_D3_pip,                                                             \n";
mux5_r16 << "         ExtB0_D4_pip,                                                             \n";
mux5_r16 << "         ExtB0_D5_pip,                                                             \n";
mux5_r16 << "         ExtB0_D6_pip,                                                             \n";
mux5_r16 << "         ExtB0_D7_pip,                                                             \n";
mux5_r16 << "         ExtB1_D0_pip,                                                             \n";
mux5_r16 << "         ExtB1_D1_pip,                                                             \n";
mux5_r16 << "         ExtB1_D2_pip,                                                             \n";
mux5_r16 << "         ExtB1_D3_pip,                                                             \n";
mux5_r16 << "         ExtB1_D4_pip,                                                             \n";
mux5_r16 << "         ExtB1_D5_pip,                                                             \n";
mux5_r16 << "         ExtB1_D6_pip,                                                             \n";
mux5_r16 << "         ExtB1_D7_pip,                                                             \n";
mux5_r16 << "         SP_r0,                                                                \n";
mux5_r16 << "         SP_r1,                                                                \n";
mux5_r16 << "         SP_r2,                                                                \n";
mux5_r16 << "         SP_r3,                                                                \n";
mux5_r16 << "         SP_r4,                                                                \n";
mux5_r16 << "         SP_r5,                                                                \n";
mux5_r16 << "         SP_r6,                                                                \n";
mux5_r16 << "         SP_r7,                                                                \n";
mux5_r16 << "         SP_r8,                                                                \n";
mux5_r16 << "         SP_r9,                                                                \n";
mux5_r16 << "         SP_r10,                                                               \n";
mux5_r16 << "         SP_r11,                                                               \n";
mux5_r16 << "         SP_r12,                                                               \n";
mux5_r16 << "         SP_r13,                                                               \n";
mux5_r16 << "         SP_r14,                                                               \n";
mux5_r16 << "         SP_r15,                                                               \n";
mux5_r16 << "         reorderb0r0,                                                          \n";
mux5_r16 << "         reorderb0r1,                                                          \n";
mux5_r16 << "         reorderb0r2,                                                          \n";
mux5_r16 << "         reorderb0r3,                                                          \n";
mux5_r16 << "         reorderb0r4,                                                          \n";
mux5_r16 << "         reorderb0r5,                                                          \n";
mux5_r16 << "         reorderb0r6,                                                          \n";
mux5_r16 << "         reorderb0r7,                                                          \n";
mux5_r16 << "         ireorderr0,                                                           \n";
mux5_r16 << "         ireorderr1,                                                           \n";
mux5_r16 << "         ireorderr2,                                                           \n";
mux5_r16 << "         ireorderr3,                                                           \n";
mux5_r16 << "         ireorderr4,                                                           \n";
mux5_r16 << "         ireorderr5,                                                           \n";
mux5_r16 << "         ireorderr6,                                                           \n";
mux5_r16 << "         ireorderr7,                                                           \n";
mux5_r16 << "         ireorderr8,                                                           \n";
mux5_r16 << "         ireorderr9,                                                           \n";
mux5_r16 << "         ireorderr10,                                                          \n";
mux5_r16 << "         ireorderr11,                                                          \n";
mux5_r16 << "         ireorderr12,                                                          \n";
mux5_r16 << "         ireorderr13,                                                          \n";
mux5_r16 << "         ireorderr14,                                                          \n";
mux5_r16 << "         ireorderr15,                                                          \n";
mux5_r16 << " 		  CRUD0,                                                                                \n";
mux5_r16 << " 		  CRUD1,                                                                                \n";
mux5_r16 << " 		  CRUD2,                                                                                \n";
mux5_r16 << " 		  CRUD3,                                                                                \n";
mux5_r16 << " 		  CRUD4,                                                                                \n";
mux5_r16 << " 		  CRUD5,                                                                                \n";
mux5_r16 << " 		  CRUD6,                                                                                \n";
mux5_r16 << " 		  CRUD7,                                                                                \n";
mux5_r16 << " 		  CRUD8,                                                                                \n";
mux5_r16 << " 		  CRUD9,                                                                                \n";
mux5_r16 << " 		  CRUD10,                                                                                \n";
mux5_r16 << " 		  CRUD11,                                                                                \n";
mux5_r16 << " 		  CRUD12,                                                                                \n";
mux5_r16 << " 		  CRUD13,                                                                                \n";
mux5_r16 << " 		  CRUD14,                                                                                \n";
mux5_r16 << " 		  CRUD15,                                                                                \n";
mux5_r16 << " 		  reorderb1r0,                                                                          \n";
mux5_r16 << " 		  reorderb1r1,                                                                          \n";
mux5_r16 << " 		  reorderb1r2,                                                                          \n";
mux5_r16 << " 		  reorderb1r3,                                                                          \n";
mux5_r16 << " 		  reorderb1r4,                                                                          \n";
mux5_r16 << " 		  reorderb1r5,                                                                          \n";
mux5_r16 << " 		  reorderb1r6,                                                                          \n";
mux5_r16 << " 		  reorderb1r7,                                                                          \n";
mux5_r16 << "         re_sel                                                                \n";
mux5_r16 << " );                                                                            \n";
mux5_r16 << "                                                                               \n";
mux5_r16 << " parameter CP_WIDTH  = "<< CP_width <<";                                                      \n";
mux5_r16 << " parameter CP_ZERO   = "<< CP_width <<"'d0;                                                      \n";
mux5_r16 << " parameter DOP_WIDTH  = " << (2*CP_width) << ";  //Double data width                                           \n";
mux5_r16 << "                                                                               \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M0_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M1_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M2_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M3_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M4_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M5_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M6_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M7_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M8_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M9_ain_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M10_ain_o;                                            \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M11_ain_o;                                            \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M12_ain_o;                                            \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M13_ain_o;                                            \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M14_ain_o;                                            \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M15_ain_o;                                            \n";
mux5_r16 << "                                                                               \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M0_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M1_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M2_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M3_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M4_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M5_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M6_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M7_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M8_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M9_bin_o;                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M10_bin_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M11_bin_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M12_bin_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M13_bin_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M14_bin_o;                                             \n";
mux5_r16 << " output [CP_WIDTH-1:0] B0M15_bin_o;                                             \n";
mux5_r16 << "                                                                                              \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M0_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M1_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M2_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M3_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M4_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M5_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M6_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M7_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M8_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M9_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M10_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M11_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M12_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M13_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M14_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M15_ain_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M0_bin_o;                                                         \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M1_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M2_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M3_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M4_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M5_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M6_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M7_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M8_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M9_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M10_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M11_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M12_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M13_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M14_bin_o;                                                        \n";
mux5_r16 << " output [CP_WIDTH-1:0] B1M15_bin_o;                                                        \n";
mux5_r16 << "                                                                                              \n";
//need to modify
//remove it
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r0;                                            \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r1;                                            \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r2;                                            \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r3;                                            \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r4;                                            \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r5;                                            \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r6;                                            \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb1r7;                                            \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD0;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD1;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD2;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD3;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD4;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD5;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD6;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD7;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD8;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD9;                                                  \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD10;                                                 \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD11;                                                 \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD12;                                                 \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD13;                                                 \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD14;                                                 \n";
mux5_r16 << " input [DOP_WIDTH-1:0] CRUD15;                                                 \n";
mux5_r16 << " input                 re_sel ;                                                \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D0_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D1_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D2_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D3_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D4_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D5_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D6_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] ExtB0_D7_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D0_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D1_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D2_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D3_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D4_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D5_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D6_pip;                                           \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ExtB1_D7_pip;                                           \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r0;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r1;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r2;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r3;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r4;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r5;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r6;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r7;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r8;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r9;                                                  \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r10;                                                 \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r11;                                                 \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r12;                                                 \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r13;                                                 \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r14;                                                 \n";
mux5_r16 << " input  [CP_WIDTH-1:0] SP_r15;                                                 \n";
mux5_r16 << "                                                                               \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r0;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r1;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r2;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r3;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r4;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r5;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r6;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  reorderb0r7;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr0;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr1;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr2;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr3;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr4;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr5;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr6;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr7;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr8;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr9;                                              \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr10;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr11;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr12;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr13;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr14;                                             \n";
mux5_r16 << " input [CP_WIDTH-1:0]  ireorderr15;                                             \n";
mux5_r16 << "                                                                               \n";
mux5_r16 << "                                                                               \n";
mux5_r16 << "   assign B0M0_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D0_pip : SP_r0;                 \n";
mux5_r16 << "   assign B0M1_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D1_pip : SP_r1;                 \n";
mux5_r16 << "   assign B0M2_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D2_pip : SP_r2;                 \n";
mux5_r16 << "   assign B0M3_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D3_pip : SP_r3;                 \n";
mux5_r16 << "   assign B0M4_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D4_pip : SP_r4;                 \n";
mux5_r16 << "   assign B0M5_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D5_pip : SP_r5;                 \n";
mux5_r16 << "   assign B0M6_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D6_pip : SP_r6;                 \n";
mux5_r16 << "   assign B0M7_ain_o  = ( re_sel == 1'b1) ?  ExtB0_D7_pip : SP_r7;                 \n";
mux5_r16 << "   assign B0M8_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r8;                 \n";
mux5_r16 << "   assign B0M9_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r9;                 \n";
mux5_r16 << "   assign B0M10_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r10;                \n";
mux5_r16 << "   assign B0M11_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r11;                \n";
mux5_r16 << "   assign B0M12_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r12;                \n";
mux5_r16 << "   assign B0M13_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r13;                \n";
mux5_r16 << "   assign B0M14_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r14;                \n";
mux5_r16 << "   assign B0M15_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      : SP_r15;                \n";
mux5_r16 << "                                                        //test                 \n";
mux5_r16 << "   assign B0M0_bin_o  = ( re_sel == 1'b1) ?  reorderb0r0 : ireorderr0;//       \n";
mux5_r16 << "   assign B0M1_bin_o  = ( re_sel == 1'b1) ?  reorderb0r1 : ireorderr1;//       \n";
mux5_r16 << "   assign B0M2_bin_o  = ( re_sel == 1'b1) ?  reorderb0r2 : ireorderr2;//       \n";
mux5_r16 << "   assign B0M3_bin_o  = ( re_sel == 1'b1) ?  reorderb0r3 : ireorderr3;//       \n";
mux5_r16 << "   assign B0M4_bin_o  = ( re_sel == 1'b1) ?  reorderb0r4 : ireorderr4;//       \n";
mux5_r16 << "   assign B0M5_bin_o  = ( re_sel == 1'b1) ?  reorderb0r5 : ireorderr5;//       \n";
mux5_r16 << "   assign B0M6_bin_o  = ( re_sel == 1'b1) ?  reorderb0r6 : ireorderr6;//       \n";
mux5_r16 << "   assign B0M7_bin_o  = ( re_sel == 1'b1) ?  reorderb0r7 : ireorderr7;//       \n";
mux5_r16 << "   assign B0M8_bin_o  = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr8;//       \n";
mux5_r16 << "   assign B0M9_bin_o  = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr9;//       \n";
mux5_r16 << "   assign B0M10_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr10;//      \n";
mux5_r16 << "   assign B0M11_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr11;//      \n";
mux5_r16 << "   assign B0M12_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr12;//      \n";
mux5_r16 << "   assign B0M13_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr13;//      \n";
mux5_r16 << "   assign B0M14_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr14;//      \n";
mux5_r16 << "   assign B0M15_bin_o = ( re_sel == 1'b1) ?  CP_ZERO     : ireorderr15;//      \n";
mux5_r16 << "                                                                               \n";
mux5_r16 << " 	assign B1M0_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D0_pip :CRUD0[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M1_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D1_pip :CRUD1[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M2_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D2_pip :CRUD2[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M3_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D3_pip :CRUD3[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M4_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D4_pip :CRUD4[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M5_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D5_pip :CRUD5[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M6_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D6_pip :CRUD6[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M7_ain_o  = ( re_sel == 1'b1) ?  ExtB1_D7_pip :CRUD7[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M8_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD8[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M9_ain_o  = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD9[DOP_WIDTH-1:CP_WIDTH]  ;      \n";
mux5_r16 << " 	assign B1M10_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD10[DOP_WIDTH-1:CP_WIDTH] ;       \n";
mux5_r16 << " 	assign B1M11_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD11[DOP_WIDTH-1:CP_WIDTH] ;       \n";
mux5_r16 << " 	assign B1M12_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD12[DOP_WIDTH-1:CP_WIDTH] ;       \n";
mux5_r16 << " 	assign B1M13_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD13[DOP_WIDTH-1:CP_WIDTH] ;       \n";
mux5_r16 << " 	assign B1M14_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD14[DOP_WIDTH-1:CP_WIDTH] ;       \n";
mux5_r16 << " 	assign B1M15_ain_o = ( re_sel == 1'b1) ?  CP_ZERO      :CRUD15[DOP_WIDTH-1:CP_WIDTH] ;       \n";
mux5_r16 << "                                                                                              \n";
mux5_r16 << " 	assign B1M0_bin_o  = ( re_sel == 1'b1) ? reorderb1r0  :CRUD0[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M1_bin_o  = ( re_sel == 1'b1) ? reorderb1r1  :CRUD1[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M2_bin_o  = ( re_sel == 1'b1) ? reorderb1r2  :CRUD2[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M3_bin_o  = ( re_sel == 1'b1) ? reorderb1r3  :CRUD3[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M4_bin_o  = ( re_sel == 1'b1) ? reorderb1r4  :CRUD4[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M5_bin_o  = ( re_sel == 1'b1) ? reorderb1r5  :CRUD5[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M6_bin_o  = ( re_sel == 1'b1) ? reorderb1r6  :CRUD6[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M7_bin_o  = ( re_sel == 1'b1) ? reorderb1r7  :CRUD7[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M8_bin_o  = ( re_sel == 1'b1) ? CP_ZERO      :CRUD8[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M9_bin_o  = ( re_sel == 1'b1) ? CP_ZERO      :CRUD9[CP_WIDTH-1:0]  ;                \n";
mux5_r16 << " 	assign B1M10_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD10[CP_WIDTH-1:0] ;                 \n";
mux5_r16 << " 	assign B1M11_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD11[CP_WIDTH-1:0] ;                 \n";
mux5_r16 << " 	assign B1M12_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD12[CP_WIDTH-1:0] ;                 \n";
mux5_r16 << " 	assign B1M13_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD13[CP_WIDTH-1:0] ;                 \n";
mux5_r16 << " 	assign B1M14_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD14[CP_WIDTH-1:0] ;                 \n";
mux5_r16 << " 	assign B1M15_bin_o = ( re_sel == 1'b1) ? CP_ZERO      :CRUD15[CP_WIDTH-1:0] ;                 \n";
mux5_r16 << " endmodule                                                                     \n";

     mux5_r16.close();
}

void Mux::Mux6_r16(std::string string_in){
	 std::ofstream mux6_r16;
     std::string        string_buf = "/Mux6.v";
     std::stringstream  ss;
     ss << string_in << string_buf; 
	 mux6_r16.open(ss.str()); 
mux6_r16 << "//=============================================                                         \n";
mux6_r16 << "//Data:2020/04/08                                                                       \n";
mux6_r16 << "//note:output data and ExtB0_Dx Mux                                                     \n";
mux6_r16 << "//writter:shi yong wu                                                                   \n";
mux6_r16 << "//=============================================                                         \n";
mux6_r16 << "`timescale 1ns/10ps                                                                     \n";
mux6_r16 << "module Mux6(                                                                            \n";
mux6_r16 << "        ExtB0_D0,                                                                       \n";
mux6_r16 << "        ExtB0_D1,                                                                       \n";
mux6_r16 << "        ExtB0_D2,                                                                       \n";
mux6_r16 << "        ExtB0_D3,                                                                       \n";
mux6_r16 << "        ExtB0_D4,                                                                       \n";
mux6_r16 << "        ExtB0_D5,                                                                       \n";
mux6_r16 << "        ExtB0_D6,                                                                       \n";
mux6_r16 << "        ExtB0_D7,                                                                       \n";
mux6_r16 << "        ExtB0_D8,                                                                       \n";
mux6_r16 << "        ExtB0_D9,                                                                       \n";
mux6_r16 << "        ExtB0_D10,                                                                      \n";
mux6_r16 << "        ExtB0_D11,                                                                      \n";
mux6_r16 << "        ExtB0_D12,                                                                      \n";
mux6_r16 << "        ExtB0_D13,                                                                      \n";
mux6_r16 << "        ExtB0_D14,                                                                      \n";
mux6_r16 << "        ExtB0_D15,                                                                      \n";
mux6_r16 << "        MulD0_out,                                                                      \n";
mux6_r16 << "        MulD1_out,                                                                      \n";
mux6_r16 << "        MulD2_out,                                                                      \n";
mux6_r16 << "        MulD3_out,                                                                      \n";
mux6_r16 << "        MulD4_out,                                                                      \n";
mux6_r16 << "        MulD5_out,                                                                      \n";
mux6_r16 << "        MulD6_out,                                                                      \n";
mux6_r16 << "        MulD7_out,                                                                      \n";
mux6_r16 << "        MulD8_out,                                                                      \n";
mux6_r16 << "        MulD9_out,                                                                      \n";
mux6_r16 << "        MulD10_out,                                                                     \n";
mux6_r16 << "        MulD11_out,                                                                     \n";
mux6_r16 << "        MulD12_out,                                                                     \n";
mux6_r16 << "        MulD13_out,                                                                     \n";
mux6_r16 << "        MulD14_out,                                                                     \n";
mux6_r16 << "        MulD15_out,                                                                     \n";
mux6_r16 << "        B0M0_result,                                                                    \n";
mux6_r16 << "        B0M1_result,                                                                    \n";
mux6_r16 << "        B0M2_result,                                                                    \n";
mux6_r16 << "        B0M3_result,                                                                    \n";
mux6_r16 << "        B0M4_result,                                                                    \n";
mux6_r16 << "        B0M5_result,                                                                    \n";
mux6_r16 << "        B0M6_result,                                                                    \n";
mux6_r16 << "        B0M7_result,                                                                    \n";
mux6_r16 << "        B0M8_result,                                                                    \n";
mux6_r16 << "        B0M9_result,                                                                    \n";
mux6_r16 << "        B0M10_result,                                                                   \n";
mux6_r16 << "        B0M11_result,                                                                   \n";
mux6_r16 << "        B0M12_result,                                                                   \n";
mux6_r16 << "        B0M13_result,                                                                   \n";
mux6_r16 << "        B0M14_result,                                                                   \n";
mux6_r16 << "        B0M15_result,                                                                   \n";
mux6_r16 << "         ExtB1_D0,                                                             \n";
mux6_r16 << "         ExtB1_D1,                                                             \n";
mux6_r16 << "         ExtB1_D2,                                                             \n";
mux6_r16 << "         ExtB1_D3,                                                             \n";
mux6_r16 << "         ExtB1_D4,                                                             \n";
mux6_r16 << "         ExtB1_D5,                                                             \n";
mux6_r16 << "         ExtB1_D6,                                                             \n";
mux6_r16 << "         ExtB1_D7,                                                             \n";
mux6_r16 << "         ExtB1_D8,                                                             \n";
mux6_r16 << "         ExtB1_D9,                                                             \n";
mux6_r16 << "         ExtB1_D10,                                                             \n";
mux6_r16 << "         ExtB1_D11,                                                             \n";
mux6_r16 << "         ExtB1_D12,                                                             \n";
mux6_r16 << "         ExtB1_D13,                                                             \n";
mux6_r16 << "         ExtB1_D14,                                                             \n";
mux6_r16 << "         ExtB1_D15,                                                             \n";
mux6_r16 << "         BR_S0,                                                                \n";
mux6_r16 << "         BR_S1,                                                                \n";
mux6_r16 << "         BR_S2,                                                                \n";
mux6_r16 << "         BR_S3,                                                                \n";
mux6_r16 << "         BR_S4,                                                                \n";
mux6_r16 << "         BR_S5,                                                                \n";
mux6_r16 << "         BR_S6,                                                                \n";
mux6_r16 << "         BR_S7,                                                                \n";
mux6_r16 << "         BR_S8,                                                                \n";
mux6_r16 << "         BR_S9,                                                                \n";
mux6_r16 << "         BR_S10,                                                                \n";
mux6_r16 << "         BR_S11,                                                                \n";
mux6_r16 << "         BR_S12,                                                                \n";
mux6_r16 << "         BR_S13,                                                                \n";
mux6_r16 << "         BR_S14,                                                                \n";
mux6_r16 << "         BR_S15,                                                                \n";
mux6_r16 << "         B1M0_result,                                                          \n";
mux6_r16 << "         B1M1_result,                                                          \n";
mux6_r16 << "         B1M2_result,                                                          \n";
mux6_r16 << "         B1M3_result,                                                          \n";
mux6_r16 << "         B1M4_result,                                                          \n";
mux6_r16 << "         B1M5_result,                                                          \n";
mux6_r16 << "         B1M6_result,                                                          \n";
mux6_r16 << "         B1M7_result,                                                          \n";
mux6_r16 << "         B1M8_result,                                                          \n";
mux6_r16 << "         B1M9_result,                                                          \n";
mux6_r16 << "         B1M10_result,                                                          \n";
mux6_r16 << "         B1M11_result,                                                          \n";
mux6_r16 << "         B1M12_result,                                                          \n";
mux6_r16 << "         B1M13_result,                                                          \n";
mux6_r16 << "         B1M14_result,                                                          \n";
mux6_r16 << "         B1M15_result,                                                          \n";
mux6_r16 << "         m2_sel                                                                \n";
mux6_r16 << ");                                                                                      \n";
mux6_r16 << "                                                                                        \n";
mux6_r16 << "parameter CP_WIDTH = " << CP_width <<";                                                                \n";
mux6_r16 << "parameter CP_ZERO  = " << CP_width <<"'d0;                                                             \n";
mux6_r16 << "                                                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D0;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D1;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D2;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D3;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D4;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D5;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D6;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D7;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D8;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D9;                                                         \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D10;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D11;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D12;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D13;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D14;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] ExtB0_D15;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD0_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD1_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD2_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD3_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD4_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD5_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD6_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD7_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD8_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD9_out;                                                        \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD10_out;                                                       \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD11_out;                                                       \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD12_out;                                                       \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD13_out;                                                       \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD14_out;                                                       \n";
mux6_r16 << "output [CP_WIDTH-1:0] MulD15_out;                                                       \n";
mux6_r16 << "                                                                                        \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D0;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D1;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D2;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D3;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D4;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D5;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D6;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D7;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D8;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D9;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D10;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D11;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D12;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D13;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D14;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] ExtB1_D15;                                               \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S0;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S1;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S2;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S3;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S4;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S5;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S6;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S7;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S8;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S9;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S10;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S11;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S12;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S13;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S14;                                                  \n";
mux6_r16 << " output [CP_WIDTH-1:0] BR_S15;                                                  \n";
mux6_r16 << "                                                                               \n";
mux6_r16 << " input                 m2_sel;                                                  \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M0_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M1_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M2_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M3_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M4_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M5_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M6_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M7_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M8_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M9_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M10_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M11_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M12_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M13_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M14_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B1M15_result;                                             \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M0_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M1_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M2_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M3_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M4_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M5_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M6_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M7_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M8_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M9_result;                                                       \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M10_result;                                                      \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M11_result;                                                      \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M12_result;                                                      \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M13_result;                                                      \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M14_result;                                                      \n";
mux6_r16 << " input  [CP_WIDTH-1:0] B0M15_result;                                                      \n";
mux6_r16 << "                                                                                        \n";
//-------------------------------------------------------------------------------------------------------
// modify at 2021/ 02 / 19 , for toggle coverage
//mux6_r16 << "  assign ExtB0_D0  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M0_result;                    \n";
//mux6_r16 << "  assign ExtB0_D1  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M1_result;                    \n";
//mux6_r16 << "  assign ExtB0_D2  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M2_result;                    \n";
//mux6_r16 << "  assign ExtB0_D3  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M3_result;                    \n";
//mux6_r16 << "  assign ExtB0_D4  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M4_result;                    \n";
//mux6_r16 << "  assign ExtB0_D5  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M5_result;                    \n";
//mux6_r16 << "  assign ExtB0_D6  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M6_result;                    \n";
//mux6_r16 << "  assign ExtB0_D7  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M7_result;                    \n";
//mux6_r16 << "  assign ExtB0_D8  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M8_result;                    \n";
//mux6_r16 << "  assign ExtB0_D9  = ( m2_sel == 1'b1) ?  CP_ZERO: B0M9_result;                    \n";
//mux6_r16 << "  assign ExtB0_D10 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M10_result;                   \n";
//mux6_r16 << "  assign ExtB0_D11 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M11_result;                   \n";
//mux6_r16 << "  assign ExtB0_D12 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M12_result;                   \n";
//mux6_r16 << "  assign ExtB0_D13 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M13_result;                   \n";
//mux6_r16 << "  assign ExtB0_D14 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M14_result;                   \n";
//mux6_r16 << "  assign ExtB0_D15 = ( m2_sel == 1'b1) ?  CP_ZERO: B0M15_result;                   \n";
//mux6_r16 << "   assign ExtB1_D0  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M0_result;                 \n";
//mux6_r16 << "   assign ExtB1_D1  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M1_result;                 \n";
//mux6_r16 << "   assign ExtB1_D2  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M2_result;                 \n";
//mux6_r16 << "   assign ExtB1_D3  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M3_result;                 \n";
//mux6_r16 << "   assign ExtB1_D4  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M4_result;                 \n";
//mux6_r16 << "   assign ExtB1_D5  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M5_result;                 \n";
//mux6_r16 << "   assign ExtB1_D6  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M6_result;                 \n";
//mux6_r16 << "   assign ExtB1_D7  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M7_result;                 \n";
//mux6_r16 << "   assign ExtB1_D8  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M8_result;                 \n";
//mux6_r16 << "   assign ExtB1_D9  = ( m2_sel == 1'b1) ?  CP_ZERO: B1M9_result;                 \n";
//mux6_r16 << "   assign ExtB1_D10 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M10_result;                 \n";
//mux6_r16 << "   assign ExtB1_D11 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M11_result;                 \n";
//mux6_r16 << "   assign ExtB1_D12 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M12_result;                 \n";
//mux6_r16 << "   assign ExtB1_D13 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M13_result;                 \n";
//mux6_r16 << "   assign ExtB1_D14 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M14_result;                 \n";
//mux6_r16 << "   assign ExtB1_D15 = ( m2_sel == 1'b1) ?  CP_ZERO: B1M15_result;                 \n";
mux6_r16 << "  assign ExtB0_D0  =  B0M0_result; \n";
mux6_r16 << "  assign ExtB0_D1  =  B0M1_result; \n";
mux6_r16 << "  assign ExtB0_D2  =  B0M2_result; \n";
mux6_r16 << "  assign ExtB0_D3  =  B0M3_result; \n";
mux6_r16 << "  assign ExtB0_D4  =  B0M4_result; \n";
mux6_r16 << "  assign ExtB0_D5  =  B0M5_result; \n";
mux6_r16 << "  assign ExtB0_D6  =  B0M6_result; \n";
mux6_r16 << "  assign ExtB0_D7  =  B0M7_result; \n";
mux6_r16 << "  assign ExtB0_D8  =  B0M8_result; \n";
mux6_r16 << "  assign ExtB0_D9  =  B0M9_result; \n";
mux6_r16 << "  assign ExtB0_D10 =  B0M10_result;\n";
mux6_r16 << "  assign ExtB0_D11 =  B0M11_result;\n";
mux6_r16 << "  assign ExtB0_D12 =  B0M12_result;\n";
mux6_r16 << "  assign ExtB0_D13 =  B0M13_result;\n";
mux6_r16 << "  assign ExtB0_D14 =  B0M14_result;\n";
mux6_r16 << "  assign ExtB0_D15 =  B0M15_result;\n";
mux6_r16 << "  assign ExtB1_D0  =  B1M0_result; \n";
mux6_r16 << "  assign ExtB1_D1  =  B1M1_result; \n";
mux6_r16 << "  assign ExtB1_D2  =  B1M2_result; \n";
mux6_r16 << "  assign ExtB1_D3  =  B1M3_result; \n";
mux6_r16 << "  assign ExtB1_D4  =  B1M4_result; \n";
mux6_r16 << "  assign ExtB1_D5  =  B1M5_result; \n";
mux6_r16 << "  assign ExtB1_D6  =  B1M6_result; \n";
mux6_r16 << "  assign ExtB1_D7  =  B1M7_result; \n";
mux6_r16 << "  assign ExtB1_D8  =  B1M8_result; \n";
mux6_r16 << "  assign ExtB1_D9  =  B1M9_result; \n";
mux6_r16 << "  assign ExtB1_D10 =  B1M10_result; \n";
mux6_r16 << "  assign ExtB1_D11 =  B1M11_result; \n";
mux6_r16 << "  assign ExtB1_D12 =  B1M12_result; \n";
mux6_r16 << "  assign ExtB1_D13 =  B1M13_result; \n";
mux6_r16 << "  assign ExtB1_D14 =  B1M14_result; \n";
mux6_r16 << "  assign ExtB1_D15 =  B1M15_result; \n";
//----------------------------------------------------------------------------------------------------------
mux6_r16 << "                                                                                        \n";
mux6_r16 << "  assign MulD0_out  = ( m2_sel == 1'b1) ?  B0M0_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD1_out  = ( m2_sel == 1'b1) ?  B0M1_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD2_out  = ( m2_sel == 1'b1) ?  B0M2_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD3_out  = ( m2_sel == 1'b1) ?  B0M3_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD4_out  = ( m2_sel == 1'b1) ?  B0M4_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD5_out  = ( m2_sel == 1'b1) ?  B0M5_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD6_out  = ( m2_sel == 1'b1) ?  B0M6_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD7_out  = ( m2_sel == 1'b1) ?  B0M7_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD8_out  = ( m2_sel == 1'b1) ?  B0M8_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD9_out  = ( m2_sel == 1'b1) ?  B0M9_result  : CP_ZERO;  \n";
mux6_r16 << "  assign MulD10_out = ( m2_sel == 1'b1) ?  B0M10_result : CP_ZERO;  \n";
mux6_r16 << "  assign MulD11_out = ( m2_sel == 1'b1) ?  B0M11_result : CP_ZERO;  \n";
mux6_r16 << "  assign MulD12_out = ( m2_sel == 1'b1) ?  B0M12_result : CP_ZERO;  \n";
mux6_r16 << "  assign MulD13_out = ( m2_sel == 1'b1) ?  B0M13_result : CP_ZERO;  \n";
mux6_r16 << "  assign MulD14_out = ( m2_sel == 1'b1) ?  B0M14_result : CP_ZERO;  \n";
mux6_r16 << "  assign MulD15_out = ( m2_sel == 1'b1) ?  B0M15_result : CP_ZERO;  \n";
mux6_r16 << "                                                                                        \n";
mux6_r16 << "   assign BR_S0  = ( m2_sel == 1'b1) ?  B1M0_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S1  = ( m2_sel == 1'b1) ?  B1M1_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S2  = ( m2_sel == 1'b1) ?  B1M2_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S3  = ( m2_sel == 1'b1) ?  B1M3_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S4  = ( m2_sel == 1'b1) ?  B1M4_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S5  = ( m2_sel == 1'b1) ?  B1M5_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S6  = ( m2_sel == 1'b1) ?  B1M6_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S7  = ( m2_sel == 1'b1) ?  B1M7_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S8  = ( m2_sel == 1'b1) ?  B1M8_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S9  = ( m2_sel == 1'b1) ?  B1M9_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S10 = ( m2_sel == 1'b1) ?  B1M10_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S11 = ( m2_sel == 1'b1) ?  B1M11_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S12 = ( m2_sel == 1'b1) ?  B1M12_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S13 = ( m2_sel == 1'b1) ?  B1M13_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S14 = ( m2_sel == 1'b1) ?  B1M14_result : CP_ZERO;    \n";
mux6_r16 << "   assign BR_S15 = ( m2_sel == 1'b1) ?  B1M15_result : CP_ZERO;    \n";
mux6_r16 << "                                                                                        \n";
mux6_r16 << "endmodule                                                                               \n"; 
	 
	 mux6_r16.close();  
}
