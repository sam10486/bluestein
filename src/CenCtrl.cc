#include <vector>
#include <iostream>
#include <fstream>
#include <math.h>
#include <sstream>

#include "CenCtrl.h"

void CenCtrl::parameter_set(unsigned long r,long m_th,long phi_m,unsigned long fft_p,unsigned long CP_w){
     CP_width = CP_w;
	 m     = m_th;
	 phim  = phi_m;
	 double ireROM_bits;
	 ireROM_bits  = ceil((double)m / r);
	 ireROM_bits  = log2(ireROM_bits);
	 ireROM_bits  = ceil(ireROM_bits);
	 IReROM_width  = ireROM_bits;
	
	 
     //=========================
     double  addr_w;
	 double  fft_stage;
	 double  stage_w;
	 double  LD_CYCLE;
	 int fft_stage_ceil;
	 int fft_stage_floor;
	 addr_w          = fft_p / r;
	 addr_w          = log2(addr_w);
	 addr_w          = ceil(addr_w);
	 fft_stage       = log(fft_p)/log(r);
	 fft_stage_ceil  = (int)ceil(fft_stage);
	 fft_stage_floor = (int)floor(fft_stage);
	 //the fft point is not power of radix.
	 if(fft_stage_ceil != fft_stage_floor){
		IsMixed = 1;
        fft_stage   = floor(fft_stage);		
		stage_w     = log2(fft_stage + 1);
		//modify 2020/09/17 , stage_width add one bits ,prevent overflow 
		stage_w     = ceil(stage_w) + 1;
		No_stage    = (unsigned long)fft_stage + 1; // add one is the final stage , radix-2
	 }else {
		 IsMixed = 0;
		 stage_w         = log2(fft_stage+1);
		 stage_w         = ceil(stage_w); 
		 No_stage        = (unsigned long)fft_stage;
	 }
	 
	 //parameter     
	 radix           =   r;
	 fft_point       =   fft_p;
	 addr_width      =  (unsigned long)(addr_w-1);
	 data_cnt_width  =  (unsigned long)(stage_w + addr_w); 
	 //parameter for DCNT and EXTMA_V1
	 //===========================================================
	 LD_CYCLE         =  fft_p / (2 * radix);
	 LD_CYCLE         =  ceil(LD_CYCLE);
	 NO_LD            =  (unsigned long) LD_CYCLE;
	 //===========================================================
	 NO_U_BUPS        =  fft_point / (radix);
	 NO_D_Muldata     =  5;// it is fixed for bluestein's fft design.
	 ROM_width        =  (unsigned long) addr_w;
	 stage_width      =  (unsigned long) stage_w;
	 BU_counter_width =  ROM_width;
	 FFT_dc.resize(No_stage);
	 //*******************************************************************************
	 //need to modify
	 for(unsigned long i = 0; i < (No_stage-1); i++){
		 unsigned long iteration_perstage; // number of cycles per stage
		 iteration_perstage = NO_U_BUPS;
		 FFT_dc[i]  = (iteration_perstage*(i+1)) - 1 ; 
	 }
	 FFT_dc[No_stage -1] = (NO_U_BUPS * No_stage) + (3*radix -1);
	 DCNT_BP1 = (unsigned long)log2(radix)-1;
	 DCNT_BP2 = DCNT_BP1 + 1;         // log2(radix)
	 DCNT_BP3 = BU_counter_width - 1; // log2(group) + log2(radix) -1
	 DCNT_BP4 = DCNT_BP3 + 1;             //log2(group) + log2(radix)
	 //calculate DCNT_FS
     unsigned long tmp_fs;    // store value is (fft_point/radix)*(d-1)	 
	 DCNT_FS.resize(radix-2); //only need r-2 
	 tmp_fs = (fft_point / radix) * (No_stage-1) + 2;
	 for(unsigned long j=0; j < (radix-2) ; j++){
         DCNT_FS[j] = tmp_fs + j;
	 }
}

void CenCtrl::gen(unsigned long r,std::string string_in){
     radix = r;
	 unsigned long  Mixed_radix;
	 
	 Mixed_radix  = fft_point;
	 while( Mixed_radix % 16 == 0){
	     Mixed_radix = Mixed_radix / 16 ;
	 }	 
	 
     if(r == 4){
         R4_InpipeReg(string_in);
		 R4_BU_outpipe(string_in);
         IReorderMA_pip(string_in);
         order_ROMReg_r4(string_in);
		 Rectrl(string_in);
         CenCtrl_r4(string_in);
         R4_ROMPipeReg1(string_in);
         if(IsMixed == 0){
			 R4_AGU(string_in);
			 R4_DC(string_in);
             Ctrl_PipeReg1_r4(string_in);        			 
		 }
		 else {
			 R4_R2_AGU(string_in);
			 R4_R2_DC(string_in);   
             Ctrl_PipeReg1_r4_r2(string_in);			 
		 }
         R4_WAddr(string_in);
         R4_WD_buf(string_in);        
     }
	 if(r==8){
		 R8_InpipeReg(string_in);
		 R8_BU_outpipe(string_in);
		 IReorderMA_pip(string_in);
		 order_ROMReg_r8(string_in);
		 Rectrl(string_in);
         CenCtrl_r8(string_in);
         //Ctrl_PipeReg1_r8(string_in);
         Ctrl_PipeReg1_r8_R2P(string_in);
         //R8_ROMPipeReg1(string_in);
         R8_ROMPipeReg1_R2P(string_in);
         R8_AGU(string_in);
         R8_WAddr(string_in);
         //R8_WD_buf(string_in);
         R8_WD_buf_R2P(string_in);
         R8_DC(string_in);	 
	 }
     if(r==16){
		 R16_InpipeReg(string_in);
		 R16_BU_outpipe(string_in);
		 IReorderMA_pip(string_in);
		 order_ROMReg_r16(string_in);
		 Rectrl(string_in);
         CenCtrl_16(string_in);
		 //R16_ROMPipeReg1(string_in);
		 R16_ROMPipeReg1_R2P(string_in);
         if(IsMixed == 0){
			R16_AGU(string_in);
			//Ctrl_PipeReg1(string_in);
			Ctrl_PipeReg1_R2P(string_in);
			R16_DC(string_in);
		 }else {
			Ctrl_PipeReg1_R2P_Mixed_Radix(string_in);
			if(Mixed_radix == 2){
				R16_R2_AGU(string_in);
				//Ctrl_PipeReg1_r16_r2(string_in);
				R16_R2_DC(string_in);
			}else if(Mixed_radix == 4){
				R16_R4_AGU(string_in);
				//Ctrl_PipeReg1_r16_r4(string_in);
				R16_R4_DC(string_in);
			}else if(Mixed_radix == 8){
				R16_R8_AGU(string_in);
				//Ctrl_PipeReg1_r16_r8(string_in);
				R16_R8_DC(string_in);
			}			 
		 }
         R16_WAddr(string_in);
         //R16_WD_buf(string_in);
         R16_WD_buf_R2P(string_in);
     }
}

void CenCtrl::R4_InpipeReg(std::string string_in){
     std::ofstream r4_inpipereg;
     std::string        string_buf = "/R4_InpipeReg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_inpipereg.open(ss.str());    
 r4_inpipereg << " //===================================                                \n";
 r4_inpipereg << " //Note:input data pipline buffer                                     \n";
 r4_inpipereg << " //===================================                                \n";
 r4_inpipereg << " `timescale 1ns/1ps                                                   \n";
 r4_inpipereg << " module R4_InpipeReg(                                                 \n";
 r4_inpipereg << "         ExtValid_in,                                                 \n";
 r4_inpipereg << "         ExtB0_D0_in,                                                 \n";
 r4_inpipereg << "         ExtB0_D1_in,                                                 \n";
 r4_inpipereg << "         ExtB0_D2_in,                                                 \n";
 r4_inpipereg << "         ExtB0_D3_in,                                                 \n";
 r4_inpipereg << "         ExtB1_D0_in,                                                 \n";
 r4_inpipereg << "         ExtB1_D1_in,                                                 \n";
 r4_inpipereg << "         ExtB1_D2_in,                                                 \n";
 r4_inpipereg << "         ExtB1_D3_in,                                                 \n"; 
 r4_inpipereg << "         ExtValid_out,                                                \n";
 r4_inpipereg << "         ExtB0_D0_out,                                                \n";
 r4_inpipereg << "         ExtB0_D1_out,                                                \n";
 r4_inpipereg << "         ExtB0_D2_out,                                                \n";
 r4_inpipereg << "         ExtB0_D3_out,                                                \n";
 r4_inpipereg << "         ExtB1_D0_out,                                                \n";
 r4_inpipereg << "         ExtB1_D1_out,                                                \n";
 r4_inpipereg << "         ExtB1_D2_out,                                                \n";
 r4_inpipereg << "         ExtB1_D3_out,                                                \n";
 r4_inpipereg << "         rst_n,                                                       \n";
 r4_inpipereg << "         clk                                                          \n";
 r4_inpipereg << " );                                                                   \n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "     parameter CP_WIDTH = "<< CP_width <<";                           \n";
 r4_inpipereg << "     parameter CP_ZERO  = "<< CP_width <<"'d0;\n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "     output               ExtValid_out;                               \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D0_out;                              \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D1_out;                              \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D2_out;                              \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D3_out;                              \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D0_out;                              \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D1_out;                              \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D2_out;                              \n";
 r4_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D3_out;                              \n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "     input                ExtValid_in;                                \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D0_in;                               \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D1_in;                               \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D2_in;                               \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D3_in;                               \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D0_in;                               \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D1_in;                               \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D2_in;                               \n";
 r4_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D3_in;                               \n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "     input                rst_n;                                      \n";
 r4_inpipereg << "     input                clk;                                        \n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "     reg               ExtValid_reg0;                                 \n";
 r4_inpipereg << "     reg               ExtValid_reg1;                                 \n";
 r4_inpipereg << "     reg               ExtValid_reg2;                                 \n";
 r4_inpipereg << "     reg               ExtValid_out;                                  \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D0_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D0_out;                                 \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D1_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D1_out;                                 \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D2_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D2_out;                                 \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D3_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D3_out;                                 \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D0_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D0_out;                                 \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D1_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D1_out;                                 \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D2_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D2_out;                                 \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D3_d;                                   \n";
 r4_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D3_out;                                 \n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "                                                                      \n";
 r4_inpipereg << "     always@(posedge clk or negedge rst_n)begin                       \n";
 r4_inpipereg << "         if(~rst_n)begin                                              \n";
 r4_inpipereg << "             ExtValid_reg0    <= 1'b0    ;                            \n";
 r4_inpipereg << "             ExtValid_reg1    <= 1'b0    ;                            \n";
 r4_inpipereg << "             ExtValid_reg2    <= 1'b0    ;                            \n";
 r4_inpipereg << "             ExtValid_out     <= 1'b0    ;                            \n";
 r4_inpipereg << "             //                                                       \n";
 r4_inpipereg << "             ExtB0_D0_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB0_D0_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB0_D1_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB0_D1_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB0_D2_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB0_D2_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB0_D3_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB0_D3_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D0_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D0_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D1_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D1_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D2_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D2_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D3_d        <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             ExtB1_D3_out      <= CP_ZERO  ;                           \n";
 r4_inpipereg << "             //                                                       \n";
 r4_inpipereg << "         end                                                          \n";
 r4_inpipereg << "         else begin                                                   \n";
 r4_inpipereg << "             ExtValid_reg0     <= ExtValid_in     ;                   \n";
 r4_inpipereg << "             ExtValid_reg1     <= ExtValid_reg0   ;                   \n";
 r4_inpipereg << "             ExtValid_reg2     <= ExtValid_reg1   ;                   \n";
 r4_inpipereg << "             ExtValid_out      <= ExtValid_reg2   ;                   \n";
 r4_inpipereg << "             //                                                       \n";
 r4_inpipereg << "             ExtB0_D0_d        <= ExtB0_D0_in   ;                     \n";
 r4_inpipereg << "             ExtB0_D0_out      <= ExtB0_D0_d    ;                     \n";
 r4_inpipereg << "             ExtB0_D1_d        <= ExtB0_D1_in   ;                     \n";
 r4_inpipereg << "             ExtB0_D1_out      <= ExtB0_D1_d    ;                     \n";
 r4_inpipereg << "             ExtB0_D2_d        <= ExtB0_D2_in   ;                     \n";
 r4_inpipereg << "             ExtB0_D2_out      <= ExtB0_D2_d    ;                     \n";
 r4_inpipereg << "             ExtB0_D3_d        <= ExtB0_D3_in   ;                     \n";
 r4_inpipereg << "             ExtB0_D3_out      <= ExtB0_D3_d    ;                     \n";
 r4_inpipereg << "             ExtB1_D0_d        <= ExtB1_D0_in   ;                     \n";
 r4_inpipereg << "             ExtB1_D0_out      <= ExtB1_D0_d    ;                     \n";
 r4_inpipereg << "             ExtB1_D1_d        <= ExtB1_D1_in   ;                     \n";
 r4_inpipereg << "             ExtB1_D1_out      <= ExtB1_D1_d    ;                     \n";
 r4_inpipereg << "             ExtB1_D2_d        <= ExtB1_D2_in   ;                     \n";
 r4_inpipereg << "             ExtB1_D2_out      <= ExtB1_D2_d    ;                     \n";
 r4_inpipereg << "             ExtB1_D3_d        <= ExtB1_D3_in   ;                     \n";
 r4_inpipereg << "             ExtB1_D3_out      <= ExtB1_D3_d   ;                     \n";
 r4_inpipereg << "             //                                                       \n";
 r4_inpipereg << "         end                                                          \n";
 r4_inpipereg << "     end                                                              \n";
 r4_inpipereg << " endmodule                                                            \n";
    
     r4_inpipereg.close();
}

void CenCtrl::R4_BU_outpipe(std::string string_in){
     std::ofstream r4_bu_outpipe;
     std::string        string_buf = "/R4_BU_outpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_bu_outpipe.open(ss.str());    	
r4_bu_outpipe << "//=============================================\n";
r4_bu_outpipe << "//Writer:Shi-Yong Wu                           \n";
r4_bu_outpipe << "//                                             \n";
r4_bu_outpipe << "//Note:R4 data output pipe                     \n";
r4_bu_outpipe << "//=============================================\n";
r4_bu_outpipe << "module R4_BU_outpipe(                             \n";
r4_bu_outpipe << "  CRUD0_o,                                     \n";
r4_bu_outpipe << "  CRUD1_o,                                     \n";
r4_bu_outpipe << "  CRUD2_o,                                     \n";
r4_bu_outpipe << "  CRUD3_o,                                     \n";
r4_bu_outpipe << "  BR0_o,                                       \n";
r4_bu_outpipe << "  BR1_o,                                       \n";
r4_bu_outpipe << "  BR2_o,                                       \n";
r4_bu_outpipe << "  BR3_o,                                       \n";
r4_bu_outpipe << "  CRUD0_i,                                     \n";
r4_bu_outpipe << "  CRUD1_i,                                     \n";
r4_bu_outpipe << "  CRUD2_i,                                     \n";
r4_bu_outpipe << "  CRUD3_i,                                     \n";
r4_bu_outpipe << "  rst_n,                                       \n";
r4_bu_outpipe << "  clk                                          \n";
r4_bu_outpipe << ");                                             \n";
r4_bu_outpipe << "                                               \n";
r4_bu_outpipe << "  parameter P_WIDTH    = " << "64;\n";
r4_bu_outpipe << "  parameter P_ZERO     = " << "64'd0;\n";
r4_bu_outpipe << "  parameter BRD_WIDTH  = " << (64-(2*CP_width)) <<";                      \n";
r4_bu_outpipe << "  parameter BRD_ZERO   = " << (64-(2*CP_width)) <<"'d0;                   \n";
r4_bu_outpipe << "                                               \n";
r4_bu_outpipe << "  output [P_WIDTH-1:0] CRUD0_o;                \n";
r4_bu_outpipe << "  output [P_WIDTH-1:0] CRUD1_o;                \n";
r4_bu_outpipe << "  output [P_WIDTH-1:0] CRUD2_o;                \n";
r4_bu_outpipe << "  output [P_WIDTH-1:0] CRUD3_o;                \n";
r4_bu_outpipe << "  //to module BR Input                         \n";
r4_bu_outpipe << "  output [BRD_WIDTH-1:0] BR0_o;                \n";
r4_bu_outpipe << "  output [BRD_WIDTH-1:0] BR1_o;                \n";
r4_bu_outpipe << "  output [BRD_WIDTH-1:0] BR2_o;                \n";
r4_bu_outpipe << "  output [BRD_WIDTH-1:0] BR3_o;                \n";
r4_bu_outpipe << "                                               \n";
r4_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD0_i;                \n";
r4_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD1_i;                \n";
r4_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD2_i;                \n";
r4_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD3_i;                \n";
r4_bu_outpipe << "  input  				rst_n;                   \n";
r4_bu_outpipe << "  input 				clk;                     \n";
r4_bu_outpipe << "                                               \n";
r4_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD0_o;                    \n";
r4_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD1_o;                    \n";
r4_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD2_o;                    \n";
r4_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD3_o;                    \n";
r4_bu_outpipe << "  //to module BR Input                         \n";
r4_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR0_o;                   \n";
r4_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR1_o;                   \n";
r4_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR2_o;                   \n";
r4_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR3_o;                   \n";
r4_bu_outpipe << "                                               \n";
r4_bu_outpipe << "  always@(posedge clk,negedge rst_n)begin      \n";
r4_bu_outpipe << "		if(~rst_n)begin                              \n";
r4_bu_outpipe << "		    CRUD0_o   <=  P_ZERO;                 \n";
r4_bu_outpipe << "		    CRUD1_o   <=  P_ZERO;                 \n";
r4_bu_outpipe << "		    CRUD2_o   <=  P_ZERO;                 \n";
r4_bu_outpipe << "		    CRUD3_o   <=  P_ZERO;                 \n";
r4_bu_outpipe << "		    BR0_o     <=  BRD_ZERO;                  \n";
r4_bu_outpipe << "		    BR1_o     <=  BRD_ZERO;                  \n";
r4_bu_outpipe << "		    BR2_o     <=  BRD_ZERO;                  \n";
r4_bu_outpipe << "		    BR3_o     <=  BRD_ZERO;                  \n";
r4_bu_outpipe << "		end                                           \n";
r4_bu_outpipe << "		else begin                                    \n";
r4_bu_outpipe << "  	   CRUD0_o   <=  CRUD0_i;                 \n";
r4_bu_outpipe << "  	   CRUD1_o   <=  CRUD1_i;                 \n";
r4_bu_outpipe << "  	   CRUD2_o   <=  CRUD2_i;                 \n";
r4_bu_outpipe << "  	   CRUD3_o   <=  CRUD3_i;                 \n";
r4_bu_outpipe << "  	   BR0_o     <=  CRUD0_o["<< 63 - 2 *CP_width<<":0];                 \n";
r4_bu_outpipe << "  	   BR1_o     <=  CRUD1_o["<< 63 - 2 *CP_width<<":0];                 \n";
r4_bu_outpipe << "  	   BR2_o     <=  CRUD2_o["<< 63 - 2 *CP_width<<":0];                 \n";
r4_bu_outpipe << "  	   BR3_o     <=  CRUD3_o["<< 63 - 2 *CP_width<<":0];                 \n";
r4_bu_outpipe << "		end                                       \n";
r4_bu_outpipe << "  end                                          \n";
r4_bu_outpipe << "                                               \n";
r4_bu_outpipe << "endmodule                                      \n";	 
	 r4_bu_outpipe.close();
}

void CenCtrl::Rectrl(std::string string_in){
     std::ofstream rectrl;
     std::string        string_buf = "/Rectrl.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     rectrl.open(ss.str());
 rectrl << " //============================================                                             \n";
 rectrl << " //Note: Re-order controller                                                                \n";
 rectrl << " //data:2020/4/17                                                                           \n";
 rectrl << " //writter:shi yong                                                                         \n";
 rectrl << " //============================================                                             \n";
 rectrl << " `timescale 1ns/10ps                                                                        \n";
 rectrl << " module Rectrl(                                                                             \n";
 rectrl << "          REMA,                                                                             \n";
 rectrl << "          ExtValid_in,                                                                      \n";
 rectrl << "          rst_n,                                                                            \n";
 rectrl << "          clk                                                                               \n";
 rectrl << " );                                                                                         \n";
 rectrl << "                                                                                            \n";
  int  REMA_bit;
  int  REMA_deadline;
  REMA_bit = (ROM_width-1);
  REMA_deadline = (int) exp2(REMA_bit) - 1;
 rectrl << " parameter REMA_WIDTH = "<< REMA_bit << ";\n";
 rectrl << " parameter REMA_deadline = " << REMA_bit <<"'d"<< REMA_deadline << ";\n";
 rectrl << " parameter REMA_ZERO = " << REMA_bit <<"'d0;\n";
 rectrl << "                                                                                            \n";
 rectrl << " parameter IDLE   = 2'd0;                                                                   \n";
 rectrl << " parameter WORK   = 2'd1;                                                                   \n";
 rectrl << " parameter WORK_F = 2'd2;                                                                   \n";
 rectrl << " parameter OVER   = 2'd3;                                                                   \n";
 rectrl << "                                                                                            \n";
 rectrl << " output [REMA_WIDTH-1:0] REMA;                                                              \n";
 rectrl << "                                                                                            \n";
 rectrl << " input ExtValid_in;                                                                         \n";
 rectrl << " input clk;                                                                                 \n";
 rectrl << " input rst_n;                                                                               \n";
 rectrl << "                                                                                            \n";
 rectrl << " reg   [REMA_WIDTH-1:0] REMA;                                                               \n";
 rectrl << " reg   [1:0] state;                                                                         \n";
 rectrl << " reg   [1:0] next_state;                                                                    \n";
 rectrl << "                                                                                            \n";
 rectrl << " wire  [REMA_WIDTH-1:0]REMA_wire;                                                           \n";
 rectrl << "                                                                                            \n";
 rectrl << "                                                                                            \n";
 rectrl << "     assign REMA_wire = ((state == WORK)|| (state == WORK_F)) ? (REMA + "<< REMA_bit <<"'b1):REMA;\n";
 rectrl << "                                                                                            \n";
 rectrl << "     always@(*)begin                                                                        \n";
 rectrl << "         case(state)                                                                        \n";
 rectrl << "             IDLE:begin                                                                     \n";
 rectrl << "                     if(ExtValid_in)next_state = WORK;                                      \n";
 rectrl << "                     else next_state = IDLE;                                                \n";
 rectrl << "             end                                                                            \n";
 rectrl << "             WORK:begin                                                                     \n";
 rectrl << "                     if(REMA < REMA_deadline) next_state = WORK;                            \n";
 rectrl << "                     else next_state = WORK_F;                                              \n";
 rectrl << "             end                                                                            \n";
 rectrl << "             WORK_F:begin                                                                   \n";
 rectrl << "                     next_state = OVER;                                                     \n";
 rectrl << "             end                                                                            \n";
 rectrl << "             OVER:begin                                                                     \n";
 rectrl << "                     next_state = OVER;                                                     \n";
 rectrl << "             end                                                                            \n";
 rectrl << "             default: next_state = IDLE;                                                    \n";
 rectrl << "         endcase                                                                            \n";
 rectrl << "     end                                                                                    \n";
 rectrl << "                                                                                            \n";
 rectrl << "     always@(posedge clk,negedge rst_n)begin                                                \n";
 rectrl << "         if(~rst_n)begin                                                                    \n";
 rectrl << "             REMA  <=  REMA_ZERO;                                                           \n";
 rectrl << "             state <=  2'b0;                                                                \n";
 rectrl << "         end                                                                                \n";
 rectrl << "         else begin                                                                         \n";
 rectrl << "             REMA  <= REMA_wire;                                                            \n";
 rectrl << "             state <= next_state;                                                           \n";
 rectrl << "         end                                                                                \n";
 rectrl << "     end                                                                                    \n";
 rectrl << "                                                                                            \n";
 rectrl << " endmodule                                                                                  \n";   

     rectrl.close();
}

void CenCtrl::IReorderMA_pip(std::string string_in){
     std::ofstream ireorderma_pip;
     std::string        string_buf = "/IReorderMA_pip.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     ireorderma_pip.open(ss.str());
 ireorderma_pip << "  //==================================================     \n";                                                        
 ireorderma_pip << "  //Writer     : shi yong                                  \n";                                                    
 ireorderma_pip << "  //Date       : 2020/4/20                                 \n";                                                         
 ireorderma_pip << "  //Note       : MA of inverse re-order pipeline           \n";
 ireorderma_pip << "  //==================================================     \n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "  module IReorderMA_pip(                                   \n";
 ireorderma_pip << "                         IREMA_o,                          \n";
 ireorderma_pip << "                         MA_i,                             \n";
 ireorderma_pip << "                         rst_n,                            \n";
 ireorderma_pip << "                         clk                               \n";
 ireorderma_pip << "  );                                                       \n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "  parameter IREMA_WIDTH = "<< IReROM_width <<";\n";
 ireorderma_pip << "  parameter IREMA_ZERO  = "<< IReROM_width <<"'d0;\n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "  output [IREMA_WIDTH-1:0] IREMA_o;                        \n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "  input  [IREMA_WIDTH-1:0] MA_i;                           \n";
 ireorderma_pip << "  input                    rst_n;                          \n";
 ireorderma_pip << "  input                    clk;                            \n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "  reg    [IREMA_WIDTH-1:0] IREMA_o;                        \n";
 ireorderma_pip << "  reg    [IREMA_WIDTH-1:0] IREMA_d0;                        \n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "  always @(posedge clk,negedge rst_n)begin                 \n";
 ireorderma_pip << "     if(~rst_n)begin                                       \n";
 ireorderma_pip << "         IREMA_o  <= IREMA_ZERO;                           \n";
 ireorderma_pip << "         IREMA_d0 <= IREMA_ZERO;                           \n";
 ireorderma_pip << "     end                                                   \n";
 ireorderma_pip << "     else begin                                            \n";
 ireorderma_pip << "         IREMA_d0 <= MA_i;                                 \n";
 ireorderma_pip << "         IREMA_o  <= IREMA_d0;                             \n";
 ireorderma_pip << "     end                                                   \n";
 ireorderma_pip << "  end                                                      \n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "                                                           \n";
 ireorderma_pip << "  endmodule                                                \n";

     ireorderma_pip.close();
}

void CenCtrl::CenCtrl_r4(std::string string_in){
     std::ofstream cenctrl_r4;
     std::string        string_buf = "/CenCtrl.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     cenctrl_r4.open(ss.str());
 cenctrl_r4 << " //==================================================                                                             \n";
 cenctrl_r4 << " //                                                                                         \n";
 cenctrl_r4 << " //Date       : 2018/8/1                                                                                          \n";
 cenctrl_r4 << " //Note       : Central controller                                                                                \n";
 cenctrl_r4 << " //==================================================                                                             \n";
 cenctrl_r4 << " `timescale 1 ns/1 ps                                                                                             \n";
 cenctrl_r4 << " module CenCtrl(MulValid_out,                                                                                     \n";
 cenctrl_r4 << " 			     cen_out,                                                                                         \n";
 cenctrl_r4 << " 			     wen0_out,                                                                                        \n";
 cenctrl_r4 << " 			     wen1_out,                                                                                        \n";
 cenctrl_r4 << " 			     ema_out,                                                                                         \n";
 cenctrl_r4 << " 			     SD_sel_out,                                                                                      \n";
 cenctrl_r4 << " 			     ExtMA_out,                                                                                       \n";
 cenctrl_r4 << " 			     AGU_en_out,                                                                                      \n";
 cenctrl_r4 << " 			     RomCen_out,                                                                                      \n";
 cenctrl_r4 << " 			     mode_sel_out,                                                                                    \n";
 cenctrl_r4 << " 			     rc_sel_out,                                                                                      \n";
 cenctrl_r4 << " 			     m2_sel_out,                                                                                      \n";
 cenctrl_r4 << " 			     wrfd_en_out, //2018/08/01                                                                        \n";
 cenctrl_r4 << " 			     data_cnt_in,                                                                                     \n";
 cenctrl_r4 << " 			     BND_in,                                                                                          \n";
 cenctrl_r4 << " 			     ExtValid_in,                                                                                     \n";
 cenctrl_r4 << "                rst_n,                                                                                            \n";
 cenctrl_r4 << "                clk                                                                                               \n";
 cenctrl_r4 << "                ) ;                                                                                               \n";
 cenctrl_r4 << " 			   			                                                                                          \n";
 cenctrl_r4 << " parameter A_WIDTH  = " << addr_width << " ;                                                                      \n";
 cenctrl_r4 << " parameter DC_WIDTH = " << data_cnt_width << ";                                                                   \n";
 cenctrl_r4 << " parameter WC_WIDTH = 4 ; //12, 4-bit, 2018/08/01                                                                 \n";
 cenctrl_r4 << " parameter A_ZERO  =  " << addr_width << "'h0 ;                                                                   \n";
 cenctrl_r4 << " parameter WC_ZERO = 4'h0 ; //2018/08/01                                                                          \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " parameter S_WIDTH   = 4 ;                                                                                        \n";
 cenctrl_r4 << " //INITIAL                                                                                                        \n";
 cenctrl_r4 << " parameter INI              = 4'd0 ;                                                                              \n";
 cenctrl_r4 << " parameter LD_EXTD          = 4'd1 ;                                                                              \n";
 cenctrl_r4 << " parameter LD_EXTDF         = 4'd2 ;                                                                              \n";
 cenctrl_r4 << " parameter LD_STAGE1_ST     = 4'd3 ;                                                                              \n";
 cenctrl_r4 << " parameter ST_STAGE1        = 4'd4 ;                                                                              \n";
 cenctrl_r4 << " parameter WR_FIND          = 4'd5 ; //2018/08/01                                                                 \n";
 cenctrl_r4 << " parameter LD_STAGE2_ST     = 4'd6 ; //2018/08/01                                                                 \n";
 cenctrl_r4 << " parameter SET_IFFT         = 4'd7 ;                                                                              \n";
 cenctrl_r4 << " parameter LD_IFFTSTAGE1_ST = 4'd8 ;                                                                              \n";
 cenctrl_r4 << " parameter ST_IFFTSTAGE1    = 4'd9 ;                                                                              \n";
 cenctrl_r4 << " parameter WR_IFFTFIND      = 4'd10 ; //2018/08/01                                                                \n";
 cenctrl_r4 << " parameter LD_IFFTSTAGE2_ST = 4'd11 ; //2018/08/01                                                                \n";
 cenctrl_r4 << " parameter SET_RC           = 4'd12 ;                                                                             \n";
 cenctrl_r4 << " parameter SET_RCF          = 4'd13 ;                                                                             \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " //ExT Address value1 for LD_EXTD                                                                                 \n";
 cenctrl_r4 << " parameter EXTMA_V1 = " << addr_width << "'d" << (NO_LD -1) <<";                                                  \n";
 cenctrl_r4 << " //data counter value1 for ST_STAGE1 and ST_IFFTSTAGE1                                                            \n";
 cenctrl_r4 << " parameter DCNT_V1  = " << data_cnt_width << "'d" << FFT_dc[No_stage-1] << ";                                     \n";
 cenctrl_r4 << " //data counter value2 for SET_RC                                                                                 \n";
 cenctrl_r4 << " parameter DCNT_V2  = " << data_cnt_width << "'d" << ceil((double)m/radix) +4 << "; //delay 3 clock,waitting for output data       \n";
 cenctrl_r4 << " //data counter value3 for MulValid_out                                                                           \n";
 cenctrl_r4 << " parameter DCNT_V3  = " << data_cnt_width << "'d" << NO_D_Muldata << ";                                           \n";
 cenctrl_r4 << " //data counter value4 for ST_STAGE1 and ST_IFFTSTAGE1                                                            \n";
 for (unsigned long i = 0; i < (No_stage-1);i++){                                                                                 
    cenctrl_r4 << "parameter DCNT_V" << (i+4) << " = " << data_cnt_width <<"'d"<< FFT_dc[i] << ";                                 \n";
 }                                                                                                                                
 cenctrl_r4 << " //  12-2, WenCnt_reg for LD_STAGE1_ST and LD_IFFTSTAGE1_ST                                                       \n";
 cenctrl_r4 << " parameter WC_V1    = 4'd10 ;   //WC_V1 = 3 * r - 2                                                                                  \n";
 cenctrl_r4 << " //  12-1, Cnt1_reg and WenCnt_reg for WR_FIND, LD_STAGE2_ST, WR_IFFTFIND, and LD_IFFTSTAGE2_ST                   \n";
 cenctrl_r4 << " parameter WC_V2    = 4'd11 ;  //WC_V2  = 3 * r - 1                                                                                   \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " output               MulValid_out ;                                                                              \n";
 cenctrl_r4 << " output               cen_out ;                                                                                   \n";
 cenctrl_r4 << " output               wen0_out ;                                                                                  \n";
 cenctrl_r4 << " output               wen1_out ;                                                                                  \n";
 cenctrl_r4 << " output [2:0]         ema_out ;                                                                                   \n";
 cenctrl_r4 << " output               SD_sel_out ;                                                                                \n";
 cenctrl_r4 << " output [A_WIDTH-1:0] ExtMA_out ;                                                                                 \n";
 cenctrl_r4 << " output               AGU_en_out ;                                                                                \n";
 cenctrl_r4 << " output               RomCen_out ;                                                                                \n";
 cenctrl_r4 << " output               mode_sel_out ;                                                                              \n";
 cenctrl_r4 << " output               rc_sel_out ;                                                                                \n";
 cenctrl_r4 << " output               m2_sel_out ;                                                                                \n";
 cenctrl_r4 << " output               wrfd_en_out ; //2018/08/01                                                                  \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " input [DC_WIDTH-1:0] data_cnt_in ;                                                                               \n";
 cenctrl_r4 << " input                BND_in ;                                                                                    \n";
 cenctrl_r4 << " input                ExtValid_in ;                                                                               \n";
 cenctrl_r4 << " input                rst_n ;                                                                                     \n";
 cenctrl_r4 << " input                clk ;                                                                                       \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " reg   [S_WIDTH-1:0]  state ;                                                                                     \n";
 cenctrl_r4 << " reg   [S_WIDTH-1:0]  next_state ;                                                                                \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " reg   [A_WIDTH-1:0]  ExtMA_out ;                                                                                 \n";
 cenctrl_r4 << " reg   [WC_WIDTH-1:0] WenCnt_reg ;                                                                                \n";
 cenctrl_r4 << " reg                  m2_sel_out ;                                                                                \n";
 cenctrl_r4 << " reg   [WC_WIDTH-1:0] Cnt1_reg ; //2018/08/01                                                                     \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " wire  [A_WIDTH-1:0]  ExtMA_wire ;                                                                                \n";
 cenctrl_r4 << " wire  [WC_WIDTH-1:0] WenCnt_wire ;                                                                               \n";
 cenctrl_r4 << " wire                 m2_sel_wire ;                                                                               \n";
 cenctrl_r4 << " wire  [WC_WIDTH-1:0] Cnt1_wire ; //2018/08/01                                                                    \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	assign ema_out = 3'd0 ;                                                                                       \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	assign cen_out = (state == INI) ;                                                                             \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r4 << " 	assign wen0_out = ((state == INI)||(state == LD_EXTDF)||                                                      \n";
 cenctrl_r4 << "                        (state == LD_STAGE1_ST)||(state == LD_STAGE2_ST)||                                        \n";
 cenctrl_r4 << "                        (state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||                                        \n";
 cenctrl_r4 << "                        (state == LD_IFFTSTAGE2_ST)||(state == SET_RC)||(state == SET_RCF))? 1'b1 :               \n";
 cenctrl_r4 << " 	                  ((state == ST_STAGE1)||(state == ST_IFFTSTAGE1)||(state == WR_FIND)||                       \n";
 cenctrl_r4 << "                        (state == WR_IFFTFIND))? BND_in : 1'b0 ;                                                  \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r4 << " 	assign wen1_out = ((state == INI)||(state == LD_EXTDF)||                                                      \n";
 cenctrl_r4 << "                        (state == LD_STAGE1_ST)||(state == LD_STAGE2_ST)||                                        \n";
 cenctrl_r4 << "                        (state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||                                        \n";
 cenctrl_r4 << "                        (state == LD_IFFTSTAGE2_ST)||(state == SET_RC)||(state == SET_RCF))? 1'b1 :               \n";
 cenctrl_r4 << " 	                  ((state == ST_STAGE1)||(state == ST_IFFTSTAGE1)||(state == WR_FIND)||                       \n";
 cenctrl_r4 << "                        (state == WR_IFFTFIND))? (~BND_in) : 1'b0 ;                                               \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	assign SD_sel_out = (state == INI)||(state == LD_EXTD) ;                                                      \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	// Ext Memory Address out                                                                                     \n";
 cenctrl_r4 << " 	assign ExtMA_wire = ((state == LD_EXTD))? (ExtMA_out + 1'b1) : ExtMA_out ;                                    \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r4 << " 	assign AGU_en_out = (state == LD_EXTDF)||(state == LD_STAGE1_ST)||(state == ST_STAGE1)||                      \n";
 cenctrl_r4 << "                         (state == LD_STAGE2_ST)||(state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||              \n";
 cenctrl_r4 << "                         (state == ST_IFFTSTAGE1)||(state == LD_IFFTSTAGE2_ST)||(state == SET_RC) ;               \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	assign RomCen_out = (state == INI)||(state == LD_EXTD)||(state == SET_RC)||(state == SET_RCF) ;               \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	// Counter for computing 11 butterfly units in stage1, 2018/08/01                                             \n";
 cenctrl_r4 << " 	assign WenCnt_wire = ((state == LD_STAGE1_ST)||                                                               \n";
 cenctrl_r4 << "                           (state == LD_STAGE2_ST)||                                                              \n";
 cenctrl_r4 << "                           (state == LD_IFFTSTAGE1_ST)||                                                          \n";
 cenctrl_r4 << "                           (state == LD_IFFTSTAGE2_ST))? (WenCnt_reg + 1'b1) : WC_ZERO ;                          \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << " 	// mode_sel = 0 FFT, mode_sel = 1 IFFT; mode_sel = 0, RC, 2018/08/01                                          \n";
 cenctrl_r4 << " 	assign mode_sel_out = (state == SET_IFFT)||                                                                   \n";
 cenctrl_r4 << "                           (state == LD_IFFTSTAGE1_ST)||                                                          \n";
 cenctrl_r4 << "                           (state == ST_IFFTSTAGE1)||                                                             \n";
 cenctrl_r4 << "                           (state == WR_IFFTFIND)||                                                               \n";
 cenctrl_r4 << "                           (state == LD_IFFTSTAGE2_ST) ;                                                          \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	assign rc_sel_out = (state == SET_RC) ;                                                                       \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	assign m2_sel_wire = (state == SET_RC) ;                                                                      \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	assign MulValid_out = (((state == SET_RC)&&(data_cnt_in>=DCNT_V3))||(state == SET_RCF)) ? 1'b1 : 1'b0 ;       \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r4 << " 	assign Cnt1_wire = ((state == WR_FIND)||(state == WR_IFFTFIND)) ? (Cnt1_reg + 1'b1) : WC_ZERO ;               \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	// for RDCsel counter, 2018/08/01                                                                             \n";
 cenctrl_r4 << " 	assign wrfd_en_out = (state == WR_FIND)||(state == WR_IFFTFIND) ? 1'b1 : 1'b0 ;                               \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	                                                                                                              \n";
 cenctrl_r4 << " 	//                                                                                                            \n";
 cenctrl_r4 << " 	always @(*) begin                                                                                             \n";
 cenctrl_r4 << " 		case(state)                                                                                               \n";
 cenctrl_r4 << " 			INI: begin                                                                                            \n";
 cenctrl_r4 << " 					if(ExtValid_in) next_state = LD_EXTD ;                                                        \n";
 cenctrl_r4 << " 					else next_state = INI ;                                                                       \n";
 cenctrl_r4 << " 				 end                                                                                              \n";
 cenctrl_r4 << " 			// LOAD  Extdata to SRAM	                                                                          \n";
 cenctrl_r4 << " 			LD_EXTD: begin                                                                                        \n";
 cenctrl_r4 << " 						if(ExtMA_out < EXTMA_V1) next_state = LD_EXTD ;                                           \n";
 cenctrl_r4 << " 						else next_state = LD_EXTDF ;                                                              \n";
 cenctrl_r4 << " 					 end                                                                                          \n";
 cenctrl_r4 << " 			// LOAD  Final Extdata to SRAM	and  Compute dataCount                                                \n";
 cenctrl_r4 << " 			LD_EXTDF: begin                                                                                       \n";
 cenctrl_r4 << " 						next_state = LD_STAGE1_ST ;                                                               \n";
 cenctrl_r4 << " 					  end                                                                                         \n";
 cenctrl_r4 << " 			// Compute FFT                                                                                        \n";
 cenctrl_r4 << " 			LD_STAGE1_ST: begin                                                                                   \n";
 cenctrl_r4 << " 							if(WenCnt_reg < WC_V1) next_state = LD_STAGE1_ST ;                                    \n";
 cenctrl_r4 << " 						    else next_state = ST_STAGE1 ;                                                         \n";
 cenctrl_r4 << " 						  end                                                                                     \n";
 cenctrl_r4 << " 			ST_STAGE1: begin                                                                                      \n";
 cenctrl_r4 << " 						if(                                                                                       \n";
 for( unsigned long i = 0;i < (No_stage-1);i++){                                                                                   
    cenctrl_r4 << " (data_cnt_in==DCNT_V" << (i+4) << ")";                                                                        
    if(i!=(No_stage-2)) cenctrl_r4 << "||";                                                                                       
 }                                                                                                                               
 cenctrl_r4 << "                           ) next_state = WR_FIND ; //modify                                                      \n";
 cenctrl_r4 << "						else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ;                                   \n";
 cenctrl_r4 << "						else next_state = SET_IFFT ;                                                              \n";
 cenctrl_r4 << "					   end                                                                                        \n";
 cenctrl_r4 << "			// Write 12 FFT data to SRAM in stage1                                                                \n";
 cenctrl_r4 << "		    WR_FIND: begin                                                                                        \n";
 cenctrl_r4 << "						if(Cnt1_reg < WC_V2) next_state = WR_FIND ; //modify                                      \n";
 cenctrl_r4 << "						else next_state = LD_STAGE2_ST ;                                                          \n";
 cenctrl_r4 << "					 end                                                                                          \n";
 cenctrl_r4 << "			// Stage2 and other Stages, just Read FFT data, Counter for computing 24 butterfly units              \n";
 cenctrl_r4 << "			LD_STAGE2_ST: begin                                                                                   \n";
 cenctrl_r4 << "							if(WenCnt_reg < WC_V2) next_state = LD_STAGE2_ST ;                                    \n";
 cenctrl_r4 << "						    else next_state = ST_STAGE1 ;                                                         \n";
 cenctrl_r4 << "					      end		                                                                              \n";
 cenctrl_r4 << "			// Compute dataCount		                                                                          \n";
 cenctrl_r4 << "			SET_IFFT: begin                                                                                       \n";
 cenctrl_r4 << "							next_state = LD_IFFTSTAGE1_ST ;                                                       \n";
 cenctrl_r4 << "					  end                                                                                         \n";
 cenctrl_r4 << "			// Compute IFFT		                                                                                  \n";
 cenctrl_r4 << "			LD_IFFTSTAGE1_ST: begin                                                                               \n";
 cenctrl_r4 << "								if(WenCnt_reg < WC_V1) next_state = LD_IFFTSTAGE1_ST ;                            \n";
 cenctrl_r4 << "								else next_state = ST_IFFTSTAGE1 ;                                                 \n";
 cenctrl_r4 << "							  end                                                                                 \n";
 cenctrl_r4 << "			ST_IFFTSTAGE1: begin                                                                                  \n";
 cenctrl_r4 << "							if(                                                                                   \n";
 for( unsigned  long i = 0;i < (No_stage-1);i++){                                                                                  
    cenctrl_r4 << " (data_cnt_in==DCNT_V" << (i+4) << ")";                                                                        
    if(i!=(No_stage-2)) cenctrl_r4 << "||";                                                                                       
 }                                                                                                                                
 cenctrl_r4 << "                               ) next_state = WR_IFFTFIND ; //modify                                              \n";
 cenctrl_r4 << "							else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;                           \n";
 cenctrl_r4 << "							else next_state = SET_RC ;                                                            \n";
 cenctrl_r4 << "						   end                                                                                    \n";
 cenctrl_r4 << "			// Write 12 IFFT data to SRAM in stage1                                                               \n";
 cenctrl_r4 << "			WR_IFFTFIND: begin                                                                                    \n";
 cenctrl_r4 << "							if(Cnt1_reg < WC_V2) next_state = WR_IFFTFIND ; //modify                              \n";
 cenctrl_r4 << "							else next_state = LD_IFFTSTAGE2_ST ;                                                  \n";
 cenctrl_r4 << "						 end                                                                                      \n";
 cenctrl_r4 << "			// Stage2 and other Stages, just Read IFFT data, Counter for computing 24 butterfly units             \n";
 cenctrl_r4 << "			LD_IFFTSTAGE2_ST: begin                                                                               \n";
 cenctrl_r4 << "								if(WenCnt_reg < WC_V2) next_state = LD_IFFTSTAGE2_ST ;                            \n";
 cenctrl_r4 << "								else next_state = ST_IFFTSTAGE1 ;                                                 \n";
 cenctrl_r4 << "							  end                                                                                 \n";
 cenctrl_r4 << "			// Resolve Carry                                                                                      \n";
 cenctrl_r4 << "			SET_RC: begin                                                                                         \n";
 cenctrl_r4 << "						if(data_cnt_in < DCNT_V2) next_state = SET_RC ;                                           \n";
 cenctrl_r4 << "						else next_state = SET_RCF ;                                                               \n";
 cenctrl_r4 << "					end                                                                                           \n";
 cenctrl_r4 << "			//Final RC data                                                                                       \n";
 cenctrl_r4 << "			SET_RCF: begin                                                                                        \n";
 cenctrl_r4 << "						next_state = INI ;                                                                        \n";
 cenctrl_r4 << "					 end                                                                                          \n";
 cenctrl_r4 << "					                                                                                              \n";
 cenctrl_r4 << "		//                                                                                                        \n";
 cenctrl_r4 << "		default: next_state = INI ;  		                                                                      \n";
 cenctrl_r4 << "		endcase                                                                                                   \n";
 cenctrl_r4 << "	end                                                                                                           \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << "	//                                                                                                            \n";
 cenctrl_r4 << "	always @(posedge clk or negedge rst_n) begin                                                                  \n";
 cenctrl_r4 << "		if(~rst_n) begin                                                                                          \n";
 cenctrl_r4 << "			state <= INI ;                                                                                        \n";
 cenctrl_r4 << "			ExtMA_out <= A_ZERO ;                                                                                 \n";
 cenctrl_r4 << "			WenCnt_reg <= WC_ZERO ;                                                                               \n";
 cenctrl_r4 << "			m2_sel_out <= 1'b0 ;                                                                                  \n";
 cenctrl_r4 << "			Cnt1_reg <= WC_ZERO ; // 2018/08/01                                                                   \n";
 cenctrl_r4 << "		end                                                                                                       \n";
 cenctrl_r4 << "		else begin                                                                                                \n";
 cenctrl_r4 << "			state <= next_state ;                                                                                 \n";
 cenctrl_r4 << "    	    ExtMA_out <= ExtMA_wire ;                                                                             \n";
 cenctrl_r4 << "			WenCnt_reg <= WenCnt_wire ;                                                                           \n";
 cenctrl_r4 << "			m2_sel_out <= m2_sel_wire ;                                                                           \n";
 cenctrl_r4 << "			Cnt1_reg <= Cnt1_wire ; // 2018/08/01                                                                 \n";
 cenctrl_r4 << "		end                                                                                                       \n";
 cenctrl_r4 << "	end                                                                                                           \n";
 cenctrl_r4 << "                                                                                                                  \n";
 cenctrl_r4 << "								                                                                                  \n";
 cenctrl_r4 << "endmodule                                                                                                         \n";     
     cenctrl_r4.close();     
}

void CenCtrl::Ctrl_PipeReg1_r4(std::string string_in){
     std::ofstream ctrl_pipereg1_r4;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     ctrl_pipereg1_r4.open(ss.str());
 ctrl_pipereg1_r4 << " //==================================================                                     \n";
 ctrl_pipereg1_r4 << " //                                                                 \n";
 ctrl_pipereg1_r4 << " //Date       : 2018/8/1                                                                  \n";
 ctrl_pipereg1_r4 << " //Note       : Pipeline Register1 for Control signal                                     \n";
 ctrl_pipereg1_r4 << " //==================================================                                     \n";
 ctrl_pipereg1_r4 << " `timescale 1 ns/1 ps                                                                     \n";
 ctrl_pipereg1_r4 << " module Ctrl_PipeReg1(mode_sel_Dout,                                                      \n";
 ctrl_pipereg1_r4 << " 				        Mul_sel_Dout,                                                       \n";
 ctrl_pipereg1_r4 << " 				        RDC_sel_Dout,                                                       \n";
 ctrl_pipereg1_r4 << " 				        FFT_FSmode_sel_Dout,                                                \n";
 ctrl_pipereg1_r4 << "                      mode_sel_in,                                                        \n";
 ctrl_pipereg1_r4 << " 			            Mul_sel_in,                                                         \n";
 ctrl_pipereg1_r4 << " 			            RDC_sel_in,                                                         \n";
 ctrl_pipereg1_r4 << " 			            FFT_FSmode_sel_in,                                                  \n";
 ctrl_pipereg1_r4 << "                      rst_n,                                                              \n";
 ctrl_pipereg1_r4 << "                      clk                                                                 \n";
 ctrl_pipereg1_r4 << "                      ) ;                                                                 \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " parameter RDC_WIDTH   = 2 ;                                                              \n";
 ctrl_pipereg1_r4 << " parameter RDC_ZERO    = 2'h0 ;                                                           \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " output                  mode_sel_Dout ;                                                  \n";
 ctrl_pipereg1_r4 << " output [1:0]            Mul_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r4 << " output [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r4 << " output [RDC_WIDTH-1:0]  FFT_FSmode_sel_Dout ;                                            \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " input                   mode_sel_in ;                                                    \n";
 ctrl_pipereg1_r4 << " input  [1:0]            Mul_sel_in ;                                                     \n";
 ctrl_pipereg1_r4 << " input  [RDC_WIDTH-1:0]  RDC_sel_in ;                                                     \n";
 ctrl_pipereg1_r4 << " input  [RDC_WIDTH-1:0]  FFT_FSmode_sel_in ;                                              \n";
 ctrl_pipereg1_r4 << " input                   rst_n ;                                                          \n";
 ctrl_pipereg1_r4 << " input                   clk ;                                                            \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_D0reg ;                                                    \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_D1reg ;                                                    \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_D2reg ;                                                    \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_Dout ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D3reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D4reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D5reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D0reg ;                                              \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D1reg ;                                              \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D2reg ;                                              \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D3reg ;                                              \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D4reg ;                                              \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D5reg ;                                              \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_Dout ;                                               \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " 	//mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles       \n";
 ctrl_pipereg1_r4 << " 	always @(posedge clk or negedge rst_n) begin                                         \n";
 ctrl_pipereg1_r4 << " 		if(~rst_n) begin                                                                 \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D0reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D1reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D2reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r4 << " 			mode_sel_Dout <= 1'b0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D0reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D1reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D2reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_Dout <= 2'd0 ;                                                       \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D0reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D1reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D2reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D3reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D4reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D5reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_Dout <= RDC_ZERO ;                                                   \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D0reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D1reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D2reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D3reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D4reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D5reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_Dout <= RDC_ZERO ;                                            \n";
 ctrl_pipereg1_r4 << " 		end                                                                              \n";
 ctrl_pipereg1_r4 << " 		else begin                                                                       \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D0reg <= mode_sel_in ;                                              \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D1reg <= mode_sel_D0reg ;                                           \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D2reg <= mode_sel_D1reg ;                                           \n";
 ctrl_pipereg1_r4 << " 			mode_sel_Dout <= mode_sel_D2reg ;                                            \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D0reg <= Mul_sel_in ;                                                \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_Dout <= Mul_sel_D2reg ;                                              \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D0reg <= RDC_sel_in ;                                                \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_Dout <= RDC_sel_D5reg ;                                              \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D0reg <= FFT_FSmode_sel_in ;                                  \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D1reg <= FFT_FSmode_sel_D0reg ;                               \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D2reg <= FFT_FSmode_sel_D1reg ;                               \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D3reg <= FFT_FSmode_sel_D2reg ;                               \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D4reg <= FFT_FSmode_sel_D3reg ;                               \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_D5reg <= FFT_FSmode_sel_D4reg ;                               \n";
 ctrl_pipereg1_r4 << " 			FFT_FSmode_sel_Dout <= FFT_FSmode_sel_D5reg ;                                \n";
 ctrl_pipereg1_r4 << " 		end                                                                              \n";
 ctrl_pipereg1_r4 << " 	end                                                                                  \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " endmodule                                                                                \n";     
     ctrl_pipereg1_r4.close();         
}

void CenCtrl::order_ROMReg_r4(std::string string_in){
     std::ofstream orderROM_pipe;
     std::string        string_buf = "/R4_orderROM_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     orderROM_pipe.open(ss.str());  	
orderROM_pipe << "//==================================================                               \n";
orderROM_pipe << "//Writer     : shiyong wu                                                          \n";
orderROM_pipe << "//Date       : 2020/6/18                                                           \n";
orderROM_pipe << "//Note       : ROM register file                                                   \n";
orderROM_pipe << "//==================================================                               \n";
orderROM_pipe << "`timescale 1 ns/1 ps                                                               \n";
orderROM_pipe << "module R4_orderROM_Pipe(                                                           \n";
orderROM_pipe << "                      reorderROM0_o,                                               \n";
orderROM_pipe << "                      reorderROM1_o,                                               \n";
orderROM_pipe << "                      ireorderROM0_o,                                              \n";
orderROM_pipe << "                      ireorderROM1_o,                                              \n";
orderROM_pipe << "						reorderROM0_i,                                               \n";
orderROM_pipe << "						reorderROM1_i,                                               \n";
orderROM_pipe << "						ireorderROM0_i,                                              \n";
orderROM_pipe << "						ireorderROM1_i,                                              \n";
orderROM_pipe << "						rst_n,                                                       \n";
orderROM_pipe << "						clk                                                          \n";
orderROM_pipe << "						) ;                                                          \n";
orderROM_pipe << "    parameter P_WIDTH   = 64;                                                      \n";
orderROM_pipe << "	  parameter P_ZERO    = 64'd0;                                                   \n";
if(4*CP_width <=96){
	orderROM_pipe << "    parameter HP_WIDTH  = 32;                                                      \n";
	orderROM_pipe << "    parameter HP_ZERO   = 32'd0;                                                   \n";
}
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "    output [P_WIDTH-1:0] reorderROM0_o;                                            \n";
orderROM_pipe << "    output [P_WIDTH-1:0] reorderROM1_o;                                            \n";
orderROM_pipe << "    output [P_WIDTH-1:0] ireorderROM0_o;                                           \n";
orderROM_pipe << "    //if cyclotomic prime is 22~24 ,then ireorderROM1 bit size is 32               \n";

if(4 * CP_width > 96)orderROM_pipe << "    output [P_WIDTH-1:0] ireorderROM1_o; \n";
else orderROM_pipe << "    output [HP_WIDTH-1:0] ireorderROM1_o;  \n";

orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  reorderROM0_i;                                              \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  reorderROM1_i;                                              \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  ireorderROM0_i;                                             \n";

if(4 * CP_width > 96)orderROM_pipe << "	input [P_WIDTH-1:0] ireorderROM1_i;\n";
else orderROM_pipe << "	input [HP_WIDTH-1:0] ireorderROM1_i;\n";

orderROM_pipe << "	input rst_n;                                                                     \n";
orderROM_pipe << "	input clk;                                                                       \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "	  reg [P_WIDTH-1:0] reorderROM0_o;                                               \n";
orderROM_pipe << "    reg [P_WIDTH-1:0] reorderROM1_o;                                               \n";
orderROM_pipe << "    reg [P_WIDTH-1:0] ireorderROM0_o;                                              \n";
orderROM_pipe << "    //if cyclotomic prime is 22~24 ,then ireorderROM1 bit size is 32               \n";

if(4 * CP_width > 96)orderROM_pipe << "    reg [P_WIDTH-1:0] ireorderROM1_o;                                             \n";
else orderROM_pipe << "    reg [HP_WIDTH-1:0] ireorderROM1_o;                                             \n";

orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "    always@(posedge clk,negedge rst_n)begin                                        \n";
orderROM_pipe << "		if(~rst_n)begin                                                              \n";
orderROM_pipe << "			reorderROM0_o  <= P_ZERO;                                                \n";
orderROM_pipe << "			reorderROM1_o  <= P_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM0_o <= P_ZERO;                                                \n";

if(4 * CP_width > 96)orderROM_pipe << "			ireorderROM1_o <= P_ZERO;\n";
else orderROM_pipe << "			ireorderROM1_o <= HP_ZERO;\n";

orderROM_pipe << "		end                                                                          \n";
orderROM_pipe << "		else begin                                                                   \n";
orderROM_pipe << "			reorderROM0_o  <= reorderROM0_i;                                         \n";
orderROM_pipe << "		    reorderROM1_o  <= reorderROM1_i;                                         \n";
orderROM_pipe << "		    ireorderROM0_o <= ireorderROM0_i;                                        \n";
orderROM_pipe << "		    ireorderROM1_o <= ireorderROM1_i;                                        \n";
orderROM_pipe << "		end                                                                          \n";
orderROM_pipe << "	end                                                                              \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "endmodule                                                                          \n";
	 orderROM_pipe.close();
}

void CenCtrl::R4_ROMPipeReg1(std::string string_in){
     std::ofstream r4_rompipereg1;
     std::string        string_buf = "/R4_ROMPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_rompipereg1.open(ss.str());
 r4_rompipereg1 << " //==================================================                          \n";
 r4_rompipereg1 << " //                                                      \n";
 r4_rompipereg1 << " //Date       : 2018/8/1                                                       \n";
 r4_rompipereg1 << " //Note       : Pipeline Register1 for ROM output delay 4-cycle                \n";
 r4_rompipereg1 << " //==================================================                          \n";
 r4_rompipereg1 << " `timescale 1 ns/1 ps                                                          \n";
 r4_rompipereg1 << " module R4_ROMPipeReg1(ROMD0_Dout,                                             \n";
 r4_rompipereg1 << " 				      ROMD1_Dout,				                               \n";
 r4_rompipereg1 << " 					  IFFTROMD0_Dout,                                          \n";
 r4_rompipereg1 << " 				      IFFTROMD1_Dout,				                           \n";
 r4_rompipereg1 << " 			          ROMD0_in,                                                \n";
 r4_rompipereg1 << " 					  ROMD1_in,					                               \n";
 r4_rompipereg1 << " 					  IFFTROMD0_in,                                            \n";
 r4_rompipereg1 << " 					  IFFTROMD1_in,					                           \n";
 r4_rompipereg1 << "                       rst_n,                                                  \n";
 r4_rompipereg1 << "                       clk                                                     \n";
 r4_rompipereg1 << "                       ) ;                                                     \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " parameter P_WIDTH   = 64 ;					                                   \n";
 r4_rompipereg1 << " parameter SD_WIDTH  = 128 ;                                                   \n";
 r4_rompipereg1 << " parameter P_ZERO    = 64'h0 ;                                                 \n";
 r4_rompipereg1 << " parameter SD_ZERO   = 128'h0 ;                                                \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " output [P_WIDTH-1:0]    ROMD0_Dout ;                                          \n";
 r4_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD1_Dout ;                                          \n";
 r4_rompipereg1 << " output [P_WIDTH-1:0]    IFFTROMD0_Dout ;                                      \n";
 r4_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                                      \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " input  [P_WIDTH-1:0]    ROMD0_in ;                                            \n";
 r4_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD1_in ;                                            \n";
 r4_rompipereg1 << " input  [P_WIDTH-1:0]    IFFTROMD0_in ;                                        \n";
 r4_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD1_in ;                                        \n";
 r4_rompipereg1 << " input                   rst_n ;                                               \n";
 r4_rompipereg1 << " input                   clk ;                                                 \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_Dout ;                                             \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_Dout ;                                             \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_Dout ;                                         \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                                         \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D0reg ;                                            \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D1reg ;                                            \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D2reg ;                                            \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D0reg ;                                            \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D1reg ;                                            \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D2reg ;                                            \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D0reg ;                                        \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D1reg ;                                        \n";
 r4_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D2reg ;                                        \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D0reg ;                                        \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D1reg ;                                        \n";
 r4_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D2reg ;                                        \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " 	//delay 4 cycles                                                           \n";
 r4_rompipereg1 << " 	always @(posedge clk or negedge rst_n) begin                               \n";
 r4_rompipereg1 << " 		if(~rst_n) begin                                                       \n";
 r4_rompipereg1 << " 			ROMD0_D0reg <= P_ZERO ;                                            \n";
 r4_rompipereg1 << " 			ROMD0_D1reg <= P_ZERO ;                                            \n";
 r4_rompipereg1 << " 			ROMD0_D2reg <= P_ZERO ;                                            \n";
 r4_rompipereg1 << " 			ROMD0_Dout  <= P_ZERO ;                                            \n";
 r4_rompipereg1 << " 			//                                                                 \n";
 r4_rompipereg1 << " 			ROMD1_D0reg <= SD_ZERO ;                                           \n";
 r4_rompipereg1 << " 			ROMD1_D1reg <= SD_ZERO ;                                           \n";
 r4_rompipereg1 << " 			ROMD1_D2reg <= SD_ZERO ;                                           \n";
 r4_rompipereg1 << " 			ROMD1_Dout  <= SD_ZERO ;                                           \n";
 r4_rompipereg1 << " 			//---                                                              \n";
 r4_rompipereg1 << " 			IFFTROMD0_D0reg <= P_ZERO ;                                        \n";
 r4_rompipereg1 << " 			IFFTROMD0_D1reg <= P_ZERO ;                                        \n";
 r4_rompipereg1 << " 			IFFTROMD0_D2reg <= P_ZERO ;                                        \n";
 r4_rompipereg1 << " 			IFFTROMD0_Dout  <= P_ZERO ;                                        \n";
 r4_rompipereg1 << " 			//                                                                 \n";
 r4_rompipereg1 << " 			IFFTROMD1_D0reg <= SD_ZERO ;                                       \n";
 r4_rompipereg1 << " 			IFFTROMD1_D1reg <= SD_ZERO ;                                       \n";
 r4_rompipereg1 << " 			IFFTROMD1_D2reg <= SD_ZERO ;                                       \n";
 r4_rompipereg1 << " 			IFFTROMD1_Dout  <= SD_ZERO ;                                       \n";
 r4_rompipereg1 << " 		end                                                                    \n";
 r4_rompipereg1 << " 		else begin                                                             \n";
 r4_rompipereg1 << " 			ROMD0_D0reg <= ROMD0_in ;                                          \n";
 r4_rompipereg1 << " 			ROMD0_D1reg <= ROMD0_D0reg ;                                       \n";
 r4_rompipereg1 << " 			ROMD0_D2reg <= ROMD0_D1reg ;                                       \n";
 r4_rompipereg1 << " 			ROMD0_Dout  <= ROMD0_D2reg ;                                       \n";
 r4_rompipereg1 << " 			//                                                                 \n";
 r4_rompipereg1 << " 			ROMD1_D0reg <= ROMD1_in ;                                          \n";
 r4_rompipereg1 << " 			ROMD1_D1reg <= ROMD1_D0reg ;                                       \n";
 r4_rompipereg1 << " 			ROMD1_D2reg <= ROMD1_D1reg ;                                       \n";
 r4_rompipereg1 << " 			ROMD1_Dout  <= ROMD1_D2reg ;                                       \n";
 r4_rompipereg1 << " 			//---                                                              \n";
 r4_rompipereg1 << " 			IFFTROMD0_D0reg <= IFFTROMD0_in ;                                  \n";
 r4_rompipereg1 << " 			IFFTROMD0_D1reg <= IFFTROMD0_D0reg ;                               \n";
 r4_rompipereg1 << " 			IFFTROMD0_D2reg <= IFFTROMD0_D1reg ;                               \n";
 r4_rompipereg1 << " 			IFFTROMD0_Dout  <= IFFTROMD0_D2reg ;                               \n";
 r4_rompipereg1 << " 			//                                                                 \n";
 r4_rompipereg1 << " 			IFFTROMD1_D0reg <= IFFTROMD1_in ;                                  \n";
 r4_rompipereg1 << " 			IFFTROMD1_D1reg <= IFFTROMD1_D0reg ;                               \n";
 r4_rompipereg1 << " 			IFFTROMD1_D2reg <= IFFTROMD1_D1reg ;                               \n";
 r4_rompipereg1 << " 			IFFTROMD1_Dout  <= IFFTROMD1_D2reg ;                               \n";
 r4_rompipereg1 << " 		end                                                                    \n";
 r4_rompipereg1 << " 	end                                                                        \n";
 r4_rompipereg1 << "                                                                               \n";
 r4_rompipereg1 << " endmodule                                                                     \n";     
     r4_rompipereg1.close();         
}

void CenCtrl::R4_AGU(std::string string_in){
     std::ofstream r4_agu;    
     std::string        string_buf = "/R4_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_agu.open(ss.str());
  r4_agu << "//==================================================                                                                       \n";         
  r4_agu << "//                                                                                                   \n";
  r4_agu << "//Date       : 2018/8/1                                                                                                    \n";
  r4_agu << "//Note       : Radix-4 address generator unit                                                                              \n";
  r4_agu << "//==================================================                                                                       \n";
  r4_agu << "`timescale 1 ns/1 ps                                                                                                       \n";
  r4_agu << "module R4_AGU(BN_out,                                                                                                      \n";
  r4_agu << "			  MA,                                                                                                           \n";
  r4_agu << "			  ROMA,                                                                                                         \n";
  r4_agu << "			  Mul_sel_out,                                                                                                  \n";
  r4_agu << "			  RDC_sel_out,                                                                                                  \n";
  r4_agu << "			  data_cnt_reg,                                                                                                 \n";
  r4_agu << "			  FFT_FSmode_sel,                                                                                               \n";
  r4_agu << "			  mode_sel_in,                                                                                                  \n";
  r4_agu << "			  rc_sel_in,                                                                                                    \n";
  r4_agu << "			  AGU_en,                                                                                                       \n";
  r4_agu << "			  wrfd_en_in, //2018/08/01                                                                                      \n";
  r4_agu << "              rst_n,                                                                                                       \n";
  r4_agu << "              clk                                                                                                          \n";
  r4_agu << "              ) ;                                                                                                          \n";
  r4_agu << "parameter A_WIDTH     = "<< addr_width       << ";                                                                         \n";
  r4_agu << "parameter DC_WIDTH    = "<< data_cnt_width   << ";                                                                         \n";
  r4_agu << "parameter BC_WIDTH    = "<< BU_counter_width << ";                                                                         \n";
  r4_agu << "parameter SC_WIDTH    = "<< stage_width      << "; //number of stages+1                                                    \n";
  r4_agu << "parameter ROMA_WIDTH  = "<< ROM_width        << ";                                                                         \n";
  r4_agu << "parameter RDC_WIDTH   = 2 ; //2018/08/01                                                                                   \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "parameter DC_ZERO   = " << data_cnt_width << "'h0 ;                                                                        \n";
  r4_agu << "parameter ROMA_ZERO = " << ROM_width      << "'h0 ;                                                                        \n";
  r4_agu << "parameter RDC_ZERO  = 2'h0 ;                                                                                               \n";
  r4_agu << "                                                                                                                           \n";
  for(int i=0;i < No_stage;i++){                                                                                                        
  r4_agu << "parameter S" << i << "      = " << stage_width << "'d" << i << ";                                                          \n";
  }                                                                                                                                     
  r4_agu << "                                                                                                                           \n";
  r4_agu << "//data counter value1 for data_cnt_wire                                                                                    \n";
  r4_agu << "parameter DCNT_V1   = " << data_cnt_width << "'d" << FFT_dc[No_stage-1] <<";                                                  \n";
  r4_agu << "//data counter value2 for data_cnt_wire                                                                                    \n";
  r4_agu << "parameter DCNT_V2   = " << data_cnt_width << "'d" << (NO_U_BUPS )    <<";\n"; //delay 3 clock,waitting for output data
  r4_agu << "                                                                                                                           \n";
  for(int j=0;j<(radix-2);j++){                                                                                                         
     r4_agu << "parameter DCNT_FS" << (j+1) <<" = "<<data_cnt_width << "'d" << DCNT_FS[j] << ";                                         \n";
  }                                                                                                                                     
  r4_agu << " // data counter bit position1 for MSB of j_value                                                                          \n";
  r4_agu << "parameter DCNT_BP1 = " << DCNT_BP1 << " ;                                                                                  \n";
  r4_agu << "// data counter bit position2 for LSB of i_value                                                                           \n";
  r4_agu << "parameter DCNT_BP2 = " << DCNT_BP2 << " ;                                                                                  \n";
  r4_agu << "// data counter bit position3 for MSB of i_value                                                                           \n";
  r4_agu << "parameter DCNT_BP3 = " << DCNT_BP3 << " ;                                                                                  \n";
  r4_agu << "// data counter bit position4 for LSB of SC_value                                                                          \n";
  r4_agu << "parameter DCNT_BP4 = " << DCNT_BP4 << " ;                                                                                  \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "output                  BN_out ;                                                                                           \n";
  r4_agu << "output [A_WIDTH-1:0]    MA ;                                                                                               \n";
  r4_agu << "output [ROMA_WIDTH-1:0] ROMA ;                                                                                             \n";
  r4_agu << "output [1:0]            Mul_sel_out ;                                                                                      \n";
  r4_agu << "output [RDC_WIDTH-1:0]  RDC_sel_out ;                                                                                      \n";
  r4_agu << "output [DC_WIDTH-1:0]   data_cnt_reg ;                                                                                     \n";
  r4_agu << "output [RDC_WIDTH-1:0]  FFT_FSmode_sel ;                                                                                   \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "input                   mode_sel_in ;                                                                                      \n";
  r4_agu << "input                   rc_sel_in ;                                                                                        \n";
  r4_agu << "input                   AGU_en ;                                                                                           \n";
  r4_agu << "input                   wrfd_en_in ;                                                                                       \n";
  r4_agu << "input                   rst_n ;                                                                                            \n";
  r4_agu << "input                   clk ;                                                                                              \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "reg   [DC_WIDTH-1:0]  data_cnt_reg ; // data counter                                                                       \n";
  r4_agu << "reg   [RDC_WIDTH-1:0] RDCsel_cnt_reg ; // RDC select counter, 2018/08/01                                                   \n";
  r4_agu << "reg                   BN_out ;                                                                                             \n";
  r4_agu << "reg   [RDC_WIDTH-1:0] RDC_sel_out ;                                                                                        \n";
  r4_agu << "reg   [1:0]           Mul_sel_out ;                                                                                        \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "wire  [DC_WIDTH-1:0]  data_cnt_wire ;                                                                                      \n";
  r4_agu << "wire  [RDC_WIDTH-1:0] RDCsel_cnt_wire ; // 2018/08/01                                                                      \n";
  r4_agu << "wire  [BC_WIDTH-1:0]  BC_wire ; // butterfly counter                                                                       \n";
  //number of wire xor_wire change with fft_point                                                                                       \n";
  unsigned long NO_xorwire;                                                                                                             
  NO_xorwire = DCNT_BP3 - DCNT_BP2;                                                                                                     
  for(int i=0;i < NO_xorwire;i++){                                                                                                      
     r4_agu << "wire                 xor_d"<< i << "_wire;                                                                              \n";
  }                                                                                                                                     
  r4_agu << "                                                                                                                           \n";
  r4_agu << "wire  [SC_WIDTH-1:0]  SC_wire ; // stage counter                                                                           \n";
  r4_agu << "wire  [BC_WIDTH-1:0]  BC_RR_wire ;                                                                                         \n";
  r4_agu << "wire                  BN_wire ;                                                                                            \n";
  r4_agu << "wire [RDC_WIDTH-1:0]  RDC_sel_wire ;                                                                                       \n";
  r4_agu << "wire [1:0]            Mul_sel_wire ;                                                                                       \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "wire  [BC_WIDTH-1:0]  BR_BC_wire ;                                                                                         \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "	//                                                                                                                      \n";
  r4_agu << "	assign data_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                                     \n";
  r4_agu << "                            ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                                 \n";
  r4_agu << "                             DC_ZERO : ((AGU_en==1'b1)&&(data_cnt_reg<DCNT_V1))?                                           \n";
  r4_agu << "                            (data_cnt_reg + 1'b1) : data_cnt_reg ;                                                         \n";
  r4_agu << "	                                                                                                                        \n";
  r4_agu << "	//                                                                                                                      \n";
  r4_agu << "	assign RDCsel_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                                   \n";
  r4_agu << "                             ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                                \n";
  r4_agu << "                             RDC_ZERO :(((AGU_en==1'b1)&&(data_cnt_reg<DCNT_V1))||                                         \n";
  r4_agu << "                             (wrfd_en_in==1'b1))? (RDCsel_cnt_reg + 1'b1) : RDCsel_cnt_reg ;                               \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "// for Gray code                                                                                                           \n";
  for(int k=0; k < NO_xorwire; k++){                                                                                                   
  r4_agu << "   assign xor_d" << k <<"_wire = data_cnt_reg["<<(DCNT_BP3 - k)<<"]^data_cnt_reg["<<(DCNT_BP3 - k - 1)<<"];                \n";
  }                                                                                                                                     
  r4_agu << "//	                                                                                                                        \n";
  r4_agu << "   assign BC_wire = (rc_sel_in==1'b1)?                                                                                     \n";
  r4_agu << "                     ({data_cnt_reg[DCNT_BP1:0], data_cnt_reg[DCNT_BP3:DCNT_BP2]}): //(j*G+i)                              \n";
  r4_agu << "	                 ({data_cnt_reg[DCNT_BP1:0],                                                                            \n";
  r4_agu << "                     data_cnt_reg[DCNT_BP3],                                                                               \n";
  for(int l=0;l<NO_xorwire;l++){                                                                                                        
      if(l!=(NO_xorwire-1))r4_agu << "                      xor_d"<< l <<"_wire,\n";                                                    
      else                 r4_agu << "                      xor_d"<< l <<"_wire\n";	                                                   
  }                                                                                                                                     
  r4_agu << "                       }) ;\n";                                                                                            
  r4_agu << "\n";                                                                                                                       
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   assign SC_wire = data_cnt_reg[DC_WIDTH-1:DCNT_BP4] ;                                                                    \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // Barrel shifter, rc_sel_in=1, right rotate 10-bit,rc_sel_in is to do resolving carries                                                                    \n";
  r4_agu << "   assign BC_RR_wire = ";
  unsigned long RR_tmp;
  unsigned long s;
  unsigned long fs_rr_bits; //final state is in order to read data from sram
  //final state bc right shift // final state is after INTT computing state
  s = DCNT_BP1 + 1; //radix bit size
  fs_rr_bits = s * (No_stage -3);
  for(unsigned long i=0; i < (No_stage-1);i++){
     RR_tmp = s * i ; 
     if(i==0) {
         if(No_stage < 4) r4_agu << "((((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))&&(rc_sel_in == 1'b0))||(rc_sel_in == 1'b1))? BC_wire:\n";
         else r4_agu << "((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))&&(rc_sel_in == 1'b0)? BC_wire:\n";	  
     }
     else {
             if((No_stage >= 4 )&& (i == (No_stage-3)))r4_agu << "                       (((SC_wire == S" << i << ") && (rc_sel_in == 1'b0))||(rc_sel_in==1'b1))? \n";
             else   r4_agu << "                       ((SC_wire == S" << i << ") && (rc_sel_in == 1'b0))? \n";
             r4_agu << "                       {BC_wire[" << RR_tmp-1 << ":0],BC_wire[BC_WIDTH-1:" << RR_tmp << "]} :\n";
     }
  }
  r4_agu << "                       BC_wire;\n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // Bit reverse barrel shifter for IFFT                                                                                  \n";
  //need to modify
  r4_agu << "   assign BR_BC_wire = {";
  for(unsigned long i=0; i < BU_counter_width; i=i+2){
  if(i!=(BU_counter_width-2))r4_agu << "                       BC_RR_wire["<< (i+1) <<":"<< i << "],\n"; 
  else  r4_agu << "                       BC_RR_wire["<< (i+1) <<":"<< i << "]} ;\n";  
  } 
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // Bank, rc_sel_in=1 BN_wire=(^BC_RR_wire)                                                                              \n";
  r4_agu << "   assign BN_wire = (mode_sel_in==1'b1)? (^BR_BC_wire) : (^BC_RR_wire) ;                                                   \n";
  r4_agu << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                                   \n";
  r4_agu << "   assign MA = (mode_sel_in==1'b1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ;                              \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // ROM Address                                                                                                          \n";
  r4_agu << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                             \n";
  unsigned long ls_bits = 0; //left shift bits
  
  for(unsigned long i=1; i < (No_stage-1);i++){
    ls_bits = s * i;
    unsigned long ls_msb;
    ls_msb = ROM_width -1 - ls_bits;
    r4_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[" << ls_msb <<":0]," << ls_bits <<"'d0}) : \n" ;    
  }
  r4_agu << "               ROMA_ZERO;\n";
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   assign Mul_sel_wire = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd3 :                                      \n";
  r4_agu << "                       ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd2 : // test for point-wise multiplication  \n";
  r4_agu << "                       (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                                                       \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   assign RDC_sel_wire = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg : data_cnt_reg[1:0] ; // 2018/08/01                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   //FFT final stage mode select                                                                                           \n";
  r4_agu << "   assign FFT_FSmode_sel = ((data_cnt_reg==DCNT_FS1)&&(mode_sel_in==1'b0)) ? 2'd1 :                                        \n";
  r4_agu << "                           ((data_cnt_reg>=DCNT_FS2)&&(data_cnt_reg<=DCNT_V1)&&                                            \n";
  r4_agu << "                           (mode_sel_in==1'b0)) ? 2'd2 : 2'd0 ;                                                            \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   always @(posedge clk or negedge rst_n) begin                                                                            \n";
  r4_agu << "       if(~rst_n) begin                                                                                                    \n";
  r4_agu << "           data_cnt_reg <= DC_ZERO ;                                                                                       \n";
  r4_agu << "           BN_out <= 1'b0 ;                                                                                                \n";
  r4_agu << "           RDC_sel_out <= RDC_ZERO ;                                                                                       \n";
  r4_agu << "           Mul_sel_out <= 2'd0 ;                                                                                           \n";
  r4_agu << "           RDCsel_cnt_reg <= RDC_ZERO ; // 2018/08/01                                                                      \n";
  r4_agu << "       end                                                                                                                 \n";
  r4_agu << "       else begin                                                                                                          \n";
  r4_agu << "           data_cnt_reg <= data_cnt_wire ;                                                                                 \n";
  r4_agu << "           BN_out <= BN_wire ;                                                                                             \n";
  r4_agu << "           RDC_sel_out <= RDC_sel_wire ;                                                                                   \n";
  r4_agu << "           Mul_sel_out <= Mul_sel_wire ;                                                                                   \n";
  r4_agu << "           RDCsel_cnt_reg <= RDCsel_cnt_wire ; // 2018/08/01                                                               \n";
  r4_agu << "       end                                                                                                                 \n";
  r4_agu << "   end                                                                                                                     \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "endmodule                                                                                                                  \n";     
     r4_agu.close();     
}

void CenCtrl::R4_WAddr(std::string string_in){
     std::ofstream r4_waddr;  
     std::string        string_buf = "/R4_WAddr.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_waddr.open(ss.str());
 r4_waddr << " //==================================================               \n";
 r4_waddr << " //                                           \n";
 r4_waddr << " //Date       : 2018/8/1                                            \n";
 r4_waddr << " //Note       : Radix-4 Write Address                               \n";
 r4_waddr << " //==================================================               \n";
 r4_waddr << " `timescale 1 ns/1 ps                                               \n";
 r4_waddr << " module R4_WAddr(BND_out,                                           \n";
 r4_waddr << " 			       WMA_out,                                           \n";
 r4_waddr << "                 BN_in,                                             \n";
 r4_waddr << " 		           MA_in,                                             \n";
 r4_waddr << "                 rst_n,                                             \n";
 r4_waddr << "                 clk                                                \n";
 r4_waddr << "                 ) ;                                                \n";
 r4_waddr << " parameter A_WIDTH   = "<< addr_width <<";                          \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << " parameter A_ZERO    = "<< addr_width <<"'h0 ;                      \n";
 r4_waddr << " parameter BN_ZERO   = 1'h0 ;                                       \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << " output              BND_out ;                                      \n";
 r4_waddr << " output[A_WIDTH-1:0] WMA_out ;                                      \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << " input               BN_in ;                                        \n";
 r4_waddr << " input [A_WIDTH-1:0] MA_in ;                                        \n";
 r4_waddr << " input               rst_n ;                                        \n";
 r4_waddr << " input               clk ;                                          \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << " reg                 BN_D0_reg ;                                    \n";
 r4_waddr << " reg                 BN_D1_reg ;                                    \n";
 r4_waddr << " reg                 BN_D2_reg ;                                    \n";
 r4_waddr << " reg                 BN_D3_reg ;                                    \n";
 r4_waddr << " reg                 BN_D4_reg ;                                    \n";
 r4_waddr << " reg                 BN_D5_reg ;                                    \n";
 r4_waddr << " reg                 BN_D6_reg ;                                    \n";
 r4_waddr << " reg                 BN_D7_reg ;                                    \n";
 r4_waddr << " reg                 BN_D8_reg ;                                    \n";
 r4_waddr << " reg                 BN_D9_reg ;                                    \n";
 r4_waddr << " reg                 BND_out ;                                      \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D0_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D1_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D2_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D3_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D4_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D5_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D6_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D7_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D8_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D9_reg ;                                    \n";
 r4_waddr << " reg   [A_WIDTH-1:0] MA_D10_reg ;                                   \n";
 r4_waddr << " reg   [A_WIDTH-1:0] WMA_out ;                                      \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << " 	//BN delay 11 cycles and MA delay 12 cycles                       \n";
 r4_waddr << " 	always @(posedge clk or negedge rst_n) begin                      \n";
 r4_waddr << " 		if(~rst_n) begin                                              \n";
 r4_waddr << " 			BN_D0_reg  <= BN_ZERO ;                                   \n";
 r4_waddr << " 			BN_D1_reg  <= BN_ZERO ;                                   \n";
 r4_waddr << " 			BN_D2_reg  <= BN_ZERO ;                                   \n";
 r4_waddr << " 			BN_D3_reg  <= BN_ZERO ;                                   \n";
 r4_waddr << " 			BN_D4_reg  <= BN_ZERO ;                                   \n";
 r4_waddr << " 			BN_D5_reg  <= BN_ZERO ;                                   \n";
 r4_waddr << " 			BN_D6_reg  <= BN_ZERO ;                                   \n";
 r4_waddr << " 			BN_D7_reg  <= BN_ZERO;                                    \n";
 r4_waddr << " 			BN_D8_reg  <= BN_ZERO;                                    \n";
 r4_waddr << " 			BN_D9_reg  <= BN_ZERO;                                    \n";
 r4_waddr << " 			BND_out    <= BN_ZERO ;                                   \n";
 r4_waddr << " 			                                                          \n";
 r4_waddr << " 			MA_D0_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D1_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D2_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D3_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D4_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D5_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D6_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D7_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D8_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D9_reg  <= A_ZERO ;                                    \n";
 r4_waddr << " 			MA_D10_reg <= A_ZERO ;                                    \n";
 r4_waddr << " 			WMA_out    <= A_ZERO ;                                    \n";
 r4_waddr << " 		end                                                           \n";
 r4_waddr << " 		else begin                                                    \n";
 r4_waddr << " 			BN_D0_reg  <= BN_in ;                                     \n";
 r4_waddr << " 			BN_D1_reg  <= BN_D0_reg ;                                 \n";
 r4_waddr << " 			BN_D2_reg  <= BN_D1_reg ;                                 \n";
 r4_waddr << " 			BN_D3_reg  <= BN_D2_reg ;                                 \n";
 r4_waddr << " 			BN_D4_reg  <= BN_D3_reg ;                                 \n";
 r4_waddr << " 			BN_D5_reg  <= BN_D4_reg ;                                 \n";
 r4_waddr << " 			BN_D6_reg  <= BN_D5_reg ;                                 \n";
 r4_waddr << " 			BN_D7_reg  <= BN_D6_reg ;                                 \n";
 r4_waddr << " 			BN_D8_reg  <= BN_D7_reg ;                                 \n";
 r4_waddr << " 			BN_D9_reg  <= BN_D8_reg ;                                 \n";
 r4_waddr << " 			BND_out    <= BN_D9_reg ;                                 \n";
 r4_waddr << " 			                                                          \n";
 r4_waddr << " 			MA_D0_reg  <= MA_in ;                                     \n";
 r4_waddr << " 			MA_D1_reg  <= MA_D0_reg ;                                 \n";
 r4_waddr << " 			MA_D2_reg  <= MA_D1_reg ;                                 \n";
 r4_waddr << " 			MA_D3_reg  <= MA_D2_reg ;                                 \n";
 r4_waddr << " 			MA_D4_reg  <= MA_D3_reg ;                                 \n";
 r4_waddr << " 			MA_D5_reg  <= MA_D4_reg ;                                 \n";
 r4_waddr << " 			MA_D6_reg  <= MA_D5_reg ;                                 \n";
 r4_waddr << " 			MA_D7_reg  <= MA_D6_reg ;                                 \n";
 r4_waddr << " 			MA_D8_reg  <= MA_D7_reg ;                                 \n";
 r4_waddr << " 			MA_D9_reg  <= MA_D8_reg ;                                 \n";
 r4_waddr << " 			MA_D10_reg <= MA_D9_reg ;                                 \n";
 r4_waddr << " 			WMA_out    <= MA_D10_reg ;                                \n";
 r4_waddr << " 		end                                                           \n";
 r4_waddr << " 	end                                                               \n";
 r4_waddr << "                                                                    \n";
 r4_waddr << " endmodule                                                          \n";     
     r4_waddr.close();     
}

void CenCtrl::R4_WD_buf(std::string string_in){
     std::ofstream r4_wd_buf;
     std::string        string_buf = "/R4_WD_buf.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_wd_buf.open(ss.str());
 r4_wd_buf << " //==================================================               \n";
 r4_wd_buf << " //                                           \n";
 r4_wd_buf << " //Date       : 2018/8/1                                            \n";
 r4_wd_buf << " //Note       : Radix-4 Write Data buffer (4x1) 8-stage pipeline    \n";
 r4_wd_buf << " //==================================================               \n";
 r4_wd_buf << " `timescale 1 ns/1 ps                                               \n";
 r4_wd_buf << " module R4_WD_buf(RDC0_D_out,                                       \n";
 r4_wd_buf << " 			     RDC1_D_out,                                       \n";
 r4_wd_buf << " 				 RDC2_D_out,                                       \n";
 r4_wd_buf << " 				 RDC3_D_out,                                       \n";
 r4_wd_buf << " 		         RDC0_in,                                          \n";
 r4_wd_buf << " 				 RDC1_in,                                          \n";
 r4_wd_buf << " 				 RDC2_in,                                          \n";
 r4_wd_buf << " 				 RDC3_in,                                          \n";
 r4_wd_buf << "                  rst_n,                                            \n";
 r4_wd_buf << "                  clk                                               \n";
 r4_wd_buf << "                  ) ;                                               \n";
 r4_wd_buf << " parameter P_WIDTH     = 64 ;                                       \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << " parameter P_ZERO    = 64'h0 ;                                      \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << " output [P_WIDTH-1:0] RDC0_D_out ;                                  \n";
 r4_wd_buf << " output [P_WIDTH-1:0] RDC1_D_out ;                                  \n";
 r4_wd_buf << " output [P_WIDTH-1:0] RDC2_D_out ;                                  \n";
 r4_wd_buf << " output [P_WIDTH-1:0] RDC3_D_out ;                                  \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << " input [P_WIDTH-1:0] RDC0_in ;                                      \n";
 r4_wd_buf << " input [P_WIDTH-1:0] RDC1_in ;                                      \n";
 r4_wd_buf << " input [P_WIDTH-1:0] RDC2_in ;                                      \n";
 r4_wd_buf << " input [P_WIDTH-1:0] RDC3_in ;                                      \n";
 r4_wd_buf << " input               rst_n ;                                        \n";
 r4_wd_buf << " input               clk ;                                          \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D_out ;                                    \n";
 r4_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D_out ;                                    \n";
 r4_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D_out ;                                    \n";
 r4_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D_out ;                                    \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << " 	//RDC output delay 1 cycles                                    \n";
 r4_wd_buf << " 	always @(posedge clk or negedge rst_n) begin                   \n";
 r4_wd_buf << " 		if(~rst_n) begin                                           \n";
 r4_wd_buf << " 			RDC0_D_out  <= P_ZERO ;                                \n";
 r4_wd_buf << " 			//                                                     \n";
 r4_wd_buf << " 			RDC1_D_out  <= P_ZERO ;                                \n";
 r4_wd_buf << " 			//                                                     \n";
 r4_wd_buf << " 			RDC2_D_out  <= P_ZERO ;                                \n";
 r4_wd_buf << " 			//                                                     \n";
 r4_wd_buf << " 			RDC3_D_out  <= P_ZERO ;                                \n";
 r4_wd_buf << " 		end                                                        \n";
 r4_wd_buf << " 		else begin                                                 \n";
 r4_wd_buf << " 			RDC0_D_out  <= RDC0_in ;                               \n";
 r4_wd_buf << " 			//                                                     \n";
 r4_wd_buf << " 			RDC1_D_out  <= RDC1_in ;                               \n";
 r4_wd_buf << " 			//                                                     \n";
 r4_wd_buf << " 			RDC2_D_out  <= RDC2_in ;                               \n";
 r4_wd_buf << " 			//                                                     \n";
 r4_wd_buf << " 			RDC3_D_out  <= RDC3_in ;                               \n";
 r4_wd_buf << " 		end                                                        \n";
 r4_wd_buf << " 	end                                                            \n";
 r4_wd_buf << "                                                                    \n";
 r4_wd_buf << " endmodule                                                          \n";         
     r4_wd_buf.close();     
}

void CenCtrl::R4_DC(std::string string_in){
     std::ofstream r4_dc;
     std::string        string_buf = "/R4_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_dc.open(ss.str());
 r4_dc << " //==================================================                                                  \n";
 r4_dc << " //                                                                              \n";
 r4_dc << " //Date       : 2016/6/2                                                                               \n";
 r4_dc << " //Note       : Radix-4 delay commutator                                                               \n";
 r4_dc << " //==================================================                                                  \n";
 r4_dc << " `timescale 1 ns/1 ps                                                                                  \n";
 r4_dc << " module R4_DC(RDC_out0,                                                                                \n";
 r4_dc << " 			 RDC_out1,                                                                                \n";
 r4_dc << " 			 RDC_out2,                                                                                \n";
 r4_dc << " 			 RDC_out3,                                                                                \n";
 r4_dc << "              RDC_in0,                                                                                 \n";
 r4_dc << " 		     RDC_in1,                                                                                 \n";
 r4_dc << " 			 RDC_in2,                                                                                 \n";
 r4_dc << " 			 RDC_in3,                                                                                 \n";
 r4_dc << " 			 RDC_sel,                                                                                 \n";
 r4_dc << " 			 FFT_FSmode_sel,                                                                          \n";
 r4_dc << "              rst_n,                                                                                   \n";
 r4_dc << "              clk                                                                                      \n";
 r4_dc << "              ) ;                                                                                      \n";
 r4_dc << " parameter P_WIDTH     = 64 ;                                                                          \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " parameter P_ZERO      = 64'h0 ;                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out0 ;                                                                        \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out1 ;                                                                        \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out2 ;                                                                        \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out3 ;                                                                        \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in0 ;                                                                         \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in1 ;                                                                         \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in2 ;                                                                         \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in3 ;                                                                         \n";
 r4_dc << " input [1:0]         RDC_sel ;                                                                         \n";
 r4_dc << " input [1:0]         FFT_FSmode_sel ;                                                                  \n";
 r4_dc << " input               rst_n ;                                                                           \n";
 r4_dc << " input               clk ;                                                                             \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                                                                        \n";
 r4_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                                                                        \n";
 r4_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                                                                        \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " reg   [P_WIDTH-1:0] D10_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D20_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D21_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D30_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D31_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D32_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D00_out_reg ;                                                                     \n";
 r4_dc << " reg   [P_WIDTH-1:0] D01_out_reg ;                                                                     \n";
 r4_dc << " reg   [P_WIDTH-1:0] D10_out_reg ;                                                                     \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                                                                        \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                                                                        \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                                                                        \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                                                                        \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " 	//                // FFT final Stage do not transpose                                             \n";
 r4_dc << " 	assign D0_wire = ((FFT_FSmode_sel==2'd1)||(FFT_FSmode_sel==2'd2)) ? RDC_in0 :                     \n";
 r4_dc << " 					 (RDC_sel==2'd0)? RDC_in0 :                                                       \n";
 r4_dc << " 					 (RDC_sel==2'd1)? D10_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd2)? D21_in_reg :                                                    \n";
 r4_dc << " 					                  D32_in_reg ; // RDC_sel==2'd3                                   \n";
 r4_dc << " 									                                                                  \n";
 r4_dc << " 	//                                                                                                \n";
 r4_dc << " 	assign D1_wire = ((FFT_FSmode_sel==2'd1)||(FFT_FSmode_sel==2'd2)) ? D10_in_reg :                  \n";
 r4_dc << " 	                 (RDC_sel==2'd0)? D32_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd1)? RDC_in0 :                                                       \n";
 r4_dc << " 					 (RDC_sel==2'd2)? D10_in_reg :                                                    \n";
 r4_dc << " 					                  D21_in_reg ; // RDC_sel==2'd3                                   \n";
 r4_dc << " 									                                                                  \n";
 r4_dc << " 	//                                                                                                \n";
 r4_dc << " 	assign D2_wire = (FFT_FSmode_sel==2'd2) ? D21_in_reg :                                            \n";
 r4_dc << " 	                 (RDC_sel==2'd0)? D21_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd1)? D32_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd2)? RDC_in0 :                                                       \n";
 r4_dc << " 					                  D10_in_reg ; // RDC_sel==2'd3								      \n";
 r4_dc << " 	                                                                                                  \n";
 r4_dc << " 	//                                                                                                \n";
 r4_dc << " 	assign RDC_out3 = (FFT_FSmode_sel==2'd2) ? D32_in_reg :                                           \n";
 r4_dc << " 	                  (RDC_sel==2'd0)? D10_in_reg :                                                   \n";
 r4_dc << " 					  (RDC_sel==2'd1)? D21_in_reg :                                                   \n";
 r4_dc << " 					  (RDC_sel==2'd2)? D32_in_reg :                                                   \n";
 r4_dc << " 					                   RDC_in0 ; // RDC_sel==2'd3                                     \n";
 r4_dc << " 									                                                                  \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " 	//                                                                                                \n";
 r4_dc << " 	always @(posedge clk or negedge rst_n) begin                                                      \n";
 r4_dc << " 		if(~rst_n) begin                                                                              \n";
 r4_dc << " 			D10_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D20_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D21_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D30_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D31_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D32_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D00_out_reg <= P_ZERO ;                                                                   \n";
 r4_dc << " 			D01_out_reg <= P_ZERO ;	                                                                  \n";
 r4_dc << " 			RDC_out0 <= P_ZERO ;                                                                      \n";
 r4_dc << " 			D10_out_reg <= P_ZERO ;	                                                                  \n";
 r4_dc << " 			RDC_out1 <= P_ZERO ;                                                                      \n";
 r4_dc << " 			RDC_out2 <= P_ZERO ;	                                                                  \n";
 r4_dc << " 		end                                                                                           \n";
 r4_dc << " 		else begin                                                                                    \n";
 r4_dc << " 			D10_in_reg <= RDC_in1 ;                                                                   \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D20_in_reg <= RDC_in2 ;                                                                   \n";
 r4_dc << " 			D21_in_reg <= D20_in_reg ;                                                                \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D30_in_reg <= RDC_in3 ;                                                                   \n";
 r4_dc << " 			D31_in_reg <= D30_in_reg ;                                                                \n";
 r4_dc << " 			D32_in_reg <= D31_in_reg ;                                                                \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D00_out_reg <= D0_wire ;                                                                  \n";
 r4_dc << " 			D01_out_reg <= D00_out_reg ;                                                              \n";
 r4_dc << " 			   RDC_out0 <= D01_out_reg ;                                                              \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D10_out_reg <= D1_wire ;                                                                  \n";
 r4_dc << " 			   RDC_out1 <= D10_out_reg ;                                                              \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			RDC_out2 <= D2_wire ;                                                                     \n";
 r4_dc << " 		end                                                                                           \n";
 r4_dc << " 	end                                                                                               \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " endmodule                                                                                             \n"; 
     r4_dc.close();         
}

//radix-4 , final stage using radix-2
void CenCtrl::Ctrl_PipeReg1_r4_r2(std::string string_in){
     std::ofstream ctrl_pipereg1_r4;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     ctrl_pipereg1_r4.open(ss.str());
 ctrl_pipereg1_r4 << " //==================================================                                     \n";
 ctrl_pipereg1_r4 << " //                                                                 \n";
 ctrl_pipereg1_r4 << " //Date       : 2018/8/1                                                                  \n";
 ctrl_pipereg1_r4 << " //Note       : Pipeline Register1 for Control signal                                     \n";
 ctrl_pipereg1_r4 << " //==================================================                                     \n";
 ctrl_pipereg1_r4 << " `timescale 1 ns/1 ps                                                                     \n";
 ctrl_pipereg1_r4 << " module Ctrl_PipeReg1(mode_sel_Dout,                                                      \n";
 ctrl_pipereg1_r4 << " 				        Mul_sel_Dout,                                                       \n";
 ctrl_pipereg1_r4 << " 				        RDC_sel_Dout,                                                       \n";
 ctrl_pipereg1_r4 << " 			            BU_mode_sel_Dout,                                                   \n";
 ctrl_pipereg1_r4 << " 			            DC_mode_sel_Dout,                                                   \n";
 ctrl_pipereg1_r4 << "                      mode_sel_in,                                                        \n";
 ctrl_pipereg1_r4 << " 			            Mul_sel_in,                                                         \n";
 ctrl_pipereg1_r4 << " 			            RDC_sel_in,                                                         \n";
 ctrl_pipereg1_r4 << " 			            BU_mode_sel_in,                                                     \n";
 ctrl_pipereg1_r4 << " 			            DC_mode_sel_in,                                                     \n";
 ctrl_pipereg1_r4 << "                      rst_n,                                                              \n";
 ctrl_pipereg1_r4 << "                      clk                                                                 \n";
 ctrl_pipereg1_r4 << "                      ) ;                                                                 \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " parameter RDC_WIDTH   = 2 ;                                                              \n";
 ctrl_pipereg1_r4 << " parameter RDC_ZERO    = 2'h0 ;                                                           \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " output                  mode_sel_Dout ;                                                  \n";
 ctrl_pipereg1_r4 << " output                  BU_mode_sel_Dout ;                                               \n";
 ctrl_pipereg1_r4 << " output                  DC_mode_sel_Dout ;                                               \n";
 ctrl_pipereg1_r4 << " output [1:0]            Mul_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r4 << " output [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " input                   mode_sel_in ;                                                    \n";
 ctrl_pipereg1_r4 << " input  [1:0]            Mul_sel_in ;                                                     \n";
 ctrl_pipereg1_r4 << " input  [RDC_WIDTH-1:0]  RDC_sel_in ;                                                     \n";
 ctrl_pipereg1_r4 << " input                   BU_mode_sel_in ;                                                 \n";
 ctrl_pipereg1_r4 << " input                   DC_mode_sel_in ;                                                 \n";
 ctrl_pipereg1_r4 << " input                   rst_n ;                                                          \n";
 ctrl_pipereg1_r4 << " input                   clk ;                                                            \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_D0reg ;                                                    \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_D1reg ;                                                    \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_D2reg ;                                                    \n";
 ctrl_pipereg1_r4 << " reg                  mode_sel_Dout ;                                                     \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D0reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D1reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D2reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D3reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D4reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D5reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D6reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D7reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D8reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_D9reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  BU_mode_sel_Dout ;                                                  \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D0reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D1reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D2reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D3reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D4reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D5reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D6reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D7reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D8reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_D9reg ;                                                 \n";
 ctrl_pipereg1_r4 << " reg                  DC_mode_sel_Dout ;                                                  \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [1:0]            Mul_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D3reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D4reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_D5reg ;                                                     \n";
 ctrl_pipereg1_r4 << " reg [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " 	//mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles       \n";
 ctrl_pipereg1_r4 << " 	always @(posedge clk or negedge rst_n) begin                                         \n";
 ctrl_pipereg1_r4 << " 		if(~rst_n) begin                                                                 \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D0reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D1reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D2reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r4 << " 			mode_sel_Dout <= 1'b0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D0reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D1reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D2reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D3reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D4reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D5reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D6reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D7reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D8reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D9reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_Dout  <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D0reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D1reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D2reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D3reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D4reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D5reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D6reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D7reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D8reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D9reg <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_Dout  <= 1'b0 ;                                                  \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D0reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D1reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D2reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_Dout <= 2'd0 ;                                                       \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D0reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D1reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D2reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D3reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D4reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D5reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_Dout <= RDC_ZERO ;                                                   \n";
 ctrl_pipereg1_r4 << " 		end                                                                              \n";
 ctrl_pipereg1_r4 << " 		else begin                                                                       \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D0reg <= mode_sel_in ;                                              \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D1reg <= mode_sel_D0reg ;                                           \n";
 ctrl_pipereg1_r4 << " 			mode_sel_D2reg <= mode_sel_D1reg ;                                           \n";
 ctrl_pipereg1_r4 << " 			mode_sel_Dout <= mode_sel_D2reg ;                                            \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D0reg <= BU_mode_sel_in ;                                        \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D1reg <= BU_mode_sel_D0reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D2reg <= BU_mode_sel_D1reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D3reg <= BU_mode_sel_D2reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D4reg <= BU_mode_sel_D3reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D5reg <= BU_mode_sel_D4reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D6reg <= BU_mode_sel_D5reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D7reg <= BU_mode_sel_D6reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D8reg <= BU_mode_sel_D7reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_D9reg <= BU_mode_sel_D8reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			BU_mode_sel_Dout  <= BU_mode_sel_D9reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D0reg <= DC_mode_sel_in ;                                        \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D1reg <= DC_mode_sel_D0reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D2reg <= DC_mode_sel_D1reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D3reg <= DC_mode_sel_D2reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D4reg <= DC_mode_sel_D3reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D5reg <= DC_mode_sel_D4reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D6reg <= DC_mode_sel_D5reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D7reg <= DC_mode_sel_D6reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D8reg <= DC_mode_sel_D7reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_D9reg <= DC_mode_sel_D8reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			DC_mode_sel_Dout  <= DC_mode_sel_D9reg ;                                     \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D0reg <= Mul_sel_in ;                                                \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			Mul_sel_Dout <= Mul_sel_D2reg ;                                              \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D0reg <= RDC_sel_in ;                                                \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                             \n";
 ctrl_pipereg1_r4 << " 			RDC_sel_Dout <= RDC_sel_D5reg ;                                              \n";
 ctrl_pipereg1_r4 << " 			//                                                                           \n";
 ctrl_pipereg1_r4 << " 		end                                                                              \n";
 ctrl_pipereg1_r4 << " 	end                                                                                  \n";
 ctrl_pipereg1_r4 << "                                                                                          \n";
 ctrl_pipereg1_r4 << " endmodule                                                                                \n";     
     ctrl_pipereg1_r4.close();         
}
void CenCtrl::R4_R2_AGU(std::string string_in){
     std::ofstream r4_agu;    
     std::string        string_buf = "/R4_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_agu.open(ss.str());
  r4_agu << "//==================================================                                                                       \n";         
  r4_agu << "//                                                                                                   \n";
  r4_agu << "//Date       : 2020/7/22                                                                                                    \n";
  r4_agu << "//Note       : Radix-4 address generator unit                                                                              \n";
  r4_agu << "//==================================================                                                                       \n";
  r4_agu << "`timescale 1 ns/1 ps                                                                                                       \n";
  r4_agu << "module R4_AGU(BN_out,                                                                                                      \n";
  r4_agu << "			  MA,                                                                                                           \n";
  r4_agu << "			  ROMA,                                                                                                         \n";
  r4_agu << "			  Mul_sel_out,                                                                                                  \n";
  r4_agu << "			  RDC_sel_out,                                                                                                  \n";
  r4_agu << "			  data_cnt_reg,                                                                                                 \n";
  r4_agu << "			  BU_mode_sel_out,                                                                                              \n";
  r4_agu << "			  DC_mode_sel_out,//for raidx-2 delay commutator                                                                \n";
  r4_agu << "			  mode_sel_in,                                                                                                  \n";
  r4_agu << "			  rc_sel_in,                                                                                                    \n";
  r4_agu << "			  AGU_en,                                                                                                       \n";
  r4_agu << "			  wrfd_en_in,                                                                                                   \n";
  r4_agu << "             rst_n,                                                                                                        \n";
  r4_agu << "             clk                                                                                                           \n";
  r4_agu << "             ) ;                                                                                                           \n";
  r4_agu << "parameter A_WIDTH     = "<< addr_width       << ";                                                                         \n";
  r4_agu << "parameter DC_WIDTH    = "<< data_cnt_width   << ";                                                                         \n";
  r4_agu << "parameter BC_WIDTH    = "<< BU_counter_width << ";                                                                         \n";
  r4_agu << "parameter SC_WIDTH    = "<< stage_width      << "; //number of stages+1                                                    \n";
  r4_agu << "parameter ROMA_WIDTH  = "<< ROM_width        << ";                                                                         \n";
  r4_agu << "parameter RDC_WIDTH   = 2 ; //2018/08/01                                                                                   \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "parameter DC_ZERO   = " << data_cnt_width << "'h0 ;                                                                        \n";
  r4_agu << "parameter ROMA_ZERO = " << ROM_width      << "'h0 ;                                                                        \n";
  r4_agu << "parameter RDC_ZERO  = 2'h0 ;                                                                                               \n";
  r4_agu << "                                                                                                                           \n";
  for(int i=0;i < No_stage;i++){                                                                                                        
  r4_agu << "parameter S" << i << "      = " << stage_width << "'d" << i << ";                                                          \n";
  }                                                                                                                                     
  r4_agu << "                                                                                                                           \n";
  r4_agu << "//data counter value1 for data_cnt_wire                                                                                    \n";
  r4_agu << "parameter DCNT_V1   = " << data_cnt_width << "'d" << FFT_dc[No_stage-1] <<";                                               \n";
  r4_agu << "//data counter value2 for data_cnt_wire                                                                                    \n";
  r4_agu << "parameter DCNT_V2   = " << data_cnt_width << "'d" << (NO_U_BUPS )    <<";\n"; //delay 3 clock,waitting for output data
  r4_agu << "                                                                                                                           \n";
  for(int j=0;j<(radix-2);j++){                                                                                                         
     r4_agu << "parameter DCNT_FS" << (j+1) <<" = "<<data_cnt_width << "'d" << DCNT_FS[j] << ";                                         \n";
  }                                                                                                                                     
  r4_agu << " // data counter bit position1 for MSB of j_value                                                                          \n";
  r4_agu << "parameter DCNT_BP1 = " << DCNT_BP1 << " ;                                                                                  \n";
  r4_agu << "// data counter bit position2 for LSB of i_value                                                                           \n";
  r4_agu << "parameter DCNT_BP2 = " << DCNT_BP2 << " ;                                                                                  \n";
  r4_agu << "// data counter bit position3 for MSB of i_value                                                                           \n";
  r4_agu << "parameter DCNT_BP3 = " << DCNT_BP3 << " ;                                                                                  \n";
  r4_agu << "// data counter bit position4 for LSB of SC_value                                                                          \n";
  r4_agu << "parameter DCNT_BP4 = " << DCNT_BP4 << " ;                                                                                  \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "output                  BN_out ;                                                                                           \n";
  r4_agu << "output [A_WIDTH-1:0]    MA ;                                                                                               \n";
  r4_agu << "output [ROMA_WIDTH-1:0] ROMA ;                                                                                             \n";
  r4_agu << "output [1:0]            Mul_sel_out ;                                                                                      \n";
  r4_agu << "output [RDC_WIDTH-1:0]  RDC_sel_out ;                                                                                      \n";
  r4_agu << "output [DC_WIDTH-1:0]   data_cnt_reg ;                                                                                     \n";
  r4_agu << "output                  BU_mode_sel_out ;                                                                                  \n";
  r4_agu << "output                  DC_mode_sel_out ;                                                                                  \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "input                   mode_sel_in ;                                                                                      \n";
  r4_agu << "input                   rc_sel_in ;                                                                                        \n";
  r4_agu << "input                   AGU_en ;                                                                                           \n";
  r4_agu << "input                   wrfd_en_in ;                                                                                       \n";
  r4_agu << "input                   rst_n ;                                                                                            \n";
  r4_agu << "input                   clk ;                                                                                              \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "reg   [DC_WIDTH-1:0]  data_cnt_reg ; // data counter                                                                       \n";
  r4_agu << "reg   [RDC_WIDTH-1:0] RDCsel_cnt_reg ; // RDC select counter, 2018/08/01                                                   \n";
  r4_agu << "reg                   BN_out ;                                                                                             \n";
  r4_agu << "reg   [RDC_WIDTH-1:0] RDC_sel_out ;                                                                                        \n";
  r4_agu << "reg   [1:0]           Mul_sel_out ;                                                                                        \n";
  r4_agu << "reg                   BU_mode_sel_out ;                                                                                    \n";
  r4_agu << "reg                   DC_mode_sel_out ;                                                                                    \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "wire  [DC_WIDTH-1:0]  data_cnt_wire ;                                                                                      \n";
  r4_agu << "wire  [RDC_WIDTH-1:0] RDCsel_cnt_wire ; // 2018/08/01                                                                      \n";
  r4_agu << "wire  [BC_WIDTH-1:0]  BC_wire ; // butterfly counter                                                                       \n";
  r4_agu << "wire  [BC_WIDTH-1:0]  BC_REORDER_wire ; // butterfly counter , reorder data for output.                                    \n";
  //number of wire xor_wire change with fft_point                                                                                       \n";
  unsigned long NO_xorwire;                                                                                                             
  NO_xorwire = DCNT_BP3 - DCNT_BP2;                                                                                                     
  for(int i=0;i < NO_xorwire;i++){                                                                                                      
     r4_agu << "wire                 xor_d"<< i << "_wire;                                                                              \n";
  }                                                                                                                                     
  r4_agu << "                                                                                                                           \n";
  r4_agu << "wire  [SC_WIDTH-1:0]  SC_wire ; // stage counter                                                                           \n";
  r4_agu << "wire  [BC_WIDTH-1:0]  BC_RR_wire ;                                                                                         \n";
  r4_agu << "wire                  BN_wire ;                                                                                            \n";
  r4_agu << "wire                  BU_mode_sel_wire ;                                                                                   \n";
  r4_agu << "wire                  DC_mode_sel_wire ;                                                                                   \n";
  r4_agu << "wire [RDC_WIDTH-1:0]  RDC_sel_wire ;                                                                                       \n";
  r4_agu << "wire [1:0]            Mul_sel_wire ;                                                                                       \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "wire  [BC_WIDTH-1:0]  BR_BC_wire ;                                                                                         \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "	//                                                                                                                      \n";
  r4_agu << "	assign data_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                                     \n";
  r4_agu << "                            ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                                 \n";
  r4_agu << "                             DC_ZERO : ((AGU_en==1'b1)&&(data_cnt_reg<DCNT_V1))?                                           \n";
  r4_agu << "                            (data_cnt_reg + 1'b1) : data_cnt_reg ;                                                         \n";
  r4_agu << "	                                                                                                                        \n";
  r4_agu << "	//                                                                                                                      \n";
  r4_agu << "	assign RDCsel_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                                   \n";
  r4_agu << "                             ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                                \n";
  r4_agu << "                             RDC_ZERO :(((AGU_en==1'b1)&&(data_cnt_reg<DCNT_V1))||                                         \n";
  r4_agu << "                             (wrfd_en_in==1'b1))? (RDCsel_cnt_reg + 1'b1) : RDCsel_cnt_reg ;                               \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "// for Gray code                                                                                                           \n";
  for(int k=0; k < NO_xorwire; k++){                                                                                                   
  r4_agu << "   assign xor_d" << k <<"_wire = data_cnt_reg["<<(DCNT_BP3 - k)<<"]^data_cnt_reg["<<(DCNT_BP3 - k - 1)<<"];                \n";
  }                                                                                                                                     
  r4_agu << "//	                                                                                                                        \n";
  r4_agu << "   assign BC_wire = (rc_sel_in==1'b1)?                                                                                     \n";
  r4_agu << "                     ({data_cnt_reg[DCNT_BP1:0], data_cnt_reg[DCNT_BP3:DCNT_BP2]}): //(j*G+i)                              \n";
  r4_agu << "	                 ({data_cnt_reg[DCNT_BP1:0],                                                                            \n";
  r4_agu << "                     data_cnt_reg[DCNT_BP3],                                                                               \n";
  for(int l=0;l<NO_xorwire;l++){                                                                                                        
      if(l!=(NO_xorwire-1))r4_agu << "                      xor_d"<< l <<"_wire,\n";                                                    
      else                 r4_agu << "                      xor_d"<< l <<"_wire\n";	                                                   
  }                                                                                                                                     
  r4_agu << "                       }) ;\n";                                                                                            
  r4_agu << "\n";                                                                                                                       
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   assign SC_wire = data_cnt_reg[DC_WIDTH-1:DCNT_BP4] ;                                                                    \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // Barrel shifter, rc_sel_in=1, right rotate 10-bit,rc_sel_in is to do resolving carries                                                                    \n";
  r4_agu << "   assign BC_RR_wire = ";
  unsigned long RR_tmp;
  unsigned long s;
  unsigned long fs_rr_bits; //final state is in order to read data from sram
  //final state bc right shift // final state is after INTT computing state
  s = DCNT_BP1 + 1; //radix bit size
  fs_rr_bits = s * (No_stage -3);
  for(unsigned long i=0; i < (No_stage-1);i++){
     if( i == (No_stage -2))RR_tmp = s * i - 1;
     else RR_tmp = s * i;	 
	 
     if(i==0) {
         if(No_stage < 4) r4_agu << "((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))? BC_wire:\n";
         else r4_agu << "((SC_wire == S" << i << ")||((SC_wire == S"<< (No_stage-1) <<") && (mode_sel_in == 1'b1)))? BC_wire:\n";	  
     }
     else {
             if((No_stage >= 4 )&& (i == (No_stage-2)))r4_agu << "                       ((SC_wire == S" << i << ") ||((SC_wire == S"<< (No_stage - 1)<<") && (mode_sel_in == 1'b0)))? \n";
             else   r4_agu << "                       (SC_wire == S" << i << ")? \n";
             r4_agu << "                       {BC_wire[" << RR_tmp-1 << ":0],BC_wire[BC_WIDTH-1:" << RR_tmp << "]} :\n";
     }
  }
  r4_agu << "                       BC_wire;\n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // Bit reverse barrel shifter for IFFT                                                                                  \n";
  r4_agu << "   assign BR_BC_wire = {";
  //radix-4 and radix-2 , mixed radix BC need to reorder 
  //reorder BC for IFFT computing
  int  even_index_tmp;
  int  odd_index_tmp;
  int  Isodd;
  if(BU_counter_width > 3)Isodd = 1;
  else  Isodd = 0;
  even_index_tmp = 2;
  odd_index_tmp  = 3;
     for(int j = BU_counter_width-1; j >= 0 ;j--){
        if(j == (BU_counter_width-1)) r4_agu << "BC_RR_wire[1]";
        else if (j == (BU_counter_width-2)) r4_agu << "                       BC_RR_wire[0]";
        else if (j == 0) r4_agu << "                   BC_RR_wire["<<even_index_tmp<<"]";
        else {
  	    if(Isodd == 1){
  		   r4_agu << "                       BC_RR_wire["<< odd_index_tmp <<"]";
  		   odd_index_tmp = odd_index_tmp + 2;
  		   Isodd = 0;
  	    }else {
           r4_agu << "                       BC_RR_wire["<< even_index_tmp <<"]";
  		   even_index_tmp = even_index_tmp + 2;  
  		   Isodd = 1;  
  	   }
     }
     if(j > 0)r4_agu << ",\n";
  }	
  r4_agu << "};\n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   //Reorder data  \n";
  //Orinal msb index m
  // For example, 32 point fft ,BC have 3 bits
  // original BC : [2] [1] [0] --------->  [0] [2] [1]
  // 128 point fft , BC  have 5 bits
  // original BC : [4] [3] [2] [1] [0] --------> [3] [1] [2] [4] [0]
  // 512 point , BC have 7 bits 
  // original BC : [6] [5] [4] [3] [2] [1] [0] ------------>  [0] [3] [5] [1] [4] [6] [2]
  // 2048 point , BC have 9 bits   
  // original BC : [8] [7] [6] [5] [4] [3] [2] [1] [0] ------------> [2] [5] [0] [3] [7] [1] [6] [8] [4]  
  
  //for output data , Reorder BC
  r4_agu << "   assign BC_REORDER_wire = {";
    int reorder_msb_index;	
    int reorder_lsb_index;
	int reorder_p1_index; // reorder BC[1](poistion 1 bit) 
	int reorder_p4_index; // reorder BC[1](poistion 1 bit) 
	int Isodd_output;
	int odd_index_tmp_output;
	int even_index_tmp_output;
	reorder_lsb_index = BU_counter_width - 5;
	reorder_p1_index  = BU_counter_width - 1;
	reorder_p4_index  = BU_counter_width - 2;
	if(reorder_lsb_index == 0) reorder_msb_index = BU_counter_width - 2;
    else reorder_msb_index = reorder_lsb_index - 2;
	//std::cout << "reorder_msb_index: " << reorder_msb_index <<"\n";
	//std::cout << "reorder_lsb_index: " << reorder_lsb_index <<"\n";
	//---------------------------------------------
	//over index 4 of reorder sequence 
	Isodd_output = 1;
	odd_index_tmp_output  = BU_counter_width - 4;
	even_index_tmp_output = BU_counter_width - 9;

	if(BU_counter_width > 3){
		for(int i = BU_counter_width-1; i >= 0;i--){
            if(i == 0)  r4_agu << "                       BC_wire["<< reorder_lsb_index <<"]";
            else if (i == 1) r4_agu << "                       BC_wire["<<reorder_p1_index<<"]";
			else if (i == 2) r4_agu << "                       BC_wire["<<reorder_lsb_index + 2<<"]";
			else if (i == 3) r4_agu << "                       BC_wire[1]";
			else if (i == 4) r4_agu << "                       BC_wire["<< reorder_p4_index <<"]";
			else if (i == (BU_counter_width - 1)) r4_agu << "BC_wire["<< reorder_msb_index <<"]";
			else {
				if(Isodd_output == 1){
					r4_agu << "                       BC_wire["<< odd_index_tmp_output <<"]";
                    odd_index_tmp_output = odd_index_tmp_output - 2 ;
                    Isodd_output = 0;					
				}else{
					r4_agu << "                       BC_wire["<< even_index_tmp_output <<"]";
					even_index_tmp_output = even_index_tmp_output - 2;
					Isodd_output = 1;
				}
			}
			if(i > 0)r4_agu << ",\n";
		}
    }else{
		r4_agu << "BC_wire[0],\n";
		r4_agu << "                       BC_wire[2],\n";
		r4_agu << "                       BC_wire[1]\n";
	}
  r4_agu << "};\n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // Bank, rc_sel_in=1 BN_wire=(^BC_RR_wire)                                                                              \n";
  r4_agu << "   assign BN_wire = (rc_sel_in == 1'b1) ? (^BC_REORDER_wire) : (mode_sel_in==1'b1)? (^BR_BC_wire) : (^BC_RR_wire) ;        \n";
  r4_agu << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                                   \n";
  r4_agu << "   assign MA = (rc_sel_in == 1'b1) ? (BC_REORDER_wire[BC_WIDTH-1:1]) : (mode_sel_in==1'b1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ;    \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   // ROM Address                                                                                                          \n";
  r4_agu << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                             \n";
  unsigned long ls_bits = 0; //left shift bits
  
  for(unsigned long i=1; i < (No_stage-1);i++){
    ls_bits = s * i;
    unsigned long ls_msb;
    ls_msb = ROM_width -1 - ls_bits;
    if(ls_msb != 0)r4_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[" << ls_msb <<":0]," << ls_bits <<"'d0}) : \n" ;    
    else r4_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[0]," << ls_bits <<"'d0}) : \n" ;    
  }
  r4_agu << "               ROMA_ZERO;\n";
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   assign Mul_sel_wire = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd3 :                                      \n";
  r4_agu << "                       ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd2 : // test for point-wise multiplication  \n";
  r4_agu << "                       (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                                                       \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   assign RDC_sel_wire = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg : data_cnt_reg[1:0] ; // 2018/08/01                           \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   assign BU_mode_sel_wire = (SC_wire == S" << No_stage-1 <<") ? 1'b1:1'b0;                                                \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   assign DC_mode_sel_wire = ((SC_wire == S" << No_stage-2 <<") ||\n";
  r4_agu << "                              (SC_wire == S" << No_stage-1 <<") && (mode_sel_in==1'b0)) ? 1'b1 : 1'b0;\n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "   //                                                                                                                      \n";
  r4_agu << "   always @(posedge clk or negedge rst_n) begin                                                                            \n";
  r4_agu << "       if(~rst_n) begin                                                                                                    \n";
  r4_agu << "           data_cnt_reg              <= DC_ZERO ;                                                                                    \n";
  r4_agu << "           BN_out                    <= 1'b0 ;                                                                                       \n";
  r4_agu << "           BU_mode_sel_out           <= 1'b0 ;                                                                                       \n";
  r4_agu << "           DC_mode_sel_out           <= 1'b0 ;                                                                                       \n";
  r4_agu << "           RDC_sel_out               <= RDC_ZERO ;                                                                                   \n";
  r4_agu << "           Mul_sel_out               <= 2'd0 ;                                                                                       \n";
  r4_agu << "           RDCsel_cnt_reg            <= RDC_ZERO ; // 2018/08/01                                                                     \n";
  r4_agu << "       end                                                                                                                 \n";
  r4_agu << "       else begin                                                                                                          \n";
  r4_agu << "           data_cnt_reg              <= data_cnt_wire ;                                                                              \n";
  r4_agu << "           BN_out                    <= BN_wire ;                                                                                    \n";
  r4_agu << "           BU_mode_sel_out           <= BU_mode_sel_wire ;                                                                           \n";
  r4_agu << "           DC_mode_sel_out           <= DC_mode_sel_wire ;                                                                           \n";
  r4_agu << "           RDC_sel_out               <= RDC_sel_wire ;                                                                               \n";
  r4_agu << "           Mul_sel_out               <= Mul_sel_wire ;                                                                               \n";
  r4_agu << "           RDCsel_cnt_reg            <= RDCsel_cnt_wire ; // 2018/08/01                                                              \n";
  r4_agu << "       end                                                                                                                 \n";
  r4_agu << "   end                                                                                                                     \n";
  r4_agu << "                                                                                                                           \n";
  r4_agu << "endmodule                                                                                                                  \n";     
     r4_agu.close();     
}
void CenCtrl::R4_R2_DC(std::string string_in){
     std::ofstream r4_dc;
     std::string        string_buf = "/R4_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r4_dc.open(ss.str());
 r4_dc << " //==================================================                                                  \n";
 r4_dc << " //                                                                              \n";
 r4_dc << " //Date       : 2016/6/2                                                                               \n";
 r4_dc << " //Note       : Radix-4 delay commutator                                                               \n";
 r4_dc << " //==================================================                                                  \n";
 r4_dc << " `timescale 1 ns/1 ps                                                                                  \n";
 r4_dc << " module R4_DC(RDC_out0,                                                                                \n";
 r4_dc << " 			 RDC_out1,                                                                                \n";
 r4_dc << " 			 RDC_out2,                                                                                \n";
 r4_dc << " 			 RDC_out3,                                                                                \n";
 r4_dc << "              RDC_in0,                                                                                 \n";
 r4_dc << " 		     RDC_in1,                                                                                 \n";
 r4_dc << " 			 RDC_in2,                                                                                 \n";
 r4_dc << " 			 RDC_in3,                                                                                 \n";
 r4_dc << " 			 RDC_sel,                                                                                 \n";
 r4_dc << " 			 DC_mode_sel_in, //for using in radix-2 delay counter                                     \n";
 r4_dc << "              rst_n,                                                                                   \n";
 r4_dc << "              clk                                                                                      \n";
 r4_dc << "              ) ;                                                                                      \n";
 r4_dc << " parameter P_WIDTH     = 64 ;                                                                          \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " parameter P_ZERO      = 64'h0 ;                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out0 ;                                                                        \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out1 ;                                                                        \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out2 ;                                                                        \n";
 r4_dc << " output[P_WIDTH-1:0] RDC_out3 ;                                                                        \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in0 ;                                                                         \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in1 ;                                                                         \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in2 ;                                                                         \n";
 r4_dc << " input [P_WIDTH-1:0] RDC_in3 ;                                                                         \n";
 r4_dc << " input [1:0]         RDC_sel ;                                                                         \n";
 r4_dc << " input               DC_mode_sel_in ;                                                                  \n";
 r4_dc << " input               rst_n ;                                                                           \n";
 r4_dc << " input               clk ;                                                                             \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                                                                        \n";
 r4_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                                                                        \n";
 r4_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                                                                        \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " reg   [P_WIDTH-1:0] D10_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D20_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D21_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D30_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D31_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D32_in_reg ;                                                                      \n";
 r4_dc << " reg   [P_WIDTH-1:0] D00_out_reg ;                                                                     \n";
 r4_dc << " reg   [P_WIDTH-1:0] D01_out_reg ;                                                                     \n";
 r4_dc << " reg   [P_WIDTH-1:0] D10_out_reg ;                                                                     \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                                                                        \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                                                                        \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                                                                        \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                                                                        \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D10_in_wire ;  //modify at 2020/8/5                                              \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D20_in_wire ;  //modify at 2020/8/5                                              \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D21_in_wire ;  //modify at 2020/8/5                                              \n";
 r4_dc << " wire  [P_WIDTH-1:0]  D31_in_wire ;  //modify at 2020/8/5                                              \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " 	//modify 2020/8/5                                                                                 \n";
 r4_dc << " 	assign D0_wire = ((DC_mode_sel_in == 1'b1) && (RDC_sel[0]==1'b0)) ? RDC_in0 :                     \n";
 r4_dc << " 	                 ((DC_mode_sel_in == 1'b1) && (RDC_sel[0]==1'b1)) ? D20_in_reg :                  \n";
 r4_dc << " 					 (RDC_sel==2'd0)? RDC_in0 :                                                       \n";
 r4_dc << " 					 (RDC_sel==2'd1)? D10_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd2)? D21_in_reg :                                                    \n";
 r4_dc << " 					                  D32_in_reg ; // RDC_sel==2'd3                                   \n";
 r4_dc << " 									                                                                  \n";
 r4_dc << " 	//modify 2020/8/5                                                                                 \n";
 r4_dc << " 	assign D1_wire = ((DC_mode_sel_in == 1'b1) && (RDC_sel[0]==1'b1)) ? RDC_in0 :                     \n";
 r4_dc << " 	                 ((DC_mode_sel_in == 1'b1) && (RDC_sel[0]==1'b0)) ? D10_in_reg :                  \n";
 r4_dc << " 	                 (RDC_sel==2'd0)? D32_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd1)? RDC_in0 :                                                       \n";
 r4_dc << " 					 (RDC_sel==2'd2)? D10_in_reg :                                                    \n";
 r4_dc << " 					                  D21_in_reg ; // RDC_sel==2'd3                                   \n";
 r4_dc << " 									                                                                  \n";
 r4_dc << " 	//                                                                                                \n";
 r4_dc << " 	assign D2_wire = (DC_mode_sel_in==1'b1) ? D21_in_reg :                                            \n";
 r4_dc << " 	                 (RDC_sel==2'd0)? D21_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd1)? D32_in_reg :                                                    \n";
 r4_dc << " 					 (RDC_sel==2'd2)? RDC_in0 :                                                       \n";
 r4_dc << " 					                  D10_in_reg ; // RDC_sel==2'd3								      \n";
 r4_dc << " 	                                                                                                  \n";
 r4_dc << " 	//modify 2020/8/5                                                                                 \n";
 r4_dc << " 	assign D10_in_wire = ((DC_mode_sel_in==1'b1) && (RDC_sel[0]==1'b1)) ? RDC_in2 : RDC_in1;          \n";
 r4_dc << " 	//modify 2020/8/5                                                                                 \n";
 r4_dc << " 	assign D20_in_wire = ((DC_mode_sel_in==1'b1) && (RDC_sel[0]==1'b1)) ? D30_in_reg : RDC_in2;       \n";
 r4_dc << " 	//modify 2020/8/5                                                                                 \n";
 r4_dc << " 	assign D21_in_wire = ((DC_mode_sel_in==1'b1) && (RDC_sel[0]==1'b1)) ? D10_in_reg : D20_in_reg;    \n";
 r4_dc << " 	//modify 2020/8/5                                                                                 \n";
 r4_dc << " 	assign D31_in_wire = ((DC_mode_sel_in==1'b1) && (RDC_sel[0]==1'b1)) ? RDC_in1 : D30_in_reg;    \n";
 r4_dc << " 	//                                                                                                \n";
 r4_dc << " 	assign RDC_out3 = (DC_mode_sel_in==1'b1) ? D32_in_reg :                                           \n";
 r4_dc << " 	                  (RDC_sel==2'd0)? D10_in_reg :                                                   \n";
 r4_dc << " 					  (RDC_sel==2'd1)? D21_in_reg :                                                   \n";
 r4_dc << " 					  (RDC_sel==2'd2)? D32_in_reg :                                                   \n";
 r4_dc << " 					                   RDC_in0 ; // RDC_sel==2'd3                                     \n";
 r4_dc << " 									                                                                  \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " 	//                                                                                                \n";
 r4_dc << " 	always @(posedge clk or negedge rst_n) begin                                                      \n";
 r4_dc << " 		if(~rst_n) begin                                                                              \n";
 r4_dc << " 			D10_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D20_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D21_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D30_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D31_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D32_in_reg <= P_ZERO ;                                                                    \n";
 r4_dc << " 			D00_out_reg <= P_ZERO ;                                                                   \n";
 r4_dc << " 			D01_out_reg <= P_ZERO ;	                                                                  \n";
 r4_dc << " 			RDC_out0 <= P_ZERO ;                                                                      \n";
 r4_dc << " 			D10_out_reg <= P_ZERO ;	                                                                  \n";
 r4_dc << " 			RDC_out1 <= P_ZERO ;                                                                      \n";
 r4_dc << " 			RDC_out2 <= P_ZERO ;	                                                                  \n";
 r4_dc << " 		end                                                                                           \n";
 r4_dc << " 		else begin                                                                                    \n";
 r4_dc << " 			D10_in_reg <= D10_in_wire ;                                                               \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D20_in_reg <= D20_in_wire ;                                                                   \n";
 r4_dc << " 			D21_in_reg <= D21_in_wire ;                                                                \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D30_in_reg <= RDC_in3 ;                                                                   \n";
 r4_dc << " 			D31_in_reg <= D31_in_wire ;                                                                \n";
 r4_dc << " 			D32_in_reg <= D31_in_reg ;                                                                \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D00_out_reg <= D0_wire ;                                                                  \n";
 r4_dc << " 			D01_out_reg <= D00_out_reg ;                                                              \n";
 r4_dc << " 			   RDC_out0 <= D01_out_reg ;                                                              \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			D10_out_reg <= D1_wire ;                                                                  \n";
 r4_dc << " 			RDC_out1 <= D10_out_reg ; //RDC_out1 <= D10_out_reg                                       \n";
 r4_dc << " 			                                                                                          \n";
 r4_dc << " 			RDC_out2 <= D2_wire ;                                                                     \n";
 r4_dc << " 		end                                                                                           \n";
 r4_dc << " 	end                                                                                               \n";
 r4_dc << "                                                                                                       \n";
 r4_dc << " endmodule                                                                                             \n"; 
     r4_dc.close();         
}

//radix-8
void CenCtrl::R8_InpipeReg(std::string string_in){
     std::ofstream r8_inpipereg;
     std::string        string_buf = "/R8_InpipeReg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_inpipereg.open(ss.str());    
 r8_inpipereg << " //===================================                                \n";
 r8_inpipereg << " //Note:input data pipline buffer                                     \n";
 r8_inpipereg << " //===================================                                \n";
 r8_inpipereg << " `timescale 1ns/1ps                                                   \n";
 r8_inpipereg << " module R8_InpipeReg(                                                 \n";
 r8_inpipereg << "         ExtValid_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D0_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D1_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D2_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D3_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D4_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D5_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D6_in,                                                 \n";
 r8_inpipereg << "         ExtB0_D7_in,                                                 \n";
 r8_inpipereg << "         ExtB1_D0_in,                                                 \n";
 r8_inpipereg << "         ExtB1_D1_in,                                                 \n";
 r8_inpipereg << "         ExtB1_D2_in,                                                 \n";
 r8_inpipereg << "         ExtB1_D3_in,                                                 \n"; 
 r8_inpipereg << "         ExtB1_D4_in,                                                 \n"; 
 r8_inpipereg << "         ExtB1_D5_in,                                                 \n"; 
 r8_inpipereg << "         ExtB1_D6_in,                                                 \n"; 
 r8_inpipereg << "         ExtB1_D7_in,                                                 \n"; 
 r8_inpipereg << "         ExtValid_out,                                                \n";
 r8_inpipereg << "         ExtB0_D0_out,                                                \n";
 r8_inpipereg << "         ExtB0_D1_out,                                                \n";
 r8_inpipereg << "         ExtB0_D2_out,                                                \n";
 r8_inpipereg << "         ExtB0_D3_out,                                                \n";
 r8_inpipereg << "         ExtB0_D4_out,                                                \n";
 r8_inpipereg << "         ExtB0_D5_out,                                                \n";
 r8_inpipereg << "         ExtB0_D6_out,                                                \n";
 r8_inpipereg << "         ExtB0_D7_out,                                                \n";
 r8_inpipereg << "         ExtB1_D0_out,                                                \n";
 r8_inpipereg << "         ExtB1_D1_out,                                                \n";
 r8_inpipereg << "         ExtB1_D2_out,                                                \n";
 r8_inpipereg << "         ExtB1_D3_out,                                                \n";
 r8_inpipereg << "         ExtB1_D4_out,                                                \n";
 r8_inpipereg << "         ExtB1_D5_out,                                                \n";
 r8_inpipereg << "         ExtB1_D6_out,                                                \n";
 r8_inpipereg << "         ExtB1_D7_out,                                                \n";
 r8_inpipereg << "         rst_n,                                                       \n";
 r8_inpipereg << "         clk                                                          \n";
 r8_inpipereg << " );                                                                   \n";
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "     parameter CP_WIDTH = "<< CP_width <<";                           \n";
 r8_inpipereg << "     parameter CP_ZERO  = "<< CP_width <<"'d0;\n";
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "     output                ExtValid_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D0_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D1_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D2_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D3_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D4_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D5_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D6_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB0_D7_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D0_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D1_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D2_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D3_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D4_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D5_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D6_out;                              \n";
 r8_inpipereg << "     output [CP_WIDTH-1:0] ExtB1_D7_out;                              \n";
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "     input                ExtValid_in;                                \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D0_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D1_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D2_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D3_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D4_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D5_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D6_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB0_D7_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D0_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D1_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D2_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D3_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D4_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D5_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D6_in;                               \n";
 r8_inpipereg << "     input  [CP_WIDTH-1:0] ExtB1_D7_in;                               \n";
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "     input                rst_n;                                      \n";
 r8_inpipereg << "     input                clk;                                        \n";
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "     reg               ExtValid_reg0;                                 \n";
 r8_inpipereg << "     reg               ExtValid_reg1;                                 \n";
 r8_inpipereg << "     reg               ExtValid_reg2;                                 \n";
 r8_inpipereg << "     reg               ExtValid_out;                                  \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D0_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D0_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D1_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D1_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D2_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D2_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D3_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D3_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D4_d;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D4_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D5_d;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D5_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D6_d;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D6_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D7_d;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB0_D7_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D0_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D0_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D1_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D1_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D2_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D2_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D3_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D3_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D4_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D4_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D5_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D5_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D6_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D6_out;                                 \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D7_d;                                   \n";
 r8_inpipereg << "     reg [CP_WIDTH-1:0] ExtB1_D7_out;                                 \n"; 
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "                                                                      \n";
 r8_inpipereg << "     always@(posedge clk or negedge rst_n)begin                       \n";
 r8_inpipereg << "         if(~rst_n)begin                                              \n";
 r8_inpipereg << "             ExtValid_reg0    <= 1'b0    ;                            \n";
 r8_inpipereg << "             ExtValid_reg1    <= 1'b0    ;                            \n";
 r8_inpipereg << "             ExtValid_reg2    <= 1'b0    ;                            \n";
 r8_inpipereg << "             ExtValid_out     <= 1'b0    ;                            \n";
 r8_inpipereg << "             //                                                       \n";
 r8_inpipereg << "             ExtB0_D0_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D0_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D1_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D1_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D2_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D2_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D3_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D3_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D4_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D4_out      <= CP_ZERO  ;                           \n"; 
 r8_inpipereg << "             ExtB0_D5_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D5_out      <= CP_ZERO  ;                           \n"; 
 r8_inpipereg << "             ExtB0_D6_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D6_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D7_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB0_D7_out      <= CP_ZERO  ;                           \n";  
 r8_inpipereg << "             ExtB1_D0_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D0_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D1_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D1_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D2_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D2_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D3_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D3_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D4_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D4_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D5_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D5_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D6_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D6_out      <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D7_d        <= CP_ZERO  ;                           \n";
 r8_inpipereg << "             ExtB1_D7_out      <= CP_ZERO  ;                           \n"; 
 r8_inpipereg << "             //                                                       \n";
 r8_inpipereg << "         end                                                          \n";
 r8_inpipereg << "         else begin                                                   \n";
 r8_inpipereg << "             ExtValid_reg0     <= ExtValid_in     ;                   \n";
 r8_inpipereg << "             ExtValid_reg1     <= ExtValid_reg0   ;                   \n";
 r8_inpipereg << "             ExtValid_reg2     <= ExtValid_reg1   ;                   \n";
 r8_inpipereg << "             ExtValid_out      <= ExtValid_reg2   ;                   \n";
 r8_inpipereg << "             //                                                       \n";
 r8_inpipereg << "             ExtB0_D0_d        <= ExtB0_D0_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D0_out      <= ExtB0_D0_d    ;                     \n";
 r8_inpipereg << "             ExtB0_D1_d        <= ExtB0_D1_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D1_out      <= ExtB0_D1_d    ;                     \n";
 r8_inpipereg << "             ExtB0_D2_d        <= ExtB0_D2_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D2_out      <= ExtB0_D2_d    ;                     \n";
 r8_inpipereg << "             ExtB0_D3_d        <= ExtB0_D3_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D3_out      <= ExtB0_D3_d    ;                     \n";
 r8_inpipereg << "             ExtB0_D4_d        <= ExtB0_D4_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D4_out      <= ExtB0_D4_d    ;                     \n";
 r8_inpipereg << "             ExtB0_D5_d        <= ExtB0_D5_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D5_out      <= ExtB0_D5_d    ;                     \n";
 r8_inpipereg << "             ExtB0_D6_d        <= ExtB0_D6_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D6_out      <= ExtB0_D6_d    ;                     \n"; 
 r8_inpipereg << "             ExtB0_D7_d        <= ExtB0_D7_in   ;                     \n";
 r8_inpipereg << "             ExtB0_D7_out      <= ExtB0_D7_d    ;                     \n"; 
 r8_inpipereg << "             ExtB1_D0_d        <= ExtB1_D0_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D0_out      <= ExtB1_D0_d    ;                     \n";
 r8_inpipereg << "             ExtB1_D1_d        <= ExtB1_D1_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D1_out      <= ExtB1_D1_d    ;                     \n";
 r8_inpipereg << "             ExtB1_D2_d        <= ExtB1_D2_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D2_out      <= ExtB1_D2_d    ;                     \n";
 r8_inpipereg << "             ExtB1_D3_d        <= ExtB1_D3_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D3_out      <= ExtB1_D3_d   ;                     \n";
 r8_inpipereg << "             ExtB1_D4_d        <= ExtB1_D4_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D4_out      <= ExtB1_D4_d   ;                     \n";
 r8_inpipereg << "             ExtB1_D5_d        <= ExtB1_D5_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D5_out      <= ExtB1_D5_d   ;                     \n";
 r8_inpipereg << "             ExtB1_D6_d        <= ExtB1_D6_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D6_out      <= ExtB1_D6_d   ;                     \n";
 r8_inpipereg << "             ExtB1_D7_d        <= ExtB1_D7_in   ;                     \n";
 r8_inpipereg << "             ExtB1_D7_out      <= ExtB1_D7_d   ;                     \n"; 
 r8_inpipereg << "             //                                                       \n";
 r8_inpipereg << "         end                                                          \n";
 r8_inpipereg << "     end                                                              \n";
 r8_inpipereg << " endmodule                                                            \n";
    
     r8_inpipereg.close();
}
void CenCtrl::R8_BU_outpipe(std::string string_in){
     std::ofstream r8_bu_outpipe;
     std::string        string_buf = "/R8_BU_outpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_bu_outpipe.open(ss.str());    	
r8_bu_outpipe << "//=============================================\n";
r8_bu_outpipe << "//Writer:Shi-Yong Wu                           \n";
r8_bu_outpipe << "//                                             \n";
r8_bu_outpipe << "//Note:R8 data output pipe                     \n";
r8_bu_outpipe << "//=============================================\n";
r8_bu_outpipe << "module R8_BU_outpipe(                             \n";
r8_bu_outpipe << "  CRUD0_o,                                     \n";
r8_bu_outpipe << "  CRUD1_o,                                     \n";
r8_bu_outpipe << "  CRUD2_o,                                     \n";
r8_bu_outpipe << "  CRUD3_o,                                     \n";
r8_bu_outpipe << "  CRUD4_o,                                     \n";
r8_bu_outpipe << "  CRUD5_o,                                     \n";
r8_bu_outpipe << "  CRUD6_o,                                     \n";
r8_bu_outpipe << "  CRUD7_o,                                     \n";
r8_bu_outpipe << "  BR0_o,                                       \n";
r8_bu_outpipe << "  BR1_o,                                       \n";
r8_bu_outpipe << "  BR2_o,                                       \n";
r8_bu_outpipe << "  BR3_o,                                       \n";
r8_bu_outpipe << "  BR4_o,                                       \n";
r8_bu_outpipe << "  BR5_o,                                       \n";
r8_bu_outpipe << "  BR6_o,                                       \n";
r8_bu_outpipe << "  BR7_o,                                       \n";
r8_bu_outpipe << "  CRUD0_i,                                     \n";
r8_bu_outpipe << "  CRUD1_i,                                     \n";
r8_bu_outpipe << "  CRUD2_i,                                     \n";
r8_bu_outpipe << "  CRUD3_i,                                     \n";
r8_bu_outpipe << "  CRUD4_i,                                     \n";
r8_bu_outpipe << "  CRUD5_i,                                     \n";
r8_bu_outpipe << "  CRUD6_i,                                     \n";
r8_bu_outpipe << "  CRUD7_i,                                     \n";
r8_bu_outpipe << "  rst_n,                                       \n";
r8_bu_outpipe << "  clk                                          \n";
r8_bu_outpipe << ");                                             \n";
r8_bu_outpipe << "                                               \n";
r8_bu_outpipe << "  parameter P_WIDTH    = " << "64;\n";
r8_bu_outpipe << "  parameter P_ZERO     = " << "64'd0;\n";
r8_bu_outpipe << "  parameter BRD_WIDTH  = " << (64-(2*CP_width)) <<";                      \n";
r8_bu_outpipe << "  parameter BRD_ZERO   = " << (64-(2*CP_width)) <<"'d0;                   \n";
r8_bu_outpipe << "                                               \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD0_o;                \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD1_o;                \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD2_o;                \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD3_o;                \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD4_o;                \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD5_o;                \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD6_o;                \n";
r8_bu_outpipe << "  output [P_WIDTH-1:0] CRUD7_o;                \n";
r8_bu_outpipe << "  //to module BR Input                         \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR0_o;                \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR1_o;                \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR2_o;                \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR3_o;                \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR4_o;                \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR5_o;                \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR6_o;                \n";
r8_bu_outpipe << "  output [BRD_WIDTH-1:0] BR7_o;                \n";
r8_bu_outpipe << "                                               \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD0_i;                \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD1_i;                \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD2_i;                \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD3_i;                \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD4_i;                \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD5_i;                \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD6_i;                \n";
r8_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD7_i;                \n";
r8_bu_outpipe << "  input  				rst_n;                   \n";
r8_bu_outpipe << "  input 				clk;                     \n";
r8_bu_outpipe << "                                               \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD0_o;                    \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD1_o;                    \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD2_o;                    \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD3_o;                    \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD4_o;                    \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD5_o;                    \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD6_o;                    \n";
r8_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD7_o;                    \n";
r8_bu_outpipe << "  //to module BR Input                         \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR0_o;                   \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR1_o;                   \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR2_o;                   \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR3_o;                   \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR4_o;                   \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR5_o;                   \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR6_o;                   \n";
r8_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR7_o;                   \n";
r8_bu_outpipe << "                                               \n";
r8_bu_outpipe << "  always@(posedge clk,negedge rst_n)begin      \n";
r8_bu_outpipe << "		if(~rst_n)begin                              \n";
r8_bu_outpipe << "		    CRUD0_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    CRUD1_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    CRUD2_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    CRUD3_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    CRUD4_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    CRUD5_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    CRUD6_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    CRUD7_o   <=  P_ZERO;                 \n";
r8_bu_outpipe << "		    BR0_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		    BR1_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		    BR2_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		    BR3_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		    BR4_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		    BR5_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		    BR6_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		    BR7_o     <=  BRD_ZERO;                  \n";
r8_bu_outpipe << "		end                                           \n";
r8_bu_outpipe << "		else begin                                    \n";
r8_bu_outpipe << "  	   CRUD0_o   <=  CRUD0_i;                 \n";
r8_bu_outpipe << "  	   CRUD1_o   <=  CRUD1_i;                 \n";
r8_bu_outpipe << "  	   CRUD2_o   <=  CRUD2_i;                 \n";
r8_bu_outpipe << "  	   CRUD3_o   <=  CRUD3_i;                 \n";
r8_bu_outpipe << "  	   CRUD4_o   <=  CRUD4_i;                 \n";
r8_bu_outpipe << "  	   CRUD5_o   <=  CRUD5_i;                 \n";
r8_bu_outpipe << "  	   CRUD6_o   <=  CRUD6_i;                 \n";
r8_bu_outpipe << "  	   CRUD7_o   <=  CRUD7_i;                 \n";
r8_bu_outpipe << "  	   BR0_o     <=  CRUD0_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "  	   BR1_o     <=  CRUD1_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "  	   BR2_o     <=  CRUD2_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "  	   BR3_o     <=  CRUD3_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "  	   BR4_o     <=  CRUD4_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "  	   BR5_o     <=  CRUD5_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "  	   BR6_o     <=  CRUD6_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "  	   BR7_o     <=  CRUD7_o["<< 63 - 2 *CP_width<<":0];                 \n";
r8_bu_outpipe << "		end                                       \n";
r8_bu_outpipe << "  end                                          \n";
r8_bu_outpipe << "                                               \n";
r8_bu_outpipe << "endmodule                                      \n";	 
	 r8_bu_outpipe.close();
}
void CenCtrl::CenCtrl_r8(std::string string_in){
     std::ofstream cenctrl_r8;
     std::string        string_buf = "/CenCtrl.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     cenctrl_r8.open(ss.str());
 cenctrl_r8 << " //==================================================                                                             \n";
 cenctrl_r8 << " //                                                                                         \n";
 cenctrl_r8 << " //Date       : 2018/8/1                                                                                          \n";
 cenctrl_r8 << " //Note       : Central controller                                                                                \n";
 cenctrl_r8 << " //==================================================                                                             \n";
 cenctrl_r8 << " `timescale 1 ns/1 ps                                                                                             \n";
 cenctrl_r8 << " module CenCtrl(MulValid_out,                                                                                     \n";
 cenctrl_r8 << " 			     cen_out,                                                                                         \n";
 cenctrl_r8 << " 			     wen0_out,                                                                                        \n";
 cenctrl_r8 << " 			     wen1_out,                                                                                        \n";
 cenctrl_r8 << " 			     ema_out,                                                                                         \n";
 cenctrl_r8 << " 			     SD_sel_out,                                                                                      \n";
 cenctrl_r8 << " 			     ExtMA_out,                                                                                       \n";
 cenctrl_r8 << " 			     AGU_en_out,                                                                                      \n";
 cenctrl_r8 << " 			     RomCen_out,                                                                                      \n";
 cenctrl_r8 << " 			     mode_sel_out,                                                                                    \n";
 cenctrl_r8 << " 			     rc_sel_out,                                                                                      \n";
 cenctrl_r8 << " 			     m2_sel_out,                                                                                      \n";
 cenctrl_r8 << " 			     wrfd_en_out, //2018/08/01                                                                        \n";
 cenctrl_r8 << " 			     data_cnt_in,                                                                                     \n";
 cenctrl_r8 << " 			     BND_in,                                                                                          \n";
 cenctrl_r8 << " 			     ExtValid_in,                                                                                     \n";
 cenctrl_r8 << "                rst_n,                                                                                            \n";
 cenctrl_r8 << "                clk                                                                                               \n";
 cenctrl_r8 << "                ) ;                                                                                               \n";
 cenctrl_r8 << " 			   			                                                                                          \n";
 cenctrl_r8 << " parameter A_WIDTH  = " << addr_width << " ;                                                                      \n";
 cenctrl_r8 << " parameter DC_WIDTH = " << data_cnt_width << ";                                                                   \n";
 cenctrl_r8 << " parameter WC_WIDTH = 5 ; //24, 5-bit, 2018/08/01                                                                 \n";
 cenctrl_r8 << " parameter A_ZERO  =  " << addr_width << "'h0 ;                                                                   \n";
 cenctrl_r8 << " parameter WC_ZERO = 5'h0 ; //2018/08/01                                                                          \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " parameter S_WIDTH   = 4 ;                                                                                        \n";
 cenctrl_r8 << " //INITIAL                                                                                                        \n";
 cenctrl_r8 << " parameter INI              = 4'd0 ;                                                                              \n";
 cenctrl_r8 << " parameter LD_EXTD          = 4'd1 ;                                                                              \n";
 cenctrl_r8 << " parameter LD_EXTDF         = 4'd2 ;                                                                              \n";
 cenctrl_r8 << " parameter LD_STAGE1_ST     = 4'd3 ;                                                                              \n";
 cenctrl_r8 << " parameter ST_STAGE1        = 4'd4 ;                                                                              \n";
 cenctrl_r8 << " parameter WR_FIND          = 4'd5 ; //2018/08/01                                                                 \n";
 cenctrl_r8 << " parameter LD_STAGE2_ST     = 4'd6 ; //2018/08/01                                                                 \n";
 cenctrl_r8 << " parameter SET_IFFT         = 4'd7 ;                                                                              \n";
 cenctrl_r8 << " parameter LD_IFFTSTAGE1_ST = 4'd8 ;                                                                              \n";
 cenctrl_r8 << " parameter ST_IFFTSTAGE1    = 4'd9 ;                                                                              \n";
 cenctrl_r8 << " parameter WR_IFFTFIND      = 4'd10 ; //2018/08/01                                                                \n";
 cenctrl_r8 << " parameter LD_IFFTSTAGE2_ST = 4'd11 ; //2018/08/01                                                                \n";
 cenctrl_r8 << " parameter SET_RC           = 4'd12 ;                                                                             \n";
 cenctrl_r8 << " parameter SET_RCF          = 4'd13 ;                                                                             \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " //ExT Address value1 for LD_EXTD                                                                                 \n";
 cenctrl_r8 << " parameter EXTMA_V1 = " << addr_width << "'d" << (NO_LD -1) <<";                                                  \n";
 cenctrl_r8 << " //data counter value1 for ST_STAGE1 and ST_IFFTSTAGE1                                                            \n";
 cenctrl_r8 << " parameter DCNT_V1  = " << data_cnt_width << "'d" << FFT_dc[No_stage-1] << ";                                     \n";
 cenctrl_r8 << " //data counter value2 for SET_RC                                                                                 \n";
 cenctrl_r8 << " parameter DCNT_V2  = " << data_cnt_width << "'d" << ceil((double)m/radix) +4 << "; //delay 3 clock,waitting for output data       \n";
 cenctrl_r8 << " //data counter value3 for MulValid_out                                                                           \n";
 cenctrl_r8 << " parameter DCNT_V3  = " << data_cnt_width << "'d" << NO_D_Muldata << ";                                           \n";
 cenctrl_r8 << " //data counter value4 for ST_STAGE1 and ST_IFFTSTAGE1                                                            \n";
 for (unsigned long i = 0; i < (No_stage-1);i++){                                                                                 
    cenctrl_r8 << "parameter DCNT_V" << (i+4) << " = " << data_cnt_width <<"'d"<< FFT_dc[i] << ";                                 \n";
 }                                                                                                                                
 cenctrl_r8 << " //  24-2, WenCnt_reg for LD_STAGE1_ST and LD_IFFTSTAGE1_ST                                                       \n";
 cenctrl_r8 << " parameter WC_V1    = 5'd22 ;   //WC_V1 = 3 * r - 2                                                                                  \n";
 cenctrl_r8 << " //  24-1, Cnt1_reg and WenCnt_reg for WR_FIND, LD_STAGE2_ST, WR_IFFTFIND, and LD_IFFTSTAGE2_ST                   \n";
 cenctrl_r8 << " parameter WC_V2    = 5'd23 ;  //WC_V2  = 3 * r - 1                                                                                   \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " output               MulValid_out ;                                                                              \n";
 cenctrl_r8 << " output               cen_out ;                                                                                   \n";
 cenctrl_r8 << " output               wen0_out ;                                                                                  \n";
 cenctrl_r8 << " output               wen1_out ;                                                                                  \n";
 cenctrl_r8 << " output [2:0]         ema_out ;                                                                                   \n";
 cenctrl_r8 << " output               SD_sel_out ;                                                                                \n";
 cenctrl_r8 << " output [A_WIDTH-1:0] ExtMA_out ;                                                                                 \n";
 cenctrl_r8 << " output               AGU_en_out ;                                                                                \n";
 cenctrl_r8 << " output               RomCen_out ;                                                                                \n";
 cenctrl_r8 << " output               mode_sel_out ;                                                                              \n";
 cenctrl_r8 << " output               rc_sel_out ;                                                                                \n";
 cenctrl_r8 << " output               m2_sel_out ;                                                                                \n";
 cenctrl_r8 << " output               wrfd_en_out ; //2018/08/01                                                                  \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " input [DC_WIDTH-1:0] data_cnt_in ;                                                                               \n";
 cenctrl_r8 << " input                BND_in ;                                                                                    \n";
 cenctrl_r8 << " input                ExtValid_in ;                                                                               \n";
 cenctrl_r8 << " input                rst_n ;                                                                                     \n";
 cenctrl_r8 << " input                clk ;                                                                                       \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " reg   [S_WIDTH-1:0]  state ;                                                                                     \n";
 cenctrl_r8 << " reg   [S_WIDTH-1:0]  next_state ;                                                                                \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " reg   [A_WIDTH-1:0]  ExtMA_out ;                                                                                 \n";
 cenctrl_r8 << " reg   [WC_WIDTH-1:0] WenCnt_reg ;                                                                                \n";
 cenctrl_r8 << " reg                  m2_sel_out ;                                                                                \n";
 cenctrl_r8 << " reg   [WC_WIDTH-1:0] Cnt1_reg ; //2018/08/01                                                                     \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " wire  [A_WIDTH-1:0]  ExtMA_wire ;                                                                                \n";
 cenctrl_r8 << " wire  [WC_WIDTH-1:0] WenCnt_wire ;                                                                               \n";
 cenctrl_r8 << " wire                 m2_sel_wire ;                                                                               \n";
 cenctrl_r8 << " wire  [WC_WIDTH-1:0] Cnt1_wire ; //2018/08/01                                                                    \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	assign ema_out = 3'd0 ;                                                                                       \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	assign cen_out = (state == INI) ;                                                                             \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r8 << " 	assign wen0_out = ((state == INI)||(state == LD_EXTDF)||                                                      \n";
 cenctrl_r8 << "                        (state == LD_STAGE1_ST)||(state == LD_STAGE2_ST)||                                        \n";
 cenctrl_r8 << "                        (state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||                                        \n";
 cenctrl_r8 << "                        (state == LD_IFFTSTAGE2_ST)||(state == SET_RC)||(state == SET_RCF))? 1'b1 :               \n";
 cenctrl_r8 << " 	                  ((state == ST_STAGE1)||(state == ST_IFFTSTAGE1)||(state == WR_FIND)||                       \n";
 cenctrl_r8 << "                        (state == WR_IFFTFIND))? BND_in : 1'b0 ;                                                  \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r8 << " 	assign wen1_out = ((state == INI)||(state == LD_EXTDF)||                                                      \n";
 cenctrl_r8 << "                        (state == LD_STAGE1_ST)||(state == LD_STAGE2_ST)||                                        \n";
 cenctrl_r8 << "                        (state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||                                        \n";
 cenctrl_r8 << "                        (state == LD_IFFTSTAGE2_ST)||(state == SET_RC)||(state == SET_RCF))? 1'b1 :               \n";
 cenctrl_r8 << " 	                  ((state == ST_STAGE1)||(state == ST_IFFTSTAGE1)||(state == WR_FIND)||                       \n";
 cenctrl_r8 << "                        (state == WR_IFFTFIND))? (~BND_in) : 1'b0 ;                                               \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	assign SD_sel_out = (state == INI)||(state == LD_EXTD) ;                                                      \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	// Ext Memory Address out                                                                                     \n";
 cenctrl_r8 << " 	assign ExtMA_wire = ((state == LD_EXTD))? (ExtMA_out + 1'b1) : ExtMA_out ;                                    \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r8 << " 	assign AGU_en_out = (state == LD_EXTDF)||(state == LD_STAGE1_ST)||(state == ST_STAGE1)||                      \n";
 cenctrl_r8 << "                         (state == LD_STAGE2_ST)||(state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||              \n";
 cenctrl_r8 << "                         (state == ST_IFFTSTAGE1)||(state == LD_IFFTSTAGE2_ST)||(state == SET_RC) ;               \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	assign RomCen_out = (state == INI)||(state == LD_EXTD)||(state == SET_RC)||(state == SET_RCF) ;               \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	// Counter for computing 23 butterfly units in stage1, 2018/08/01                                             \n";
 cenctrl_r8 << " 	assign WenCnt_wire = ((state == LD_STAGE1_ST)||                                                               \n";
 cenctrl_r8 << "                           (state == LD_STAGE2_ST)||                                                              \n";
 cenctrl_r8 << "                           (state == LD_IFFTSTAGE1_ST)||                                                          \n";
 cenctrl_r8 << "                           (state == LD_IFFTSTAGE2_ST))? (WenCnt_reg + 1'b1) : WC_ZERO ;                          \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << " 	// mode_sel = 0 FFT, mode_sel = 1 IFFT; mode_sel = 0, RC, 2018/08/01                                          \n";
 cenctrl_r8 << " 	assign mode_sel_out = (state == SET_IFFT)||                                                                   \n";
 cenctrl_r8 << "                           (state == LD_IFFTSTAGE1_ST)||                                                          \n";
 cenctrl_r8 << "                           (state == ST_IFFTSTAGE1)||                                                             \n";
 cenctrl_r8 << "                           (state == WR_IFFTFIND)||                                                               \n";
 cenctrl_r8 << "                           (state == LD_IFFTSTAGE2_ST) ;                                                          \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	assign rc_sel_out = (state == SET_RC) ;                                                                       \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	assign m2_sel_wire = (state == SET_RC) ;                                                                      \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	assign MulValid_out = (((state == SET_RC)&&(data_cnt_in>=DCNT_V3))||(state == SET_RCF)) ? 1'b1 : 1'b0 ;       \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	// 2018/08/01                                                                                                 \n";
 cenctrl_r8 << " 	assign Cnt1_wire = ((state == WR_FIND)||(state == WR_IFFTFIND)) ? (Cnt1_reg + 1'b1) : WC_ZERO ;               \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	// for RDCsel counter, 2018/08/01                                                                             \n";
 cenctrl_r8 << " 	assign wrfd_en_out = (state == WR_FIND)||(state == WR_IFFTFIND) ? 1'b1 : 1'b0 ;                               \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	                                                                                                              \n";
 cenctrl_r8 << " 	//                                                                                                            \n";
 cenctrl_r8 << " 	always @(*) begin                                                                                             \n";
 cenctrl_r8 << " 		case(state)                                                                                               \n";
 cenctrl_r8 << " 			INI: begin                                                                                            \n";
 cenctrl_r8 << " 					if(ExtValid_in) next_state = LD_EXTD ;                                                        \n";
 cenctrl_r8 << " 					else next_state = INI ;                                                                       \n";
 cenctrl_r8 << " 				 end                                                                                              \n";
 cenctrl_r8 << " 			// LOAD  Extdata to SRAM	                                                                          \n";
 cenctrl_r8 << " 			LD_EXTD: begin                                                                                        \n";
 cenctrl_r8 << " 						if(ExtMA_out < EXTMA_V1) next_state = LD_EXTD ;                                           \n";
 cenctrl_r8 << " 						else next_state = LD_EXTDF ;                                                              \n";
 cenctrl_r8 << " 					 end                                                                                          \n";
 cenctrl_r8 << " 			// LOAD  Final Extdata to SRAM	and  Compute dataCount                                                \n";
 cenctrl_r8 << " 			LD_EXTDF: begin                                                                                       \n";
 cenctrl_r8 << " 						next_state = LD_STAGE1_ST ;                                                               \n";
 cenctrl_r8 << " 					  end                                                                                         \n";
 cenctrl_r8 << " 			// Compute FFT                                                                                        \n";
 cenctrl_r8 << " 			LD_STAGE1_ST: begin                                                                                   \n";
 cenctrl_r8 << " 							if(WenCnt_reg < WC_V1) next_state = LD_STAGE1_ST ;                                    \n";
 cenctrl_r8 << " 						    else next_state = ST_STAGE1 ;                                                         \n";
 cenctrl_r8 << " 						  end                                                                                     \n";
 cenctrl_r8 << " 			ST_STAGE1: begin                                                                                      \n";
 cenctrl_r8 << " 						if(                                                                                       \n";
 for( unsigned long i = 0;i < (No_stage-1);i++){                                                                                   
    cenctrl_r8 << " (data_cnt_in==DCNT_V" << (i+4) << ")";                                                                        
    if(i!=(No_stage-2)) cenctrl_r8 << "||";                                                                                       
 }                                                                                                                               
 cenctrl_r8 << "                           ) next_state = WR_FIND ; //modify                                                      \n";
 cenctrl_r8 << "						else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ;                                   \n";
 cenctrl_r8 << "						else next_state = SET_IFFT ;                                                              \n";
 cenctrl_r8 << "					   end                                                                                        \n";
 cenctrl_r8 << "			// Write 12 FFT data to SRAM in stage1                                                                \n";
 cenctrl_r8 << "		    WR_FIND: begin                                                                                        \n";
 cenctrl_r8 << "						if(Cnt1_reg < WC_V2) next_state = WR_FIND ; //modify                                      \n";
 cenctrl_r8 << "						else next_state = LD_STAGE2_ST ;                                                          \n";
 cenctrl_r8 << "					 end                                                                                          \n";
 cenctrl_r8 << "			// Stage2 and other Stages, just Read FFT data, Counter for computing 24 butterfly units              \n";
 cenctrl_r8 << "			LD_STAGE2_ST: begin                                                                                   \n";
 cenctrl_r8 << "							if(WenCnt_reg < WC_V2) next_state = LD_STAGE2_ST ;                                    \n";
 cenctrl_r8 << "						    else next_state = ST_STAGE1 ;                                                         \n";
 cenctrl_r8 << "					      end		                                                                              \n";
 cenctrl_r8 << "			// Compute dataCount		                                                                          \n";
 cenctrl_r8 << "			SET_IFFT: begin                                                                                       \n";
 cenctrl_r8 << "							next_state = LD_IFFTSTAGE1_ST ;                                                       \n";
 cenctrl_r8 << "					  end                                                                                         \n";
 cenctrl_r8 << "			// Compute IFFT		                                                                                  \n";
 cenctrl_r8 << "			LD_IFFTSTAGE1_ST: begin                                                                               \n";
 cenctrl_r8 << "								if(WenCnt_reg < WC_V1) next_state = LD_IFFTSTAGE1_ST ;                            \n";
 cenctrl_r8 << "								else next_state = ST_IFFTSTAGE1 ;                                                 \n";
 cenctrl_r8 << "							  end                                                                                 \n";
 cenctrl_r8 << "			ST_IFFTSTAGE1: begin                                                                                  \n";
 cenctrl_r8 << "							if(                                                                                   \n";
 for( unsigned  long i = 0;i < (No_stage-1);i++){                                                                                  
    cenctrl_r8 << " (data_cnt_in==DCNT_V" << (i+4) << ")";                                                                        
    if(i!=(No_stage-2)) cenctrl_r8 << "||";                                                                                       
 }                                                                                                                                
 cenctrl_r8 << "                               ) next_state = WR_IFFTFIND ; //modify                                              \n";
 cenctrl_r8 << "							else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;                           \n";
 cenctrl_r8 << "							else next_state = SET_RC ;                                                            \n";
 cenctrl_r8 << "						   end                                                                                    \n";
 cenctrl_r8 << "			// Write 12 IFFT data to SRAM in stage1                                                               \n";
 cenctrl_r8 << "			WR_IFFTFIND: begin                                                                                    \n";
 cenctrl_r8 << "							if(Cnt1_reg < WC_V2) next_state = WR_IFFTFIND ; //modify                              \n";
 cenctrl_r8 << "							else next_state = LD_IFFTSTAGE2_ST ;                                                  \n";
 cenctrl_r8 << "						 end                                                                                      \n";
 cenctrl_r8 << "			// Stage2 and other Stages, just Read IFFT data, Counter for computing 24 butterfly units             \n";
 cenctrl_r8 << "			LD_IFFTSTAGE2_ST: begin                                                                               \n";
 cenctrl_r8 << "								if(WenCnt_reg < WC_V2) next_state = LD_IFFTSTAGE2_ST ;                            \n";
 cenctrl_r8 << "								else next_state = ST_IFFTSTAGE1 ;                                                 \n";
 cenctrl_r8 << "							  end                                                                                 \n";
 cenctrl_r8 << "			// Resolve Carry                                                                                      \n";
 cenctrl_r8 << "			SET_RC: begin                                                                                         \n";
 cenctrl_r8 << "						if(data_cnt_in < DCNT_V2) next_state = SET_RC ;                                           \n";
 cenctrl_r8 << "						else next_state = SET_RCF ;                                                               \n";
 cenctrl_r8 << "					end                                                                                           \n";
 cenctrl_r8 << "			//Final RC data                                                                                       \n";
 cenctrl_r8 << "			SET_RCF: begin                                                                                        \n";
 cenctrl_r8 << "						next_state = INI ;                                                                        \n";
 cenctrl_r8 << "					 end                                                                                          \n";
 cenctrl_r8 << "					                                                                                              \n";
 cenctrl_r8 << "		//                                                                                                        \n";
 cenctrl_r8 << "		default: next_state = INI ;  		                                                                      \n";
 cenctrl_r8 << "		endcase                                                                                                   \n";
 cenctrl_r8 << "	end                                                                                                           \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << "	//                                                                                                            \n";
 cenctrl_r8 << "	always @(posedge clk or negedge rst_n) begin                                                                  \n";
 cenctrl_r8 << "		if(~rst_n) begin                                                                                          \n";
 cenctrl_r8 << "			state <= INI ;                                                                                        \n";
 cenctrl_r8 << "			ExtMA_out <= A_ZERO ;                                                                                 \n";
 cenctrl_r8 << "			WenCnt_reg <= WC_ZERO ;                                                                               \n";
 cenctrl_r8 << "			m2_sel_out <= 1'b0 ;                                                                                  \n";
 cenctrl_r8 << "			Cnt1_reg <= WC_ZERO ; // 2018/08/01                                                                   \n";
 cenctrl_r8 << "		end                                                                                                       \n";
 cenctrl_r8 << "		else begin                                                                                                \n";
 cenctrl_r8 << "			state <= next_state ;                                                                                 \n";
 cenctrl_r8 << "    	    ExtMA_out <= ExtMA_wire ;                                                                             \n";
 cenctrl_r8 << "			WenCnt_reg <= WenCnt_wire ;                                                                           \n";
 cenctrl_r8 << "			m2_sel_out <= m2_sel_wire ;                                                                           \n";
 cenctrl_r8 << "			Cnt1_reg <= Cnt1_wire ; // 2018/08/01                                                                 \n";
 cenctrl_r8 << "		end                                                                                                       \n";
 cenctrl_r8 << "	end                                                                                                           \n";
 cenctrl_r8 << "                                                                                                                  \n";
 cenctrl_r8 << "								                                                                                  \n";
 cenctrl_r8 << "endmodule                                                                                                         \n";     
     cenctrl_r8.close();     
}
//need to modify
void CenCtrl::order_ROMReg_r8(std::string string_in){
     std::ofstream orderROM_pipe;
     std::string        string_buf = "/R8_orderROM_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     orderROM_pipe.open(ss.str());  	
orderROM_pipe << "//==================================================                               \n";
orderROM_pipe << "//Writer     : shiyong wu                                                          \n";
orderROM_pipe << "//Date       : 2020/6/18                                                           \n";
orderROM_pipe << "//Note       : ROM register file                                                   \n";
orderROM_pipe << "//==================================================                               \n";
orderROM_pipe << "`timescale 1 ns/1 ps                                                               \n";
orderROM_pipe << "module R8_orderROM_Pipe(                                                           \n";
orderROM_pipe << "                      reorderROM0_o,                                               \n";
orderROM_pipe << "                      reorderROM1_o,                                               \n";
orderROM_pipe << "                      reorderROM2_o,                                               \n";
orderROM_pipe << "                      reorderROM3_o,                                               \n";
orderROM_pipe << "                      ireorderROM0_o,                                              \n";
orderROM_pipe << "                      ireorderROM1_o,                                              \n";
orderROM_pipe << "                      ireorderROM2_o,                                              \n";
if(8*CP_width >192)orderROM_pipe << "                      ireorderROM3_o,                                              \n";
orderROM_pipe << "						reorderROM0_i,                                               \n";
orderROM_pipe << "						reorderROM1_i,                                               \n";
orderROM_pipe << "						reorderROM2_i,                                               \n";
orderROM_pipe << "						reorderROM3_i,                                               \n";
orderROM_pipe << "						ireorderROM0_i,                                              \n";
orderROM_pipe << "						ireorderROM1_i,                                              \n";
orderROM_pipe << "						ireorderROM2_i,                                              \n";
if(8*CP_width >192)orderROM_pipe << "                      ireorderROM3_i,                                              \n";
orderROM_pipe << "						rst_n,                                                       \n";
orderROM_pipe << "						clk                                                          \n";
orderROM_pipe << "						) ;                                                          \n";
orderROM_pipe << "    parameter P_WIDTH   = 64;                                                      \n";
orderROM_pipe << "    parameter HP_WIDTH   = 32;                                                      \n";
orderROM_pipe << "	  parameter P_ZERO    = 64'd0;                                                   \n";
orderROM_pipe << "	  parameter HP_ZERO    = 32'd0;                                                   \n";
if(8*CP_width > 192){
	orderROM_pipe << "    parameter IROM3_WIDTH  = 8;                                                      \n";
	orderROM_pipe << "    parameter IROM3_ZERO   = 8'd0;                                                   \n";
}
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "    output [P_WIDTH-1:0] reorderROM0_o;                                            \n";
orderROM_pipe << "    output [HP_WIDTH-1:0] reorderROM1_o;                                            \n";
orderROM_pipe << "    output [P_WIDTH-1:0] reorderROM2_o;                                            \n";
orderROM_pipe << "    output [HP_WIDTH-1:0] reorderROM3_o;                                            \n";
orderROM_pipe << "    output [P_WIDTH-1:0] ireorderROM0_o;                                           \n";
orderROM_pipe << "    output [P_WIDTH-1:0] ireorderROM1_o;                                           \n";
orderROM_pipe << "    output [P_WIDTH-1:0] ireorderROM2_o;                                           \n";
if(8*CP_width > 192){
	orderROM_pipe << "    output [IROM3_WIDTH-1:0] ireorderROM3_o;                                           \n";
}
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  reorderROM0_i;                                              \n";
orderROM_pipe << "	input [HP_WIDTH-1:0]  reorderROM1_i;                                              \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  reorderROM2_i;                                              \n";
orderROM_pipe << "	input [HP_WIDTH-1:0]  reorderROM3_i;                                              \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  ireorderROM0_i;                                             \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  ireorderROM1_i;                                             \n";
orderROM_pipe << "	input [P_WIDTH-1:0]  ireorderROM2_i;                                             \n";
if(8*CP_width > 192){
	orderROM_pipe << "    input [IROM3_WIDTH-1:0] ireorderROM3_i;                                           \n";
}

orderROM_pipe << "	input rst_n;                                                                     \n";
orderROM_pipe << "	input clk;                                                                       \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "	  reg [P_WIDTH-1:0] reorderROM0_o;                                               \n";
orderROM_pipe << "    reg [HP_WIDTH-1:0] reorderROM1_o;                                               \n";
orderROM_pipe << "    reg [P_WIDTH-1:0] reorderROM2_o;                                               \n";
orderROM_pipe << "    reg [HP_WIDTH-1:0] reorderROM3_o;                                               \n";
orderROM_pipe << "    reg [P_WIDTH-1:0] ireorderROM0_o;                                              \n";
orderROM_pipe << "    reg [P_WIDTH-1:0] ireorderROM1_o;                                              \n";
orderROM_pipe << "    reg [P_WIDTH-1:0] ireorderROM2_o;                                              \n";
if(8*CP_width > 192){
	orderROM_pipe << "    reg [IROM3_WIDTH-1:0] ireorderROM3_o;                                           \n";
}

orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "    always@(posedge clk,negedge rst_n)begin                                        \n";
orderROM_pipe << "		if(~rst_n)begin                                                              \n";
orderROM_pipe << "			reorderROM0_o  <= P_ZERO;                                                \n";
orderROM_pipe << "			reorderROM1_o  <= HP_ZERO;                                                \n";
orderROM_pipe << "			reorderROM2_o  <= P_ZERO;                                                \n";
orderROM_pipe << "			reorderROM3_o  <= HP_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM0_o <= P_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM1_o <= P_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM2_o <= P_ZERO;                                                \n";

if(8 * CP_width > 192)orderROM_pipe << "			ireorderROM3_o <= IROM3_ZERO;\n";

orderROM_pipe << "		end                                                                          \n";
orderROM_pipe << "		else begin                                                                   \n";
orderROM_pipe << "			reorderROM0_o  <= reorderROM0_i;                                         \n";
orderROM_pipe << "		    reorderROM1_o  <= reorderROM1_i;                                         \n";
orderROM_pipe << "		    reorderROM2_o  <= reorderROM2_i;                                         \n";
orderROM_pipe << "		    reorderROM3_o  <= reorderROM3_i;                                         \n";
orderROM_pipe << "		    ireorderROM0_o <= ireorderROM0_i;                                        \n";
orderROM_pipe << "		    ireorderROM1_o <= ireorderROM1_i;                                        \n";
orderROM_pipe << "		    ireorderROM2_o <= ireorderROM2_i;                                        \n";
if(8 * CP_width > 192)orderROM_pipe << "			ireorderROM3_o <= ireorderROM3_i;\n";
orderROM_pipe << "		end                                                                          \n";
orderROM_pipe << "	end                                                                              \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "endmodule                                                                          \n";
	 orderROM_pipe.close();
}
void CenCtrl::Ctrl_PipeReg1_r8(std::string string_in){
     std::ofstream ctrl_pipereg1_r8;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     ctrl_pipereg1_r8.open(ss.str());
 ctrl_pipereg1_r8 << " //==================================================                                     \n";
 ctrl_pipereg1_r8 << " //                                                                 \n";
 ctrl_pipereg1_r8 << " //Date       : 2018/8/1                                                                  \n";
 ctrl_pipereg1_r8 << " //Note       : Pipeline Register1 for Control signal                                     \n";
 ctrl_pipereg1_r8 << " //==================================================                                     \n";
 ctrl_pipereg1_r8 << " `timescale 1 ns/1 ps                                                                     \n";
 ctrl_pipereg1_r8 << " module Ctrl_PipeReg1(mode_sel_Dout,                                                      \n";
 ctrl_pipereg1_r8 << " 				        Mul_sel_Dout,                                                       \n";
 ctrl_pipereg1_r8 << " 				        RDC_sel_Dout,                                                       \n";
 ctrl_pipereg1_r8 << " 				        FFT_FSmode_sel_Dout,                                                \n";
 ctrl_pipereg1_r8 << "                      mode_sel_in,                                                        \n";
 ctrl_pipereg1_r8 << " 			            Mul_sel_in,                                                         \n";
 ctrl_pipereg1_r8 << " 			            RDC_sel_in,                                                         \n";
 ctrl_pipereg1_r8 << " 			            FFT_FSmode_sel_in,                                                  \n";
 ctrl_pipereg1_r8 << "                      rst_n,                                                              \n";
 ctrl_pipereg1_r8 << "                      clk                                                                 \n";
 ctrl_pipereg1_r8 << "                      ) ;                                                                 \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " parameter RDC_WIDTH   = 3 ;                                                              \n";
 ctrl_pipereg1_r8 << " parameter RDC_ZERO    = 3'h0 ;                                                           \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " output                  mode_sel_Dout ;                                                  \n";
 ctrl_pipereg1_r8 << " output [1:0]            Mul_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r8 << " output [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r8 << " output [RDC_WIDTH-1:0]  FFT_FSmode_sel_Dout ;                                            \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " input                   mode_sel_in ;                                                    \n";
 ctrl_pipereg1_r8 << " input  [1:0]            Mul_sel_in ;                                                     \n";
 ctrl_pipereg1_r8 << " input  [RDC_WIDTH-1:0]  RDC_sel_in ;                                                     \n";
 ctrl_pipereg1_r8 << " input  [RDC_WIDTH-1:0]  FFT_FSmode_sel_in ;                                              \n";
 ctrl_pipereg1_r8 << " input                   rst_n ;                                                          \n";
 ctrl_pipereg1_r8 << " input                   clk ;                                                            \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_D0reg ;                                                    \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_D1reg ;                                                    \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_D2reg ;                                                    \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_Dout ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D3reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D4reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D5reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D0reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D1reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D2reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D3reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D4reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D5reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_Dout ;                                               \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " 	//mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles       \n";
 ctrl_pipereg1_r8 << " 	always @(posedge clk or negedge rst_n) begin                                         \n";
 ctrl_pipereg1_r8 << " 		if(~rst_n) begin                                                                 \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D0reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D1reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D2reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r8 << " 			mode_sel_Dout <= 1'b0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D0reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D1reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D2reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_Dout <= 2'd0 ;                                                       \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D0reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D1reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D2reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D3reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D4reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D5reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_Dout <= RDC_ZERO ;                                                   \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D0reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D1reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D2reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D3reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D4reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D5reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_Dout <= RDC_ZERO ;                                            \n";
 ctrl_pipereg1_r8 << " 		end                                                                              \n";
 ctrl_pipereg1_r8 << " 		else begin                                                                       \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D0reg <= mode_sel_in ;                                              \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D1reg <= mode_sel_D0reg ;                                           \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D2reg <= mode_sel_D1reg ;                                           \n";
 ctrl_pipereg1_r8 << " 			mode_sel_Dout <= mode_sel_D2reg ;                                            \n";
 ctrl_pipereg1_r8 << " 			//                                                                           \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D0reg <= Mul_sel_in ;                                                \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_Dout <= Mul_sel_D2reg ;                                              \n";
 ctrl_pipereg1_r8 << " 			//                                                                           \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D0reg <= RDC_sel_in ;                                                \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_Dout <= RDC_sel_D5reg ;                                              \n";
 ctrl_pipereg1_r8 << " 			//                                                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D0reg <= FFT_FSmode_sel_in ;                                  \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D1reg <= FFT_FSmode_sel_D0reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D2reg <= FFT_FSmode_sel_D1reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D3reg <= FFT_FSmode_sel_D2reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D4reg <= FFT_FSmode_sel_D3reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D5reg <= FFT_FSmode_sel_D4reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_Dout <= FFT_FSmode_sel_D5reg ;                                \n";
 ctrl_pipereg1_r8 << " 		end                                                                              \n";
 ctrl_pipereg1_r8 << " 	end                                                                                  \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " endmodule                                                                                \n";     
     ctrl_pipereg1_r8.close();         
}
void CenCtrl::R8_ROMPipeReg1(std::string string_in){
     std::ofstream r8_rompipereg1;
     std::string        string_buf = "/R8_ROMPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_rompipereg1.open(ss.str());
 r8_rompipereg1 << " //==================================================                          \n";
 r8_rompipereg1 << " //                                                      \n";
 r8_rompipereg1 << " //Date       : 2018/8/1                                                       \n";
 r8_rompipereg1 << " //Note       : Pipeline Register1 for ROM output delay 4-cycle                \n";
 r8_rompipereg1 << " //==================================================                          \n";
 r8_rompipereg1 << " `timescale 1 ns/1 ps                                                          \n";
 r8_rompipereg1 << " module R8_ROMPipeReg1(ROMD0_Dout,                                             \n";
 r8_rompipereg1 << " 				      ROMD1_Dout,				                               \n";
 r8_rompipereg1 << " 				      ROMD2_Dout,				                               \n";
 r8_rompipereg1 << " 				      ROMD3_Dout,				                               \n";
 r8_rompipereg1 << " 					  IFFTROMD0_Dout,                                          \n";
 r8_rompipereg1 << " 				      IFFTROMD1_Dout,				                           \n";
 r8_rompipereg1 << " 				      IFFTROMD2_Dout,				                           \n";
 r8_rompipereg1 << " 				      IFFTROMD3_Dout,				                           \n";
 r8_rompipereg1 << " 			          ROMD0_in,                                                \n";
 r8_rompipereg1 << " 					  ROMD1_in,					                               \n";
 r8_rompipereg1 << " 					  ROMD2_in,					                               \n";
 r8_rompipereg1 << " 					  ROMD3_in,					                               \n";
 r8_rompipereg1 << " 					  IFFTROMD0_in,                                            \n";
 r8_rompipereg1 << " 					  IFFTROMD1_in,					                           \n";
 r8_rompipereg1 << " 					  IFFTROMD2_in,					                           \n";
 r8_rompipereg1 << " 					  IFFTROMD3_in,					                           \n";
 r8_rompipereg1 << "                       rst_n,                                                  \n";
 r8_rompipereg1 << "                       clk                                                     \n";
 r8_rompipereg1 << "                       ) ;                                                     \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " parameter P_WIDTH   = 64 ;					                                   \n";
 r8_rompipereg1 << " parameter SD_WIDTH  = 128 ;                                                   \n";
 r8_rompipereg1 << " parameter P_ZERO    = 64'h0 ;                                                 \n";
 r8_rompipereg1 << " parameter SD_ZERO   = 128'h0 ;                                                \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " output [P_WIDTH-1:0]    ROMD0_Dout ;                                          \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD1_Dout ;                                          \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD2_Dout ;                                          \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD3_Dout ;                                          \n";
 r8_rompipereg1 << " output [P_WIDTH-1:0]    IFFTROMD0_Dout ;                                      \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                                      \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                                      \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                                      \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " input  [P_WIDTH-1:0]    ROMD0_in ;                                            \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD1_in ;                                            \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD2_in ;                                            \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD3_in ;                                            \n";
 r8_rompipereg1 << " input  [P_WIDTH-1:0]    IFFTROMD0_in ;                                        \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD1_in ;                                        \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD2_in ;                                        \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD3_in ;                                        \n";
 r8_rompipereg1 << " input                   rst_n ;                                               \n";
 r8_rompipereg1 << " input                   clk ;                                                 \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_Dout ;                                             \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_Dout ;                                             \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_Dout ;                                             \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_Dout ;                                             \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_Dout ;                                         \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                                         \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                                         \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                                         \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D2reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D2reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D2reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D2reg ;                                            \n"; 
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D2reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D2reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D2reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D2reg ;                                        \n"; 
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " 	//delay 4 cycles                                                           \n";
 r8_rompipereg1 << " 	always @(posedge clk or negedge rst_n) begin                               \n";
 r8_rompipereg1 << " 		if(~rst_n) begin                                                       \n";
 r8_rompipereg1 << " 			ROMD0_D0reg <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			ROMD0_D1reg <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			ROMD0_D2reg <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			ROMD0_Dout  <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD1_D0reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD1_D1reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD1_D2reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD1_Dout  <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			ROMD2_D0reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD2_D1reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD2_D2reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD2_Dout  <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			ROMD3_D0reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD3_D1reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD3_D2reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD3_Dout  <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			IFFTROMD0_D0reg <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			IFFTROMD0_D1reg <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			IFFTROMD0_D2reg <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			IFFTROMD0_Dout  <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD1_D0reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD1_D1reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD1_D2reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD1_Dout  <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD2_D0reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD2_D1reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD2_D2reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD2_Dout  <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD3_D0reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD3_D1reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD3_D2reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD3_Dout  <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 		end                                                                    \n";
 r8_rompipereg1 << " 		else begin                                                             \n";
 r8_rompipereg1 << " 			ROMD0_D0reg <= ROMD0_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD0_D1reg <= ROMD0_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD0_D2reg <= ROMD0_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD0_Dout  <= ROMD0_D2reg ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD1_D0reg <= ROMD1_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD1_D1reg <= ROMD1_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD1_D2reg <= ROMD1_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD1_Dout  <= ROMD1_D2reg ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD2_D0reg <= ROMD2_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD2_D1reg <= ROMD2_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD2_D2reg <= ROMD2_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD2_Dout  <= ROMD2_D2reg ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD3_D0reg <= ROMD3_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD3_D1reg <= ROMD3_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD3_D2reg <= ROMD3_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD3_Dout  <= ROMD3_D2reg ;                                       \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			IFFTROMD0_D0reg <= IFFTROMD0_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD0_D1reg <= IFFTROMD0_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD0_D2reg <= IFFTROMD0_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD0_Dout  <= IFFTROMD0_D2reg ;                               \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD1_D0reg <= IFFTROMD1_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD1_D1reg <= IFFTROMD1_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD1_D2reg <= IFFTROMD1_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD1_Dout  <= IFFTROMD1_D2reg ;                               \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD2_D0reg <= IFFTROMD2_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD2_D1reg <= IFFTROMD2_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD2_D2reg <= IFFTROMD2_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD2_Dout  <= IFFTROMD2_D2reg ;                               \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD3_D0reg <= IFFTROMD3_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD3_D1reg <= IFFTROMD3_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD3_D2reg <= IFFTROMD3_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD3_Dout  <= IFFTROMD3_D2reg ;                               \n";
 r8_rompipereg1 << " 		end                                                                    \n";
 r8_rompipereg1 << " 	end                                                                        \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " endmodule                                                                     \n";     
     r8_rompipereg1.close();         
}
void CenCtrl::R8_AGU(std::string string_in){
     std::ofstream r8_agu;    
     std::string        string_buf = "/R8_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_agu.open(ss.str());
  r8_agu << "//==================================================                                                                       \n";         
  r8_agu << "//                                                                                                   \n";
  r8_agu << "//Date       : 2018/8/1                                                                                                    \n";
  r8_agu << "//Note       : Radix-8 address generator unit                                                                              \n";
  r8_agu << "//==================================================                                                                       \n";
  r8_agu << "`timescale 1 ns/1 ps                                                                                                       \n";
  r8_agu << "module R8_AGU(BN_out,                                                                                                      \n";
  r8_agu << "			  MA,                                                                                                           \n";
  r8_agu << "			  ROMA,                                                                                                         \n";
  r8_agu << "			  Mul_sel_out,                                                                                                  \n";
  r8_agu << "			  RDC_sel_out,                                                                                                  \n";
  r8_agu << "			  data_cnt_reg,                                                                                                 \n";
  r8_agu << "			  FFT_FSmode_sel,                                                                                               \n";
  r8_agu << "			  mode_sel_in,                                                                                                  \n";
  r8_agu << "			  rc_sel_in,                                                                                                    \n";
  r8_agu << "			  AGU_en,                                                                                                       \n";
  r8_agu << "			  wrfd_en_in, //2018/08/01                                                                                      \n";
  r8_agu << "              rst_n,                                                                                                       \n";
  r8_agu << "              clk                                                                                                          \n";
  r8_agu << "              ) ;                                                                                                          \n";
  r8_agu << "parameter A_WIDTH     = "<< addr_width       << ";                                                                         \n";
  r8_agu << "parameter DC_WIDTH    = "<< data_cnt_width   << ";                                                                         \n";
  r8_agu << "parameter BC_WIDTH    = "<< BU_counter_width << ";                                                                         \n";
  r8_agu << "parameter SC_WIDTH    = "<< stage_width      << "; //number of stages+1                                                    \n";
  r8_agu << "parameter ROMA_WIDTH  = "<< ROM_width        << ";                                                                         \n";
  r8_agu << "parameter RDC_WIDTH   = 3 ; //2018/08/01                                                                                   \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "parameter DC_ZERO   = " << data_cnt_width << "'h0 ;                                                                        \n";
  r8_agu << "parameter ROMA_ZERO = " << ROM_width      << "'h0 ;                                                                        \n";
  r8_agu << "parameter RDC_ZERO  = 3'h0 ;                                                                                               \n";
  r8_agu << "                                                                                                                           \n";
  for(int i=0;i < No_stage;i++){                                                                                                        
  r8_agu << "parameter S" << i << "      = " << stage_width << "'d" << i << ";                                                          \n";
  }                                                                                                                                     
  r8_agu << "                                                                                                                           \n";
  r8_agu << "//data counter value1 for data_cnt_wire                                                                                    \n";
  r8_agu << "parameter DCNT_V1   = " << data_cnt_width << "'d" << FFT_dc[No_stage-1] <<";                                                  \n";
  r8_agu << "//data counter value2 for data_cnt_wire                                                                                    \n";
  r8_agu << "parameter DCNT_V2   = " << data_cnt_width << "'d" << (NO_U_BUPS )    <<";\n"; //delay 3 clock,waitting for output data
  r8_agu << "                                                                                                                           \n";
  for(int j=0;j<(radix-2);j++){                                                                                                         
     r8_agu << "parameter DCNT_FS" << (j+1) <<" = "<<data_cnt_width << "'d" << DCNT_FS[j] << ";                                         \n";
  }                                                                                                                                     
  r8_agu << " // data counter bit position1 for MSB of j_value                                                                          \n";
  r8_agu << "parameter DCNT_BP1 = " << DCNT_BP1 << " ;                                                                                  \n";
  r8_agu << "// data counter bit position2 for LSB of i_value                                                                           \n";
  r8_agu << "parameter DCNT_BP2 = " << DCNT_BP2 << " ;                                                                                  \n";
  r8_agu << "// data counter bit position3 for MSB of i_value                                                                           \n";
  r8_agu << "parameter DCNT_BP3 = " << DCNT_BP3 << " ;                                                                                  \n";
  r8_agu << "// data counter bit position4 for LSB of SC_value                                                                          \n";
  r8_agu << "parameter DCNT_BP4 = " << DCNT_BP4 << " ;                                                                                  \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "output                  BN_out ;                                                                                           \n";
  r8_agu << "output [A_WIDTH-1:0]    MA ;                                                                                               \n";
  r8_agu << "output [ROMA_WIDTH-1:0] ROMA ;                                                                                             \n";
  r8_agu << "output [1:0]            Mul_sel_out ;                                                                                      \n";
  r8_agu << "output [RDC_WIDTH-1:0]  RDC_sel_out ;                                                                                      \n";
  r8_agu << "output [DC_WIDTH-1:0]   data_cnt_reg ;                                                                                     \n";
  r8_agu << "output [RDC_WIDTH-1:0]  FFT_FSmode_sel ;                                                                                   \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "input                   mode_sel_in ;                                                                                      \n";
  r8_agu << "input                   rc_sel_in ;                                                                                        \n";
  r8_agu << "input                   AGU_en ;                                                                                           \n";
  r8_agu << "input                   wrfd_en_in ;                                                                                       \n";
  r8_agu << "input                   rst_n ;                                                                                            \n";
  r8_agu << "input                   clk ;                                                                                              \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "reg   [DC_WIDTH-1:0]  data_cnt_reg ; // data counter                                                                       \n";
  r8_agu << "reg   [RDC_WIDTH-1:0] RDCsel_cnt_reg ; // RDC select counter, 2018/08/01                                                   \n";
  r8_agu << "reg                   BN_out ;                                                                                             \n";
  r8_agu << "reg   [RDC_WIDTH-1:0] RDC_sel_out ;                                                                                        \n";
  r8_agu << "reg   [1:0]           Mul_sel_out ;                                                                                        \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "wire  [DC_WIDTH-1:0]  data_cnt_wire ;                                                                                      \n";
  r8_agu << "wire  [RDC_WIDTH-1:0] RDCsel_cnt_wire ; // 2018/08/01                                                                      \n";
  r8_agu << "wire  [BC_WIDTH-1:0]  BC_wire ; // butterfly counter                                                                       \n";
  //number of wire xor_wire change with fft_point                                                                                       \n";
  unsigned long NO_xorwire;                                                                                                             
  NO_xorwire = DCNT_BP3 - DCNT_BP2;                                                                                                     
  for(int i=0;i < NO_xorwire;i++){                                                                                                      
     r8_agu << "wire                 xor_d"<< i << "_wire;                                                                              \n";
  }                                                                                                                                     
  r8_agu << "                                                                                                                           \n";
  r8_agu << "wire  [SC_WIDTH-1:0]  SC_wire ; // stage counter                                                                           \n";
  r8_agu << "wire  [BC_WIDTH-1:0]  BC_RR_wire ;                                                                                         \n";
  r8_agu << "wire                  BN_wire ;                                                                                            \n";
  r8_agu << "wire [RDC_WIDTH-1:0]  RDC_sel_wire ;                                                                                       \n";
  r8_agu << "wire [1:0]            Mul_sel_wire ;                                                                                       \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "wire  [BC_WIDTH-1:0]  BR_BC_wire ;                                                                                         \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "	//                                                                                                                      \n";
  r8_agu << "	assign data_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                                     \n";
  r8_agu << "                            ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                                 \n";
  r8_agu << "                             DC_ZERO : ((AGU_en==1'b1)&&(data_cnt_reg<DCNT_V1))?                                           \n";
  r8_agu << "                            (data_cnt_reg + 1'b1) : data_cnt_reg ;                                                         \n";
  r8_agu << "	                                                                                                                        \n";
  r8_agu << "	//                                                                                                                      \n";
  r8_agu << "	assign RDCsel_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                                   \n";
  r8_agu << "                             ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                                \n";
  r8_agu << "                             RDC_ZERO :(((AGU_en==1'b1)&&(data_cnt_reg<DCNT_V1))||                                         \n";
  r8_agu << "                             (wrfd_en_in==1'b1))? (RDCsel_cnt_reg + 1'b1) : RDCsel_cnt_reg ;                               \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "// for Gray code                                                                                                           \n";
  for(int k=0; k < NO_xorwire; k++){                                                                                                   
  r8_agu << "   assign xor_d" << k <<"_wire = data_cnt_reg["<<(DCNT_BP3 - k)<<"]^data_cnt_reg["<<(DCNT_BP3 - k - 1)<<"];                \n";
  }                                                                                                                                     
  r8_agu << "//	                                                                                                                        \n";
  r8_agu << "   assign BC_wire = (rc_sel_in==1'b1)?                                                                                     \n";
  r8_agu << "                     ({data_cnt_reg[DCNT_BP1:0], data_cnt_reg[DCNT_BP3:DCNT_BP2]}): //(j*G+i)                              \n";
  r8_agu << "	                 ({data_cnt_reg[DCNT_BP1:0],                                                                            \n";
  r8_agu << "                     data_cnt_reg[DCNT_BP3],                                                                               \n";
  for(int l=0;l<NO_xorwire;l++){                                                                                                        
      if(l!=(NO_xorwire-1))r8_agu << "                      xor_d"<< l <<"_wire,\n";                                                    
      else                 r8_agu << "                      xor_d"<< l <<"_wire\n";	                                                   
  }                                                                                                                                     
  r8_agu << "                       }) ;\n";                                                                                            
  r8_agu << "\n";                                                                                                                       
  r8_agu << "   //                                                                                                                      \n";
  r8_agu << "   assign SC_wire = data_cnt_reg[DC_WIDTH-1:DCNT_BP4] ;                                                                    \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "   // Barrel shifter, rc_sel_in=1, right rotate 10-bit,rc_sel_in is to do resolving carries                                                                    \n";
  r8_agu << "   assign BC_RR_wire = ";
  unsigned long RR_tmp;
  unsigned long s;
  unsigned long fs_rr_bits; //final state is in order to read data from sram
  //final state bc right shift // final state is after INTT computing state
  s = DCNT_BP1 + 1; //radix bit size
  fs_rr_bits = s * (No_stage -3);
  for(unsigned long i=0; i < (No_stage-1);i++){
     RR_tmp = s * i ; 
     if(i==0) {
         if(No_stage < 4) r8_agu << "((((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))&&(rc_sel_in == 1'b0))||(rc_sel_in == 1'b1))? BC_wire:\n";
         else r8_agu << "((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))&&(rc_sel_in == 1'b0)? BC_wire:\n";	  
     }
     else {
             if((No_stage >= 4 )&& (i == (No_stage-3)))r8_agu << "                       (((SC_wire == S" << i << ") && (rc_sel_in == 1'b0))||(rc_sel_in==1'b1))? \n";
             else   r8_agu << "                       ((SC_wire == S" << i << ") && (rc_sel_in == 1'b0))? \n";
             r8_agu << "                       {BC_wire[" << RR_tmp-1 << ":0],BC_wire[BC_WIDTH-1:" << RR_tmp << "]} :\n";
     }
  }
  r8_agu << "                       BC_wire;\n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "   // Bit reverse barrel shifter for IFFT                                                                                  \n";
  //need to modify
  r8_agu << "   assign BR_BC_wire = {";
  for(unsigned long i=0; i < BU_counter_width; i=i+3){
  if(i!=(BU_counter_width-3))r8_agu << "                       BC_RR_wire["<< (i+2) <<":"<< i << "],\n"; 
  else  r8_agu << "                       BC_RR_wire["<< (i+2) <<":"<< i << "]} ;\n";  
  } 
  r8_agu << "                                                                                                                           \n";
  r8_agu << "   // Bank, rc_sel_in=1 BN_wire=(^BC_RR_wire)                                                                              \n";
  r8_agu << "   assign BN_wire = (mode_sel_in==1'b1)? (^BR_BC_wire) : (^BC_RR_wire) ;                                                   \n";
  r8_agu << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                                   \n";
  r8_agu << "   assign MA = (mode_sel_in==1'b1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ;                              \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "   // ROM Address                                                                                                          \n";
  r8_agu << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                             \n";
  unsigned long ls_bits = 0; //left shift bits
  
  for(unsigned long i=1; i < (No_stage-1);i++){
    ls_bits = s * i;
    unsigned long ls_msb;
    ls_msb = ROM_width -1 - ls_bits;
    r8_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[" << ls_msb <<":0]," << ls_bits <<"'d0}) : \n" ;    
  }
  r8_agu << "               ROMA_ZERO;\n";
  r8_agu << "   //                                                                                                                      \n";
  r8_agu << "   assign Mul_sel_wire = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd3 :                                      \n";
  r8_agu << "                       ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd2 : // test for point-wise multiplication  \n";
  r8_agu << "                       (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                                                       \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "   //                                                                                                                      \n";
  r8_agu << "   assign RDC_sel_wire = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg : data_cnt_reg[2:0] ; // 2018/08/01                           \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "   //FFT final stage mode select                                                                                           \n";
  r8_agu << "   assign FFT_FSmode_sel = ((data_cnt_reg==DCNT_FS1)&&(mode_sel_in==1'b0)) ? 3'd1 :                                        \n";
  r8_agu << "                           ((data_cnt_reg==DCNT_FS2)&&(mode_sel_in==1'b0)) ? 3'd2 :                                           \n";
  r8_agu << "                           ((data_cnt_reg==DCNT_FS3)&&(mode_sel_in==1'b0)) ? 3'd3 :                                           \n";
  r8_agu << "                           ((data_cnt_reg==DCNT_FS4)&&(mode_sel_in==1'b0)) ? 3'd4 :                                           \n";
  r8_agu << "                           ((data_cnt_reg==DCNT_FS5)&&(mode_sel_in==1'b0)) ? 3'd5 :                                           \n";
  r8_agu << "                           ((data_cnt_reg>=DCNT_FS6)&&(data_cnt_reg<=DCNT_V1)&&(mode_sel_in==1'b0)) ? 3'd6 : 3'd0;\n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "   //                                                                                                                      \n";
  r8_agu << "   always @(posedge clk or negedge rst_n) begin                                                                            \n";
  r8_agu << "       if(~rst_n) begin                                                                                                    \n";
  r8_agu << "           data_cnt_reg <= DC_ZERO ;                                                                                       \n";
  r8_agu << "           BN_out <= 1'b0 ;                                                                                                \n";
  r8_agu << "           RDC_sel_out <= RDC_ZERO ;                                                                                       \n";
  r8_agu << "           Mul_sel_out <= 2'd0 ;                                                                                           \n";
  r8_agu << "           RDCsel_cnt_reg <= RDC_ZERO ; // 2018/08/01                                                                      \n";
  r8_agu << "       end                                                                                                                 \n";
  r8_agu << "       else begin                                                                                                          \n";
  r8_agu << "           data_cnt_reg <= data_cnt_wire ;                                                                                 \n";
  r8_agu << "           BN_out <= BN_wire ;                                                                                             \n";
  r8_agu << "           RDC_sel_out <= RDC_sel_wire ;                                                                                   \n";
  r8_agu << "           Mul_sel_out <= Mul_sel_wire ;                                                                                   \n";
  r8_agu << "           RDCsel_cnt_reg <= RDCsel_cnt_wire ; // 2018/08/01                                                               \n";
  r8_agu << "       end                                                                                                                 \n";
  r8_agu << "   end                                                                                                                     \n";
  r8_agu << "                                                                                                                           \n";
  r8_agu << "endmodule                                                                                                                  \n";     
     r8_agu.close();     	
}
void CenCtrl::R8_DC(std::string string_in){
     std::ofstream r8_dc;
     std::string        string_buf = "/R8_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_dc.open(ss.str());
r8_dc << " `timescale 1 ns/1 ps                           \n";                              
r8_dc << " module R8_DC(RDC_out0,                         \n";
r8_dc << " 			 RDC_out1,                            \n";
r8_dc << " 			 RDC_out2,                            \n";
r8_dc << " 			 RDC_out3,                            \n";
r8_dc << " 			 RDC_out4,                            \n";
r8_dc << " 			 RDC_out5,                            \n";
r8_dc << " 			 RDC_out6,                            \n";
r8_dc << " 			 RDC_out7,                            \n";
r8_dc << "              RDC_in0,                          \n";
r8_dc << " 		     RDC_in1,                             \n";
r8_dc << " 			 RDC_in2,                             \n";
r8_dc << " 			 RDC_in3,                             \n";
r8_dc << " 			 RDC_in4,                             \n";
r8_dc << " 			 RDC_in5,                             \n";
r8_dc << " 			 RDC_in6,                             \n";
r8_dc << " 			 RDC_in7,                             \n";
r8_dc << " 			 RDC_sel,                             \n";
r8_dc << " 			 FFT_FSmode_sel,                      \n";
r8_dc << "              rst_n,                            \n";
r8_dc << "              clk                               \n";
r8_dc << "              ) ;                               \n";
r8_dc << " parameter P_WIDTH     = 64 ;                   \n";
r8_dc << "                                                \n";
r8_dc << " parameter P_ZERO      = 64'h0 ;                \n";
r8_dc << "                                                \n";
r8_dc << "                                                \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out0 ;                 \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out1 ;                 \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out2 ;                 \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out3 ;                 \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out4 ;                 \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out5 ;                 \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out6 ;                 \n";
r8_dc << " output[P_WIDTH-1:0] RDC_out7 ;                 \n";
r8_dc << "                                                \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in0 ;                  \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in1 ;                  \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in2 ;                  \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in3 ;                  \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in4 ;                  \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in5 ;                  \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in6 ;                  \n";
r8_dc << " input [P_WIDTH-1:0] RDC_in7 ;                  \n";
r8_dc << " input [2:0]         RDC_sel ;                  \n";
r8_dc << " input [2:0]         FFT_FSmode_sel ;           \n";
r8_dc << " input               rst_n ;                    \n";
r8_dc << " input               clk ;                      \n";
r8_dc << "                                                \n";
r8_dc << "                                                \n";
r8_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                 \n";
r8_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                 \n";
r8_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                 \n";
r8_dc << " reg   [P_WIDTH-1:0] RDC_out3 ;                 \n";
r8_dc << " reg   [P_WIDTH-1:0] RDC_out4 ;                 \n";
r8_dc << " reg   [P_WIDTH-1:0] RDC_out5 ;                 \n";
r8_dc << " reg   [P_WIDTH-1:0] RDC_out6 ;                 \n";
r8_dc << "                                                \n";
r8_dc << "                                                \n";
r8_dc << " reg   [P_WIDTH-1:0] D1_0_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D2_0_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D2_1_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D3_0_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D3_1_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D3_2_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D4_0_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D4_1_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D4_2_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D4_3_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D5_0_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D5_1_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D5_2_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D5_3_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D5_4_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D6_0_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D6_1_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D6_2_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D6_3_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D6_4_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D6_5_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D7_0_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D7_1_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D7_2_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D7_3_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D7_4_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D7_5_in_reg ;              \n";
r8_dc << " reg   [P_WIDTH-1:0] D7_6_in_reg ;              \n";
r8_dc << "                                                \n";
r8_dc << "                                                \n";
r8_dc << " reg   [P_WIDTH-1:0] D0_0_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D0_1_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D0_2_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D0_3_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D0_4_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D0_5_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D1_0_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D1_1_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D1_2_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D1_3_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D1_4_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D2_0_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D2_1_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D2_2_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D2_3_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D3_0_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D3_1_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D3_2_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D4_0_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D4_1_out_reg ;             \n";
r8_dc << " reg   [P_WIDTH-1:0] D5_0_out_reg ;             \n";
r8_dc << "                                                \n";
r8_dc << "                                                \n";
r8_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                 \n";
r8_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                 \n";
r8_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                 \n";
r8_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                 \n";
r8_dc << " wire  [P_WIDTH-1:0]  D4_wire ;                 \n";
r8_dc << " wire  [P_WIDTH-1:0]  D5_wire ;                 \n";
r8_dc << " wire  [P_WIDTH-1:0]  D6_wire ;                 \n";
r8_dc << " wire  [P_WIDTH-1:0]  RDC_out7 ;                \n";
r8_dc << "                                                \n";
r8_dc << "                                                \n";
r8_dc << " 	//                                            \n";
r8_dc << " 	assign D0_wire = ((FFT_FSmode_sel==3'd1)||(FFT_FSmode_sel==3'd2)||(FFT_FSmode_sel==3'd3)||(FFT_FSmode_sel==3'd4)||(FFT_FSmode_sel==3'd5)||(FFT_FSmode_sel==3'd6)) ? RDC_in0 : // FFT final Stage do not transpose\n";
r8_dc << " 					 (RDC_sel==3'd0)? RDC_in0 :                                                                                                                                                                      \n";
r8_dc << " 					 (RDC_sel==3'd1)? D1_0_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd2)? D2_1_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd3)? D3_2_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd4)? D4_3_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd5)? D5_4_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd6)? D6_5_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					                  D7_6_in_reg ; // RDC_sel==3'd7                                                                                                                                                 \n";
r8_dc << " 									                                                                                                                                                                                 \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	assign D1_wire = ((FFT_FSmode_sel==3'd1)||(FFT_FSmode_sel==3'd2)||(FFT_FSmode_sel==3'd3)||(FFT_FSmode_sel==3'd4)||(FFT_FSmode_sel==3'd5)||(FFT_FSmode_sel==3'd6)) ? D1_0_in_reg :                                \n";
r8_dc << " 	                 (RDC_sel==3'd0)? D7_6_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd1)? RDC_in0 :                                                                                                                                                                      \n";
r8_dc << " 					 (RDC_sel==3'd2)? D1_0_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd3)? D2_1_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd4)? D3_2_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd5)? D4_3_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd6)? D5_4_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					                  D6_5_in_reg ; // RDC_sel==3'd7                                                                                                                                                 \n";
r8_dc << " 									                                                                                                                                                                                 \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	assign D2_wire = ((FFT_FSmode_sel==3'd2)||(FFT_FSmode_sel==3'd3)||(FFT_FSmode_sel==3'd4)||(FFT_FSmode_sel==3'd5)||(FFT_FSmode_sel==3'd6)) ? D2_1_in_reg :                                                        \n";
r8_dc << " 	                 (RDC_sel==3'd0)? D6_5_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd1)? D7_6_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd2)? RDC_in0 :                                                                                                                                                                      \n";
r8_dc << " 					 (RDC_sel==3'd3)? D1_0_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd4)? D2_1_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd5)? D3_2_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd6)? D4_3_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					                  D5_4_in_reg ; // RDC_sel==3'd7                                                                                                                                                 \n";
r8_dc << " 					                                                                                                                                                                                                 \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	assign D3_wire = ((FFT_FSmode_sel==3'd3)||(FFT_FSmode_sel==3'd4)||(FFT_FSmode_sel==3'd5)||(FFT_FSmode_sel==3'd6)) ? D3_2_in_reg :                                                                                \n";
r8_dc << " 	                 (RDC_sel==3'd0)? D5_4_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd1)? D6_5_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd2)? D7_6_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd3)? RDC_in0 :                                                                                                                                                                      \n";
r8_dc << " 					 (RDC_sel==3'd4)? D1_0_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd5)? D2_1_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd6)? D3_2_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					                  D4_3_in_reg ; // RDC_sel==3'd7                                                                                                                                                 \n";
r8_dc << " 					                                                                                                                                                                                                 \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	assign D4_wire = ((FFT_FSmode_sel==3'd4)||(FFT_FSmode_sel==3'd5)||(FFT_FSmode_sel==3'd6)) ? D4_3_in_reg :                                                                                                        \n";
r8_dc << " 	                 (RDC_sel==3'd0)? D4_3_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd1)? D5_4_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd2)? D6_5_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd3)? D7_6_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd4)? RDC_in0 :                                                                                                                                                                      \n";
r8_dc << " 					 (RDC_sel==3'd5)? D1_0_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd6)? D2_1_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					                  D3_2_in_reg ; // RDC_sel==3'd7                                                                                                                                                 \n";
r8_dc << " 					                                                                                                                                                                                                 \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	assign D5_wire = ((FFT_FSmode_sel==3'd5)||(FFT_FSmode_sel==3'd6)) ? D5_4_in_reg :                                                                                                                                \n";
r8_dc << " 	                 (RDC_sel==3'd0)? D3_2_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd1)? D4_3_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd2)? D5_4_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd3)? D6_5_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd4)? D7_6_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd5)? RDC_in0 :                                                                                                                                                                      \n";
r8_dc << " 					 (RDC_sel==3'd6)? D1_0_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					                  D2_1_in_reg ; // RDC_sel==3'd7                                                                                                                                                 \n";
r8_dc << " 					                                                                                                                                                                                                 \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	assign D6_wire = (FFT_FSmode_sel==3'd6) ? D6_5_in_reg :                                                                                                                                                          \n";
r8_dc << " 	                 (RDC_sel==3'd0)? D2_1_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd1)? D3_2_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd2)? D4_3_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd3)? D5_4_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd4)? D6_5_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd5)? D7_6_in_reg :                                                                                                                                                                  \n";
r8_dc << " 					 (RDC_sel==3'd6)? RDC_in0 :                                                                                                                                                                      \n";
r8_dc << " 					                  D1_0_in_reg ; // RDC_sel==3'd7                                                                                                                                                 \n";
r8_dc << " 												                                                                                                                                                                     \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	assign RDC_out7 = (FFT_FSmode_sel==3'd6) ? D7_6_in_reg :                                                                                                                                                         \n";
r8_dc << " 	                  (RDC_sel==3'd0)? D1_0_in_reg :                                                                                                                                                                 \n";
r8_dc << " 					  (RDC_sel==3'd1)? D2_1_in_reg :                                                                                                                                                                 \n";
r8_dc << " 					  (RDC_sel==3'd2)? D3_2_in_reg :                                                                                                                                                                 \n";
r8_dc << " 					  (RDC_sel==3'd3)? D4_3_in_reg :                                                                                                                                                                 \n";
r8_dc << " 					  (RDC_sel==3'd4)? D5_4_in_reg :                                                                                                                                                                 \n";
r8_dc << " 					  (RDC_sel==3'd5)? D6_5_in_reg :                                                                                                                                                                 \n";
r8_dc << " 					  (RDC_sel==3'd6)? D7_6_in_reg :                                                                                                                                                                 \n";
r8_dc << " 					                   RDC_in0 ; // RDC_sel==3'd7                                                                                                                                                    \n";
r8_dc << " 					                                                                                                                                                                                                 \n";
r8_dc << " 	                                                                                                                                                                                                                 \n";
r8_dc << " 	//                                                                                                                                                                                                               \n";
r8_dc << " 	always @(posedge clk or negedge rst_n) begin                                                                                                                                                                     \n";
r8_dc << " 		if(~rst_n) begin                                                                                                                                                                                             \n";
r8_dc << " 			D1_0_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D2_0_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D2_1_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D3_0_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D3_1_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D3_2_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D4_0_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D4_1_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D4_2_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D4_3_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D5_0_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D5_1_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D5_2_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D5_3_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D5_4_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D6_0_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D6_1_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D6_2_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D6_3_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D6_4_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D6_5_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D7_0_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D7_1_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D7_2_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D7_3_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D7_4_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D7_5_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			D7_6_in_reg <= P_ZERO ;                                                                                                                                                                                  \n";
r8_dc << " 			//                                                                                                                                                                                                       \n";
r8_dc << " 			D0_0_out_reg <= P_ZERO ;                                                                                                                                                                                 \n";
r8_dc << " 			D0_1_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D0_2_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D0_3_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D0_4_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D0_5_out_reg <= P_ZERO ;			                                                                                                                                                                     \n";
r8_dc << " 			RDC_out0 <= P_ZERO ;                                                                                                                                                                                     \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D1_0_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D1_1_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D1_2_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D1_3_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D1_4_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			RDC_out1 <= P_ZERO ;                                                                                                                                                                                     \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D2_0_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D2_1_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D2_2_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D2_3_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			RDC_out2 <= P_ZERO ;                                                                                                                                                                                     \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D3_0_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D3_1_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D3_2_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			RDC_out3 <= P_ZERO ;                                                                                                                                                                                     \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D4_0_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			D4_1_out_reg <= P_ZERO ;	                                                                                                                                                                             \n";
r8_dc << " 			RDC_out4 <= P_ZERO ;                                                                                                                                                                                     \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D5_0_out_reg <= P_ZERO ;                                                                                                                                                                                 \n";
r8_dc << " 			RDC_out5 <= P_ZERO ;                                                                                                                                                                                     \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			RDC_out6 <= P_ZERO ;                                                                                                                                                                                     \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 		end                                                                                                                                                                                                          \n";
r8_dc << " 		else begin                                                                                                                                                                                                   \n";
r8_dc << " 			D1_0_in_reg <= RDC_in1 ;                                                                                                                                                                                 \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D2_0_in_reg <= RDC_in2 ;                                                                                                                                                                                 \n";
r8_dc << " 			D2_1_in_reg <= D2_0_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D3_0_in_reg <= RDC_in3 ;                                                                                                                                                                                 \n";
r8_dc << " 			D3_1_in_reg <= D3_0_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D3_2_in_reg <= D3_1_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D4_0_in_reg <= RDC_in4 ;                                                                                                                                                                                 \n";
r8_dc << " 			D4_1_in_reg <= D4_0_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D4_2_in_reg <= D4_1_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D4_3_in_reg <= D4_2_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D5_0_in_reg <= RDC_in5 ;                                                                                                                                                                                 \n";
r8_dc << " 			D5_1_in_reg <= D5_0_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D5_2_in_reg <= D5_1_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D5_3_in_reg <= D5_2_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D5_4_in_reg <= D5_3_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D6_0_in_reg <= RDC_in6 ;                                                                                                                                                                                 \n";
r8_dc << " 			D6_1_in_reg <= D6_0_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D6_2_in_reg <= D6_1_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D6_3_in_reg <= D6_2_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D6_4_in_reg <= D6_3_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D6_5_in_reg <= D6_4_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D7_0_in_reg <= RDC_in7 ;                                                                                                                                                                                 \n";
r8_dc << " 			D7_1_in_reg <= D7_0_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D7_2_in_reg <= D7_1_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D7_3_in_reg <= D7_2_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D7_4_in_reg <= D7_3_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D7_5_in_reg <= D7_4_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 			D7_6_in_reg <= D7_5_in_reg ;                                                                                                                                                                             \n";
r8_dc << " 	                                                                                                                                                                                                                 \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			//                                                                                                                                                                                                       \n";
r8_dc << " 			D0_0_out_reg <= D0_wire ;                                                                                                                                                                                \n";
r8_dc << " 			D0_1_out_reg <= D0_0_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D0_2_out_reg <= D0_1_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D0_3_out_reg <= D0_2_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D0_4_out_reg <= D0_3_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D0_5_out_reg <= D0_4_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			RDC_out0 <= D0_5_out_reg ;                                                                                                                                                                               \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D1_0_out_reg <= D1_wire ;                                                                                                                                                                                \n";
r8_dc << " 			D1_1_out_reg <= D1_0_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D1_2_out_reg <= D1_1_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D1_3_out_reg <= D1_2_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D1_4_out_reg <= D1_3_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			RDC_out1 <= D1_4_out_reg ;                                                                                                                                                                               \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D2_0_out_reg <= D2_wire ;                                                                                                                                                                                \n";
r8_dc << " 			D2_1_out_reg <= D2_0_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D2_2_out_reg <= D2_1_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D2_3_out_reg <= D2_2_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			RDC_out2 <= D2_3_out_reg ;                                                                                                                                                                               \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D3_0_out_reg <= D3_wire ;                                                                                                                                                                                \n";
r8_dc << " 			D3_1_out_reg <= D3_0_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			D3_2_out_reg <= D3_1_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			RDC_out3 <= D3_2_out_reg ;                                                                                                                                                                               \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D4_0_out_reg <= D4_wire ;                                                                                                                                                                                \n";
r8_dc << " 			D4_1_out_reg <= D4_0_out_reg ;                                                                                                                                                                           \n";
r8_dc << " 			RDC_out4 <= D4_1_out_reg ;                                                                                                                                                                               \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			D5_0_out_reg <= D5_wire ;                                                                                                                                                                                \n";
r8_dc << " 			RDC_out5 <= D5_0_out_reg ;                                                                                                                                                                               \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 			RDC_out6 <= D6_wire ;                                                                                                                                                                                    \n";
r8_dc << " 			                                                                                                                                                                                                         \n";
r8_dc << " 		end                                                                                                                                                                                                          \n";
r8_dc << " 	end                                                                                                                                                                                                              \n";
r8_dc << "                                                                                                                                                                                                                   \n";
r8_dc << " endmodule                                                                                                                                                                                                         \n";
     r8_dc.close();         
}
void CenCtrl::R8_WAddr(std::string string_in){
     std::ofstream r8_waddr;  
     std::string        string_buf = "/R8_WAddr.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_waddr.open(ss.str());

r8_waddr  << " `timescale 1 ns/1 ps                             \n";
r8_waddr  << " module R8_WAddr(BND_out,                         \n";
r8_waddr  << " 			    WMA_out,                            \n";
r8_waddr  << "                 BN_in,                           \n";
r8_waddr  << " 		        MA_in,                              \n";
r8_waddr  << "                 rst_n,                           \n";
r8_waddr  << "                 clk                              \n";
r8_waddr  << "                 ) ;                              \n";
r8_waddr  << " parameter A_WIDTH   = "<< addr_width <<" ;                       \n";
r8_waddr  << "                                                  \n";
r8_waddr  << " parameter A_ZERO    = "<< addr_width <<"'h0 ;                    \n";
r8_waddr  << " parameter BN_ZERO   = 1'h0 ;                     \n";
r8_waddr  << "                                                  \n";
r8_waddr  << "                                                  \n";
r8_waddr  << " output              BND_out ;                    \n";
r8_waddr  << " output[A_WIDTH-1:0] WMA_out ;                    \n";
r8_waddr  << "                                                  \n";
r8_waddr  << " input               BN_in ;                      \n";
r8_waddr  << " input [A_WIDTH-1:0] MA_in ;                      \n";
r8_waddr  << " input               rst_n ;                      \n";
r8_waddr  << " input               clk ;                        \n";
r8_waddr  << "                                                  \n";
r8_waddr  << "                                                  \n";
r8_waddr  << " reg                 BN_D0_reg ;                  \n";
r8_waddr  << " reg                 BN_D1_reg ;                  \n";
r8_waddr  << " reg                 BN_D2_reg ;                  \n";
r8_waddr  << " reg                 BN_D3_reg ;                  \n";
r8_waddr  << " reg                 BN_D4_reg ;                  \n";
r8_waddr  << " reg                 BN_D5_reg ;                  \n";
r8_waddr  << " reg                 BN_D6_reg ;                  \n";
r8_waddr  << " reg                 BN_D7_reg ;                  \n";
r8_waddr  << " reg                 BN_D8_reg ;                  \n";
r8_waddr  << " reg                 BN_D9_reg ;                  \n";
r8_waddr  << " reg                 BN_D10_reg ;                 \n";
r8_waddr  << " reg                 BN_D11_reg ;                 \n";
r8_waddr  << " reg                 BN_D12_reg ;                 \n";
r8_waddr  << " reg                 BN_D13_reg ;                 \n";
r8_waddr  << " reg                 BN_D14_reg ;                 \n";
r8_waddr  << " reg                 BN_D15_reg ;                 \n";
r8_waddr  << " reg                 BN_D16_reg ;                 \n";
r8_waddr  << " reg                 BN_D17_reg ;                 \n";
r8_waddr  << " reg                 BN_D18_reg ;                 \n";
r8_waddr  << " reg                 BN_D19_reg ;                 \n";
r8_waddr  << " reg                 BN_D20_reg ;                 \n";
r8_waddr  << " reg                 BN_D21_reg ;                 \n";
r8_waddr  << " reg                 BND_out ;                    \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D0_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D1_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D2_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D3_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D4_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D5_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D6_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D7_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D8_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D9_reg ;                  \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D10_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D11_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D12_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D13_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D14_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D15_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D16_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D17_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D18_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D19_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D20_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D21_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] MA_D22_reg ;                 \n";
r8_waddr  << " reg   [A_WIDTH-1:0] WMA_out ;                    \n";
r8_waddr  << "                                                  \n";
r8_waddr  << "                                                  \n";
r8_waddr  << " 	//BN delay 23 cycles and MA delay 24 cycles     \n";
r8_waddr  << " 	always @(posedge clk or negedge rst_n) begin    \n";
r8_waddr  << " 		if(~rst_n) begin                            \n";
r8_waddr  << " 			BN_D0_reg  <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D1_reg  <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D2_reg  <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D3_reg  <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D4_reg  <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D5_reg  <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D6_reg  <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D7_reg  <= BN_ZERO;                  \n";
r8_waddr  << " 			BN_D8_reg  <= BN_ZERO;                  \n";
r8_waddr  << " 			BN_D9_reg  <= BN_ZERO;                  \n";
r8_waddr  << " 			BN_D10_reg <= BN_ZERO;                  \n";
r8_waddr  << " 			BN_D11_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D12_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D13_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D14_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D15_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D16_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D17_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D18_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D19_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D20_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BN_D21_reg <= BN_ZERO ;                 \n";
r8_waddr  << " 			BND_out    <= BN_ZERO ;                 \n";
r8_waddr  << " 			                                        \n";
r8_waddr  << " 			MA_D0_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D1_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D2_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D3_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D4_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D5_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D6_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D7_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D8_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D9_reg  <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D10_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D11_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D12_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D13_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D14_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D15_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D16_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D17_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D18_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D19_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D20_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D21_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			MA_D22_reg <= A_ZERO ;                  \n";
r8_waddr  << " 			WMA_out    <= A_ZERO ;                  \n";
r8_waddr  << " 		end                                         \n";
r8_waddr  << " 		else begin                                  \n";
r8_waddr  << " 			BN_D0_reg  <= BN_in ;                   \n";
r8_waddr  << " 			BN_D1_reg  <= BN_D0_reg ;               \n";
r8_waddr  << " 			BN_D2_reg  <= BN_D1_reg ;               \n";
r8_waddr  << " 			BN_D3_reg  <= BN_D2_reg ;               \n";
r8_waddr  << " 			BN_D4_reg  <= BN_D3_reg ;               \n";
r8_waddr  << " 			BN_D5_reg  <= BN_D4_reg ;               \n";
r8_waddr  << " 			BN_D6_reg  <= BN_D5_reg ;               \n";
r8_waddr  << " 			BN_D7_reg  <= BN_D6_reg ;               \n";
r8_waddr  << " 			BN_D8_reg  <= BN_D7_reg ;               \n";
r8_waddr  << " 			BN_D9_reg  <= BN_D8_reg ;               \n";
r8_waddr  << " 			BN_D10_reg <= BN_D9_reg ;               \n";
r8_waddr  << " 			BN_D11_reg <= BN_D10_reg ;              \n";
r8_waddr  << " 			BN_D12_reg <= BN_D11_reg ;              \n";
r8_waddr  << " 			BN_D13_reg <= BN_D12_reg ;              \n";
r8_waddr  << " 			BN_D14_reg <= BN_D13_reg ;              \n";
r8_waddr  << " 			BN_D15_reg <= BN_D14_reg ;              \n";
r8_waddr  << " 			BN_D16_reg <= BN_D15_reg ;              \n";
r8_waddr  << " 			BN_D17_reg <= BN_D16_reg ;              \n";
r8_waddr  << " 			BN_D18_reg <= BN_D17_reg ;              \n";
r8_waddr  << " 			BN_D19_reg <= BN_D18_reg ;              \n";
r8_waddr  << " 			BN_D20_reg <= BN_D19_reg ;              \n";
r8_waddr  << " 			BN_D21_reg <= BN_D20_reg ;              \n";
r8_waddr  << " 			BND_out    <= BN_D21_reg ;              \n";
r8_waddr  << " 			                                        \n";
r8_waddr  << " 			MA_D0_reg  <= MA_in ;                   \n";
r8_waddr  << " 			MA_D1_reg  <= MA_D0_reg ;               \n";
r8_waddr  << " 			MA_D2_reg  <= MA_D1_reg ;               \n";
r8_waddr  << " 			MA_D3_reg  <= MA_D2_reg ;               \n";
r8_waddr  << " 			MA_D4_reg  <= MA_D3_reg ;               \n";
r8_waddr  << " 			MA_D5_reg  <= MA_D4_reg ;               \n";
r8_waddr  << " 			MA_D6_reg  <= MA_D5_reg ;               \n";
r8_waddr  << " 			MA_D7_reg  <= MA_D6_reg ;               \n";
r8_waddr  << " 			MA_D8_reg  <= MA_D7_reg ;               \n";
r8_waddr  << " 			MA_D9_reg  <= MA_D8_reg ;               \n";
r8_waddr  << " 			MA_D10_reg <= MA_D9_reg ;               \n";
r8_waddr  << " 			MA_D11_reg <= MA_D10_reg ;              \n";
r8_waddr  << " 			MA_D12_reg <= MA_D11_reg ;              \n";
r8_waddr  << " 			MA_D13_reg <= MA_D12_reg ;              \n";
r8_waddr  << " 			MA_D14_reg <= MA_D13_reg ;              \n";
r8_waddr  << " 			MA_D15_reg <= MA_D14_reg ;              \n";
r8_waddr  << " 			MA_D16_reg <= MA_D15_reg ;              \n";
r8_waddr  << " 			MA_D17_reg <= MA_D16_reg ;              \n";
r8_waddr  << " 			MA_D18_reg <= MA_D17_reg ;              \n";
r8_waddr  << " 			MA_D19_reg <= MA_D18_reg ;              \n";
r8_waddr  << " 			MA_D20_reg <= MA_D19_reg ;              \n";
r8_waddr  << " 			MA_D21_reg <= MA_D20_reg ;              \n";
r8_waddr  << " 			MA_D22_reg <= MA_D21_reg ;              \n";
r8_waddr  << " 			WMA_out    <= MA_D22_reg ;              \n";
r8_waddr  << " 		end                                         \n";
r8_waddr  << " 	end                                             \n";
r8_waddr  << "                                                  \n";
r8_waddr  << " endmodule                                        \n";
           
     r8_waddr.close();     
}
void CenCtrl::R8_WD_buf(std::string string_in){
     std::ofstream r8_wd_buf;
     std::string        string_buf = "/R8_WD_buf.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_wd_buf.open(ss.str());
 r8_wd_buf << " //==================================================               \n";
 r8_wd_buf << " //                                           \n";
 r8_wd_buf << " //Date       : 2018/8/1                                            \n";
 r8_wd_buf << " //Note       : Radix-8 Write Data buffer (4x1) 8-stage pipeline    \n";
 r8_wd_buf << " //==================================================               \n";
 r8_wd_buf << " `timescale 1 ns/1 ps                                               \n";
 r8_wd_buf << " module R8_WD_buf(RDC0_D_out,                                       \n";
 r8_wd_buf << " 			     RDC1_D_out,                                       \n";
 r8_wd_buf << " 				 RDC2_D_out,                                       \n";
 r8_wd_buf << " 				 RDC3_D_out,                                       \n";
 r8_wd_buf << " 				 RDC4_D_out,                                       \n";
 r8_wd_buf << " 				 RDC5_D_out,                                       \n";
 r8_wd_buf << " 				 RDC6_D_out,                                       \n";
 r8_wd_buf << " 				 RDC7_D_out,                                       \n";
 r8_wd_buf << " 		         RDC0_in,                                          \n";
 r8_wd_buf << " 				 RDC1_in,                                          \n";
 r8_wd_buf << " 				 RDC2_in,                                          \n";
 r8_wd_buf << " 				 RDC3_in,                                          \n";
 r8_wd_buf << " 				 RDC4_in,                                          \n";
 r8_wd_buf << " 				 RDC5_in,                                          \n";
 r8_wd_buf << " 				 RDC6_in,                                          \n";
 r8_wd_buf << " 				 RDC7_in,                                          \n";
 r8_wd_buf << "                  rst_n,                                            \n";
 r8_wd_buf << "                  clk                                               \n";
 r8_wd_buf << "                  ) ;                                               \n";
 r8_wd_buf << " parameter P_WIDTH     = 64 ;                                       \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " parameter P_ZERO    = 64'h0 ;                                      \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC0_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC1_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC2_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC3_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC4_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC5_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC6_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC7_D_out ;                                  \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC0_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC1_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC2_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC3_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC4_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC5_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC6_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC7_in ;                                      \n";
 r8_wd_buf << " input               rst_n ;                                        \n";
 r8_wd_buf << " input               clk ;                                          \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D_out ;                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D6_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D7_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " 	//RDC output delay 9 cycles                                    \n";
r8_wd_buf  << " 	always @(posedge clk or negedge rst_n) begin                   \n";
r8_wd_buf  << " 		if(~rst_n) begin                                           \n";
r8_wd_buf  << " 			RDC0_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC0_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC1_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC1_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC2_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC2_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC3_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC3_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC4_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC4_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC5_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC5_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC6_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC6_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC7_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC7_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D7_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 		end                                                        \n";
r8_wd_buf  << " 		else begin                                                 \n";
r8_wd_buf  << " 			RDC0_D0_reg  <= RDC0_in ;                              \n";
r8_wd_buf  << " 			RDC0_D1_reg  <= RDC0_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D2_reg  <= RDC0_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D3_reg  <= RDC0_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D4_reg  <= RDC0_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D5_reg  <= RDC0_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D6_reg  <= RDC0_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D7_reg  <= RDC0_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D_out   <= RDC0_D7_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC1_D0_reg  <= RDC1_in ;                              \n";
r8_wd_buf  << " 			RDC1_D1_reg  <= RDC1_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D2_reg  <= RDC1_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D3_reg  <= RDC1_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D4_reg  <= RDC1_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D5_reg  <= RDC1_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D6_reg  <= RDC1_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D7_reg  <= RDC1_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D_out   <= RDC1_D7_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC2_D0_reg  <= RDC2_in ;                              \n";
r8_wd_buf  << " 			RDC2_D1_reg  <= RDC2_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D2_reg  <= RDC2_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D3_reg  <= RDC2_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D4_reg  <= RDC2_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D5_reg  <= RDC2_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D6_reg  <= RDC2_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D7_reg  <= RDC2_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D_out   <= RDC2_D7_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC3_D0_reg  <= RDC3_in ;                              \n";
r8_wd_buf  << " 			RDC3_D1_reg  <= RDC3_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D2_reg  <= RDC3_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D3_reg  <= RDC3_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D4_reg  <= RDC3_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D5_reg  <= RDC3_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D6_reg  <= RDC3_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D7_reg  <= RDC3_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D_out   <= RDC3_D7_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC4_D0_reg  <= RDC4_in ;                              \n";
r8_wd_buf  << " 			RDC4_D1_reg  <= RDC4_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D2_reg  <= RDC4_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D3_reg  <= RDC4_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D4_reg  <= RDC4_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D5_reg  <= RDC4_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D6_reg  <= RDC4_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D7_reg  <= RDC4_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D_out   <= RDC4_D7_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC5_D0_reg  <= RDC5_in ;                              \n";
r8_wd_buf  << " 			RDC5_D1_reg  <= RDC5_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D2_reg  <= RDC5_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D3_reg  <= RDC5_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D4_reg  <= RDC5_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D5_reg  <= RDC5_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D6_reg  <= RDC5_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D7_reg  <= RDC5_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D_out   <= RDC5_D7_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC6_D0_reg  <= RDC6_in ;                              \n";
r8_wd_buf  << " 			RDC6_D1_reg  <= RDC6_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D2_reg  <= RDC6_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D3_reg  <= RDC6_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D4_reg  <= RDC6_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D5_reg  <= RDC6_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D6_reg  <= RDC6_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D7_reg  <= RDC6_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D_out   <= RDC6_D7_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC7_D0_reg  <= RDC7_in ;                              \n";
r8_wd_buf  << " 			RDC7_D1_reg  <= RDC7_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D2_reg  <= RDC7_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D3_reg  <= RDC7_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D4_reg  <= RDC7_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D5_reg  <= RDC7_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D6_reg  <= RDC7_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D7_reg  <= RDC7_D6_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D_out   <= RDC7_D7_reg ;                          \n";
r8_wd_buf  << " 			                                                       \n";
r8_wd_buf  << " 		end                                                        \n";
r8_wd_buf  << " 	end                                                            \n";
 r8_wd_buf << " endmodule                                                          \n";         
     r8_wd_buf.close();     
}

//---
void CenCtrl::Ctrl_PipeReg1_r8_R2P(std::string string_in){
     std::ofstream ctrl_pipereg1_r8;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     ctrl_pipereg1_r8.open(ss.str());
 ctrl_pipereg1_r8 << " //==================================================                                     \n";
 ctrl_pipereg1_r8 << " //                                                                 \n";
 ctrl_pipereg1_r8 << " //Date       : 2018/8/1                                                                  \n";
 ctrl_pipereg1_r8 << " //Note       : Pipeline Register1 for Control signal                                     \n";
 ctrl_pipereg1_r8 << " //==================================================                                     \n";
 ctrl_pipereg1_r8 << " `timescale 1 ns/1 ps                                                                     \n";
 ctrl_pipereg1_r8 << " module Ctrl_PipeReg1(mode_sel_Dout,                                                      \n";
 ctrl_pipereg1_r8 << " 				        Mul_sel_Dout,                                                       \n";
 ctrl_pipereg1_r8 << " 				        RDC_sel_Dout,                                                       \n";
 ctrl_pipereg1_r8 << " 				        FFT_FSmode_sel_Dout,                                                \n";
 ctrl_pipereg1_r8 << "                      mode_sel_in,                                                        \n";
 ctrl_pipereg1_r8 << " 			            Mul_sel_in,                                                         \n";
 ctrl_pipereg1_r8 << " 			            RDC_sel_in,                                                         \n";
 ctrl_pipereg1_r8 << " 			            FFT_FSmode_sel_in,                                                  \n";
 ctrl_pipereg1_r8 << "                      rst_n,                                                              \n";
 ctrl_pipereg1_r8 << "                      clk                                                                 \n";
 ctrl_pipereg1_r8 << "                      ) ;                                                                 \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " parameter RDC_WIDTH   = 3 ;                                                              \n";
 ctrl_pipereg1_r8 << " parameter RDC_ZERO    = 3'h0 ;                                                           \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " output                  mode_sel_Dout ;                                                  \n";
 ctrl_pipereg1_r8 << " output [1:0]            Mul_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r8 << " output [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                   \n";
 ctrl_pipereg1_r8 << " output [RDC_WIDTH-1:0]  FFT_FSmode_sel_Dout ;                                            \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " input                   mode_sel_in ;                                                    \n";
 ctrl_pipereg1_r8 << " input  [1:0]            Mul_sel_in ;                                                     \n";
 ctrl_pipereg1_r8 << " input  [RDC_WIDTH-1:0]  RDC_sel_in ;                                                     \n";
 ctrl_pipereg1_r8 << " input  [RDC_WIDTH-1:0]  FFT_FSmode_sel_in ;                                              \n";
 ctrl_pipereg1_r8 << " input                   rst_n ;                                                          \n";
 ctrl_pipereg1_r8 << " input                   clk ;                                                            \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_D0reg ;                                                    \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_D1reg ;                                                    \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_D2reg ;                                                    \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_D3reg ;                                                    \n";
 ctrl_pipereg1_r8 << " reg                  mode_sel_Dout ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_D3reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [1:0]            Mul_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D0reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D1reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D2reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D3reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D4reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D5reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_D6reg ;                                                     \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  RDC_sel_Dout ;                                                      \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D0reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D1reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D2reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D3reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D4reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D5reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_D6reg ;                                              \n";
 ctrl_pipereg1_r8 << " reg [RDC_WIDTH-1:0]  FFT_FSmode_sel_Dout ;                                               \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " 	//mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles       \n";
 ctrl_pipereg1_r8 << " 	always @(posedge clk or negedge rst_n) begin                                         \n";
 ctrl_pipereg1_r8 << " 		if(~rst_n) begin                                                                 \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D0reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D1reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D2reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D3reg <= 1'b0 ;                                                     \n";
 ctrl_pipereg1_r8 << " 			mode_sel_Dout <= 1'b0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D0reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D1reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D2reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D3reg <= 2'd0 ;                                                      \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_Dout <= 2'd0 ;                                                       \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D0reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D1reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D2reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D3reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D4reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D5reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D6reg <= RDC_ZERO ;                                                  \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_Dout <= RDC_ZERO ;                                                   \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D0reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D1reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D2reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D3reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D4reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D5reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D6reg <= RDC_ZERO ;                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_Dout <= RDC_ZERO ;                                            \n";
 ctrl_pipereg1_r8 << " 		end                                                                              \n";
 ctrl_pipereg1_r8 << " 		else begin                                                                       \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D0reg <= mode_sel_in ;                                              \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D1reg <= mode_sel_D0reg ;                                           \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D2reg <= mode_sel_D1reg ;                                           \n";
 ctrl_pipereg1_r8 << " 			mode_sel_D3reg <= mode_sel_D2reg ;                                           \n";
 ctrl_pipereg1_r8 << " 			mode_sel_Dout <= mode_sel_D3reg ;                                            \n";
 ctrl_pipereg1_r8 << " 			//                                                                           \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D0reg <= Mul_sel_in ;                                                \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_D3reg <= Mul_sel_D2reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			Mul_sel_Dout <= Mul_sel_D3reg ;                                              \n";
 ctrl_pipereg1_r8 << " 			//                                                                           \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D0reg <= RDC_sel_in ;                                                \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_D6reg <= RDC_sel_D5reg ;                                             \n";
 ctrl_pipereg1_r8 << " 			RDC_sel_Dout <= RDC_sel_D6reg ;                                              \n";
 ctrl_pipereg1_r8 << " 			//                                                                           \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D0reg <= FFT_FSmode_sel_in ;                                  \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D1reg <= FFT_FSmode_sel_D0reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D2reg <= FFT_FSmode_sel_D1reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D3reg <= FFT_FSmode_sel_D2reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D4reg <= FFT_FSmode_sel_D3reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D5reg <= FFT_FSmode_sel_D4reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_D6reg <= FFT_FSmode_sel_D5reg ;                               \n";
 ctrl_pipereg1_r8 << " 			FFT_FSmode_sel_Dout <= FFT_FSmode_sel_D6reg ;                                \n";
 ctrl_pipereg1_r8 << " 		end                                                                              \n";
 ctrl_pipereg1_r8 << " 	end                                                                                  \n";
 ctrl_pipereg1_r8 << "                                                                                          \n";
 ctrl_pipereg1_r8 << " endmodule                                                                                \n";     
     ctrl_pipereg1_r8.close();         
}
void CenCtrl::R8_ROMPipeReg1_R2P(std::string string_in){
     std::ofstream r8_rompipereg1;
     std::string        string_buf = "/R8_ROMPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_rompipereg1.open(ss.str());
 r8_rompipereg1 << " //==================================================                          \n";
 r8_rompipereg1 << " //                                                      \n";
 r8_rompipereg1 << " //Date       : 2018/8/1                                                       \n";
 r8_rompipereg1 << " //Note       : Pipeline Register1 for ROM output delay 4-cycle                \n";
 r8_rompipereg1 << " //==================================================                          \n";
 r8_rompipereg1 << " `timescale 1 ns/1 ps                                                          \n";
 r8_rompipereg1 << " module R8_ROMPipeReg1(ROMD0_Dout,                                             \n";
 r8_rompipereg1 << " 				      ROMD1_Dout,				                               \n";
 r8_rompipereg1 << " 				      ROMD2_Dout,				                               \n";
 r8_rompipereg1 << " 				      ROMD3_Dout,				                               \n";
 r8_rompipereg1 << " 					  IFFTROMD0_Dout,                                          \n";
 r8_rompipereg1 << " 				      IFFTROMD1_Dout,				                           \n";
 r8_rompipereg1 << " 				      IFFTROMD2_Dout,				                           \n";
 r8_rompipereg1 << " 				      IFFTROMD3_Dout,				                           \n";
 r8_rompipereg1 << " 			          ROMD0_in,                                                \n";
 r8_rompipereg1 << " 					  ROMD1_in,					                               \n";
 r8_rompipereg1 << " 					  ROMD2_in,					                               \n";
 r8_rompipereg1 << " 					  ROMD3_in,					                               \n";
 r8_rompipereg1 << " 					  IFFTROMD0_in,                                            \n";
 r8_rompipereg1 << " 					  IFFTROMD1_in,					                           \n";
 r8_rompipereg1 << " 					  IFFTROMD2_in,					                           \n";
 r8_rompipereg1 << " 					  IFFTROMD3_in,					                           \n";
 r8_rompipereg1 << "                       rst_n,                                                  \n";
 r8_rompipereg1 << "                       clk                                                     \n";
 r8_rompipereg1 << "                       ) ;                                                     \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " parameter P_WIDTH   = 64 ;					                                   \n";
 r8_rompipereg1 << " parameter SD_WIDTH  = 128 ;                                                   \n";
 r8_rompipereg1 << " parameter P_ZERO    = 64'h0 ;                                                 \n";
 r8_rompipereg1 << " parameter SD_ZERO   = 128'h0 ;                                                \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " output [P_WIDTH-1:0]    ROMD0_Dout ;                                          \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD1_Dout ;                                          \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD2_Dout ;                                          \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD3_Dout ;                                          \n";
 r8_rompipereg1 << " output [P_WIDTH-1:0]    IFFTROMD0_Dout ;                                      \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                                      \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                                      \n";
 r8_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                                      \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " input  [P_WIDTH-1:0]    ROMD0_in ;                                            \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD1_in ;                                            \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD2_in ;                                            \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD3_in ;                                            \n";
 r8_rompipereg1 << " input  [P_WIDTH-1:0]    IFFTROMD0_in ;                                        \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD1_in ;                                        \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD2_in ;                                        \n";
 r8_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD3_in ;                                        \n";
 r8_rompipereg1 << " input                   rst_n ;                                               \n";
 r8_rompipereg1 << " input                   clk ;                                                 \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_Dout ;                                             \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_Dout ;                                             \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_Dout ;                                             \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_Dout ;                                             \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_Dout ;                                         \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                                         \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                                         \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                                         \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D2reg ;                                            \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D3reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D2reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D3reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D2reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D3reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D0reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D1reg ;                                            \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D2reg ;                                            \n"; 
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D3reg ;                                            \n"; 
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D2reg ;                                        \n";
 r8_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D3reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D2reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D3reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D2reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D3reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D0reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D1reg ;                                        \n";
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D2reg ;                                        \n"; 
 r8_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D3reg ;                                        \n"; 
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " 	//delay 5 cycles                                                           \n";
 r8_rompipereg1 << " 	always @(posedge clk or negedge rst_n) begin                               \n";
 r8_rompipereg1 << " 		if(~rst_n) begin                                                       \n";
 r8_rompipereg1 << " 			ROMD0_D0reg <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			ROMD0_D1reg <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			ROMD0_D2reg <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			ROMD0_D3reg <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			ROMD0_Dout  <= P_ZERO ;                                            \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD1_D0reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD1_D1reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD1_D2reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD1_D3reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD1_Dout  <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			ROMD2_D0reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD2_D1reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD2_D2reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD2_D3reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD2_Dout  <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			ROMD3_D0reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD3_D1reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD3_D2reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD3_D3reg <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			ROMD3_Dout  <= SD_ZERO ;                                           \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			IFFTROMD0_D0reg <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			IFFTROMD0_D1reg <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			IFFTROMD0_D2reg <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			IFFTROMD0_D3reg <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			IFFTROMD0_Dout  <= P_ZERO ;                                        \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD1_D0reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD1_D1reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD1_D2reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD1_D3reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD1_Dout  <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD2_D0reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD2_D1reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD2_D2reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD2_D3reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD2_Dout  <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD3_D0reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD3_D1reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD3_D2reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD3_D3reg <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 			IFFTROMD3_Dout  <= SD_ZERO ;                                       \n";
 r8_rompipereg1 << " 		end                                                                    \n";
 r8_rompipereg1 << " 		else begin                                                             \n";
 r8_rompipereg1 << " 			ROMD0_D0reg <= ROMD0_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD0_D1reg <= ROMD0_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD0_D2reg <= ROMD0_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD0_D3reg <= ROMD0_D2reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD0_Dout  <= ROMD0_D3reg ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD1_D0reg <= ROMD1_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD1_D1reg <= ROMD1_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD1_D2reg <= ROMD1_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD1_D3reg <= ROMD1_D2reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD1_Dout  <= ROMD1_D3reg ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD2_D0reg <= ROMD2_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD2_D1reg <= ROMD2_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD2_D2reg <= ROMD2_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD2_D3reg <= ROMD2_D2reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD2_Dout  <= ROMD2_D3reg ;                                       \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			ROMD3_D0reg <= ROMD3_in ;                                          \n";
 r8_rompipereg1 << " 			ROMD3_D1reg <= ROMD3_D0reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD3_D2reg <= ROMD3_D1reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD3_D3reg <= ROMD3_D2reg ;                                       \n";
 r8_rompipereg1 << " 			ROMD3_Dout  <= ROMD3_D3reg ;                                       \n";
 r8_rompipereg1 << " 			//---                                                              \n";
 r8_rompipereg1 << " 			IFFTROMD0_D0reg <= IFFTROMD0_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD0_D1reg <= IFFTROMD0_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD0_D2reg <= IFFTROMD0_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD0_D3reg <= IFFTROMD0_D2reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD0_Dout  <= IFFTROMD0_D3reg ;                               \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD1_D0reg <= IFFTROMD1_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD1_D1reg <= IFFTROMD1_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD1_D2reg <= IFFTROMD1_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD1_D3reg <= IFFTROMD1_D2reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD1_Dout  <= IFFTROMD1_D3reg ;                               \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD2_D0reg <= IFFTROMD2_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD2_D1reg <= IFFTROMD2_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD2_D2reg <= IFFTROMD2_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD2_D3reg <= IFFTROMD2_D2reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD2_Dout  <= IFFTROMD2_D3reg ;                               \n";
 r8_rompipereg1 << " 			//                                                                 \n";
 r8_rompipereg1 << " 			IFFTROMD3_D0reg <= IFFTROMD3_in ;                                  \n";
 r8_rompipereg1 << " 			IFFTROMD3_D1reg <= IFFTROMD3_D0reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD3_D2reg <= IFFTROMD3_D1reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD3_D3reg <= IFFTROMD3_D2reg ;                               \n";
 r8_rompipereg1 << " 			IFFTROMD3_Dout  <= IFFTROMD3_D3reg ;                               \n";
 r8_rompipereg1 << " 		end                                                                    \n";
 r8_rompipereg1 << " 	end                                                                        \n";
 r8_rompipereg1 << "                                                                               \n";
 r8_rompipereg1 << " endmodule                                                                     \n";     
     r8_rompipereg1.close();         
}
void CenCtrl::R8_WD_buf_R2P(std::string string_in){
     std::ofstream r8_wd_buf;
     std::string        string_buf = "/R8_WD_buf.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r8_wd_buf.open(ss.str());
 r8_wd_buf << " //==================================================               \n";
 r8_wd_buf << " //                                           \n";
 r8_wd_buf << " //Date       : 2018/8/1                                            \n";
 r8_wd_buf << " //Note       : Radix-8 Write Data buffer (4x1) 8-stage pipeline    \n";
 r8_wd_buf << " //==================================================               \n";
 r8_wd_buf << " `timescale 1 ns/1 ps                                               \n";
 r8_wd_buf << " module R8_WD_buf(RDC0_D_out,                                       \n";
 r8_wd_buf << " 			     RDC1_D_out,                                       \n";
 r8_wd_buf << " 				 RDC2_D_out,                                       \n";
 r8_wd_buf << " 				 RDC3_D_out,                                       \n";
 r8_wd_buf << " 				 RDC4_D_out,                                       \n";
 r8_wd_buf << " 				 RDC5_D_out,                                       \n";
 r8_wd_buf << " 				 RDC6_D_out,                                       \n";
 r8_wd_buf << " 				 RDC7_D_out,                                       \n";
 r8_wd_buf << " 		         RDC0_in,                                          \n";
 r8_wd_buf << " 				 RDC1_in,                                          \n";
 r8_wd_buf << " 				 RDC2_in,                                          \n";
 r8_wd_buf << " 				 RDC3_in,                                          \n";
 r8_wd_buf << " 				 RDC4_in,                                          \n";
 r8_wd_buf << " 				 RDC5_in,                                          \n";
 r8_wd_buf << " 				 RDC6_in,                                          \n";
 r8_wd_buf << " 				 RDC7_in,                                          \n";
 r8_wd_buf << "                  rst_n,                                            \n";
 r8_wd_buf << "                  clk                                               \n";
 r8_wd_buf << "                  ) ;                                               \n";
 r8_wd_buf << " parameter P_WIDTH     = 64 ;                                       \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " parameter P_ZERO    = 64'h0 ;                                      \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC0_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC1_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC2_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC3_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC4_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC5_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC6_D_out ;                                  \n";
 r8_wd_buf << " output [P_WIDTH-1:0] RDC7_D_out ;                                  \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC0_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC1_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC2_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC3_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC4_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC5_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC6_in ;                                      \n";
 r8_wd_buf << " input [P_WIDTH-1:0] RDC7_in ;                                      \n";
 r8_wd_buf << " input               rst_n ;                                        \n";
 r8_wd_buf << " input               clk ;                                          \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << "                                                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D_out ;                                    \n";
 r8_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D_out ;                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC0_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC1_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC2_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC3_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC4_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC5_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC6_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D0_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D1_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D2_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D3_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D4_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D5_reg ;                                   \n";
r8_wd_buf  << " reg  [P_WIDTH-1:0] RDC7_D6_reg ;                                   \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << "                                                                    \n";
r8_wd_buf  << " 	//RDC output delay 8 cycles                                    \n";
r8_wd_buf  << " 	always @(posedge clk or negedge rst_n) begin                   \n";
r8_wd_buf  << " 		if(~rst_n) begin                                           \n";
r8_wd_buf  << " 			RDC0_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC0_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC0_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC1_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC1_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC1_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC2_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC2_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC2_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC3_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC3_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC3_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC4_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC4_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC4_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC5_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC5_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC5_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC6_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC6_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC6_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC7_D0_reg  <= P_ZERO ;                               \n";
r8_wd_buf  << " 			RDC7_D1_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D2_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D3_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D4_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D5_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D6_reg  <= P_ZERO;                                \n";
r8_wd_buf  << " 			RDC7_D_out   <= P_ZERO ;                               \n";
r8_wd_buf  << " 		end                                                        \n";
r8_wd_buf  << " 		else begin                                                 \n";
r8_wd_buf  << " 			RDC0_D0_reg  <= RDC0_in ;                              \n";
r8_wd_buf  << " 			RDC0_D1_reg  <= RDC0_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D2_reg  <= RDC0_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D3_reg  <= RDC0_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D4_reg  <= RDC0_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D5_reg  <= RDC0_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D6_reg  <= RDC0_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC0_D_out   <= RDC0_D6_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC1_D0_reg  <= RDC1_in ;                              \n";
r8_wd_buf  << " 			RDC1_D1_reg  <= RDC1_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D2_reg  <= RDC1_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D3_reg  <= RDC1_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D4_reg  <= RDC1_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D5_reg  <= RDC1_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D6_reg  <= RDC1_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC1_D_out   <= RDC1_D6_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC2_D0_reg  <= RDC2_in ;                              \n";
r8_wd_buf  << " 			RDC2_D1_reg  <= RDC2_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D2_reg  <= RDC2_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D3_reg  <= RDC2_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D4_reg  <= RDC2_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D5_reg  <= RDC2_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D6_reg  <= RDC2_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC2_D_out   <= RDC2_D6_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC3_D0_reg  <= RDC3_in ;                              \n";
r8_wd_buf  << " 			RDC3_D1_reg  <= RDC3_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D2_reg  <= RDC3_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D3_reg  <= RDC3_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D4_reg  <= RDC3_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D5_reg  <= RDC3_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D6_reg  <= RDC3_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC3_D_out   <= RDC3_D6_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC4_D0_reg  <= RDC4_in ;                              \n";
r8_wd_buf  << " 			RDC4_D1_reg  <= RDC4_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D2_reg  <= RDC4_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D3_reg  <= RDC4_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D4_reg  <= RDC4_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D5_reg  <= RDC4_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D6_reg  <= RDC4_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC4_D_out   <= RDC4_D6_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC5_D0_reg  <= RDC5_in ;                              \n";
r8_wd_buf  << " 			RDC5_D1_reg  <= RDC5_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D2_reg  <= RDC5_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D3_reg  <= RDC5_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D4_reg  <= RDC5_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D5_reg  <= RDC5_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D6_reg  <= RDC5_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC5_D_out   <= RDC5_D6_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC6_D0_reg  <= RDC6_in ;                              \n";
r8_wd_buf  << " 			RDC6_D1_reg  <= RDC6_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D2_reg  <= RDC6_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D3_reg  <= RDC6_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D4_reg  <= RDC6_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D5_reg  <= RDC6_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D6_reg  <= RDC6_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC6_D_out   <= RDC6_D6_reg ;                          \n";
r8_wd_buf  << " 			//                                                     \n";
r8_wd_buf  << " 			RDC7_D0_reg  <= RDC7_in ;                              \n";
r8_wd_buf  << " 			RDC7_D1_reg  <= RDC7_D0_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D2_reg  <= RDC7_D1_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D3_reg  <= RDC7_D2_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D4_reg  <= RDC7_D3_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D5_reg  <= RDC7_D4_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D6_reg  <= RDC7_D5_reg ;                          \n";
r8_wd_buf  << " 			RDC7_D_out   <= RDC7_D6_reg ;                          \n";
r8_wd_buf  << " 			                                                       \n";
r8_wd_buf  << " 		end                                                        \n";
r8_wd_buf  << " 	end                                                            \n";
 r8_wd_buf << " endmodule                                                          \n";         
     r8_wd_buf.close();     
}
//radix-16
void CenCtrl::R16_InpipeReg(std::string string_in){
     std::ofstream r16_inpipereg;
     std::string        string_buf = "/R16_InpipeReg.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     r16_inpipereg.open(ss.str());    	
r16_inpipereg << "//===================================                               \n";
r16_inpipereg << "//Note:input data pipline buffer                                    \n";
r16_inpipereg << "//===================================                               \n";
r16_inpipereg << "`timescale 1ns/1ps                                                  \n";
r16_inpipereg << "module R16_InpipeReg(                                               \n";
r16_inpipereg << "        ExtValid_in,                                                \n";
r16_inpipereg << "        ExtB0_D0_in,                                                \n";
r16_inpipereg << "        ExtB0_D1_in,                                                \n";
r16_inpipereg << "        ExtB0_D2_in,                                                \n";
r16_inpipereg << "        ExtB0_D3_in,                                                \n";
r16_inpipereg << "        ExtB0_D4_in,                                                \n";
r16_inpipereg << "        ExtB0_D5_in,                                                \n";
r16_inpipereg << "        ExtB0_D6_in,                                                \n";
r16_inpipereg << "        ExtB0_D7_in,                                                \n";
r16_inpipereg << "        ExtB1_D0_in,                                                \n";
r16_inpipereg << "        ExtB1_D1_in,                                                \n";
r16_inpipereg << "        ExtB1_D2_in,                                                \n";
r16_inpipereg << "        ExtB1_D3_in,                                                \n";
r16_inpipereg << "        ExtB1_D4_in,                                                \n";
r16_inpipereg << "        ExtB1_D5_in,                                                \n";
r16_inpipereg << "        ExtB1_D6_in,                                                \n";
r16_inpipereg << "        ExtB1_D7_in,                                                \n";
r16_inpipereg << "        ExtValid_out,                                               \n";
r16_inpipereg << "        ExtB0_D0_out,                                               \n";
r16_inpipereg << "        ExtB0_D1_out,                                               \n";
r16_inpipereg << "        ExtB0_D2_out,                                               \n";
r16_inpipereg << "        ExtB0_D3_out,                                               \n";
r16_inpipereg << "        ExtB0_D4_out,                                               \n";
r16_inpipereg << "        ExtB0_D5_out,                                               \n";
r16_inpipereg << "        ExtB0_D6_out,                                               \n";
r16_inpipereg << "        ExtB0_D7_out,                                               \n";
r16_inpipereg << "        ExtB1_D0_out,                                               \n";
r16_inpipereg << "        ExtB1_D1_out,                                               \n";
r16_inpipereg << "        ExtB1_D2_out,                                               \n";
r16_inpipereg << "        ExtB1_D3_out,                                               \n";
r16_inpipereg << "        ExtB1_D4_out,                                               \n";
r16_inpipereg << "        ExtB1_D5_out,                                               \n";
r16_inpipereg << "        ExtB1_D6_out,                                               \n";
r16_inpipereg << "        ExtB1_D7_out,                                               \n";
r16_inpipereg << "        rst_n,                                                      \n";
r16_inpipereg << "        clk                                                         \n";
r16_inpipereg << ");                                                                  \n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "    parameter CP_WIDTH = " << CP_width <<";\n";
r16_inpipereg << "    parameter CP_ZERO  = " << CP_width <<"'d0;\n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "    output                ExtValid_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D0_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D1_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D2_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D3_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D4_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D5_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D6_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB0_D7_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D0_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D1_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D2_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D3_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D4_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D5_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D6_out;                             \n";
r16_inpipereg << "    output [CP_WIDTH-1:0] ExtB1_D7_out;                             \n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "    input                 ExtValid_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D0_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D1_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D2_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D3_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D4_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D5_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D6_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB0_D7_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D0_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D1_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D2_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D3_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D4_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D5_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D6_in;                              \n";
r16_inpipereg << "    input  [CP_WIDTH-1:0] ExtB1_D7_in;                              \n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "    input                rst_n;                                     \n";
r16_inpipereg << "    input                clk;                                       \n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "    reg                ExtValid_reg0;                               \n";
r16_inpipereg << "    reg                ExtValid_reg1;                               \n";
r16_inpipereg << "    reg                ExtValid_reg2;                               \n";
r16_inpipereg << "    reg                ExtValid_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D0_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D0_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D1_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D1_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D2_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D2_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D3_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D3_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D4_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D4_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D5_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D5_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D6_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D6_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D7_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB0_D7_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D0_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D0_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D1_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D1_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D2_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D2_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D3_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D3_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D4_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D4_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D5_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D5_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D6_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D6_out;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D7_d;                                \n";
r16_inpipereg << "    reg [CP_WIDTH-1:0] ExtB1_D7_out;                                \n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "                                                                    \n";
r16_inpipereg << "    always@(posedge clk or negedge rst_n)begin                      \n";
r16_inpipereg << "        if(~rst_n)begin                                             \n";
r16_inpipereg << "            ExtValid_reg0     <= 1'b0    ;                          \n";
r16_inpipereg << "            ExtValid_reg1     <= 1'b0    ;                          \n";
r16_inpipereg << "            ExtValid_reg2     <= 1'b0    ;                          \n";
r16_inpipereg << "            ExtValid_out      <= 1'b0    ;                          \n";
r16_inpipereg << "            //                                                      \n";
r16_inpipereg << "            ExtB0_D0_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D1_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D2_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D3_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D4_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D5_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D6_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D7_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D0_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D1_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D2_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D3_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D4_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D5_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D6_out      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D7_out      <= CP_ZERO  ;                          \n";
//
r16_inpipereg << "            ExtB0_D0_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D1_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D2_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D3_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D4_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D5_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D6_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB0_D7_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D0_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D1_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D2_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D3_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D4_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D5_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D6_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            ExtB1_D7_d      <= CP_ZERO  ;                          \n";
r16_inpipereg << "            //                                                      \n";
r16_inpipereg << "        end                                                         \n";
r16_inpipereg << "        else begin                                                  \n";
r16_inpipereg << "            ExtValid_reg0     <= ExtValid_in     ;                  \n";
r16_inpipereg << "            ExtValid_reg1     <= ExtValid_reg0   ;                  \n";
r16_inpipereg << "            ExtValid_reg2     <= ExtValid_reg1   ;                  \n";
r16_inpipereg << "            ExtValid_out      <= ExtValid_reg2   ;                  \n";
r16_inpipereg << "            //                                                      \n";
r16_inpipereg << "            ExtB0_D0_d        <= ExtB0_D0_in     ;                  \n";
r16_inpipereg << "            ExtB0_D0_out      <= ExtB0_D0_d      ;                  \n";
r16_inpipereg << "            ExtB0_D1_d        <= ExtB0_D1_in     ;                  \n";
r16_inpipereg << "            ExtB0_D1_out      <= ExtB0_D1_d      ;                  \n";
r16_inpipereg << "            ExtB0_D2_d        <= ExtB0_D2_in     ;                  \n";
r16_inpipereg << "            ExtB0_D2_out      <= ExtB0_D2_d      ;                  \n";
r16_inpipereg << "            ExtB0_D3_d        <= ExtB0_D3_in     ;                  \n";
r16_inpipereg << "            ExtB0_D3_out      <= ExtB0_D3_d      ;                  \n";
r16_inpipereg << "            ExtB0_D4_d        <= ExtB0_D4_in     ;                  \n";
r16_inpipereg << "            ExtB0_D4_out      <= ExtB0_D4_d      ;                  \n";
r16_inpipereg << "            ExtB0_D5_d        <= ExtB0_D5_in     ;                  \n";
r16_inpipereg << "            ExtB0_D5_out      <= ExtB0_D5_d      ;                  \n";
r16_inpipereg << "            ExtB0_D6_d        <= ExtB0_D6_in     ;                  \n";
r16_inpipereg << "            ExtB0_D6_out      <= ExtB0_D6_d      ;                  \n";
r16_inpipereg << "            ExtB0_D7_d        <= ExtB0_D7_in     ;                  \n";
r16_inpipereg << "            ExtB0_D7_out      <= ExtB0_D7_d      ;                  \n";
r16_inpipereg << "            ExtB1_D0_d        <= ExtB1_D0_in     ;                  \n";
r16_inpipereg << "            ExtB1_D0_out      <= ExtB1_D0_d      ;                  \n";
r16_inpipereg << "            ExtB1_D1_d        <= ExtB1_D1_in     ;                  \n";
r16_inpipereg << "            ExtB1_D1_out      <= ExtB1_D1_d      ;                  \n";
r16_inpipereg << "            ExtB1_D2_d        <= ExtB1_D2_in     ;                  \n";
r16_inpipereg << "            ExtB1_D2_out      <= ExtB1_D2_d      ;                  \n";
r16_inpipereg << "            ExtB1_D3_d        <= ExtB1_D3_in     ;                  \n";
r16_inpipereg << "            ExtB1_D3_out      <= ExtB1_D3_d      ;                  \n";
r16_inpipereg << "            ExtB1_D4_d        <= ExtB1_D4_in     ;                  \n";
r16_inpipereg << "            ExtB1_D4_out      <= ExtB1_D4_d      ;                  \n";
r16_inpipereg << "            ExtB1_D5_d        <= ExtB1_D5_in     ;                  \n";
r16_inpipereg << "            ExtB1_D5_out      <= ExtB1_D5_d      ;                  \n";
r16_inpipereg << "            ExtB1_D6_d        <= ExtB1_D6_in     ;                  \n";
r16_inpipereg << "            ExtB1_D6_out      <= ExtB1_D6_d      ;                  \n";
r16_inpipereg << "            ExtB1_D7_d        <= ExtB1_D7_in     ;                  \n";
r16_inpipereg << "            ExtB1_D7_out      <= ExtB1_D7_d      ;                  \n";
r16_inpipereg << "        end                                                         \n";
r16_inpipereg << "    end                                                             \n";
r16_inpipereg << "endmodule	                                                          \n";
	 r16_inpipereg.close();
}

void CenCtrl::R16_BU_outpipe(std::string string_in){
	 std::ofstream r16_bu_outpipe;
     std::string        string_buf = "/R16_BU_outpipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_bu_outpipe.open(ss.str());
r16_bu_outpipe << "//=============================================\n";
r16_bu_outpipe << "//Writer:Shi-Yong Wu                           \n";
r16_bu_outpipe << "//                                             \n";
r16_bu_outpipe << "//Note:R16 data output pipe                     \n";
r16_bu_outpipe << "//=============================================\n";
r16_bu_outpipe << "module R16_BU_outpipe(                             \n";
r16_bu_outpipe << "  CRUD0_o,                                     \n";
r16_bu_outpipe << "  CRUD1_o,                                     \n";
r16_bu_outpipe << "  CRUD2_o,                                     \n";
r16_bu_outpipe << "  CRUD3_o,                                     \n";
r16_bu_outpipe << "  CRUD4_o,                                     \n";
r16_bu_outpipe << "  CRUD5_o,                                     \n";
r16_bu_outpipe << "  CRUD6_o,                                     \n";
r16_bu_outpipe << "  CRUD7_o,                                     \n";
r16_bu_outpipe << "  CRUD8_o,                                     \n";
r16_bu_outpipe << "  CRUD9_o,                                     \n";
r16_bu_outpipe << "  CRUD10_o,                                     \n";
r16_bu_outpipe << "  CRUD11_o,                                     \n";
r16_bu_outpipe << "  CRUD12_o,                                     \n";
r16_bu_outpipe << "  CRUD13_o,                                     \n";
r16_bu_outpipe << "  CRUD14_o,                                     \n";
r16_bu_outpipe << "  CRUD15_o,                                     \n";
r16_bu_outpipe << "  BR0_o,                                     \n";
r16_bu_outpipe << "  BR1_o,                                     \n";
r16_bu_outpipe << "  BR2_o,                                     \n";
r16_bu_outpipe << "  BR3_o,                                     \n";
r16_bu_outpipe << "  BR4_o,                                     \n";
r16_bu_outpipe << "  BR5_o,                                     \n";
r16_bu_outpipe << "  BR6_o,                                     \n";
r16_bu_outpipe << "  BR7_o,                                     \n";
r16_bu_outpipe << "  BR8_o,                                     \n";
r16_bu_outpipe << "  BR9_o,                                     \n";
r16_bu_outpipe << "  BR10_o,                                     \n";
r16_bu_outpipe << "  BR11_o,                                     \n";
r16_bu_outpipe << "  BR12_o,                                     \n";
r16_bu_outpipe << "  BR13_o,                                     \n";
r16_bu_outpipe << "  BR14_o,                                     \n";
r16_bu_outpipe << "  BR15_o,                                     \n";
r16_bu_outpipe << "  CRUD0_i,                                      \n";
r16_bu_outpipe << "  CRUD1_i,                                      \n";
r16_bu_outpipe << "  CRUD2_i,                                      \n";
r16_bu_outpipe << "  CRUD3_i,                                      \n";
r16_bu_outpipe << "  CRUD4_i,                                      \n";
r16_bu_outpipe << "  CRUD5_i,                                      \n";
r16_bu_outpipe << "  CRUD6_i,                                      \n";
r16_bu_outpipe << "  CRUD7_i,                                      \n";
r16_bu_outpipe << "  CRUD8_i,                                      \n";
r16_bu_outpipe << "  CRUD9_i,                                      \n";
r16_bu_outpipe << "  CRUD10_i,                                     \n";
r16_bu_outpipe << "  CRUD11_i,                                     \n";
r16_bu_outpipe << "  CRUD12_i,                                     \n";
r16_bu_outpipe << "  CRUD13_i,                                     \n";
r16_bu_outpipe << "  CRUD14_i,                                     \n";
r16_bu_outpipe << "  CRUD15_i,                                     \n";
r16_bu_outpipe << "  rst_n,                                        \n";
r16_bu_outpipe << "  clk                                           \n";
r16_bu_outpipe << ");                                              \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  parameter P_WIDTH    = " << "64;\n";
r16_bu_outpipe << "  parameter P_ZERO     = " << "64'd0;\n";
r16_bu_outpipe << "  parameter BRD_WIDTH  = " << (64-(2*CP_width)) <<";                      \n";
r16_bu_outpipe << "  parameter BRD_ZERO   = " << (64-(2*CP_width)) <<"'d0;                   \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD0_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD1_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD2_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD3_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD4_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD5_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD6_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD7_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD8_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD9_o;              \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD10_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD11_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD12_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD13_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD14_o;             \n";
r16_bu_outpipe << "  output [P_WIDTH-1:0] CRUD15_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR0_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR1_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR2_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR3_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR4_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR5_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR6_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR7_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR8_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR9_o;              \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR10_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR11_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR12_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR13_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR14_o;             \n";
r16_bu_outpipe << "  output [BRD_WIDTH-1:0] BR15_o;             \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD0_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD1_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD2_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD3_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD4_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD5_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD6_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD7_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD8_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD9_i;              \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD10_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD11_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD12_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD13_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD14_i;             \n";
r16_bu_outpipe << "  input  [P_WIDTH-1:0] CRUD15_i;             \n";
r16_bu_outpipe << "  input  				  rst_n;                \n";
r16_bu_outpipe << "  input 				  clk;                  \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD0_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD1_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD2_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD3_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD4_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD5_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD6_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD7_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD8_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD9_o;                  \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD10_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD11_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD12_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD13_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD14_o;                 \n";
r16_bu_outpipe << "  reg[P_WIDTH-1:0] CRUD15_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR0_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR1_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR2_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR3_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR4_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR5_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR6_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR7_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR8_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR9_o;                  \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR10_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR11_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR12_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR13_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR14_o;                 \n";
r16_bu_outpipe << "  reg[BRD_WIDTH-1:0] BR15_o;                 \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "  always@(posedge clk,negedge rst_n)begin       \n";
r16_bu_outpipe << "		if(~rst_n)begin                             \n";
r16_bu_outpipe << "		    	CRUD0_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD1_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD2_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD3_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD4_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD5_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD6_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD7_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD8_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD9_o    <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD10_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD11_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD12_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD13_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD14_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	CRUD15_o   <=  P_ZERO;               \n";
r16_bu_outpipe << "		    	BR0_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR1_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR2_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR3_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR4_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR5_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR6_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR7_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR8_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR9_o      <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR10_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR11_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR12_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR13_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR14_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		    	BR15_o     <=  BRD_ZERO;               \n";
r16_bu_outpipe << "		end                                         \n";
r16_bu_outpipe << "		else begin                                  \n";
r16_bu_outpipe << " 	       CRUD0_o    <=  CRUD0_i;                 \n";
r16_bu_outpipe << " 	       CRUD1_o    <=  CRUD1_i;                 \n";
r16_bu_outpipe << " 	       CRUD2_o    <=  CRUD2_i;                 \n";
r16_bu_outpipe << " 	       CRUD3_o    <=  CRUD3_i;                 \n";
r16_bu_outpipe << " 	       CRUD4_o    <=  CRUD4_i;                 \n";
r16_bu_outpipe << " 	       CRUD5_o    <=  CRUD5_i;                 \n";
r16_bu_outpipe << " 	       CRUD6_o    <=  CRUD6_i;                 \n";
r16_bu_outpipe << " 	       CRUD7_o    <=  CRUD7_i;                 \n";
r16_bu_outpipe << " 	       CRUD8_o    <=  CRUD8_i;                 \n";
r16_bu_outpipe << " 	       CRUD9_o    <=  CRUD9_i;                 \n";
r16_bu_outpipe << " 	       CRUD10_o   <=  CRUD10_i;                \n";
r16_bu_outpipe << " 	       CRUD11_o   <=  CRUD11_i;                \n";
r16_bu_outpipe << " 	       CRUD12_o   <=  CRUD12_i;                \n";
r16_bu_outpipe << " 	       CRUD13_o   <=  CRUD13_i;                \n";
r16_bu_outpipe << " 	       CRUD14_o   <=  CRUD14_i;                \n";
r16_bu_outpipe << " 	       CRUD15_o   <=  CRUD15_i;                \n";
r16_bu_outpipe << " 	       BR0_o      <=  CRUD0_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR1_o      <=  CRUD1_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR2_o      <=  CRUD2_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR3_o      <=  CRUD3_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR4_o      <=  CRUD4_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR5_o      <=  CRUD5_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR6_o      <=  CRUD6_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR7_o      <=  CRUD7_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR8_o      <=  CRUD8_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR9_o      <=  CRUD9_o["<< (63 - (2 * CP_width)) <<":0];                 \n";
r16_bu_outpipe << " 	       BR10_o     <=  CRUD10_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR11_o     <=  CRUD11_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR12_o     <=  CRUD12_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR13_o     <=  CRUD13_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR14_o     <=  CRUD14_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << " 	       BR15_o     <=  CRUD15_o["<< (63 - (2 * CP_width)) <<":0];                \n";
r16_bu_outpipe << "		end                                         \n";
r16_bu_outpipe << "  end                                           \n";
r16_bu_outpipe << "                                                \n";
r16_bu_outpipe << "endmodule                                       \n";	 
	 r16_bu_outpipe.close();
}

//radix-16 2020/02
void CenCtrl::CenCtrl_16(std::string string_in){
	 std::ofstream cenctrl;
     std::string        string_buf = "/CenCtrl.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 cenctrl.open(ss.str()); 
     cenctrl << " `timescale 1 ns/1 ps                                \n";
     cenctrl << " module CenCtrl(MulValid_out,                        \n";
     cenctrl << "                cen_out,                               \n";
     cenctrl << "                wen0_out,                              \n";
     cenctrl << "                wen1_out,                              \n";
     cenctrl << "                SD_sel_out,                            \n";
     cenctrl << "                ExtMA_out,                             \n";
     cenctrl << "                AGU_en_out,                            \n";
     cenctrl << "                RomCen_out,                            \n";
     cenctrl << "                mode_sel_out,                          \n";
     cenctrl << "                rc_sel_out,                            \n";
     cenctrl << "                m2_sel_out,                            \n";
     cenctrl << "                wrfd_en_out,                           \n";
     cenctrl << "                data_cnt_in,                           \n";
     cenctrl << "                BND_in,                                \n";
     cenctrl << "                ExtValid_in,                           \n";
     cenctrl << "                rst_n,                               \n";
     cenctrl << "                clk                                  \n";
     cenctrl << "                ) ;                                  \n";
     cenctrl << " 			   			                              \n";
     cenctrl << " parameter A_WIDTH  = " << addr_width     <<" ;\n";
     cenctrl << " parameter DC_WIDTH = " << data_cnt_width <<" ;\n";
     cenctrl << " parameter A_ZERO   = " << addr_width     <<"'h0;\n";
     cenctrl << "                                     \n";
     cenctrl << " parameter S_WIDTH   = 4 ;           \n";
     cenctrl << " //INITIAL                           \n";
     cenctrl << " parameter INI              = 4'd0 ; \n";
     cenctrl << " parameter LD_EXTD          = 4'd1 ; \n";
     cenctrl << " parameter LD_EXTDF         = 4'd2 ; \n";
     cenctrl << " parameter LD_STAGE1_ST     = 4'd3 ; \n";
     cenctrl << " parameter ST_STAGE1        = 4'd4 ; \n";
     cenctrl << " parameter WR_FIND          = 4'd5 ; \n";
     cenctrl << " parameter LD_STAGE2_ST     = 4'd6 ; \n";
     cenctrl << " parameter SET_IFFT         = 4'd7 ; \n";
     cenctrl << " parameter LD_IFFTSTAGE1_ST = 4'd8 ; \n";
     cenctrl << " parameter ST_IFFTSTAGE1    = 4'd9 ; \n";
     cenctrl << " parameter WR_IFFTFIND      = 4'd10;\n";
     cenctrl << " parameter LD_IFFTSTAGE2_ST = 4'd11;\n";
     cenctrl << " parameter SET_OP           = 4'd12; \n";
     cenctrl << " parameter SET_OPF          = 4'd13; \n";
     cenctrl << "   \n";
     
     cenctrl << " parameter EXTMA_V1 = " << addr_width << "'d" << (NO_LD-1) <<";\n";
     cenctrl << " parameter DCNT_V1  = " << data_cnt_width << "'d" << FFT_dc[No_stage-1] << ";\n";
     cenctrl << " parameter DCNT_V2  = " << data_cnt_width << "'d" << ceil((double)m/radix) + 4 << ";\n";
     cenctrl << " parameter DCNT_V3  = " << data_cnt_width << "'d" << NO_D_Muldata << ";\n";
	 for(unsigned long i = 0; i < (No_stage-1);i++){
		cenctrl << " parameter DCNT_V" << (i+4) <<"  = " << data_cnt_width << "'d" << FFT_dc[i] << ";\n";
     }
     cenctrl << " \n";
     cenctrl << " \n";
     cenctrl << " output               MulValid_out ; \n";
     cenctrl << " output               cen_out ;      \n";
     cenctrl << " output               wen0_out ;     \n";
     cenctrl << " output               wen1_out ;     \n";
     cenctrl << " output               SD_sel_out ;   \n";
     cenctrl << " output [A_WIDTH-1:0] ExtMA_out ;    \n";
     cenctrl << " output               AGU_en_out ;   \n";
     cenctrl << " output               RomCen_out ;   \n";
     cenctrl << " output               mode_sel_out ; \n";
     cenctrl << " output               rc_sel_out ;   \n";
     cenctrl << " output               m2_sel_out ;   \n";
     cenctrl << " output               wrfd_en_out ;  \n";
     cenctrl << "                                     \n";
     cenctrl << " input [DC_WIDTH-1:0] data_cnt_in ;  \n";
     cenctrl << " input                BND_in ;       \n";
     cenctrl << " input                ExtValid_in ;  \n";
     cenctrl << " input                rst_n ;        \n";
     cenctrl << " input                clk ;          \n";
     cenctrl << "                                     \n";
     cenctrl << "                                     \n";
     cenctrl << " reg   [S_WIDTH-1:0]  state ;        \n";
     cenctrl << " reg   [S_WIDTH-1:0]  next_state ;   \n";
     cenctrl << "                                     \n";
     cenctrl << " reg   [A_WIDTH-1:0]  ExtMA_out ;    \n";
     cenctrl << " reg   [5:0]          WenCnt_reg ;   \n";
     cenctrl << " reg                  m2_sel_out ;   \n";
     cenctrl << " reg   [5:0]          Cnt1_reg ;     \n";
     cenctrl << "                                     \n";
     cenctrl << "                                     \n";
     cenctrl << " wire  [A_WIDTH-1:0]  ExtMA_wire ;   \n";
     cenctrl << " wire  [5:0]          WenCnt_wire ;  \n";
     cenctrl << " wire                 m2_sel_wire ;  \n";
     cenctrl << " wire  [5:0]          Cnt1_wire ;    \n";
     cenctrl << "                                     \n";
     cenctrl << "                                     \n";
     cenctrl << " 	//                                \n";
     cenctrl << " 	assign cen_out = (state == INI) ; \n";
     cenctrl << " 	                                  \n";
     cenctrl << " 	//                                \n";
     cenctrl << " 	assign wen0_out = ((state == INI)||(state == LD_EXTDF)||(state == LD_STAGE1_ST)                                                                                \n";
     cenctrl << " 	                   ||(state == LD_STAGE2_ST)||(state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||(state == LD_IFFTSTAGE2_ST)                                    \n";
     cenctrl << " 					   ||(state == SET_OP)||(state == SET_OPF))? 1'b1 :                                                                                            \n";
     cenctrl << " 	                  ((state == ST_STAGE1)||(state == ST_IFFTSTAGE1)||(state == WR_FIND)||(state == WR_IFFTFIND))? BND_in : 1'b0 ;                                \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	assign wen1_out = ((state == INI)||(state == LD_EXTDF)||(state == LD_STAGE1_ST)                                                                                \n";
     cenctrl << " 	                   ||(state == LD_STAGE2_ST)||(state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)                                                                 \n";
     cenctrl << " 					   ||(state == LD_IFFTSTAGE2_ST)||(state == SET_OP)||(state == SET_OPF))? 1'b1 :                                                               \n";
     cenctrl << " 	                  ((state == ST_STAGE1)||(state == ST_IFFTSTAGE1)||(state == WR_FIND)||(state == WR_IFFTFIND))? (~BND_in) : 1'b0 ;\n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	assign SD_sel_out = (state == INI)||(state == LD_EXTD) ;                                                                                                       \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	// Ext Memory Address out                                                                                                                                      \n";
     cenctrl << " 	assign ExtMA_wire = ((state == LD_EXTD))? (ExtMA_out + 1'b1) : ExtMA_out ;                                                                                     \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	assign AGU_en_out = (state == LD_EXTDF)||(state == LD_STAGE1_ST)||(state == ST_STAGE1)                                                                         \n";
     cenctrl << " 	                    ||(state == LD_STAGE2_ST)||(state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)                                                                \n";
     cenctrl << " 						||(state == ST_IFFTSTAGE1)||(state == LD_IFFTSTAGE2_ST)||(state == SET_OP);                                                                \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	assign RomCen_out = (state == INI)||(state == LD_EXTD)||(state == SET_OP)||(state == SET_OPF) ; //modify 2020/02/24                                            \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	// Counter for computing 47 butterfly units in stage1                                                                                                          \n";
     cenctrl << " 	assign WenCnt_wire = ((state == LD_STAGE1_ST)||(state == LD_STAGE2_ST)||(state == LD_IFFTSTAGE1_ST)||(state == LD_IFFTSTAGE2_ST))? (WenCnt_reg + 1'b1) : 4'd0 ;\n";
     cenctrl << "                                                                                                                                                                  \n";
     cenctrl << " 	// mode_sel = 0 FFT, mode_sel = 1 IFFT, mode_sel = 0 SET_RC                                                                                                    \n";
     cenctrl << " 	assign mode_sel_out = (state == SET_IFFT)||(state == LD_IFFTSTAGE1_ST)||(state == ST_IFFTSTAGE1)||(state == WR_IFFTFIND)||(state == LD_IFFTSTAGE2_ST) ;        \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	//assign rc_sel_out = (state == SET_RC) ;//modify 2020/02/24                                                                                                   \n";
     cenctrl << " 	assign rc_sel_out = (state == SET_OP);                                                                                                                         \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	//assign m2_sel_wire = (state == SET_RC) ; //modify 2020/02/24                                                                                                 \n";
     cenctrl << " 	assign m2_sel_wire = (state == SET_OP);                                                                                                                        \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	//assign MulValid_out = (((state == SET_RC)&&(data_cnt_in>=DCNT_V3))||(state == SET_RCF)) ? 1'b1 : 1'b0 ;                                                      \n";
     cenctrl << " 	assign MulValid_out = (((state == SET_OP)&&(data_cnt_in>=DCNT_V3))||(state == SET_OPF)) ? 1'b1 : 1'b0 ; //modify                                               \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << " 	assign Cnt1_wire = ((state == WR_FIND)||(state == WR_IFFTFIND)) ? (Cnt1_reg + 1'b1) : 6'd0 ;                                                                   \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	// for RDCsel counter                                                                                                                                          \n";
     cenctrl << " 	assign wrfd_en_out = (state == WR_FIND)||(state == WR_IFFTFIND) ? 1'b1 : 1'b0 ;                                                                                \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	                                                                                                                                                               \n";
     cenctrl << " 	//                                                                                                                                                             \n";
     cenctrl << "   always @(*) begin                                                                                                                                              \n";
     cenctrl << "       case(state)                                                                                                                                                \n";
     cenctrl << "           INI: begin                                                                                                                                             \n";
     cenctrl << "                   if(ExtValid_in) next_state = LD_EXTD ;                                                                                                         \n";
     cenctrl << "                   else next_state = INI ;                                                                                                                        \n";
     cenctrl << "               end                                                                                                                                               \n";
     cenctrl << "           // LOAD  Extdata to SRAM	                                                                                                                           \n";
     cenctrl << "           LD_EXTD: begin                                                                                                                                         \n";
     cenctrl << "                       if(ExtMA_out < EXTMA_V1) next_state = LD_EXTD ;                                                                                            \n";
     cenctrl << "                       else next_state = LD_EXTDF ;                                                                                                               \n";
     cenctrl << "                    end                                                                                                                                           \n";
     cenctrl << "           // LOAD  Final Extdata to SRAM	and  Compute dataCount                                                                                                 \n";
     cenctrl << "           LD_EXTDF: begin                                                                                                                                        \n";
     cenctrl << "                        next_state = LD_STAGE1_ST ;                                                                                                                \n";
     cenctrl << "                     end                                                                                                                                          \n";
     cenctrl << "           // Compute FFT                                                                                                                                         \n";
     cenctrl << "           LD_STAGE1_ST: begin                                                                                                                                    \n";
     cenctrl << "                           if(WenCnt_reg < 6'd46) next_state = LD_STAGE1_ST ;                                                                                     \n";
     cenctrl << "                           else next_state = ST_STAGE1 ;                                                                                                          \n";
     cenctrl << "                        end                                                                                                                                      \n";
     cenctrl << "           ST_STAGE1: begin                                                                                                                                       \n";
     cenctrl << "                         if(";
	 for(unsigned long i=0;i < (No_stage-1);i++){
	    cenctrl <<"(data_cnt_in==DCNT_V" << (i+4) << ")";
		if(i!=(No_stage-2)) cenctrl << "||";
	 }
	 cenctrl << " ) next_state = WR_FIND ;\n";
	 cenctrl << "                         else if(data_cnt_in < DCNT_V1) next_state = ST_STAGE1 ;                       \n";
     cenctrl << "                         else next_state = SET_IFFT ;                                                  \n";
     cenctrl << "                      end                                                                            \n";
     cenctrl << "             // Write 48 FFT data to SRAM in stage1                                                  \n";
     cenctrl << "           WR_FIND: begin                                                                            \n";
     cenctrl << "                       if(Cnt1_reg < 6'd47) next_state = WR_FIND ; //modify                          \n";
     cenctrl << "                       else next_state = LD_STAGE2_ST ;                                              \n";
     cenctrl << "                    end                                                                              \n";
     cenctrl << " 			// Stage2 and other Stages, just Read FFT data, Counter for computing 48 butterfly units  \n";
     cenctrl << "           LD_STAGE2_ST: begin                                                                       \n";
     cenctrl << "                            if(WenCnt_reg < 6'd47) next_state = LD_STAGE2_ST ;                        \n";
     cenctrl << "                            else next_state = ST_STAGE1 ;                                             \n";
     cenctrl << "                         end                                                                         \n";
     cenctrl << "           // Compute dataCount		                                                              \n";
     cenctrl << "           SET_IFFT: begin                                                                           \n";
     cenctrl << "                        next_state = LD_IFFTSTAGE1_ST ;                                           \n";
     cenctrl << "                     end                                                                             \n";
     cenctrl << "           // Compute IFFT		                                                                      \n";
     cenctrl << "           LD_IFFTSTAGE1_ST: begin                                                                   \n";
     cenctrl << "                                if(WenCnt_reg < 6'd46) next_state = LD_IFFTSTAGE1_ST ;                \n";
     cenctrl << "                                else next_state = ST_IFFTSTAGE1 ;                                     \n";
     cenctrl << "                             end                                                                     \n";
     cenctrl << "           ST_IFFTSTAGE1: begin\n";
     cenctrl << "                             if(";
	 for(unsigned long i=0;i < (No_stage-1);i++){
	    cenctrl << "(data_cnt_in==DCNT_V" << (i+4) << ")";
		if(i!=(No_stage-2)) cenctrl << "||";
     }
	 cenctrl << " ) next_state = WR_IFFTFIND ;\n";
	 cenctrl << "                             else if(data_cnt_in < DCNT_V1) next_state = ST_IFFTSTAGE1 ;                \n";
     cenctrl << "                             //else next_state = SET_RC ;                                               \n";
     cenctrl << "                             else next_state = SET_OP; //modify 2020/02/24                              \n";
     cenctrl << "                          end                                                                         \n";
     cenctrl << " 			// Write 48 IFFT data to SRAM in stage1                                                    \n";
     cenctrl << "           WR_IFFTFIND: begin                                                                         \n";
     cenctrl << "                           if(Cnt1_reg < 6'd47) next_state = WR_IFFTFIND ; //modify                   \n";
     cenctrl << "                           else next_state = LD_IFFTSTAGE2_ST ;                                       \n";
     cenctrl << "                        end                                                                           \n";
     cenctrl << "           // Stage2 and other Stages, just Read IFFT data, Counter for computing 48 butterfly units  \n";
     cenctrl << "           LD_IFFTSTAGE2_ST: begin                                                                    \n";
     cenctrl << "                                if(WenCnt_reg < 6'd47) next_state = LD_IFFTSTAGE2_ST ;                 \n";
     cenctrl << "                                else next_state = ST_IFFTSTAGE1 ;                                      \n";
     cenctrl << "                             end                                                                      \n";
     cenctrl << "           SET_OP:begin                                                                               \n";
     cenctrl << "                    if(data_cnt_in < DCNT_V2) next_state = SET_OP ;                                   \n";
     cenctrl << "                    else next_state = SET_OPF ;                                                       \n";
     cenctrl << "                 end                                                                                  \n";
     cenctrl << "           SET_OPF:begin                                                                              \n";
     cenctrl << "                        next_state = INI;  //modify 2020/02/24                                        \n";
     cenctrl << "                     end			                                                                   \n";
     cenctrl << " 		//                                                                                             \n";
     cenctrl << "       default: next_state = INI ;  		                                                           \n";
     cenctrl << "       endcase                                                                                        \n";
     cenctrl << "   end                                                                                                \n";
     cenctrl << " \n";
     cenctrl << " 	//                                                     \n";
     cenctrl << "   always @(posedge clk or negedge rst_n) begin           \n";
     cenctrl << "       if(~rst_n) begin                                   \n";
     cenctrl << "           state <= INI ;                                 \n";
     cenctrl << "           ExtMA_out <= A_ZERO ;                          \n";
     cenctrl << "           WenCnt_reg <= 6'd0 ;                           \n";
     cenctrl << "           m2_sel_out <= 1'b0 ; //modify 2020/02/24       \n";
     cenctrl << "           Cnt1_reg <= 6'd0 ;                             \n";
     cenctrl << "       end                                                \n";
     cenctrl << "       else begin                                         \n";
     cenctrl << "           state <= next_state ;                          \n";
     cenctrl << "           ExtMA_out <= ExtMA_wire ;                      \n";
     cenctrl << "           WenCnt_reg <= WenCnt_wire ;                    \n";
     cenctrl << "           m2_sel_out <= m2_sel_wire ; //modify 2020/02/24\n";
     cenctrl << "           Cnt1_reg <= Cnt1_wire ;                        \n";
     cenctrl << "       end                                                \n";
     cenctrl << "   end                                                    \n";
     cenctrl << "\n";
     cenctrl << "\n";
     cenctrl << " endmodule \n";
   cenctrl.close();
}

//rom data address_width parameter need to change
void CenCtrl::Ctrl_PipeReg1(std::string string_in){
	 std::ofstream ctrl_pipereg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 ctrl_pipereg1.open(ss.str());	
     ctrl_pipereg1<< " `timescale 1 ns/1 ps                                                             \n";
     ctrl_pipereg1<< " module Ctrl_PipeReg1(mode_sel_Dout,                                              \n";
     ctrl_pipereg1<< " 				        Mul_sel_Dout,                                                  \n";
     ctrl_pipereg1<< " 				        RDC_sel_Dout,                                                  \n";
     //ctrl_pipereg1<< " 				        FFT_FSmode_sel_Dout,                                           \n";
	 ctrl_pipereg1<< " 				        DC_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< "                      mode_sel_in,                                                \n";
     ctrl_pipereg1<< " 			            Mul_sel_in,                                                    \n";
     ctrl_pipereg1<< " 			            RDC_sel_in,                                                    \n";
     //ctrl_pipereg1<< " 			            FFT_FSmode_sel_in,                                             \n";
	 ctrl_pipereg1<< " 				        DC_mode_sel_in,                                             \n";
     ctrl_pipereg1<< "                      rst_n,                                                      \n";
     ctrl_pipereg1<< "                      clk                                                         \n";
     ctrl_pipereg1<< "                      ) ;                                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " parameter ROMA_WIDTH  = " << ROM_width << ";\n";
     ctrl_pipereg1<< " parameter ROMA_ZERO   = " << ROM_width << "'h0 ;\n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " output                  mode_sel_Dout ;                                          \n";
     ctrl_pipereg1<< " output [1:0]            Mul_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [3:0]            RDC_sel_Dout ;                                           \n";
	 ctrl_pipereg1<< " output [1:0]            DC_mode_sel_Dout ;                                       \n";
     //ctrl_pipereg1<< " output [3:0]            FFT_FSmode_sel_Dout ;                                    \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " input                   mode_sel_in ;                                            \n";
     ctrl_pipereg1<< " input  [1:0]            Mul_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [3:0]            RDC_sel_in ;                                             \n";
     //ctrl_pipereg1<< " input  [3:0]            FFT_FSmode_sel_in ;                                      \n";
     ctrl_pipereg1<< " input  [1:0]            DC_mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " input                   rst_n ;                                                  \n";
     ctrl_pipereg1<< " input                   clk ;                                                    \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " reg                  mode_sel_D0reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D1reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D2reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_Dout ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_Dout ;                                              \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D3reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D4reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D5reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_Dout ;                                              \n";
     //ctrl_pipereg1<< " reg [3:0]            FFT_FSmode_sel_D0reg ;                                      \n";
     //ctrl_pipereg1<< " reg [3:0]            FFT_FSmode_sel_D1reg ;                                      \n";
     //ctrl_pipereg1<< " reg [3:0]            FFT_FSmode_sel_D2reg ;                                      \n";
     //ctrl_pipereg1<< " reg [3:0]            FFT_FSmode_sel_D3reg ;                                      \n";
     //ctrl_pipereg1<< " reg [3:0]            FFT_FSmode_sel_D4reg ;                                      \n";
     //ctrl_pipereg1<< " reg [3:0]            FFT_FSmode_sel_D5reg ;                                      \n";
     //ctrl_pipereg1<< " reg [3:0]            FFT_FSmode_sel_Dout ;                                       \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D45reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_Dout  ;                                         \n";	 
	 //-------------------------------------------------------------------------------------------------------
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n";
     ctrl_pipereg1<< " 	always @(posedge clk or negedge rst_n) begin                                    \n";
     ctrl_pipereg1<< " 		if(~rst_n) begin                                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg <= 1'b0 ;                                                \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg <= 1'b0 ;                                                \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg <= 1'b0 ;                                                \n";
     ctrl_pipereg1<< " 			mode_sel_Dout <= 1'b0 ;                                                 \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg <= 2'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg <= 2'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg <= 2'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout <= 2'd0 ;                                                  \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg <= 4'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg <= 4'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg <= 4'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg <= 4'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg <= 4'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg <= 4'd0 ;                                                 \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout <= 4'd0 ;                                                  \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D0reg <= 4'd0 ;                                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D1reg <= 4'd0 ;                                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D2reg <= 4'd0 ;                                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D3reg <= 4'd0 ;                                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D4reg <= 4'd0 ;                                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D5reg <= 4'd0 ;                                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_Dout <= 4'd0 ;                                           \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= 2'd0;                                            \n";	 
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= 2'd0;                                            \n";	 
	 //-----------------------------------------------------------------------------------------------------
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 		else begin                                                                  \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg <= mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg <= mode_sel_D0reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg <= mode_sel_D1reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_Dout <= mode_sel_D2reg ;                                       \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg <= Mul_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout <= Mul_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg <= RDC_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout <= RDC_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;                                  \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;                              \n";	 
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D0reg <= FFT_FSmode_sel_in ;                             \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D1reg <= FFT_FSmode_sel_D0reg ;                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D2reg <= FFT_FSmode_sel_D1reg ;                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D3reg <= FFT_FSmode_sel_D2reg ;                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D4reg <= FFT_FSmode_sel_D3reg ;                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_D5reg <= FFT_FSmode_sel_D4reg ;                          \n";
     //ctrl_pipereg1<< " 			FFT_FSmode_sel_Dout <= FFT_FSmode_sel_D5reg ;                           \n";
	 
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 	end                                                                             \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " endmodule                                                                        \n";
	 ctrl_pipereg1.close();
}

void CenCtrl::order_ROMReg_r16(std::string string_in){
     std::ofstream orderROM_pipe;
     std::string        string_buf = "/R16_orderROM_Pipe.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
     orderROM_pipe.open(ss.str());  	
orderROM_pipe << "//==================================================                               \n";
orderROM_pipe << "//Writer     : shiyong wu                                                          \n";
orderROM_pipe << "//Date       : 2020/6/18                                                           \n";
orderROM_pipe << "//Note       : ROM register file                                                   \n";
orderROM_pipe << "//==================================================                               \n";
orderROM_pipe << "`timescale 1 ns/1 ps                                                               \n";
orderROM_pipe << "module R16_orderROM_Pipe(                                                           \n";
orderROM_pipe << "                      reorderROM0_o,                                               \n";
orderROM_pipe << "                      reorderROM1_o,                                               \n";
orderROM_pipe << "                      reorderROM2_o,                                               \n";
orderROM_pipe << "                      reorderROM3_o,                                               \n";
orderROM_pipe << "                      ireorderROM0_o,                                              \n";
orderROM_pipe << "                      ireorderROM1_o,                                              \n";
orderROM_pipe << "                      ireorderROM2_o,                                              \n";
orderROM_pipe << "                      ireorderROM3_o,                                              \n";
orderROM_pipe << "						reorderROM0_i,                                               \n";
orderROM_pipe << "						reorderROM1_i,                                               \n";
orderROM_pipe << "						reorderROM2_i,                                               \n";
orderROM_pipe << "						reorderROM3_i,                                               \n";
orderROM_pipe << "						ireorderROM0_i,                                              \n";
orderROM_pipe << "						ireorderROM1_i,                                              \n";
orderROM_pipe << "						ireorderROM2_i,                                              \n";
orderROM_pipe << "						ireorderROM3_i,                                              \n";
orderROM_pipe << "						rst_n,                                                       \n";
orderROM_pipe << "						clk                                                          \n";
orderROM_pipe << "						) ;                                                          \n";
orderROM_pipe << "    parameter SD_WIDTH  = 128;                                                     \n";
orderROM_pipe << "	  parameter SD_ZERO   = 128'd0;                                                  \n";
orderROM_pipe << "    parameter P_WIDTH   = 64;                                                      \n";
orderROM_pipe << "	  parameter P_ZERO    = 64'd0;                                                   \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM0_o;                                            \n";
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM1_o;                                            \n";
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM2_o;                                            \n";
orderROM_pipe << "    output [SD_WIDTH-1:0] reorderROM3_o;                                            \n";
orderROM_pipe << "    output [SD_WIDTH-1:0] ireorderROM0_o;                                           \n";
orderROM_pipe << "    output [SD_WIDTH-1:0] ireorderROM1_o;                                           \n";
orderROM_pipe << "    output [SD_WIDTH-1:0] ireorderROM2_o;                                           \n";
orderROM_pipe << "    output [P_WIDTH-1:0]  ireorderROM3_o;                                           \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM0_i;                                              \n";
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM1_i;                                              \n";
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM2_i;                                              \n";
orderROM_pipe << "	input [SD_WIDTH-1:0]  reorderROM3_i;                                              \n";
orderROM_pipe << "	input [SD_WIDTH-1:0]  ireorderROM0_i;                                             \n";
orderROM_pipe << "	input [SD_WIDTH-1:0]  ireorderROM1_i;                                             \n";
orderROM_pipe << "	input [SD_WIDTH-1:0]  ireorderROM2_i;                                             \n";
orderROM_pipe << "	input [P_WIDTH-1:0]   ireorderROM3_i;                                             \n";
orderROM_pipe << "	input rst_n;                                                                     \n";
orderROM_pipe << "	input clk;                                                                       \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "	  reg [SD_WIDTH-1:0] reorderROM0_o;                                               \n";
orderROM_pipe << "    reg [SD_WIDTH-1:0] reorderROM1_o;                                               \n";
orderROM_pipe << "    reg [SD_WIDTH-1:0] reorderROM2_o;                                               \n";
orderROM_pipe << "    reg [SD_WIDTH-1:0] reorderROM3_o;                                               \n";
orderROM_pipe << "    reg [SD_WIDTH-1:0] ireorderROM0_o;                                              \n";
orderROM_pipe << "    reg [SD_WIDTH-1:0] ireorderROM1_o;                                              \n";
orderROM_pipe << "    reg [SD_WIDTH-1:0] ireorderROM2_o;                                              \n";
orderROM_pipe << "    reg [P_WIDTH-1:0] ireorderROM3_o;                                              \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "    always@(posedge clk,negedge rst_n)begin                                        \n";
orderROM_pipe << "		if(~rst_n)begin                                                              \n";
orderROM_pipe << "			reorderROM0_o  <= SD_ZERO;                                                \n";
orderROM_pipe << "			reorderROM1_o  <= SD_ZERO;                                                \n";
orderROM_pipe << "			reorderROM2_o  <= SD_ZERO;                                                \n";
orderROM_pipe << "			reorderROM3_o  <= SD_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM0_o <= SD_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM1_o <= SD_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM2_o <= SD_ZERO;                                                \n";
orderROM_pipe << "			ireorderROM3_o <= P_ZERO;                                                \n";
orderROM_pipe << "		end                                                                          \n";
orderROM_pipe << "		else begin                                                                   \n";
orderROM_pipe << "			reorderROM0_o  <= reorderROM0_i;                                         \n";
orderROM_pipe << "		    reorderROM1_o  <= reorderROM1_i;                                         \n";
orderROM_pipe << "		    reorderROM2_o  <= reorderROM2_i;                                         \n";
orderROM_pipe << "		    reorderROM3_o  <= reorderROM3_i;                                         \n";
orderROM_pipe << "		    ireorderROM0_o <= ireorderROM0_i;                                        \n";
orderROM_pipe << "		    ireorderROM1_o <= ireorderROM1_i;                                        \n";
orderROM_pipe << "		    ireorderROM2_o <= ireorderROM2_i;                                        \n";
orderROM_pipe << "		    ireorderROM3_o <= ireorderROM3_i;                                        \n";
orderROM_pipe << "		end                                                                          \n";
orderROM_pipe << "	end                                                                              \n";
orderROM_pipe << "                                                                                   \n";
orderROM_pipe << "endmodule                                                                          \n";
	 orderROM_pipe.close();
}

void CenCtrl::R16_ROMPipeReg1(std::string string_in){
	 std::ofstream r16_rompipereg1;
     std::string        string_buf = "/R16_ROMPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_rompipereg1.open(ss.str());
      r16_rompipereg1 << " `timescale 1 ns/1 ps                                            \n";             
      r16_rompipereg1 << " module R16_ROMPipeReg1(ROMD0_Dout,                              \n";
      r16_rompipereg1 << " 				         ROMD1_Dout,                              \n";
      r16_rompipereg1 << " 				         ROMD2_Dout,                              \n";
      r16_rompipereg1 << " 				         ROMD3_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD4_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD5_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD6_Dout,                              \n";
      r16_rompipereg1 << " 					     ROMD7_Dout,                              \n";
      r16_rompipereg1 << " 					     IFFTROMD0_Dout,                          \n";
      r16_rompipereg1 << " 				         IFFTROMD1_Dout,                          \n";
      r16_rompipereg1 << " 				         IFFTROMD2_Dout,                          \n";
      r16_rompipereg1 << " 				         IFFTROMD3_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD4_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD5_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD6_Dout,                          \n";
      r16_rompipereg1 << " 					     IFFTROMD7_Dout,                          \n";
      r16_rompipereg1 << " 			             ROMD0_in,                                \n";
      r16_rompipereg1 << " 					     ROMD1_in,                                \n";
      r16_rompipereg1 << " 					     ROMD2_in,                                \n";
      r16_rompipereg1 << " 					     ROMD3_in,                                \n";
      r16_rompipereg1 << " 					     ROMD4_in,                                \n";
      r16_rompipereg1 << " 					     ROMD5_in,                                \n";
      r16_rompipereg1 << " 					     ROMD6_in,                                \n";
      r16_rompipereg1 << " 					     ROMD7_in,                                \n";
      r16_rompipereg1 << " 					     IFFTROMD0_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD1_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD2_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD3_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD4_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD5_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD6_in,                            \n";
      r16_rompipereg1 << " 					     IFFTROMD7_in,                            \n";
      r16_rompipereg1 << "                        rst_n,                                   \n";
      r16_rompipereg1 << "                        clk                                      \n";
      r16_rompipereg1 << "                        ) ;                                      \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " parameter P_WIDTH   = 64 ;					                  \n";
      r16_rompipereg1 << " parameter SD_WIDTH  = 128 ;                                     \n";
      r16_rompipereg1 << " parameter P_ZERO    = 64'h0 ;                                   \n";
      r16_rompipereg1 << " parameter SD_ZERO   = 128'h0 ;                                  \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " output [P_WIDTH-1:0]    ROMD0_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD1_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD2_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD3_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD4_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD5_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD6_Dout ;                            \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   ROMD7_Dout ;                            \n";
      r16_rompipereg1 << " output [P_WIDTH-1:0]    IFFTROMD0_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                        \n";
      r16_rompipereg1 << " output [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                        \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " input  [P_WIDTH-1:0]    ROMD0_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD1_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD2_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD3_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD4_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD5_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD6_in ;                              \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   ROMD7_in ;                              \n";
      r16_rompipereg1 << " input  [P_WIDTH-1:0]    IFFTROMD0_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD1_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD2_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD3_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD4_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD5_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD6_in ;                          \n";
      r16_rompipereg1 << " input  [SD_WIDTH-1:0]   IFFTROMD7_in ;                          \n";
      r16_rompipereg1 << " input                   rst_n ;                                 \n";
      r16_rompipereg1 << " input                   clk ;                                   \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_Dout ;                               \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_Dout ;                               \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                           \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                           \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D0reg ;                              \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D1reg ;                              \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    ROMD0_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD1_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD2_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD3_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD4_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD5_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD6_D2reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_D0reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_D1reg ;                              \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   ROMD7_D2reg ;                              \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D0reg ;                          \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D1reg ;                          \n";
      r16_rompipereg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D2reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D0reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D1reg ;                          \n";
      r16_rompipereg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D2reg ;                          \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " 	//delay 4 cycles                                              \n";
      r16_rompipereg1 << " 	always @(posedge clk or negedge rst_n) begin                  \n";
      r16_rompipereg1 << " 		if(~rst_n) begin                                          \n";
      r16_rompipereg1 << " 			ROMD0_D0reg <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			ROMD0_D1reg <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			ROMD0_D2reg <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			ROMD0_Dout  <= P_ZERO ;                               \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD1_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD1_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD1_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD1_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD2_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD2_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD2_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD2_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD3_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD3_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD3_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD3_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD4_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD4_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD4_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD4_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD5_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD5_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD5_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD5_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD6_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD6_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD6_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD6_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD7_D0reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD7_D1reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD7_D2reg <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			ROMD7_Dout  <= SD_ZERO ;                              \n";
      r16_rompipereg1 << " 			//---                                                 \n";
      r16_rompipereg1 << " 			IFFTROMD0_D0reg <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			IFFTROMD0_D1reg <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			IFFTROMD0_D2reg <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			IFFTROMD0_Dout  <= P_ZERO ;                           \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD1_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD1_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD1_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD1_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD2_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD2_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD2_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD2_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD3_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD3_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD3_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD3_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD4_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD4_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD4_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD4_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD5_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD5_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD5_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD5_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD6_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD6_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD6_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD6_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD7_D0reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD7_D1reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD7_D2reg <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 			IFFTROMD7_Dout  <= SD_ZERO ;                          \n";
      r16_rompipereg1 << " 		end                                                       \n";
      r16_rompipereg1 << " 		else begin                                                \n";
      r16_rompipereg1 << " 			ROMD0_D0reg <= ROMD0_in ;                             \n";
      r16_rompipereg1 << " 			ROMD0_D1reg <= ROMD0_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD0_D2reg <= ROMD0_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD0_Dout  <= ROMD0_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD1_D0reg <= ROMD1_in ;                             \n";
      r16_rompipereg1 << " 			ROMD1_D1reg <= ROMD1_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD1_D2reg <= ROMD1_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD1_Dout  <= ROMD1_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD2_D0reg <= ROMD2_in ;                             \n";
      r16_rompipereg1 << " 			ROMD2_D1reg <= ROMD2_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD2_D2reg <= ROMD2_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD2_Dout  <= ROMD2_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD3_D0reg <= ROMD3_in ;                             \n";
      r16_rompipereg1 << " 			ROMD3_D1reg <= ROMD3_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD3_D2reg <= ROMD3_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD3_Dout  <= ROMD3_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD4_D0reg <= ROMD4_in ;                             \n";
      r16_rompipereg1 << " 			ROMD4_D1reg <= ROMD4_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD4_D2reg <= ROMD4_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD4_Dout  <= ROMD4_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD5_D0reg <= ROMD5_in ;                             \n";
      r16_rompipereg1 << " 			ROMD5_D1reg <= ROMD5_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD5_D2reg <= ROMD5_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD5_Dout  <= ROMD5_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD6_D0reg <= ROMD6_in ;                             \n";
      r16_rompipereg1 << " 			ROMD6_D1reg <= ROMD6_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD6_D2reg <= ROMD6_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD6_Dout  <= ROMD6_D2reg ;                          \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			ROMD7_D0reg <= ROMD7_in ;                             \n";
      r16_rompipereg1 << " 			ROMD7_D1reg <= ROMD7_D0reg ;                          \n";
      r16_rompipereg1 << " 			ROMD7_D2reg <= ROMD7_D1reg ;                          \n";
      r16_rompipereg1 << " 			ROMD7_Dout  <= ROMD7_D2reg ;                          \n";
      r16_rompipereg1 << " 			//---                                                 \n";
      r16_rompipereg1 << " 			IFFTROMD0_D0reg <= IFFTROMD0_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD0_D1reg <= IFFTROMD0_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD0_D2reg <= IFFTROMD0_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD0_Dout  <= IFFTROMD0_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD1_D0reg <= IFFTROMD1_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD1_D1reg <= IFFTROMD1_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD1_D2reg <= IFFTROMD1_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD1_Dout  <= IFFTROMD1_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD2_D0reg <= IFFTROMD2_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD2_D1reg <= IFFTROMD2_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD2_D2reg <= IFFTROMD2_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD2_Dout  <= IFFTROMD2_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD3_D0reg <= IFFTROMD3_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD3_D1reg <= IFFTROMD3_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD3_D2reg <= IFFTROMD3_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD3_Dout  <= IFFTROMD3_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD4_D0reg <= IFFTROMD4_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD4_D1reg <= IFFTROMD4_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD4_D2reg <= IFFTROMD4_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD4_Dout  <= IFFTROMD4_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD5_D0reg <= IFFTROMD5_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD5_D1reg <= IFFTROMD5_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD5_D2reg <= IFFTROMD5_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD5_Dout  <= IFFTROMD5_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD6_D0reg <= IFFTROMD6_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD6_D1reg <= IFFTROMD6_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD6_D2reg <= IFFTROMD6_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD6_Dout  <= IFFTROMD6_D2reg ;                  \n";
      r16_rompipereg1 << " 			//                                                    \n";
      r16_rompipereg1 << " 			IFFTROMD7_D0reg <= IFFTROMD7_in ;                     \n";
      r16_rompipereg1 << " 			IFFTROMD7_D1reg <= IFFTROMD7_D0reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD7_D2reg <= IFFTROMD7_D1reg ;                  \n";
      r16_rompipereg1 << " 			IFFTROMD7_Dout  <= IFFTROMD7_D2reg ;                  \n";
      r16_rompipereg1 << " 		end                                                       \n";
      r16_rompipereg1 << " 	end                                                           \n";
      r16_rompipereg1 << "                                                                 \n";
      r16_rompipereg1 << " endmodule                                                       \n";	 
     r16_rompipereg1.close();
}

void CenCtrl::R16_AGU(std::string string_in){
	 std::ofstream r16_agu;
     std::string        string_buf = "/R16_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu.open(ss.str());
     r16_agu << " `timescale 1 ns/1 ps                                \n";
     r16_agu << " module R16_AGU(BN_out,                              \n";
     r16_agu << "                MA,                                  \n";
     r16_agu << "                ROMA,                                \n";
     r16_agu << "                Mul_sel_out,                         \n";
     r16_agu << "                RDC_sel_out,                         \n";
     r16_agu << "                data_cnt_reg,                        \n";
     //r16_agu << "                FFT_FSmode_sel,                      \n";
     r16_agu << "                DC_mode_sel_out,                     \n";
     r16_agu << "                mode_sel_in,                         \n";
     r16_agu << "                rc_sel_in,                           \n";
     r16_agu << "                AGU_en,                              \n";
     r16_agu << "                wrfd_en_in,                          \n";
     r16_agu << "                rst_n,                               \n";
     r16_agu << "                clk                                  \n";
     r16_agu << "                ) ;                                  \n";
     r16_agu << " parameter A_WIDTH     = " << addr_width        << ";\n";
     r16_agu << " parameter DC_WIDTH    = " << data_cnt_width    << ";\n";
     r16_agu << " parameter BC_WIDTH    = " << BU_counter_width  << ";\n";
     r16_agu << " parameter SC_WIDTH    = " << stage_width       << ";\n";
     r16_agu << " parameter ROMA_WIDTH  = " << ROM_width         << ";\n";
     r16_agu << " \n";
     r16_agu << " parameter DC_ZERO   = " << data_cnt_width << "'h0 ;\n";
     r16_agu << " parameter ROMA_ZERO = " << ROM_width      << "'h0 ;\n";
     r16_agu << " \n";
	 //modify part
	 for(int i=0; i < No_stage ;i++){ 
         r16_agu << "parameter S" << i << "      = " << stage_width << "'d" << i <<"; \n";
	 }
     r16_agu << "\n";
     r16_agu << " parameter DCNT_V1    = " << data_cnt_width << "'d" << FFT_dc[No_stage-1]  <<"; //data counter value1 for data_cnt_wire      \n";
     r16_agu << " parameter DCNT_V2    = " << data_cnt_width << "'d" << ceil((double)m/radix) + 4  <<"; //data counter value2 for data_cnt_wire      \n";
     for(int j=0; j < (radix-2);j++){
		 r16_agu << "  parameter DCNT_FS" << (j+1)<<" = " << data_cnt_width << "'d" << DCNT_FS[j] <<";\n";
	 }
     r16_agu << " \n";
     r16_agu << " parameter DCNT_BP1 = "<< DCNT_BP1 << " ;\n";
     r16_agu << " parameter DCNT_BP2 = "<< DCNT_BP2 << " ;\n";
     r16_agu << " parameter DCNT_BP3 = "<< DCNT_BP3 << " ;\n";
     r16_agu << " parameter DCNT_BP4 = "<< DCNT_BP4 << " ;\n";
     r16_agu << "\n";
     r16_agu << "\n";
     r16_agu << " output                  BN_out ;                                    \n";
     r16_agu << " output [A_WIDTH-1:0]    MA ;                                        \n";
     r16_agu << " output [ROMA_WIDTH-1:0] ROMA ;                                      \n";
     r16_agu << " output [1:0]            Mul_sel_out ;                               \n";
     r16_agu << " output [3:0]            RDC_sel_out ;                               \n";
     r16_agu << " output [DC_WIDTH-1:0]   data_cnt_reg ;                              \n";
     //r16_agu << " output [3:0]            FFT_FSmode_sel ;                            \n";
     r16_agu << " output [1:0]            DC_mode_sel_out ;                           \n";
     r16_agu << "                                                                     \n";
     r16_agu << " input                   mode_sel_in ;                               \n";
     r16_agu << " input                   rc_sel_in ;                                 \n";
     r16_agu << " input                   AGU_en ;                                    \n";
     r16_agu << " input                   wrfd_en_in ;                                \n";
     r16_agu << " input                   rst_n ;                                     \n";
     r16_agu << " input                   clk ;                                       \n";
     r16_agu << "                                                                     \n";
     r16_agu << "                                                                     \n";
	 r16_agu << " reg   [1:0]          DC_mode_sel_out;                               \n";
     r16_agu << " reg   [DC_WIDTH-1:0] data_cnt_reg ; // data counter                 \n";
     r16_agu << " reg   [3:0]          RDCsel_cnt_reg ; // RDC select counter         \n";
     r16_agu << " reg                  BN_out ;                                       \n";
     r16_agu << " reg   [3:0]          RDC_sel_out ;                                  \n";
     r16_agu << " reg   [1:0]          Mul_sel_out ;                                  \n";
     r16_agu << "                                                                     \n";
     r16_agu << "                                                                     \n";
	 r16_agu << " wire  [1:0]          DC_mode_sel_wire ;                             \n";
     r16_agu << " wire  [DC_WIDTH-1:0] data_cnt_wire ;                                \n";
     r16_agu << " wire  [3:0]          RDCsel_cnt_wire ;                              \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                 \n";
     // number of wire xor_wire change with fft_point
	 unsigned long  NO_xorwire; //number of  xor wire  
	 NO_xorwire  = DCNT_BP3 - DCNT_BP2;
	 for(int i=0;i < NO_xorwire;i++){
         r16_agu << " wire                 xor_d"<< i << "_wire;\n";
	 }
     r16_agu << " wire  [SC_WIDTH-1:0] SC_wire ; // stage counter \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_RR_wire ;               \n";
     r16_agu << " wire                 BN_wire ;                  \n";
     r16_agu << " wire [3:0]           RDC_sel_wire ;             \n";
     r16_agu << " wire [1:0]           Mul_sel_wire ;             \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BR_BC_wire ;                                                                             \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign data_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                         \n";
     r16_agu << "                           ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                      \n";
     r16_agu << "                           DC_ZERO : (AGU_en==1'b1)?\n";
     r16_agu << "                           (data_cnt_reg + 1'b1) : data_cnt_reg ;                                              \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign RDCsel_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                       \n";
     r16_agu << "                             ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                     \n";
     r16_agu << "                             4'd0 : ((AGU_en==1'b1)||(wrfd_en_in==1'b1))?\n";
     r16_agu << "                             (RDCsel_cnt_reg + 1'b1) : RDCsel_cnt_reg ;                                         \n";
     r16_agu << " 	                                                                                                            \n";
     //*************************************************************************
	 r16_agu << " 	// for Gray code 	 \n";
	 for(int k=0;k < NO_xorwire; k++){
	 r16_agu << "   assign xor_d" << k <<"_wire = data_cnt_reg["<<(DCNT_BP3 - k)<<"]^data_cnt_reg["<<(DCNT_BP3 - k - 1)<<"];\n";	 
	 } 
     r16_agu << "\n";
     r16_agu << "   assign BC_wire = (rc_sel_in==1'b1)?                                                  \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3:DCNT_BP2]}):       \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],                                         \n";
     r16_agu << "                      data_cnt_reg[DCNT_BP3],                                           \n";
     for(int l=0;l<NO_xorwire;l++){
	     if(l!=(NO_xorwire-1))r16_agu << "                      xor_d"<< l <<"_wire,\n";
         else                 r16_agu << "                      xor_d"<< l <<"_wire\n";	 
	 }
     r16_agu << "                       }) ;\n";
     r16_agu << "\n";
     //**********************************************************************
     // need to modify 2020/03/23
     //*********************************************************************
	 r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign SC_wire = data_cnt_reg[DC_WIDTH-1:DCNT_BP4] ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                                 \n";
     r16_agu << "   assign BC_RR_wire = ";
     unsigned long RR_tmp;
     unsigned long s;
     unsigned long fs_rr_bits; // final state is in order to read data from sram
     //final state bc right shift // final state is after INTT computing state
     s = DCNT_BP1 + 1; //radix bit size
     fs_rr_bits = s * (No_stage - 3);
     for(unsigned long i=0;i < (No_stage-1); i++){
         RR_tmp = s * i;
         if(i==0) {
             if(No_stage < 4) r16_agu << "((((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))&&(rc_sel_in == 1'b0))||(rc_sel_in == 1'b1))? BC_wire:\n";
             else r16_agu << "((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))&&(rc_sel_in == 1'b0)? BC_wire:\n";
         }
         else {
             if((No_stage >= 4 )&& (i == (No_stage-3)))r16_agu << "                       ((SC_wire == S" << i << "&&(rc_sel_in == 1'b0))||(rc_sel_in==1'b1)) ? \n"; 
             else   r16_agu << "                       ((SC_wire == S" << i << ") && (rc_sel_in == 1'b0)) ? \n";
             r16_agu << "                       {BC_wire[" << RR_tmp-1 << ":0],BC_wire[BC_WIDTH-1:" << RR_tmp << "]} :\n";             
         }
     }
     r16_agu << "                       BC_wire;\n";
     r16_agu << "\n";
     r16_agu << "   // Bit reverse barrel shifter for IFFT                                                                             \n";
     r16_agu << "   assign BR_BC_wire = {";
     
     for(unsigned long i=0; i < BU_counter_width; i=i+4){
         if(i!=(BU_counter_width-4))r16_agu << "                       BC_RR_wire["<< (i+3) <<":"<< i << "],\n"; 
         else  r16_agu << "                       BC_RR_wire["<< (i+3) <<":"<< i << "]} ;\n";      
     }
     
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Bank,  rc_sel_in=1 BN_wire=(^BC_RR_wire)                                                                        \n";
     r16_agu << "   assign BN_wire = (mode_sel_in==1'b1)? (^BR_BC_wire) : (^BC_RR_wire) ;                                              \n";
     r16_agu << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                              \n";
     r16_agu << "   assign MA = (mode_sel_in==1'b1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ;                         \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // ROM Address                                                                                                     \n";
     r16_agu << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                        \n";
     unsigned long ls_bits = 0; //left shift bits
     
     for(unsigned long i=1;i < (No_stage-1);i++){
         ls_bits = s * i;
         unsigned long ls_msb;
         ls_msb = ROM_width - 1 - ls_bits;
         r16_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[" << ls_msb <<":0]," << ls_bits <<"'d0}) : \n" ; 
     }
     r16_agu << "                 ROMA_ZERO;\n"; 
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign Mul_sel_wire = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd3 :                                 \n";
     r16_agu << "                         ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd2 :                                 \n";
     r16_agu << "                           // test for point-wise multiplication                                                       \n";
     r16_agu << "                          (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign RDC_sel_wire = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg : data_cnt_reg[3:0]  ;                                   \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //FFT final stage mode select                                                                                      \n";
     //r16_agu << "   assign FFT_FSmode_sel = ((data_cnt_reg==DCNT_FS1)&&(mode_sel_in==1'b0)) ? 4'd1 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS2)&&(mode_sel_in==1'b0)) ? 4'd2 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS3)&&(mode_sel_in==1'b0)) ? 4'd3 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS4)&&(mode_sel_in==1'b0)) ? 4'd4 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS5)&&(mode_sel_in==1'b0)) ? 4'd5 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS6)&&(mode_sel_in==1'b0)) ? 4'd6 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS7)&&(mode_sel_in==1'b0)) ? 4'd7 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS8)&&(mode_sel_in==1'b0)) ? 4'd8 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS9)&&(mode_sel_in==1'b0)) ? 4'd9 :                                   \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS10)&&(mode_sel_in==1'b0)) ? 4'd10 :                                 \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS11)&&(mode_sel_in==1'b0)) ? 4'd11 :                                 \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS12)&&(mode_sel_in==1'b0)) ? 4'd12 : 	                               \n";
     //r16_agu << "                           ((data_cnt_reg==DCNT_FS13)&&(mode_sel_in==1'b0)) ? 4'd13 :                                 \n";
     //r16_agu << "                           ((data_cnt_reg>=DCNT_FS14)&&(data_cnt_reg<=DCNT_V1)&&(mode_sel_in==1'b0)) ? 4'd14 : 4'd0 ; \n";
     //r16_agu << "                                                                                                                      \n";
	 r16_agu << "   //                                                                                                                 \n";
	 r16_agu << "   assign  DC_mode_sel_wire = (( SC_wire == S3) && (mode_sel_in==1'b0))? 2'd1 : 2'd0;                                 \n";
	 r16_agu << "                                                                                                                      \n";
	 r16_agu << "                                                                                                                      \n";
	 r16_agu << "                                                                                                                      \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   always @(posedge clk or negedge rst_n) begin                                                                       \n";
     r16_agu << "   	if(~rst_n) begin                                                                                               \n";
     r16_agu << "           data_cnt_reg <= DC_ZERO ;                                                                                  \n";
     r16_agu << "           BN_out <= 1'b0 ;                                                                                           \n";
     r16_agu << "           RDC_sel_out <= 4'd0 ;                                                                                      \n";
     r16_agu << "           Mul_sel_out <= 2'd0 ;                                                                                      \n";
     r16_agu << "           DC_mode_sel_out <= 2'd0 ;                                                                                  \n";
     r16_agu << "           RDCsel_cnt_reg <= 4'd0 ;                                                                                   \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   	else begin                                                                                                     \n";
     r16_agu << "           data_cnt_reg <= data_cnt_wire ;                                                                            \n";
     r16_agu << "           BN_out <= BN_wire ;                                                                                        \n";
     r16_agu << "           RDC_sel_out <= RDC_sel_wire ;                                                                              \n";
     r16_agu << "           Mul_sel_out <= Mul_sel_wire ;                                                                              \n";
	 r16_agu << "           DC_mode_sel_out <= DC_mode_sel_wire ;                                                                      \n";
     r16_agu << "           RDCsel_cnt_reg <= RDCsel_cnt_wire ;                                                                        \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   end                                                                                                                \n";
     r16_agu << "                                                                                                                       \n";
     r16_agu << " endmodule                                                                                                             \n";   	 
	 r16_agu.close();	
}

void CenCtrl::R16_WD_buf(std::string string_in){
	 std::ofstream r16_wd_buf;
     std::string        string_buf = "/R16_WD_buf.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_wd_buf.open(ss.str());	
     r16_wd_buf << " `timescale 1 ns/1 ps                                       \n";                                          
     r16_wd_buf << " module R16_WD_buf(RDC0_D_out,                              \n";
     r16_wd_buf << " 			       RDC1_D_out,                              \n";
     r16_wd_buf << " 				   RDC2_D_out,                              \n";
     r16_wd_buf << " 				   RDC3_D_out,                              \n";
     r16_wd_buf << " 				   RDC4_D_out,                              \n";
     r16_wd_buf << " 				   RDC5_D_out,                              \n";
     r16_wd_buf << " 				   RDC6_D_out,                              \n";
     r16_wd_buf << " 				   RDC7_D_out,                              \n";
     r16_wd_buf << " 				   RDC8_D_out,                              \n";
     r16_wd_buf << " 				   RDC9_D_out,                              \n";
     r16_wd_buf << " 				   RDC10_D_out,                             \n";
     r16_wd_buf << " 				   RDC11_D_out,                             \n";
     r16_wd_buf << " 				   RDC12_D_out,                             \n";
     r16_wd_buf << " 				   RDC13_D_out,                             \n";
     r16_wd_buf << " 				   RDC14_D_out,                             \n";
     r16_wd_buf << " 				   RDC15_D_out,                             \n";
     r16_wd_buf << " 		           RDC0_in,                                 \n";
     r16_wd_buf << " 				   RDC1_in,                                 \n";
     r16_wd_buf << " 				   RDC2_in,                                 \n";
     r16_wd_buf << " 				   RDC3_in,                                 \n";
     r16_wd_buf << " 				   RDC4_in,                                 \n";
     r16_wd_buf << " 				   RDC5_in,                                 \n";
     r16_wd_buf << " 				   RDC6_in,                                 \n";
     r16_wd_buf << " 				   RDC7_in,                                 \n";
     r16_wd_buf << " 				   RDC8_in,                                 \n";
     r16_wd_buf << " 				   RDC9_in,                                 \n";
     r16_wd_buf << " 				   RDC10_in,                                \n";
     r16_wd_buf << " 				   RDC11_in,                                \n";
     r16_wd_buf << " 				   RDC12_in,                                \n";
     r16_wd_buf << " 				   RDC13_in,                                \n";
     r16_wd_buf << " 				   RDC14_in,                                \n";
     r16_wd_buf << " 				   RDC15_in,                                \n";
     r16_wd_buf << "                   rst_n,                                   \n";
     r16_wd_buf << "                   clk                                      \n";
     r16_wd_buf << "                   ) ;                                      \n";
     r16_wd_buf << " parameter P_WIDTH     = 64 ;                               \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " parameter P_ZERO    = 64'h0 ;                              \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC0_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC1_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC2_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC3_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC4_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC5_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC6_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC7_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC8_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC9_D_out ;                          \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC10_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC11_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC12_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC13_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC14_D_out ;                         \n";
     r16_wd_buf << " output [P_WIDTH-1:0] RDC15_D_out ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC0_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC1_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC2_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC3_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC4_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC5_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC6_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC7_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC8_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC9_in ;                              \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC10_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC11_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC12_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC13_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC14_in ;                             \n";
     r16_wd_buf << " input [P_WIDTH-1:0] RDC15_in ;                             \n";
     r16_wd_buf << " input               rst_n ;                                \n";
     r16_wd_buf << " input               clk ;                                  \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D_out ;                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D_out ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D_out ;                           \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC0_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC1_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC2_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC3_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC4_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC5_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC6_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC7_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC8_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D0_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D1_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D2_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D3_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D4_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D5_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D6_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D7_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D8_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D9_reg ;                           \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D10_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D11_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D12_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D13_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D14_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D15_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D16_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D17_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D18_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D19_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D20_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D21_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D22_reg  ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC9_D23_reg  ;                         \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC10_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC11_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC12_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC13_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC14_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D0_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D1_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D2_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D3_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D4_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D5_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D6_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D7_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D8_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D9_reg ;                          \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D10_reg ;                         \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D11_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D12_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D13_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D14_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D15_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D16_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D17_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D18_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D19_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D20_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D21_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D22_reg  ;                        \n";
     r16_wd_buf << " reg  [P_WIDTH-1:0] RDC15_D23_reg  ;                        \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " 	//RDC output delay 25 cycles                            \n";
     r16_wd_buf << " 	always @(posedge clk or negedge rst_n) begin            \n";
     r16_wd_buf << " 		if(~rst_n) begin                                    \n";
     r16_wd_buf << " 			RDC0_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC0_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC0_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC1_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC1_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC1_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC2_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC2_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC2_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC3_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC3_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC3_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC4_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC4_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC4_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC5_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC5_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC5_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC6_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC6_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC6_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC7_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC7_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC7_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC8_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC8_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC8_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC9_D0_reg  <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D1_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D2_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D3_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D4_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D5_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D6_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D7_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D8_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D9_reg  <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D10_reg <= P_ZERO;                         \n";
     r16_wd_buf << " 			RDC9_D11_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D12_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D13_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D14_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D15_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D16_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D17_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D18_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D19_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D20_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D21_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D22_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D23_reg <= P_ZERO ;                        \n";
     r16_wd_buf << " 			RDC9_D_out   <= P_ZERO ;                        \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC10_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC10_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC10_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC11_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC11_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC11_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC12_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC12_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC12_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC13_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC13_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC13_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC14_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC14_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC14_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC15_D0_reg  <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D1_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D2_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D3_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D4_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D5_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D6_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D7_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D8_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D9_reg  <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D10_reg <= P_ZERO;                        \n";
     r16_wd_buf << " 			RDC15_D11_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D12_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D13_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D14_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D15_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D16_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D17_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D18_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D19_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D20_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D21_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D22_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D23_reg <= P_ZERO ;                       \n";
     r16_wd_buf << " 			RDC15_D_out   <= P_ZERO ;                       \n";
     r16_wd_buf << " 		end                                                 \n";
     r16_wd_buf << " 		else begin                                          \n";
     r16_wd_buf << " 			RDC0_D0_reg  <= RDC0_in ;                       \n";
     r16_wd_buf << " 			RDC0_D1_reg  <= RDC0_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D2_reg  <= RDC0_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D3_reg  <= RDC0_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D4_reg  <= RDC0_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D5_reg  <= RDC0_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D6_reg  <= RDC0_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D7_reg  <= RDC0_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D8_reg  <= RDC0_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D9_reg  <= RDC0_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D10_reg <= RDC0_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC0_D11_reg <= RDC0_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D12_reg <= RDC0_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D13_reg <= RDC0_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D14_reg <= RDC0_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D15_reg <= RDC0_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D16_reg <= RDC0_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D17_reg <= RDC0_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D18_reg <= RDC0_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D19_reg <= RDC0_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D20_reg <= RDC0_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D21_reg <= RDC0_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D22_reg <= RDC0_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D23_reg <= RDC0_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC0_D_out   <= RDC0_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC1_D0_reg  <= RDC1_in ;                       \n";
     r16_wd_buf << " 			RDC1_D1_reg  <= RDC1_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D2_reg  <= RDC1_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D3_reg  <= RDC1_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D4_reg  <= RDC1_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D5_reg  <= RDC1_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D6_reg  <= RDC1_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D7_reg  <= RDC1_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D8_reg  <= RDC1_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D9_reg  <= RDC1_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D10_reg <= RDC1_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC1_D11_reg <= RDC1_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D12_reg <= RDC1_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D13_reg <= RDC1_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D14_reg <= RDC1_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D15_reg <= RDC1_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D16_reg <= RDC1_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D17_reg <= RDC1_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D18_reg <= RDC1_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D19_reg <= RDC1_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D20_reg <= RDC1_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D21_reg <= RDC1_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D22_reg <= RDC1_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D23_reg <= RDC1_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC1_D_out   <= RDC1_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC2_D0_reg  <= RDC2_in ;                       \n";
     r16_wd_buf << " 			RDC2_D1_reg  <= RDC2_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D2_reg  <= RDC2_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D3_reg  <= RDC2_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D4_reg  <= RDC2_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D5_reg  <= RDC2_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D6_reg  <= RDC2_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D7_reg  <= RDC2_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D8_reg  <= RDC2_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D9_reg  <= RDC2_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D10_reg <= RDC2_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC2_D11_reg <= RDC2_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D12_reg <= RDC2_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D13_reg <= RDC2_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D14_reg <= RDC2_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D15_reg <= RDC2_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D16_reg <= RDC2_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D17_reg <= RDC2_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D18_reg <= RDC2_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D19_reg <= RDC2_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D20_reg <= RDC2_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D21_reg <= RDC2_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D22_reg <= RDC2_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D23_reg <= RDC2_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC2_D_out   <= RDC2_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC3_D0_reg  <= RDC3_in ;                       \n";
     r16_wd_buf << " 			RDC3_D1_reg  <= RDC3_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D2_reg  <= RDC3_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D3_reg  <= RDC3_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D4_reg  <= RDC3_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D5_reg  <= RDC3_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D6_reg  <= RDC3_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D7_reg  <= RDC3_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D8_reg  <= RDC3_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D9_reg  <= RDC3_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D10_reg <= RDC3_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC3_D11_reg <= RDC3_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D12_reg <= RDC3_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D13_reg <= RDC3_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D14_reg <= RDC3_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D15_reg <= RDC3_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D16_reg <= RDC3_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D17_reg <= RDC3_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D18_reg <= RDC3_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D19_reg <= RDC3_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D20_reg <= RDC3_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D21_reg <= RDC3_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D22_reg <= RDC3_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D23_reg <= RDC3_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC3_D_out   <= RDC3_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC4_D0_reg  <= RDC4_in ;                       \n";
     r16_wd_buf << " 			RDC4_D1_reg  <= RDC4_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D2_reg  <= RDC4_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D3_reg  <= RDC4_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D4_reg  <= RDC4_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D5_reg  <= RDC4_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D6_reg  <= RDC4_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D7_reg  <= RDC4_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D8_reg  <= RDC4_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D9_reg  <= RDC4_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D10_reg <= RDC4_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC4_D11_reg <= RDC4_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D12_reg <= RDC4_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D13_reg <= RDC4_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D14_reg <= RDC4_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D15_reg <= RDC4_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D16_reg <= RDC4_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D17_reg <= RDC4_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D18_reg <= RDC4_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D19_reg <= RDC4_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D20_reg <= RDC4_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D21_reg <= RDC4_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D22_reg <= RDC4_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D23_reg <= RDC4_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC4_D_out   <= RDC4_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC5_D0_reg  <= RDC5_in ;                       \n";
     r16_wd_buf << " 			RDC5_D1_reg  <= RDC5_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D2_reg  <= RDC5_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D3_reg  <= RDC5_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D4_reg  <= RDC5_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D5_reg  <= RDC5_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D6_reg  <= RDC5_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D7_reg  <= RDC5_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D8_reg  <= RDC5_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D9_reg  <= RDC5_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D10_reg <= RDC5_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC5_D11_reg <= RDC5_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D12_reg <= RDC5_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D13_reg <= RDC5_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D14_reg <= RDC5_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D15_reg <= RDC5_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D16_reg <= RDC5_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D17_reg <= RDC5_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D18_reg <= RDC5_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D19_reg <= RDC5_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D20_reg <= RDC5_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D21_reg <= RDC5_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D22_reg <= RDC5_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D23_reg <= RDC5_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC5_D_out   <= RDC5_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC6_D0_reg  <= RDC6_in ;                       \n";
     r16_wd_buf << " 			RDC6_D1_reg  <= RDC6_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D2_reg  <= RDC6_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D3_reg  <= RDC6_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D4_reg  <= RDC6_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D5_reg  <= RDC6_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D6_reg  <= RDC6_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D7_reg  <= RDC6_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D8_reg  <= RDC6_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D9_reg  <= RDC6_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D10_reg <= RDC6_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC6_D11_reg <= RDC6_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D12_reg <= RDC6_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D13_reg <= RDC6_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D14_reg <= RDC6_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D15_reg <= RDC6_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D16_reg <= RDC6_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D17_reg <= RDC6_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D18_reg <= RDC6_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D19_reg <= RDC6_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D20_reg <= RDC6_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D21_reg <= RDC6_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D22_reg <= RDC6_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D23_reg <= RDC6_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC6_D_out   <= RDC6_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC7_D0_reg  <= RDC7_in ;                       \n";
     r16_wd_buf << " 			RDC7_D1_reg  <= RDC7_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D2_reg  <= RDC7_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D3_reg  <= RDC7_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D4_reg  <= RDC7_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D5_reg  <= RDC7_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D6_reg  <= RDC7_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D7_reg  <= RDC7_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D8_reg  <= RDC7_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D9_reg  <= RDC7_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D10_reg <= RDC7_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC7_D11_reg <= RDC7_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D12_reg <= RDC7_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D13_reg <= RDC7_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D14_reg <= RDC7_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D15_reg <= RDC7_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D16_reg <= RDC7_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D17_reg <= RDC7_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D18_reg <= RDC7_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D19_reg <= RDC7_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D20_reg <= RDC7_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D21_reg <= RDC7_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D22_reg <= RDC7_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D23_reg <= RDC7_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC7_D_out   <= RDC7_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC8_D0_reg  <= RDC8_in ;                       \n";
     r16_wd_buf << " 			RDC8_D1_reg  <= RDC8_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D2_reg  <= RDC8_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D3_reg  <= RDC8_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D4_reg  <= RDC8_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D5_reg  <= RDC8_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D6_reg  <= RDC8_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D7_reg  <= RDC8_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D8_reg  <= RDC8_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D9_reg  <= RDC8_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D10_reg <= RDC8_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC8_D11_reg <= RDC8_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D12_reg <= RDC8_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D13_reg <= RDC8_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D14_reg <= RDC8_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D15_reg <= RDC8_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D16_reg <= RDC8_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D17_reg <= RDC8_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D18_reg <= RDC8_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D19_reg <= RDC8_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D20_reg <= RDC8_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D21_reg <= RDC8_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D22_reg <= RDC8_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D23_reg <= RDC8_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC8_D_out   <= RDC8_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC9_D0_reg  <= RDC9_in ;                       \n";
     r16_wd_buf << " 			RDC9_D1_reg  <= RDC9_D0_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D2_reg  <= RDC9_D1_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D3_reg  <= RDC9_D2_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D4_reg  <= RDC9_D3_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D5_reg  <= RDC9_D4_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D6_reg  <= RDC9_D5_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D7_reg  <= RDC9_D6_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D8_reg  <= RDC9_D7_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D9_reg  <= RDC9_D8_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D10_reg <= RDC9_D9_reg ;                   \n";
     r16_wd_buf << " 			RDC9_D11_reg <= RDC9_D10_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D12_reg <= RDC9_D11_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D13_reg <= RDC9_D12_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D14_reg <= RDC9_D13_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D15_reg <= RDC9_D14_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D16_reg <= RDC9_D15_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D17_reg <= RDC9_D16_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D18_reg <= RDC9_D17_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D19_reg <= RDC9_D18_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D20_reg <= RDC9_D19_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D21_reg <= RDC9_D20_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D22_reg <= RDC9_D21_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D23_reg <= RDC9_D22_reg ;                  \n";
     r16_wd_buf << " 			RDC9_D_out   <= RDC9_D23_reg ;                  \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC10_D0_reg  <= RDC10_in ;                     \n";
     r16_wd_buf << " 			RDC10_D1_reg  <= RDC10_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D2_reg  <= RDC10_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D3_reg  <= RDC10_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D4_reg  <= RDC10_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D5_reg  <= RDC10_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D6_reg  <= RDC10_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D7_reg  <= RDC10_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D8_reg  <= RDC10_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D9_reg  <= RDC10_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D10_reg <= RDC10_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC10_D11_reg <= RDC10_D10_reg ;                \n";
     r16_wd_buf << " 			RDC10_D12_reg <= RDC10_D11_reg ;                \n";
     r16_wd_buf << " 			RDC10_D13_reg <= RDC10_D12_reg ;                \n";
     r16_wd_buf << " 			RDC10_D14_reg <= RDC10_D13_reg ;                \n";
     r16_wd_buf << " 			RDC10_D15_reg <= RDC10_D14_reg ;                \n";
     r16_wd_buf << " 			RDC10_D16_reg <= RDC10_D15_reg ;                \n";
     r16_wd_buf << " 			RDC10_D17_reg <= RDC10_D16_reg ;                \n";
     r16_wd_buf << " 			RDC10_D18_reg <= RDC10_D17_reg ;                \n";
     r16_wd_buf << " 			RDC10_D19_reg <= RDC10_D18_reg ;                \n";
     r16_wd_buf << " 			RDC10_D20_reg <= RDC10_D19_reg ;                \n";
     r16_wd_buf << " 			RDC10_D21_reg <= RDC10_D20_reg ;                \n";
     r16_wd_buf << " 			RDC10_D22_reg <= RDC10_D21_reg ;                \n";
     r16_wd_buf << " 			RDC10_D23_reg <= RDC10_D22_reg ;                \n";
     r16_wd_buf << " 			RDC10_D_out   <= RDC10_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC11_D0_reg  <= RDC11_in ;                     \n";
     r16_wd_buf << " 			RDC11_D1_reg  <= RDC11_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D2_reg  <= RDC11_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D3_reg  <= RDC11_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D4_reg  <= RDC11_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D5_reg  <= RDC11_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D6_reg  <= RDC11_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D7_reg  <= RDC11_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D8_reg  <= RDC11_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D9_reg  <= RDC11_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D10_reg <= RDC11_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC11_D11_reg <= RDC11_D10_reg ;                \n";
     r16_wd_buf << " 			RDC11_D12_reg <= RDC11_D11_reg ;                \n";
     r16_wd_buf << " 			RDC11_D13_reg <= RDC11_D12_reg ;                \n";
     r16_wd_buf << " 			RDC11_D14_reg <= RDC11_D13_reg ;                \n";
     r16_wd_buf << " 			RDC11_D15_reg <= RDC11_D14_reg ;                \n";
     r16_wd_buf << " 			RDC11_D16_reg <= RDC11_D15_reg ;                \n";
     r16_wd_buf << " 			RDC11_D17_reg <= RDC11_D16_reg ;                \n";
     r16_wd_buf << " 			RDC11_D18_reg <= RDC11_D17_reg ;                \n";
     r16_wd_buf << " 			RDC11_D19_reg <= RDC11_D18_reg ;                \n";
     r16_wd_buf << " 			RDC11_D20_reg <= RDC11_D19_reg ;                \n";
     r16_wd_buf << " 			RDC11_D21_reg <= RDC11_D20_reg ;                \n";
     r16_wd_buf << " 			RDC11_D22_reg <= RDC11_D21_reg ;                \n";
     r16_wd_buf << " 			RDC11_D23_reg <= RDC11_D22_reg ;                \n";
     r16_wd_buf << " 			RDC11_D_out   <= RDC11_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC12_D0_reg  <= RDC12_in ;                     \n";
     r16_wd_buf << " 			RDC12_D1_reg  <= RDC12_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D2_reg  <= RDC12_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D3_reg  <= RDC12_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D4_reg  <= RDC12_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D5_reg  <= RDC12_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D6_reg  <= RDC12_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D7_reg  <= RDC12_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D8_reg  <= RDC12_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D9_reg  <= RDC12_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D10_reg <= RDC12_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC12_D11_reg <= RDC12_D10_reg ;                \n";
     r16_wd_buf << " 			RDC12_D12_reg <= RDC12_D11_reg ;                \n";
     r16_wd_buf << " 			RDC12_D13_reg <= RDC12_D12_reg ;                \n";
     r16_wd_buf << " 			RDC12_D14_reg <= RDC12_D13_reg ;                \n";
     r16_wd_buf << " 			RDC12_D15_reg <= RDC12_D14_reg ;                \n";
     r16_wd_buf << " 			RDC12_D16_reg <= RDC12_D15_reg ;                \n";
     r16_wd_buf << " 			RDC12_D17_reg <= RDC12_D16_reg ;                \n";
     r16_wd_buf << " 			RDC12_D18_reg <= RDC12_D17_reg ;                \n";
     r16_wd_buf << " 			RDC12_D19_reg <= RDC12_D18_reg ;                \n";
     r16_wd_buf << " 			RDC12_D20_reg <= RDC12_D19_reg ;                \n";
     r16_wd_buf << " 			RDC12_D21_reg <= RDC12_D20_reg ;                \n";
     r16_wd_buf << " 			RDC12_D22_reg <= RDC12_D21_reg ;                \n";
     r16_wd_buf << " 			RDC12_D23_reg <= RDC12_D22_reg ;                \n";
     r16_wd_buf << " 			RDC12_D_out   <= RDC12_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC13_D0_reg  <= RDC13_in ;                     \n";
     r16_wd_buf << " 			RDC13_D1_reg  <= RDC13_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D2_reg  <= RDC13_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D3_reg  <= RDC13_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D4_reg  <= RDC13_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D5_reg  <= RDC13_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D6_reg  <= RDC13_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D7_reg  <= RDC13_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D8_reg  <= RDC13_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D9_reg  <= RDC13_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D10_reg <= RDC13_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC13_D11_reg <= RDC13_D10_reg ;                \n";
     r16_wd_buf << " 			RDC13_D12_reg <= RDC13_D11_reg ;                \n";
     r16_wd_buf << " 			RDC13_D13_reg <= RDC13_D12_reg ;                \n";
     r16_wd_buf << " 			RDC13_D14_reg <= RDC13_D13_reg ;                \n";
     r16_wd_buf << " 			RDC13_D15_reg <= RDC13_D14_reg ;                \n";
     r16_wd_buf << " 			RDC13_D16_reg <= RDC13_D15_reg ;                \n";
     r16_wd_buf << " 			RDC13_D17_reg <= RDC13_D16_reg ;                \n";
     r16_wd_buf << " 			RDC13_D18_reg <= RDC13_D17_reg ;                \n";
     r16_wd_buf << " 			RDC13_D19_reg <= RDC13_D18_reg ;                \n";
     r16_wd_buf << " 			RDC13_D20_reg <= RDC13_D19_reg ;                \n";
     r16_wd_buf << " 			RDC13_D21_reg <= RDC13_D20_reg ;                \n";
     r16_wd_buf << " 			RDC13_D22_reg <= RDC13_D21_reg ;                \n";
     r16_wd_buf << " 			RDC13_D23_reg <= RDC13_D22_reg ;                \n";
     r16_wd_buf << " 			RDC13_D_out   <= RDC13_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC14_D0_reg  <= RDC14_in ;                     \n";
     r16_wd_buf << " 			RDC14_D1_reg  <= RDC14_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D2_reg  <= RDC14_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D3_reg  <= RDC14_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D4_reg  <= RDC14_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D5_reg  <= RDC14_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D6_reg  <= RDC14_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D7_reg  <= RDC14_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D8_reg  <= RDC14_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D9_reg  <= RDC14_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D10_reg <= RDC14_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC14_D11_reg <= RDC14_D10_reg ;                \n";
     r16_wd_buf << " 			RDC14_D12_reg <= RDC14_D11_reg ;                \n";
     r16_wd_buf << " 			RDC14_D13_reg <= RDC14_D12_reg ;                \n";
     r16_wd_buf << " 			RDC14_D14_reg <= RDC14_D13_reg ;                \n";
     r16_wd_buf << " 			RDC14_D15_reg <= RDC14_D14_reg ;                \n";
     r16_wd_buf << " 			RDC14_D16_reg <= RDC14_D15_reg ;                \n";
     r16_wd_buf << " 			RDC14_D17_reg <= RDC14_D16_reg ;                \n";
     r16_wd_buf << " 			RDC14_D18_reg <= RDC14_D17_reg ;                \n";
     r16_wd_buf << " 			RDC14_D19_reg <= RDC14_D18_reg ;                \n";
     r16_wd_buf << " 			RDC14_D20_reg <= RDC14_D19_reg ;                \n";
     r16_wd_buf << " 			RDC14_D21_reg <= RDC14_D20_reg ;                \n";
     r16_wd_buf << " 			RDC14_D22_reg <= RDC14_D21_reg ;                \n";
     r16_wd_buf << " 			RDC14_D23_reg <= RDC14_D22_reg ;                \n";
     r16_wd_buf << " 			RDC14_D_out   <= RDC14_D23_reg ;                \n";
     r16_wd_buf << " 			//                                              \n";
     r16_wd_buf << " 			RDC15_D0_reg  <= RDC15_in ;                     \n";
     r16_wd_buf << " 			RDC15_D1_reg  <= RDC15_D0_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D2_reg  <= RDC15_D1_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D3_reg  <= RDC15_D2_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D4_reg  <= RDC15_D3_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D5_reg  <= RDC15_D4_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D6_reg  <= RDC15_D5_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D7_reg  <= RDC15_D6_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D8_reg  <= RDC15_D7_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D9_reg  <= RDC15_D8_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D10_reg <= RDC15_D9_reg ;                 \n";
     r16_wd_buf << " 			RDC15_D11_reg <= RDC15_D10_reg ;                \n";
     r16_wd_buf << " 			RDC15_D12_reg <= RDC15_D11_reg ;                \n";
     r16_wd_buf << " 			RDC15_D13_reg <= RDC15_D12_reg ;                \n";
     r16_wd_buf << " 			RDC15_D14_reg <= RDC15_D13_reg ;                \n";
     r16_wd_buf << " 			RDC15_D15_reg <= RDC15_D14_reg ;                \n";
     r16_wd_buf << " 			RDC15_D16_reg <= RDC15_D15_reg ;                \n";
     r16_wd_buf << " 			RDC15_D17_reg <= RDC15_D16_reg ;                \n";
     r16_wd_buf << " 			RDC15_D18_reg <= RDC15_D17_reg ;                \n";
     r16_wd_buf << " 			RDC15_D19_reg <= RDC15_D18_reg ;                \n";
     r16_wd_buf << " 			RDC15_D20_reg <= RDC15_D19_reg ;                \n";
     r16_wd_buf << " 			RDC15_D21_reg <= RDC15_D20_reg ;                \n";
     r16_wd_buf << " 			RDC15_D22_reg <= RDC15_D21_reg ;                \n";
     r16_wd_buf << " 			RDC15_D23_reg <= RDC15_D22_reg ;                \n";
     r16_wd_buf << " 			RDC15_D_out   <= RDC15_D23_reg ;                \n";
     r16_wd_buf << " 			                                                \n";
     r16_wd_buf << " 		end                                                 \n";
     r16_wd_buf << " 	end                                                     \n";
     r16_wd_buf << "                                                            \n";
     r16_wd_buf << " endmodule                                                  \n";
	 r16_wd_buf.close();
}
//change address parameter
void CenCtrl::R16_WAddr(std::string string_in){
	 std::ofstream r16_waddr;
     std::string        string_buf = "/R16_WAddr.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 r16_waddr.open(ss.str());
     r16_waddr << " `timescale 1 ns/1 ps                       \n";
     r16_waddr << " module R16_WAddr(BND_out,                  \n";
     r16_waddr << " 			     WMA_out,                  \n";
     r16_waddr << "                  BN_in,                    \n";
     r16_waddr << " 		         MA_in,                    \n";
     r16_waddr << "                  rst_n,                    \n";
     r16_waddr << "                  clk                       \n";
     r16_waddr << "                  ) ;                       \n";
     r16_waddr << " parameter A_WIDTH   = " << addr_width << ";\n";
     r16_waddr << "                                               \n";
     r16_waddr << " parameter A_ZERO    = " << addr_width <<"'h0; \n";
     r16_waddr << " parameter BN_ZERO   = 1'h0 ;                  \n";
     r16_waddr << "                                               \n";
     r16_waddr << "                                               \n";
     r16_waddr << " output              BND_out ;                 \n";
     r16_waddr << " output[A_WIDTH-1:0] WMA_out ;                 \n";
     r16_waddr << "                                               \n";
     r16_waddr << " input               BN_in ;                   \n";
     r16_waddr << " input [A_WIDTH-1:0] MA_in ;                   \n";
     r16_waddr << " input               rst_n ;                   \n";
     r16_waddr << " input               clk ;                     \n";
     r16_waddr << "                                               \n";
     r16_waddr << "                                               \n";
     r16_waddr << " reg                 BN_D0_reg ;               \n";
     r16_waddr << " reg                 BN_D1_reg ;               \n";
     r16_waddr << " reg                 BN_D2_reg ;               \n";
     r16_waddr << " reg                 BN_D3_reg ;               \n";
     r16_waddr << " reg                 BN_D4_reg ;               \n";
     r16_waddr << " reg                 BN_D5_reg ;               \n";
     r16_waddr << " reg                 BN_D6_reg ;               \n";
     r16_waddr << " reg                 BN_D7_reg ;               \n";
     r16_waddr << " reg                 BN_D8_reg ;               \n";
     r16_waddr << " reg                 BN_D9_reg ;               \n";
     r16_waddr << " reg                 BN_D10_reg ;              \n";
     r16_waddr << " reg                 BN_D11_reg ;              \n";
     r16_waddr << " reg                 BN_D12_reg ;              \n";
     r16_waddr << " reg                 BN_D13_reg ;              \n";
     r16_waddr << " reg                 BN_D14_reg ;              \n";
     r16_waddr << " reg                 BN_D15_reg ;              \n";
     r16_waddr << " reg                 BN_D16_reg ;              \n";
     r16_waddr << " reg                 BN_D17_reg ;              \n";
     r16_waddr << " reg                 BN_D18_reg ;              \n";
     r16_waddr << " reg                 BN_D19_reg ;              \n";
     r16_waddr << " reg                 BN_D20_reg ;              \n";
     r16_waddr << " reg                 BN_D21_reg ;              \n";
     r16_waddr << " reg                 BN_D22_reg ;              \n";
     r16_waddr << " reg                 BN_D23_reg ;              \n";
     r16_waddr << " reg                 BN_D24_reg ;              \n";
     r16_waddr << " reg                 BN_D25_reg ;              \n";
     r16_waddr << " reg                 BN_D26_reg ;              \n";
     r16_waddr << " reg                 BN_D27_reg ;              \n";
     r16_waddr << " reg                 BN_D28_reg ;              \n";
     r16_waddr << " reg                 BN_D29_reg ;              \n";
     r16_waddr << " reg                 BN_D30_reg ;              \n";
     r16_waddr << " reg                 BN_D31_reg ;              \n";
     r16_waddr << " reg                 BN_D32_reg ;              \n";
     r16_waddr << " reg                 BN_D33_reg ;              \n";
     r16_waddr << " reg                 BN_D34_reg ;              \n";
     r16_waddr << " reg                 BN_D35_reg ;              \n";
     r16_waddr << " reg                 BN_D36_reg ;              \n";
     r16_waddr << " reg                 BN_D37_reg ;              \n";
     r16_waddr << " reg                 BN_D38_reg ;              \n";
     r16_waddr << " reg                 BN_D39_reg ;              \n";
     r16_waddr << " reg                 BN_D40_reg ;              \n";
     r16_waddr << " reg                 BN_D41_reg ;              \n";
     r16_waddr << " reg                 BN_D42_reg ;              \n";
     r16_waddr << " reg                 BN_D43_reg ;              \n";
     r16_waddr << " reg                 BN_D44_reg ;              \n";
     r16_waddr << " reg                 BN_D45_reg ;              \n";
     r16_waddr << " reg                 BND_out ;                 \n";
     r16_waddr << "                                               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D0_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D1_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D2_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D3_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D4_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D5_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D6_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D7_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D8_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D9_reg ;               \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D10_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D11_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D12_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D13_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D14_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D15_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D16_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D17_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D18_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D19_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D20_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D21_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D22_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D23_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D24_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D25_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D26_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D27_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D28_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D29_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D30_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D31_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D32_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D33_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D34_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D35_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D36_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D37_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D38_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D39_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D40_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D41_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D42_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D43_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D44_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D45_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] MA_D46_reg ;              \n";
     r16_waddr << " reg   [A_WIDTH-1:0] WMA_out ;                 \n";
     r16_waddr << "                                               \n";
     r16_waddr << "                                               \n";
     r16_waddr << " 	//BN delay 47 cycles and MA delay 48 cycles\n";
     r16_waddr << " 	always @(posedge clk or negedge rst_n) begin\n";
     r16_waddr << " 		if(~rst_n) begin                      \n";
     r16_waddr << " 			BN_D0_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D1_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D2_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D3_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D4_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D5_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D6_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D7_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D8_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D9_reg  <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D10_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D11_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D12_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D13_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D14_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D15_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D16_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D17_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D18_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D19_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D20_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D21_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D22_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D23_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D24_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D25_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D26_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D27_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D28_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D29_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D30_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D31_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D32_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D33_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D34_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D35_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D36_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D37_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D38_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D39_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D40_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D41_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D42_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D43_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D44_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BN_D45_reg <= BN_ZERO ;           \n";
     r16_waddr << " 			BND_out    <= BN_ZERO ;           \n";
     r16_waddr << " 			                                  \n";
     r16_waddr << " 			MA_D0_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D1_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D2_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D3_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D4_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D5_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D6_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D7_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D8_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D9_reg  <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D10_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D11_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D12_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D13_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D14_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D15_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D16_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D17_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D18_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D19_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D20_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D21_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D22_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D23_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D24_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D25_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D26_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D27_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D28_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D29_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D30_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D31_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D32_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D33_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D34_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D35_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D36_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D37_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D38_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D39_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D40_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D41_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D42_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D43_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D44_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D45_reg <= A_ZERO ;            \n";
     r16_waddr << " 			MA_D46_reg <= A_ZERO ;            \n";
     r16_waddr << " 			WMA_out    <= A_ZERO ;            \n";
     r16_waddr << " 		end                                   \n";
     r16_waddr << " 		else begin                            \n";
     r16_waddr << " 			BN_D0_reg  <= BN_in ;             \n";
     r16_waddr << " 			BN_D1_reg  <= BN_D0_reg ;         \n";
     r16_waddr << " 			BN_D2_reg  <= BN_D1_reg ;         \n";
     r16_waddr << " 			BN_D3_reg  <= BN_D2_reg ;         \n";
     r16_waddr << " 			BN_D4_reg  <= BN_D3_reg ;         \n";
     r16_waddr << " 			BN_D5_reg  <= BN_D4_reg ;         \n";
     r16_waddr << " 			BN_D6_reg  <= BN_D5_reg ;         \n";
     r16_waddr << " 			BN_D7_reg  <= BN_D6_reg ;         \n";
     r16_waddr << " 			BN_D8_reg  <= BN_D7_reg ;         \n";
     r16_waddr << " 			BN_D9_reg  <= BN_D8_reg ;         \n";
     r16_waddr << " 			BN_D10_reg <= BN_D9_reg ;         \n";
     r16_waddr << " 			BN_D11_reg <= BN_D10_reg ;        \n";
     r16_waddr << " 			BN_D12_reg <= BN_D11_reg ;        \n";
     r16_waddr << " 			BN_D13_reg <= BN_D12_reg ;        \n";
     r16_waddr << " 			BN_D14_reg <= BN_D13_reg ;        \n";
     r16_waddr << " 			BN_D15_reg <= BN_D14_reg ;        \n";
     r16_waddr << " 			BN_D16_reg <= BN_D15_reg ;        \n";
     r16_waddr << " 			BN_D17_reg <= BN_D16_reg ;        \n";
     r16_waddr << " 			BN_D18_reg <= BN_D17_reg ;        \n";
     r16_waddr << " 			BN_D19_reg <= BN_D18_reg ;        \n";
     r16_waddr << " 			BN_D20_reg <= BN_D19_reg ;        \n";
     r16_waddr << " 			BN_D21_reg <= BN_D20_reg ;        \n";
     r16_waddr << " 			BN_D22_reg <= BN_D21_reg ;        \n";
     r16_waddr << " 			BN_D23_reg <= BN_D22_reg ;        \n";
     r16_waddr << " 			BN_D24_reg <= BN_D23_reg ;        \n";
     r16_waddr << " 			BN_D25_reg <= BN_D24_reg ;        \n";
     r16_waddr << " 			BN_D26_reg <= BN_D25_reg ;        \n";
     r16_waddr << " 			BN_D27_reg <= BN_D26_reg ;        \n";
     r16_waddr << " 			BN_D28_reg <= BN_D27_reg ;        \n";
     r16_waddr << " 			BN_D29_reg <= BN_D28_reg ;        \n";
     r16_waddr << " 			BN_D30_reg <= BN_D29_reg ;        \n";
     r16_waddr << " 			BN_D31_reg <= BN_D30_reg ;        \n";
     r16_waddr << " 			BN_D32_reg <= BN_D31_reg ;        \n";
     r16_waddr << " 			BN_D33_reg <= BN_D32_reg ;        \n";
     r16_waddr << " 			BN_D34_reg <= BN_D33_reg ;        \n";
     r16_waddr << " 			BN_D35_reg <= BN_D34_reg ;        \n";
     r16_waddr << " 			BN_D36_reg <= BN_D35_reg ;        \n";
     r16_waddr << " 			BN_D37_reg <= BN_D36_reg ;        \n";
     r16_waddr << " 			BN_D38_reg <= BN_D37_reg ;        \n";
     r16_waddr << " 			BN_D39_reg <= BN_D38_reg ;        \n";
     r16_waddr << " 			BN_D40_reg <= BN_D39_reg ;        \n";
     r16_waddr << " 			BN_D41_reg <= BN_D40_reg ;        \n";
     r16_waddr << " 			BN_D42_reg <= BN_D41_reg ;        \n";
     r16_waddr << " 			BN_D43_reg <= BN_D42_reg ;        \n";
     r16_waddr << " 			BN_D44_reg <= BN_D43_reg ;        \n";
     r16_waddr << " 			BN_D45_reg <= BN_D44_reg ;        \n";
     r16_waddr << " 			BND_out    <= BN_D45_reg ;        \n";
     r16_waddr << " 			                                  \n";
     r16_waddr << " 			MA_D0_reg  <= MA_in ;             \n";
     r16_waddr << " 			MA_D1_reg  <= MA_D0_reg ;         \n";
     r16_waddr << " 			MA_D2_reg  <= MA_D1_reg ;         \n";
     r16_waddr << " 			MA_D3_reg  <= MA_D2_reg ;         \n";
     r16_waddr << " 			MA_D4_reg  <= MA_D3_reg ;         \n";
     r16_waddr << " 			MA_D5_reg  <= MA_D4_reg ;         \n";
     r16_waddr << " 			MA_D6_reg  <= MA_D5_reg ;         \n";
     r16_waddr << " 			MA_D7_reg  <= MA_D6_reg ;         \n";
     r16_waddr << " 			MA_D8_reg  <= MA_D7_reg ;         \n";
     r16_waddr << " 			MA_D9_reg  <= MA_D8_reg ;         \n";
     r16_waddr << " 			MA_D10_reg <= MA_D9_reg ;         \n";
     r16_waddr << " 			MA_D11_reg <= MA_D10_reg ;        \n";
     r16_waddr << " 			MA_D12_reg <= MA_D11_reg ;        \n";
     r16_waddr << " 			MA_D13_reg <= MA_D12_reg ;        \n";
     r16_waddr << " 			MA_D14_reg <= MA_D13_reg ;        \n";
     r16_waddr << " 			MA_D15_reg <= MA_D14_reg ;        \n";
     r16_waddr << " 			MA_D16_reg <= MA_D15_reg ;        \n";
     r16_waddr << " 			MA_D17_reg <= MA_D16_reg ;        \n";
     r16_waddr << " 			MA_D18_reg <= MA_D17_reg ;        \n";
     r16_waddr << " 			MA_D19_reg <= MA_D18_reg ;        \n";
     r16_waddr << " 			MA_D20_reg <= MA_D19_reg ;        \n";
     r16_waddr << " 			MA_D21_reg <= MA_D20_reg ;        \n";
     r16_waddr << " 			MA_D22_reg <= MA_D21_reg ;        \n";
     r16_waddr << " 			MA_D23_reg <= MA_D22_reg ;        \n";
     r16_waddr << " 			MA_D24_reg <= MA_D23_reg ;        \n";
     r16_waddr << " 			MA_D25_reg <= MA_D24_reg ;        \n";
     r16_waddr << " 			MA_D26_reg <= MA_D25_reg ;        \n";
     r16_waddr << " 			MA_D27_reg <= MA_D26_reg ;        \n";
     r16_waddr << " 			MA_D28_reg <= MA_D27_reg ;        \n";
     r16_waddr << " 			MA_D29_reg <= MA_D28_reg ;        \n";
     r16_waddr << " 			MA_D30_reg <= MA_D29_reg ;        \n";
     r16_waddr << " 			MA_D31_reg <= MA_D30_reg ;        \n";
     r16_waddr << " 			MA_D32_reg <= MA_D31_reg ;        \n";
     r16_waddr << " 			MA_D33_reg <= MA_D32_reg ;        \n";
     r16_waddr << " 			MA_D34_reg <= MA_D33_reg ;        \n";
     r16_waddr << " 			MA_D35_reg <= MA_D34_reg ;        \n";
     r16_waddr << " 			MA_D36_reg <= MA_D35_reg ;        \n";
     r16_waddr << " 			MA_D37_reg <= MA_D36_reg ;        \n";
     r16_waddr << " 			MA_D38_reg <= MA_D37_reg ;        \n";
     r16_waddr << " 			MA_D39_reg <= MA_D38_reg ;        \n";
     r16_waddr << " 			MA_D40_reg <= MA_D39_reg ;        \n";
     r16_waddr << " 			MA_D41_reg <= MA_D40_reg ;        \n";
     r16_waddr << " 			MA_D42_reg <= MA_D41_reg ;        \n";
     r16_waddr << " 			MA_D43_reg <= MA_D42_reg ;        \n";
     r16_waddr << " 			MA_D44_reg <= MA_D43_reg ;        \n";
     r16_waddr << " 			MA_D45_reg <= MA_D44_reg ;        \n";
     r16_waddr << " 			MA_D46_reg <= MA_D45_reg ;        \n";
     r16_waddr << " 			WMA_out    <= MA_D46_reg ;        \n";
     r16_waddr << " 		end                                   \n";
     r16_waddr << " 	end                                       \n";
     r16_waddr << "                                               \n";
     r16_waddr << " endmodule                                     \n";	 
     r16_waddr.close();	 
}

void  CenCtrl::R16_DC(std::string string_in){
	 std::ofstream r16_dc;
     std::string        string_buf = "/R16_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_dc.open(ss.str());	
r16_dc << " `timescale 1 ns/1 ps                                                                         \n";
r16_dc << " module R16_DC(RDC_out0,                                                                      \n";
r16_dc << " 			  RDC_out1,                                                                      \n";
r16_dc << " 			  RDC_out2,                                                                      \n";
r16_dc << " 			  RDC_out3,                                                                      \n";
r16_dc << " 			  RDC_out4,                                                                      \n";
r16_dc << " 			  RDC_out5,                                                                      \n";
r16_dc << " 			  RDC_out6,                                                                      \n";
r16_dc << " 			  RDC_out7,                                                                      \n";
r16_dc << " 			  RDC_out8,                                                                      \n";
r16_dc << " 			  RDC_out9,                                                                      \n";
r16_dc << " 			  RDC_out10,                                                                     \n";
r16_dc << " 			  RDC_out11,                                                                     \n";
r16_dc << " 			  RDC_out12,                                                                     \n";
r16_dc << " 			  RDC_out13,                                                                     \n";
r16_dc << " 			  RDC_out14,                                                                     \n";
r16_dc << " 			  RDC_out15,                                                                     \n";
r16_dc << "               RDC_in0,                                                                       \n";
r16_dc << " 		      RDC_in1,                                                                       \n";
r16_dc << " 			  RDC_in2,                                                                       \n";
r16_dc << " 			  RDC_in3,                                                                       \n";
r16_dc << " 			  RDC_in4,                                                                       \n";
r16_dc << " 			  RDC_in5,                                                                       \n";
r16_dc << " 			  RDC_in6,                                                                       \n";
r16_dc << " 			  RDC_in7,                                                                       \n";
r16_dc << " 			  RDC_in8,                                                                       \n";
r16_dc << " 			  RDC_in9,                                                                       \n";
r16_dc << " 			  RDC_in10,                                                                      \n";
r16_dc << " 			  RDC_in11,                                                                      \n";
r16_dc << " 			  RDC_in12,                                                                      \n";
r16_dc << " 			  RDC_in13,                                                                      \n";
r16_dc << " 			  RDC_in14,                                                                      \n";
r16_dc << " 			  RDC_in15,                                                                      \n";
r16_dc << " 			  RDC_sel,                                                                       \n";
//r16_dc << " 			  FFT_FSmode_sel,                                                                \n";
r16_dc << " 			  DC_mode_sel,                                                                   \n";
r16_dc << "               rst_n,                                                                         \n";
r16_dc << "               clk                                                                            \n";
r16_dc << "               ) ;                                                                            \n";
r16_dc << " parameter P_WIDTH     = 64 ;                                                                 \n";
r16_dc << "                                                                                              \n";
r16_dc << " parameter P_ZERO      = 64'h0 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out15 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in0 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in1 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in2 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in3 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in4 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in5 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in6 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in7 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in8 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in9 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in10 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in11 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in12 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in13 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in14 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in15 ;                                                               \n";
r16_dc << " input [3:0]         RDC_sel ;                                                                \n";
//r16_dc << " input [3:0]         FFT_FSmode_sel ;                                                         \n";
r16_dc << " input [1:0]         DC_mode_sel ;                                                            \n";
r16_dc << " input               rst_n ;                                                                  \n";
r16_dc << " input               clk ;                                                                    \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_8_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_14_in_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_13_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_out_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D4_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D8_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  RDC_out15 ;                                                             \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D0_wire = ((FFT_FSmode_sel==4'd1)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd2)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd3)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd4)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd5)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd6)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd7)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? RDC_in0 : // FFT final Stage do not transpose   \n";
r16_dc << " 	assign D0_wire =  (DC_mode_sel == 2'd1)? RDC_in0 :                                       \n";
r16_dc << "                       (RDC_sel==4'd0)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd1)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd11)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D14_13_in_reg :                                      \n";
r16_dc << " 					                    D15_14_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D1_wire = ((FFT_FSmode_sel==4'd1)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd2)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd3)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd4)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd5)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd6)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd7)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D1_0_in_reg :                                   \n";
r16_dc << " 	assign D1_wire =  (DC_mode_sel == 2'd1)? D1_0_in_reg :                                   \n";
r16_dc << "                       (RDC_sel==4'd0)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd2)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd12)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D13_12_in_reg :                                      \n";
r16_dc << " 					                    D14_13_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D2_wire = ((FFT_FSmode_sel==4'd2)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd3)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd4)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd5)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd6)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd7)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D2_1_in_reg :                                   \n";
r16_dc << " 	assign D2_wire =  (DC_mode_sel == 2'd1)? D2_1_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd3)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd13)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D12_11_in_reg :                                      \n";
r16_dc << " 					                    D13_12_in_reg ; // RDC_sel==4'd15					 \n";		  
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D3_wire = ((FFT_FSmode_sel==4'd3)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd4)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd5)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd6)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd7)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D3_2_in_reg :                                   \n";
r16_dc << " 	assign D3_wire =  (DC_mode_sel == 2'd1)? D3_2_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd4)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd14)? D11_10_in_reg :                                      \n";
r16_dc << " 					                    D12_11_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D4_wire = ((FFT_FSmode_sel==4'd4)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd5)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd6)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd7)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D4_3_in_reg :                                   \n";
r16_dc << " 	assign D4_wire =  (DC_mode_sel == 2'd1)? D4_3_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd5)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D10_9_in_reg :                                       \n";
r16_dc << " 					                    D11_10_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D5_wire = ((FFT_FSmode_sel==4'd5)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd6)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd7)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D5_4_in_reg :                                   \n";
r16_dc << " 	assign D5_wire =  (DC_mode_sel == 2'd1)? D5_4_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd6)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D9_8_in_reg :                                        \n";
r16_dc << " 					                    D10_9_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D6_wire = ((FFT_FSmode_sel==4'd6)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd7)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D6_5_in_reg :                                   \n";
r16_dc << " 	assign D6_wire =  (DC_mode_sel == 2'd1)? D6_5_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd1)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd7)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D8_7_in_reg :                                        \n";
r16_dc << " 					                    D9_8_in_reg ; // RDC_sel==4'd15						 \n";	   
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D7_wire = ((FFT_FSmode_sel==4'd7)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd8)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D7_6_in_reg :                                   \n";
r16_dc << " 	assign D7_wire =  (DC_mode_sel == 2'd1)? D7_6_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd2)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd8)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D7_6_in_reg :                                        \n";
r16_dc << " 					                    D8_7_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D8_wire = ((FFT_FSmode_sel==4'd8)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd9)||                                                   \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D8_7_in_reg :                                   \n";
r16_dc << " 	assign D8_wire =  (DC_mode_sel == 2'd1)? D8_7_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd3)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd9)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D6_5_in_reg :                                        \n";
r16_dc << " 					                    D7_6_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D9_wire = ((FFT_FSmode_sel==4'd9)||                                               \n";
//r16_dc << "	                  (FFT_FSmode_sel==4'd10)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd11)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd12)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd13)||                                                  \n";
//r16_dc << "					  (FFT_FSmode_sel==4'd14)) ? D9_8_in_reg :                                   \n";
r16_dc << " 	assign D9_wire =  (DC_mode_sel == 2'd1)? D9_8_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd4)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd9)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd10)? D1_0_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D5_4_in_reg :                                        \n";
r16_dc << " 					                    D6_5_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D10_wire = ((FFT_FSmode_sel==4'd10)||                                             \n";
//r16_dc << "	                   (FFT_FSmode_sel==4'd11)||                                                 \n";
//r16_dc << "					   (FFT_FSmode_sel==4'd12)||                                                 \n";
//r16_dc << "					   (FFT_FSmode_sel==4'd13)||                                                 \n";
//r16_dc << "					   (FFT_FSmode_sel==4'd14)) ? D10_9_in_reg :                                 \n";
r16_dc << " 	assign D10_wire =  (DC_mode_sel == 2'd1)? D10_9_in_reg :                                   \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd5)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd6)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D15_14_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd11)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd12)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D3_2_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D4_3_in_reg :                                       \n";
r16_dc << " 					                     D5_4_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D11_wire = ((FFT_FSmode_sel==4'd11)||                                             \n";
//r16_dc << "	                   (FFT_FSmode_sel==4'd12)||                                                 \n";
//r16_dc << "					   (FFT_FSmode_sel==4'd13)||                                                 \n";
//r16_dc << "					   (FFT_FSmode_sel==4'd14)) ? D11_10_in_reg :                                \n";
r16_dc << " 	assign D11_wire =  (DC_mode_sel == 2'd1)? D11_10_in_reg :                                   \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd6)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd12)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D3_2_in_reg :                                       \n";
r16_dc << " 					                     D4_3_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D12_wire = ((FFT_FSmode_sel==4'd12)||                                             \n";
//r16_dc << "	                   (FFT_FSmode_sel==4'd13)||                                                 \n";
//r16_dc << "					   (FFT_FSmode_sel==4'd14)) ? D12_11_in_reg :                                \n";
r16_dc << " 	assign D12_wire =  (DC_mode_sel == 2'd1)? D12_11_in_reg :                                   \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd7)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd13)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D2_1_in_reg :                                       \n";
r16_dc << " 					                     D3_2_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D13_wire = ((FFT_FSmode_sel==4'd13)||                                             \n";
//r16_dc << "	                   (FFT_FSmode_sel==4'd14)) ? D13_12_in_reg :                                \n";
r16_dc << " 	assign D13_wire =  (DC_mode_sel == 2'd1)? D13_12_in_reg :                                   \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd8)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd14)? D1_0_in_reg :                                       \n";
r16_dc << " 					                     D2_1_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign D14_wire = (FFT_FSmode_sel==4'd14) ? D14_13_in_reg :                              \n";
r16_dc << " 	assign D14_wire = (DC_mode_sel == 2'd1)? D14_13_in_reg :                                   \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd9)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd10)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd11)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D14_13_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D15_14_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? RDC_in0 :                                            \n";
r16_dc << " 					                    D1_0_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
//r16_dc << " 	assign RDC_out15 = (FFT_FSmode_sel==4'd14) ? D15_14_in_reg :                             \n";
r16_dc << " 	assign RDC_out15 = (DC_mode_sel == 2'd1) ? D15_14_in_reg :                             \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D1_0_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D2_1_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd8)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd9)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd10)? D11_10_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D12_11_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd14)? D15_14_in_reg :                                     \n";
r16_dc << " 					                     RDC_in0 ; // RDC_sel==4'd15                         \n";
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	always @(posedge clk or negedge rst_n) begin                                             \n";
r16_dc << " 		if(~rst_n) begin                                                                     \n";
r16_dc << " 			D1_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_8_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D10_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_14_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_12_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_13_out_reg <= P_ZERO ;				                                         \n";
r16_dc << " 			RDC_out0 <= P_ZERO ;                                                             \n";
r16_dc << " 			D1_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D1_12_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out1 <= P_ZERO ;                                                             \n";
r16_dc << " 			D2_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D2_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out2 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out3 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D4_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out4 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out5 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out6 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out7 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out8 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out9 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_3_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out10 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out11 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out12 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out13 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 		else begin                                                                           \n";
r16_dc << " 			D1_0_in_reg <= RDC_in1 ;                                                         \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_in_reg <= RDC_in2 ;                                                         \n";
r16_dc << " 			D2_1_in_reg <= D2_0_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_in_reg <= RDC_in3 ;                                                         \n";
r16_dc << " 			D3_1_in_reg <= D3_0_in_reg ;                                                     \n";
r16_dc << " 			D3_2_in_reg <= D3_1_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_in_reg <= RDC_in4 ;                                                         \n";
r16_dc << " 			D4_1_in_reg <= D4_0_in_reg ;                                                     \n";
r16_dc << " 			D4_2_in_reg <= D4_1_in_reg ;                                                     \n";
r16_dc << " 			D4_3_in_reg <= D4_2_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_in_reg <= RDC_in5 ;                                                         \n";
r16_dc << " 			D5_1_in_reg <= D5_0_in_reg ;                                                     \n";
r16_dc << " 			D5_2_in_reg <= D5_1_in_reg ;                                                     \n";
r16_dc << " 			D5_3_in_reg <= D5_2_in_reg ;                                                     \n";
r16_dc << " 			D5_4_in_reg <= D5_3_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_in_reg <= RDC_in6 ;                                                         \n";
r16_dc << " 			D6_1_in_reg <= D6_0_in_reg ;                                                     \n";
r16_dc << " 			D6_2_in_reg <= D6_1_in_reg ;                                                     \n";
r16_dc << " 			D6_3_in_reg <= D6_2_in_reg ;                                                     \n";
r16_dc << " 			D6_4_in_reg <= D6_3_in_reg ;                                                     \n";
r16_dc << " 			D6_5_in_reg <= D6_4_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_in_reg <= RDC_in7 ;                                                         \n";
r16_dc << " 			D7_1_in_reg <= D7_0_in_reg ;                                                     \n";
r16_dc << " 			D7_2_in_reg <= D7_1_in_reg ;                                                     \n";
r16_dc << " 			D7_3_in_reg <= D7_2_in_reg ;                                                     \n";
r16_dc << " 			D7_4_in_reg <= D7_3_in_reg ;                                                     \n";
r16_dc << " 			D7_5_in_reg <= D7_4_in_reg ;                                                     \n";
r16_dc << " 			D7_6_in_reg <= D7_5_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_in_reg <= RDC_in8 ;                                                         \n";
r16_dc << " 			D8_1_in_reg <= D8_0_in_reg ;                                                     \n";
r16_dc << " 			D8_2_in_reg <= D8_1_in_reg ;                                                     \n";
r16_dc << " 			D8_3_in_reg <= D8_2_in_reg ;                                                     \n";
r16_dc << " 			D8_4_in_reg <= D8_3_in_reg ;                                                     \n";
r16_dc << " 			D8_5_in_reg <= D8_4_in_reg ;                                                     \n";
r16_dc << " 			D8_6_in_reg <= D8_5_in_reg ;                                                     \n";
r16_dc << " 			D8_7_in_reg <= D8_6_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_in_reg <= RDC_in9 ;                                                         \n";
r16_dc << " 			D9_1_in_reg <= D9_0_in_reg ;                                                     \n";
r16_dc << " 			D9_2_in_reg <= D9_1_in_reg ;                                                     \n";
r16_dc << " 			D9_3_in_reg <= D9_2_in_reg ;                                                     \n";
r16_dc << " 			D9_4_in_reg <= D9_3_in_reg ;                                                     \n";
r16_dc << " 			D9_5_in_reg <= D9_4_in_reg ;                                                     \n";
r16_dc << " 			D9_6_in_reg <= D9_5_in_reg ;                                                     \n";
r16_dc << " 			D9_7_in_reg <= D9_6_in_reg ;                                                     \n";
r16_dc << " 			D9_8_in_reg <= D9_7_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_in_reg <= RDC_in10 ;                                                       \n";
r16_dc << " 			D10_1_in_reg <= D10_0_in_reg ;                                                   \n";
r16_dc << " 			D10_2_in_reg <= D10_1_in_reg ;                                                   \n";
r16_dc << " 			D10_3_in_reg <= D10_2_in_reg ;                                                   \n";
r16_dc << " 			D10_4_in_reg <= D10_3_in_reg ;                                                   \n";
r16_dc << " 			D10_5_in_reg <= D10_4_in_reg ;                                                   \n";
r16_dc << " 			D10_6_in_reg <= D10_5_in_reg ;                                                   \n";
r16_dc << " 			D10_7_in_reg <= D10_6_in_reg ;                                                   \n";
r16_dc << " 			D10_8_in_reg <= D10_7_in_reg ;                                                   \n";
r16_dc << " 			D10_9_in_reg <= D10_8_in_reg ;                                                   \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_in_reg <= RDC_in11 ;                                                       \n";
r16_dc << " 			D11_1_in_reg <= D11_0_in_reg ;                                                   \n";
r16_dc << " 			D11_2_in_reg <= D11_1_in_reg ;                                                   \n";
r16_dc << " 			D11_3_in_reg <= D11_2_in_reg ;                                                   \n";
r16_dc << " 			D11_4_in_reg <= D11_3_in_reg ;                                                   \n";
r16_dc << " 			D11_5_in_reg <= D11_4_in_reg ;                                                   \n";
r16_dc << " 			D11_6_in_reg <= D11_5_in_reg ;                                                   \n";
r16_dc << " 			D11_7_in_reg <= D11_6_in_reg ;                                                   \n";
r16_dc << " 			D11_8_in_reg <= D11_7_in_reg ;                                                   \n";
r16_dc << " 			D11_9_in_reg <= D11_8_in_reg ;                                                   \n";
r16_dc << " 			D11_10_in_reg <= D11_9_in_reg ;                                                  \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_in_reg <= RDC_in12 ;                                                       \n";
r16_dc << " 			D12_1_in_reg <= D12_0_in_reg ;                                                   \n";
r16_dc << " 			D12_2_in_reg <= D12_1_in_reg ;                                                   \n";
r16_dc << " 			D12_3_in_reg <= D12_2_in_reg ;                                                   \n";
r16_dc << " 			D12_4_in_reg <= D12_3_in_reg ;                                                   \n";
r16_dc << " 			D12_5_in_reg <= D12_4_in_reg ;                                                   \n";
r16_dc << " 			D12_6_in_reg <= D12_5_in_reg ;                                                   \n";
r16_dc << " 			D12_7_in_reg <= D12_6_in_reg ;                                                   \n";
r16_dc << " 			D12_8_in_reg <= D12_7_in_reg ;                                                   \n";
r16_dc << " 			D12_9_in_reg <= D12_8_in_reg ;                                                   \n";
r16_dc << " 			D12_10_in_reg <= D12_9_in_reg ;                                                  \n";
r16_dc << " 			D12_11_in_reg <= D12_10_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_in_reg <= RDC_in13 ;                                                       \n";
r16_dc << " 			D13_1_in_reg <= D13_0_in_reg ;                                                   \n";
r16_dc << " 			D13_2_in_reg <= D13_1_in_reg ;                                                   \n";
r16_dc << " 			D13_3_in_reg <= D13_2_in_reg ;                                                   \n";
r16_dc << " 			D13_4_in_reg <= D13_3_in_reg ;                                                   \n";
r16_dc << " 			D13_5_in_reg <= D13_4_in_reg ;                                                   \n";
r16_dc << " 			D13_6_in_reg <= D13_5_in_reg ;                                                   \n";
r16_dc << " 			D13_7_in_reg <= D13_6_in_reg ;                                                   \n";
r16_dc << " 			D13_8_in_reg <= D13_7_in_reg ;                                                   \n";
r16_dc << " 			D13_9_in_reg <= D13_8_in_reg ;                                                   \n";
r16_dc << " 			D13_10_in_reg <= D13_9_in_reg ;                                                  \n";
r16_dc << " 			D13_11_in_reg <= D13_10_in_reg ;                                                 \n";
r16_dc << " 			D13_12_in_reg <= D13_11_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D14_0_in_reg <= RDC_in14 ;                                                       \n";
r16_dc << " 			D14_1_in_reg <= D14_0_in_reg ;                                                   \n";
r16_dc << " 			D14_2_in_reg <= D14_1_in_reg ;                                                   \n";
r16_dc << " 			D14_3_in_reg <= D14_2_in_reg ;                                                   \n";
r16_dc << " 			D14_4_in_reg <= D14_3_in_reg ;                                                   \n";
r16_dc << " 			D14_5_in_reg <= D14_4_in_reg ;                                                   \n";
r16_dc << " 			D14_6_in_reg <= D14_5_in_reg ;                                                   \n";
r16_dc << " 			D14_7_in_reg <= D14_6_in_reg ;                                                   \n";
r16_dc << " 			D14_8_in_reg <= D14_7_in_reg ;                                                   \n";
r16_dc << " 			D14_9_in_reg <= D14_8_in_reg ;                                                   \n";
r16_dc << " 			D14_10_in_reg <= D14_9_in_reg ;                                                  \n";
r16_dc << " 			D14_11_in_reg <= D14_10_in_reg ;                                                 \n";
r16_dc << " 			D14_12_in_reg <= D14_11_in_reg ;                                                 \n";
r16_dc << " 			D14_13_in_reg <= D14_12_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D15_0_in_reg <= RDC_in15 ;                                                       \n";
r16_dc << " 			D15_1_in_reg <= D15_0_in_reg ;                                                   \n";
r16_dc << " 			D15_2_in_reg <= D15_1_in_reg ;                                                   \n";
r16_dc << " 			D15_3_in_reg <= D15_2_in_reg ;                                                   \n";
r16_dc << " 			D15_4_in_reg <= D15_3_in_reg ;                                                   \n";
r16_dc << " 			D15_5_in_reg <= D15_4_in_reg ;                                                   \n";
r16_dc << " 			D15_6_in_reg <= D15_5_in_reg ;                                                   \n";
r16_dc << " 			D15_7_in_reg <= D15_6_in_reg ;                                                   \n";
r16_dc << " 			D15_8_in_reg <= D15_7_in_reg ;                                                   \n";
r16_dc << " 			D15_9_in_reg <= D15_8_in_reg ;                                                   \n";
r16_dc << " 			D15_10_in_reg <= D15_9_in_reg ;                                                  \n";
r16_dc << " 			D15_11_in_reg <= D15_10_in_reg ;                                                 \n";
r16_dc << " 			D15_12_in_reg <= D15_11_in_reg ;                                                 \n";
r16_dc << " 			D15_13_in_reg <= D15_12_in_reg ;                                                 \n";
r16_dc << " 			D15_14_in_reg <= D15_13_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= D0_wire ;                                                        \n";
r16_dc << " 			D0_1_out_reg <= D0_0_out_reg ;                                                   \n";
r16_dc << " 			D0_2_out_reg <= D0_1_out_reg ;                                                   \n";
r16_dc << " 			D0_3_out_reg <= D0_2_out_reg ;                                                   \n";
r16_dc << " 			D0_4_out_reg <= D0_3_out_reg ;                                                   \n";
r16_dc << " 			D0_5_out_reg <= D0_4_out_reg ;                                                   \n";
r16_dc << " 			D0_6_out_reg <= D0_5_out_reg ;                                                   \n";
r16_dc << " 			D0_7_out_reg <= D0_6_out_reg ;                                                   \n";
r16_dc << " 			D0_8_out_reg <= D0_7_out_reg ;                                                   \n";
r16_dc << " 			D0_9_out_reg <= D0_8_out_reg ;                                                   \n";
r16_dc << " 			D0_10_out_reg <= D0_9_out_reg ;                                                  \n";
r16_dc << " 			D0_11_out_reg <= D0_10_out_reg ;                                                 \n";
r16_dc << " 			D0_12_out_reg <= D0_11_out_reg ;                                                 \n";
r16_dc << " 			D0_13_out_reg <= D0_12_out_reg ;                                                 \n";
r16_dc << " 			RDC_out0 <= D0_13_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D1_0_out_reg <= D1_wire ;                                                        \n";
r16_dc << " 			D1_1_out_reg <= D1_0_out_reg ;                                                   \n";
r16_dc << " 			D1_2_out_reg <= D1_1_out_reg ;                                                   \n";
r16_dc << " 			D1_3_out_reg <= D1_2_out_reg ;                                                   \n";
r16_dc << " 			D1_4_out_reg <= D1_3_out_reg ;                                                   \n";
r16_dc << " 			D1_5_out_reg <= D1_4_out_reg ;                                                   \n";
r16_dc << " 			D1_6_out_reg <= D1_5_out_reg ;                                                   \n";
r16_dc << " 			D1_7_out_reg <= D1_6_out_reg ;                                                   \n";
r16_dc << " 			D1_8_out_reg <= D1_7_out_reg ;                                                   \n";
r16_dc << " 			D1_9_out_reg <= D1_8_out_reg ;                                                   \n";
r16_dc << " 			D1_10_out_reg <= D1_9_out_reg ;                                                  \n";
r16_dc << " 			D1_11_out_reg <= D1_10_out_reg ;                                                 \n";
r16_dc << " 			D1_12_out_reg <= D1_11_out_reg ;                                                 \n";
r16_dc << " 			RDC_out1 <= D1_12_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_out_reg <= D2_wire ;                                                        \n";
r16_dc << " 			D2_1_out_reg <= D2_0_out_reg ;                                                   \n";
r16_dc << " 			D2_2_out_reg <= D2_1_out_reg ;                                                   \n";
r16_dc << " 			D2_3_out_reg <= D2_2_out_reg ;                                                   \n";
r16_dc << " 			D2_4_out_reg <= D2_3_out_reg ;                                                   \n";
r16_dc << " 			D2_5_out_reg <= D2_4_out_reg ;                                                   \n";
r16_dc << " 			D2_6_out_reg <= D2_5_out_reg ;                                                   \n";
r16_dc << " 			D2_7_out_reg <= D2_6_out_reg ;                                                   \n";
r16_dc << " 			D2_8_out_reg <= D2_7_out_reg ;                                                   \n";
r16_dc << " 			D2_9_out_reg <= D2_8_out_reg ;                                                   \n";
r16_dc << " 			D2_10_out_reg <= D2_9_out_reg ;                                                  \n";
r16_dc << " 			D2_11_out_reg <= D2_10_out_reg ;                                                 \n";
r16_dc << " 			RDC_out2 <= D2_11_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= D3_wire ;                                                        \n";
r16_dc << " 			D3_1_out_reg <= D3_0_out_reg ;                                                   \n";
r16_dc << " 			D3_2_out_reg <= D3_1_out_reg ;                                                   \n";
r16_dc << " 			D3_3_out_reg <= D3_2_out_reg ;                                                   \n";
r16_dc << " 			D3_4_out_reg <= D3_3_out_reg ;                                                   \n";
r16_dc << " 			D3_5_out_reg <= D3_4_out_reg ;                                                   \n";
r16_dc << " 			D3_6_out_reg <= D3_5_out_reg ;                                                   \n";
r16_dc << " 			D3_7_out_reg <= D3_6_out_reg ;                                                   \n";
r16_dc << " 			D3_8_out_reg <= D3_7_out_reg ;                                                   \n";
r16_dc << " 			D3_9_out_reg <= D3_8_out_reg ;                                                   \n";
r16_dc << " 			D3_10_out_reg <= D3_9_out_reg ;                                                  \n";
r16_dc << " 			RDC_out3 <= D3_10_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= D4_wire ;                                                        \n";
r16_dc << " 			D4_1_out_reg <= D4_0_out_reg ;                                                   \n";
r16_dc << " 			D4_2_out_reg <= D4_1_out_reg ;                                                   \n";
r16_dc << " 			D4_3_out_reg <= D4_2_out_reg ;                                                   \n";
r16_dc << " 			D4_4_out_reg <= D4_3_out_reg ;                                                   \n";
r16_dc << " 			D4_5_out_reg <= D4_4_out_reg ;                                                   \n";
r16_dc << " 			D4_6_out_reg <= D4_5_out_reg ;                                                   \n";
r16_dc << " 			D4_7_out_reg <= D4_6_out_reg ;                                                   \n";
r16_dc << " 			D4_8_out_reg <= D4_7_out_reg ;                                                   \n";
r16_dc << " 			D4_9_out_reg <= D4_8_out_reg ;                                                   \n";
r16_dc << " 			RDC_out4 <= D4_9_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= D5_wire ;                                                        \n";
r16_dc << " 			D5_1_out_reg <= D5_0_out_reg ;                                                   \n";
r16_dc << " 			D5_2_out_reg <= D5_1_out_reg ;                                                   \n";
r16_dc << " 			D5_3_out_reg <= D5_2_out_reg ;                                                   \n";
r16_dc << " 			D5_4_out_reg <= D5_3_out_reg ;                                                   \n";
r16_dc << " 			D5_5_out_reg <= D5_4_out_reg ;                                                   \n";
r16_dc << " 			D5_6_out_reg <= D5_5_out_reg ;                                                   \n";
r16_dc << " 			D5_7_out_reg <= D5_6_out_reg ;                                                   \n";
r16_dc << " 			D5_8_out_reg <= D5_7_out_reg ;                                                   \n";
r16_dc << " 			RDC_out5 <= D5_8_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= D6_wire ;                                                        \n";
r16_dc << " 			D6_1_out_reg <= D6_0_out_reg ;                                                   \n";
r16_dc << " 			D6_2_out_reg <= D6_1_out_reg ;                                                   \n";
r16_dc << " 			D6_3_out_reg <= D6_2_out_reg ;                                                   \n";
r16_dc << " 			D6_4_out_reg <= D6_3_out_reg ;                                                   \n";
r16_dc << " 			D6_5_out_reg <= D6_4_out_reg ;                                                   \n";
r16_dc << " 			D6_6_out_reg <= D6_5_out_reg ;                                                   \n";
r16_dc << " 			D6_7_out_reg <= D6_6_out_reg ;                                                   \n";
r16_dc << " 			RDC_out6 <= D6_7_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= D7_wire ;                                                        \n";
r16_dc << " 			D7_1_out_reg <= D7_0_out_reg ;                                                   \n";
r16_dc << " 			D7_2_out_reg <= D7_1_out_reg ;                                                   \n";
r16_dc << " 			D7_3_out_reg <= D7_2_out_reg ;                                                   \n";
r16_dc << " 			D7_4_out_reg <= D7_3_out_reg ;                                                   \n";
r16_dc << " 			D7_5_out_reg <= D7_4_out_reg ;                                                   \n";
r16_dc << " 			D7_6_out_reg <= D7_5_out_reg ;                                                   \n";
r16_dc << " 			RDC_out7 <= D7_6_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= D8_wire ;                                                        \n";
r16_dc << " 			D8_1_out_reg <= D8_0_out_reg ;                                                   \n";
r16_dc << " 			D8_2_out_reg <= D8_1_out_reg ;                                                   \n";
r16_dc << " 			D8_3_out_reg <= D8_2_out_reg ;                                                   \n";
r16_dc << " 			D8_4_out_reg <= D8_3_out_reg ;                                                   \n";
r16_dc << " 			D8_5_out_reg <= D8_4_out_reg ;                                                   \n";
r16_dc << " 			RDC_out8 <= D8_5_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= D9_wire ;                                                        \n";
r16_dc << " 			D9_1_out_reg <= D9_0_out_reg ;                                                   \n";
r16_dc << " 			D9_2_out_reg <= D9_1_out_reg ;                                                   \n";
r16_dc << " 			D9_3_out_reg <= D9_2_out_reg ;                                                   \n";
r16_dc << " 			D9_4_out_reg <= D9_3_out_reg ;                                                   \n";
r16_dc << " 			RDC_out9 <= D9_4_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= D10_wire ;                                                      \n";
r16_dc << " 			D10_1_out_reg <= D10_0_out_reg ;                                                 \n";
r16_dc << " 			D10_2_out_reg <= D10_1_out_reg ;                                                 \n";
r16_dc << " 			D10_3_out_reg <= D10_2_out_reg ;                                                 \n";
r16_dc << " 			RDC_out10 <= D10_3_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= D11_wire ;                                                      \n";
r16_dc << " 			D11_1_out_reg <= D11_0_out_reg ;                                                 \n";
r16_dc << " 			D11_2_out_reg <= D11_1_out_reg ;                                                 \n";
r16_dc << " 			RDC_out11 <= D11_2_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= D12_wire ;                                                      \n";
r16_dc << " 			D12_1_out_reg <= D12_0_out_reg ;                                                 \n";
r16_dc << " 			RDC_out12 <= D12_1_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= D13_wire ;                                                      \n";
r16_dc << " 			RDC_out13 <= D13_0_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= D14_wire ;                                                          \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 	end                                                                                      \n";
r16_dc << "                                                                                              \n";
r16_dc << " endmodule                                                                                    \n";
	 r16_dc.close();
}

//Mixed radix-16 ,final stage using radix-2
void CenCtrl::Ctrl_PipeReg1_r16_r2(std::string string_in){
	 std::ofstream ctrl_pipereg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 ctrl_pipereg1.open(ss.str());	
     ctrl_pipereg1<< " `timescale 1 ns/1 ps                                                             \n";
     ctrl_pipereg1<< " module Ctrl_PipeReg1(mode_sel_Dout,                                              \n";
     ctrl_pipereg1<< " 				        Mul_sel_Dout,                                               \n";
     ctrl_pipereg1<< " 				        RDC_sel_Dout,                                               \n";
     ctrl_pipereg1<< " 				        BU_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< " 				        BU_dc_sel_Dout,                                             \n";
     ctrl_pipereg1<< " 				        DC_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< "                      mode_sel_in,                                                \n";
     ctrl_pipereg1<< " 			            Mul_sel_in,                                                 \n";
     ctrl_pipereg1<< " 			            RDC_sel_in,                                                 \n";
     ctrl_pipereg1<< " 			            BU_mode_sel_in,                                             \n";
     ctrl_pipereg1<< " 			            BU_dc_sel_in,                                               \n";
     ctrl_pipereg1<< " 			            DC_mode_sel_in,                                             \n";
     ctrl_pipereg1<< "                      rst_n,                                                      \n";
     ctrl_pipereg1<< "                      clk                                                         \n";
     ctrl_pipereg1<< "                      ) ;                                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " parameter ROMA_WIDTH  = " << ROM_width << ";\n";
     ctrl_pipereg1<< " parameter ROMA_ZERO   = " << ROM_width << "'h0 ;\n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " output                  mode_sel_Dout ;                                          \n";
     ctrl_pipereg1<< " output [1:0]            Mul_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [3:0]            RDC_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [1:0]            DC_mode_sel_Dout ;                                       \n";
     ctrl_pipereg1<< " output                  BU_mode_sel_Dout ;                                       \n";
     ctrl_pipereg1<< " output                  BU_dc_sel_Dout ;                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " input                   mode_sel_in ;                                            \n";
     ctrl_pipereg1<< " input  [1:0]            Mul_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [3:0]            RDC_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [1:0]            DC_mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " input                   BU_mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " input                   BU_dc_sel_in ;                                           \n";
     ctrl_pipereg1<< " input                   rst_n ;                                                  \n";
     ctrl_pipereg1<< " input                   clk ;                                                    \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " reg                  mode_sel_D0reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D1reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D2reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_Dout ;                                             \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D45reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_Dout  ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D0reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D1reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D2reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D3reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D4reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D5reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D6reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D7reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D8reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D9reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D10reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D11reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D12reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D13reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D14reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D15reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D16reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D17reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D18reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D19reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D20reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D21reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D22reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D23reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D24reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D25reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D26reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D27reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D28reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D29reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D30reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D31reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D32reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D33reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D34reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D35reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D36reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D37reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D38reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D39reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D40reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D41reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D42reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D43reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D44reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D45reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_Dout  ;                                           \n";	 
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D45reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_Dout  ;                                         \n";
     //-------------------------------------------------------------
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_Dout ;                                              \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D3reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D4reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D5reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_Dout ;                                              \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n";
     ctrl_pipereg1<< " 	always @(posedge clk or negedge rst_n) begin                                    \n";
     ctrl_pipereg1<< " 		if(~rst_n) begin                                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_Dout       <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout        <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= 2'd0;                                            \n";	 
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg  <= 1'd0;                                             \n";	 
     ctrl_pipereg1<< " 			BU_mode_sel_Dout    <= 1'd0;                                             \n"; 
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg  <= 1'd0;                                               \n";	 
     ctrl_pipereg1<< " 			BU_dc_sel_Dout    <= 1'd0;                                               \n";     	 
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 		else begin                                                                  \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg <= mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg <= mode_sel_D0reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg <= mode_sel_D1reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_Dout <= mode_sel_D2reg ;                                       \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg <= Mul_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout <= Mul_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg <= RDC_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout <= RDC_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;                                  \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;                              \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg  <= BU_mode_sel_in;                                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg  <= BU_mode_sel_D0reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg  <= BU_mode_sel_D1reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg  <= BU_mode_sel_D2reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg  <= BU_mode_sel_D3reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg  <= BU_mode_sel_D4reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg  <= BU_mode_sel_D5reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg  <= BU_mode_sel_D6reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg  <= BU_mode_sel_D7reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg  <= BU_mode_sel_D8reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg <= BU_mode_sel_D9reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg <= BU_mode_sel_D10reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg <= BU_mode_sel_D11reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg <= BU_mode_sel_D12reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg <= BU_mode_sel_D13reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg <= BU_mode_sel_D14reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg <= BU_mode_sel_D15reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg <= BU_mode_sel_D16reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg <= BU_mode_sel_D17reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg <= BU_mode_sel_D18reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg <= BU_mode_sel_D19reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg <= BU_mode_sel_D20reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg <= BU_mode_sel_D21reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg <= BU_mode_sel_D22reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg <= BU_mode_sel_D23reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg <= BU_mode_sel_D24reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg <= BU_mode_sel_D25reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg <= BU_mode_sel_D26reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg <= BU_mode_sel_D27reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg <= BU_mode_sel_D28reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg <= BU_mode_sel_D29reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg <= BU_mode_sel_D30reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg <= BU_mode_sel_D31reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg <= BU_mode_sel_D32reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg <= BU_mode_sel_D33reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg <= BU_mode_sel_D34reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg <= BU_mode_sel_D35reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg <= BU_mode_sel_D36reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg <= BU_mode_sel_D37reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg <= BU_mode_sel_D38reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg <= BU_mode_sel_D39reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg <= BU_mode_sel_D40reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg <= BU_mode_sel_D41reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg <= BU_mode_sel_D42reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg <= BU_mode_sel_D43reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg <= BU_mode_sel_D44reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_Dout   <= BU_mode_sel_D45reg;                               \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg  <= BU_dc_sel_in;                                       \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg  <= BU_dc_sel_D0reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg  <= BU_dc_sel_D1reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg  <= BU_dc_sel_D2reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg  <= BU_dc_sel_D3reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg  <= BU_dc_sel_D4reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg  <= BU_dc_sel_D5reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg  <= BU_dc_sel_D6reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg  <= BU_dc_sel_D7reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg  <= BU_dc_sel_D8reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg <= BU_dc_sel_D9reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg <= BU_dc_sel_D10reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg <= BU_dc_sel_D11reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg <= BU_dc_sel_D12reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg <= BU_dc_sel_D13reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg <= BU_dc_sel_D14reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg <= BU_dc_sel_D15reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg <= BU_dc_sel_D16reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg <= BU_dc_sel_D17reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg <= BU_dc_sel_D18reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg <= BU_dc_sel_D19reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg <= BU_dc_sel_D20reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg <= BU_dc_sel_D21reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg <= BU_dc_sel_D22reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg <= BU_dc_sel_D23reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg <= BU_dc_sel_D24reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg <= BU_dc_sel_D25reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg <= BU_dc_sel_D26reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg <= BU_dc_sel_D27reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg <= BU_dc_sel_D28reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg <= BU_dc_sel_D29reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg <= BU_dc_sel_D30reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg <= BU_dc_sel_D31reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg <= BU_dc_sel_D32reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg <= BU_dc_sel_D33reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg <= BU_dc_sel_D34reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg <= BU_dc_sel_D35reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg <= BU_dc_sel_D36reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg <= BU_dc_sel_D37reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg <= BU_dc_sel_D38reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg <= BU_dc_sel_D39reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg <= BU_dc_sel_D40reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg <= BU_dc_sel_D41reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg <= BU_dc_sel_D42reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg <= BU_dc_sel_D43reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg <= BU_dc_sel_D44reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_Dout   <= BU_dc_sel_D45reg;                                   \n";     
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 	end                                                                             \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " endmodule                                                                        \n";
	 ctrl_pipereg1.close();
}

void CenCtrl::R16_R2_AGU(std::string string_in){
	 std::ofstream r16_agu;
     std::string        string_buf = "/R16_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu.open(ss.str());
     r16_agu << " `timescale 1 ns/1 ps                                \n";
     r16_agu << " module R16_AGU(BN_out,                              \n";
     r16_agu << "                MA,                                  \n";
     r16_agu << "                ROMA,                                \n";
     r16_agu << "                Mul_sel_out,                         \n";
     r16_agu << "                RDC_sel_out,                         \n";
     r16_agu << "                data_cnt_reg,                        \n";
     r16_agu << "                BU_mode_sel_out,//for BU control signal        \n";
     r16_agu << "                BU_dc_sel_out,//for BU Data commutator control signal \n";
     r16_agu << "                DC_mode_sel_out,//for raidx-2 delay commutator \n";
     r16_agu << "                mode_sel_in,                         \n";
     r16_agu << "                rc_sel_in,                           \n";
     r16_agu << "                AGU_en,                              \n";
     r16_agu << "                wrfd_en_in,                          \n";
     r16_agu << "                rst_n,                               \n";
     r16_agu << "                clk                                  \n";
     r16_agu << "                ) ;                                  \n";
     r16_agu << " parameter A_WIDTH     = " << addr_width        << ";\n";
     r16_agu << " parameter DC_WIDTH    = " << data_cnt_width    << ";\n";
     r16_agu << " parameter BC_WIDTH    = " << BU_counter_width  << ";\n";
     r16_agu << " parameter SC_WIDTH    = " << stage_width       << ";\n";
     r16_agu << " parameter ROMA_WIDTH  = " << ROM_width         << ";\n";
     r16_agu << " \n";
     r16_agu << " parameter DC_ZERO   = " << data_cnt_width << "'h0 ;\n";
     r16_agu << " parameter ROMA_ZERO = " << ROM_width      << "'h0 ;\n";
     r16_agu << " \n";
	 //modify part
	 for(int i=0; i < No_stage ;i++){ 
         r16_agu << "parameter S" << i << "      = " << stage_width << "'d" << i <<"; \n";
	 }
     r16_agu << "\n";
     r16_agu << " parameter DCNT_V1    = " << data_cnt_width << "'d" << FFT_dc[No_stage-1]  <<"; //data counter value1 for data_cnt_wire      \n";
     r16_agu << " parameter DCNT_V2    = " << data_cnt_width << "'d" << ceil((double)m/radix) + 4  <<"; //data counter value2 for data_cnt_wire      \n";
     for(int j=0; j < (radix-2);j++){
		 r16_agu << "  parameter DCNT_FS" << (j+1)<<" = " << data_cnt_width << "'d" << DCNT_FS[j] <<";\n";
	 }
     r16_agu << " \n";
     r16_agu << " parameter DCNT_BP1 = "<< DCNT_BP1 << " ;\n";
     r16_agu << " parameter DCNT_BP2 = "<< DCNT_BP2 << " ;\n";
     r16_agu << " parameter DCNT_BP3 = "<< DCNT_BP3 << " ;\n";
     r16_agu << " parameter DCNT_BP4 = "<< DCNT_BP4 << " ;\n";
     r16_agu << "\n";
     r16_agu << "\n";
     r16_agu << " output                  BN_out ;                                    \n";
     r16_agu << " output [A_WIDTH-1:0]    MA ;                                        \n";
     r16_agu << " output [ROMA_WIDTH-1:0] ROMA ;                                      \n";
     r16_agu << " output [1:0]            Mul_sel_out ;                               \n";
     r16_agu << " output [3:0]            RDC_sel_out ;                               \n";
     r16_agu << " output [DC_WIDTH-1:0]   data_cnt_reg ;                              \n";
     r16_agu << " output [1:0]            DC_mode_sel_out ;                           \n";
     r16_agu << " output                  BU_mode_sel_out ;                           \n";
     r16_agu << " output                  BU_dc_sel_out ;                             \n";
     r16_agu << "                                                                     \n";
     r16_agu << " input                   mode_sel_in ;                               \n";
     r16_agu << " input                   rc_sel_in ;                                 \n";
     r16_agu << " input                   AGU_en ;                                    \n";
     r16_agu << " input                   wrfd_en_in ;                                \n";
     r16_agu << " input                   rst_n ;                                     \n";
     r16_agu << " input                   clk ;                                       \n";
     r16_agu << "                                                                     \n";
     r16_agu << "                                                                     \n";
     r16_agu << " reg   [DC_WIDTH-1:0] data_cnt_reg ; // data counter                 \n";
     r16_agu << " reg   [3:0]          RDCsel_cnt_reg ; // RDC select counter         \n";
     r16_agu << " reg                  BN_out ;                                       \n";
     r16_agu << " reg   [3:0]          RDC_sel_out ;                                  \n";
     r16_agu << " reg   [1:0]          Mul_sel_out ;                                  \n";
     r16_agu << " reg   [1:0]          DC_mode_sel_out ;                              \n";
     r16_agu << " reg                  BU_mode_sel_out ;                              \n";
     r16_agu << " reg                  BU_dc_sel_out ;                                \n";
     r16_agu << "                                                                     \n";
     r16_agu << " wire  [DC_WIDTH-1:0] data_cnt_wire ;                                \n";
     r16_agu << " wire  [3:0]          RDCsel_cnt_wire ;                              \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                 \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_REORDER_wire ; // butterfly counter         \n";
     // number of wire xor_wire change with fft_point
	 unsigned long  NO_xorwire; //number of  xor wire  
	 NO_xorwire  = DCNT_BP3 - DCNT_BP2;
	 for(int i=0;i < NO_xorwire;i++){
         r16_agu << " wire                 xor_d"<< i << "_wire;\n";
	 }
     r16_agu << " wire [SC_WIDTH-1:0]  SC_wire ; // stage counter \n";
     r16_agu << " wire [BC_WIDTH-1:0]  BC_RR_wire ;               \n";
     r16_agu << " wire                 BN_wire ;                  \n";
     r16_agu << " wire [1:0]           DC_mode_sel_wire;          \n";
     r16_agu << " wire                 BU_mode_sel_wire;          \n";
     r16_agu << " wire                 BU_dc_sel_wire;            \n";
     r16_agu << " wire [3:0]           RDC_sel_wire ;             \n";
     r16_agu << " wire [1:0]           Mul_sel_wire ;             \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " wire [BC_WIDTH-1:0]  BR_BC_wire ;                                                                             \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign data_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                         \n";
     r16_agu << "                           ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                      \n";
     r16_agu << "                           DC_ZERO : (AGU_en==1'b1)?\n";
     r16_agu << "                           (data_cnt_reg + 1'b1) : data_cnt_reg ;                                              \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign RDCsel_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                       \n";
     r16_agu << "                             ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                     \n";
     r16_agu << "                             4'd0 : ((AGU_en==1'b1)||(wrfd_en_in==1'b1))? \n";
     r16_agu << "                             (RDCsel_cnt_reg + 1'b1) : RDCsel_cnt_reg ;                                         \n";
     r16_agu << " 	                                                                                                            \n";
     //*************************************************************************
	 r16_agu << " 	// for Gray code 	 \n";
	 for(int k=0;k < NO_xorwire; k++){
	 r16_agu << "   assign xor_d" << k <<"_wire = data_cnt_reg["<<(DCNT_BP3 - k)<<"]^data_cnt_reg["<<(DCNT_BP3 - k - 1)<<"];\n";	 
	 } 
     r16_agu << "\n";
     r16_agu << "   assign BC_wire = (rc_sel_in==1'b1)?                                                  \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3:DCNT_BP2]}):       \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],                                         \n";
     r16_agu << "                      data_cnt_reg[DCNT_BP3],                                           \n";
     for(int l=0;l<NO_xorwire;l++){
	     if(l!=(NO_xorwire-1))r16_agu << "                      xor_d"<< l <<"_wire,\n";
         else                 r16_agu << "                      xor_d"<< l <<"_wire\n";	 
	 }
     r16_agu << "                       }) ;\n";
     r16_agu << "\n";
     //**********************************************************************
     // need to modify 2020/09/11
     //*********************************************************************
	 r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign SC_wire = data_cnt_reg[DC_WIDTH-1:DCNT_BP4] ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                                 \n";
     r16_agu << "   assign BC_RR_wire = ";
	 //***************************************************************************************
     //Need to modify
	 //***************************************************************************************
	 unsigned long RR_tmp;
     unsigned long s;
     unsigned long fs_rr_bits; //final state is in order to read data from sram
     //final state bc right shift // final state is after INTT computing state
     s = DCNT_BP1 + 1; //radix bit size
     fs_rr_bits = s * (No_stage -3);
     for(unsigned long i=0; i < (No_stage-1);i++){
        if( i == (No_stage -2))RR_tmp = s * i - 3;
        else RR_tmp = s * i;	 
	    
        if(i==0) {
            if(No_stage < 4) r16_agu << "((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))? BC_wire:\n";
            else r16_agu << "((SC_wire == S" << i << ")||((SC_wire == S"<< (No_stage-1) <<") && (mode_sel_in == 1'b1)))? BC_wire:\n";	  
        }
        else {
                if((No_stage >= 4 )&& (i == (No_stage-2)))r16_agu << "                       ((SC_wire == S" << i << ") ||((SC_wire == S"<< (No_stage - 1)<<") && (mode_sel_in == 1'b0)))? \n";
                else   r16_agu << "                       (SC_wire == S" << i << ")? \n";
                r16_agu << "                       {BC_wire[" << RR_tmp-1 << ":0],BC_wire[BC_WIDTH-1:" << RR_tmp << "]} :\n";
        }
     }
	 //******************************************************************************************
     r16_agu << "                       BC_wire;\n";
     r16_agu << "\n";
     // Bit Reorder  BC  for IFFT computing
	 // 
	 r16_agu << "   // Bit reverse barrel shifter for IFFT                                                                             \n";
     r16_agu << "   assign BR_BC_wire = {\n";
	 
	 //radix-16 and radix-2 , mixed radix BC need to reorder 
     //reorder BC for IFFT computing     
     int Number_of_digit;
	 Number_of_digit = (BU_counter_width-1) / 4;
	 
	 for(int i = (Number_of_digit - 1); i >= 0; i--){
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 2 - (4 * i) << "],\n";  
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 3 - (4 * i) << "],\n";  
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 4 - (4 * i) << "],\n";  
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 5 - (4 * i) << "],\n"; 	
	 }
	 r16_agu << "                       BC_RR_wire["<< BU_counter_width - 1 <<"]};\n";
	 
	 //BC_RR_wire over
	 //-----------------------------------------------------
	 //radix-16 and radix-2 (Mixed radix)
	 //BC Reorder
	 if(BU_counter_width == 5){
		r16_agu << "   assign BC_REORDER_wire = {BC_RR_wire[3],\n";
		r16_agu << "                       BC_RR_wire[2],\n";
		r16_agu << "                       BC_RR_wire[0],\n";
		r16_agu << "                       BC_RR_wire[1],\n";
	    r16_agu << "                       BC_RR_wire[4]};\n";
	}
	
    if(BU_counter_width == 9){
		r16_agu << "   assign BC_REORDER_wire = {BC_RR_wire[7],\n";
		r16_agu << "                       BC_RR_wire[6],\n";
		r16_agu << "                       BC_RR_wire[5],\n";
		r16_agu << "                       BC_RR_wire[0],\n";
	    r16_agu << "                       BC_RR_wire[2],\n";		
	    r16_agu << "                       BC_RR_wire[1],\n";		
	    r16_agu << "                       BC_RR_wire[4],\n";		
	    r16_agu << "                       BC_RR_wire[8],\n";		
	    r16_agu << "                       BC_RR_wire[3]};\n";		
	}
	
	 //
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Bank,  rc_sel_in=1 BN_wire=(^BC_REORDER_wire)                                                                        \n";
     r16_agu << "   assign BN_wire = ( rc_sel_in == 1'b1 ) ? ( ^BC_REORDER_wire ) : ( mode_sel_in==1'b1) ? (^BR_BC_wire) : (^BC_RR_wire) ;\n";
     r16_agu << "   // Address, rc_sel_in=1 MA=(BC_REORDER_wire[BC_WIDTH-1:1])                                                              \n";
     r16_agu << "   assign MA  = ( rc_sel_in == 1'b1 ) ? ( BC_REORDER_wire[BC_WIDTH-1:1] ) : (mode_sel_in==1'b1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ;   \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // ROM Address                                                                                                     \n";
     r16_agu << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                        \n";
     unsigned long ls_bits = 0; //left shift bits
     
     for(unsigned long i=1;i < (No_stage-1);i++){
         ls_bits = s * i;
         unsigned long ls_msb;
         ls_msb = ROM_width - 1 - ls_bits;
         r16_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[" << ls_msb <<":0]," << ls_bits <<"'d0}) : \n" ; 
     }
     r16_agu << "                 ROMA_ZERO;\n"; 
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign Mul_sel_wire = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd3 :                \n";
     r16_agu << "                         ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd2 :                \n";
     r16_agu << "                           // test for point-wise multiplication                                                      \n";
     r16_agu << "                          (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign RDC_sel_wire = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg : data_cnt_reg[3:0]  ;                                   \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   assign BU_mode_sel_wire = ( SC_wire == S" << No_stage-1 <<") ? 1'b1 : 1'b0;\n";
     r16_agu << "   // Butterfly commutator control singal , INTT radix-2 data relocation!!!   \n";
     r16_agu << "   assign BU_dc_sel_wire = (( SC_wire == S" << No_stage-1 <<") && (mode_sel_in==1'b1)) ? 1'b1 : 1'b0;\n";
     r16_agu << "   //2 bits , DC_mode_sel_wire                                                                                        \n";
     r16_agu << "   //2'b2 : for NTT output , 2'b1 : for NTT and INTT radix-2 computing                                                \n";
     r16_agu << "   assign DC_mode_sel_wire = (( SC_wire == S"<< No_stage-1 <<") && (mode_sel_in==1'b0)) ? 2'd2:\n";
     r16_agu << "                             (SC_wire == S" << No_stage - 2 <<") ? 2'd1 : 2'd0;\n";
     r16_agu << "                                                                                                                      \n";	 
	 r16_agu << "                                                                                                                      \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   always @(posedge clk or negedge rst_n) begin                                                                       \n";
     r16_agu << "   	if(~rst_n) begin                                                                                               \n";
     r16_agu << "           data_cnt_reg    <= DC_ZERO ;                                                                               \n";
     r16_agu << "           BN_out          <= 1'b0 ;                                                                                  \n";
     r16_agu << "           BU_mode_sel_out <= 1'b0 ;                                                                                  \n";
     r16_agu << "           BU_dc_sel_out   <= 1'b0 ;                                                                                  \n";
     r16_agu << "           DC_mode_sel_out <= 2'b0 ;                                                                                  \n";
     r16_agu << "           RDC_sel_out     <= 4'd0 ;                                                                                  \n";
     r16_agu << "           Mul_sel_out     <= 2'd0 ;                                                                                  \n";
     r16_agu << "           RDCsel_cnt_reg  <= 4'd0 ;                                                                                  \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   	else begin                                                                                                     \n";
     r16_agu << "           data_cnt_reg      <= data_cnt_wire ;                                                                       \n";
     r16_agu << "           BN_out            <= BN_wire ;                                                                             \n";
     r16_agu << "           BU_mode_sel_out   <= BU_mode_sel_wire ;                                                                    \n";
     r16_agu << "           BU_dc_sel_out     <= BU_dc_sel_wire ;                                                                      \n";
     r16_agu << "           DC_mode_sel_out   <= DC_mode_sel_wire ;                                                                    \n";
     r16_agu << "           RDC_sel_out       <= RDC_sel_wire ;                                                                        \n";
     r16_agu << "           Mul_sel_out       <= Mul_sel_wire ;                                                                        \n";
     r16_agu << "           RDCsel_cnt_reg    <= RDCsel_cnt_wire ;                                                                     \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   end                                                                                                                \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << " endmodule                                                                                                            \n";   	 
	 r16_agu.close();	
}

void  CenCtrl::R16_R2_DC(std::string string_in){
	 std::ofstream r16_dc;
     std::string        string_buf = "/R16_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_dc.open(ss.str());	
r16_dc << " `timescale 1 ns/1 ps                                                                         \n";
r16_dc << " module R16_DC(RDC_out0,                                                                      \n";
r16_dc << " 			  RDC_out1,                                                                      \n";
r16_dc << " 			  RDC_out2,                                                                      \n";
r16_dc << " 			  RDC_out3,                                                                      \n";
r16_dc << " 			  RDC_out4,                                                                      \n";
r16_dc << " 			  RDC_out5,                                                                      \n";
r16_dc << " 			  RDC_out6,                                                                      \n";
r16_dc << " 			  RDC_out7,                                                                      \n";
r16_dc << " 			  RDC_out8,                                                                      \n";
r16_dc << " 			  RDC_out9,                                                                      \n";
r16_dc << " 			  RDC_out10,                                                                     \n";
r16_dc << " 			  RDC_out11,                                                                     \n";
r16_dc << " 			  RDC_out12,                                                                     \n";
r16_dc << " 			  RDC_out13,                                                                     \n";
r16_dc << " 			  RDC_out14,                                                                     \n";
r16_dc << " 			  RDC_out15,                                                                     \n";
r16_dc << "               RDC_in0,                                                                       \n";
r16_dc << " 		      RDC_in1,                                                                       \n";
r16_dc << " 			  RDC_in2,                                                                       \n";
r16_dc << " 			  RDC_in3,                                                                       \n";
r16_dc << " 			  RDC_in4,                                                                       \n";
r16_dc << " 			  RDC_in5,                                                                       \n";
r16_dc << " 			  RDC_in6,                                                                       \n";
r16_dc << " 			  RDC_in7,                                                                       \n";
r16_dc << " 			  RDC_in8,                                                                       \n";
r16_dc << " 			  RDC_in9,                                                                       \n";
r16_dc << " 			  RDC_in10,                                                                      \n";
r16_dc << " 			  RDC_in11,                                                                      \n";
r16_dc << " 			  RDC_in12,                                                                      \n";
r16_dc << " 			  RDC_in13,                                                                      \n";
r16_dc << " 			  RDC_in14,                                                                      \n";
r16_dc << " 			  RDC_in15,                                                                      \n";
r16_dc << " 			  RDC_sel,                                                                       \n";
r16_dc << " 			  DC_mode_sel_in,  //for using in radix-2 delay counter                          \n";
r16_dc << "               rst_n,                                                                         \n";
r16_dc << "               clk                                                                            \n";
r16_dc << "               ) ;                                                                            \n";
r16_dc << " parameter P_WIDTH     = 64 ;                                                                 \n";
r16_dc << "                                                                                              \n";
r16_dc << " parameter P_ZERO      = 64'h0 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out15 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in0 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in1 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in2 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in3 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in4 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in5 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in6 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in7 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in8 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in9 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in10 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in11 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in12 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in13 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in14 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in15 ;                                                               \n";
r16_dc << " input [3:0]         RDC_sel ;                                                                \n";
r16_dc << " input [1:0]         DC_mode_sel_in;                                                         \n";
r16_dc << " input               rst_n ;                                                                  \n";
r16_dc << " input               clk ;                                                                    \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_8_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_14_in_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_13_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_out_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D4_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D8_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  RDC_out15 ;                                                             \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D2_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_1_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D4_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_1_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_1_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D8_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_1_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_1_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_1_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D15_1_in_wire ;                                                         \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D0_wire =  ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'd0)) ? RDC_in0:          \n";
r16_dc << " 	                  ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'd1)) ? D1_0_in_reg:      \n";
r16_dc << " 	                  (DC_mode_sel_in == 2'd2) ? RDC_in0:                                    \n";
r16_dc << "                       (RDC_sel==4'd0)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd1)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd11)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D14_13_in_reg :                                      \n";
r16_dc << " 					                    D15_14_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D1_wire =  ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'd0)) ? D1_0_in_reg:      \n";
r16_dc << " 	                  ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'd1)) ? RDC_in0:          \n";
r16_dc << " 	                  (DC_mode_sel_in == 2'd2) ? D1_0_in_reg:                                \n";
r16_dc << "                       (RDC_sel==4'd0)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd2)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd12)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D13_12_in_reg :                                      \n";
r16_dc << " 					                    D14_13_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D2_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D2_1_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd3)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd13)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D12_11_in_reg :                                      \n";
r16_dc << " 					                    D13_12_in_reg ; // RDC_sel==4'd15					 \n";		  
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D3_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D3_2_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd4)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd14)? D11_10_in_reg :                                      \n";
r16_dc << " 					                    D12_11_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D4_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D4_3_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd5)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D10_9_in_reg :                                       \n";
r16_dc << " 					                    D11_10_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D5_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D5_4_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd6)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D9_8_in_reg :                                        \n";
r16_dc << " 					                    D10_9_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D6_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D6_5_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd1)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd7)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D8_7_in_reg :                                        \n";
r16_dc << " 					                    D9_8_in_reg ; // RDC_sel==4'd15						 \n";	   
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D7_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D7_6_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd2)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd8)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D7_6_in_reg :                                        \n";
r16_dc << " 					                    D8_7_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D8_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D8_7_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd3)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd9)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D6_5_in_reg :                                        \n";
r16_dc << " 					                    D7_6_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D9_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D9_8_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd4)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd9)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd10)? D1_0_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D5_4_in_reg :                                        \n";
r16_dc << " 					                    D6_5_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D10_wire = ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D10_9_in_reg :\n";
r16_dc << " 	                   (RDC_sel==4'd0)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd5)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd6)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D15_14_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd11)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd12)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D3_2_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D4_3_in_reg :                                       \n";
r16_dc << " 					                     D5_4_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D11_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D11_10_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd6)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd12)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D3_2_in_reg :                                       \n";
r16_dc << " 					                     D4_3_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D12_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D12_11_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd7)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd13)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D2_1_in_reg :                                       \n";
r16_dc << " 					                     D3_2_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D13_wire =  ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D13_12_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd8)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd14)? D1_0_in_reg :                                       \n";
r16_dc << " 					                     D2_1_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D14_wire = ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D14_13_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd9)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd10)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd11)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D14_13_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D15_14_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? RDC_in0 :                                            \n";
r16_dc << " 					                    D1_0_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign RDC_out15 = ((DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D15_14_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D1_0_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D2_1_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd8)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd9)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd10)? D11_10_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D12_11_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd14)? D15_14_in_reg :                                     \n";
r16_dc << " 					                     RDC_in0 ; // RDC_sel==4'd15                         \n";
r16_dc << " 	//wire                                                                                   \n";
r16_dc << " 	assign D1_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in2 : RDC_in1 ;                             \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	assign D2_0_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in2 :             \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? D3_0_in_reg :         \n";
r16_dc << " 	                      (DC_mode_sel_in == 2'd2) ? RDC_in4 : RDC_in2 ;                             \n";
r16_dc << " 	assign D3_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in6 : RDC_in3 ;                             \n";
r16_dc << " 	assign D3_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? D3_0_in_reg :         \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in2 :             \n";
r16_dc << " 	                                                                           D3_0_in_reg ;         \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	assign D4_0_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in4 :             \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? D5_0_in_reg :         \n";
r16_dc << " 	                      (DC_mode_sel_in == 2'd2) ? RDC_in8 :  RDC_in4 ;                            \n";
r16_dc << " 	assign D5_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in10 : RDC_in5 ;                            \n";
r16_dc << " 	assign D5_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? D5_0_in_reg :         \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in4 :             \n";
r16_dc << " 	                                                                           D5_0_in_reg ;         \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	assign D6_0_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in6 :             \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? D7_0_in_reg :         \n";
r16_dc << " 	                      (DC_mode_sel_in == 2'd2) ? RDC_in12 : RDC_in6 ;                            \n";
r16_dc << " 	assign D7_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in14 : RDC_in7 ;                            \n";
r16_dc << " 	assign D7_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? D7_0_in_reg :         \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in6 :             \n";
r16_dc << " 	                                                                           D7_0_in_reg ;         \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	assign D8_0_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in8 :             \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? D9_0_in_reg :         \n";
r16_dc << " 	                      (DC_mode_sel_in == 2'd2) ? RDC_in1 : RDC_in8 ;                             \n";
r16_dc << " 	assign D9_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in3 : RDC_in9 ;                             \n";
r16_dc << " 	assign D9_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? D9_0_in_reg :         \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in8 :             \n";
r16_dc << " 	                                                                           D9_0_in_reg ;         \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	assign D10_0_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in10 :           \n";
r16_dc << " 	                       ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? D11_0_in_reg :       \n";
r16_dc << " 	                       (DC_mode_sel_in == 2'd2) ? RDC_in5 :  RDC_in10 ;                          \n";
r16_dc << " 	assign D11_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in7 :  RDC_in11 ;                          \n";
r16_dc << " 	assign D11_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? D11_0_in_reg :       \n";
r16_dc << " 	                       ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in10 :           \n";
r16_dc << " 	                                                                            D11_0_in_reg ;       \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	assign D12_0_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in12 :           \n";
r16_dc << " 	                       ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? D13_0_in_reg :       \n";
r16_dc << " 	                       (DC_mode_sel_in == 2'd2) ? RDC_in9  : RDC_in12 ;                          \n";
r16_dc << " 	assign D13_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in11 : RDC_in13 ;                          \n";
r16_dc << " 	assign D13_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? D13_0_in_reg :       \n";
r16_dc << " 	                       ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in12 :           \n";
r16_dc << " 	                                                                            D13_0_in_reg ;       \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	assign D14_0_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? RDC_in14 :           \n";
r16_dc << " 	                       ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? D15_0_in_reg :       \n";
r16_dc << " 	                       (DC_mode_sel_in == 2'd2) ? RDC_in13 : RDC_in14 ;                          \n";
r16_dc << " 	assign D15_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b0)) ? D15_0_in_reg :       \n";
r16_dc << " 	                       ((DC_mode_sel_in == 2'd1) && (RDC_sel[0] == 1'b1)) ? RDC_in14 :           \n";
r16_dc << " 	                                                                            D15_0_in_reg ;       \n";
//---------------------------------------------------------------------------------------------------------------------
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	always @(posedge clk or negedge rst_n) begin                                             \n";
r16_dc << " 		if(~rst_n) begin                                                                     \n";
r16_dc << " 			D1_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_8_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D10_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_14_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_12_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_13_out_reg <= P_ZERO ;				                                         \n";
r16_dc << " 			RDC_out0 <= P_ZERO ;                                                             \n";
r16_dc << " 			D1_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D1_12_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out1 <= P_ZERO ;                                                             \n";
r16_dc << " 			D2_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D2_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out2 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out3 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D4_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out4 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out5 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out6 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out7 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out8 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out9 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_3_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out10 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out11 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out12 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out13 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 		else begin                                                                           \n";
r16_dc << " 			D1_0_in_reg <= D1_0_in_wire ;                                                    \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_in_reg <= D2_0_in_wire ;                                                    \n";
r16_dc << " 			D2_1_in_reg <= D2_0_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_in_reg <= D3_0_in_wire ;                                                    \n";
r16_dc << " 			D3_1_in_reg <= D3_1_in_wire ;                                                    \n";
r16_dc << " 			D3_2_in_reg <= D3_1_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_in_reg <= D4_0_in_wire;                                                     \n";
r16_dc << " 			D4_1_in_reg <= D4_0_in_reg ;                                                     \n";
r16_dc << " 			D4_2_in_reg <= D4_1_in_reg ;                                                     \n";
r16_dc << " 			D4_3_in_reg <= D4_2_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_in_reg <= D5_0_in_wire ;                                                    \n";
r16_dc << " 			D5_1_in_reg <= D5_1_in_wire ;                                                    \n";
r16_dc << " 			D5_2_in_reg <= D5_1_in_reg ;                                                     \n";
r16_dc << " 			D5_3_in_reg <= D5_2_in_reg ;                                                     \n";
r16_dc << " 			D5_4_in_reg <= D5_3_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_in_reg <= D6_0_in_wire;                                                     \n";
r16_dc << " 			D6_1_in_reg <= D6_0_in_reg ;                                                     \n";
r16_dc << " 			D6_2_in_reg <= D6_1_in_reg ;                                                     \n";
r16_dc << " 			D6_3_in_reg <= D6_2_in_reg ;                                                     \n";
r16_dc << " 			D6_4_in_reg <= D6_3_in_reg ;                                                     \n";
r16_dc << " 			D6_5_in_reg <= D6_4_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_in_reg <= D7_0_in_wire;                                                     \n";
r16_dc << " 			D7_1_in_reg <= D7_1_in_wire;                                                     \n";
r16_dc << " 			D7_2_in_reg <= D7_1_in_reg ;                                                     \n";
r16_dc << " 			D7_3_in_reg <= D7_2_in_reg ;                                                     \n";
r16_dc << " 			D7_4_in_reg <= D7_3_in_reg ;                                                     \n";
r16_dc << " 			D7_5_in_reg <= D7_4_in_reg ;                                                     \n";
r16_dc << " 			D7_6_in_reg <= D7_5_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_in_reg <= D8_0_in_wire;                                                     \n";
r16_dc << " 			D8_1_in_reg <= D8_0_in_reg ;                                                     \n";
r16_dc << " 			D8_2_in_reg <= D8_1_in_reg ;                                                     \n";
r16_dc << " 			D8_3_in_reg <= D8_2_in_reg ;                                                     \n";
r16_dc << " 			D8_4_in_reg <= D8_3_in_reg ;                                                     \n";
r16_dc << " 			D8_5_in_reg <= D8_4_in_reg ;                                                     \n";
r16_dc << " 			D8_6_in_reg <= D8_5_in_reg ;                                                     \n";
r16_dc << " 			D8_7_in_reg <= D8_6_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_in_reg <= D9_0_in_wire;                                                     \n";
r16_dc << " 			D9_1_in_reg <= D9_1_in_wire ;                                                    \n";
r16_dc << " 			D9_2_in_reg <= D9_1_in_reg ;                                                     \n";
r16_dc << " 			D9_3_in_reg <= D9_2_in_reg ;                                                     \n";
r16_dc << " 			D9_4_in_reg <= D9_3_in_reg ;                                                     \n";
r16_dc << " 			D9_5_in_reg <= D9_4_in_reg ;                                                     \n";
r16_dc << " 			D9_6_in_reg <= D9_5_in_reg ;                                                     \n";
r16_dc << " 			D9_7_in_reg <= D9_6_in_reg ;                                                     \n";
r16_dc << " 			D9_8_in_reg <= D9_7_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_in_reg <= D10_0_in_wire;                                                   \n";
r16_dc << " 			D10_1_in_reg <= D10_0_in_reg ;                                                   \n";
r16_dc << " 			D10_2_in_reg <= D10_1_in_reg ;                                                   \n";
r16_dc << " 			D10_3_in_reg <= D10_2_in_reg ;                                                   \n";
r16_dc << " 			D10_4_in_reg <= D10_3_in_reg ;                                                   \n";
r16_dc << " 			D10_5_in_reg <= D10_4_in_reg ;                                                   \n";
r16_dc << " 			D10_6_in_reg <= D10_5_in_reg ;                                                   \n";
r16_dc << " 			D10_7_in_reg <= D10_6_in_reg ;                                                   \n";
r16_dc << " 			D10_8_in_reg <= D10_7_in_reg ;                                                   \n";
r16_dc << " 			D10_9_in_reg <= D10_8_in_reg ;                                                   \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_in_reg <= D11_0_in_wire ;                                                  \n";
r16_dc << " 			D11_1_in_reg <= D11_1_in_wire ;                                                  \n";
r16_dc << " 			D11_2_in_reg <= D11_1_in_reg ;                                                   \n";
r16_dc << " 			D11_3_in_reg <= D11_2_in_reg ;                                                   \n";
r16_dc << " 			D11_4_in_reg <= D11_3_in_reg ;                                                   \n";
r16_dc << " 			D11_5_in_reg <= D11_4_in_reg ;                                                   \n";
r16_dc << " 			D11_6_in_reg <= D11_5_in_reg ;                                                   \n";
r16_dc << " 			D11_7_in_reg <= D11_6_in_reg ;                                                   \n";
r16_dc << " 			D11_8_in_reg <= D11_7_in_reg ;                                                   \n";
r16_dc << " 			D11_9_in_reg <= D11_8_in_reg ;                                                   \n";
r16_dc << " 			D11_10_in_reg <= D11_9_in_reg ;                                                  \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_in_reg <= D12_0_in_wire;                                                   \n";
r16_dc << " 			D12_1_in_reg <= D12_0_in_reg ;                                                   \n";
r16_dc << " 			D12_2_in_reg <= D12_1_in_reg ;                                                   \n";
r16_dc << " 			D12_3_in_reg <= D12_2_in_reg ;                                                   \n";
r16_dc << " 			D12_4_in_reg <= D12_3_in_reg ;                                                   \n";
r16_dc << " 			D12_5_in_reg <= D12_4_in_reg ;                                                   \n";
r16_dc << " 			D12_6_in_reg <= D12_5_in_reg ;                                                   \n";
r16_dc << " 			D12_7_in_reg <= D12_6_in_reg ;                                                   \n";
r16_dc << " 			D12_8_in_reg <= D12_7_in_reg ;                                                   \n";
r16_dc << " 			D12_9_in_reg <= D12_8_in_reg ;                                                   \n";
r16_dc << " 			D12_10_in_reg <= D12_9_in_reg ;                                                  \n";
r16_dc << " 			D12_11_in_reg <= D12_10_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_in_reg <= D13_0_in_wire;                                                   \n";
r16_dc << " 			D13_1_in_reg <= D13_1_in_wire ;                                                  \n";
r16_dc << " 			D13_2_in_reg <= D13_1_in_reg ;                                                   \n";
r16_dc << " 			D13_3_in_reg <= D13_2_in_reg ;                                                   \n";
r16_dc << " 			D13_4_in_reg <= D13_3_in_reg ;                                                   \n";
r16_dc << " 			D13_5_in_reg <= D13_4_in_reg ;                                                   \n";
r16_dc << " 			D13_6_in_reg <= D13_5_in_reg ;                                                   \n";
r16_dc << " 			D13_7_in_reg <= D13_6_in_reg ;                                                   \n";
r16_dc << " 			D13_8_in_reg <= D13_7_in_reg ;                                                   \n";
r16_dc << " 			D13_9_in_reg <= D13_8_in_reg ;                                                   \n";
r16_dc << " 			D13_10_in_reg <= D13_9_in_reg ;                                                  \n";
r16_dc << " 			D13_11_in_reg <= D13_10_in_reg ;                                                 \n";
r16_dc << " 			D13_12_in_reg <= D13_11_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D14_0_in_reg <= D14_0_in_wire ;                                                  \n";
r16_dc << " 			D14_1_in_reg <= D14_0_in_reg ;                                                   \n";
r16_dc << " 			D14_2_in_reg <= D14_1_in_reg ;                                                   \n";
r16_dc << " 			D14_3_in_reg <= D14_2_in_reg ;                                                   \n";
r16_dc << " 			D14_4_in_reg <= D14_3_in_reg ;                                                   \n";
r16_dc << " 			D14_5_in_reg <= D14_4_in_reg ;                                                   \n";
r16_dc << " 			D14_6_in_reg <= D14_5_in_reg ;                                                   \n";
r16_dc << " 			D14_7_in_reg <= D14_6_in_reg ;                                                   \n";
r16_dc << " 			D14_8_in_reg <= D14_7_in_reg ;                                                   \n";
r16_dc << " 			D14_9_in_reg <= D14_8_in_reg ;                                                   \n";
r16_dc << " 			D14_10_in_reg <= D14_9_in_reg ;                                                  \n";
r16_dc << " 			D14_11_in_reg <= D14_10_in_reg ;                                                 \n";
r16_dc << " 			D14_12_in_reg <= D14_11_in_reg ;                                                 \n";
r16_dc << " 			D14_13_in_reg <= D14_12_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D15_0_in_reg <= RDC_in15 ;                                                       \n";
r16_dc << " 			D15_1_in_reg <= D15_1_in_wire ;                                                  \n";
r16_dc << " 			D15_2_in_reg <= D15_1_in_reg ;                                                   \n";
r16_dc << " 			D15_3_in_reg <= D15_2_in_reg ;                                                   \n";
r16_dc << " 			D15_4_in_reg <= D15_3_in_reg ;                                                   \n";
r16_dc << " 			D15_5_in_reg <= D15_4_in_reg ;                                                   \n";
r16_dc << " 			D15_6_in_reg <= D15_5_in_reg ;                                                   \n";
r16_dc << " 			D15_7_in_reg <= D15_6_in_reg ;                                                   \n";
r16_dc << " 			D15_8_in_reg <= D15_7_in_reg ;                                                   \n";
r16_dc << " 			D15_9_in_reg <= D15_8_in_reg ;                                                   \n";
r16_dc << " 			D15_10_in_reg <= D15_9_in_reg ;                                                  \n";
r16_dc << " 			D15_11_in_reg <= D15_10_in_reg ;                                                 \n";
r16_dc << " 			D15_12_in_reg <= D15_11_in_reg ;                                                 \n";
r16_dc << " 			D15_13_in_reg <= D15_12_in_reg ;                                                 \n";
r16_dc << " 			D15_14_in_reg <= D15_13_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= D0_wire ;                                                        \n";
r16_dc << " 			D0_1_out_reg <= D0_0_out_reg ;                                                   \n";
r16_dc << " 			D0_2_out_reg <= D0_1_out_reg ;                                                   \n";
r16_dc << " 			D0_3_out_reg <= D0_2_out_reg ;                                                   \n";
r16_dc << " 			D0_4_out_reg <= D0_3_out_reg ;                                                   \n";
r16_dc << " 			D0_5_out_reg <= D0_4_out_reg ;                                                   \n";
r16_dc << " 			D0_6_out_reg <= D0_5_out_reg ;                                                   \n";
r16_dc << " 			D0_7_out_reg <= D0_6_out_reg ;                                                   \n";
r16_dc << " 			D0_8_out_reg <= D0_7_out_reg ;                                                   \n";
r16_dc << " 			D0_9_out_reg <= D0_8_out_reg ;                                                   \n";
r16_dc << " 			D0_10_out_reg <= D0_9_out_reg ;                                                  \n";
r16_dc << " 			D0_11_out_reg <= D0_10_out_reg ;                                                 \n";
r16_dc << " 			D0_12_out_reg <= D0_11_out_reg ;                                                 \n";
r16_dc << " 			D0_13_out_reg <= D0_12_out_reg ;                                                 \n";
r16_dc << " 			RDC_out0 <= D0_13_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D1_0_out_reg <= D1_wire ;                                                        \n";
r16_dc << " 			D1_1_out_reg <= D1_0_out_reg ;                                                   \n";
r16_dc << " 			D1_2_out_reg <= D1_1_out_reg ;                                                   \n";
r16_dc << " 			D1_3_out_reg <= D1_2_out_reg ;                                                   \n";
r16_dc << " 			D1_4_out_reg <= D1_3_out_reg ;                                                   \n";
r16_dc << " 			D1_5_out_reg <= D1_4_out_reg ;                                                   \n";
r16_dc << " 			D1_6_out_reg <= D1_5_out_reg ;                                                   \n";
r16_dc << " 			D1_7_out_reg <= D1_6_out_reg ;                                                   \n";
r16_dc << " 			D1_8_out_reg <= D1_7_out_reg ;                                                   \n";
r16_dc << " 			D1_9_out_reg <= D1_8_out_reg ;                                                   \n";
r16_dc << " 			D1_10_out_reg <= D1_9_out_reg ;                                                  \n";
r16_dc << " 			D1_11_out_reg <= D1_10_out_reg ;                                                 \n";
r16_dc << " 			D1_12_out_reg <= D1_11_out_reg ;                                                 \n";
r16_dc << " 			RDC_out1 <= D1_12_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_out_reg <= D2_wire ;                                                        \n";
r16_dc << " 			D2_1_out_reg <= D2_0_out_reg ;                                                   \n";
r16_dc << " 			D2_2_out_reg <= D2_1_out_reg ;                                                   \n";
r16_dc << " 			D2_3_out_reg <= D2_2_out_reg ;                                                   \n";
r16_dc << " 			D2_4_out_reg <= D2_3_out_reg ;                                                   \n";
r16_dc << " 			D2_5_out_reg <= D2_4_out_reg ;                                                   \n";
r16_dc << " 			D2_6_out_reg <= D2_5_out_reg ;                                                   \n";
r16_dc << " 			D2_7_out_reg <= D2_6_out_reg ;                                                   \n";
r16_dc << " 			D2_8_out_reg <= D2_7_out_reg ;                                                   \n";
r16_dc << " 			D2_9_out_reg <= D2_8_out_reg ;                                                   \n";
r16_dc << " 			D2_10_out_reg <= D2_9_out_reg ;                                                  \n";
r16_dc << " 			D2_11_out_reg <= D2_10_out_reg ;                                                 \n";
r16_dc << " 			RDC_out2 <= D2_11_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= D3_wire ;                                                        \n";
r16_dc << " 			D3_1_out_reg <= D3_0_out_reg ;                                                   \n";
r16_dc << " 			D3_2_out_reg <= D3_1_out_reg ;                                                   \n";
r16_dc << " 			D3_3_out_reg <= D3_2_out_reg ;                                                   \n";
r16_dc << " 			D3_4_out_reg <= D3_3_out_reg ;                                                   \n";
r16_dc << " 			D3_5_out_reg <= D3_4_out_reg ;                                                   \n";
r16_dc << " 			D3_6_out_reg <= D3_5_out_reg ;                                                   \n";
r16_dc << " 			D3_7_out_reg <= D3_6_out_reg ;                                                   \n";
r16_dc << " 			D3_8_out_reg <= D3_7_out_reg ;                                                   \n";
r16_dc << " 			D3_9_out_reg <= D3_8_out_reg ;                                                   \n";
r16_dc << " 			D3_10_out_reg <= D3_9_out_reg ;                                                  \n";
r16_dc << " 			RDC_out3 <= D3_10_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= D4_wire ;                                                        \n";
r16_dc << " 			D4_1_out_reg <= D4_0_out_reg ;                                                   \n";
r16_dc << " 			D4_2_out_reg <= D4_1_out_reg ;                                                   \n";
r16_dc << " 			D4_3_out_reg <= D4_2_out_reg ;                                                   \n";
r16_dc << " 			D4_4_out_reg <= D4_3_out_reg ;                                                   \n";
r16_dc << " 			D4_5_out_reg <= D4_4_out_reg ;                                                   \n";
r16_dc << " 			D4_6_out_reg <= D4_5_out_reg ;                                                   \n";
r16_dc << " 			D4_7_out_reg <= D4_6_out_reg ;                                                   \n";
r16_dc << " 			D4_8_out_reg <= D4_7_out_reg ;                                                   \n";
r16_dc << " 			D4_9_out_reg <= D4_8_out_reg ;                                                   \n";
r16_dc << " 			RDC_out4 <= D4_9_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= D5_wire ;                                                        \n";
r16_dc << " 			D5_1_out_reg <= D5_0_out_reg ;                                                   \n";
r16_dc << " 			D5_2_out_reg <= D5_1_out_reg ;                                                   \n";
r16_dc << " 			D5_3_out_reg <= D5_2_out_reg ;                                                   \n";
r16_dc << " 			D5_4_out_reg <= D5_3_out_reg ;                                                   \n";
r16_dc << " 			D5_5_out_reg <= D5_4_out_reg ;                                                   \n";
r16_dc << " 			D5_6_out_reg <= D5_5_out_reg ;                                                   \n";
r16_dc << " 			D5_7_out_reg <= D5_6_out_reg ;                                                   \n";
r16_dc << " 			D5_8_out_reg <= D5_7_out_reg ;                                                   \n";
r16_dc << " 			RDC_out5 <= D5_8_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= D6_wire ;                                                        \n";
r16_dc << " 			D6_1_out_reg <= D6_0_out_reg ;                                                   \n";
r16_dc << " 			D6_2_out_reg <= D6_1_out_reg ;                                                   \n";
r16_dc << " 			D6_3_out_reg <= D6_2_out_reg ;                                                   \n";
r16_dc << " 			D6_4_out_reg <= D6_3_out_reg ;                                                   \n";
r16_dc << " 			D6_5_out_reg <= D6_4_out_reg ;                                                   \n";
r16_dc << " 			D6_6_out_reg <= D6_5_out_reg ;                                                   \n";
r16_dc << " 			D6_7_out_reg <= D6_6_out_reg ;                                                   \n";
r16_dc << " 			RDC_out6 <= D6_7_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= D7_wire ;                                                        \n";
r16_dc << " 			D7_1_out_reg <= D7_0_out_reg ;                                                   \n";
r16_dc << " 			D7_2_out_reg <= D7_1_out_reg ;                                                   \n";
r16_dc << " 			D7_3_out_reg <= D7_2_out_reg ;                                                   \n";
r16_dc << " 			D7_4_out_reg <= D7_3_out_reg ;                                                   \n";
r16_dc << " 			D7_5_out_reg <= D7_4_out_reg ;                                                   \n";
r16_dc << " 			D7_6_out_reg <= D7_5_out_reg ;                                                   \n";
r16_dc << " 			RDC_out7 <= D7_6_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= D8_wire ;                                                        \n";
r16_dc << " 			D8_1_out_reg <= D8_0_out_reg ;                                                   \n";
r16_dc << " 			D8_2_out_reg <= D8_1_out_reg ;                                                   \n";
r16_dc << " 			D8_3_out_reg <= D8_2_out_reg ;                                                   \n";
r16_dc << " 			D8_4_out_reg <= D8_3_out_reg ;                                                   \n";
r16_dc << " 			D8_5_out_reg <= D8_4_out_reg ;                                                   \n";
r16_dc << " 			RDC_out8 <= D8_5_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= D9_wire ;                                                        \n";
r16_dc << " 			D9_1_out_reg <= D9_0_out_reg ;                                                   \n";
r16_dc << " 			D9_2_out_reg <= D9_1_out_reg ;                                                   \n";
r16_dc << " 			D9_3_out_reg <= D9_2_out_reg ;                                                   \n";
r16_dc << " 			D9_4_out_reg <= D9_3_out_reg ;                                                   \n";
r16_dc << " 			RDC_out9 <= D9_4_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= D10_wire ;                                                      \n";
r16_dc << " 			D10_1_out_reg <= D10_0_out_reg ;                                                 \n";
r16_dc << " 			D10_2_out_reg <= D10_1_out_reg ;                                                 \n";
r16_dc << " 			D10_3_out_reg <= D10_2_out_reg ;                                                 \n";
r16_dc << " 			RDC_out10 <= D10_3_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= D11_wire ;                                                      \n";
r16_dc << " 			D11_1_out_reg <= D11_0_out_reg ;                                                 \n";
r16_dc << " 			D11_2_out_reg <= D11_1_out_reg ;                                                 \n";
r16_dc << " 			RDC_out11 <= D11_2_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= D12_wire ;                                                      \n";
r16_dc << " 			D12_1_out_reg <= D12_0_out_reg ;                                                 \n";
r16_dc << " 			RDC_out12 <= D12_1_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= D13_wire ;                                                      \n";
r16_dc << " 			RDC_out13 <= D13_0_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= D14_wire ;                                                          \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 	end                                                                                      \n";
r16_dc << "                                                                                              \n";
r16_dc << " endmodule                                                                                    \n";
	 r16_dc.close();
}

//Mixed radix-16 ,final stage using radix-4
void CenCtrl::Ctrl_PipeReg1_r16_r4(std::string string_in){
	 std::ofstream ctrl_pipereg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 ctrl_pipereg1.open(ss.str());	
     ctrl_pipereg1<< " `timescale 1 ns/1 ps                                                             \n";
     ctrl_pipereg1<< " module Ctrl_PipeReg1(mode_sel_Dout,                                              \n";
     ctrl_pipereg1<< " 				        Mul_sel_Dout,                                                  \n";
     ctrl_pipereg1<< " 				        RDC_sel_Dout,                                                  \n";
     ctrl_pipereg1<< " 				        BU_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< " 				        BU_dc_sel_Dout,                                           \n";
     ctrl_pipereg1<< " 				        DC_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< "                      mode_sel_in,                                                \n";
     ctrl_pipereg1<< " 			            Mul_sel_in,                                                    \n";
     ctrl_pipereg1<< " 			            RDC_sel_in,                                                    \n";
     ctrl_pipereg1<< " 			            BU_mode_sel_in,                                                    \n";
     ctrl_pipereg1<< " 			            BU_dc_sel_in,                                                    \n";
     ctrl_pipereg1<< " 			            DC_mode_sel_in,                                                    \n";
     ctrl_pipereg1<< "                      rst_n,                                                      \n";
     ctrl_pipereg1<< "                      clk                                                         \n";
     ctrl_pipereg1<< "                      ) ;                                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " parameter ROMA_WIDTH  = " << ROM_width << ";\n";
     ctrl_pipereg1<< " parameter ROMA_ZERO   = " << ROM_width << "'h0 ;\n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " output                  mode_sel_Dout ;                                          \n";
     ctrl_pipereg1<< " output [1:0]            Mul_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [3:0]            RDC_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [1:0]            DC_mode_sel_Dout ;                                           \n";     
     ctrl_pipereg1<< " output                  BU_mode_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output                  BU_dc_sel_Dout ;                                           \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " input                   mode_sel_in ;                                            \n";
     ctrl_pipereg1<< " input  [1:0]            Mul_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [3:0]            RDC_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [1:0]            DC_mode_sel_in ;                                      \n";
     ctrl_pipereg1<< " input                   BU_mode_sel_in ;                                      \n";     
     ctrl_pipereg1<< " input                   BU_dc_sel_in ;                                      \n";     
     ctrl_pipereg1<< " input                   rst_n ;                                                  \n";
     ctrl_pipereg1<< " input                   clk ;                                                    \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " reg                  mode_sel_D0reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D1reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D2reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_Dout ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_Dout ;                                              \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D3reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D4reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D5reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_Dout ;                                              \n";
	 //---------------------------------------------------------------------
     ctrl_pipereg1<< " reg                  BU_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D45reg ;                                        \n";	 
     ctrl_pipereg1<< " reg                  BU_mode_sel_Dout  ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D0reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D1reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D2reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D3reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D4reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D5reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D6reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D7reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D8reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D9reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D10reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D11reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D12reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D13reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D14reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D15reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D16reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D17reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D18reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D19reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D20reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D21reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D22reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D23reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D24reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D25reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D26reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D27reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D28reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D29reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D30reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D31reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D32reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D33reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D34reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D35reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D36reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D37reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D38reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D39reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D40reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D41reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D42reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D43reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D44reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D45reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_Dout  ;                                           \n";	 
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D45reg ;                                        \n";	 
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_Dout  ;                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n";
     ctrl_pipereg1<< " 	always @(posedge clk or negedge rst_n) begin                                    \n";
     ctrl_pipereg1<< " 		if(~rst_n) begin                                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg     <= 1'b0 ;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg     <= 1'b0 ;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg     <= 1'b0 ;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_Dout      <= 1'b0 ;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg      <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg      <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg      <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout       <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg      <= 4'd0 ;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg      <= 4'd0 ;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg      <= 4'd0 ;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg      <= 4'd0 ;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg      <= 4'd0 ;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg      <= 4'd0 ;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout       <= 4'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg  <= 2'd0 ;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg <= 2'd0;                               \n";	 
	 ctrl_pipereg1<< " 			DC_mode_sel_Dout   <= 2'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg  <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg <= 1'd0;                               \n";	 
     ctrl_pipereg1<< " 			BU_mode_sel_Dout   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg    <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg   <= 1'd0;                                \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg   <= 1'd0;                                \n";	 
     ctrl_pipereg1<< " 			BU_dc_sel_Dout     <= 1'd0;                                \n"; 	 
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 		else begin                                                                  \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg <= mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg <= mode_sel_D0reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg <= mode_sel_D1reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_Dout <= mode_sel_D2reg ;                                       \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg <= Mul_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout <= Mul_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg <= RDC_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout <= RDC_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;                                  \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;                              \n";	 
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;                              \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg  <= BU_mode_sel_in;                                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg  <= BU_mode_sel_D0reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg  <= BU_mode_sel_D1reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg  <= BU_mode_sel_D2reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg  <= BU_mode_sel_D3reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg  <= BU_mode_sel_D4reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg  <= BU_mode_sel_D5reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg  <= BU_mode_sel_D6reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg  <= BU_mode_sel_D7reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg  <= BU_mode_sel_D8reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg <= BU_mode_sel_D9reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg <= BU_mode_sel_D10reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg <= BU_mode_sel_D11reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg <= BU_mode_sel_D12reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg <= BU_mode_sel_D13reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg <= BU_mode_sel_D14reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg <= BU_mode_sel_D15reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg <= BU_mode_sel_D16reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg <= BU_mode_sel_D17reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg <= BU_mode_sel_D18reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg <= BU_mode_sel_D19reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg <= BU_mode_sel_D20reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg <= BU_mode_sel_D21reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg <= BU_mode_sel_D22reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg <= BU_mode_sel_D23reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg <= BU_mode_sel_D24reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg <= BU_mode_sel_D25reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg <= BU_mode_sel_D26reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg <= BU_mode_sel_D27reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg <= BU_mode_sel_D28reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg <= BU_mode_sel_D29reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg <= BU_mode_sel_D30reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg <= BU_mode_sel_D31reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg <= BU_mode_sel_D32reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg <= BU_mode_sel_D33reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg <= BU_mode_sel_D34reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg <= BU_mode_sel_D35reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg <= BU_mode_sel_D36reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg <= BU_mode_sel_D37reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg <= BU_mode_sel_D38reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg <= BU_mode_sel_D39reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg <= BU_mode_sel_D40reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg <= BU_mode_sel_D41reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg <= BU_mode_sel_D42reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg <= BU_mode_sel_D43reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg <= BU_mode_sel_D44reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_Dout   <= BU_mode_sel_D45reg;                               \n";	 
     ctrl_pipereg1<< " 		    //                                                                      \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg    <= BU_dc_sel_in;                                       \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg    <= BU_dc_sel_D0reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg    <= BU_dc_sel_D1reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg    <= BU_dc_sel_D2reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg    <= BU_dc_sel_D3reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg    <= BU_dc_sel_D4reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg    <= BU_dc_sel_D5reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg    <= BU_dc_sel_D6reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg    <= BU_dc_sel_D7reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg    <= BU_dc_sel_D8reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg   <= BU_dc_sel_D9reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg   <= BU_dc_sel_D10reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg   <= BU_dc_sel_D11reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg   <= BU_dc_sel_D12reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg   <= BU_dc_sel_D13reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg   <= BU_dc_sel_D14reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg   <= BU_dc_sel_D15reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg   <= BU_dc_sel_D16reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg   <= BU_dc_sel_D17reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg   <= BU_dc_sel_D18reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg   <= BU_dc_sel_D19reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg   <= BU_dc_sel_D20reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg   <= BU_dc_sel_D21reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg   <= BU_dc_sel_D22reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg   <= BU_dc_sel_D23reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg   <= BU_dc_sel_D24reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg   <= BU_dc_sel_D25reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg   <= BU_dc_sel_D26reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg   <= BU_dc_sel_D27reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg   <= BU_dc_sel_D28reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg   <= BU_dc_sel_D29reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg   <= BU_dc_sel_D30reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg   <= BU_dc_sel_D31reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg   <= BU_dc_sel_D32reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg   <= BU_dc_sel_D33reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg   <= BU_dc_sel_D34reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg   <= BU_dc_sel_D35reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg   <= BU_dc_sel_D36reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg   <= BU_dc_sel_D37reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg   <= BU_dc_sel_D38reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg   <= BU_dc_sel_D39reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg   <= BU_dc_sel_D40reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg   <= BU_dc_sel_D41reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg   <= BU_dc_sel_D42reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg   <= BU_dc_sel_D43reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg   <= BU_dc_sel_D44reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_Dout     <= BU_dc_sel_D45reg;                                   \n"; 	 
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 	end                                                                             \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " endmodule                                                                        \n";
	 ctrl_pipereg1.close();
}
void CenCtrl::R16_R4_AGU(std::string string_in){
	 std::ofstream r16_agu;
     std::string        string_buf = "/R16_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu.open(ss.str());
     r16_agu << " `timescale 1 ns/1 ps                                \n";
     r16_agu << " module R16_AGU(BN_out,                              \n";
     r16_agu << "                MA,                                  \n";
     r16_agu << "                ROMA,                                \n";
     r16_agu << "                Mul_sel_out,                         \n";
     r16_agu << "                RDC_sel_out,                         \n";
     r16_agu << "                data_cnt_reg,                        \n";
     r16_agu << "                BU_mode_sel_out,//for BU control signal        \n";
     r16_agu << "                BU_dc_sel_out,//for BU control signal          \n";
     r16_agu << "                DC_mode_sel_out,//for raidx-2 delay commutator \n";
     r16_agu << "                mode_sel_in,                         \n";
     r16_agu << "                rc_sel_in,                           \n";
     r16_agu << "                AGU_en,                              \n";
     r16_agu << "                wrfd_en_in,                          \n";
     r16_agu << "                rst_n,                               \n";
     r16_agu << "                clk                                  \n";
     r16_agu << "                ) ;                                  \n";
     r16_agu << " parameter A_WIDTH     = " << addr_width        << ";\n";
     r16_agu << " parameter DC_WIDTH    = " << data_cnt_width    << ";\n";
     r16_agu << " parameter BC_WIDTH    = " << BU_counter_width  << ";\n";
     r16_agu << " parameter SC_WIDTH    = " << stage_width       << ";\n";
     r16_agu << " parameter ROMA_WIDTH  = " << ROM_width         << ";\n";
     r16_agu << " \n";
     r16_agu << " parameter DC_ZERO   = " << data_cnt_width << "'h0 ;\n";
     r16_agu << " parameter ROMA_ZERO = " << ROM_width      << "'h0 ;\n";
     r16_agu << " \n";
	 //modify part
	 for(int i=0; i < No_stage ;i++){ 
         r16_agu << "parameter S" << i << "      = " << stage_width << "'d" << i <<"; \n";
	 }
     r16_agu << "\n";
     r16_agu << " parameter DCNT_V1    = " << data_cnt_width << "'d" << FFT_dc[No_stage-1]  <<"; //data counter value1 for data_cnt_wire      \n";
     r16_agu << " parameter DCNT_V2    = " << data_cnt_width << "'d" << ceil((double)m/radix) + 4 <<"; //data counter value2 for data_cnt_wire      \n";
     for(int j=0; j < (radix-2);j++){
		 r16_agu << "  parameter DCNT_FS" << (j+1)<<" = " << data_cnt_width << "'d" << DCNT_FS[j] <<";\n";
	 }
     r16_agu << " \n";
     r16_agu << " parameter DCNT_BP1 = "<< DCNT_BP1 << " ;\n";
     r16_agu << " parameter DCNT_BP2 = "<< DCNT_BP2 << " ;\n";
     r16_agu << " parameter DCNT_BP3 = "<< DCNT_BP3 << " ;\n";
     r16_agu << " parameter DCNT_BP4 = "<< DCNT_BP4 << " ;\n";
     r16_agu << "\n";
     r16_agu << "\n";
     r16_agu << " output                  BN_out ;                                    \n";
     r16_agu << " output [A_WIDTH-1:0]    MA ;                                        \n";
     r16_agu << " output [ROMA_WIDTH-1:0] ROMA ;                                      \n";
     r16_agu << " output [1:0]            Mul_sel_out ;                               \n";
     r16_agu << " output [3:0]            RDC_sel_out ;                               \n";
     r16_agu << " output [DC_WIDTH-1:0]   data_cnt_reg ;                              \n";
     r16_agu << " output [1:0]            DC_mode_sel_out ;                           \n";
     r16_agu << " output                  BU_mode_sel_out ;                           \n";
     r16_agu << " output                  BU_dc_sel_out ;                             \n";
	 r16_agu << "                                                                     \n";
     r16_agu << " input                   mode_sel_in ;                               \n";
     r16_agu << " input                   rc_sel_in ;                                 \n";
     r16_agu << " input                   AGU_en ;                                    \n";
     r16_agu << " input                   wrfd_en_in ;                                \n";
     r16_agu << " input                   rst_n ;                                     \n";
     r16_agu << " input                   clk ;                                       \n";
     r16_agu << "                                                                     \n";
     r16_agu << "                                                                     \n";
     r16_agu << " reg   [DC_WIDTH-1:0] data_cnt_reg ; // data counter                 \n";
     r16_agu << " reg   [3:0]          RDCsel_cnt_reg ; // RDC select counter         \n";
     r16_agu << " reg                  BN_out ;                                       \n";
     r16_agu << " reg   [3:0]          RDC_sel_out ;                                  \n";
     r16_agu << " reg   [1:0]          Mul_sel_out ;                                  \n";
     r16_agu << " reg   [1:0]          DC_mode_sel_out ;                              \n";
     r16_agu << " reg                  BU_mode_sel_out ;                              \n";
     r16_agu << " reg                  BU_dc_sel_out ;                                \n";
     r16_agu << "                                                                     \n";
     r16_agu << " wire  [DC_WIDTH-1:0] data_cnt_wire ;                                \n";
     r16_agu << " wire  [3:0]          RDCsel_cnt_wire ;                              \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                 \n";
	 r16_agu << " wire  [BC_WIDTH-1:0] BC_REORDER_wire ; // butterfly counter         \n";
     // number of wire xor_wire change with fft_point
	 unsigned long  NO_xorwire; //number of  xor wire  
	 NO_xorwire  = DCNT_BP3 - DCNT_BP2;
	 for(int i=0;i < NO_xorwire;i++){
         r16_agu << " wire                 xor_d"<< i << "_wire;\n";
	 }
     r16_agu << " wire  [SC_WIDTH-1:0] SC_wire ; // stage counter \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_RR_wire ;               \n";
     r16_agu << " wire                 BN_wire ;                  \n";
     r16_agu << " wire [1:0]           DC_mode_sel_wire;          \n";
     r16_agu << " wire                 BU_mode_sel_wire;          \n";	 
     r16_agu << " wire                 BU_dc_sel_wire;            \n";
     r16_agu << " wire [3:0]           RDC_sel_wire ;             \n";
     r16_agu << " wire [1:0]           Mul_sel_wire ;             \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BR_BC_wire ;                                                                             \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign data_cnt_wire = (((AGU_en==1'b1)&&(data_cnt_reg==DCNT_V1))||                                         \n";
     r16_agu << "                           ((rc_sel_in==1'b1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                      \n";
     r16_agu << "                           DC_ZERO : (AGU_en==1'b1)?\n";
     r16_agu << "                           (data_cnt_reg + 1'b1) : data_cnt_reg ;                                              \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign RDCsel_cnt_wire = (((AGU_en==1'd1)&&(data_cnt_reg==DCNT_V1))||                                       \n";
     r16_agu << "                             ((rc_sel_in==1'd1)&&(AGU_en==1'b1)&&(data_cnt_reg==DCNT_V2)))?                    \n";
     r16_agu << "                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))?            \n";
     r16_agu << "                             (RDCsel_cnt_reg + 1'd1) : RDCsel_cnt_reg ;                                        \n";
     r16_agu << " 	                                                                                                            \n";
     //*************************************************************************
	 r16_agu << " 	// for Gray code 	 \n";
	 for(int k=0;k < NO_xorwire; k++){
	 r16_agu << "   assign xor_d" << k <<"_wire = data_cnt_reg["<<(DCNT_BP3 - k)<<"]^data_cnt_reg["<<(DCNT_BP3 - k - 1)<<"];\n";	 
	 } 
     r16_agu << "\n";
     r16_agu << "   assign BC_wire = (rc_sel_in==1'b1)?                                                  \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3:DCNT_BP2]}):       \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],                                         \n";
     r16_agu << "                      data_cnt_reg[DCNT_BP3],                                           \n";
     for(int l=0;l<NO_xorwire;l++){
	     if(l!=(NO_xorwire-1))r16_agu << "                      xor_d"<< l <<"_wire,\n";
         else                 r16_agu << "                      xor_d"<< l <<"_wire\n";	 
	 }
     r16_agu << "                       }) ;\n";
     r16_agu << "\n";
     //**********************************************************************
     // need to modify 2020/03/23
     //*********************************************************************
	 r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign SC_wire = data_cnt_reg[DC_WIDTH-1:DCNT_BP4] ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                                 \n";
     r16_agu << "   assign BC_RR_wire = ";
	 //***************************************************************************************
	 //need to modify
	 //***************************************************************************************
     unsigned long RR_tmp;
     unsigned long s;
     unsigned long fs_rr_bits; //final state is in order to read data from sram
     //final state bc right shift // final state is after INTT computing state
     s = DCNT_BP1 + 1; //radix bit size
     fs_rr_bits = s * (No_stage -3);
     for(unsigned long i=0; i < (No_stage-1);i++){
        if( i == (No_stage -2))RR_tmp = s * i - 2;
        else RR_tmp = s * i;	 
	    
        if(i==0) {
            if(No_stage < 4) r16_agu << "((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))? BC_wire:\n";
            else r16_agu << "((SC_wire == S" << i << ")||((SC_wire == S"<< (No_stage-1) <<") && (mode_sel_in == 1'd1)))? BC_wire:\n";	  
        }
        else {
                if((No_stage >= 4 )&& (i == (No_stage-2)))r16_agu << "                       ((SC_wire == S" << i << ") ||((SC_wire == S"<< (No_stage - 1)<<") && (mode_sel_in == 1'd0)))? \n";
                else   r16_agu << "                       (SC_wire == S" << i << ")? \n";
                r16_agu << "                       {BC_wire[" << RR_tmp-1 << ":0],BC_wire[BC_WIDTH-1:" << RR_tmp << "]} :\n";
        }
     }
	 //*******************************************************************************************
     r16_agu << "                       BC_wire;\n";
     r16_agu << "\n";
     r16_agu << "   // Bit reverse barrel shifter for IFFT                                                                             \n";
     r16_agu << "   assign BR_BC_wire = {\n";
     
	 int    Number_of_digit;
	 Number_of_digit = ( BU_counter_width - 2) / 4;
	 
	 for(int j = (Number_of_digit - 1); j >= 0 ; j--){
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 3 - (4 * j) << "],\n"; 
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 4 - (4 * j) << "],\n"; 
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 5 - (4 * j) << "],\n"; 
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 6 - (4 * j) << "],\n"; 
	 }	 
	 r16_agu << "                       BC_RR_wire["<< (BU_counter_width - 1) << "],\n"; 
	 r16_agu << "                       BC_RR_wire["<< (BU_counter_width - 2) << "]};\n"; 
	 
	 // BC_REORDER for  INTT output 
	 if(BU_counter_width == 6){
		r16_agu << "   assign BC_REORDER_wire = {BC_RR_wire[1],\n";
		r16_agu << "                       BC_RR_wire[0],\n";
		r16_agu << "                       BC_RR_wire[3],\n";
		r16_agu << "                       BC_RR_wire[2],\n";
	    r16_agu << "                       BC_RR_wire[5],\n";
	    r16_agu << "                       BC_RR_wire[4]};\n";
	}
	
    if(BU_counter_width == 10){
		r16_agu << "   assign BC_REORDER_wire = {BC_RR_wire[7],\n";
		r16_agu << "                       BC_RR_wire[6],\n";
		r16_agu << "                       BC_RR_wire[1],\n";
		r16_agu << "                       BC_RR_wire[0],\n";
	    r16_agu << "                       BC_RR_wire[5],\n";		
	    r16_agu << "                       BC_RR_wire[4],\n";		
	    r16_agu << "                       BC_RR_wire[9],\n";		
	    r16_agu << "                       BC_RR_wire[8],\n";		
	    r16_agu << "                       BC_RR_wire[3],\n";		
	    r16_agu << "                       BC_RR_wire[2]};\n";		
	}	 
	 
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Bank,  rc_sel_in=1 BN_wire=(^BC_RR_wire)                                                                        \n";
     r16_agu << "   assign BN_wire = ( rc_sel_in == 1'd1 ) ? ( ^BC_REORDER_wire ) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ;                          \n";
     r16_agu << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                              \n";
     r16_agu << "   assign MA = ( rc_sel_in == 1'd1 ) ? ( BC_REORDER_wire[BC_WIDTH-1:1] ) : (mode_sel_in==1'b1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ;                         \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // ROM Address                                                                                                     \n";
     r16_agu << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                        \n";
     unsigned long ls_bits = 0; //left shift bits
     
     for(unsigned long i=1;i < (No_stage-1);i++){
         ls_bits = s * i;
         unsigned long ls_msb;
         ls_msb = ROM_width - 1 - ls_bits;
         r16_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[" << ls_msb <<":0]," << ls_bits <<"'d0}) : \n" ; 
     }
     r16_agu << "                 ROMA_ZERO;\n"; 
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign Mul_sel_wire = ((AGU_en==1'd1)&&(mode_sel_in==1'd1)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd3 :                \n";
     r16_agu << "                         ((AGU_en==1'd1)&&(mode_sel_in==1'd0)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd2 :                \n";
     r16_agu << "                           // test for point-wise multiplication                                                      \n";
     r16_agu << "                          (AGU_en==1'd1)? 2'd1 : 2'd0 ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign RDC_sel_wire = (wrfd_en_in==1'd1) ? RDCsel_cnt_reg : data_cnt_reg[3:0]  ;                                   \n";
     r16_agu << "   //Butterfly unit mode select                                                                                       \n";
	 r16_agu << "   assign BU_mode_sel_wire = ( SC_wire == S" << No_stage-1 <<") ? 1'd1 : 1'd0;\n";
	 r16_agu << "   //                                                                         \n";
	 r16_agu << "   assign BU_dc_sel_wire = (( SC_wire == S" << No_stage-1 <<") && (mode_sel_in==1'b1)) ? 1'd1 : 1'd0;\n";
     r16_agu << "   //2 bits , DC_mode_sel_wire                                                                                        \n";
     r16_agu << "   //2'b2 : for NTT output	, array the data as INTT input                                     \n";
     r16_agu << "   //2'b1 : for NTT and INTT radix-4 computing                                                \n";
	 /************************************************************************/
	 //IFFT final stage data relocation method is the same as matrix transpose
	 /************************************************************************/
     r16_agu << "   assign DC_mode_sel_wire = (( SC_wire == S"<< No_stage-1 <<") && (mode_sel_in==1'b0)) ? 2'd2:\n";
     r16_agu << "                              ( SC_wire == S"<< No_stage-2 <<") ? 2'd1 : 2'd0;\n";
     r16_agu << "                                                                                                                      \n";	 
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   always @(posedge clk or negedge rst_n) begin                                                                       \n";
     r16_agu << "   	if(~rst_n) begin                                                                                               \n";
     r16_agu << "           data_cnt_reg      <= DC_ZERO ;                                                                             \n";
     r16_agu << "           BN_out            <= 1'd0 ;                                                                                \n";
     r16_agu << "           BU_mode_sel_out   <= 1'd0 ;                                                                                \n";
     r16_agu << "           BU_dc_sel_out     <= 1'd0 ;                                                                                \n";
     r16_agu << "           DC_mode_sel_out   <= 2'd0 ;                                                                                \n";
	 r16_agu << "           RDC_sel_out       <= 4'd0 ;                                                                                \n";
     r16_agu << "           Mul_sel_out       <= 2'd0 ;                                                                                \n";
     r16_agu << "           RDCsel_cnt_reg    <= 4'd0 ;                                                                                \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   	else begin                                                                                                     \n";
     r16_agu << "           data_cnt_reg      <= data_cnt_wire ;                                                                       \n";
     r16_agu << "           BN_out            <= BN_wire ;                                                                             \n";
     r16_agu << "           BU_mode_sel_out   <= BU_mode_sel_wire ;                                                                    \n";
     r16_agu << "           BU_dc_sel_out     <= BU_dc_sel_wire ;                                                                    \n";
     r16_agu << "           DC_mode_sel_out   <= DC_mode_sel_wire ;                                                                    \n";     
	 r16_agu << "           RDC_sel_out       <= RDC_sel_wire ;                                                                        \n";
     r16_agu << "           Mul_sel_out       <= Mul_sel_wire ;                                                                        \n";
     r16_agu << "           RDCsel_cnt_reg    <= RDCsel_cnt_wire ;                                                                     \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   end                                                                                                                \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << " endmodule                                                                                                            \n";   	 
	 r16_agu.close();	
}
void  CenCtrl::R16_R4_DC(std::string string_in){
	 std::ofstream r16_dc;
     std::string        string_buf = "/R16_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_dc.open(ss.str());	
r16_dc << " `timescale 1 ns/1 ps                                                                         \n";
r16_dc << " module R16_DC(RDC_out0,                                                                      \n";
r16_dc << " 			  RDC_out1,                                                                      \n";
r16_dc << " 			  RDC_out2,                                                                      \n";
r16_dc << " 			  RDC_out3,                                                                      \n";
r16_dc << " 			  RDC_out4,                                                                      \n";
r16_dc << " 			  RDC_out5,                                                                      \n";
r16_dc << " 			  RDC_out6,                                                                      \n";
r16_dc << " 			  RDC_out7,                                                                      \n";
r16_dc << " 			  RDC_out8,                                                                      \n";
r16_dc << " 			  RDC_out9,                                                                      \n";
r16_dc << " 			  RDC_out10,                                                                     \n";
r16_dc << " 			  RDC_out11,                                                                     \n";
r16_dc << " 			  RDC_out12,                                                                     \n";
r16_dc << " 			  RDC_out13,                                                                     \n";
r16_dc << " 			  RDC_out14,                                                                     \n";
r16_dc << " 			  RDC_out15,                                                                     \n";
r16_dc << "               RDC_in0,                                                                       \n";
r16_dc << " 		      RDC_in1,                                                                       \n";
r16_dc << " 			  RDC_in2,                                                                       \n";
r16_dc << " 			  RDC_in3,                                                                       \n";
r16_dc << " 			  RDC_in4,                                                                       \n";
r16_dc << " 			  RDC_in5,                                                                       \n";
r16_dc << " 			  RDC_in6,                                                                       \n";
r16_dc << " 			  RDC_in7,                                                                       \n";
r16_dc << " 			  RDC_in8,                                                                       \n";
r16_dc << " 			  RDC_in9,                                                                       \n";
r16_dc << " 			  RDC_in10,                                                                      \n";
r16_dc << " 			  RDC_in11,                                                                      \n";
r16_dc << " 			  RDC_in12,                                                                      \n";
r16_dc << " 			  RDC_in13,                                                                      \n";
r16_dc << " 			  RDC_in14,                                                                      \n";
r16_dc << " 			  RDC_in15,                                                                      \n";
r16_dc << " 			  RDC_sel,                                                                       \n";
r16_dc << " 			  DC_mode_sel_in,  //for using in radix-4 delay counter                          \n";
r16_dc << "               rst_n,                                                                         \n";
r16_dc << "               clk                                                                            \n";
r16_dc << "               ) ;                                                                            \n";
r16_dc << " parameter P_WIDTH     = 64 ;                                                                 \n";
r16_dc << "                                                                                              \n";
r16_dc << " parameter P_ZERO      = 64'h0 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out15 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in0 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in1 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in2 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in3 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in4 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in5 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in6 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in7 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in8 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in9 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in10 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in11 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in12 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in13 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in14 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in15 ;                                                               \n";
r16_dc << " input [3:0]         RDC_sel ;                                                                \n";
r16_dc << " input [1:0]         DC_mode_sel_in;                                                         \n";
r16_dc << " input               rst_n ;                                                                  \n";
r16_dc << " input               clk ;                                                                    \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_8_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_14_in_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_13_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_out_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D4_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D8_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  RDC_out15 ;                                                             \n";
r16_dc << "                                                                                              \n";
r16_dc << " //for DC_mode_sel ,frist data relocation mode                                                \n";
r16_dc << " wire  [P_WIDTH-1:0]  D4_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_1_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_2_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_3_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D8_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_1_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_2_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_3_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_1_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_2_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D15_3_in_wire ;                                                         \n";
r16_dc << " //for DC_mode_sel ,second data relocation mode                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D2_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_0_in_wire ;                                                         \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D0_wire =   ( DC_mode_sel_in == 2'd2 ) ? RDC_in0 :                                \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd0 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd1 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd2 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd3 )) ? D3_2_in_reg : \n";
r16_dc << "                       (RDC_sel==4'd0)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd1)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd11)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D14_13_in_reg :                                      \n";
r16_dc << " 					                    D15_14_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D1_wire =   ( DC_mode_sel_in == 2'd2 ) ? D1_0_in_reg :                            \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd0 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd1 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd2 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd3 )) ? D2_1_in_reg : \n";
r16_dc << "                       (RDC_sel==4'd0)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd2)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd12)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D13_12_in_reg :                                      \n";
r16_dc << " 					                    D14_13_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D2_wire =   ( DC_mode_sel_in == 2'd2 ) ? D2_1_in_reg :                            \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd0 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd1 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd2 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd3 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd3)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd13)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D12_11_in_reg :                                      \n";
r16_dc << " 					                    D13_12_in_reg ; // RDC_sel==4'd15					 \n";		  
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D3_wire =   ( DC_mode_sel_in == 2'd2 ) ? D3_2_in_reg :                            \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd0 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd1 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd2 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[1:0]==2'd3 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd4)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd14)? D11_10_in_reg :                                      \n";
r16_dc << " 					                    D12_11_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D4_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2))? D4_3_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd5)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D10_9_in_reg :                                       \n";
r16_dc << " 					                    D11_10_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D5_wire =  (( DC_mode_sel_in == 2'd1)|| ( DC_mode_sel_in == 2'd2)) ? D5_4_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd6)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D9_8_in_reg :                                        \n";
r16_dc << " 					                    D10_9_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D6_wire =  (( DC_mode_sel_in == 2'b1) || ( DC_mode_sel_in == 2'd2)) ? D6_5_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd1)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd7)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D8_7_in_reg :                                        \n";
r16_dc << " 					                    D9_8_in_reg ; // RDC_sel==4'd15						 \n";	   
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D7_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2)) ? D7_6_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd2)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd8)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D7_6_in_reg :                                        \n";
r16_dc << " 					                    D8_7_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D8_wire =  (( DC_mode_sel_in == 2'd1 ) || ( DC_mode_sel_in == 2'd2)) ? D8_7_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd3)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd9)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D6_5_in_reg :                                        \n";
r16_dc << " 					                    D7_6_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D9_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2)) ? D9_8_in_reg :\n";
r16_dc << " 	                  (RDC_sel==4'd0)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd4)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd9)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd10)? D1_0_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D5_4_in_reg :                                        \n";
r16_dc << " 					                    D6_5_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D10_wire =  (( DC_mode_sel_in == 2'd1)|| ( DC_mode_sel_in == 2'd2 )) ? D10_9_in_reg :\n";
r16_dc << " 	                   (RDC_sel==4'd0)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd5)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd6)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D15_14_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd11)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd12)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D3_2_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D4_3_in_reg :                                       \n";
r16_dc << " 					                     D5_4_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D11_wire =  (( DC_mode_sel_in == 2'd1)||( DC_mode_sel_in == 2'd2)) ? D11_10_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd6)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd12)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D3_2_in_reg :                                       \n";
r16_dc << " 					                     D4_3_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D12_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2 )) ? D12_11_in_reg :  \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd7)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd13)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D2_1_in_reg :                                       \n";
r16_dc << " 					                     D3_2_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D13_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2)) ? D13_12_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd8)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd14)? D1_0_in_reg :                                       \n";
r16_dc << " 					                     D2_1_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D14_wire = (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2 )) ? D14_13_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd9)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd10)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd11)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D14_13_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D15_14_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? RDC_in0 :                                            \n";
r16_dc << " 					                    D1_0_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign RDC_out15 = (( DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D15_14_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D1_0_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D2_1_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd8)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd9)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd10)? D11_10_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D12_11_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd14)? D15_14_in_reg :                                     \n";
r16_dc << " 					                     RDC_in0 ; // RDC_sel==4'd15                         \n";
r16_dc << "                                                                                              \n";
r16_dc << "     //----------------------------                                                           \n";
r16_dc << " 	assign D1_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in4 : RDC_in1;                     \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	assign D2_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in8 : RDC_in2;                     \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	assign D3_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in12 : RDC_in3;                    \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	assign D4_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in1 :                              \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0) ) ? RDC_in4 :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D5_0_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D6_1_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D7_2_in_reg :  \n";
r16_dc << " 	                                                                              RDC_in4;       \n";
r16_dc << " 	assign D5_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0) ) ? D7_2_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? RDC_in4 :      \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D5_0_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D6_1_in_reg :  \n";
r16_dc << " 	                                                                              D5_0_in_reg;   \n";
r16_dc << " 	assign D6_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in9 : RDC_in6;                         \n";
r16_dc << "                                                                                                  \n";
r16_dc << " 	assign D6_2_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0) ) ? D6_1_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D7_2_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? RDC_in4 :      \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D5_0_in_reg :  \n";
r16_dc << " 	                                                                              D6_1_in_reg;   \n";
r16_dc << " 	assign D7_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in13 : RDC_in7;                        \n";
r16_dc << "                                                                                                  \n";
r16_dc << " 	assign D7_3_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0) ) ? D5_0_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D6_1_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D7_2_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? RDC_in4 :      \n";
r16_dc << " 	                                                                              D7_2_in_reg;   \n";
r16_dc << " 	assign D8_0_in_wire =  (DC_mode_sel_in == 2'd2)  ? RDC_in2 :                                 \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0) ) ? RDC_in8 :      \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D9_0_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D10_1_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D11_2_in_reg : \n";
r16_dc << " 	                                                                              RDC_in8;       \n";
r16_dc << " 	assign D9_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in6 : RDC_in9;                         \n";
r16_dc << "                                                                                                  \n";
r16_dc << " 	assign D9_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0) ) ? D11_2_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? RDC_in8 :      \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D9_0_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D10_1_in_reg : \n";
r16_dc << " 	                                                                              D9_0_in_reg;   \n";
r16_dc << " 	assign D10_2_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0)) ? D10_1_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D11_2_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? RDC_in8 :      \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D9_0_in_reg :  \n";
r16_dc << " 	                                                                              D10_1_in_reg;  \n";
r16_dc << " 	assign D11_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in14 : RDC_in11;                       \n";
r16_dc << "                                                                                                  \n";
r16_dc << " 	assign D11_3_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0)) ? D9_0_in_reg :  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D10_1_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D11_2_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? RDC_in8 :      \n";
r16_dc << " 	                                                                              D11_2_in_reg;  \n";
r16_dc << " 	assign D12_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in3 :                                  \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0))  ? RDC_in12 :     \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D13_0_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D14_1_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D15_2_in_reg : \n";
r16_dc << " 	                                                                              RDC_in12;      \n";
r16_dc << " 	assign D13_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in7 : RDC_in13;                       \n";
r16_dc << "                                                                                                  \n";
r16_dc << " 	assign D13_1_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0)) ? D15_2_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? RDC_in12 :     \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D13_0_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D14_1_in_reg : \n";
r16_dc << " 	                                                                              D13_0_in_reg;  \n";
r16_dc << " 	assign D14_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in11 : RDC_in14;                      \n";
r16_dc << "                                                                                                  \n";
r16_dc << " 	assign D14_2_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0)) ? D14_1_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D15_2_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? RDC_in12 :     \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? D13_0_in_reg : \n";
r16_dc << " 	                                                                              D14_1_in_reg;  \n";
r16_dc << " 	assign D15_3_in_wire = ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd0)) ? D13_0_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd1) ) ? D14_1_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd2) ) ? D15_2_in_reg : \n";
r16_dc << " 	                      ((DC_mode_sel_in == 2'd1) && (RDC_sel[1:0] == 2'd3) ) ? RDC_in12 :     \n";
r16_dc << " 	                                                                              D15_2_in_reg;  \n";
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	always @(posedge clk or negedge rst_n) begin                                             \n";
r16_dc << " 		if(~rst_n) begin                                                                     \n";
r16_dc << " 			D1_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_8_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D10_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_14_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_12_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_13_out_reg <= P_ZERO ;				                                         \n";
r16_dc << " 			RDC_out0 <= P_ZERO ;                                                             \n";
r16_dc << " 			D1_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D1_12_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out1 <= P_ZERO ;                                                             \n";
r16_dc << " 			D2_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D2_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out2 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out3 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D4_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out4 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out5 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out6 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out7 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out8 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out9 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_3_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out10 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out11 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out12 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out13 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 		else begin                                                                           \n";
r16_dc << " 			D1_0_in_reg <= D1_0_in_wire ;                                                    \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_in_reg <= D2_0_in_wire ;                                                    \n";
r16_dc << " 			D2_1_in_reg <= D2_0_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_in_reg <= D3_0_in_wire ;                                                    \n";
r16_dc << " 			D3_1_in_reg <= D3_0_in_reg ;                                                     \n";
r16_dc << " 			D3_2_in_reg <= D3_1_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_in_reg <= D4_0_in_wire ;                                                    \n";
r16_dc << " 			D4_1_in_reg <= D4_0_in_reg ;                                                     \n";
r16_dc << " 			D4_2_in_reg <= D4_1_in_reg ;                                                     \n";
r16_dc << " 			D4_3_in_reg <= D4_2_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_in_reg <= RDC_in5 ;                                                         \n";
r16_dc << " 			D5_1_in_reg <= D5_1_in_wire;                                                     \n";
r16_dc << " 			D5_2_in_reg <= D5_1_in_reg ;                                                     \n";
r16_dc << " 			D5_3_in_reg <= D5_2_in_reg ;                                                     \n";
r16_dc << " 			D5_4_in_reg <= D5_3_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_in_reg <= D6_0_in_wire ;                                                    \n";
r16_dc << " 			D6_1_in_reg <= D6_0_in_reg ;                                                     \n";
r16_dc << " 			D6_2_in_reg <= D6_2_in_wire;                                                     \n";
r16_dc << " 			D6_3_in_reg <= D6_2_in_reg ;                                                     \n";
r16_dc << " 			D6_4_in_reg <= D6_3_in_reg ;                                                     \n";
r16_dc << " 			D6_5_in_reg <= D6_4_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_in_reg <= D7_0_in_wire ;                                                    \n";
r16_dc << " 			D7_1_in_reg <= D7_0_in_reg ;                                                     \n";
r16_dc << " 			D7_2_in_reg <= D7_1_in_reg ;                                                     \n";
r16_dc << " 			D7_3_in_reg <= D7_3_in_wire ;                                                    \n";
r16_dc << " 			D7_4_in_reg <= D7_3_in_reg ;                                                     \n";
r16_dc << " 			D7_5_in_reg <= D7_4_in_reg ;                                                     \n";
r16_dc << " 			D7_6_in_reg <= D7_5_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_in_reg <= D8_0_in_wire ;                                                    \n";
r16_dc << " 			D8_1_in_reg <= D8_0_in_reg ;                                                     \n";
r16_dc << " 			D8_2_in_reg <= D8_1_in_reg ;                                                     \n";
r16_dc << " 			D8_3_in_reg <= D8_2_in_reg ;                                                     \n";
r16_dc << " 			D8_4_in_reg <= D8_3_in_reg ;                                                     \n";
r16_dc << " 			D8_5_in_reg <= D8_4_in_reg ;                                                     \n";
r16_dc << " 			D8_6_in_reg <= D8_5_in_reg ;                                                     \n";
r16_dc << " 			D8_7_in_reg <= D8_6_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_in_reg <= D9_0_in_wire ;                                                    \n";
r16_dc << " 			D9_1_in_reg <= D9_1_in_wire ;                                                    \n";
r16_dc << " 			D9_2_in_reg <= D9_1_in_reg ;                                                     \n";
r16_dc << " 			D9_3_in_reg <= D9_2_in_reg ;                                                     \n";
r16_dc << " 			D9_4_in_reg <= D9_3_in_reg ;                                                     \n";
r16_dc << " 			D9_5_in_reg <= D9_4_in_reg ;                                                     \n";
r16_dc << " 			D9_6_in_reg <= D9_5_in_reg ;                                                     \n";
r16_dc << " 			D9_7_in_reg <= D9_6_in_reg ;                                                     \n";
r16_dc << " 			D9_8_in_reg <= D9_7_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_in_reg <= RDC_in10 ;                                                       \n";
r16_dc << " 			D10_1_in_reg <= D10_0_in_reg ;                                                   \n";
r16_dc << " 			D10_2_in_reg <= D10_2_in_wire ;                                                  \n";
r16_dc << " 			D10_3_in_reg <= D10_2_in_reg ;                                                   \n";
r16_dc << " 			D10_4_in_reg <= D10_3_in_reg ;                                                   \n";
r16_dc << " 			D10_5_in_reg <= D10_4_in_reg ;                                                   \n";
r16_dc << " 			D10_6_in_reg <= D10_5_in_reg ;                                                   \n";
r16_dc << " 			D10_7_in_reg <= D10_6_in_reg ;                                                   \n";
r16_dc << " 			D10_8_in_reg <= D10_7_in_reg ;                                                   \n";
r16_dc << " 			D10_9_in_reg <= D10_8_in_reg ;                                                   \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_in_reg <= D11_0_in_wire ;                                                  \n";
r16_dc << " 			D11_1_in_reg <= D11_0_in_reg ;                                                   \n";
r16_dc << " 			D11_2_in_reg <= D11_1_in_reg ;                                                   \n";
r16_dc << " 			D11_3_in_reg <= D11_3_in_wire ;                                                  \n";
r16_dc << " 			D11_4_in_reg <= D11_3_in_reg ;                                                   \n";
r16_dc << " 			D11_5_in_reg <= D11_4_in_reg ;                                                   \n";
r16_dc << " 			D11_6_in_reg <= D11_5_in_reg ;                                                   \n";
r16_dc << " 			D11_7_in_reg <= D11_6_in_reg ;                                                   \n";
r16_dc << " 			D11_8_in_reg <= D11_7_in_reg ;                                                   \n";
r16_dc << " 			D11_9_in_reg <= D11_8_in_reg ;                                                   \n";
r16_dc << " 			D11_10_in_reg <= D11_9_in_reg ;                                                  \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_in_reg <= D12_0_in_wire ;                                                  \n";
r16_dc << " 			D12_1_in_reg <= D12_0_in_reg ;                                                   \n";
r16_dc << " 			D12_2_in_reg <= D12_1_in_reg ;                                                   \n";
r16_dc << " 			D12_3_in_reg <= D12_2_in_reg ;                                                   \n";
r16_dc << " 			D12_4_in_reg <= D12_3_in_reg ;                                                   \n";
r16_dc << " 			D12_5_in_reg <= D12_4_in_reg ;                                                   \n";
r16_dc << " 			D12_6_in_reg <= D12_5_in_reg ;                                                   \n";
r16_dc << " 			D12_7_in_reg <= D12_6_in_reg ;                                                   \n";
r16_dc << " 			D12_8_in_reg <= D12_7_in_reg ;                                                   \n";
r16_dc << " 			D12_9_in_reg <= D12_8_in_reg ;                                                   \n";
r16_dc << " 			D12_10_in_reg <= D12_9_in_reg ;                                                  \n";
r16_dc << " 			D12_11_in_reg <= D12_10_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_in_reg <= D13_0_in_wire ;                                                  \n";
r16_dc << " 			D13_1_in_reg <= D13_1_in_wire ;                                                  \n";
r16_dc << " 			D13_2_in_reg <= D13_1_in_reg ;                                                   \n";
r16_dc << " 			D13_3_in_reg <= D13_2_in_reg ;                                                   \n";
r16_dc << " 			D13_4_in_reg <= D13_3_in_reg ;                                                   \n";
r16_dc << " 			D13_5_in_reg <= D13_4_in_reg ;                                                   \n";
r16_dc << " 			D13_6_in_reg <= D13_5_in_reg ;                                                   \n";
r16_dc << " 			D13_7_in_reg <= D13_6_in_reg ;                                                   \n";
r16_dc << " 			D13_8_in_reg <= D13_7_in_reg ;                                                   \n";
r16_dc << " 			D13_9_in_reg <= D13_8_in_reg ;                                                   \n";
r16_dc << " 			D13_10_in_reg <= D13_9_in_reg ;                                                  \n";
r16_dc << " 			D13_11_in_reg <= D13_10_in_reg ;                                                 \n";
r16_dc << " 			D13_12_in_reg <= D13_11_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D14_0_in_reg <= D14_0_in_wire ;                                                  \n";
r16_dc << " 			D14_1_in_reg <= D14_0_in_reg ;                                                   \n";
r16_dc << " 			D14_2_in_reg <= D14_2_in_wire ;                                                  \n";
r16_dc << " 			D14_3_in_reg <= D14_2_in_reg ;                                                   \n";
r16_dc << " 			D14_4_in_reg <= D14_3_in_reg ;                                                   \n";
r16_dc << " 			D14_5_in_reg <= D14_4_in_reg ;                                                   \n";
r16_dc << " 			D14_6_in_reg <= D14_5_in_reg ;                                                   \n";
r16_dc << " 			D14_7_in_reg <= D14_6_in_reg ;                                                   \n";
r16_dc << " 			D14_8_in_reg <= D14_7_in_reg ;                                                   \n";
r16_dc << " 			D14_9_in_reg <= D14_8_in_reg ;                                                   \n";
r16_dc << " 			D14_10_in_reg <= D14_9_in_reg ;                                                  \n";
r16_dc << " 			D14_11_in_reg <= D14_10_in_reg ;                                                 \n";
r16_dc << " 			D14_12_in_reg <= D14_11_in_reg ;                                                 \n";
r16_dc << " 			D14_13_in_reg <= D14_12_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D15_0_in_reg <= RDC_in15 ;                                                       \n";
r16_dc << " 			D15_1_in_reg <= D15_0_in_reg ;                                                   \n";
r16_dc << " 			D15_2_in_reg <= D15_1_in_reg ;                                                   \n";
r16_dc << " 			D15_3_in_reg <= D15_3_in_wire ;                                                  \n";
r16_dc << " 			D15_4_in_reg <= D15_3_in_reg ;                                                   \n";
r16_dc << " 			D15_5_in_reg <= D15_4_in_reg ;                                                   \n";
r16_dc << " 			D15_6_in_reg <= D15_5_in_reg ;                                                   \n";
r16_dc << " 			D15_7_in_reg <= D15_6_in_reg ;                                                   \n";
r16_dc << " 			D15_8_in_reg <= D15_7_in_reg ;                                                   \n";
r16_dc << " 			D15_9_in_reg <= D15_8_in_reg ;                                                   \n";
r16_dc << " 			D15_10_in_reg <= D15_9_in_reg ;                                                  \n";
r16_dc << " 			D15_11_in_reg <= D15_10_in_reg ;                                                 \n";
r16_dc << " 			D15_12_in_reg <= D15_11_in_reg ;                                                 \n";
r16_dc << " 			D15_13_in_reg <= D15_12_in_reg ;                                                 \n";
r16_dc << " 			D15_14_in_reg <= D15_13_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= D0_wire ;                                                        \n";
r16_dc << " 			D0_1_out_reg <= D0_0_out_reg ;                                                   \n";
r16_dc << " 			D0_2_out_reg <= D0_1_out_reg ;                                                   \n";
r16_dc << " 			D0_3_out_reg <= D0_2_out_reg ;                                                   \n";
r16_dc << " 			D0_4_out_reg <= D0_3_out_reg ;                                                   \n";
r16_dc << " 			D0_5_out_reg <= D0_4_out_reg ;                                                   \n";
r16_dc << " 			D0_6_out_reg <= D0_5_out_reg ;                                                   \n";
r16_dc << " 			D0_7_out_reg <= D0_6_out_reg ;                                                   \n";
r16_dc << " 			D0_8_out_reg <= D0_7_out_reg ;                                                   \n";
r16_dc << " 			D0_9_out_reg <= D0_8_out_reg ;                                                   \n";
r16_dc << " 			D0_10_out_reg <= D0_9_out_reg ;                                                  \n";
r16_dc << " 			D0_11_out_reg <= D0_10_out_reg ;                                                 \n";
r16_dc << " 			D0_12_out_reg <= D0_11_out_reg ;                                                 \n";
r16_dc << " 			D0_13_out_reg <= D0_12_out_reg ;                                                 \n";
r16_dc << " 			RDC_out0 <= D0_13_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D1_0_out_reg <= D1_wire ;                                                        \n";
r16_dc << " 			D1_1_out_reg <= D1_0_out_reg ;                                                   \n";
r16_dc << " 			D1_2_out_reg <= D1_1_out_reg ;                                                   \n";
r16_dc << " 			D1_3_out_reg <= D1_2_out_reg ;                                                   \n";
r16_dc << " 			D1_4_out_reg <= D1_3_out_reg ;                                                   \n";
r16_dc << " 			D1_5_out_reg <= D1_4_out_reg ;                                                   \n";
r16_dc << " 			D1_6_out_reg <= D1_5_out_reg ;                                                   \n";
r16_dc << " 			D1_7_out_reg <= D1_6_out_reg ;                                                   \n";
r16_dc << " 			D1_8_out_reg <= D1_7_out_reg ;                                                   \n";
r16_dc << " 			D1_9_out_reg <= D1_8_out_reg ;                                                   \n";
r16_dc << " 			D1_10_out_reg <= D1_9_out_reg ;                                                  \n";
r16_dc << " 			D1_11_out_reg <= D1_10_out_reg ;                                                 \n";
r16_dc << " 			D1_12_out_reg <= D1_11_out_reg ;                                                 \n";
r16_dc << " 			RDC_out1 <= D1_12_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_out_reg <= D2_wire ;                                                        \n";
r16_dc << " 			D2_1_out_reg <= D2_0_out_reg ;                                                   \n";
r16_dc << " 			D2_2_out_reg <= D2_1_out_reg ;                                                   \n";
r16_dc << " 			D2_3_out_reg <= D2_2_out_reg ;                                                   \n";
r16_dc << " 			D2_4_out_reg <= D2_3_out_reg ;                                                   \n";
r16_dc << " 			D2_5_out_reg <= D2_4_out_reg ;                                                   \n";
r16_dc << " 			D2_6_out_reg <= D2_5_out_reg ;                                                   \n";
r16_dc << " 			D2_7_out_reg <= D2_6_out_reg ;                                                   \n";
r16_dc << " 			D2_8_out_reg <= D2_7_out_reg ;                                                   \n";
r16_dc << " 			D2_9_out_reg <= D2_8_out_reg ;                                                   \n";
r16_dc << " 			D2_10_out_reg <= D2_9_out_reg ;                                                  \n";
r16_dc << " 			D2_11_out_reg <= D2_10_out_reg ;                                                 \n";
r16_dc << " 			RDC_out2 <= D2_11_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= D3_wire ;                                                        \n";
r16_dc << " 			D3_1_out_reg <= D3_0_out_reg ;                                                   \n";
r16_dc << " 			D3_2_out_reg <= D3_1_out_reg ;                                                   \n";
r16_dc << " 			D3_3_out_reg <= D3_2_out_reg ;                                                   \n";
r16_dc << " 			D3_4_out_reg <= D3_3_out_reg ;                                                   \n";
r16_dc << " 			D3_5_out_reg <= D3_4_out_reg ;                                                   \n";
r16_dc << " 			D3_6_out_reg <= D3_5_out_reg ;                                                   \n";
r16_dc << " 			D3_7_out_reg <= D3_6_out_reg ;                                                   \n";
r16_dc << " 			D3_8_out_reg <= D3_7_out_reg ;                                                   \n";
r16_dc << " 			D3_9_out_reg <= D3_8_out_reg ;                                                   \n";
r16_dc << " 			D3_10_out_reg <= D3_9_out_reg ;                                                  \n";
r16_dc << " 			RDC_out3 <= D3_10_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= D4_wire ;                                                        \n";
r16_dc << " 			D4_1_out_reg <= D4_0_out_reg ;                                                   \n";
r16_dc << " 			D4_2_out_reg <= D4_1_out_reg ;                                                   \n";
r16_dc << " 			D4_3_out_reg <= D4_2_out_reg ;                                                   \n";
r16_dc << " 			D4_4_out_reg <= D4_3_out_reg ;                                                   \n";
r16_dc << " 			D4_5_out_reg <= D4_4_out_reg ;                                                   \n";
r16_dc << " 			D4_6_out_reg <= D4_5_out_reg ;                                                   \n";
r16_dc << " 			D4_7_out_reg <= D4_6_out_reg ;                                                   \n";
r16_dc << " 			D4_8_out_reg <= D4_7_out_reg ;                                                   \n";
r16_dc << " 			D4_9_out_reg <= D4_8_out_reg ;                                                   \n";
r16_dc << " 			RDC_out4 <= D4_9_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= D5_wire ;                                                        \n";
r16_dc << " 			D5_1_out_reg <= D5_0_out_reg ;                                                   \n";
r16_dc << " 			D5_2_out_reg <= D5_1_out_reg ;                                                   \n";
r16_dc << " 			D5_3_out_reg <= D5_2_out_reg ;                                                   \n";
r16_dc << " 			D5_4_out_reg <= D5_3_out_reg ;                                                   \n";
r16_dc << " 			D5_5_out_reg <= D5_4_out_reg ;                                                   \n";
r16_dc << " 			D5_6_out_reg <= D5_5_out_reg ;                                                   \n";
r16_dc << " 			D5_7_out_reg <= D5_6_out_reg ;                                                   \n";
r16_dc << " 			D5_8_out_reg <= D5_7_out_reg ;                                                   \n";
r16_dc << " 			RDC_out5 <= D5_8_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= D6_wire ;                                                        \n";
r16_dc << " 			D6_1_out_reg <= D6_0_out_reg ;                                                   \n";
r16_dc << " 			D6_2_out_reg <= D6_1_out_reg ;                                                   \n";
r16_dc << " 			D6_3_out_reg <= D6_2_out_reg ;                                                   \n";
r16_dc << " 			D6_4_out_reg <= D6_3_out_reg ;                                                   \n";
r16_dc << " 			D6_5_out_reg <= D6_4_out_reg ;                                                   \n";
r16_dc << " 			D6_6_out_reg <= D6_5_out_reg ;                                                   \n";
r16_dc << " 			D6_7_out_reg <= D6_6_out_reg ;                                                   \n";
r16_dc << " 			RDC_out6 <= D6_7_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= D7_wire ;                                                        \n";
r16_dc << " 			D7_1_out_reg <= D7_0_out_reg ;                                                   \n";
r16_dc << " 			D7_2_out_reg <= D7_1_out_reg ;                                                   \n";
r16_dc << " 			D7_3_out_reg <= D7_2_out_reg ;                                                   \n";
r16_dc << " 			D7_4_out_reg <= D7_3_out_reg ;                                                   \n";
r16_dc << " 			D7_5_out_reg <= D7_4_out_reg ;                                                   \n";
r16_dc << " 			D7_6_out_reg <= D7_5_out_reg ;                                                   \n";
r16_dc << " 			RDC_out7 <= D7_6_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= D8_wire ;                                                        \n";
r16_dc << " 			D8_1_out_reg <= D8_0_out_reg ;                                                   \n";
r16_dc << " 			D8_2_out_reg <= D8_1_out_reg ;                                                   \n";
r16_dc << " 			D8_3_out_reg <= D8_2_out_reg ;                                                   \n";
r16_dc << " 			D8_4_out_reg <= D8_3_out_reg ;                                                   \n";
r16_dc << " 			D8_5_out_reg <= D8_4_out_reg ;                                                   \n";
r16_dc << " 			RDC_out8 <= D8_5_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= D9_wire ;                                                        \n";
r16_dc << " 			D9_1_out_reg <= D9_0_out_reg ;                                                   \n";
r16_dc << " 			D9_2_out_reg <= D9_1_out_reg ;                                                   \n";
r16_dc << " 			D9_3_out_reg <= D9_2_out_reg ;                                                   \n";
r16_dc << " 			D9_4_out_reg <= D9_3_out_reg ;                                                   \n";
r16_dc << " 			RDC_out9 <= D9_4_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= D10_wire ;                                                      \n";
r16_dc << " 			D10_1_out_reg <= D10_0_out_reg ;                                                 \n";
r16_dc << " 			D10_2_out_reg <= D10_1_out_reg ;                                                 \n";
r16_dc << " 			D10_3_out_reg <= D10_2_out_reg ;                                                 \n";
r16_dc << " 			RDC_out10 <= D10_3_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= D11_wire ;                                                      \n";
r16_dc << " 			D11_1_out_reg <= D11_0_out_reg ;                                                 \n";
r16_dc << " 			D11_2_out_reg <= D11_1_out_reg ;                                                 \n";
r16_dc << " 			RDC_out11 <= D11_2_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= D12_wire ;                                                      \n";
r16_dc << " 			D12_1_out_reg <= D12_0_out_reg ;                                                 \n";
r16_dc << " 			RDC_out12 <= D12_1_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= D13_wire ;                                                      \n";
r16_dc << " 			RDC_out13 <= D13_0_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= D14_wire ;                                                          \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 	end                                                                                      \n";
r16_dc << "                                                                                              \n";
r16_dc << " endmodule                                                                                    \n";
	 r16_dc.close();
}

//Mixed radix-16 ,final stage using radix-8
void CenCtrl::Ctrl_PipeReg1_r16_r8(std::string string_in){
	 std::ofstream ctrl_pipereg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 ctrl_pipereg1.open(ss.str());	
     ctrl_pipereg1<< " `timescale 1 ns/1 ps                                               \n";
     ctrl_pipereg1<< " module Ctrl_PipeReg1(mode_sel_Dout,                                \n";
     ctrl_pipereg1<< " 				        Mul_sel_Dout,                                 \n";
     ctrl_pipereg1<< " 				        RDC_sel_Dout,                                 \n";
     ctrl_pipereg1<< " 				        DC_mode_sel_Dout,                             \n";
     ctrl_pipereg1<< " 				        BU_mode_sel_Dout,                             \n";
     ctrl_pipereg1<< " 				        BU_dc_sel_Dout,                               \n";
     ctrl_pipereg1<< "                      mode_sel_in,                                  \n";
     ctrl_pipereg1<< " 			            Mul_sel_in,                                   \n";
     ctrl_pipereg1<< " 			            RDC_sel_in,                                   \n";
     ctrl_pipereg1<< " 			            DC_mode_sel_in,                               \n";
     ctrl_pipereg1<< " 			            BU_mode_sel_in,                               \n";
     ctrl_pipereg1<< " 			            BU_dc_sel_in,                                 \n";
     ctrl_pipereg1<< "                      rst_n,                                        \n";
     ctrl_pipereg1<< "                      clk                                           \n";
     ctrl_pipereg1<< "                      ) ;                                           \n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< " parameter ROMA_WIDTH  = " << ROM_width << ";\n";
     ctrl_pipereg1<< " parameter ROMA_ZERO   = " << ROM_width << "'h0 ;\n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< " output                  mode_sel_Dout ;                            \n";
     ctrl_pipereg1<< " output [1:0]            Mul_sel_Dout ;                             \n";
     ctrl_pipereg1<< " output [3:0]            RDC_sel_Dout ;                             \n";
     ctrl_pipereg1<< " output [1:0]            DC_mode_sel_Dout ;                         \n";
     ctrl_pipereg1<< " output                  BU_mode_sel_Dout ;                         \n";
     ctrl_pipereg1<< " output                  BU_dc_sel_Dout ;                           \n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< " input                   mode_sel_in ;                              \n";
     ctrl_pipereg1<< " input  [1:0]            Mul_sel_in ;                               \n";
     ctrl_pipereg1<< " input  [3:0]            RDC_sel_in ;                               \n";
     ctrl_pipereg1<< " input  [1:0]            DC_mode_sel_in ;                           \n";
     ctrl_pipereg1<< " input                   BU_mode_sel_in ;                           \n";
     ctrl_pipereg1<< " input                   BU_dc_sel_in ;                             \n";
     ctrl_pipereg1<< " input                   rst_n ;                                    \n";
     ctrl_pipereg1<< " input                   clk ;                                      \n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< " reg                  mode_sel_D0reg ;                              \n";
     ctrl_pipereg1<< " reg                  mode_sel_D1reg ;                              \n";
     ctrl_pipereg1<< " reg                  mode_sel_D2reg ;                              \n";
     ctrl_pipereg1<< " reg                  mode_sel_Dout ;                               \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D0reg ;                               \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D1reg ;                               \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D2reg ;                               \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_Dout ;                                \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D0reg ;                               \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D1reg ;                               \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D2reg ;                               \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D3reg ;                               \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D4reg ;                               \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D5reg ;                               \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_Dout ;                                \n";
	 //---------------------------------------------------------------------
     ctrl_pipereg1<< " reg                  BU_mode_sel_D0reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D1reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D2reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D3reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D4reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D5reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D6reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D7reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D8reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D9reg ;                           \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D10reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D11reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D12reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D13reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D14reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D15reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D16reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D17reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D18reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D19reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D20reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D21reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D22reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D23reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D24reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D25reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D26reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D27reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D28reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D29reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D30reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D31reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D32reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D33reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D34reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D35reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D36reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D37reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D38reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D39reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D40reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D41reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D42reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D43reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D44reg ;                          \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D45reg ;                          \n";	 
     ctrl_pipereg1<< " reg                  BU_mode_sel_Dout  ;                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D0reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D1reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D2reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D3reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D4reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D5reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D6reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D7reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D8reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D9reg ;                             \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D10reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D11reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D12reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D13reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D14reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D15reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D16reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D17reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D18reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D19reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D20reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D21reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D22reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D23reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D24reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D25reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D26reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D27reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D28reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D29reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D30reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D31reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D32reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D33reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D34reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D35reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D36reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D37reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D38reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D39reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D40reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D41reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D42reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D43reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D44reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D45reg ;                            \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_Dout  ;                             \n";	 	 
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D0reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D1reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D2reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D3reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D4reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D5reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D6reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D7reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D8reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D9reg ;                           \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D10reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D11reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D12reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D13reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D14reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D15reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D16reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D17reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D18reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D19reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D20reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D21reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D22reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D23reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D24reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D25reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D26reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D27reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D28reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D29reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D30reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D31reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D32reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D33reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D34reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D35reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D36reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D37reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D38reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D39reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D40reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D41reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D42reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D43reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D44reg ;                          \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D45reg ;                          \n";	 
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_Dout  ;                           \n";
	 //---------------------------------------------------------------------
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n";
     ctrl_pipereg1<< " 	always @(posedge clk or negedge rst_n) begin                      \n";
     ctrl_pipereg1<< " 		if(~rst_n) begin                                              \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg      <= 1'b0;                              \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg      <= 1'b0;                              \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg      <= 1'b0;                              \n";
     ctrl_pipereg1<< " 			mode_sel_Dout       <= 1'b0;                              \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg       <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg       <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg       <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout        <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg       <= 4'd0;                              \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg       <= 4'd0;                              \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg       <= 4'd0;                              \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg       <= 4'd0;                              \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg       <= 4'd0;                              \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg       <= 4'd0;                              \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout        <= 4'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= 2'd0;                              \n";	 	 
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= 2'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg   <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg  <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg  <= 1'd0;                              \n";		 
     ctrl_pipereg1<< " 			BU_mode_sel_Dout    <= 1'd0;                              \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg    <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg   <= 1'd0;                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg   <= 1'd0;                               \n";	 
     ctrl_pipereg1<< " 			BU_dc_sel_Dout     <= 1'd0;                               \n";	 
     ctrl_pipereg1<< " 		end                                                           \n";
     ctrl_pipereg1<< " 		else begin                                                    \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg <= mode_sel_in ;                           \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg <= mode_sel_D0reg ;                        \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg <= mode_sel_D1reg ;                        \n";
     ctrl_pipereg1<< " 			mode_sel_Dout <= mode_sel_D2reg ;                         \n";
     ctrl_pipereg1<< " 			//                                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg <= Mul_sel_in ;                             \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                          \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                          \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout <= Mul_sel_D2reg ;                           \n";
     ctrl_pipereg1<< " 			//                                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg <= RDC_sel_in ;                             \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                          \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                          \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                          \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                          \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                          \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout <= RDC_sel_D5reg ;                           \n";
     ctrl_pipereg1<< " 			//                                                        \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;                    \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;                 \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;                \n";
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;                \n";
     ctrl_pipereg1<< " 			//                                                        \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg <= BU_mode_sel_in;                      \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg <= BU_mode_sel_D0reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg <= BU_mode_sel_D1reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg <= BU_mode_sel_D2reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg <= BU_mode_sel_D3reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg <= BU_mode_sel_D4reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg <= BU_mode_sel_D5reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg <= BU_mode_sel_D6reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg <= BU_mode_sel_D7reg;                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg  <= BU_mode_sel_D8reg;                  \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg <= BU_mode_sel_D9reg;                  \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg <= BU_mode_sel_D10reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg <= BU_mode_sel_D11reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg <= BU_mode_sel_D12reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg <= BU_mode_sel_D13reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg <= BU_mode_sel_D14reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg <= BU_mode_sel_D15reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg <= BU_mode_sel_D16reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg <= BU_mode_sel_D17reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg <= BU_mode_sel_D18reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg <= BU_mode_sel_D19reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg <= BU_mode_sel_D20reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg <= BU_mode_sel_D21reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg <= BU_mode_sel_D22reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg <= BU_mode_sel_D23reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg <= BU_mode_sel_D24reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg <= BU_mode_sel_D25reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg <= BU_mode_sel_D26reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg <= BU_mode_sel_D27reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg <= BU_mode_sel_D28reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg <= BU_mode_sel_D29reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg <= BU_mode_sel_D30reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg <= BU_mode_sel_D31reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg <= BU_mode_sel_D32reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg <= BU_mode_sel_D33reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg <= BU_mode_sel_D34reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg <= BU_mode_sel_D35reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg <= BU_mode_sel_D36reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg <= BU_mode_sel_D37reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg <= BU_mode_sel_D38reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg <= BU_mode_sel_D39reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg <= BU_mode_sel_D40reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg <= BU_mode_sel_D41reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg <= BU_mode_sel_D42reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg <= BU_mode_sel_D43reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg <= BU_mode_sel_D44reg;                 \n";
     ctrl_pipereg1<< " 			BU_mode_sel_Dout   <= BU_mode_sel_D45reg;                 \n";
     ctrl_pipereg1<< " 		    //                                                        \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg    <= BU_dc_sel_in;                       \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg    <= BU_dc_sel_D0reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg    <= BU_dc_sel_D1reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg    <= BU_dc_sel_D2reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg    <= BU_dc_sel_D3reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg    <= BU_dc_sel_D4reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg    <= BU_dc_sel_D5reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg    <= BU_dc_sel_D6reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg    <= BU_dc_sel_D7reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg    <= BU_dc_sel_D8reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg   <= BU_dc_sel_D9reg;                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg   <= BU_dc_sel_D10reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg   <= BU_dc_sel_D11reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg   <= BU_dc_sel_D12reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg   <= BU_dc_sel_D13reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg   <= BU_dc_sel_D14reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg   <= BU_dc_sel_D15reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg   <= BU_dc_sel_D16reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg   <= BU_dc_sel_D17reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg   <= BU_dc_sel_D18reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg   <= BU_dc_sel_D19reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg   <= BU_dc_sel_D20reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg   <= BU_dc_sel_D21reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg   <= BU_dc_sel_D22reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg   <= BU_dc_sel_D23reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg   <= BU_dc_sel_D24reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg   <= BU_dc_sel_D25reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg   <= BU_dc_sel_D26reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg   <= BU_dc_sel_D27reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg   <= BU_dc_sel_D28reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg   <= BU_dc_sel_D29reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg   <= BU_dc_sel_D30reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg   <= BU_dc_sel_D31reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg   <= BU_dc_sel_D32reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg   <= BU_dc_sel_D33reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg   <= BU_dc_sel_D34reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg   <= BU_dc_sel_D35reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg   <= BU_dc_sel_D36reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg   <= BU_dc_sel_D37reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg   <= BU_dc_sel_D38reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg   <= BU_dc_sel_D39reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg   <= BU_dc_sel_D40reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg   <= BU_dc_sel_D41reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg   <= BU_dc_sel_D42reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg   <= BU_dc_sel_D43reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg   <= BU_dc_sel_D44reg;                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_Dout     <= BU_dc_sel_D45reg;                   \n";	 
     ctrl_pipereg1<< " 		end                                                           \n";
     ctrl_pipereg1<< " 	end                                                               \n";
     ctrl_pipereg1<< "                                                                    \n";
     ctrl_pipereg1<< " endmodule                                                          \n";
	 ctrl_pipereg1.close();
}
void CenCtrl::R16_R8_AGU(std::string string_in){
	 std::ofstream r16_agu;
     std::string        string_buf = "/R16_AGU.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_agu.open(ss.str());
     r16_agu << " `timescale 1 ns/1 ps                                \n";
     r16_agu << " module R16_AGU(BN_out,                              \n";
     r16_agu << "                MA,                                  \n";
     r16_agu << "                ROMA,                                \n";
     r16_agu << "                Mul_sel_out,                         \n";
     r16_agu << "                RDC_sel_out,                         \n";
     r16_agu << "                data_cnt_reg,                        \n";
     r16_agu << "                BU_mode_sel_out,//for BU control signal        \n";
     r16_agu << "                BU_dc_sel_out,//for BU control signal        \n";
     r16_agu << "                DC_mode_sel_out,//for raidx-2 delay commutator \n";
     r16_agu << "                mode_sel_in,                         \n";
     r16_agu << "                rc_sel_in,                           \n";
     r16_agu << "                AGU_en,                              \n";
     r16_agu << "                wrfd_en_in,                          \n";
     r16_agu << "                rst_n,                               \n";
     r16_agu << "                clk                                  \n";
     r16_agu << "                ) ;                                  \n";
     r16_agu << " parameter A_WIDTH     = " << addr_width        << ";\n";
     r16_agu << " parameter DC_WIDTH    = " << data_cnt_width    << ";\n";
     r16_agu << " parameter BC_WIDTH    = " << BU_counter_width  << ";\n";
     r16_agu << " parameter SC_WIDTH    = " << stage_width       << ";\n";
     r16_agu << " parameter ROMA_WIDTH  = " << ROM_width         << ";\n";
     r16_agu << " \n";
     r16_agu << " parameter DC_ZERO   = " << data_cnt_width << "'h0 ;\n";
     r16_agu << " parameter ROMA_ZERO = " << ROM_width      << "'h0 ;\n";
     r16_agu << " \n";
	 //modify part
	 for(int i=0; i < No_stage ;i++){ 
         r16_agu << "parameter S" << i << "      = " << stage_width << "'d" << i <<"; \n";
	 }
     r16_agu << "\n";
     r16_agu << " parameter DCNT_V1    = " << data_cnt_width << "'d" << FFT_dc[No_stage-1]  <<"; //data counter value1 for data_cnt_wire      \n";
     r16_agu << " parameter DCNT_V2    = " << data_cnt_width << "'d" << ceil((double)m/radix) + 4 <<"; //data counter value2 for data_cnt_wire      \n";
     for(int j=0; j < (radix-2);j++){
		 r16_agu << "  parameter DCNT_FS" << (j+1)<<" = " << data_cnt_width << "'d" << DCNT_FS[j] <<";\n";
	 }
     r16_agu << " \n";
     r16_agu << " parameter DCNT_BP1 = "<< DCNT_BP1 << " ;\n";
     r16_agu << " parameter DCNT_BP2 = "<< DCNT_BP2 << " ;\n";
     r16_agu << " parameter DCNT_BP3 = "<< DCNT_BP3 << " ;\n";
     r16_agu << " parameter DCNT_BP4 = "<< DCNT_BP4 << " ;\n";
     r16_agu << "\n";
     r16_agu << "\n";
     r16_agu << " output                  BN_out ;                                    \n";
     r16_agu << " output [A_WIDTH-1:0]    MA ;                                        \n";
     r16_agu << " output [ROMA_WIDTH-1:0] ROMA ;                                      \n";
     r16_agu << " output [1:0]            Mul_sel_out ;                               \n";
     r16_agu << " output [3:0]            RDC_sel_out ;                               \n";
     r16_agu << " output [DC_WIDTH-1:0]   data_cnt_reg ;                              \n";
     r16_agu << " output [1:0]            DC_mode_sel_out ;                           \n";
     r16_agu << " output                  BU_mode_sel_out ;                           \n";
     r16_agu << " output                  BU_dc_sel_out ;                             \n";
     r16_agu << "                                                                     \n";
     r16_agu << " input                   mode_sel_in ;                               \n";
     r16_agu << " input                   rc_sel_in ;                                 \n";
     r16_agu << " input                   AGU_en ;                                    \n";
     r16_agu << " input                   wrfd_en_in ;                                \n";
     r16_agu << " input                   rst_n ;                                     \n";
     r16_agu << " input                   clk ;                                       \n";
     r16_agu << "                                                                     \n";
     r16_agu << "                                                                     \n";
     r16_agu << " reg   [DC_WIDTH-1:0] data_cnt_reg ; // data counter                 \n";
     r16_agu << " reg   [3:0]          RDCsel_cnt_reg ; // RDC select counter         \n";
     r16_agu << " reg                  BN_out ;                                       \n";
     r16_agu << " reg   [3:0]          RDC_sel_out ;                                  \n";
     r16_agu << " reg   [1:0]          Mul_sel_out ;                                  \n";
     r16_agu << " reg   [1:0]          DC_mode_sel_out ;                              \n";
     r16_agu << " reg                  BU_mode_sel_out ;                              \n";
     r16_agu << " reg                  BU_dc_sel_out ;                                \n";
     r16_agu << "                                                                     \n";
     r16_agu << " wire  [DC_WIDTH-1:0] data_cnt_wire ;                                \n";
     r16_agu << " wire  [3:0]          RDCsel_cnt_wire ;                              \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_wire ; // butterfly counter                 \n";
	 r16_agu << " wire  [BC_WIDTH-1:0] BC_REORDER_wire ; // butterfly counter         \n";
     // number of wire xor_wire change with fft_point
	 unsigned long  NO_xorwire; //number of  xor wire  
	 NO_xorwire  = DCNT_BP3 - DCNT_BP2;
	 for(int i=0;i < NO_xorwire;i++){
         r16_agu << " wire                 xor_d"<< i << "_wire;\n";
	 }
     r16_agu << " wire  [SC_WIDTH-1:0] SC_wire ; // stage counter \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BC_RR_wire ;               \n";
     r16_agu << " wire                 BN_wire ;                  \n";
     r16_agu << " wire [3:0]           RDC_sel_wire ;             \n";
     r16_agu << " wire [1:0]           Mul_sel_wire ;             \n";
     r16_agu << " wire [1:0]           DC_mode_sel_wire ;                              \n";
     r16_agu << " wire                 BU_mode_sel_wire ;                              \n";	 
     r16_agu << " wire                 BU_dc_sel_wire ;                                \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " wire  [BC_WIDTH-1:0] BR_BC_wire ;                                                                             \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign data_cnt_wire = (((AGU_en==1'd1)&&(data_cnt_reg==DCNT_V1))||                                         \n";
     r16_agu << "                           ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg==DCNT_V2)))?                      \n";
     r16_agu << "                           DC_ZERO : (AGU_en==1'd1)?\n";
     r16_agu << "                           (data_cnt_reg + 1'd1) : data_cnt_reg ;                                              \n";
     r16_agu << "                                                                                                               \n";
     r16_agu << " 	//                                                                                                          \n";
     r16_agu << "   assign RDCsel_cnt_wire = (((AGU_en==1'd1)&&(data_cnt_reg==DCNT_V1))||                                       \n";
     r16_agu << "                             ((rc_sel_in==1'd1)&&(AGU_en==1'd1)&&(data_cnt_reg==DCNT_V2)))?                     \n";
     r16_agu << "                             4'd0 : ((AGU_en==1'd1)||(wrfd_en_in==1'd1))?\n";
     r16_agu << "                             (RDCsel_cnt_reg + 1'd1) : RDCsel_cnt_reg ;                                         \n";
     r16_agu << " 	                                                                                                            \n";
     //*************************************************************************
	 r16_agu << " 	// for Gray code 	 \n";
	 for(int k=0;k < NO_xorwire; k++){
	 r16_agu << "   assign xor_d" << k <<"_wire = data_cnt_reg["<<(DCNT_BP3 - k)<<"]^data_cnt_reg["<<(DCNT_BP3 - k - 1)<<"];\n";	 
	 } 
     r16_agu << "\n";
     r16_agu << "   assign BC_wire = (rc_sel_in==1'd1)?                                                  \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],data_cnt_reg[DCNT_BP3:DCNT_BP2]}):       \n";
     r16_agu << "                    ({data_cnt_reg[DCNT_BP1:0],                                         \n";
     r16_agu << "                      data_cnt_reg[DCNT_BP3],                                           \n";
     for(int l=0;l<NO_xorwire;l++){
	     if(l!=(NO_xorwire-1))r16_agu << "                      xor_d"<< l <<"_wire,\n";
         else                 r16_agu << "                      xor_d"<< l <<"_wire\n";	 
	 }
     r16_agu << "                       }) ;\n";
     r16_agu << "\n";
     //**********************************************************************
     // need to modify 2020/03/23
     //*********************************************************************
	 r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign SC_wire = data_cnt_reg[DC_WIDTH-1:DCNT_BP4] ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Barrel shifter, rc_sel_in=1, right rotate 4-bit                                                                 \n";
     r16_agu << "   assign BC_RR_wire = ";
	 //***************************************************************************************
	 //need to modify
	 //***************************************************************************************
     unsigned long RR_tmp;
     unsigned long s;
     unsigned long fs_rr_bits; //final state is in order to read data from sram
	 //data relocation for NTT Output ,right shift bits
     int    NTT_OUT_RSB;
	 int    number_of_group;
	 double relocation_difference;
	
	 number_of_group  = (int) fft_point / (radix * radix);
	 relocation_difference = (double)number_of_group / 4;
	 NTT_OUT_RSB = (int)log2(relocation_difference);
     //final state bc right shift // final state is after INTT computing state
     s = DCNT_BP1 + 1; //radix bit size
     fs_rr_bits = s * (No_stage -3);
     for(unsigned long i=0; i < (No_stage);i++){
        if( i == (No_stage -2))RR_tmp = s * i - 1;
        else RR_tmp = s * i;	 
	    
        if(i==0) {
            if(No_stage < 4) r16_agu << "((SC_wire == S" << i << ")||(SC_wire == S"<< (No_stage-1) <<"))? BC_wire:\n";
            else r16_agu << "((SC_wire == S" << i << ")||((SC_wire == S"<< (No_stage-1) <<") && (mode_sel_in == 1'b1)))? BC_wire:\n";	  
        }
        else {
			    if( i == (No_stage - 1))r16_agu << "                       (((SC_wire == S"<< (No_stage - 1)<<") && (mode_sel_in == 1'd0)))? \n";
                else   r16_agu << "                       (SC_wire == S" << i << ")? \n";
                if(i == (No_stage - 1))r16_agu << "                       {BC_wire[" << NTT_OUT_RSB-1 << ":0],BC_wire[BC_WIDTH-1:" << NTT_OUT_RSB << "]} :\n";
				else r16_agu << "                       {BC_wire[" << RR_tmp-1 << ":0],BC_wire[BC_WIDTH-1:" << RR_tmp << "]} :\n";
        }
     }
	 //*******************************************************************************************
     r16_agu << "                       BC_wire;\n";
     r16_agu << "\n";
     r16_agu << "   // Bit reverse barrel shifter for IFFT \n";
	 //BR_BC_wire for IFFT computing
	 r16_agu << "   assign BR_BC_wire = {\n";
	 
	 int    Number_of_digit;
	 Number_of_digit = ( BU_counter_width - 3) / 4;

	 for(int j = (Number_of_digit - 1); j >= 0 ; j--){
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 4 - (4 * j) << "],\n"; 
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 5 - (4 * j) << "],\n"; 
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 6 - (4 * j) << "],\n"; 
	    r16_agu << "                       BC_RR_wire["<< BU_counter_width - 7 - (4 * j) << "],\n"; 
	 }	 
	 r16_agu << "                       BC_RR_wire["<< (BU_counter_width - 1) << "],\n"; 
	 r16_agu << "                       BC_RR_wire["<< (BU_counter_width - 2) << "],\n"; 
	 r16_agu << "                       BC_RR_wire["<< (BU_counter_width - 3) << "]};\n"; 	 	 
         
	//BC_Reorder_wire for IFFT output
	if(BU_counter_width == 7){
		r16_agu << "   assign BC_REORDER_wire = {BC_RR_wire[0],\n";
		r16_agu << "                       BC_RR_wire[6],\n";
		r16_agu << "                       BC_RR_wire[5],\n";
		r16_agu << "                       BC_RR_wire[4],\n";
		r16_agu << "                       BC_RR_wire[1],\n";
		r16_agu << "                       BC_RR_wire[3],\n";
		r16_agu << "                       BC_RR_wire[2]};\n";
	}
    if(BU_counter_width == 11){
		r16_agu << "   assign BC_REORDER_wire = {BC_RR_wire[7],\n";
		r16_agu << "                       BC_RR_wire[2],\n";
		r16_agu << "                       BC_RR_wire[1],\n";
		r16_agu << "                       BC_RR_wire[0],\n";
		r16_agu << "                       BC_RR_wire[4],\n";
		r16_agu << "                       BC_RR_wire[10],\n";
		r16_agu << "                       BC_RR_wire[9],\n";		
		r16_agu << "                       BC_RR_wire[8],\n";		
		r16_agu << "                       BC_RR_wire[3],\n";		
		r16_agu << "                       BC_RR_wire[6],\n";		
		r16_agu << "                       BC_RR_wire[5]};\n";		
	}     

     
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // Bank,  rc_sel_in=1 BN_wire=(^BC_RR_wire)                                                                        \n";
     r16_agu << "   assign BN_wire = ( rc_sel_in == 1'd1 ) ? ( ^BC_REORDER_wire ) : (mode_sel_in==1'd1)? (^BR_BC_wire) : (^BC_RR_wire) ; \n";
     r16_agu << "   // Address, rc_sel_in=1 MA=(BC_RR_wire[BC_WIDTH-1:1])                                                              \n";
     r16_agu << "   assign MA = ( rc_sel_in == 1'd1 ) ? ( BC_REORDER_wire[BC_WIDTH-1:1] ) : (mode_sel_in==1'd1)? (BR_BC_wire[BC_WIDTH-1:1]) : (BC_RR_wire[BC_WIDTH-1:1]) ; \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   // ROM Address                                                                                                     \n";
     r16_agu << "   assign ROMA = (SC_wire==S0)? (BC_RR_wire) :                                                                        \n";
     unsigned long ls_bits = 0; //left shift bits
     
     for(unsigned long i=1;i < (No_stage-1);i++){
         ls_bits = s * i;
         unsigned long ls_msb;
         ls_msb = ROM_width - 1 - ls_bits;
         r16_agu << "               (SC_wire ==S" << i << ")? ({BC_RR_wire[" << ls_msb <<":0]," << ls_bits <<"'d0}) : \n" ; 
     }
     r16_agu << "                 ROMA_ZERO;\n"; 
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign Mul_sel_wire = ((AGU_en==1'b1)&&(mode_sel_in==1'b1)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd3 :                \n";
     r16_agu << "                         ((AGU_en==1'b1)&&(mode_sel_in==1'b0)&&(SC_wire==S"<<(No_stage-1)<<"))? 2'd2 :                \n";
     r16_agu << "                           // test for point-wise multiplication                                                      \n";
     r16_agu << "                          (AGU_en==1'b1)? 2'd1 : 2'd0 ;                                                               \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign RDC_sel_wire = (wrfd_en_in==1'b1) ? RDCsel_cnt_reg : data_cnt_reg[3:0]  ;                                   \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //Butterfly unit mode select                                                                                       \n";
     r16_agu << "   assign BU_mode_sel_wire = ( SC_wire == S" << No_stage-1 <<") ? 1'd1 : 1'd0;\n";
	 r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   assign BU_dc_sel_wire = (( SC_wire == S" << No_stage-1 <<") && (mode_sel_in==1'd1) ) ? 1'd1 : 1'd0;\n";
     r16_agu << "   //2 bits , DC_mode_sel_wire                                                                                        \n";
     r16_agu << "   //2'd2 : for NTT output	, array the data as INTT input                                                             \n";
     r16_agu << "   //2'd1 : for NTT and INTT radix-2 computing                                                                        \n";
	 /************************************************************************/
	 //IFFT final stage data relocation method is the same as matrix transpose
	 /************************************************************************/
     r16_agu << "   assign DC_mode_sel_wire = (( SC_wire == S"<< No_stage-1 <<") && (mode_sel_in==1'b0)) ? 2'd2:\n";
     r16_agu << "                              ( SC_wire == S"<< No_stage-2 <<") ? 2'd1 : 2'd0;\n";
     r16_agu << "                                                                                                                      \n";	      
     r16_agu << "                                                                                                                      \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << "   //                                                                                                                 \n";
     r16_agu << "   always @(posedge clk or negedge rst_n) begin                                                                       \n";
     r16_agu << "   	if(~rst_n) begin                                                                                               \n";
     r16_agu << "           data_cnt_reg      <= DC_ZERO ;                                                                             \n";
     r16_agu << "           BN_out            <= 1'd0 ;                                                                                \n";
     r16_agu << "           BU_mode_sel_out   <= 1'd0 ;                                                                                \n";
     r16_agu << "           BU_dc_sel_out     <= 1'd0 ;                                                                                \n";
     r16_agu << "           DC_mode_sel_out   <= 2'd0 ;                                                                                \n";	
     r16_agu << "           RDC_sel_out       <= 4'd0 ;                                                                                \n";
     r16_agu << "           Mul_sel_out       <= 2'd0 ;                                                                                \n";
     r16_agu << "           RDCsel_cnt_reg    <= 4'd0 ;                                                                                \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   	else begin                                                                                                     \n";
     r16_agu << "           data_cnt_reg      <= data_cnt_wire ;                                                                       \n";
     r16_agu << "           BN_out            <= BN_wire ;                                                                             \n";
     r16_agu << "           BU_mode_sel_out   <= BU_mode_sel_wire ;                                                                    \n";
     r16_agu << "           BU_dc_sel_out     <= BU_dc_sel_wire ;                                                                      \n";
     r16_agu << "           DC_mode_sel_out   <= DC_mode_sel_wire ;                                                                    \n";     	 
     r16_agu << "           RDC_sel_out       <= RDC_sel_wire ;                                                                        \n";
     r16_agu << "           Mul_sel_out       <= Mul_sel_wire ;                                                                        \n";
     r16_agu << "           RDCsel_cnt_reg    <= RDCsel_cnt_wire ;                                                                     \n";
     r16_agu << "   	end                                                                                                            \n";
     r16_agu << "   end                                                                                                                \n";
     r16_agu << "                                                                                                                      \n";
     r16_agu << " endmodule                                                                                                            \n";   	 
	 r16_agu.close();	
}

//modify DC_R16_R8 
//New modle
void  CenCtrl::R16_R8_DC(std::string string_in){
	 std::ofstream r16_dc;
     std::string        string_buf = "/R16_DC.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 r16_dc.open(ss.str());	
r16_dc << " `timescale 1 ns/1 ps                                                                         \n";
r16_dc << " module R16_DC(RDC_out0,                                                                      \n";
r16_dc << " 			  RDC_out1,                                                                      \n";
r16_dc << " 			  RDC_out2,                                                                      \n";
r16_dc << " 			  RDC_out3,                                                                      \n";
r16_dc << " 			  RDC_out4,                                                                      \n";
r16_dc << " 			  RDC_out5,                                                                      \n";
r16_dc << " 			  RDC_out6,                                                                      \n";
r16_dc << " 			  RDC_out7,                                                                      \n";
r16_dc << " 			  RDC_out8,                                                                      \n";
r16_dc << " 			  RDC_out9,                                                                      \n";
r16_dc << " 			  RDC_out10,                                                                     \n";
r16_dc << " 			  RDC_out11,                                                                     \n";
r16_dc << " 			  RDC_out12,                                                                     \n";
r16_dc << " 			  RDC_out13,                                                                     \n";
r16_dc << " 			  RDC_out14,                                                                     \n";
r16_dc << " 			  RDC_out15,                                                                     \n";
r16_dc << "               RDC_in0,                                                                       \n";
r16_dc << " 		      RDC_in1,                                                                       \n";
r16_dc << " 			  RDC_in2,                                                                       \n";
r16_dc << " 			  RDC_in3,                                                                       \n";
r16_dc << " 			  RDC_in4,                                                                       \n";
r16_dc << " 			  RDC_in5,                                                                       \n";
r16_dc << " 			  RDC_in6,                                                                       \n";
r16_dc << " 			  RDC_in7,                                                                       \n";
r16_dc << " 			  RDC_in8,                                                                       \n";
r16_dc << " 			  RDC_in9,                                                                       \n";
r16_dc << " 			  RDC_in10,                                                                      \n";
r16_dc << " 			  RDC_in11,                                                                      \n";
r16_dc << " 			  RDC_in12,                                                                      \n";
r16_dc << " 			  RDC_in13,                                                                      \n";
r16_dc << " 			  RDC_in14,                                                                      \n";
r16_dc << " 			  RDC_in15,                                                                      \n";
r16_dc << " 			  RDC_sel,                                                                       \n";
r16_dc << " 			  DC_mode_sel_in,  //for using in radix-8 delay counter                          \n";
r16_dc << "               rst_n,                                                                         \n";
r16_dc << "               clk                                                                            \n";
r16_dc << "               ) ;                                                                            \n";
r16_dc << " parameter P_WIDTH     = 64 ;                                                                 \n";
r16_dc << "                                                                                              \n";
r16_dc << " parameter P_ZERO      = 64'h0 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << " output[P_WIDTH-1:0] RDC_out15 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in0 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in1 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in2 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in3 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in4 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in5 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in6 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in7 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in8 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in9 ;                                                                \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in10 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in11 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in12 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in13 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in14 ;                                                               \n";
r16_dc << " input [P_WIDTH-1:0] RDC_in15 ;                                                               \n";
r16_dc << " input [3:0]         RDC_sel ;                                                                \n";
r16_dc << " input [1:0]         DC_mode_sel_in;                                                         \n";
r16_dc << " input               rst_n ;                                                                  \n";
r16_dc << " input               clk ;                                                                    \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out0 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out1 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out2 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out3 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out4 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out5 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out6 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out7 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out8 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out9 ;                                                               \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out10 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out11 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out12 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out13 ;                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] RDC_out14 ;                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_5_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_6_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_7_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_8_in_reg ;                                                            \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D14_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_0_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_1_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_2_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_3_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_4_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_5_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_6_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_7_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_8_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_9_in_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_10_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_11_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_12_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_13_in_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D15_14_in_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D0_13_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D1_12_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D2_11_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D3_10_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D4_9_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D5_8_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D6_7_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D7_6_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D8_5_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_0_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_1_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_2_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_3_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D9_4_out_reg ;                                                           \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D10_3_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D11_2_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_0_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D12_1_out_reg ;                                                          \n";
r16_dc << " reg   [P_WIDTH-1:0] D13_0_out_reg ;                                                          \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D0_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D2_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D4_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D8_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_wire ;                                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_wire ;                                                              \n";
r16_dc << " wire  [P_WIDTH-1:0]  RDC_out15 ;                                                             \n";
r16_dc << "                                                                                              \n";
r16_dc << " //for DC_mode_sel ,frist data relocation mode                                                \n";
r16_dc << " wire  [P_WIDTH-1:0]  D8_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_1_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_2_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_3_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_4_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_5_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_6_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D15_7_in_wire ;                                                         \n";
r16_dc << " //for DC_mode_sel ,second data relocation mode                                               \n";
r16_dc << " wire  [P_WIDTH-1:0]  D1_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D2_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D3_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D4_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D5_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D6_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D7_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D9_0_in_wire ;                                                          \n";
r16_dc << " wire  [P_WIDTH-1:0]  D10_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D11_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D12_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D13_0_in_wire ;                                                         \n";
r16_dc << " wire  [P_WIDTH-1:0]  D14_0_in_wire ;                                                         \n";
r16_dc << "                                                                                              \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D0_wire =  ( DC_mode_sel_in == 2'd2 ) ? RDC_in0 :                                 \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D7_6_in_reg : \n";
r16_dc << "                       (RDC_sel==4'd0)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd1)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd11)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D14_13_in_reg :                                      \n";
r16_dc << " 					                    D15_14_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D1_wire =  ( DC_mode_sel_in == 2'd2 ) ? D1_0_in_reg :                            \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D6_5_in_reg : \n";
r16_dc << "                       (RDC_sel==4'd0)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd2)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd12)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D13_12_in_reg :                                      \n";
r16_dc << " 					                    D14_13_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 									                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D2_wire =   ( DC_mode_sel_in == 2'd2 ) ? D2_1_in_reg :                            \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd3)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd13)? D11_10_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? D12_11_in_reg :                                      \n";
r16_dc << " 					                    D13_12_in_reg ; // RDC_sel==4'd15					 \n";		  
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D3_wire =  ( DC_mode_sel_in == 2'd2 ) ? D3_2_in_reg :                            \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd4)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D10_9_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd14)? D11_10_in_reg :                                      \n";
r16_dc << " 					                    D12_11_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D4_wire =  ( DC_mode_sel_in == 2'd2) ? D4_3_in_reg :                              \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd5)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D9_8_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D10_9_in_reg :                                       \n";
r16_dc << " 					                    D11_10_in_reg ; // RDC_sel==4'd15                    \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D5_wire =  ( DC_mode_sel_in == 2'd2) ? D5_4_in_reg :                              \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd1)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd6)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D8_7_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D9_8_in_reg :                                        \n";
r16_dc << " 					                    D10_9_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D6_wire =  ( DC_mode_sel_in == 2'd2) ? D6_5_in_reg :                              \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd1)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd2)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd7)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D7_6_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D8_7_in_reg :                                        \n";
r16_dc << " 					                    D9_8_in_reg ; // RDC_sel==4'd15						 \n";	   
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D7_wire =  ( DC_mode_sel_in == 2'd2) ? D7_6_in_reg :                              \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D1_0_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D2_1_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D3_2_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D4_3_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D5_4_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D6_5_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D7_6_in_reg : \n";
r16_dc << " 	                  (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? RDC_in0 :     \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd2)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd3)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd8)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd9)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D6_5_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D7_6_in_reg :                                        \n";
r16_dc << " 					                    D8_7_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D8_wire =  (( DC_mode_sel_in == 2'd1 ) || ( DC_mode_sel_in == 2'd2)) ? D8_7_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd3)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd4)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd9)? D1_0_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd10)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D5_4_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D6_5_in_reg :                                        \n";
r16_dc << " 					                    D7_6_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D9_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2)) ? D9_8_in_reg :\n";
r16_dc << " 	                  (RDC_sel==4'd0)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd4)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd5)? D12_11_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd6)? D13_12_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd7)? D14_13_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd8)? D15_14_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd9)? RDC_in0 :                                             \n";
r16_dc << " 					  (RDC_sel==4'd10)? D1_0_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd11)? D2_1_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd12)? D3_2_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd13)? D4_3_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd14)? D5_4_in_reg :                                        \n";
r16_dc << " 					                    D6_5_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D10_wire =  (( DC_mode_sel_in == 2'd1)|| ( DC_mode_sel_in == 2'd2 )) ? D10_9_in_reg :\n";
r16_dc << " 	                   (RDC_sel==4'd0)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd5)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd6)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D15_14_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd11)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd12)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D3_2_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D4_3_in_reg :                                       \n";
r16_dc << " 					                     D5_4_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D11_wire =  (( DC_mode_sel_in == 2'd1)||( DC_mode_sel_in == 2'd2)) ? D11_10_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd6)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd7)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D14_13_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd12)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd13)? D2_1_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D3_2_in_reg :                                       \n";
r16_dc << " 					                     D4_3_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D12_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2 )) ? D12_11_in_reg :  \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd7)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd8)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D13_12_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd13)? D1_0_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd14)? D2_1_in_reg :                                       \n";
r16_dc << " 					                     D3_2_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D13_wire =  (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2)) ? D13_12_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd8)? D11_10_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd9)? D12_11_in_reg :                                      \n";
r16_dc << " 					   (RDC_sel==4'd10)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D15_14_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? RDC_in0 :                                           \n";
r16_dc << " 					   (RDC_sel==4'd14)? D1_0_in_reg :                                       \n";
r16_dc << " 					                     D2_1_in_reg ; // RDC_sel==4'd15                     \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign D14_wire = (( DC_mode_sel_in == 2'd1) || ( DC_mode_sel_in == 2'd2 )) ? D14_13_in_reg : \n";
r16_dc << " 	                  (RDC_sel==4'd0)? D2_1_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd1)? D3_2_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd2)? D4_3_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd3)? D5_4_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd4)? D6_5_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd5)? D7_6_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd6)? D8_7_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd7)? D9_8_in_reg :                                         \n";
r16_dc << " 					  (RDC_sel==4'd8)? D10_9_in_reg :                                        \n";
r16_dc << " 					  (RDC_sel==4'd9)? D11_10_in_reg :                                       \n";
r16_dc << " 					  (RDC_sel==4'd10)? D12_11_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd11)? D13_12_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd12)? D14_13_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd13)? D15_14_in_reg :                                      \n";
r16_dc << " 					  (RDC_sel==4'd14)? RDC_in0 :                                            \n";
r16_dc << " 					                    D1_0_in_reg ; // RDC_sel==4'd15                      \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	assign RDC_out15 = (( DC_mode_sel_in == 2'd1) || (DC_mode_sel_in == 2'd2)) ? D15_14_in_reg : \n";
r16_dc << " 	                   (RDC_sel==4'd0)? D1_0_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd1)? D2_1_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd2)? D3_2_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd3)? D4_3_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd4)? D5_4_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd5)? D6_5_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd6)? D7_6_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd7)? D8_7_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd8)? D9_8_in_reg :                                        \n";
r16_dc << " 					   (RDC_sel==4'd9)? D10_9_in_reg :                                       \n";
r16_dc << " 					   (RDC_sel==4'd10)? D11_10_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd11)? D12_11_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd12)? D13_12_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd13)? D14_13_in_reg :                                     \n";
r16_dc << " 					   (RDC_sel==4'd14)? D15_14_in_reg :                                     \n";
r16_dc << " 					                     RDC_in0 ; // RDC_sel==4'd15                         \n";
r16_dc << "                                                                                              \n";
r16_dc << "     //----------------------------                                                           \n";
r16_dc << " 	assign D1_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in8  : RDC_in1;                    \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	assign D2_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in1  : RDC_in2;                    \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	assign D3_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in9  : RDC_in3;                    \n";
r16_dc << "                                                                                              \n";
r16_dc << " 	assign D4_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in2  : RDC_in4;                    \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D5_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in10 : RDC_in5;                         \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D6_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in3  : RDC_in6;                         \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D7_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in11 : RDC_in7;                         \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D8_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in4 :                                   \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? RDC_in8 :      \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D10_1_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D11_2_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D12_3_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D13_4_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D14_5_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D15_6_in_reg : \n";
r16_dc << " 	                                                                               RDC_in8;       \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D9_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in12 : RDC_in9;                         \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D9_1_in_wire = (DC_mode_sel_in == 2'd2)  ? D9_0_in_reg :                               \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D15_6_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? RDC_in8      : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D10_1_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D11_2_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D12_3_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D13_4_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D14_5_in_reg : \n";
r16_dc << " 	                                                                               D9_0_in_reg;   \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D10_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in5 : RDC_in10;                         \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D10_2_in_wire =(DC_mode_sel_in == 2'd2)  ? D10_1_in_reg :                              \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D14_5_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D15_6_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? RDC_in8      : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D10_1_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D11_2_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D12_3_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D13_4_in_reg : \n";
r16_dc << " 	                                                                               D10_1_in_reg;  \n";
r16_dc << " 	assign D11_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in13 : RDC_in11;                        \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D11_3_in_wire =(DC_mode_sel_in == 2'd2)  ? D11_2_in_reg  :                             \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D13_4_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D14_5_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D15_6_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? RDC_in8      : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D10_1_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D11_2_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D12_3_in_reg : \n";
r16_dc << " 	                                                                               D11_2_in_reg;  \n";
r16_dc << " 	                                                                                              \n";
r16_dc << " 	assign D12_0_in_wire = (DC_mode_sel_in == 2'd2) ? RDC_in6  : RDC_in12;                        \n";
r16_dc << " 	                                                                                              \n";
r16_dc << " 	assign D12_4_in_wire =(DC_mode_sel_in == 2'd2)  ? D12_3_in_reg  :                             \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D12_3_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D13_4_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D14_5_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D15_6_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? RDC_in8      : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D10_1_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D11_2_in_reg : \n";
r16_dc << " 	                                                                               D12_3_in_reg;  \n";
r16_dc << " 	assign D13_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in14 : RDC_in13;                       \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D13_5_in_wire =(DC_mode_sel_in == 2'd2)  ? D13_4_in_reg  :                             \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D11_2_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D12_3_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D13_4_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D14_5_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D15_6_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? RDC_in8      : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D10_1_in_reg : \n";
r16_dc << " 	                                                                               D13_4_in_reg;  \n";
r16_dc << " 	assign D14_0_in_wire = (DC_mode_sel_in == 2'd2)  ? RDC_in7 : RDC_in14;                        \n";
r16_dc << "                                                                                                   \n";
r16_dc << " 	assign D14_6_in_wire =(DC_mode_sel_in == 2'd2)  ? D14_5_in_reg  :                             \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D10_1_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D11_2_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D12_3_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D13_4_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D14_5_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D15_6_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? RDC_in8      : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                                                                               D14_5_in_reg;  \n";
r16_dc << " 	assign D15_7_in_wire =(DC_mode_sel_in == 2'd2)  ? D15_6_in_reg  :                             \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd0 )) ? D9_0_in_reg  : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd1 )) ? D10_1_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd2 )) ? D11_2_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd3 )) ? D12_3_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd4 )) ? D13_4_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd5 )) ? D14_5_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd6 )) ? D15_6_in_reg : \n";
r16_dc << " 	                      (( DC_mode_sel_in == 2'd1 ) && ( RDC_sel[2:0]==3'd7 )) ? RDC_in8      : \n";
r16_dc << " 	                                                                               D15_6_in_reg;  \n";
r16_dc << " 	                                                                                         \n";
r16_dc << " 	//                                                                                       \n";
r16_dc << " 	always @(posedge clk or negedge rst_n) begin                                             \n";
r16_dc << " 		if(~rst_n) begin                                                                     \n";
r16_dc << " 			D1_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D2_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D3_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D4_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D5_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D6_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D7_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D8_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_0_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_1_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_2_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_3_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_4_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_5_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_6_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_7_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D9_8_in_reg <= P_ZERO ;                                                          \n";
r16_dc << " 			D10_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D10_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D11_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D12_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D13_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D13_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D14_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D14_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_0_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_1_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_2_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_3_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_4_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_5_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_6_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_7_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_8_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_9_in_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D15_10_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_11_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_12_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_13_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D15_14_in_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D0_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D0_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_12_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D0_13_out_reg <= P_ZERO ;				                                         \n";
r16_dc << " 			RDC_out0 <= P_ZERO ;                                                             \n";
r16_dc << " 			D1_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D1_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D1_12_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out1 <= P_ZERO ;                                                             \n";
r16_dc << " 			D2_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D2_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D2_10_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D2_11_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out2 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_3_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_9_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D3_10_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			RDC_out3 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_1_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_2_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D4_4_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_5_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_6_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_7_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_8_out_reg <= P_ZERO ;	                                                     \n";
r16_dc << " 			D4_9_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out4 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D5_8_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out5 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D6_7_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out6 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D7_6_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out7 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D8_5_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out8 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_1_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_2_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_3_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			D9_4_out_reg <= P_ZERO ;                                                         \n";
r16_dc << " 			RDC_out9 <= P_ZERO ;                                                             \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D10_3_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out10 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D11_2_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out11 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			D12_1_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out12 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= P_ZERO ;                                                        \n";
r16_dc << " 			RDC_out13 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= P_ZERO ;                                                            \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 		else begin                                                                           \n";
r16_dc << " 			D1_0_in_reg <= D1_0_in_wire;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_in_reg <= D2_0_in_wire;                                                     \n";
r16_dc << " 			D2_1_in_reg <= D2_0_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_in_reg <= D3_0_in_wire;                                                     \n";
r16_dc << " 			D3_1_in_reg <= D3_0_in_reg ;                                                     \n";
r16_dc << " 			D3_2_in_reg <= D3_1_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_in_reg <= D4_0_in_wire;                                                     \n";
r16_dc << " 			D4_1_in_reg <= D4_0_in_reg ;                                                     \n";
r16_dc << " 			D4_2_in_reg <= D4_1_in_reg ;                                                     \n";
r16_dc << " 			D4_3_in_reg <= D4_2_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_in_reg <= D5_0_in_wire;                                                     \n";
r16_dc << " 			D5_1_in_reg <= D5_0_in_reg ;                                                     \n";
r16_dc << " 			D5_2_in_reg <= D5_1_in_reg ;                                                     \n";
r16_dc << " 			D5_3_in_reg <= D5_2_in_reg ;                                                     \n";
r16_dc << " 			D5_4_in_reg <= D5_3_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_in_reg <= D6_0_in_wire ;                                                    \n";
r16_dc << " 			D6_1_in_reg <= D6_0_in_reg ;                                                     \n";
r16_dc << " 			D6_2_in_reg <= D6_1_in_reg ;                                                     \n";
r16_dc << " 			D6_3_in_reg <= D6_2_in_reg ;                                                     \n";
r16_dc << " 			D6_4_in_reg <= D6_3_in_reg ;                                                     \n";
r16_dc << " 			D6_5_in_reg <= D6_4_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_in_reg <= D7_0_in_wire ;                                                    \n";
r16_dc << " 			D7_1_in_reg <= D7_0_in_reg ;                                                     \n";
r16_dc << " 			D7_2_in_reg <= D7_1_in_reg ;                                                     \n";
r16_dc << " 			D7_3_in_reg <= D7_2_in_reg ;                                                     \n";
r16_dc << " 			D7_4_in_reg <= D7_3_in_reg ;                                                     \n";
r16_dc << " 			D7_5_in_reg <= D7_4_in_reg ;                                                     \n";
r16_dc << " 			D7_6_in_reg <= D7_5_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_in_reg <= D8_0_in_wire ;                                                    \n";
r16_dc << " 			D8_1_in_reg <= D8_0_in_reg ;                                                     \n";
r16_dc << " 			D8_2_in_reg <= D8_1_in_reg ;                                                     \n";
r16_dc << " 			D8_3_in_reg <= D8_2_in_reg ;                                                     \n";
r16_dc << " 			D8_4_in_reg <= D8_3_in_reg ;                                                     \n";
r16_dc << " 			D8_5_in_reg <= D8_4_in_reg ;                                                     \n";
r16_dc << " 			D8_6_in_reg <= D8_5_in_reg ;                                                     \n";
r16_dc << " 			D8_7_in_reg <= D8_6_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_in_reg <= D9_0_in_wire ;                                                    \n";
r16_dc << " 			D9_1_in_reg <= D9_1_in_wire ;                                                    \n";
r16_dc << " 			D9_2_in_reg <= D9_1_in_reg ;                                                     \n";
r16_dc << " 			D9_3_in_reg <= D9_2_in_reg ;                                                     \n";
r16_dc << " 			D9_4_in_reg <= D9_3_in_reg ;                                                     \n";
r16_dc << " 			D9_5_in_reg <= D9_4_in_reg ;                                                     \n";
r16_dc << " 			D9_6_in_reg <= D9_5_in_reg ;                                                     \n";
r16_dc << " 			D9_7_in_reg <= D9_6_in_reg ;                                                     \n";
r16_dc << " 			D9_8_in_reg <= D9_7_in_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_in_reg <= D10_0_in_wire ;                                                  \n";
r16_dc << " 			D10_1_in_reg <= D10_0_in_reg  ;                                                  \n";
r16_dc << " 			D10_2_in_reg <= D10_2_in_wire ;                                                  \n";
r16_dc << " 			D10_3_in_reg <= D10_2_in_reg ;                                                   \n";
r16_dc << " 			D10_4_in_reg <= D10_3_in_reg ;                                                   \n";
r16_dc << " 			D10_5_in_reg <= D10_4_in_reg ;                                                   \n";
r16_dc << " 			D10_6_in_reg <= D10_5_in_reg ;                                                   \n";
r16_dc << " 			D10_7_in_reg <= D10_6_in_reg ;                                                   \n";
r16_dc << " 			D10_8_in_reg <= D10_7_in_reg ;                                                   \n";
r16_dc << " 			D10_9_in_reg <= D10_8_in_reg ;                                                   \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_in_reg <= D11_0_in_wire ;                                                  \n";
r16_dc << " 			D11_1_in_reg <= D11_0_in_reg ;                                                   \n";
r16_dc << " 			D11_2_in_reg <= D11_1_in_reg ;                                                   \n";
r16_dc << " 			D11_3_in_reg <= D11_3_in_wire ;                                                  \n";
r16_dc << " 			D11_4_in_reg <= D11_3_in_reg ;                                                   \n";
r16_dc << " 			D11_5_in_reg <= D11_4_in_reg ;                                                   \n";
r16_dc << " 			D11_6_in_reg <= D11_5_in_reg ;                                                   \n";
r16_dc << " 			D11_7_in_reg <= D11_6_in_reg ;                                                   \n";
r16_dc << " 			D11_8_in_reg <= D11_7_in_reg ;                                                   \n";
r16_dc << " 			D11_9_in_reg <= D11_8_in_reg ;                                                   \n";
r16_dc << " 			D11_10_in_reg <= D11_9_in_reg ;                                                  \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_in_reg <= D12_0_in_wire ;                                                  \n";
r16_dc << " 			D12_1_in_reg <= D12_0_in_reg ;                                                   \n";
r16_dc << " 			D12_2_in_reg <= D12_1_in_reg ;                                                   \n";
r16_dc << " 			D12_3_in_reg <= D12_2_in_reg ;                                                   \n";
r16_dc << " 			D12_4_in_reg <= D12_4_in_wire ;                                                  \n";
r16_dc << " 			D12_5_in_reg <= D12_4_in_reg ;                                                   \n";
r16_dc << " 			D12_6_in_reg <= D12_5_in_reg ;                                                   \n";
r16_dc << " 			D12_7_in_reg <= D12_6_in_reg ;                                                   \n";
r16_dc << " 			D12_8_in_reg <= D12_7_in_reg ;                                                   \n";
r16_dc << " 			D12_9_in_reg <= D12_8_in_reg ;                                                   \n";
r16_dc << " 			D12_10_in_reg <= D12_9_in_reg ;                                                  \n";
r16_dc << " 			D12_11_in_reg <= D12_10_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_in_reg <= D13_0_in_wire ;                                                  \n";
r16_dc << " 			D13_1_in_reg <= D13_0_in_reg ;                                                   \n";
r16_dc << " 			D13_2_in_reg <= D13_1_in_reg ;                                                   \n";
r16_dc << " 			D13_3_in_reg <= D13_2_in_reg ;                                                   \n";
r16_dc << " 			D13_4_in_reg <= D13_3_in_reg ;                                                   \n";
r16_dc << " 			D13_5_in_reg <= D13_5_in_wire ;                                                  \n";
r16_dc << " 			D13_6_in_reg <= D13_5_in_reg ;                                                   \n";
r16_dc << " 			D13_7_in_reg <= D13_6_in_reg ;                                                   \n";
r16_dc << " 			D13_8_in_reg <= D13_7_in_reg ;                                                   \n";
r16_dc << " 			D13_9_in_reg <= D13_8_in_reg ;                                                   \n";
r16_dc << " 			D13_10_in_reg <= D13_9_in_reg ;                                                  \n";
r16_dc << " 			D13_11_in_reg <= D13_10_in_reg ;                                                 \n";
r16_dc << " 			D13_12_in_reg <= D13_11_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D14_0_in_reg <= D14_0_in_wire ;                                                  \n";
r16_dc << " 			D14_1_in_reg <= D14_0_in_reg ;                                                   \n";
r16_dc << " 			D14_2_in_reg <= D14_1_in_reg ;                                                   \n";
r16_dc << " 			D14_3_in_reg <= D14_2_in_reg ;                                                   \n";
r16_dc << " 			D14_4_in_reg <= D14_3_in_reg ;                                                   \n";
r16_dc << " 			D14_5_in_reg <= D14_4_in_reg ;                                                   \n";
r16_dc << " 			D14_6_in_reg <= D14_6_in_wire ;                                                  \n";
r16_dc << " 			D14_7_in_reg <= D14_6_in_reg ;                                                   \n";
r16_dc << " 			D14_8_in_reg <= D14_7_in_reg ;                                                   \n";
r16_dc << " 			D14_9_in_reg <= D14_8_in_reg ;                                                   \n";
r16_dc << " 			D14_10_in_reg <= D14_9_in_reg ;                                                  \n";
r16_dc << " 			D14_11_in_reg <= D14_10_in_reg ;                                                 \n";
r16_dc << " 			D14_12_in_reg <= D14_11_in_reg ;                                                 \n";
r16_dc << " 			D14_13_in_reg <= D14_12_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D15_0_in_reg <= RDC_in15 ;                                                       \n";
r16_dc << " 			D15_1_in_reg <= D15_0_in_reg ;                                                   \n";
r16_dc << " 			D15_2_in_reg <= D15_1_in_reg ;                                                   \n";
r16_dc << " 			D15_3_in_reg <= D15_2_in_reg ;                                                   \n";
r16_dc << " 			D15_4_in_reg <= D15_3_in_reg ;                                                   \n";
r16_dc << " 			D15_5_in_reg <= D15_4_in_reg ;                                                   \n";
r16_dc << " 			D15_6_in_reg <= D15_5_in_reg ;                                                   \n";
r16_dc << " 			D15_7_in_reg <= D15_7_in_wire ;                                                  \n";
r16_dc << " 			D15_8_in_reg <= D15_7_in_reg ;                                                   \n";
r16_dc << " 			D15_9_in_reg <= D15_8_in_reg ;                                                   \n";
r16_dc << " 			D15_10_in_reg <= D15_9_in_reg ;                                                  \n";
r16_dc << " 			D15_11_in_reg <= D15_10_in_reg ;                                                 \n";
r16_dc << " 			D15_12_in_reg <= D15_11_in_reg ;                                                 \n";
r16_dc << " 			D15_13_in_reg <= D15_12_in_reg ;                                                 \n";
r16_dc << " 			D15_14_in_reg <= D15_13_in_reg ;                                                 \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			//                                                                               \n";
r16_dc << " 			D0_0_out_reg <= D0_wire ;                                                        \n";
r16_dc << " 			D0_1_out_reg <= D0_0_out_reg ;                                                   \n";
r16_dc << " 			D0_2_out_reg <= D0_1_out_reg ;                                                   \n";
r16_dc << " 			D0_3_out_reg <= D0_2_out_reg ;                                                   \n";
r16_dc << " 			D0_4_out_reg <= D0_3_out_reg ;                                                   \n";
r16_dc << " 			D0_5_out_reg <= D0_4_out_reg ;                                                   \n";
r16_dc << " 			D0_6_out_reg <= D0_5_out_reg ;                                                   \n";
r16_dc << " 			D0_7_out_reg <= D0_6_out_reg ;                                                   \n";
r16_dc << " 			D0_8_out_reg <= D0_7_out_reg ;                                                   \n";
r16_dc << " 			D0_9_out_reg <= D0_8_out_reg ;                                                   \n";
r16_dc << " 			D0_10_out_reg <= D0_9_out_reg ;                                                  \n";
r16_dc << " 			D0_11_out_reg <= D0_10_out_reg ;                                                 \n";
r16_dc << " 			D0_12_out_reg <= D0_11_out_reg ;                                                 \n";
r16_dc << " 			D0_13_out_reg <= D0_12_out_reg ;                                                 \n";
r16_dc << " 			RDC_out0 <= D0_13_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D1_0_out_reg <= D1_wire ;                                                        \n";
r16_dc << " 			D1_1_out_reg <= D1_0_out_reg ;                                                   \n";
r16_dc << " 			D1_2_out_reg <= D1_1_out_reg ;                                                   \n";
r16_dc << " 			D1_3_out_reg <= D1_2_out_reg ;                                                   \n";
r16_dc << " 			D1_4_out_reg <= D1_3_out_reg ;                                                   \n";
r16_dc << " 			D1_5_out_reg <= D1_4_out_reg ;                                                   \n";
r16_dc << " 			D1_6_out_reg <= D1_5_out_reg ;                                                   \n";
r16_dc << " 			D1_7_out_reg <= D1_6_out_reg ;                                                   \n";
r16_dc << " 			D1_8_out_reg <= D1_7_out_reg ;                                                   \n";
r16_dc << " 			D1_9_out_reg <= D1_8_out_reg ;                                                   \n";
r16_dc << " 			D1_10_out_reg <= D1_9_out_reg ;                                                  \n";
r16_dc << " 			D1_11_out_reg <= D1_10_out_reg ;                                                 \n";
r16_dc << " 			D1_12_out_reg <= D1_11_out_reg ;                                                 \n";
r16_dc << " 			RDC_out1 <= D1_12_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D2_0_out_reg <= D2_wire ;                                                        \n";
r16_dc << " 			D2_1_out_reg <= D2_0_out_reg ;                                                   \n";
r16_dc << " 			D2_2_out_reg <= D2_1_out_reg ;                                                   \n";
r16_dc << " 			D2_3_out_reg <= D2_2_out_reg ;                                                   \n";
r16_dc << " 			D2_4_out_reg <= D2_3_out_reg ;                                                   \n";
r16_dc << " 			D2_5_out_reg <= D2_4_out_reg ;                                                   \n";
r16_dc << " 			D2_6_out_reg <= D2_5_out_reg ;                                                   \n";
r16_dc << " 			D2_7_out_reg <= D2_6_out_reg ;                                                   \n";
r16_dc << " 			D2_8_out_reg <= D2_7_out_reg ;                                                   \n";
r16_dc << " 			D2_9_out_reg <= D2_8_out_reg ;                                                   \n";
r16_dc << " 			D2_10_out_reg <= D2_9_out_reg ;                                                  \n";
r16_dc << " 			D2_11_out_reg <= D2_10_out_reg ;                                                 \n";
r16_dc << " 			RDC_out2 <= D2_11_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D3_0_out_reg <= D3_wire ;                                                        \n";
r16_dc << " 			D3_1_out_reg <= D3_0_out_reg ;                                                   \n";
r16_dc << " 			D3_2_out_reg <= D3_1_out_reg ;                                                   \n";
r16_dc << " 			D3_3_out_reg <= D3_2_out_reg ;                                                   \n";
r16_dc << " 			D3_4_out_reg <= D3_3_out_reg ;                                                   \n";
r16_dc << " 			D3_5_out_reg <= D3_4_out_reg ;                                                   \n";
r16_dc << " 			D3_6_out_reg <= D3_5_out_reg ;                                                   \n";
r16_dc << " 			D3_7_out_reg <= D3_6_out_reg ;                                                   \n";
r16_dc << " 			D3_8_out_reg <= D3_7_out_reg ;                                                   \n";
r16_dc << " 			D3_9_out_reg <= D3_8_out_reg ;                                                   \n";
r16_dc << " 			D3_10_out_reg <= D3_9_out_reg ;                                                  \n";
r16_dc << " 			RDC_out3 <= D3_10_out_reg ;                                                      \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D4_0_out_reg <= D4_wire ;                                                        \n";
r16_dc << " 			D4_1_out_reg <= D4_0_out_reg ;                                                   \n";
r16_dc << " 			D4_2_out_reg <= D4_1_out_reg ;                                                   \n";
r16_dc << " 			D4_3_out_reg <= D4_2_out_reg ;                                                   \n";
r16_dc << " 			D4_4_out_reg <= D4_3_out_reg ;                                                   \n";
r16_dc << " 			D4_5_out_reg <= D4_4_out_reg ;                                                   \n";
r16_dc << " 			D4_6_out_reg <= D4_5_out_reg ;                                                   \n";
r16_dc << " 			D4_7_out_reg <= D4_6_out_reg ;                                                   \n";
r16_dc << " 			D4_8_out_reg <= D4_7_out_reg ;                                                   \n";
r16_dc << " 			D4_9_out_reg <= D4_8_out_reg ;                                                   \n";
r16_dc << " 			RDC_out4 <= D4_9_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D5_0_out_reg <= D5_wire ;                                                        \n";
r16_dc << " 			D5_1_out_reg <= D5_0_out_reg ;                                                   \n";
r16_dc << " 			D5_2_out_reg <= D5_1_out_reg ;                                                   \n";
r16_dc << " 			D5_3_out_reg <= D5_2_out_reg ;                                                   \n";
r16_dc << " 			D5_4_out_reg <= D5_3_out_reg ;                                                   \n";
r16_dc << " 			D5_5_out_reg <= D5_4_out_reg ;                                                   \n";
r16_dc << " 			D5_6_out_reg <= D5_5_out_reg ;                                                   \n";
r16_dc << " 			D5_7_out_reg <= D5_6_out_reg ;                                                   \n";
r16_dc << " 			D5_8_out_reg <= D5_7_out_reg ;                                                   \n";
r16_dc << " 			RDC_out5 <= D5_8_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D6_0_out_reg <= D6_wire ;                                                        \n";
r16_dc << " 			D6_1_out_reg <= D6_0_out_reg ;                                                   \n";
r16_dc << " 			D6_2_out_reg <= D6_1_out_reg ;                                                   \n";
r16_dc << " 			D6_3_out_reg <= D6_2_out_reg ;                                                   \n";
r16_dc << " 			D6_4_out_reg <= D6_3_out_reg ;                                                   \n";
r16_dc << " 			D6_5_out_reg <= D6_4_out_reg ;                                                   \n";
r16_dc << " 			D6_6_out_reg <= D6_5_out_reg ;                                                   \n";
r16_dc << " 			D6_7_out_reg <= D6_6_out_reg ;                                                   \n";
r16_dc << " 			RDC_out6 <= D6_7_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D7_0_out_reg <= D7_wire ;                                                        \n";
r16_dc << " 			D7_1_out_reg <= D7_0_out_reg ;                                                   \n";
r16_dc << " 			D7_2_out_reg <= D7_1_out_reg ;                                                   \n";
r16_dc << " 			D7_3_out_reg <= D7_2_out_reg ;                                                   \n";
r16_dc << " 			D7_4_out_reg <= D7_3_out_reg ;                                                   \n";
r16_dc << " 			D7_5_out_reg <= D7_4_out_reg ;                                                   \n";
r16_dc << " 			D7_6_out_reg <= D7_5_out_reg ;                                                   \n";
r16_dc << " 			RDC_out7 <= D7_6_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D8_0_out_reg <= D8_wire ;                                                        \n";
r16_dc << " 			D8_1_out_reg <= D8_0_out_reg ;                                                   \n";
r16_dc << " 			D8_2_out_reg <= D8_1_out_reg ;                                                   \n";
r16_dc << " 			D8_3_out_reg <= D8_2_out_reg ;                                                   \n";
r16_dc << " 			D8_4_out_reg <= D8_3_out_reg ;                                                   \n";
r16_dc << " 			D8_5_out_reg <= D8_4_out_reg ;                                                   \n";
r16_dc << " 			RDC_out8 <= D8_5_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D9_0_out_reg <= D9_wire ;                                                        \n";
r16_dc << " 			D9_1_out_reg <= D9_0_out_reg ;                                                   \n";
r16_dc << " 			D9_2_out_reg <= D9_1_out_reg ;                                                   \n";
r16_dc << " 			D9_3_out_reg <= D9_2_out_reg ;                                                   \n";
r16_dc << " 			D9_4_out_reg <= D9_3_out_reg ;                                                   \n";
r16_dc << " 			RDC_out9 <= D9_4_out_reg ;                                                       \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D10_0_out_reg <= D10_wire ;                                                      \n";
r16_dc << " 			D10_1_out_reg <= D10_0_out_reg ;                                                 \n";
r16_dc << " 			D10_2_out_reg <= D10_1_out_reg ;                                                 \n";
r16_dc << " 			D10_3_out_reg <= D10_2_out_reg ;                                                 \n";
r16_dc << " 			RDC_out10 <= D10_3_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D11_0_out_reg <= D11_wire ;                                                      \n";
r16_dc << " 			D11_1_out_reg <= D11_0_out_reg ;                                                 \n";
r16_dc << " 			D11_2_out_reg <= D11_1_out_reg ;                                                 \n";
r16_dc << " 			RDC_out11 <= D11_2_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D12_0_out_reg <= D12_wire ;                                                      \n";
r16_dc << " 			D12_1_out_reg <= D12_0_out_reg ;                                                 \n";
r16_dc << " 			RDC_out12 <= D12_1_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			D13_0_out_reg <= D13_wire ;                                                      \n";
r16_dc << " 			RDC_out13 <= D13_0_out_reg ;                                                     \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 			RDC_out14 <= D14_wire ;                                                          \n";
r16_dc << " 			                                                                                 \n";
r16_dc << " 		end                                                                                  \n";
r16_dc << " 	end                                                                                      \n";
r16_dc << "                                                                                              \n";
r16_dc << " endmodule                                                                                    \n";
	 r16_dc.close();
}
// radix-2^(x)
// radix-2^(4) butterfly unit 
// R2P module : Radix-2^(4)
void CenCtrl::Ctrl_PipeReg1_R2P(std::string string_in){
	 std::ofstream Ctrl_PipeReg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 Ctrl_PipeReg1.open(ss.str());
Ctrl_PipeReg1 << " `timescale 1 ns/1 ps                                                             \n";
Ctrl_PipeReg1 << " module Ctrl_PipeReg1(mode_sel_Dout,                                              \n";
Ctrl_PipeReg1 << " 				        Mul_sel_Dout,                                               \n";   
Ctrl_PipeReg1 << " 				        RDC_sel_Dout,                                               \n";   
Ctrl_PipeReg1 << " 				        DC_mode_sel_Dout,                                           \n";
Ctrl_PipeReg1 << "                      mode_sel_in,                                                \n";
Ctrl_PipeReg1 << " 			            Mul_sel_in,                                                 \n";   
Ctrl_PipeReg1 << " 			            RDC_sel_in,                                                 \n";   
Ctrl_PipeReg1 << " 				        DC_mode_sel_in,                                             \n";
Ctrl_PipeReg1 << "                      rst_n,                                                      \n";
Ctrl_PipeReg1 << "                      clk                                                         \n";
Ctrl_PipeReg1 << "                      ) ;                                                         \n";
Ctrl_PipeReg1 << "                                                                                  \n";
Ctrl_PipeReg1 << " parameter ROMA_WIDTH  = 12;                                                      \n";
Ctrl_PipeReg1 << " parameter ROMA_ZERO   = 12'h0 ;                                                  \n";
Ctrl_PipeReg1 << "                                                                                  \n";
Ctrl_PipeReg1 << "                                                                                  \n";
Ctrl_PipeReg1 << " output                  mode_sel_Dout ;                                          \n";
Ctrl_PipeReg1 << " output [1:0]            Mul_sel_Dout ;                                           \n";
Ctrl_PipeReg1 << " output [3:0]            RDC_sel_Dout ;                                           \n";
Ctrl_PipeReg1 << " output [1:0]            DC_mode_sel_Dout ;                                       \n";
Ctrl_PipeReg1 << "                                                                                  \n";
Ctrl_PipeReg1 << " input                   mode_sel_in ;                                            \n";
Ctrl_PipeReg1 << " input  [1:0]            Mul_sel_in ;                                             \n";
Ctrl_PipeReg1 << " input  [3:0]            RDC_sel_in ;                                             \n";
Ctrl_PipeReg1 << " input  [1:0]            DC_mode_sel_in ;                                         \n";
Ctrl_PipeReg1 << " input                   rst_n ;                                                  \n";
Ctrl_PipeReg1 << " input                   clk ;                                                    \n";
Ctrl_PipeReg1 << "                                                                                  \n";
Ctrl_PipeReg1 << " reg                  mode_sel_D0reg ;                                            \n";
Ctrl_PipeReg1 << " reg                  mode_sel_D1reg ;                                            \n";
Ctrl_PipeReg1 << " reg                  mode_sel_D2reg ;                                            \n";
Ctrl_PipeReg1 << " reg                  mode_sel_D3reg ;                                            \n";
Ctrl_PipeReg1 << " reg                  mode_sel_D4reg ;                                            \n";
Ctrl_PipeReg1 << " reg                  mode_sel_Dout ;                                             \n";
Ctrl_PipeReg1 << " reg [1:0]            Mul_sel_D0reg ;                                             \n";
Ctrl_PipeReg1 << " reg [1:0]            Mul_sel_D1reg ;                                             \n";
Ctrl_PipeReg1 << " reg [1:0]            Mul_sel_D2reg ;                                             \n";
Ctrl_PipeReg1 << " reg [1:0]            Mul_sel_D3reg ;                                             \n";
Ctrl_PipeReg1 << " reg [1:0]            Mul_sel_D4reg ;                                             \n";
Ctrl_PipeReg1 << " reg [1:0]            Mul_sel_Dout ;                                              \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D0reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D1reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D2reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D3reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D4reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D5reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D6reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_D7reg ;                                             \n";
Ctrl_PipeReg1 << " reg [3:0]            RDC_sel_Dout ;                                              \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D0reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D1reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D2reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D3reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D4reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D5reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D6reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D7reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D8reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D9reg ;                                         \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D10reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D11reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D12reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D13reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D14reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D15reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D16reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D17reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D18reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D19reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D20reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D21reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D22reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D23reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D24reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D25reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D26reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D27reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D28reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D29reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D30reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D31reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D32reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D33reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D34reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D35reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D36reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D37reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D38reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D39reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D40reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D41reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D42reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D43reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D44reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_D45reg ;                                        \n";
Ctrl_PipeReg1 << " reg [1:0]            DC_mode_sel_Dout  ;                                         \n";
Ctrl_PipeReg1 << "                                                                                  \n";
Ctrl_PipeReg1 << "                                                                                  \n";
Ctrl_PipeReg1 << " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n";
Ctrl_PipeReg1 << " 	always @(posedge clk or negedge rst_n) begin                                    \n";
Ctrl_PipeReg1 << " 		if(~rst_n) begin                                                            \n";
Ctrl_PipeReg1 << " 			mode_sel_D0reg <= 1'b0 ;                                                \n";
Ctrl_PipeReg1 << " 			mode_sel_D1reg <= 1'b0 ;                                                \n";
Ctrl_PipeReg1 << " 			mode_sel_D2reg <= 1'b0 ;                                                \n";
Ctrl_PipeReg1 << " 			mode_sel_D3reg <= 1'b0 ;                                                \n";
Ctrl_PipeReg1 << " 			mode_sel_D4reg <= 1'b0 ;                                                \n";
Ctrl_PipeReg1 << " 			mode_sel_Dout <= 1'b0 ;                                                 \n";
Ctrl_PipeReg1 << " 			Mul_sel_D0reg <= 2'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			Mul_sel_D1reg <= 2'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			Mul_sel_D2reg <= 2'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			Mul_sel_D3reg <= 2'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			Mul_sel_D4reg <= 2'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			Mul_sel_Dout <= 2'd0 ;                                                  \n";
Ctrl_PipeReg1 << " 			RDC_sel_D0reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_D1reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_D2reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_D3reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_D4reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_D5reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_D6reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_D7reg <= 4'd0 ;                                                 \n";
Ctrl_PipeReg1 << " 			RDC_sel_Dout <= 4'd0 ;                                                  \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D0reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D1reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D2reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D3reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D4reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D5reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D6reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D7reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D8reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D9reg   <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D10reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D11reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D12reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D13reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D14reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D15reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D16reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D17reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D18reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D19reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D20reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D21reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D22reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D23reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D24reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D25reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D26reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D27reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D28reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D29reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D30reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D31reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D32reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D33reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D34reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D35reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D36reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D37reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D38reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D39reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D40reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D41reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D42reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D43reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D44reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D45reg  <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_Dout    <= 2'd0;                                            \n";
Ctrl_PipeReg1 << " 		end                                                                         \n";
Ctrl_PipeReg1 << " 		else begin                                                                  \n";
Ctrl_PipeReg1 << " 			mode_sel_D0reg <= mode_sel_in ;                                         \n";
Ctrl_PipeReg1 << " 			mode_sel_D1reg <= mode_sel_D0reg ;                                      \n";
Ctrl_PipeReg1 << " 			mode_sel_D2reg <= mode_sel_D1reg ;                                      \n";
Ctrl_PipeReg1 << " 			mode_sel_D3reg <= mode_sel_D2reg ;                                      \n";
Ctrl_PipeReg1 << " 			mode_sel_D4reg <= mode_sel_D3reg ;                                      \n";
Ctrl_PipeReg1 << " 			mode_sel_Dout  <= mode_sel_D4reg ;                                      \n"; 
Ctrl_PipeReg1 << " 			//                                                                      \n";
Ctrl_PipeReg1 << " 			Mul_sel_D0reg <= Mul_sel_in ;                                           \n";
Ctrl_PipeReg1 << " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                        \n";
Ctrl_PipeReg1 << " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                        \n";
Ctrl_PipeReg1 << " 			Mul_sel_D3reg <= Mul_sel_D2reg ;                                        \n";
Ctrl_PipeReg1 << " 			Mul_sel_D4reg <= Mul_sel_D3reg ;                                        \n";
Ctrl_PipeReg1 << " 			Mul_sel_Dout <= Mul_sel_D4reg ;                                         \n";
Ctrl_PipeReg1 << " 			//                                                                      \n";
Ctrl_PipeReg1 << " 			RDC_sel_D0reg <= RDC_sel_in ;                                           \n";
Ctrl_PipeReg1 << " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                        \n";
Ctrl_PipeReg1 << " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                        \n";
Ctrl_PipeReg1 << " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                        \n";
Ctrl_PipeReg1 << " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                        \n";
Ctrl_PipeReg1 << " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                        \n";
Ctrl_PipeReg1 << " 			RDC_sel_D6reg <= RDC_sel_D5reg ;                                        \n";
Ctrl_PipeReg1 << " 			RDC_sel_D7reg <= RDC_sel_D6reg ;                                        \n";
Ctrl_PipeReg1 << " 			RDC_sel_Dout <= RDC_sel_D7reg ;                                         \n";
Ctrl_PipeReg1 << " 			//                                                                      \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;                                  \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;                               \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;                              \n";
Ctrl_PipeReg1 << " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;                              \n";
Ctrl_PipeReg1 << " 		end                                                                         \n";
Ctrl_PipeReg1 << " 	end                                                                             \n";
Ctrl_PipeReg1 << " endmodule                                                                        \n";

     Ctrl_PipeReg1.close(); 
}
//Mixed radix-16 R2P
void CenCtrl::Ctrl_PipeReg1_R2P_Mixed_Radix(std::string string_in){
	 std::ofstream ctrl_pipereg1;
     std::string        string_buf = "/Ctrl_PipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;  
	 ctrl_pipereg1.open(ss.str());	
     ctrl_pipereg1<< " `timescale 1 ns/1 ps                                                             \n";
     ctrl_pipereg1<< " module Ctrl_PipeReg1(mode_sel_Dout,                                              \n";
     ctrl_pipereg1<< " 				        Mul_sel_Dout,                                               \n";
     ctrl_pipereg1<< " 				        RDC_sel_Dout,                                               \n";
     ctrl_pipereg1<< " 				        BU_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< " 				        BU_dc_sel_Dout,                                             \n";
     ctrl_pipereg1<< " 				        DC_mode_sel_Dout,                                           \n";
     ctrl_pipereg1<< "                      mode_sel_in,                                                \n";
     ctrl_pipereg1<< " 			            Mul_sel_in,                                                 \n";
     ctrl_pipereg1<< " 			            RDC_sel_in,                                                 \n";
     ctrl_pipereg1<< " 			            BU_mode_sel_in,                                             \n";
     ctrl_pipereg1<< " 			            BU_dc_sel_in,                                               \n";
     ctrl_pipereg1<< " 			            DC_mode_sel_in,                                             \n";
     ctrl_pipereg1<< "                      rst_n,                                                      \n";
     ctrl_pipereg1<< "                      clk                                                         \n";
     ctrl_pipereg1<< "                      ) ;                                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " parameter ROMA_WIDTH  = " << ROM_width << ";\n";
     ctrl_pipereg1<< " parameter ROMA_ZERO   = " << ROM_width << "'h0 ;\n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " output                  mode_sel_Dout ;                                          \n";
     ctrl_pipereg1<< " output [1:0]            Mul_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [3:0]            RDC_sel_Dout ;                                           \n";
     ctrl_pipereg1<< " output [1:0]            DC_mode_sel_Dout ;                                       \n";
     ctrl_pipereg1<< " output                  BU_mode_sel_Dout ;                                       \n";
     ctrl_pipereg1<< " output                  BU_dc_sel_Dout ;                                         \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " input                   mode_sel_in ;                                            \n";
     ctrl_pipereg1<< " input  [1:0]            Mul_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [3:0]            RDC_sel_in ;                                             \n";
     ctrl_pipereg1<< " input  [1:0]            DC_mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " input                   BU_mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " input                   BU_dc_sel_in ;                                           \n";
     ctrl_pipereg1<< " input                   rst_n ;                                                  \n";
     ctrl_pipereg1<< " input                   clk ;                                                    \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " reg                  mode_sel_D0reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D1reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D2reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D3reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_D4reg ;                                            \n";
     ctrl_pipereg1<< " reg                  mode_sel_Dout ;                                             \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_D45reg ;                                        \n";
     ctrl_pipereg1<< " reg                  BU_mode_sel_Dout  ;                                         \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D0reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D1reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D2reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D3reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D4reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D5reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D6reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D7reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D8reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D9reg ;                                           \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D10reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D11reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D12reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D13reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D14reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D15reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D16reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D17reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D18reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D19reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D20reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D21reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D22reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D23reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D24reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D25reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D26reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D27reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D28reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D29reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D30reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D31reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D32reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D33reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D34reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D35reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D36reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D37reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D38reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D39reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D40reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D41reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D42reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D43reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D44reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_D45reg ;                                          \n";
     ctrl_pipereg1<< " reg                  BU_dc_sel_Dout  ;                                           \n";	 
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D0reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D1reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D2reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D3reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D4reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D5reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D6reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D8reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D9reg ;                                         \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D10reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D11reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D12reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D13reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D14reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D15reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D16reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D17reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D18reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D19reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D20reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D21reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D22reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D23reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D24reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D25reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D26reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D27reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D28reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D29reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D30reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D31reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D32reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D33reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D34reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D35reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D36reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D37reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D38reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D39reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D40reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D41reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D42reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D43reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D44reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_D45reg ;                                        \n";
     ctrl_pipereg1<< " reg [1:0]            DC_mode_sel_Dout  ;                                         \n";
     //-------------------------------------------------------------
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D3reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_D4reg ;                                             \n";
     ctrl_pipereg1<< " reg [1:0]            Mul_sel_Dout ;                                              \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D0reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D1reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D2reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D3reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D4reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D5reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D6reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_D7reg ;                                             \n";
     ctrl_pipereg1<< " reg [3:0]            RDC_sel_Dout ;                                              \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " //mode_sel, Mul_sel delay 4 cycles and RDC_sel, FFT_FSmode_sel  delay 7 cycles   \n";
     ctrl_pipereg1<< " 	always @(posedge clk or negedge rst_n) begin                                    \n";
     ctrl_pipereg1<< " 		if(~rst_n) begin                                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D3reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_D4reg      <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			mode_sel_Dout       <= 1'b0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D3reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_D4reg       <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout        <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D6reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_D7reg       <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout        <= 4'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= 2'd0;                                            \n";	 
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= 2'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg   <= 1'd0;                                            \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg  <= 1'd0;                                             \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg  <= 1'd0;                                             \n";	 
     ctrl_pipereg1<< " 			BU_mode_sel_Dout    <= 1'd0;                                             \n"; 
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg   <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg  <= 1'd0;                                               \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg  <= 1'd0;                                               \n";	 
     ctrl_pipereg1<< " 			BU_dc_sel_Dout    <= 1'd0;                                               \n";     	 
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 		else begin                                                                  \n";
     ctrl_pipereg1<< " 			mode_sel_D0reg <= mode_sel_in ;                                         \n";
     ctrl_pipereg1<< " 			mode_sel_D1reg <= mode_sel_D0reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D2reg <= mode_sel_D1reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D3reg <= mode_sel_D2reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_D4reg <= mode_sel_D3reg ;                                      \n";
     ctrl_pipereg1<< " 			mode_sel_Dout  <= mode_sel_D4reg ;                                      \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			Mul_sel_D0reg <= Mul_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			Mul_sel_D1reg <= Mul_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D2reg <= Mul_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D3reg <= Mul_sel_D2reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_D4reg <= Mul_sel_D3reg ;                                        \n";
     ctrl_pipereg1<< " 			Mul_sel_Dout  <= Mul_sel_D4reg ;                                        \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			RDC_sel_D0reg <= RDC_sel_in ;                                           \n";
     ctrl_pipereg1<< " 			RDC_sel_D1reg <= RDC_sel_D0reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D2reg <= RDC_sel_D1reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D3reg <= RDC_sel_D2reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D4reg <= RDC_sel_D3reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D5reg <= RDC_sel_D4reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D6reg <= RDC_sel_D5reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_D7reg <= RDC_sel_D6reg ;                                        \n";
     ctrl_pipereg1<< " 			RDC_sel_Dout  <= RDC_sel_D7reg ;                                         \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D0reg   <= DC_mode_sel_in;                                  \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D1reg   <= DC_mode_sel_D0reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D2reg   <= DC_mode_sel_D1reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D3reg   <= DC_mode_sel_D2reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D4reg   <= DC_mode_sel_D3reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D5reg   <= DC_mode_sel_D4reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D6reg   <= DC_mode_sel_D5reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D7reg   <= DC_mode_sel_D6reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D8reg   <= DC_mode_sel_D7reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D9reg   <= DC_mode_sel_D8reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D10reg  <= DC_mode_sel_D9reg;                               \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D11reg  <= DC_mode_sel_D10reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D12reg  <= DC_mode_sel_D11reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D13reg  <= DC_mode_sel_D12reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D14reg  <= DC_mode_sel_D13reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D15reg  <= DC_mode_sel_D14reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D16reg  <= DC_mode_sel_D15reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D17reg  <= DC_mode_sel_D16reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D18reg  <= DC_mode_sel_D17reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D19reg  <= DC_mode_sel_D18reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D20reg  <= DC_mode_sel_D19reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D21reg  <= DC_mode_sel_D20reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D22reg  <= DC_mode_sel_D21reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D23reg  <= DC_mode_sel_D22reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D24reg  <= DC_mode_sel_D23reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D25reg  <= DC_mode_sel_D24reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D26reg  <= DC_mode_sel_D25reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D27reg  <= DC_mode_sel_D26reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D28reg  <= DC_mode_sel_D27reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D29reg  <= DC_mode_sel_D28reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D30reg  <= DC_mode_sel_D29reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D31reg  <= DC_mode_sel_D30reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D32reg  <= DC_mode_sel_D31reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D33reg  <= DC_mode_sel_D32reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D34reg  <= DC_mode_sel_D33reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D35reg  <= DC_mode_sel_D34reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D36reg  <= DC_mode_sel_D35reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D37reg  <= DC_mode_sel_D36reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D38reg  <= DC_mode_sel_D37reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D39reg  <= DC_mode_sel_D38reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D40reg  <= DC_mode_sel_D39reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D41reg  <= DC_mode_sel_D40reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D42reg  <= DC_mode_sel_D41reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D43reg  <= DC_mode_sel_D42reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D44reg  <= DC_mode_sel_D43reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_D45reg  <= DC_mode_sel_D44reg;                              \n";
     ctrl_pipereg1<< " 			DC_mode_sel_Dout    <= DC_mode_sel_D45reg;                              \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D0reg  <= BU_mode_sel_in;                                   \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D1reg  <= BU_mode_sel_D0reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D2reg  <= BU_mode_sel_D1reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D3reg  <= BU_mode_sel_D2reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D4reg  <= BU_mode_sel_D3reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D5reg  <= BU_mode_sel_D4reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D6reg  <= BU_mode_sel_D5reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D7reg  <= BU_mode_sel_D6reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D8reg  <= BU_mode_sel_D7reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D9reg  <= BU_mode_sel_D8reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D10reg <= BU_mode_sel_D9reg;                                \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D11reg <= BU_mode_sel_D10reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D12reg <= BU_mode_sel_D11reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D13reg <= BU_mode_sel_D12reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D14reg <= BU_mode_sel_D13reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D15reg <= BU_mode_sel_D14reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D16reg <= BU_mode_sel_D15reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D17reg <= BU_mode_sel_D16reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D18reg <= BU_mode_sel_D17reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D19reg <= BU_mode_sel_D18reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D20reg <= BU_mode_sel_D19reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D21reg <= BU_mode_sel_D20reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D22reg <= BU_mode_sel_D21reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D23reg <= BU_mode_sel_D22reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D24reg <= BU_mode_sel_D23reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D25reg <= BU_mode_sel_D24reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D26reg <= BU_mode_sel_D25reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D27reg <= BU_mode_sel_D26reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D28reg <= BU_mode_sel_D27reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D29reg <= BU_mode_sel_D28reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D30reg <= BU_mode_sel_D29reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D31reg <= BU_mode_sel_D30reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D32reg <= BU_mode_sel_D31reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D33reg <= BU_mode_sel_D32reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D34reg <= BU_mode_sel_D33reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D35reg <= BU_mode_sel_D34reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D36reg <= BU_mode_sel_D35reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D37reg <= BU_mode_sel_D36reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D38reg <= BU_mode_sel_D37reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D39reg <= BU_mode_sel_D38reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D40reg <= BU_mode_sel_D39reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D41reg <= BU_mode_sel_D40reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D42reg <= BU_mode_sel_D41reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D43reg <= BU_mode_sel_D42reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D44reg <= BU_mode_sel_D43reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_D45reg <= BU_mode_sel_D44reg;                               \n";
     ctrl_pipereg1<< " 			BU_mode_sel_Dout   <= BU_mode_sel_D45reg;                               \n";
     ctrl_pipereg1<< " 			//                                                                      \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D0reg  <= BU_dc_sel_in;                                       \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D1reg  <= BU_dc_sel_D0reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D2reg  <= BU_dc_sel_D1reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D3reg  <= BU_dc_sel_D2reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D4reg  <= BU_dc_sel_D3reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D5reg  <= BU_dc_sel_D4reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D6reg  <= BU_dc_sel_D5reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D7reg  <= BU_dc_sel_D6reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D8reg  <= BU_dc_sel_D7reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D9reg  <= BU_dc_sel_D8reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D10reg <= BU_dc_sel_D9reg;                                    \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D11reg <= BU_dc_sel_D10reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D12reg <= BU_dc_sel_D11reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D13reg <= BU_dc_sel_D12reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D14reg <= BU_dc_sel_D13reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D15reg <= BU_dc_sel_D14reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D16reg <= BU_dc_sel_D15reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D17reg <= BU_dc_sel_D16reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D18reg <= BU_dc_sel_D17reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D19reg <= BU_dc_sel_D18reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D20reg <= BU_dc_sel_D19reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D21reg <= BU_dc_sel_D20reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D22reg <= BU_dc_sel_D21reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D23reg <= BU_dc_sel_D22reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D24reg <= BU_dc_sel_D23reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D25reg <= BU_dc_sel_D24reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D26reg <= BU_dc_sel_D25reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D27reg <= BU_dc_sel_D26reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D28reg <= BU_dc_sel_D27reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D29reg <= BU_dc_sel_D28reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D30reg <= BU_dc_sel_D29reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D31reg <= BU_dc_sel_D30reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D32reg <= BU_dc_sel_D31reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D33reg <= BU_dc_sel_D32reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D34reg <= BU_dc_sel_D33reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D35reg <= BU_dc_sel_D34reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D36reg <= BU_dc_sel_D35reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D37reg <= BU_dc_sel_D36reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D38reg <= BU_dc_sel_D37reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D39reg <= BU_dc_sel_D38reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D40reg <= BU_dc_sel_D39reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D41reg <= BU_dc_sel_D40reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D42reg <= BU_dc_sel_D41reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D43reg <= BU_dc_sel_D42reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D44reg <= BU_dc_sel_D43reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_D45reg <= BU_dc_sel_D44reg;                                   \n";
     ctrl_pipereg1<< " 			BU_dc_sel_Dout   <= BU_dc_sel_D45reg;                                   \n";     
     ctrl_pipereg1<< " 		end                                                                         \n";
     ctrl_pipereg1<< " 	end                                                                             \n";
     ctrl_pipereg1<< "                                                                                  \n";
     ctrl_pipereg1<< " endmodule                                                                        \n";
	 ctrl_pipereg1.close();
}
void CenCtrl::R16_WD_buf_R2P(std::string string_in){
	 std::ofstream R16_WD_buf;
     std::string        string_buf = "/R16_WD_buf.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 R16_WD_buf.open(ss.str());
R16_WD_buf << " `timescale 1 ns/1 ps                                        \n";
R16_WD_buf << " module R16_WD_buf(RDC0_D_out,                               \n";
R16_WD_buf << " 			       RDC1_D_out,                              \n";
R16_WD_buf << " 				   RDC2_D_out,                              \n";
R16_WD_buf << " 				   RDC3_D_out,                              \n";
R16_WD_buf << " 				   RDC4_D_out,                              \n";
R16_WD_buf << " 				   RDC5_D_out,                              \n";
R16_WD_buf << " 				   RDC6_D_out,                              \n";
R16_WD_buf << " 				   RDC7_D_out,                              \n";
R16_WD_buf << " 				   RDC8_D_out,                              \n";
R16_WD_buf << " 				   RDC9_D_out,                              \n";
R16_WD_buf << " 				   RDC10_D_out,                             \n";
R16_WD_buf << " 				   RDC11_D_out,                             \n";
R16_WD_buf << " 				   RDC12_D_out,                             \n";
R16_WD_buf << " 				   RDC13_D_out,                             \n";
R16_WD_buf << " 				   RDC14_D_out,                             \n";
R16_WD_buf << " 				   RDC15_D_out,                             \n";
R16_WD_buf << " 		           RDC0_in,                                 \n";
R16_WD_buf << " 				   RDC1_in,                                 \n";
R16_WD_buf << " 				   RDC2_in,                                 \n";
R16_WD_buf << " 				   RDC3_in,                                 \n";
R16_WD_buf << " 				   RDC4_in,                                 \n";
R16_WD_buf << " 				   RDC5_in,                                 \n";
R16_WD_buf << " 				   RDC6_in,                                 \n";
R16_WD_buf << " 				   RDC7_in,                                 \n";
R16_WD_buf << " 				   RDC8_in,                                 \n";
R16_WD_buf << " 				   RDC9_in,                                 \n";
R16_WD_buf << " 				   RDC10_in,                                \n";
R16_WD_buf << " 				   RDC11_in,                                \n";
R16_WD_buf << " 				   RDC12_in,                                \n";
R16_WD_buf << " 				   RDC13_in,                                \n";
R16_WD_buf << " 				   RDC14_in,                                \n";
R16_WD_buf << " 				   RDC15_in,                                \n";
R16_WD_buf << "                   rst_n,                                    \n";
R16_WD_buf << "                   clk                                       \n";
R16_WD_buf << "                   ) ;                                       \n";
R16_WD_buf << " parameter P_WIDTH     = 64 ;                                \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " parameter P_ZERO    = 64'h0 ;                               \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC0_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC1_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC2_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC3_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC4_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC5_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC6_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC7_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC8_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC9_D_out ;                           \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC10_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC11_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC12_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC13_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC14_D_out ;                          \n";
R16_WD_buf << " output [P_WIDTH-1:0] RDC15_D_out ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC0_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC1_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC2_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC3_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC4_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC5_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC6_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC7_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC8_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC9_in ;                               \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC10_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC11_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC12_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC13_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC14_in ;                              \n";
R16_WD_buf << " input [P_WIDTH-1:0] RDC15_in ;                              \n";
R16_WD_buf << " input               rst_n ;                                 \n";
R16_WD_buf << " input               clk ;                                   \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D_out ;                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D_out ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D_out ;                            \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC0_D21_reg  ;                          \n";                       
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC1_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC2_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC3_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC4_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC5_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC6_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC7_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC8_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D0_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D1_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D2_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D3_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D4_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D5_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D6_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D7_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D8_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D9_reg ;                            \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D10_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D11_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D12_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D13_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D14_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D15_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D16_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D17_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D18_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D19_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D20_reg  ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC9_D21_reg  ;                          \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC10_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC11_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC12_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC13_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC14_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D0_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D1_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D2_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D3_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D4_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D5_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D6_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D7_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D8_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D9_reg ;                           \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D10_reg ;                          \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D11_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D12_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D13_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D14_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D15_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D16_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D17_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D18_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D19_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D20_reg  ;                         \n";
R16_WD_buf << " reg  [P_WIDTH-1:0] RDC15_D21_reg  ;                         \n";
R16_WD_buf << "                                                             \n";
R16_WD_buf << " 	//RDC output delay 23 cycles                            \n";
R16_WD_buf << " 	always @(posedge clk or negedge rst_n) begin            \n";
R16_WD_buf << " 		if(~rst_n) begin                                    \n";
R16_WD_buf << " 			RDC0_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC0_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC0_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC1_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC1_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC1_D21_reg <= P_ZERO ;                        \n";                
R16_WD_buf << " 			RDC1_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC2_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC2_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC2_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC3_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC3_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC3_D21_reg <= P_ZERO ;                        \n"; 
R16_WD_buf << " 			RDC3_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC4_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC4_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC4_D21_reg <= P_ZERO ;                        \n";                     
R16_WD_buf << " 			RDC4_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC5_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC5_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC5_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC6_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC6_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC6_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC7_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC7_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC7_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC8_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC8_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC8_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC9_D0_reg  <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D1_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D2_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D3_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D4_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D5_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D6_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D7_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D8_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D9_reg  <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D10_reg <= P_ZERO;                         \n";
R16_WD_buf << " 			RDC9_D11_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D12_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D13_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D14_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D15_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D16_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D17_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D18_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D19_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D20_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D21_reg <= P_ZERO ;                        \n";
R16_WD_buf << " 			RDC9_D_out   <= P_ZERO ;                        \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC10_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC10_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC10_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC11_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC11_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC11_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC12_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC12_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC12_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC13_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC13_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC13_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC14_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC14_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC14_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC15_D0_reg  <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D1_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D2_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D3_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D4_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D5_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D6_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D7_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D8_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D9_reg  <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D10_reg <= P_ZERO;                        \n";
R16_WD_buf << " 			RDC15_D11_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D12_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D13_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D14_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D15_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D16_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D17_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D18_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D19_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D20_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D21_reg <= P_ZERO ;                       \n";
R16_WD_buf << " 			RDC15_D_out   <= P_ZERO ;                       \n";
R16_WD_buf << " 		end                                                 \n";
R16_WD_buf << " 		else begin                                          \n";
R16_WD_buf << " 			RDC0_D0_reg  <= RDC0_in ;                       \n";
R16_WD_buf << " 			RDC0_D1_reg  <= RDC0_D0_reg ;                   \n";
R16_WD_buf << " 			RDC0_D2_reg  <= RDC0_D1_reg ;                   \n";
R16_WD_buf << " 			RDC0_D3_reg  <= RDC0_D2_reg ;                   \n";
R16_WD_buf << " 			RDC0_D4_reg  <= RDC0_D3_reg ;                   \n";
R16_WD_buf << " 			RDC0_D5_reg  <= RDC0_D4_reg ;                   \n";
R16_WD_buf << " 			RDC0_D6_reg  <= RDC0_D5_reg ;                   \n";
R16_WD_buf << " 			RDC0_D7_reg  <= RDC0_D6_reg ;                   \n";
R16_WD_buf << " 			RDC0_D8_reg  <= RDC0_D7_reg ;                   \n";
R16_WD_buf << " 			RDC0_D9_reg  <= RDC0_D8_reg ;                   \n";
R16_WD_buf << " 			RDC0_D10_reg <= RDC0_D9_reg ;                   \n";
R16_WD_buf << " 			RDC0_D11_reg <= RDC0_D10_reg ;                  \n";
R16_WD_buf << " 			RDC0_D12_reg <= RDC0_D11_reg ;                  \n";
R16_WD_buf << " 			RDC0_D13_reg <= RDC0_D12_reg ;                  \n";
R16_WD_buf << " 			RDC0_D14_reg <= RDC0_D13_reg ;                  \n";
R16_WD_buf << " 			RDC0_D15_reg <= RDC0_D14_reg ;                  \n";
R16_WD_buf << " 			RDC0_D16_reg <= RDC0_D15_reg ;                  \n";
R16_WD_buf << " 			RDC0_D17_reg <= RDC0_D16_reg ;                  \n";
R16_WD_buf << " 			RDC0_D18_reg <= RDC0_D17_reg ;                  \n";
R16_WD_buf << " 			RDC0_D19_reg <= RDC0_D18_reg ;                  \n";
R16_WD_buf << " 			RDC0_D20_reg <= RDC0_D19_reg ;                  \n";
R16_WD_buf << " 			RDC0_D21_reg <= RDC0_D20_reg ;                  \n";
R16_WD_buf << " 			RDC0_D_out   <= RDC0_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC1_D0_reg  <= RDC1_in ;                       \n";
R16_WD_buf << " 			RDC1_D1_reg  <= RDC1_D0_reg ;                   \n";
R16_WD_buf << " 			RDC1_D2_reg  <= RDC1_D1_reg ;                   \n";
R16_WD_buf << " 			RDC1_D3_reg  <= RDC1_D2_reg ;                   \n";
R16_WD_buf << " 			RDC1_D4_reg  <= RDC1_D3_reg ;                   \n";
R16_WD_buf << " 			RDC1_D5_reg  <= RDC1_D4_reg ;                   \n";
R16_WD_buf << " 			RDC1_D6_reg  <= RDC1_D5_reg ;                   \n";
R16_WD_buf << " 			RDC1_D7_reg  <= RDC1_D6_reg ;                   \n";
R16_WD_buf << " 			RDC1_D8_reg  <= RDC1_D7_reg ;                   \n";
R16_WD_buf << " 			RDC1_D9_reg  <= RDC1_D8_reg ;                   \n";
R16_WD_buf << " 			RDC1_D10_reg <= RDC1_D9_reg ;                   \n";
R16_WD_buf << " 			RDC1_D11_reg <= RDC1_D10_reg ;                  \n";
R16_WD_buf << " 			RDC1_D12_reg <= RDC1_D11_reg ;                  \n";
R16_WD_buf << " 			RDC1_D13_reg <= RDC1_D12_reg ;                  \n";
R16_WD_buf << " 			RDC1_D14_reg <= RDC1_D13_reg ;                  \n";
R16_WD_buf << " 			RDC1_D15_reg <= RDC1_D14_reg ;                  \n";
R16_WD_buf << " 			RDC1_D16_reg <= RDC1_D15_reg ;                  \n";
R16_WD_buf << " 			RDC1_D17_reg <= RDC1_D16_reg ;                  \n";
R16_WD_buf << " 			RDC1_D18_reg <= RDC1_D17_reg ;                  \n";
R16_WD_buf << " 			RDC1_D19_reg <= RDC1_D18_reg ;                  \n";
R16_WD_buf << " 			RDC1_D20_reg <= RDC1_D19_reg ;                  \n";
R16_WD_buf << " 			RDC1_D21_reg <= RDC1_D20_reg ;                  \n";
R16_WD_buf << " 			RDC1_D_out   <= RDC1_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC2_D0_reg  <= RDC2_in ;                       \n";
R16_WD_buf << " 			RDC2_D1_reg  <= RDC2_D0_reg ;                   \n";
R16_WD_buf << " 			RDC2_D2_reg  <= RDC2_D1_reg ;                   \n";
R16_WD_buf << " 			RDC2_D3_reg  <= RDC2_D2_reg ;                   \n";
R16_WD_buf << " 			RDC2_D4_reg  <= RDC2_D3_reg ;                   \n";
R16_WD_buf << " 			RDC2_D5_reg  <= RDC2_D4_reg ;                   \n";
R16_WD_buf << " 			RDC2_D6_reg  <= RDC2_D5_reg ;                   \n";
R16_WD_buf << " 			RDC2_D7_reg  <= RDC2_D6_reg ;                   \n";
R16_WD_buf << " 			RDC2_D8_reg  <= RDC2_D7_reg ;                   \n";
R16_WD_buf << " 			RDC2_D9_reg  <= RDC2_D8_reg ;                   \n";
R16_WD_buf << " 			RDC2_D10_reg <= RDC2_D9_reg ;                   \n";
R16_WD_buf << " 			RDC2_D11_reg <= RDC2_D10_reg ;                  \n";
R16_WD_buf << " 			RDC2_D12_reg <= RDC2_D11_reg ;                  \n";
R16_WD_buf << " 			RDC2_D13_reg <= RDC2_D12_reg ;                  \n";
R16_WD_buf << " 			RDC2_D14_reg <= RDC2_D13_reg ;                  \n";
R16_WD_buf << " 			RDC2_D15_reg <= RDC2_D14_reg ;                  \n";
R16_WD_buf << " 			RDC2_D16_reg <= RDC2_D15_reg ;                  \n";
R16_WD_buf << " 			RDC2_D17_reg <= RDC2_D16_reg ;                  \n";
R16_WD_buf << " 			RDC2_D18_reg <= RDC2_D17_reg ;                  \n";
R16_WD_buf << " 			RDC2_D19_reg <= RDC2_D18_reg ;                  \n";
R16_WD_buf << " 			RDC2_D20_reg <= RDC2_D19_reg ;                  \n";
R16_WD_buf << " 			RDC2_D21_reg <= RDC2_D20_reg ;                  \n";
R16_WD_buf << " 			RDC2_D_out   <= RDC2_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC3_D0_reg  <= RDC3_in ;                       \n";
R16_WD_buf << " 			RDC3_D1_reg  <= RDC3_D0_reg ;                   \n";
R16_WD_buf << " 			RDC3_D2_reg  <= RDC3_D1_reg ;                   \n";
R16_WD_buf << " 			RDC3_D3_reg  <= RDC3_D2_reg ;                   \n";
R16_WD_buf << " 			RDC3_D4_reg  <= RDC3_D3_reg ;                   \n";
R16_WD_buf << " 			RDC3_D5_reg  <= RDC3_D4_reg ;                   \n";
R16_WD_buf << " 			RDC3_D6_reg  <= RDC3_D5_reg ;                   \n";
R16_WD_buf << " 			RDC3_D7_reg  <= RDC3_D6_reg ;                   \n";
R16_WD_buf << " 			RDC3_D8_reg  <= RDC3_D7_reg ;                   \n";
R16_WD_buf << " 			RDC3_D9_reg  <= RDC3_D8_reg ;                   \n";
R16_WD_buf << " 			RDC3_D10_reg <= RDC3_D9_reg ;                   \n";
R16_WD_buf << " 			RDC3_D11_reg <= RDC3_D10_reg ;                  \n";
R16_WD_buf << " 			RDC3_D12_reg <= RDC3_D11_reg ;                  \n";
R16_WD_buf << " 			RDC3_D13_reg <= RDC3_D12_reg ;                  \n";
R16_WD_buf << " 			RDC3_D14_reg <= RDC3_D13_reg ;                  \n";
R16_WD_buf << " 			RDC3_D15_reg <= RDC3_D14_reg ;                  \n";
R16_WD_buf << " 			RDC3_D16_reg <= RDC3_D15_reg ;                  \n";
R16_WD_buf << " 			RDC3_D17_reg <= RDC3_D16_reg ;                  \n";
R16_WD_buf << " 			RDC3_D18_reg <= RDC3_D17_reg ;                  \n";
R16_WD_buf << " 			RDC3_D19_reg <= RDC3_D18_reg ;                  \n";
R16_WD_buf << " 			RDC3_D20_reg <= RDC3_D19_reg ;                  \n";
R16_WD_buf << " 			RDC3_D21_reg <= RDC3_D20_reg ;                  \n";
R16_WD_buf << " 			RDC3_D_out   <= RDC3_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC4_D0_reg  <= RDC4_in ;                       \n";
R16_WD_buf << " 			RDC4_D1_reg  <= RDC4_D0_reg ;                   \n";
R16_WD_buf << " 			RDC4_D2_reg  <= RDC4_D1_reg ;                   \n";
R16_WD_buf << " 			RDC4_D3_reg  <= RDC4_D2_reg ;                   \n";
R16_WD_buf << " 			RDC4_D4_reg  <= RDC4_D3_reg ;                   \n";
R16_WD_buf << " 			RDC4_D5_reg  <= RDC4_D4_reg ;                   \n";
R16_WD_buf << " 			RDC4_D6_reg  <= RDC4_D5_reg ;                   \n";
R16_WD_buf << " 			RDC4_D7_reg  <= RDC4_D6_reg ;                   \n";
R16_WD_buf << " 			RDC4_D8_reg  <= RDC4_D7_reg ;                   \n";
R16_WD_buf << " 			RDC4_D9_reg  <= RDC4_D8_reg ;                   \n";
R16_WD_buf << " 			RDC4_D10_reg <= RDC4_D9_reg ;                   \n";
R16_WD_buf << " 			RDC4_D11_reg <= RDC4_D10_reg ;                  \n";
R16_WD_buf << " 			RDC4_D12_reg <= RDC4_D11_reg ;                  \n";
R16_WD_buf << " 			RDC4_D13_reg <= RDC4_D12_reg ;                  \n";
R16_WD_buf << " 			RDC4_D14_reg <= RDC4_D13_reg ;                  \n";
R16_WD_buf << " 			RDC4_D15_reg <= RDC4_D14_reg ;                  \n";
R16_WD_buf << " 			RDC4_D16_reg <= RDC4_D15_reg ;                  \n";
R16_WD_buf << " 			RDC4_D17_reg <= RDC4_D16_reg ;                  \n";
R16_WD_buf << " 			RDC4_D18_reg <= RDC4_D17_reg ;                  \n";
R16_WD_buf << " 			RDC4_D19_reg <= RDC4_D18_reg ;                  \n";
R16_WD_buf << " 			RDC4_D20_reg <= RDC4_D19_reg ;                  \n";
R16_WD_buf << " 			RDC4_D21_reg <= RDC4_D20_reg ;                  \n";
R16_WD_buf << " 			RDC4_D_out   <= RDC4_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC5_D0_reg  <= RDC5_in ;                       \n";
R16_WD_buf << " 			RDC5_D1_reg  <= RDC5_D0_reg ;                   \n";
R16_WD_buf << " 			RDC5_D2_reg  <= RDC5_D1_reg ;                   \n";
R16_WD_buf << " 			RDC5_D3_reg  <= RDC5_D2_reg ;                   \n";
R16_WD_buf << " 			RDC5_D4_reg  <= RDC5_D3_reg ;                   \n";
R16_WD_buf << " 			RDC5_D5_reg  <= RDC5_D4_reg ;                   \n";
R16_WD_buf << " 			RDC5_D6_reg  <= RDC5_D5_reg ;                   \n";
R16_WD_buf << " 			RDC5_D7_reg  <= RDC5_D6_reg ;                   \n";
R16_WD_buf << " 			RDC5_D8_reg  <= RDC5_D7_reg ;                   \n";
R16_WD_buf << " 			RDC5_D9_reg  <= RDC5_D8_reg ;                   \n";
R16_WD_buf << " 			RDC5_D10_reg <= RDC5_D9_reg ;                   \n";
R16_WD_buf << " 			RDC5_D11_reg <= RDC5_D10_reg ;                  \n";
R16_WD_buf << " 			RDC5_D12_reg <= RDC5_D11_reg ;                  \n";
R16_WD_buf << " 			RDC5_D13_reg <= RDC5_D12_reg ;                  \n";
R16_WD_buf << " 			RDC5_D14_reg <= RDC5_D13_reg ;                  \n";
R16_WD_buf << " 			RDC5_D15_reg <= RDC5_D14_reg ;                  \n";
R16_WD_buf << " 			RDC5_D16_reg <= RDC5_D15_reg ;                  \n";
R16_WD_buf << " 			RDC5_D17_reg <= RDC5_D16_reg ;                  \n";
R16_WD_buf << " 			RDC5_D18_reg <= RDC5_D17_reg ;                  \n";
R16_WD_buf << " 			RDC5_D19_reg <= RDC5_D18_reg ;                  \n";
R16_WD_buf << " 			RDC5_D20_reg <= RDC5_D19_reg ;                  \n";
R16_WD_buf << " 			RDC5_D21_reg <= RDC5_D20_reg ;                  \n";
R16_WD_buf << " 			RDC5_D_out   <= RDC5_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC6_D0_reg  <= RDC6_in ;                       \n";
R16_WD_buf << " 			RDC6_D1_reg  <= RDC6_D0_reg ;                   \n";
R16_WD_buf << " 			RDC6_D2_reg  <= RDC6_D1_reg ;                   \n";
R16_WD_buf << " 			RDC6_D3_reg  <= RDC6_D2_reg ;                   \n";
R16_WD_buf << " 			RDC6_D4_reg  <= RDC6_D3_reg ;                   \n";
R16_WD_buf << " 			RDC6_D5_reg  <= RDC6_D4_reg ;                   \n";
R16_WD_buf << " 			RDC6_D6_reg  <= RDC6_D5_reg ;                   \n";
R16_WD_buf << " 			RDC6_D7_reg  <= RDC6_D6_reg ;                   \n";
R16_WD_buf << " 			RDC6_D8_reg  <= RDC6_D7_reg ;                   \n";
R16_WD_buf << " 			RDC6_D9_reg  <= RDC6_D8_reg ;                   \n";
R16_WD_buf << " 			RDC6_D10_reg <= RDC6_D9_reg ;                   \n";
R16_WD_buf << " 			RDC6_D11_reg <= RDC6_D10_reg ;                  \n";
R16_WD_buf << " 			RDC6_D12_reg <= RDC6_D11_reg ;                  \n";
R16_WD_buf << " 			RDC6_D13_reg <= RDC6_D12_reg ;                  \n";
R16_WD_buf << " 			RDC6_D14_reg <= RDC6_D13_reg ;                  \n";
R16_WD_buf << " 			RDC6_D15_reg <= RDC6_D14_reg ;                  \n";
R16_WD_buf << " 			RDC6_D16_reg <= RDC6_D15_reg ;                  \n";
R16_WD_buf << " 			RDC6_D17_reg <= RDC6_D16_reg ;                  \n";
R16_WD_buf << " 			RDC6_D18_reg <= RDC6_D17_reg ;                  \n";
R16_WD_buf << " 			RDC6_D19_reg <= RDC6_D18_reg ;                  \n";
R16_WD_buf << " 			RDC6_D20_reg <= RDC6_D19_reg ;                  \n";
R16_WD_buf << " 			RDC6_D21_reg <= RDC6_D20_reg ;                  \n";
R16_WD_buf << " 			RDC6_D_out   <= RDC6_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC7_D0_reg  <= RDC7_in ;                       \n";
R16_WD_buf << " 			RDC7_D1_reg  <= RDC7_D0_reg ;                   \n";
R16_WD_buf << " 			RDC7_D2_reg  <= RDC7_D1_reg ;                   \n";
R16_WD_buf << " 			RDC7_D3_reg  <= RDC7_D2_reg ;                   \n";
R16_WD_buf << " 			RDC7_D4_reg  <= RDC7_D3_reg ;                   \n";
R16_WD_buf << " 			RDC7_D5_reg  <= RDC7_D4_reg ;                   \n";
R16_WD_buf << " 			RDC7_D6_reg  <= RDC7_D5_reg ;                   \n";
R16_WD_buf << " 			RDC7_D7_reg  <= RDC7_D6_reg ;                   \n";
R16_WD_buf << " 			RDC7_D8_reg  <= RDC7_D7_reg ;                   \n";
R16_WD_buf << " 			RDC7_D9_reg  <= RDC7_D8_reg ;                   \n";
R16_WD_buf << " 			RDC7_D10_reg <= RDC7_D9_reg ;                   \n";
R16_WD_buf << " 			RDC7_D11_reg <= RDC7_D10_reg ;                  \n";
R16_WD_buf << " 			RDC7_D12_reg <= RDC7_D11_reg ;                  \n";
R16_WD_buf << " 			RDC7_D13_reg <= RDC7_D12_reg ;                  \n";
R16_WD_buf << " 			RDC7_D14_reg <= RDC7_D13_reg ;                  \n";
R16_WD_buf << " 			RDC7_D15_reg <= RDC7_D14_reg ;                  \n";
R16_WD_buf << " 			RDC7_D16_reg <= RDC7_D15_reg ;                  \n";
R16_WD_buf << " 			RDC7_D17_reg <= RDC7_D16_reg ;                  \n";
R16_WD_buf << " 			RDC7_D18_reg <= RDC7_D17_reg ;                  \n";
R16_WD_buf << " 			RDC7_D19_reg <= RDC7_D18_reg ;                  \n";
R16_WD_buf << " 			RDC7_D20_reg <= RDC7_D19_reg ;                  \n";
R16_WD_buf << " 			RDC7_D21_reg <= RDC7_D20_reg ;                  \n";
R16_WD_buf << " 			RDC7_D_out   <= RDC7_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC8_D0_reg  <= RDC8_in ;                       \n";
R16_WD_buf << " 			RDC8_D1_reg  <= RDC8_D0_reg ;                   \n";
R16_WD_buf << " 			RDC8_D2_reg  <= RDC8_D1_reg ;                   \n";
R16_WD_buf << " 			RDC8_D3_reg  <= RDC8_D2_reg ;                   \n";
R16_WD_buf << " 			RDC8_D4_reg  <= RDC8_D3_reg ;                   \n";
R16_WD_buf << " 			RDC8_D5_reg  <= RDC8_D4_reg ;                   \n";
R16_WD_buf << " 			RDC8_D6_reg  <= RDC8_D5_reg ;                   \n";
R16_WD_buf << " 			RDC8_D7_reg  <= RDC8_D6_reg ;                   \n";
R16_WD_buf << " 			RDC8_D8_reg  <= RDC8_D7_reg ;                   \n";
R16_WD_buf << " 			RDC8_D9_reg  <= RDC8_D8_reg ;                   \n";
R16_WD_buf << " 			RDC8_D10_reg <= RDC8_D9_reg ;                   \n";
R16_WD_buf << " 			RDC8_D11_reg <= RDC8_D10_reg ;                  \n";
R16_WD_buf << " 			RDC8_D12_reg <= RDC8_D11_reg ;                  \n";
R16_WD_buf << " 			RDC8_D13_reg <= RDC8_D12_reg ;                  \n";
R16_WD_buf << " 			RDC8_D14_reg <= RDC8_D13_reg ;                  \n";
R16_WD_buf << " 			RDC8_D15_reg <= RDC8_D14_reg ;                  \n";
R16_WD_buf << " 			RDC8_D16_reg <= RDC8_D15_reg ;                  \n";
R16_WD_buf << " 			RDC8_D17_reg <= RDC8_D16_reg ;                  \n";
R16_WD_buf << " 			RDC8_D18_reg <= RDC8_D17_reg ;                  \n";
R16_WD_buf << " 			RDC8_D19_reg <= RDC8_D18_reg ;                  \n";
R16_WD_buf << " 			RDC8_D20_reg <= RDC8_D19_reg ;                  \n";
R16_WD_buf << " 			RDC8_D21_reg <= RDC8_D20_reg ;                  \n";
R16_WD_buf << " 			RDC8_D_out   <= RDC8_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC9_D0_reg  <= RDC9_in ;                       \n";
R16_WD_buf << " 			RDC9_D1_reg  <= RDC9_D0_reg ;                   \n";
R16_WD_buf << " 			RDC9_D2_reg  <= RDC9_D1_reg ;                   \n";
R16_WD_buf << " 			RDC9_D3_reg  <= RDC9_D2_reg ;                   \n";
R16_WD_buf << " 			RDC9_D4_reg  <= RDC9_D3_reg ;                   \n";
R16_WD_buf << " 			RDC9_D5_reg  <= RDC9_D4_reg ;                   \n";
R16_WD_buf << " 			RDC9_D6_reg  <= RDC9_D5_reg ;                   \n";
R16_WD_buf << " 			RDC9_D7_reg  <= RDC9_D6_reg ;                   \n";
R16_WD_buf << " 			RDC9_D8_reg  <= RDC9_D7_reg ;                   \n";
R16_WD_buf << " 			RDC9_D9_reg  <= RDC9_D8_reg ;                   \n";
R16_WD_buf << " 			RDC9_D10_reg <= RDC9_D9_reg ;                   \n";
R16_WD_buf << " 			RDC9_D11_reg <= RDC9_D10_reg ;                  \n";
R16_WD_buf << " 			RDC9_D12_reg <= RDC9_D11_reg ;                  \n";
R16_WD_buf << " 			RDC9_D13_reg <= RDC9_D12_reg ;                  \n";
R16_WD_buf << " 			RDC9_D14_reg <= RDC9_D13_reg ;                  \n";
R16_WD_buf << " 			RDC9_D15_reg <= RDC9_D14_reg ;                  \n";
R16_WD_buf << " 			RDC9_D16_reg <= RDC9_D15_reg ;                  \n";
R16_WD_buf << " 			RDC9_D17_reg <= RDC9_D16_reg ;                  \n";
R16_WD_buf << " 			RDC9_D18_reg <= RDC9_D17_reg ;                  \n";
R16_WD_buf << " 			RDC9_D19_reg <= RDC9_D18_reg ;                  \n";
R16_WD_buf << " 			RDC9_D20_reg <= RDC9_D19_reg ;                  \n";
R16_WD_buf << " 			RDC9_D21_reg <= RDC9_D20_reg ;                  \n";
R16_WD_buf << " 			RDC9_D_out   <= RDC9_D21_reg ;                  \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC10_D0_reg  <= RDC10_in ;                     \n";
R16_WD_buf << " 			RDC10_D1_reg  <= RDC10_D0_reg ;                 \n";
R16_WD_buf << " 			RDC10_D2_reg  <= RDC10_D1_reg ;                 \n";
R16_WD_buf << " 			RDC10_D3_reg  <= RDC10_D2_reg ;                 \n";
R16_WD_buf << " 			RDC10_D4_reg  <= RDC10_D3_reg ;                 \n";
R16_WD_buf << " 			RDC10_D5_reg  <= RDC10_D4_reg ;                 \n";
R16_WD_buf << " 			RDC10_D6_reg  <= RDC10_D5_reg ;                 \n";
R16_WD_buf << " 			RDC10_D7_reg  <= RDC10_D6_reg ;                 \n";
R16_WD_buf << " 			RDC10_D8_reg  <= RDC10_D7_reg ;                 \n";
R16_WD_buf << " 			RDC10_D9_reg  <= RDC10_D8_reg ;                 \n";
R16_WD_buf << " 			RDC10_D10_reg <= RDC10_D9_reg ;                 \n";
R16_WD_buf << " 			RDC10_D11_reg <= RDC10_D10_reg ;                \n";
R16_WD_buf << " 			RDC10_D12_reg <= RDC10_D11_reg ;                \n";
R16_WD_buf << " 			RDC10_D13_reg <= RDC10_D12_reg ;                \n";
R16_WD_buf << " 			RDC10_D14_reg <= RDC10_D13_reg ;                \n";
R16_WD_buf << " 			RDC10_D15_reg <= RDC10_D14_reg ;                \n";
R16_WD_buf << " 			RDC10_D16_reg <= RDC10_D15_reg ;                \n";
R16_WD_buf << " 			RDC10_D17_reg <= RDC10_D16_reg ;                \n";
R16_WD_buf << " 			RDC10_D18_reg <= RDC10_D17_reg ;                \n";
R16_WD_buf << " 			RDC10_D19_reg <= RDC10_D18_reg ;                \n";
R16_WD_buf << " 			RDC10_D20_reg <= RDC10_D19_reg ;                \n";
R16_WD_buf << " 			RDC10_D21_reg <= RDC10_D20_reg ;                \n";
R16_WD_buf << " 			RDC10_D_out   <= RDC10_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC11_D0_reg  <= RDC11_in ;                     \n";
R16_WD_buf << " 			RDC11_D1_reg  <= RDC11_D0_reg ;                 \n";
R16_WD_buf << " 			RDC11_D2_reg  <= RDC11_D1_reg ;                 \n";
R16_WD_buf << " 			RDC11_D3_reg  <= RDC11_D2_reg ;                 \n";
R16_WD_buf << " 			RDC11_D4_reg  <= RDC11_D3_reg ;                 \n";
R16_WD_buf << " 			RDC11_D5_reg  <= RDC11_D4_reg ;                 \n";
R16_WD_buf << " 			RDC11_D6_reg  <= RDC11_D5_reg ;                 \n";
R16_WD_buf << " 			RDC11_D7_reg  <= RDC11_D6_reg ;                 \n";
R16_WD_buf << " 			RDC11_D8_reg  <= RDC11_D7_reg ;                 \n";
R16_WD_buf << " 			RDC11_D9_reg  <= RDC11_D8_reg ;                 \n";
R16_WD_buf << " 			RDC11_D10_reg <= RDC11_D9_reg ;                 \n";
R16_WD_buf << " 			RDC11_D11_reg <= RDC11_D10_reg ;                \n";
R16_WD_buf << " 			RDC11_D12_reg <= RDC11_D11_reg ;                \n";
R16_WD_buf << " 			RDC11_D13_reg <= RDC11_D12_reg ;                \n";
R16_WD_buf << " 			RDC11_D14_reg <= RDC11_D13_reg ;                \n";
R16_WD_buf << " 			RDC11_D15_reg <= RDC11_D14_reg ;                \n";
R16_WD_buf << " 			RDC11_D16_reg <= RDC11_D15_reg ;                \n";
R16_WD_buf << " 			RDC11_D17_reg <= RDC11_D16_reg ;                \n";
R16_WD_buf << " 			RDC11_D18_reg <= RDC11_D17_reg ;                \n";
R16_WD_buf << " 			RDC11_D19_reg <= RDC11_D18_reg ;                \n";
R16_WD_buf << " 			RDC11_D20_reg <= RDC11_D19_reg ;                \n";
R16_WD_buf << " 			RDC11_D21_reg <= RDC11_D20_reg ;                \n";
R16_WD_buf << " 			RDC11_D_out   <= RDC11_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC12_D0_reg  <= RDC12_in ;                     \n";
R16_WD_buf << " 			RDC12_D1_reg  <= RDC12_D0_reg ;                 \n";
R16_WD_buf << " 			RDC12_D2_reg  <= RDC12_D1_reg ;                 \n";
R16_WD_buf << " 			RDC12_D3_reg  <= RDC12_D2_reg ;                 \n";
R16_WD_buf << " 			RDC12_D4_reg  <= RDC12_D3_reg ;                 \n";
R16_WD_buf << " 			RDC12_D5_reg  <= RDC12_D4_reg ;                 \n";
R16_WD_buf << " 			RDC12_D6_reg  <= RDC12_D5_reg ;                 \n";
R16_WD_buf << " 			RDC12_D7_reg  <= RDC12_D6_reg ;                 \n";
R16_WD_buf << " 			RDC12_D8_reg  <= RDC12_D7_reg ;                 \n";
R16_WD_buf << " 			RDC12_D9_reg  <= RDC12_D8_reg ;                 \n";
R16_WD_buf << " 			RDC12_D10_reg <= RDC12_D9_reg ;                 \n";
R16_WD_buf << " 			RDC12_D11_reg <= RDC12_D10_reg ;                \n";
R16_WD_buf << " 			RDC12_D12_reg <= RDC12_D11_reg ;                \n";
R16_WD_buf << " 			RDC12_D13_reg <= RDC12_D12_reg ;                \n";
R16_WD_buf << " 			RDC12_D14_reg <= RDC12_D13_reg ;                \n";
R16_WD_buf << " 			RDC12_D15_reg <= RDC12_D14_reg ;                \n";
R16_WD_buf << " 			RDC12_D16_reg <= RDC12_D15_reg ;                \n";
R16_WD_buf << " 			RDC12_D17_reg <= RDC12_D16_reg ;                \n";
R16_WD_buf << " 			RDC12_D18_reg <= RDC12_D17_reg ;                \n";
R16_WD_buf << " 			RDC12_D19_reg <= RDC12_D18_reg ;                \n";
R16_WD_buf << " 			RDC12_D20_reg <= RDC12_D19_reg ;                \n";
R16_WD_buf << " 			RDC12_D21_reg <= RDC12_D20_reg ;                \n";
R16_WD_buf << " 			RDC12_D_out   <= RDC12_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC13_D0_reg  <= RDC13_in ;                     \n";
R16_WD_buf << " 			RDC13_D1_reg  <= RDC13_D0_reg ;                 \n";
R16_WD_buf << " 			RDC13_D2_reg  <= RDC13_D1_reg ;                 \n";
R16_WD_buf << " 			RDC13_D3_reg  <= RDC13_D2_reg ;                 \n";
R16_WD_buf << " 			RDC13_D4_reg  <= RDC13_D3_reg ;                 \n";
R16_WD_buf << " 			RDC13_D5_reg  <= RDC13_D4_reg ;                 \n";
R16_WD_buf << " 			RDC13_D6_reg  <= RDC13_D5_reg ;                 \n";
R16_WD_buf << " 			RDC13_D7_reg  <= RDC13_D6_reg ;                 \n";
R16_WD_buf << " 			RDC13_D8_reg  <= RDC13_D7_reg ;                 \n";
R16_WD_buf << " 			RDC13_D9_reg  <= RDC13_D8_reg ;                 \n";
R16_WD_buf << " 			RDC13_D10_reg <= RDC13_D9_reg ;                 \n";
R16_WD_buf << " 			RDC13_D11_reg <= RDC13_D10_reg ;                \n";
R16_WD_buf << " 			RDC13_D12_reg <= RDC13_D11_reg ;                \n";
R16_WD_buf << " 			RDC13_D13_reg <= RDC13_D12_reg ;                \n";
R16_WD_buf << " 			RDC13_D14_reg <= RDC13_D13_reg ;                \n";
R16_WD_buf << " 			RDC13_D15_reg <= RDC13_D14_reg ;                \n";
R16_WD_buf << " 			RDC13_D16_reg <= RDC13_D15_reg ;                \n";
R16_WD_buf << " 			RDC13_D17_reg <= RDC13_D16_reg ;                \n";
R16_WD_buf << " 			RDC13_D18_reg <= RDC13_D17_reg ;                \n";
R16_WD_buf << " 			RDC13_D19_reg <= RDC13_D18_reg ;                \n";
R16_WD_buf << " 			RDC13_D20_reg <= RDC13_D19_reg ;                \n";
R16_WD_buf << " 			RDC13_D21_reg <= RDC13_D20_reg ;                \n";
R16_WD_buf << " 			RDC13_D_out   <= RDC13_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC14_D0_reg  <= RDC14_in ;                     \n";
R16_WD_buf << " 			RDC14_D1_reg  <= RDC14_D0_reg ;                 \n";
R16_WD_buf << " 			RDC14_D2_reg  <= RDC14_D1_reg ;                 \n";
R16_WD_buf << " 			RDC14_D3_reg  <= RDC14_D2_reg ;                 \n";
R16_WD_buf << " 			RDC14_D4_reg  <= RDC14_D3_reg ;                 \n";
R16_WD_buf << " 			RDC14_D5_reg  <= RDC14_D4_reg ;                 \n";
R16_WD_buf << " 			RDC14_D6_reg  <= RDC14_D5_reg ;                 \n";
R16_WD_buf << " 			RDC14_D7_reg  <= RDC14_D6_reg ;                 \n";
R16_WD_buf << " 			RDC14_D8_reg  <= RDC14_D7_reg ;                 \n";
R16_WD_buf << " 			RDC14_D9_reg  <= RDC14_D8_reg ;                 \n";
R16_WD_buf << " 			RDC14_D10_reg <= RDC14_D9_reg ;                 \n";
R16_WD_buf << " 			RDC14_D11_reg <= RDC14_D10_reg ;                \n";
R16_WD_buf << " 			RDC14_D12_reg <= RDC14_D11_reg ;                \n";
R16_WD_buf << " 			RDC14_D13_reg <= RDC14_D12_reg ;                \n";
R16_WD_buf << " 			RDC14_D14_reg <= RDC14_D13_reg ;                \n";
R16_WD_buf << " 			RDC14_D15_reg <= RDC14_D14_reg ;                \n";
R16_WD_buf << " 			RDC14_D16_reg <= RDC14_D15_reg ;                \n";
R16_WD_buf << " 			RDC14_D17_reg <= RDC14_D16_reg ;                \n";
R16_WD_buf << " 			RDC14_D18_reg <= RDC14_D17_reg ;                \n";
R16_WD_buf << " 			RDC14_D19_reg <= RDC14_D18_reg ;                \n";
R16_WD_buf << " 			RDC14_D20_reg <= RDC14_D19_reg ;                \n";
R16_WD_buf << " 			RDC14_D21_reg <= RDC14_D20_reg ;                \n";
R16_WD_buf << " 			RDC14_D_out   <= RDC14_D21_reg ;                \n";
R16_WD_buf << " 			//                                              \n";
R16_WD_buf << " 			RDC15_D0_reg  <= RDC15_in ;                     \n";
R16_WD_buf << " 			RDC15_D1_reg  <= RDC15_D0_reg ;                 \n";
R16_WD_buf << " 			RDC15_D2_reg  <= RDC15_D1_reg ;                 \n";
R16_WD_buf << " 			RDC15_D3_reg  <= RDC15_D2_reg ;                 \n";
R16_WD_buf << " 			RDC15_D4_reg  <= RDC15_D3_reg ;                 \n";
R16_WD_buf << " 			RDC15_D5_reg  <= RDC15_D4_reg ;                 \n";
R16_WD_buf << " 			RDC15_D6_reg  <= RDC15_D5_reg ;                 \n";
R16_WD_buf << " 			RDC15_D7_reg  <= RDC15_D6_reg ;                 \n";
R16_WD_buf << " 			RDC15_D8_reg  <= RDC15_D7_reg ;                 \n";
R16_WD_buf << " 			RDC15_D9_reg  <= RDC15_D8_reg ;                 \n";
R16_WD_buf << " 			RDC15_D10_reg <= RDC15_D9_reg ;                 \n";
R16_WD_buf << " 			RDC15_D11_reg <= RDC15_D10_reg ;                \n";
R16_WD_buf << " 			RDC15_D12_reg <= RDC15_D11_reg ;                \n";
R16_WD_buf << " 			RDC15_D13_reg <= RDC15_D12_reg ;                \n";
R16_WD_buf << " 			RDC15_D14_reg <= RDC15_D13_reg ;                \n";
R16_WD_buf << " 			RDC15_D15_reg <= RDC15_D14_reg ;                \n";
R16_WD_buf << " 			RDC15_D16_reg <= RDC15_D15_reg ;                \n";
R16_WD_buf << " 			RDC15_D17_reg <= RDC15_D16_reg ;                \n";
R16_WD_buf << " 			RDC15_D18_reg <= RDC15_D17_reg ;                \n";
R16_WD_buf << " 			RDC15_D19_reg <= RDC15_D18_reg ;                \n";
R16_WD_buf << " 			RDC15_D20_reg <= RDC15_D19_reg ;                \n";
R16_WD_buf << " 			RDC15_D21_reg <= RDC15_D20_reg ;                \n";
R16_WD_buf << " 			RDC15_D_out   <= RDC15_D21_reg ;                \n";
R16_WD_buf << " 		end                                                 \n";
R16_WD_buf << " 	end                                                     \n";
R16_WD_buf << " endmodule                                                   \n";
	 R16_WD_buf.close();
}
void CenCtrl::R16_ROMPipeReg1_R2P(std::string string_in){
	 std::ofstream R16_ROMPipeReg1;
     std::string        string_buf = "/R16_ROMPipeReg1.v";
     std::stringstream  ss;
     ss << string_in << string_buf;       
	 R16_ROMPipeReg1.open(ss.str());
R16_ROMPipeReg1 << " `timescale 1 ns/1 ps                                            \n";
R16_ROMPipeReg1 << " module R16_ROMPipeReg1(ROMD0_Dout,                              \n";
R16_ROMPipeReg1 << " 				         ROMD1_Dout,                             \n"; 
R16_ROMPipeReg1 << " 				         ROMD2_Dout,                             \n"; 
R16_ROMPipeReg1 << " 				         ROMD3_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD4_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD5_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD6_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     ROMD7_Dout,                             \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD0_Dout,                         \n"; 
R16_ROMPipeReg1 << " 				         IFFTROMD1_Dout,                         \n"; 
R16_ROMPipeReg1 << " 				         IFFTROMD2_Dout,                         \n"; 
R16_ROMPipeReg1 << " 				         IFFTROMD3_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD4_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD5_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD6_Dout,                         \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD7_Dout,                         \n"; 
R16_ROMPipeReg1 << " 			             ROMD0_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD1_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD2_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD3_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD4_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD5_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD6_in,                               \n"; 
R16_ROMPipeReg1 << " 					     ROMD7_in,                               \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD0_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD1_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD2_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD3_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD4_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD5_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD6_in,                           \n"; 
R16_ROMPipeReg1 << " 					     IFFTROMD7_in,                           \n"; 
R16_ROMPipeReg1 << "                        rst_n,                                   \n";
R16_ROMPipeReg1 << "                        clk                                      \n";
R16_ROMPipeReg1 << "                        ) ;                                      \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " parameter P_WIDTH   = 64 ;					                     \n";
R16_ROMPipeReg1 << " parameter SD_WIDTH  = 128 ;                                     \n";
R16_ROMPipeReg1 << " parameter P_ZERO    = 64'h0 ;                                   \n";
R16_ROMPipeReg1 << " parameter SD_ZERO   = 128'h0 ;                                  \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " output [P_WIDTH-1:0]    ROMD0_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD1_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD2_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD3_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD4_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD5_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD6_Dout ;                            \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   ROMD7_Dout ;                            \n";
R16_ROMPipeReg1 << " output [P_WIDTH-1:0]    IFFTROMD0_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                        \n";
R16_ROMPipeReg1 << " output [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                        \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " input  [P_WIDTH-1:0]    ROMD0_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD1_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD2_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD3_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD4_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD5_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD6_in ;                              \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   ROMD7_in ;                              \n";
R16_ROMPipeReg1 << " input  [P_WIDTH-1:0]    IFFTROMD0_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD1_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD2_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD3_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD4_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD5_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD6_in ;                          \n";
R16_ROMPipeReg1 << " input  [SD_WIDTH-1:0]   IFFTROMD7_in ;                          \n";
R16_ROMPipeReg1 << " input                   rst_n ;                                 \n";
R16_ROMPipeReg1 << " input                   clk ;                                   \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_Dout ;                               \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_Dout ;                           \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_Dout ;                           \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    ROMD0_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD1_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD2_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD3_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD4_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD5_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD6_D4reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D0reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D1reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D2reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D3reg ;                              \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   ROMD7_D4reg ;                              \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [P_WIDTH-1:0]    IFFTROMD0_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD1_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD2_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD3_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD4_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD5_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD6_D4reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D0reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D1reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D2reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D3reg ;                          \n";
R16_ROMPipeReg1 << " reg [SD_WIDTH-1:0]   IFFTROMD7_D4reg ;                          \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " 	//delay 6 cycles                                             \n"; 
R16_ROMPipeReg1 << " 	always @(posedge clk or negedge rst_n) begin                 \n"; 
R16_ROMPipeReg1 << " 		if(~rst_n) begin                                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D0reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D1reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D2reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D3reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D4reg <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			ROMD0_Dout  <= P_ZERO ;                              \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD1_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD2_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD3_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD4_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD5_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD6_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D0reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D1reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D2reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D3reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D4reg <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			ROMD7_Dout  <= SD_ZERO ;                             \n"; 
R16_ROMPipeReg1 << " 			//---                                                \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D0reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D1reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D2reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D3reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D4reg <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_Dout  <= P_ZERO ;                          \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D0reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D1reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D2reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D3reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D4reg <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_Dout  <= SD_ZERO ;                         \n"; 
R16_ROMPipeReg1 << " 		end                                                      \n"; 
R16_ROMPipeReg1 << " 		else begin                                               \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D0reg <= ROMD0_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D1reg <= ROMD0_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D2reg <= ROMD0_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D3reg <= ROMD0_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_D4reg <= ROMD0_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD0_Dout  <= ROMD0_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D0reg <= ROMD1_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D1reg <= ROMD1_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D2reg <= ROMD1_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D3reg <= ROMD1_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_D4reg <= ROMD1_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD1_Dout  <= ROMD1_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D0reg <= ROMD2_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D1reg <= ROMD2_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D2reg <= ROMD2_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D3reg <= ROMD2_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_D4reg <= ROMD2_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD2_Dout  <= ROMD2_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D0reg <= ROMD3_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D1reg <= ROMD3_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D2reg <= ROMD3_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D3reg <= ROMD3_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_D4reg <= ROMD3_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD3_Dout  <= ROMD3_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D0reg <= ROMD4_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D1reg <= ROMD4_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D2reg <= ROMD4_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D3reg <= ROMD4_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_D4reg <= ROMD4_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD4_Dout  <= ROMD4_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D0reg <= ROMD5_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D1reg <= ROMD5_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D2reg <= ROMD5_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D3reg <= ROMD5_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_D4reg <= ROMD5_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD5_Dout  <= ROMD5_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D0reg <= ROMD6_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D1reg <= ROMD6_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D2reg <= ROMD6_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D3reg <= ROMD6_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_D4reg <= ROMD6_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD6_Dout  <= ROMD6_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D0reg <= ROMD7_in ;                            \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D1reg <= ROMD7_D0reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D2reg <= ROMD7_D1reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D3reg <= ROMD7_D2reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_D4reg <= ROMD7_D3reg ;                         \n"; 
R16_ROMPipeReg1 << " 			ROMD7_Dout  <= ROMD7_D4reg ;                         \n"; 
R16_ROMPipeReg1 << " 			//---                                                \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D0reg <= IFFTROMD0_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D1reg <= IFFTROMD0_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D2reg <= IFFTROMD0_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D3reg <= IFFTROMD0_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_D4reg <= IFFTROMD0_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD0_Dout  <= IFFTROMD0_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D0reg <= IFFTROMD1_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D1reg <= IFFTROMD1_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D2reg <= IFFTROMD1_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D3reg <= IFFTROMD1_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_D4reg <= IFFTROMD1_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD1_Dout  <= IFFTROMD1_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D0reg <= IFFTROMD2_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D1reg <= IFFTROMD2_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D2reg <= IFFTROMD2_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D3reg <= IFFTROMD2_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_D4reg <= IFFTROMD2_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD2_Dout  <= IFFTROMD2_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D0reg <= IFFTROMD3_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D1reg <= IFFTROMD3_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D2reg <= IFFTROMD3_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D3reg <= IFFTROMD3_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_D4reg <= IFFTROMD3_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD3_Dout  <= IFFTROMD3_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D0reg <= IFFTROMD4_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D1reg <= IFFTROMD4_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D2reg <= IFFTROMD4_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D3reg <= IFFTROMD4_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_D4reg <= IFFTROMD4_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD4_Dout  <= IFFTROMD4_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D0reg <= IFFTROMD5_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D1reg <= IFFTROMD5_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D2reg <= IFFTROMD5_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D3reg <= IFFTROMD5_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_D4reg <= IFFTROMD5_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD5_Dout  <= IFFTROMD5_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D0reg <= IFFTROMD6_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D1reg <= IFFTROMD6_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D2reg <= IFFTROMD6_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D3reg <= IFFTROMD6_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_D4reg <= IFFTROMD6_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD6_Dout  <= IFFTROMD6_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 			//                                                   \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D0reg <= IFFTROMD7_in ;                    \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D1reg <= IFFTROMD7_D0reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D2reg <= IFFTROMD7_D1reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D3reg <= IFFTROMD7_D2reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_D4reg <= IFFTROMD7_D3reg ;                 \n"; 
R16_ROMPipeReg1 << " 			IFFTROMD7_Dout  <= IFFTROMD7_D4reg ;                 \n"; 
R16_ROMPipeReg1 << " 		end                                                      \n"; 
R16_ROMPipeReg1 << " 	end                                                          \n"; 
R16_ROMPipeReg1 << "                                                                 \n";
R16_ROMPipeReg1 << " endmodule                                                       \n";

     R16_ROMPipeReg1.close();	 
}

